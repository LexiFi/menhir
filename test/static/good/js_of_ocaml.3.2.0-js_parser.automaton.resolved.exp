State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FUNCTION shift to state 447
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 453
-- On source_element shift to state 454
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On program shift to state 496
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(source_element) shift to state 497
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On function_declaration shift to state 456
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On EOF
--   reduce production list(source_element) ->

State 1:
## Known stack suffix:
## T_WITH
## LR(1) items:
with_statement -> T_WITH . T_LPAREN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## T_WITH T_LPAREN
## LR(1) items:
with_statement -> T_WITH T_LPAREN . expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 493
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 3:
## Known stack suffix:
## T_VOID
## LR(1) items:
pre_in_expression -> T_VOID . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 492
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 4:
## Known stack suffix:
## T_TYPEOF
## LR(1) items:
pre_in_expression -> T_TYPEOF . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 491
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 5:
## Known stack suffix:
## T_TRUE
## LR(1) items:
boolean_literal -> T_TRUE . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean_literal -> T_TRUE

State 6:
## Known stack suffix:
## T_THIS
## LR(1) items:
primary_expression_no_statement -> T_THIS . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> T_THIS

State 7:
## Known stack suffix:
## T_STRING
## LR(1) items:
primary_expression_no_statement -> T_STRING . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> T_STRING

State 8:
## Known stack suffix:
## T_REGEX
## LR(1) items:
regex_literal -> T_REGEX . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_literal -> T_REGEX

State 9:
## Known stack suffix:
## T_PLUS
## LR(1) items:
pre_in_expression -> T_PLUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 490
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 10:
## Known stack suffix:
## T_NUMBER
## LR(1) items:
numeric_literal -> T_NUMBER . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production numeric_literal -> T_NUMBER

State 11:
## Known stack suffix:
## T_NULL
## LR(1) items:
null_literal -> T_NULL . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production null_literal -> T_NULL

State 12:
## Known stack suffix:
## T_NOT
## LR(1) items:
pre_in_expression -> T_NOT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 489
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 13:
## Known stack suffix:
## T_NEW
## LR(1) items:
member_expression -> T_NEW . member_expression arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression -> T_NEW . new_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NEW shift to state 13
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 486
-- On member_expression shift to state 487
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 14:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
primary_expression_no_statement -> T_LPAREN . expression T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 484
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 15:
## Known stack suffix:
## T_MINUS
## LR(1) items:
pre_in_expression -> T_MINUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 483
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 16:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
curly_block(empty) -> T_LCURLY . empty T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) -> T_LCURLY . separated_or_terminated_list(T_COMMA,object_key_value) T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_STRING shift to state 17
-- On T_NUMBER shift to state 10
-- On T_IDENTIFIER shift to state 18
-- On separated_or_terminated_list(T_COMMA,object_key_value) shift to state 19
-- On property_name shift to state 21
-- On object_key_value shift to state 477
-- On numeric_literal shift to state 480
-- On empty shift to state 481
## Reductions:
-- On T_RCURLY
--   reduce production empty ->

State 17:
## Known stack suffix:
## T_STRING
## LR(1) items:
property_name -> T_STRING . [ T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> T_STRING

State 18:
## Known stack suffix:
## T_IDENTIFIER
## LR(1) items:
property_name -> T_IDENTIFIER . [ T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> T_IDENTIFIER

State 19:
## Known stack suffix:
## T_LCURLY separated_or_terminated_list(T_COMMA,object_key_value)
## LR(1) items:
curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) -> T_LCURLY separated_or_terminated_list(T_COMMA,object_key_value) . T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RCURLY shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## T_LCURLY separated_or_terminated_list(T_COMMA,object_key_value) T_RCURLY
## LR(1) items:
curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) -> T_LCURLY separated_or_terminated_list(T_COMMA,object_key_value) T_RCURLY . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) -> T_LCURLY separated_or_terminated_list(T_COMMA,object_key_value) T_RCURLY

State 21:
## Known stack suffix:
## property_name
## LR(1) items:
object_key_value -> property_name . T_COLON assignment_expression [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_COLON shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## property_name T_COLON
## LR(1) items:
object_key_value -> property_name T_COLON . assignment_expression [ T_RCURLY T_COMMA ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 476
-- On array_literal shift to state 87
## Reductions:

State 23:
## Known stack suffix:
## T_LBRACKET
## LR(1) items:
array_literal -> T_LBRACKET . elison T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
array_literal -> T_LBRACKET . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
array_literal -> T_LBRACKET . element_list T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
array_literal -> T_LBRACKET . element_list_rev elison_rev T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_RBRACKET shift to state 24
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_COMMA shift to state 462
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On elison_rev shift to state 463
-- On elison shift to state 465
-- On element_list_rev shift to state 468
-- On element_list shift to state 473
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 475
-- On array_literal shift to state 87
## Reductions:

State 24:
## Known stack suffix:
## T_LBRACKET T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET T_RBRACKET

State 25:
## Known stack suffix:
## T_INCR_NB
## LR(1) items:
pre_in_expression -> T_INCR_NB . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 461
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 26:
## Known stack suffix:
## T_INCR
## LR(1) items:
pre_in_expression -> T_INCR . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 460
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 27:
## Known stack suffix:
## T_IDENTIFIER
## LR(1) items:
variable_with_loc -> T_IDENTIFIER . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_with_loc -> T_IDENTIFIER

State 28:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_expression -> T_FUNCTION . option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 30
-- On option(variable) shift to state 31
-- On identifier shift to state 36
## Reductions:
-- On T_LPAREN
--   reduce production option(variable) ->

State 29:
## Known stack suffix:
## T_IDENTIFIER
## LR(1) items:
identifier -> T_IDENTIFIER . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> T_IDENTIFIER

State 30:
## Known stack suffix:
## variable
## LR(1) items:
option(variable) -> variable . [ T_LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(variable) -> variable

State 31:
## Known stack suffix:
## T_FUNCTION option(variable)
## LR(1) items:
function_expression -> T_FUNCTION option(variable) . T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_LPAREN shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## T_FUNCTION option(variable) T_LPAREN
## LR(1) items:
function_expression -> T_FUNCTION option(variable) T_LPAREN . loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 33
-- On separated_nonempty_list(T_COMMA,variable) shift to state 37
-- On loption(separated_nonempty_list(T_COMMA,variable)) shift to state 38
-- On identifier shift to state 36
## Reductions:
-- On T_RPAREN
--   reduce production loption(separated_nonempty_list(T_COMMA,variable)) ->

State 33:
## Known stack suffix:
## variable
## LR(1) items:
separated_nonempty_list(T_COMMA,variable) -> variable . [ T_RPAREN ]
separated_nonempty_list(T_COMMA,variable) -> variable . T_COMMA separated_nonempty_list(T_COMMA,variable) [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 34
## Reductions:
-- On T_RPAREN
--   reduce production separated_nonempty_list(T_COMMA,variable) -> variable

State 34:
## Known stack suffix:
## variable T_COMMA
## LR(1) items:
separated_nonempty_list(T_COMMA,variable) -> variable T_COMMA . separated_nonempty_list(T_COMMA,variable) [ T_RPAREN ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 33
-- On separated_nonempty_list(T_COMMA,variable) shift to state 35
-- On identifier shift to state 36
## Reductions:

State 35:
## Known stack suffix:
## variable T_COMMA separated_nonempty_list(T_COMMA,variable)
## LR(1) items:
separated_nonempty_list(T_COMMA,variable) -> variable T_COMMA separated_nonempty_list(T_COMMA,variable) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(T_COMMA,variable) -> variable T_COMMA separated_nonempty_list(T_COMMA,variable)

State 36:
## Known stack suffix:
## identifier
## LR(1) items:
variable -> identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT T_ASSIGN EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> identifier

State 37:
## Known stack suffix:
## separated_nonempty_list(T_COMMA,variable)
## LR(1) items:
loption(separated_nonempty_list(T_COMMA,variable)) -> separated_nonempty_list(T_COMMA,variable) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(T_COMMA,variable)) -> separated_nonempty_list(T_COMMA,variable)

State 38:
## Known stack suffix:
## T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable))
## LR(1) items:
function_expression -> T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) . T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RPAREN shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN
## LR(1) items:
function_expression -> T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN . curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_LCURLY shift to state 40
-- On curly_block(list(source_element)) shift to state 459
## Reductions:

State 40:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
curly_block(list(source_element)) -> T_LCURLY . list(source_element) T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FUNCTION shift to state 447
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 453
-- On source_element shift to state 454
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(source_element) shift to state 457
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On function_declaration shift to state 456
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY
--   reduce production list(source_element) ->

State 41:
## Known stack suffix:
## T_WHILE
## LR(1) items:
while_statement -> T_WHILE . T_LPAREN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## T_WHILE T_LPAREN
## LR(1) items:
while_statement -> T_WHILE T_LPAREN . expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 162
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 43:
## Known stack suffix:
## T_FALSE
## LR(1) items:
boolean_literal -> T_FALSE . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean_literal -> T_FALSE

State 44:
## Known stack suffix:
## T_DELETE
## LR(1) items:
pre_in_expression -> T_DELETE . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 161
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 45:
## Known stack suffix:
## T_DECR_NB
## LR(1) items:
pre_in_expression -> T_DECR_NB . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 160
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 46:
## Known stack suffix:
## T_DECR
## LR(1) items:
pre_in_expression -> T_DECR . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 159
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 47:
## Known stack suffix:
## T_BIT_NOT
## LR(1) items:
pre_in_expression -> T_BIT_NOT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 52
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 48:
## Known stack suffix:
## variable_with_loc
## LR(1) items:
primary_expression_no_statement -> variable_with_loc . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> variable_with_loc

State 49:
## Known stack suffix:
## regex_literal
## LR(1) items:
primary_expression_no_statement -> regex_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> regex_literal

State 50:
## Known stack suffix:
## primary_expression_no_statement
## LR(1) items:
primary_expression -> primary_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> primary_expression_no_statement

State 51:
## Known stack suffix:
## primary_expression
## LR(1) items:
member_expression -> primary_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> primary_expression

State 52:
## Known stack suffix:
## T_BIT_NOT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_BIT_NOT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_BIT_NOT pre_in_expression

State 53:
## Known stack suffix:
## T_INCR_NB
## LR(1) items:
postfix_operator -> T_INCR_NB . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_operator -> T_INCR_NB

State 54:
## Known stack suffix:
## T_DECR_NB
## LR(1) items:
postfix_operator -> T_DECR_NB . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_operator -> T_DECR_NB

State 55:
## Known stack suffix:
## pre_in_expression postfix_operator
## LR(1) items:
pre_in_expression -> pre_in_expression postfix_operator . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expression -> pre_in_expression postfix_operator

State 56:
## Known stack suffix:
## object_literal
## LR(1) items:
primary_expression -> object_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> object_literal

State 57:
## Known stack suffix:
## numeric_literal
## LR(1) items:
primary_expression_no_statement -> numeric_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> numeric_literal

State 58:
## Known stack suffix:
## null_literal
## LR(1) items:
primary_expression_no_statement -> null_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> null_literal

State 59:
## Known stack suffix:
## new_expression
## LR(1) items:
left_hand_side_expression -> new_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_expression -> new_expression

State 60:
## Known stack suffix:
## member_expression
## LR(1) items:
call_expression -> member_expression . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression -> member_expression . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression -> member_expression . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression -> member_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 61
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 155
-- On arguments shift to state 158
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production new_expression -> member_expression

State 61:
## Known stack suffix:
## member_expression T_PERIOD
## LR(1) items:
member_expression -> member_expression T_PERIOD . identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On identifier shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## member_expression T_PERIOD identifier
## LR(1) items:
member_expression -> member_expression T_PERIOD identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression T_PERIOD identifier

State 63:
## Known stack suffix:
## T_LPAREN
## LR(1) items:
arguments -> T_LPAREN . loption(separated_nonempty_list(T_COMMA,assignment_expression)) T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On separated_nonempty_list(T_COMMA,assignment_expression) shift to state 65
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On loption(separated_nonempty_list(T_COMMA,assignment_expression)) shift to state 150
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 152
-- On array_literal shift to state 87
## Reductions:
-- On T_RPAREN
--   reduce production loption(separated_nonempty_list(T_COMMA,assignment_expression)) ->

State 64:
## Known stack suffix:
## ternary(post_in_expression,assignment_expression)
## LR(1) items:
conditional_expression -> ternary(post_in_expression,assignment_expression) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> ternary(post_in_expression,assignment_expression)

State 65:
## Known stack suffix:
## separated_nonempty_list(T_COMMA,assignment_expression)
## LR(1) items:
loption(separated_nonempty_list(T_COMMA,assignment_expression)) -> separated_nonempty_list(T_COMMA,assignment_expression) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(T_COMMA,assignment_expression)) -> separated_nonempty_list(T_COMMA,assignment_expression)

State 66:
## Known stack suffix:
## pre_in_expression
## LR(1) items:
post_in_expression -> pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_RSHIFT3 shift to state 67
-- On T_RSHIFT shift to state 146
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_LSHIFT shift to state 148
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> pre_in_expression

State 67:
## Known stack suffix:
## pre_in_expression T_RSHIFT3
## LR(1) items:
pre_in_expression -> pre_in_expression T_RSHIFT3 . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 68
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 68:
## Known stack suffix:
## pre_in_expression T_RSHIFT3 pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_RSHIFT3 pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_RSHIFT3 pre_in_expression

State 69:
## Known stack suffix:
## pre_in_expression T_PLUS
## LR(1) items:
pre_in_expression -> pre_in_expression T_PLUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 70
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 70:
## Known stack suffix:
## pre_in_expression T_PLUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_PLUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_PLUS pre_in_expression

State 71:
## Known stack suffix:
## pre_in_expression T_MULT
## LR(1) items:
pre_in_expression -> pre_in_expression T_MULT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 72
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 72:
## Known stack suffix:
## pre_in_expression T_MULT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_MULT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_MULT pre_in_expression

State 73:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
pre_in_expression -> left_hand_side_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expression -> left_hand_side_expression

State 74:
## Known stack suffix:
## function_expression
## LR(1) items:
primary_expression -> function_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> function_expression

State 75:
## Known stack suffix:
## curly_block(separated_or_terminated_list(T_COMMA,object_key_value))
## LR(1) items:
object_literal -> curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> curly_block(separated_or_terminated_list(T_COMMA,object_key_value))

State 76:
## Known stack suffix:
## curly_block(empty)
## LR(1) items:
object_literal -> curly_block(empty) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_literal -> curly_block(empty)

State 77:
## Known stack suffix:
## call_expression
## LR(1) items:
call_expression -> call_expression . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
call_expression -> call_expression . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
call_expression -> call_expression . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
left_hand_side_expression -> call_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 78
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 80
-- On arguments shift to state 139
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production left_hand_side_expression -> call_expression

State 78:
## Known stack suffix:
## call_expression T_PERIOD
## LR(1) items:
call_expression -> call_expression T_PERIOD . identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On identifier shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## call_expression T_PERIOD identifier
## LR(1) items:
call_expression -> call_expression T_PERIOD identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression T_PERIOD identifier

State 80:
## Known stack suffix:
## call_expression T_LBRACKET
## LR(1) items:
call_expression -> call_expression T_LBRACKET . expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 134
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 81:
## Known stack suffix:
## post_in_expression
## LR(1) items:
conditional_expression -> post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
ternary(post_in_expression,assignment_expression) -> post_in_expression . T_PLING assignment_expression T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_PLING shift to state 100
-- On T_OR shift to state 120
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
-- On T_AND shift to state 132
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production conditional_expression -> post_in_expression

State 82:
## Known stack suffix:
## post_in_expression T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_STRICT_NOT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 83
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 83:
## Known stack suffix:
## post_in_expression T_STRICT_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_STRICT_NOT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_STRICT_NOT_EQUAL post_in_expression

State 84:
## Known stack suffix:
## post_in_expression T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_LESS_THAN_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 85
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 85:
## Known stack suffix:
## post_in_expression T_LESS_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_LESS_THAN_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_LESS_THAN_EQUAL post_in_expression

State 86:
## Known stack suffix:
## boolean_literal
## LR(1) items:
primary_expression_no_statement -> boolean_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> boolean_literal

State 87:
## Known stack suffix:
## array_literal
## LR(1) items:
primary_expression_no_statement -> array_literal . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> array_literal

State 88:
## Known stack suffix:
## post_in_expression T_LESS_THAN
## LR(1) items:
post_in_expression -> post_in_expression T_LESS_THAN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 89
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 89:
## Known stack suffix:
## post_in_expression T_LESS_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_LESS_THAN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_LESS_THAN post_in_expression

State 90:
## Known stack suffix:
## post_in_expression T_INSTANCEOF
## LR(1) items:
post_in_expression -> post_in_expression T_INSTANCEOF . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 91
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 91:
## Known stack suffix:
## post_in_expression T_INSTANCEOF post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_INSTANCEOF post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_INSTANCEOF post_in_expression

State 92:
## Known stack suffix:
## post_in_expression T_IN
## LR(1) items:
post_in_expression -> post_in_expression T_IN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 93
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 93:
## Known stack suffix:
## post_in_expression T_IN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_IN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_IN post_in_expression

State 94:
## Known stack suffix:
## post_in_expression T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_GREATER_THAN_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 95
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 95:
## Known stack suffix:
## post_in_expression T_GREATER_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_GREATER_THAN_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_GREATER_THAN_EQUAL post_in_expression

State 96:
## Known stack suffix:
## post_in_expression T_GREATER_THAN
## LR(1) items:
post_in_expression -> post_in_expression T_GREATER_THAN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 97
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 97:
## Known stack suffix:
## post_in_expression T_GREATER_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_GREATER_THAN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression -> post_in_expression T_GREATER_THAN post_in_expression

State 98:
## Known stack suffix:
## post_in_expression T_STRICT_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_STRICT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 99
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 99:
## Known stack suffix:
## post_in_expression T_STRICT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_STRICT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_STRICT_EQUAL post_in_expression

State 100:
## Known stack suffix:
## post_in_expression T_PLING
## LR(1) items:
ternary(post_in_expression,assignment_expression) -> post_in_expression T_PLING . assignment_expression T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 117
-- On array_literal shift to state 87
## Reductions:

State 101:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
assignment_expression -> left_hand_side_expression . assignment_operator assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
pre_in_expression -> left_hand_side_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 102
-- On T_RSHIFT3_ASSIGN shift to state 103
-- On T_PLUS_ASSIGN shift to state 104
-- On T_MULT_ASSIGN shift to state 105
-- On T_MOD_ASSIGN shift to state 106
-- On T_MINUS_ASSIGN shift to state 107
-- On T_LSHIFT_ASSIGN shift to state 108
-- On T_DIV_ASSIGN shift to state 109
-- On T_BIT_XOR_ASSIGN shift to state 110
-- On T_BIT_OR_ASSIGN shift to state 111
-- On T_BIT_AND_ASSIGN shift to state 112
-- On T_ASSIGN shift to state 113
-- On assignment_operator shift to state 114
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> left_hand_side_expression

State 102:
## Known stack suffix:
## T_RSHIFT_ASSIGN
## LR(1) items:
assignment_operator -> T_RSHIFT_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_RSHIFT_ASSIGN

State 103:
## Known stack suffix:
## T_RSHIFT3_ASSIGN
## LR(1) items:
assignment_operator -> T_RSHIFT3_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_RSHIFT3_ASSIGN

State 104:
## Known stack suffix:
## T_PLUS_ASSIGN
## LR(1) items:
assignment_operator -> T_PLUS_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_PLUS_ASSIGN

State 105:
## Known stack suffix:
## T_MULT_ASSIGN
## LR(1) items:
assignment_operator -> T_MULT_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MULT_ASSIGN

State 106:
## Known stack suffix:
## T_MOD_ASSIGN
## LR(1) items:
assignment_operator -> T_MOD_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MOD_ASSIGN

State 107:
## Known stack suffix:
## T_MINUS_ASSIGN
## LR(1) items:
assignment_operator -> T_MINUS_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_MINUS_ASSIGN

State 108:
## Known stack suffix:
## T_LSHIFT_ASSIGN
## LR(1) items:
assignment_operator -> T_LSHIFT_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_LSHIFT_ASSIGN

State 109:
## Known stack suffix:
## T_DIV_ASSIGN
## LR(1) items:
assignment_operator -> T_DIV_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_DIV_ASSIGN

State 110:
## Known stack suffix:
## T_BIT_XOR_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_XOR_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_XOR_ASSIGN

State 111:
## Known stack suffix:
## T_BIT_OR_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_OR_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_OR_ASSIGN

State 112:
## Known stack suffix:
## T_BIT_AND_ASSIGN
## LR(1) items:
assignment_operator -> T_BIT_AND_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_BIT_AND_ASSIGN

State 113:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
assignment_operator -> T_ASSIGN . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> T_ASSIGN

State 114:
## Known stack suffix:
## left_hand_side_expression assignment_operator
## LR(1) items:
assignment_expression -> left_hand_side_expression assignment_operator . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 116
-- On array_literal shift to state 87
## Reductions:

State 115:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> conditional_expression

State 116:
## Known stack suffix:
## left_hand_side_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> left_hand_side_expression assignment_operator assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> left_hand_side_expression assignment_operator assignment_expression

State 117:
## Known stack suffix:
## post_in_expression T_PLING assignment_expression
## LR(1) items:
ternary(post_in_expression,assignment_expression) -> post_in_expression T_PLING assignment_expression . T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COLON shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## post_in_expression T_PLING assignment_expression T_COLON
## LR(1) items:
ternary(post_in_expression,assignment_expression) -> post_in_expression T_PLING assignment_expression T_COLON . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 119
-- On array_literal shift to state 87
## Reductions:

State 119:
## Known stack suffix:
## post_in_expression T_PLING assignment_expression T_COLON assignment_expression
## LR(1) items:
ternary(post_in_expression,assignment_expression) -> post_in_expression T_PLING assignment_expression T_COLON assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ternary(post_in_expression,assignment_expression) -> post_in_expression T_PLING assignment_expression T_COLON assignment_expression

State 120:
## Known stack suffix:
## post_in_expression T_OR
## LR(1) items:
post_in_expression -> post_in_expression T_OR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 121
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 121:
## Known stack suffix:
## post_in_expression T_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_OR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
-- On T_AND shift to state 132
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production post_in_expression -> post_in_expression T_OR post_in_expression

State 122:
## Known stack suffix:
## post_in_expression T_NOT_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_NOT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 123
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 123:
## Known stack suffix:
## post_in_expression T_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_NOT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_NOT_EQUAL post_in_expression

State 124:
## Known stack suffix:
## post_in_expression T_EQUAL
## LR(1) items:
post_in_expression -> post_in_expression T_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 125
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 125:
## Known stack suffix:
## post_in_expression T_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_EQUAL post_in_expression

State 126:
## Known stack suffix:
## post_in_expression T_BIT_XOR
## LR(1) items:
post_in_expression -> post_in_expression T_BIT_XOR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 127
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 127:
## Known stack suffix:
## post_in_expression T_BIT_XOR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_BIT_XOR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_BIT_XOR post_in_expression

State 128:
## Known stack suffix:
## post_in_expression T_BIT_AND
## LR(1) items:
post_in_expression -> post_in_expression T_BIT_AND . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 129
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 129:
## Known stack suffix:
## post_in_expression T_BIT_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_BIT_AND post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_BIT_AND post_in_expression

State 130:
## Known stack suffix:
## post_in_expression T_BIT_OR
## LR(1) items:
post_in_expression -> post_in_expression T_BIT_OR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 131
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 131:
## Known stack suffix:
## post_in_expression T_BIT_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_BIT_OR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_OR T_BIT_NOT T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_BIT_OR post_in_expression

State 132:
## Known stack suffix:
## post_in_expression T_AND
## LR(1) items:
post_in_expression -> post_in_expression T_AND . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 133
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 133:
## Known stack suffix:
## post_in_expression T_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression T_AND post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT T_AND EOF
--   reduce production post_in_expression -> post_in_expression T_AND post_in_expression

State 134:
## Known stack suffix:
## call_expression T_LBRACKET expression
## LR(1) items:
call_expression -> call_expression T_LBRACKET expression . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
expression -> expression . T_COMMA assignment_expression [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_RBRACKET shift to state 135
-- On T_COMMA shift to state 136
## Reductions:

State 135:
## Known stack suffix:
## call_expression T_LBRACKET expression T_RBRACKET
## LR(1) items:
call_expression -> call_expression T_LBRACKET expression T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression T_LBRACKET expression T_RBRACKET

State 136:
## Known stack suffix:
## expression T_COMMA
## LR(1) items:
expression -> expression T_COMMA . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 137
-- On array_literal shift to state 87
## Reductions:

State 137:
## Known stack suffix:
## expression T_COMMA assignment_expression
## LR(1) items:
expression -> expression T_COMMA assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression T_COMMA assignment_expression

State 138:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> assignment_expression

State 139:
## Known stack suffix:
## call_expression arguments
## LR(1) items:
call_expression -> call_expression arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> call_expression arguments

State 140:
## Known stack suffix:
## pre_in_expression T_MOD
## LR(1) items:
pre_in_expression -> pre_in_expression T_MOD . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 141
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 141:
## Known stack suffix:
## pre_in_expression T_MOD pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_MOD pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_MOD pre_in_expression

State 142:
## Known stack suffix:
## pre_in_expression T_DIV
## LR(1) items:
pre_in_expression -> pre_in_expression T_DIV . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 143
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 143:
## Known stack suffix:
## pre_in_expression T_DIV pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_DIV pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_DIV pre_in_expression

State 144:
## Known stack suffix:
## pre_in_expression T_MINUS
## LR(1) items:
pre_in_expression -> pre_in_expression T_MINUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 145
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 145:
## Known stack suffix:
## pre_in_expression T_MINUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_MINUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_MINUS pre_in_expression

State 146:
## Known stack suffix:
## pre_in_expression T_RSHIFT
## LR(1) items:
pre_in_expression -> pre_in_expression T_RSHIFT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 147
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 147:
## Known stack suffix:
## pre_in_expression T_RSHIFT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_RSHIFT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_RSHIFT pre_in_expression

State 148:
## Known stack suffix:
## pre_in_expression T_LSHIFT
## LR(1) items:
pre_in_expression -> pre_in_expression T_LSHIFT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 149
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 149:
## Known stack suffix:
## pre_in_expression T_LSHIFT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression T_LSHIFT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> pre_in_expression T_LSHIFT pre_in_expression

State 150:
## Known stack suffix:
## T_LPAREN loption(separated_nonempty_list(T_COMMA,assignment_expression))
## LR(1) items:
arguments -> T_LPAREN loption(separated_nonempty_list(T_COMMA,assignment_expression)) . T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RPAREN shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## T_LPAREN loption(separated_nonempty_list(T_COMMA,assignment_expression)) T_RPAREN
## LR(1) items:
arguments -> T_LPAREN loption(separated_nonempty_list(T_COMMA,assignment_expression)) T_RPAREN . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> T_LPAREN loption(separated_nonempty_list(T_COMMA,assignment_expression)) T_RPAREN

State 152:
## Known stack suffix:
## assignment_expression
## LR(1) items:
separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression . [ T_RPAREN ]
separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression . T_COMMA separated_nonempty_list(T_COMMA,assignment_expression) [ T_RPAREN ]
## Transitions:
-- On T_COMMA shift to state 153
## Reductions:
-- On T_RPAREN
--   reduce production separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression

State 153:
## Known stack suffix:
## assignment_expression T_COMMA
## LR(1) items:
separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression T_COMMA . separated_nonempty_list(T_COMMA,assignment_expression) [ T_RPAREN ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On separated_nonempty_list(T_COMMA,assignment_expression) shift to state 154
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 152
-- On array_literal shift to state 87
## Reductions:

State 154:
## Known stack suffix:
## assignment_expression T_COMMA separated_nonempty_list(T_COMMA,assignment_expression)
## LR(1) items:
separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression T_COMMA separated_nonempty_list(T_COMMA,assignment_expression) . [ T_RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(T_COMMA,assignment_expression) -> assignment_expression T_COMMA separated_nonempty_list(T_COMMA,assignment_expression)

State 155:
## Known stack suffix:
## member_expression T_LBRACKET
## LR(1) items:
member_expression -> member_expression T_LBRACKET . expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 156
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 156:
## Known stack suffix:
## member_expression T_LBRACKET expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RBRACKET T_COMMA ]
member_expression -> member_expression T_LBRACKET expression . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RBRACKET shift to state 157
-- On T_COMMA shift to state 136
## Reductions:

State 157:
## Known stack suffix:
## member_expression T_LBRACKET expression T_RBRACKET
## LR(1) items:
member_expression -> member_expression T_LBRACKET expression T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> member_expression T_LBRACKET expression T_RBRACKET

State 158:
## Known stack suffix:
## member_expression arguments
## LR(1) items:
call_expression -> member_expression arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression -> member_expression arguments

State 159:
## Known stack suffix:
## T_DECR pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_DECR pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_DECR pre_in_expression

State 160:
## Known stack suffix:
## T_DECR_NB pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_DECR_NB pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_DECR_NB pre_in_expression

State 161:
## Known stack suffix:
## T_DELETE pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_DELETE pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_DELETE pre_in_expression

State 162:
## Known stack suffix:
## T_WHILE T_LPAREN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
while_statement -> T_WHILE T_LPAREN expression . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 163
-- On T_COMMA shift to state 136
## Reductions:

State 163:
## Known stack suffix:
## T_WHILE T_LPAREN expression T_RPAREN
## LR(1) items:
while_statement -> T_WHILE T_LPAREN expression T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 446
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 164:
## Known stack suffix:
## T_VOID
## LR(1) items:
pre_in_expression_no_statement -> T_VOID . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 165
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 165:
## Known stack suffix:
## T_VOID pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_VOID pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_VOID pre_in_expression

State 166:
## Known stack suffix:
## T_VAR
## LR(1) items:
variable_statement -> T_VAR . separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 167
-- On separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) shift to state 174
-- On identifier shift to state 36
## Reductions:

State 167:
## Known stack suffix:
## variable
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable . option(initializer_) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable . option(initializer_) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_ASSIGN shift to state 168
-- On option(initializer_) shift to state 170
-- On initializer_ shift to state 173
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production option(initializer_) ->

State 168:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
initializer_ -> T_ASSIGN . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 169
-- On array_literal shift to state 87
## Reductions:

State 169:
## Known stack suffix:
## T_ASSIGN assignment_expression
## LR(1) items:
initializer_ -> T_ASSIGN assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializer_ -> T_ASSIGN assignment_expression

State 170:
## Known stack suffix:
## variable option(initializer_)
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_) . T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COMMA shift to state 171
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_)

State 171:
## Known stack suffix:
## variable option(initializer_) T_COMMA
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_) T_COMMA . separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 167
-- On separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) shift to state 172
-- On identifier shift to state 36
## Reductions:

State 172:
## Known stack suffix:
## variable option(initializer_) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_)))
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) -> variable option(initializer_) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_)))

State 173:
## Known stack suffix:
## initializer_
## LR(1) items:
option(initializer_) -> initializer_ . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(initializer_) -> initializer_

State 174:
## Known stack suffix:
## T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_)))
## LR(1) items:
variable_statement -> T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_))) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_statement -> T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_)))

State 175:
## Known stack suffix:
## T_TYPEOF
## LR(1) items:
pre_in_expression_no_statement -> T_TYPEOF . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 176
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 176:
## Known stack suffix:
## T_TYPEOF pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_TYPEOF pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_TYPEOF pre_in_expression

State 177:
## Known stack suffix:
## T_TRY
## LR(1) items:
try_statement -> T_TRY . block catch option(finally) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
try_statement -> T_TRY . block finally [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LCURLY shift to state 178
-- On curly_block(list(statement)) shift to state 433
-- On block shift to state 434
## Reductions:

State 178:
## Known stack suffix:
## T_LCURLY
## LR(1) items:
curly_block(list(statement)) -> T_LCURLY . list(statement) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CATCH T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 418
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(statement) shift to state 431
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY
--   reduce production list(statement) ->

State 179:
## Known stack suffix:
## T_THROW
## LR(1) items:
throw_statement -> T_THROW . expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 180
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 180:
## Known stack suffix:
## T_THROW expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
throw_statement -> T_THROW expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COMMA shift to state 136
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production throw_statement -> T_THROW expression

State 181:
## Known stack suffix:
## T_SWITCH
## LR(1) items:
switch_statement -> T_SWITCH . T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## T_SWITCH T_LPAREN
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN . expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 183
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 183:
## Known stack suffix:
## T_SWITCH T_LPAREN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
switch_statement -> T_SWITCH T_LPAREN expression . T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 184
-- On T_COMMA shift to state 136
## Reductions:

State 184:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN . T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LCURLY shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY . list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_CASE shift to state 186
-- On list(case_clause) shift to state 421
-- On case_clause shift to state 429
## Reductions:
-- On T_RCURLY T_DEFAULT
--   reduce production list(case_clause) ->

State 186:
## Known stack suffix:
## T_CASE
## LR(1) items:
case_clause -> T_CASE . expression T_COLON list(statement) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 187
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 187:
## Known stack suffix:
## T_CASE expression
## LR(1) items:
case_clause -> T_CASE expression . T_COLON list(statement) [ T_RCURLY T_DEFAULT T_CASE ]
expression -> expression . T_COMMA assignment_expression [ T_COMMA T_COLON ]
## Transitions:
-- On T_COMMA shift to state 136
-- On T_COLON shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## T_CASE expression T_COLON
## LR(1) items:
case_clause -> T_CASE expression T_COLON . list(statement) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 418
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(statement) shift to state 420
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY T_DEFAULT T_CASE
--   reduce production list(statement) ->

State 189:
## Known stack suffix:
## T_SEMICOLON
## LR(1) items:
empty_statement -> T_SEMICOLON . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production empty_statement -> T_SEMICOLON

State 190:
## Known stack suffix:
## T_RETURN
## LR(1) items:
return_statement -> T_RETURN . option(expression) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On option(expression) shift to state 191
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 192
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:
-- On T_WITH T_WHILE T_VIRTUAL_SEMICOLON T_VAR T_TRY T_THROW T_SWITCH T_SEMICOLON T_RETURN T_RCURLY T_IF T_FOR T_ELSE T_DO T_DEFAULT T_DEBUGGER T_CONTINUE T_CASE T_BREAK EOF
--   reduce production option(expression) ->

State 191:
## Known stack suffix:
## T_RETURN option(expression)
## LR(1) items:
return_statement -> T_RETURN option(expression) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production return_statement -> T_RETURN option(expression)

State 192:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
option(expression) -> expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COMMA shift to state 136
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RPAREN T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production option(expression) -> expression

State 193:
## Known stack suffix:
## T_PLUS
## LR(1) items:
pre_in_expression_no_statement -> T_PLUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 194
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 194:
## Known stack suffix:
## T_PLUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_PLUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_PLUS pre_in_expression

State 195:
## Known stack suffix:
## T_NOT
## LR(1) items:
pre_in_expression_no_statement -> T_NOT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 196
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 196:
## Known stack suffix:
## T_NOT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_NOT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_NOT pre_in_expression

State 197:
## Known stack suffix:
## T_NEW
## LR(1) items:
member_expression_no_statement -> T_NEW . member_expression arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression_no_statement -> T_NEW . new_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NEW shift to state 13
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 198
-- On member_expression shift to state 199
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 198:
## Known stack suffix:
## T_NEW new_expression
## LR(1) items:
new_expression_no_statement -> T_NEW new_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expression_no_statement -> T_NEW new_expression

State 199:
## Known stack suffix:
## T_NEW member_expression
## LR(1) items:
member_expression -> member_expression . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression -> member_expression . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression_no_statement -> T_NEW member_expression . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression -> member_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 61
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 155
-- On arguments shift to state 200
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production new_expression -> member_expression

State 200:
## Known stack suffix:
## T_NEW member_expression arguments
## LR(1) items:
member_expression_no_statement -> T_NEW member_expression arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression_no_statement -> T_NEW member_expression arguments

State 201:
## Known stack suffix:
## T_MINUS
## LR(1) items:
pre_in_expression_no_statement -> T_MINUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 202
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 202:
## Known stack suffix:
## T_MINUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_MINUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_MINUS pre_in_expression

State 203:
## Known stack suffix:
## T_INCR_NB
## LR(1) items:
pre_in_expression_no_statement -> T_INCR_NB . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 204
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 204:
## Known stack suffix:
## T_INCR_NB pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_INCR_NB pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_INCR_NB pre_in_expression

State 205:
## Known stack suffix:
## T_INCR
## LR(1) items:
pre_in_expression_no_statement -> T_INCR . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 206
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 206:
## Known stack suffix:
## T_INCR pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_INCR pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_INCR pre_in_expression

State 207:
## Known stack suffix:
## T_IF
## LR(1) items:
if_statement -> T_IF . T_LPAREN expression T_RPAREN statement T_ELSE statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
if_statement -> T_IF . T_LPAREN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## T_IF T_LPAREN
## LR(1) items:
if_statement -> T_IF T_LPAREN . expression T_RPAREN statement T_ELSE statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
if_statement -> T_IF T_LPAREN . expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 209
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 209:
## Known stack suffix:
## T_IF T_LPAREN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
if_statement -> T_IF T_LPAREN expression . T_RPAREN statement T_ELSE statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
if_statement -> T_IF T_LPAREN expression . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 210
-- On T_COMMA shift to state 136
## Reductions:

State 210:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN
## LR(1) items:
if_statement -> T_IF T_LPAREN expression T_RPAREN . statement T_ELSE statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
if_statement -> T_IF T_LPAREN expression T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 415
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 211:
## Known stack suffix:
## T_IDENTIFIER
## LR(1) items:
identifier -> T_IDENTIFIER . [ T_COLON ]
variable_with_loc -> T_IDENTIFIER . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Reductions:
-- On T_COLON
--   reduce production identifier -> T_IDENTIFIER
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production variable_with_loc -> T_IDENTIFIER

State 212:
## Known stack suffix:
## T_FOR
## LR(1) items:
for_in_statement -> T_FOR . T_LPAREN left_hand_side_expression T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_in_statement -> T_FOR . T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_statement -> T_FOR . T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_statement -> T_FOR . T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## T_FOR T_LPAREN
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN . left_hand_side_expression T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_in_statement -> T_FOR T_LPAREN . T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_statement -> T_FOR T_LPAREN . option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_statement -> T_FOR T_LPAREN . T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_VAR shift to state 214
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On option(expression_no_in) shift to state 399
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 406
-- On function_expression shift to state 74
-- On expression_no_in shift to state 411
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 414
-- On array_literal shift to state 87
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expression_no_in) ->

State 214:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR . variable option(initializer_no_in) T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
for_statement -> T_FOR T_LPAREN T_VAR . separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 215
-- On separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) shift to state 392
-- On identifier shift to state 36
## Reductions:

State 215:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR variable . option(initializer_no_in) T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable . option(initializer_no_in) [ T_SEMICOLON ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable . option(initializer_no_in) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) [ T_SEMICOLON ]
## Transitions:
-- On T_ASSIGN shift to state 216
-- On option(initializer_no_in) shift to state 257
-- On initializer_no_in shift to state 390
## Reductions:
-- On T_SEMICOLON T_IN T_COMMA
--   reduce production option(initializer_no_in) ->

State 216:
## Known stack suffix:
## T_ASSIGN
## LR(1) items:
initializer_no_in -> T_ASSIGN . assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 225
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 256
-- On array_literal shift to state 87
## Reductions:

State 217:
## Known stack suffix:
## ternary(post_in_expression_no_in,assignment_expression_no_in)
## LR(1) items:
conditional_expression_no_in -> ternary(post_in_expression_no_in,assignment_expression_no_in) . [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression_no_in -> ternary(post_in_expression_no_in,assignment_expression_no_in)

State 218:
## Known stack suffix:
## pre_in_expression
## LR(1) items:
post_in_expression_no_in -> pre_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . postfix_operator [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT3 shift to state 67
-- On T_RSHIFT shift to state 146
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_LSHIFT shift to state 148
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> pre_in_expression

State 219:
## Known stack suffix:
## post_in_expression_no_in
## LR(1) items:
conditional_expression_no_in -> post_in_expression_no_in . [ T_SEMICOLON T_IN T_COMMA T_COLON ]
post_in_expression_no_in -> post_in_expression_no_in . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in . T_PLING assignment_expression_no_in T_COLON assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 220
-- On T_STRICT_EQUAL shift to state 222
-- On T_PLING shift to state 224
-- On T_OR shift to state 232
-- On T_NOT_EQUAL shift to state 234
-- On T_LESS_THAN_EQUAL shift to state 236
-- On T_LESS_THAN shift to state 238
-- On T_INSTANCEOF shift to state 240
-- On T_GREATER_THAN_EQUAL shift to state 242
-- On T_GREATER_THAN shift to state 244
-- On T_EQUAL shift to state 246
-- On T_BIT_XOR shift to state 248
-- On T_BIT_OR shift to state 250
-- On T_BIT_AND shift to state 252
-- On T_AND shift to state 254
## Reductions:
-- On T_SEMICOLON T_IN T_COMMA T_COLON
--   reduce production conditional_expression_no_in -> post_in_expression_no_in

State 220:
## Known stack suffix:
## post_in_expression_no_in T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_STRICT_NOT_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 221
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 221:
## Known stack suffix:
## post_in_expression_no_in T_STRICT_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_STRICT_NOT_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_STRICT_NOT_EQUAL post_in_expression

State 222:
## Known stack suffix:
## post_in_expression_no_in T_STRICT_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_STRICT_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 223
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 223:
## Known stack suffix:
## post_in_expression_no_in T_STRICT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_STRICT_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_STRICT_EQUAL post_in_expression

State 224:
## Known stack suffix:
## post_in_expression_no_in T_PLING
## LR(1) items:
ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in T_PLING . assignment_expression_no_in T_COLON assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 225
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 229
-- On array_literal shift to state 87
## Reductions:

State 225:
## Known stack suffix:
## left_hand_side_expression
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression . assignment_operator assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
pre_in_expression -> left_hand_side_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 102
-- On T_RSHIFT3_ASSIGN shift to state 103
-- On T_PLUS_ASSIGN shift to state 104
-- On T_MULT_ASSIGN shift to state 105
-- On T_MOD_ASSIGN shift to state 106
-- On T_MINUS_ASSIGN shift to state 107
-- On T_LSHIFT_ASSIGN shift to state 108
-- On T_DIV_ASSIGN shift to state 109
-- On T_BIT_XOR_ASSIGN shift to state 110
-- On T_BIT_OR_ASSIGN shift to state 111
-- On T_BIT_AND_ASSIGN shift to state 112
-- On T_ASSIGN shift to state 113
-- On assignment_operator shift to state 226
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production pre_in_expression -> left_hand_side_expression

State 226:
## Known stack suffix:
## left_hand_side_expression assignment_operator
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression assignment_operator . assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 225
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 228
-- On array_literal shift to state 87
## Reductions:

State 227:
## Known stack suffix:
## conditional_expression_no_in
## LR(1) items:
assignment_expression_no_in -> conditional_expression_no_in . [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_in -> conditional_expression_no_in

State 228:
## Known stack suffix:
## left_hand_side_expression assignment_operator assignment_expression_no_in
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression assignment_operator assignment_expression_no_in . [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_in -> left_hand_side_expression assignment_operator assignment_expression_no_in

State 229:
## Known stack suffix:
## post_in_expression_no_in T_PLING assignment_expression_no_in
## LR(1) items:
ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in T_PLING assignment_expression_no_in . T_COLON assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
-- On T_COLON shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## post_in_expression_no_in T_PLING assignment_expression_no_in T_COLON
## LR(1) items:
ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in T_PLING assignment_expression_no_in T_COLON . assignment_expression_no_in [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 225
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 231
-- On array_literal shift to state 87
## Reductions:

State 231:
## Known stack suffix:
## post_in_expression_no_in T_PLING assignment_expression_no_in T_COLON assignment_expression_no_in
## LR(1) items:
ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in T_PLING assignment_expression_no_in T_COLON assignment_expression_no_in . [ T_SEMICOLON T_IN T_COMMA T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ternary(post_in_expression_no_in,assignment_expression_no_in) -> post_in_expression_no_in T_PLING assignment_expression_no_in T_COLON assignment_expression_no_in

State 232:
## Known stack suffix:
## post_in_expression_no_in T_OR
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_OR . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 233
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 233:
## Known stack suffix:
## post_in_expression_no_in T_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_OR post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
-- On T_AND shift to state 132
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_OR post_in_expression

State 234:
## Known stack suffix:
## post_in_expression_no_in T_NOT_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_NOT_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 235
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 235:
## Known stack suffix:
## post_in_expression_no_in T_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_NOT_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_NOT_EQUAL post_in_expression

State 236:
## Known stack suffix:
## post_in_expression_no_in T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 237
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 237:
## Known stack suffix:
## post_in_expression_no_in T_LESS_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN_EQUAL post_in_expression

State 238:
## Known stack suffix:
## post_in_expression_no_in T_LESS_THAN
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 239
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 239:
## Known stack suffix:
## post_in_expression_no_in T_LESS_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_in -> post_in_expression_no_in T_LESS_THAN post_in_expression

State 240:
## Known stack suffix:
## post_in_expression_no_in T_INSTANCEOF
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_INSTANCEOF . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 241
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 241:
## Known stack suffix:
## post_in_expression_no_in T_INSTANCEOF post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_INSTANCEOF post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_in -> post_in_expression_no_in T_INSTANCEOF post_in_expression

State 242:
## Known stack suffix:
## post_in_expression_no_in T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 243
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 243:
## Known stack suffix:
## post_in_expression_no_in T_GREATER_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN_EQUAL post_in_expression

State 244:
## Known stack suffix:
## post_in_expression_no_in T_GREATER_THAN
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 245
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 245:
## Known stack suffix:
## post_in_expression_no_in T_GREATER_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_in -> post_in_expression_no_in T_GREATER_THAN post_in_expression

State 246:
## Known stack suffix:
## post_in_expression_no_in T_EQUAL
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_EQUAL . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 247
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 247:
## Known stack suffix:
## post_in_expression_no_in T_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_EQUAL post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_EQUAL post_in_expression

State 248:
## Known stack suffix:
## post_in_expression_no_in T_BIT_XOR
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_BIT_XOR . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 249
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 249:
## Known stack suffix:
## post_in_expression_no_in T_BIT_XOR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_BIT_XOR post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_BIT_XOR post_in_expression

State 250:
## Known stack suffix:
## post_in_expression_no_in T_BIT_OR
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_BIT_OR . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 251
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 251:
## Known stack suffix:
## post_in_expression_no_in T_BIT_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_BIT_OR post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_OR T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_BIT_OR post_in_expression

State 252:
## Known stack suffix:
## post_in_expression_no_in T_BIT_AND
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_BIT_AND . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 253
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 253:
## Known stack suffix:
## post_in_expression_no_in T_BIT_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_BIT_AND post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_BIT_AND post_in_expression

State 254:
## Known stack suffix:
## post_in_expression_no_in T_AND
## LR(1) items:
post_in_expression_no_in -> post_in_expression_no_in T_AND . post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 255
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 255:
## Known stack suffix:
## post_in_expression_no_in T_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
post_in_expression_no_in -> post_in_expression_no_in T_AND post_in_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_PLING T_OR T_NOT_EQUAL T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_IN T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_COMMA T_COLON T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_SEMICOLON T_PLING T_OR T_COMMA T_COLON T_AND
--   reduce production post_in_expression_no_in -> post_in_expression_no_in T_AND post_in_expression

State 256:
## Known stack suffix:
## T_ASSIGN assignment_expression_no_in
## LR(1) items:
initializer_no_in -> T_ASSIGN assignment_expression_no_in . [ T_SEMICOLON T_IN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializer_no_in -> T_ASSIGN assignment_expression_no_in

State 257:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable option(initializer_no_in)
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) . T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) . [ T_SEMICOLON ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) . T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) [ T_SEMICOLON ]
## Transitions:
-- On T_IN shift to state 258
-- On T_COMMA shift to state 387
## Reductions:
-- On T_SEMICOLON
--   reduce production separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in)

State 258:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN . expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 259
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 259:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 260
-- On T_COMMA shift to state 136
## Reductions:

State 260:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 386
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 261:
## Known stack suffix:
## T_DO
## LR(1) items:
do_while_statement -> T_DO . statement T_WHILE T_LPAREN expression T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 289
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 262:
## Known stack suffix:
## T_DELETE
## LR(1) items:
pre_in_expression_no_statement -> T_DELETE . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 263
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 263:
## Known stack suffix:
## T_DELETE pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_DELETE pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_DELETE pre_in_expression

State 264:
## Known stack suffix:
## T_DECR_NB
## LR(1) items:
pre_in_expression_no_statement -> T_DECR_NB . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 265
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 265:
## Known stack suffix:
## T_DECR_NB pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_DECR_NB pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_DECR_NB pre_in_expression

State 266:
## Known stack suffix:
## T_DECR
## LR(1) items:
pre_in_expression_no_statement -> T_DECR . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 267
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 267:
## Known stack suffix:
## T_DECR pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_DECR pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_DECR pre_in_expression

State 268:
## Known stack suffix:
## T_DEBUGGER
## LR(1) items:
debugger_statement -> T_DEBUGGER . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production debugger_statement -> T_DEBUGGER

State 269:
## Known stack suffix:
## T_CONTINUE
## LR(1) items:
continue_statement -> T_CONTINUE . option(label) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On option(label) shift to state 270
-- On label shift to state 271
-- On identifier shift to state 272
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production option(label) ->

State 270:
## Known stack suffix:
## T_CONTINUE option(label)
## LR(1) items:
continue_statement -> T_CONTINUE option(label) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production continue_statement -> T_CONTINUE option(label)

State 271:
## Known stack suffix:
## label
## LR(1) items:
option(label) -> label . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(label) -> label

State 272:
## Known stack suffix:
## identifier
## LR(1) items:
label -> identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COLON T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> identifier

State 273:
## Known stack suffix:
## T_BREAK
## LR(1) items:
break_statement -> T_BREAK . option(label) [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On option(label) shift to state 274
-- On label shift to state 271
-- On identifier shift to state 272
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production option(label) ->

State 274:
## Known stack suffix:
## T_BREAK option(label)
## LR(1) items:
break_statement -> T_BREAK option(label) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production break_statement -> T_BREAK option(label)

State 275:
## Known stack suffix:
## T_BIT_NOT
## LR(1) items:
pre_in_expression_no_statement -> T_BIT_NOT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 276
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 276:
## Known stack suffix:
## T_BIT_NOT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> T_BIT_NOT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> T_BIT_NOT pre_in_expression

State 277:
## Known stack suffix:
## with_statement
## LR(1) items:
statement_no_semi -> with_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> with_statement

State 278:
## Known stack suffix:
## while_statement
## LR(1) items:
statement_no_semi -> while_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> while_statement

State 279:
## Known stack suffix:
## variable_statement
## LR(1) items:
statement_need_semi -> variable_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> variable_statement

State 280:
## Known stack suffix:
## try_statement
## LR(1) items:
statement_no_semi -> try_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> try_statement

State 281:
## Known stack suffix:
## throw_statement
## LR(1) items:
statement_need_semi -> throw_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> throw_statement

State 282:
## Known stack suffix:
## ternary(post_in_expression_no_statement,assignment_expression)
## LR(1) items:
conditional_expression_no_statement -> ternary(post_in_expression_no_statement,assignment_expression) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression_no_statement -> ternary(post_in_expression_no_statement,assignment_expression)

State 283:
## Known stack suffix:
## switch_statement
## LR(1) items:
statement_no_semi -> switch_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> switch_statement

State 284:
## Known stack suffix:
## statement_no_semi
## LR(1) items:
statement -> statement_no_semi . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> statement_no_semi

State 285:
## Known stack suffix:
## statement_need_semi
## LR(1) items:
statement -> statement_need_semi . either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
statement -> statement_need_semi . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VIRTUAL_SEMICOLON shift to state 286
-- On T_SEMICOLON shift to state 287
-- On either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) shift to state 288
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production statement -> statement_need_semi

State 286:
## Known stack suffix:
## T_VIRTUAL_SEMICOLON
## LR(1) items:
either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) -> T_VIRTUAL_SEMICOLON . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) -> T_VIRTUAL_SEMICOLON

State 287:
## Known stack suffix:
## T_SEMICOLON
## LR(1) items:
either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) -> T_SEMICOLON . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) -> T_SEMICOLON

State 288:
## Known stack suffix:
## statement_need_semi either(T_SEMICOLON,T_VIRTUAL_SEMICOLON)
## LR(1) items:
statement -> statement_need_semi either(T_SEMICOLON,T_VIRTUAL_SEMICOLON) . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> statement_need_semi either(T_SEMICOLON,T_VIRTUAL_SEMICOLON)

State 289:
## Known stack suffix:
## T_DO statement
## LR(1) items:
do_while_statement -> T_DO statement . T_WHILE T_LPAREN expression T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WHILE shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## T_DO statement T_WHILE
## LR(1) items:
do_while_statement -> T_DO statement T_WHILE . T_LPAREN expression T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## T_DO statement T_WHILE T_LPAREN
## LR(1) items:
do_while_statement -> T_DO statement T_WHILE T_LPAREN . expression T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 292
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 292:
## Known stack suffix:
## T_DO statement T_WHILE T_LPAREN expression
## LR(1) items:
do_while_statement -> T_DO statement T_WHILE T_LPAREN expression . T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
## Transitions:
-- On T_RPAREN shift to state 293
-- On T_COMMA shift to state 136
## Reductions:

State 293:
## Known stack suffix:
## T_DO statement T_WHILE T_LPAREN expression T_RPAREN
## LR(1) items:
do_while_statement -> T_DO statement T_WHILE T_LPAREN expression T_RPAREN . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_while_statement -> T_DO statement T_WHILE T_LPAREN expression T_RPAREN

State 294:
## Known stack suffix:
## return_statement
## LR(1) items:
statement_need_semi -> return_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> return_statement

State 295:
## Known stack suffix:
## primary_expression_no_statement
## LR(1) items:
member_expression_no_statement -> primary_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression_no_statement -> primary_expression_no_statement

State 296:
## Known stack suffix:
## pre_in_expression_no_statement
## LR(1) items:
post_in_expression_no_statement -> pre_in_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_RSHIFT3 shift to state 297
-- On T_RSHIFT shift to state 299
-- On T_PLUS shift to state 301
-- On T_MULT shift to state 303
-- On T_MOD shift to state 305
-- On T_MINUS shift to state 307
-- On T_LSHIFT shift to state 309
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 311
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 313
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> pre_in_expression_no_statement

State 297:
## Known stack suffix:
## pre_in_expression_no_statement T_RSHIFT3
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT3 . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 298
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 298:
## Known stack suffix:
## pre_in_expression_no_statement T_RSHIFT3 pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT3 pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT3 pre_in_expression

State 299:
## Known stack suffix:
## pre_in_expression_no_statement T_RSHIFT
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 300
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 300:
## Known stack suffix:
## pre_in_expression_no_statement T_RSHIFT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_RSHIFT pre_in_expression

State 301:
## Known stack suffix:
## pre_in_expression_no_statement T_PLUS
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_PLUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 302
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 302:
## Known stack suffix:
## pre_in_expression_no_statement T_PLUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_PLUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_PLUS pre_in_expression

State 303:
## Known stack suffix:
## pre_in_expression_no_statement T_MULT
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MULT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 304
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 304:
## Known stack suffix:
## pre_in_expression_no_statement T_MULT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MULT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_MULT pre_in_expression

State 305:
## Known stack suffix:
## pre_in_expression_no_statement T_MOD
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MOD . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 306
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 306:
## Known stack suffix:
## pre_in_expression_no_statement T_MOD pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MOD pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_MOD pre_in_expression

State 307:
## Known stack suffix:
## pre_in_expression_no_statement T_MINUS
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MINUS . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 308
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 308:
## Known stack suffix:
## pre_in_expression_no_statement T_MINUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_MINUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_MINUS pre_in_expression

State 309:
## Known stack suffix:
## pre_in_expression_no_statement T_LSHIFT
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_LSHIFT . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 310
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 310:
## Known stack suffix:
## pre_in_expression_no_statement T_LSHIFT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_LSHIFT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_PLUS shift to state 69
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_MINUS shift to state 144
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_LSHIFT pre_in_expression

State 311:
## Known stack suffix:
## pre_in_expression_no_statement T_DIV
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement T_DIV . pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 312
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 312:
## Known stack suffix:
## pre_in_expression_no_statement T_DIV pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression_no_statement -> pre_in_expression_no_statement T_DIV pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement T_DIV pre_in_expression

State 313:
## Known stack suffix:
## pre_in_expression_no_statement postfix_operator
## LR(1) items:
pre_in_expression_no_statement -> pre_in_expression_no_statement postfix_operator . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pre_in_expression_no_statement -> pre_in_expression_no_statement postfix_operator

State 314:
## Known stack suffix:
## post_in_expression_no_statement
## LR(1) items:
conditional_expression_no_statement -> post_in_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement . T_PLING assignment_expression T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 315
-- On T_STRICT_EQUAL shift to state 317
-- On T_PLING shift to state 319
-- On T_OR shift to state 323
-- On T_NOT_EQUAL shift to state 325
-- On T_LESS_THAN_EQUAL shift to state 327
-- On T_LESS_THAN shift to state 329
-- On T_INSTANCEOF shift to state 331
-- On T_IN shift to state 333
-- On T_GREATER_THAN_EQUAL shift to state 335
-- On T_GREATER_THAN shift to state 337
-- On T_EQUAL shift to state 339
-- On T_BIT_XOR shift to state 341
-- On T_BIT_OR shift to state 343
-- On T_BIT_AND shift to state 345
-- On T_AND shift to state 347
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production conditional_expression_no_statement -> post_in_expression_no_statement

State 315:
## Known stack suffix:
## post_in_expression_no_statement T_STRICT_NOT_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_NOT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 316
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 316:
## Known stack suffix:
## post_in_expression_no_statement T_STRICT_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_NOT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_NOT_EQUAL post_in_expression

State 317:
## Known stack suffix:
## post_in_expression_no_statement T_STRICT_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 318
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 318:
## Known stack suffix:
## post_in_expression_no_statement T_STRICT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_STRICT_EQUAL post_in_expression

State 319:
## Known stack suffix:
## post_in_expression_no_statement T_PLING
## LR(1) items:
ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement T_PLING . assignment_expression T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 320
-- On array_literal shift to state 87
## Reductions:

State 320:
## Known stack suffix:
## post_in_expression_no_statement T_PLING assignment_expression
## LR(1) items:
ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement T_PLING assignment_expression . T_COLON assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COLON shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## post_in_expression_no_statement T_PLING assignment_expression T_COLON
## LR(1) items:
ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement T_PLING assignment_expression T_COLON . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 322
-- On array_literal shift to state 87
## Reductions:

State 322:
## Known stack suffix:
## post_in_expression_no_statement T_PLING assignment_expression T_COLON assignment_expression
## LR(1) items:
ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement T_PLING assignment_expression T_COLON assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ternary(post_in_expression_no_statement,assignment_expression) -> post_in_expression_no_statement T_PLING assignment_expression T_COLON assignment_expression

State 323:
## Known stack suffix:
## post_in_expression_no_statement T_OR
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_OR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 324
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 324:
## Known stack suffix:
## post_in_expression_no_statement T_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_OR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
-- On T_AND shift to state 132
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_OR post_in_expression

State 325:
## Known stack suffix:
## post_in_expression_no_statement T_NOT_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_NOT_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 326
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 326:
## Known stack suffix:
## post_in_expression_no_statement T_NOT_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_NOT_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_NOT_EQUAL post_in_expression

State 327:
## Known stack suffix:
## post_in_expression_no_statement T_LESS_THAN_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 328
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 328:
## Known stack suffix:
## post_in_expression_no_statement T_LESS_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN_EQUAL post_in_expression

State 329:
## Known stack suffix:
## post_in_expression_no_statement T_LESS_THAN
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 330
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 330:
## Known stack suffix:
## post_in_expression_no_statement T_LESS_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_LESS_THAN post_in_expression

State 331:
## Known stack suffix:
## post_in_expression_no_statement T_INSTANCEOF
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_INSTANCEOF . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 332
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 332:
## Known stack suffix:
## post_in_expression_no_statement T_INSTANCEOF post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_INSTANCEOF post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_INSTANCEOF post_in_expression

State 333:
## Known stack suffix:
## post_in_expression_no_statement T_IN
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_IN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 334
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 334:
## Known stack suffix:
## post_in_expression_no_statement T_IN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_IN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_IN post_in_expression

State 335:
## Known stack suffix:
## post_in_expression_no_statement T_GREATER_THAN_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 336
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 336:
## Known stack suffix:
## post_in_expression_no_statement T_GREATER_THAN_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN_EQUAL post_in_expression

State 337:
## Known stack suffix:
## post_in_expression_no_statement T_GREATER_THAN
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 338
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 338:
## Known stack suffix:
## post_in_expression_no_statement T_GREATER_THAN post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_GREATER_THAN post_in_expression

State 339:
## Known stack suffix:
## post_in_expression_no_statement T_EQUAL
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_EQUAL . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 340
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 340:
## Known stack suffix:
## post_in_expression_no_statement T_EQUAL post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_EQUAL post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_EQUAL post_in_expression

State 341:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_XOR
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_XOR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 342
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 342:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_XOR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_XOR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_XOR post_in_expression

State 343:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_OR
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_OR . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 344
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 344:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_OR post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_OR post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_OR T_BIT_NOT T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_OR post_in_expression

State 345:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_AND
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_AND . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 346
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 346:
## Known stack suffix:
## post_in_expression_no_statement T_BIT_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_AND post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_BIT_AND post_in_expression

State 347:
## Known stack suffix:
## post_in_expression_no_statement T_AND
## LR(1) items:
post_in_expression_no_statement -> post_in_expression_no_statement T_AND . post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 348
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 73
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On array_literal shift to state 87
## Reductions:

State 348:
## Known stack suffix:
## post_in_expression_no_statement T_AND post_in_expression
## LR(1) items:
post_in_expression -> post_in_expression . T_LESS_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_LESS_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_GREATER_THAN_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_INSTANCEOF post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_STRICT_NOT_EQUAL post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_XOR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_BIT_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_AND post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_OR post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression -> post_in_expression . T_IN post_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
post_in_expression_no_statement -> post_in_expression_no_statement T_AND post_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_STRICT_NOT_EQUAL shift to state 82
-- On T_STRICT_EQUAL shift to state 98
-- On T_NOT_EQUAL shift to state 122
-- On T_LESS_THAN_EQUAL shift to state 84
-- On T_LESS_THAN shift to state 88
-- On T_INSTANCEOF shift to state 90
-- On T_IN shift to state 92
-- On T_GREATER_THAN_EQUAL shift to state 94
-- On T_GREATER_THAN shift to state 96
-- On T_EQUAL shift to state 124
-- On T_BIT_XOR shift to state 126
-- On T_BIT_OR shift to state 130
-- On T_BIT_AND shift to state 128
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT T_AND EOF
--   reduce production post_in_expression_no_statement -> post_in_expression_no_statement T_AND post_in_expression

State 349:
## Known stack suffix:
## new_expression_no_statement
## LR(1) items:
left_hand_side_expression_no_statement -> new_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_hand_side_expression_no_statement -> new_expression_no_statement

State 350:
## Known stack suffix:
## member_expression_no_statement
## LR(1) items:
call_expression_no_statement -> member_expression_no_statement . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression_no_statement -> member_expression_no_statement . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression_no_statement -> member_expression_no_statement . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression_no_statement -> member_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 351
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 353
-- On arguments shift to state 356
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production new_expression_no_statement -> member_expression_no_statement

State 351:
## Known stack suffix:
## member_expression_no_statement T_PERIOD
## LR(1) items:
member_expression_no_statement -> member_expression_no_statement T_PERIOD . identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On identifier shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## member_expression_no_statement T_PERIOD identifier
## LR(1) items:
member_expression_no_statement -> member_expression_no_statement T_PERIOD identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression_no_statement -> member_expression_no_statement T_PERIOD identifier

State 353:
## Known stack suffix:
## member_expression_no_statement T_LBRACKET
## LR(1) items:
member_expression_no_statement -> member_expression_no_statement T_LBRACKET . expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 354
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 354:
## Known stack suffix:
## member_expression_no_statement T_LBRACKET expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RBRACKET T_COMMA ]
member_expression_no_statement -> member_expression_no_statement T_LBRACKET expression . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RBRACKET shift to state 355
-- On T_COMMA shift to state 136
## Reductions:

State 355:
## Known stack suffix:
## member_expression_no_statement T_LBRACKET expression T_RBRACKET
## LR(1) items:
member_expression_no_statement -> member_expression_no_statement T_LBRACKET expression T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression_no_statement -> member_expression_no_statement T_LBRACKET expression T_RBRACKET

State 356:
## Known stack suffix:
## member_expression_no_statement arguments
## LR(1) items:
call_expression_no_statement -> member_expression_no_statement arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression_no_statement -> member_expression_no_statement arguments

State 357:
## Known stack suffix:
## left_hand_side_expression_no_statement
## LR(1) items:
assignment_expression_no_statement -> left_hand_side_expression_no_statement . assignment_operator assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
pre_in_expression_no_statement -> left_hand_side_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 102
-- On T_RSHIFT3_ASSIGN shift to state 103
-- On T_PLUS_ASSIGN shift to state 104
-- On T_MULT_ASSIGN shift to state 105
-- On T_MOD_ASSIGN shift to state 106
-- On T_MINUS_ASSIGN shift to state 107
-- On T_LSHIFT_ASSIGN shift to state 108
-- On T_DIV_ASSIGN shift to state 109
-- On T_BIT_XOR_ASSIGN shift to state 110
-- On T_BIT_OR_ASSIGN shift to state 111
-- On T_BIT_AND_ASSIGN shift to state 112
-- On T_ASSIGN shift to state 113
-- On assignment_operator shift to state 358
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression_no_statement -> left_hand_side_expression_no_statement

State 358:
## Known stack suffix:
## left_hand_side_expression_no_statement assignment_operator
## LR(1) items:
assignment_expression_no_statement -> left_hand_side_expression_no_statement assignment_operator . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 359
-- On array_literal shift to state 87
## Reductions:

State 359:
## Known stack suffix:
## left_hand_side_expression_no_statement assignment_operator assignment_expression
## LR(1) items:
assignment_expression_no_statement -> left_hand_side_expression_no_statement assignment_operator assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_statement -> left_hand_side_expression_no_statement assignment_operator assignment_expression

State 360:
## Known stack suffix:
## labeled_statement
## LR(1) items:
statement_no_semi -> labeled_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> labeled_statement

State 361:
## Known stack suffix:
## label
## LR(1) items:
labeled_statement -> label . T_COLON statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COLON shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## label T_COLON
## LR(1) items:
labeled_statement -> label T_COLON . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 363
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 363:
## Known stack suffix:
## label T_COLON statement
## LR(1) items:
labeled_statement -> label T_COLON statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_statement -> label T_COLON statement

State 364:
## Known stack suffix:
## if_statement
## LR(1) items:
statement_no_semi -> if_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> if_statement

State 365:
## Known stack suffix:
## for_statement
## LR(1) items:
statement_no_semi -> for_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> for_statement

State 366:
## Known stack suffix:
## for_in_statement
## LR(1) items:
statement_no_semi -> for_in_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> for_in_statement

State 367:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement_need_semi -> expression_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> expression_statement

State 368:
## Known stack suffix:
## expression_no_statement
## LR(1) items:
expression_no_statement -> expression_no_statement . T_COMMA assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
expression_statement -> expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_COMMA shift to state 369
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production expression_statement -> expression_no_statement

State 369:
## Known stack suffix:
## expression_no_statement T_COMMA
## LR(1) items:
expression_no_statement -> expression_no_statement T_COMMA . assignment_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 370
-- On array_literal shift to state 87
## Reductions:

State 370:
## Known stack suffix:
## expression_no_statement T_COMMA assignment_expression
## LR(1) items:
expression_no_statement -> expression_no_statement T_COMMA assignment_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_no_statement -> expression_no_statement T_COMMA assignment_expression

State 371:
## Known stack suffix:
## empty_statement
## LR(1) items:
statement_no_semi -> empty_statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> empty_statement

State 372:
## Known stack suffix:
## do_while_statement
## LR(1) items:
statement_need_semi -> do_while_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> do_while_statement

State 373:
## Known stack suffix:
## debugger_statement
## LR(1) items:
statement_need_semi -> debugger_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> debugger_statement

State 374:
## Known stack suffix:
## curly_block(list(statement))
## LR(1) items:
statement_no_semi -> curly_block(list(statement)) . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_no_semi -> curly_block(list(statement))

State 375:
## Known stack suffix:
## continue_statement
## LR(1) items:
statement_need_semi -> continue_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> continue_statement

State 376:
## Known stack suffix:
## conditional_expression_no_statement
## LR(1) items:
assignment_expression_no_statement -> conditional_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression_no_statement -> conditional_expression_no_statement

State 377:
## Known stack suffix:
## call_expression_no_statement
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
call_expression_no_statement -> call_expression_no_statement . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
call_expression_no_statement -> call_expression_no_statement . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
left_hand_side_expression_no_statement -> call_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 378
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 380
-- On arguments shift to state 383
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production left_hand_side_expression_no_statement -> call_expression_no_statement

State 378:
## Known stack suffix:
## call_expression_no_statement T_PERIOD
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement T_PERIOD . identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On identifier shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## call_expression_no_statement T_PERIOD identifier
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement T_PERIOD identifier . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression_no_statement -> call_expression_no_statement T_PERIOD identifier

State 380:
## Known stack suffix:
## call_expression_no_statement T_LBRACKET
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement T_LBRACKET . expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 381
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 381:
## Known stack suffix:
## call_expression_no_statement T_LBRACKET expression
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement T_LBRACKET expression . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
expression -> expression . T_COMMA assignment_expression [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_RBRACKET shift to state 382
-- On T_COMMA shift to state 136
## Reductions:

State 382:
## Known stack suffix:
## call_expression_no_statement T_LBRACKET expression T_RBRACKET
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement T_LBRACKET expression T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression_no_statement -> call_expression_no_statement T_LBRACKET expression T_RBRACKET

State 383:
## Known stack suffix:
## call_expression_no_statement arguments
## LR(1) items:
call_expression_no_statement -> call_expression_no_statement arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RETURN T_REGEX T_RCURLY T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_expression_no_statement -> call_expression_no_statement arguments

State 384:
## Known stack suffix:
## break_statement
## LR(1) items:
statement_need_semi -> break_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_need_semi -> break_statement

State 385:
## Known stack suffix:
## assignment_expression_no_statement
## LR(1) items:
expression_no_statement -> assignment_expression_no_statement . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_no_statement -> assignment_expression_no_statement

State 386:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN statement
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_in_statement -> T_FOR T_LPAREN T_VAR variable option(initializer_no_in) T_IN expression T_RPAREN statement

State 387:
## Known stack suffix:
## variable option(initializer_no_in) T_COMMA
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) T_COMMA . separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) [ T_SEMICOLON ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 388
-- On separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) shift to state 391
-- On identifier shift to state 36
## Reductions:

State 388:
## Known stack suffix:
## variable
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable . option(initializer_no_in) [ T_SEMICOLON ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable . option(initializer_no_in) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) [ T_SEMICOLON ]
## Transitions:
-- On T_ASSIGN shift to state 216
-- On option(initializer_no_in) shift to state 389
-- On initializer_no_in shift to state 390
## Reductions:
-- On T_SEMICOLON T_COMMA
--   reduce production option(initializer_no_in) ->

State 389:
## Known stack suffix:
## variable option(initializer_no_in)
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) . [ T_SEMICOLON ]
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) . T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) [ T_SEMICOLON ]
## Transitions:
-- On T_COMMA shift to state 387
## Reductions:
-- On T_SEMICOLON
--   reduce production separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in)

State 390:
## Known stack suffix:
## initializer_no_in
## LR(1) items:
option(initializer_no_in) -> initializer_no_in . [ T_SEMICOLON T_IN T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(initializer_no_in) -> initializer_no_in

State 391:
## Known stack suffix:
## variable option(initializer_no_in) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in)))
## LR(1) items:
separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) . [ T_SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) -> variable option(initializer_no_in) T_COMMA separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in)))

State 392:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in)))
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) . T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_SEMICOLON shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON . option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On option(expression) shift to state 394
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 192
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expression) ->

State 394:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression)
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) . T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_SEMICOLON shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON . option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On option(expression) shift to state 396
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 192
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:
-- On T_RPAREN
--   reduce production option(expression) ->

State 396:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression)
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 398
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 398:
## Known stack suffix:
## T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement
## LR(1) items:
for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_statement -> T_FOR T_LPAREN T_VAR separated_nonempty_list(T_COMMA,pair(variable,option(initializer_no_in))) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement

State 399:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in)
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) . T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_SEMICOLON shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON . option(expression) T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On option(expression) shift to state 401
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 192
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expression) ->

State 401:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression)
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) . T_SEMICOLON option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_SEMICOLON shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON . option(expression) T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On option(expression) shift to state 403
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 192
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:
-- On T_RPAREN
--   reduce production option(expression) ->

State 403:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression)
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 405
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 405:
## Known stack suffix:
## T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement
## LR(1) items:
for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_statement -> T_FOR T_LPAREN option(expression_no_in) T_SEMICOLON option(expression) T_SEMICOLON option(expression) T_RPAREN statement

State 406:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expression
## LR(1) items:
assignment_expression_no_in -> left_hand_side_expression . assignment_operator assignment_expression_no_in [ T_SEMICOLON T_COMMA ]
for_in_statement -> T_FOR T_LPAREN left_hand_side_expression . T_IN expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
pre_in_expression -> left_hand_side_expression . [ T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_BIT_XOR T_BIT_OR T_BIT_AND T_AND ]
## Transitions:
-- On T_RSHIFT_ASSIGN shift to state 102
-- On T_RSHIFT3_ASSIGN shift to state 103
-- On T_PLUS_ASSIGN shift to state 104
-- On T_MULT_ASSIGN shift to state 105
-- On T_MOD_ASSIGN shift to state 106
-- On T_MINUS_ASSIGN shift to state 107
-- On T_LSHIFT_ASSIGN shift to state 108
-- On T_IN shift to state 407
-- On T_DIV_ASSIGN shift to state 109
-- On T_BIT_XOR_ASSIGN shift to state 110
-- On T_BIT_OR_ASSIGN shift to state 111
-- On T_BIT_AND_ASSIGN shift to state 112
-- On T_ASSIGN shift to state 113
-- On assignment_operator shift to state 226
## Reductions:
-- On T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_PLUS T_PLING T_OR T_NOT_EQUAL T_MULT T_MOD T_MINUS T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_INSTANCEOF T_INCR_NB T_GREATER_THAN_EQUAL T_GREATER_THAN T_EQUAL T_DIV T_DECR_NB T_COMMA T_BIT_XOR T_BIT_OR T_BIT_AND T_AND
--   reduce production pre_in_expression -> left_hand_side_expression

State 407:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expression T_IN
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN left_hand_side_expression T_IN . expression T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 408
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 408:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expression T_IN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
for_in_statement -> T_FOR T_LPAREN left_hand_side_expression T_IN expression . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 409
-- On T_COMMA shift to state 136
## Reductions:

State 409:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expression T_IN expression T_RPAREN
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN left_hand_side_expression T_IN expression T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 410
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 410:
## Known stack suffix:
## T_FOR T_LPAREN left_hand_side_expression T_IN expression T_RPAREN statement
## LR(1) items:
for_in_statement -> T_FOR T_LPAREN left_hand_side_expression T_IN expression T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_in_statement -> T_FOR T_LPAREN left_hand_side_expression T_IN expression T_RPAREN statement

State 411:
## Known stack suffix:
## expression_no_in
## LR(1) items:
expression_no_in -> expression_no_in . T_COMMA assignment_expression_no_in [ T_SEMICOLON T_COMMA ]
option(expression_no_in) -> expression_no_in . [ T_SEMICOLON ]
## Transitions:
-- On T_COMMA shift to state 412
## Reductions:
-- On T_SEMICOLON
--   reduce production option(expression_no_in) -> expression_no_in

State 412:
## Known stack suffix:
## expression_no_in T_COMMA
## LR(1) items:
expression_no_in -> expression_no_in T_COMMA . assignment_expression_no_in [ T_SEMICOLON T_COMMA ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression_no_in,assignment_expression_no_in) shift to state 217
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 218
-- On post_in_expression_no_in shift to state 219
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 225
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression_no_in shift to state 227
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression_no_in shift to state 413
-- On array_literal shift to state 87
## Reductions:

State 413:
## Known stack suffix:
## expression_no_in T_COMMA assignment_expression_no_in
## LR(1) items:
expression_no_in -> expression_no_in T_COMMA assignment_expression_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_no_in -> expression_no_in T_COMMA assignment_expression_no_in

State 414:
## Known stack suffix:
## assignment_expression_no_in
## LR(1) items:
expression_no_in -> assignment_expression_no_in . [ T_SEMICOLON T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_no_in -> assignment_expression_no_in

State 415:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement
## LR(1) items:
if_statement -> T_IF T_LPAREN expression T_RPAREN statement . T_ELSE statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
if_statement -> T_IF T_LPAREN expression T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_ELSE shift to state 416
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production if_statement -> T_IF T_LPAREN expression T_RPAREN statement

State 416:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement T_ELSE
## LR(1) items:
if_statement -> T_IF T_LPAREN expression T_RPAREN statement T_ELSE . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 417
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 417:
## Known stack suffix:
## T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement
## LR(1) items:
if_statement -> T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_statement -> T_IF T_LPAREN expression T_RPAREN statement T_ELSE statement

State 418:
## Known stack suffix:
## statement
## LR(1) items:
list(statement) -> statement . list(statement) [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 418
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(statement) shift to state 419
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY T_DEFAULT T_CASE
--   reduce production list(statement) ->

State 419:
## Known stack suffix:
## statement list(statement)
## LR(1) items:
list(statement) -> statement list(statement) . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(statement) -> statement list(statement)

State 420:
## Known stack suffix:
## T_CASE expression T_COLON list(statement)
## LR(1) items:
case_clause -> T_CASE expression T_COLON list(statement) . [ T_RCURLY T_DEFAULT T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_clause -> T_CASE expression T_COLON list(statement)

State 421:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause)
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) . option(pair(default_clause,list(case_clause))) T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_DEFAULT shift to state 422
-- On option(pair(default_clause,list(case_clause))) shift to state 425
-- On default_clause shift to state 427
## Reductions:
-- On T_RCURLY
--   reduce production option(pair(default_clause,list(case_clause))) ->

State 422:
## Known stack suffix:
## T_DEFAULT
## LR(1) items:
default_clause -> T_DEFAULT . T_COLON list(statement) [ T_RCURLY T_CASE ]
## Transitions:
-- On T_COLON shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## T_DEFAULT T_COLON
## LR(1) items:
default_clause -> T_DEFAULT T_COLON . list(statement) [ T_RCURLY T_CASE ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 418
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(statement) shift to state 424
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY T_CASE
--   reduce production list(statement) ->

State 424:
## Known stack suffix:
## T_DEFAULT T_COLON list(statement)
## LR(1) items:
default_clause -> T_DEFAULT T_COLON list(statement) . [ T_RCURLY T_CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production default_clause -> T_DEFAULT T_COLON list(statement)

State 425:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause)))
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) . T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RCURLY shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY
## LR(1) items:
switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_statement -> T_SWITCH T_LPAREN expression T_RPAREN T_LCURLY list(case_clause) option(pair(default_clause,list(case_clause))) T_RCURLY

State 427:
## Known stack suffix:
## default_clause
## LR(1) items:
option(pair(default_clause,list(case_clause))) -> default_clause . list(case_clause) [ T_RCURLY ]
## Transitions:
-- On T_CASE shift to state 186
-- On list(case_clause) shift to state 428
-- On case_clause shift to state 429
## Reductions:
-- On T_RCURLY
--   reduce production list(case_clause) ->

State 428:
## Known stack suffix:
## default_clause list(case_clause)
## LR(1) items:
option(pair(default_clause,list(case_clause))) -> default_clause list(case_clause) . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(pair(default_clause,list(case_clause))) -> default_clause list(case_clause)

State 429:
## Known stack suffix:
## case_clause
## LR(1) items:
list(case_clause) -> case_clause . list(case_clause) [ T_RCURLY T_DEFAULT ]
## Transitions:
-- On T_CASE shift to state 186
-- On list(case_clause) shift to state 430
-- On case_clause shift to state 429
## Reductions:
-- On T_RCURLY T_DEFAULT
--   reduce production list(case_clause) ->

State 430:
## Known stack suffix:
## case_clause list(case_clause)
## LR(1) items:
list(case_clause) -> case_clause list(case_clause) . [ T_RCURLY T_DEFAULT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(case_clause) -> case_clause list(case_clause)

State 431:
## Known stack suffix:
## T_LCURLY list(statement)
## LR(1) items:
curly_block(list(statement)) -> T_LCURLY list(statement) . T_RCURLY [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CATCH T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RCURLY shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## T_LCURLY list(statement) T_RCURLY
## LR(1) items:
curly_block(list(statement)) -> T_LCURLY list(statement) T_RCURLY . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CATCH T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production curly_block(list(statement)) -> T_LCURLY list(statement) T_RCURLY

State 433:
## Known stack suffix:
## curly_block(list(statement))
## LR(1) items:
block -> curly_block(list(statement)) . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CATCH T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> curly_block(list(statement))

State 434:
## Known stack suffix:
## T_TRY block
## LR(1) items:
try_statement -> T_TRY block . catch option(finally) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
try_statement -> T_TRY block . finally [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_FINALLY shift to state 435
-- On T_CATCH shift to state 437
-- On finally shift to state 442
-- On catch shift to state 443
## Reductions:

State 435:
## Known stack suffix:
## T_FINALLY
## LR(1) items:
finally -> T_FINALLY . block [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LCURLY shift to state 178
-- On curly_block(list(statement)) shift to state 433
-- On block shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## T_FINALLY block
## LR(1) items:
finally -> T_FINALLY block . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production finally -> T_FINALLY block

State 437:
## Known stack suffix:
## T_CATCH
## LR(1) items:
catch -> T_CATCH . T_LPAREN variable T_RPAREN block [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## T_CATCH T_LPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN . variable T_RPAREN block [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 439
-- On identifier shift to state 36
## Reductions:

State 439:
## Known stack suffix:
## T_CATCH T_LPAREN variable
## LR(1) items:
catch -> T_CATCH T_LPAREN variable . T_RPAREN block [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## T_CATCH T_LPAREN variable T_RPAREN
## LR(1) items:
catch -> T_CATCH T_LPAREN variable T_RPAREN . block [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LCURLY shift to state 178
-- On curly_block(list(statement)) shift to state 433
-- On block shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## T_CATCH T_LPAREN variable T_RPAREN block
## LR(1) items:
catch -> T_CATCH T_LPAREN variable T_RPAREN block . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FINALLY T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch -> T_CATCH T_LPAREN variable T_RPAREN block

State 442:
## Known stack suffix:
## T_TRY block finally
## LR(1) items:
try_statement -> T_TRY block finally . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_statement -> T_TRY block finally

State 443:
## Known stack suffix:
## T_TRY block catch
## LR(1) items:
try_statement -> T_TRY block catch . option(finally) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_FINALLY shift to state 435
-- On option(finally) shift to state 444
-- On finally shift to state 445
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF
--   reduce production option(finally) ->

State 444:
## Known stack suffix:
## T_TRY block catch option(finally)
## LR(1) items:
try_statement -> T_TRY block catch option(finally) . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production try_statement -> T_TRY block catch option(finally)

State 445:
## Known stack suffix:
## finally
## LR(1) items:
option(finally) -> finally . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(finally) -> finally

State 446:
## Known stack suffix:
## T_WHILE T_LPAREN expression T_RPAREN statement
## LR(1) items:
while_statement -> T_WHILE T_LPAREN expression T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production while_statement -> T_WHILE T_LPAREN expression T_RPAREN statement

State 447:
## Known stack suffix:
## T_FUNCTION
## LR(1) items:
function_declaration -> T_FUNCTION . variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 448
-- On identifier shift to state 36
## Reductions:

State 448:
## Known stack suffix:
## T_FUNCTION variable
## LR(1) items:
function_declaration -> T_FUNCTION variable . T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LPAREN shift to state 449
## Reductions:

State 449:
## Known stack suffix:
## T_FUNCTION variable T_LPAREN
## LR(1) items:
function_declaration -> T_FUNCTION variable T_LPAREN . loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_IDENTIFIER shift to state 29
-- On variable shift to state 33
-- On separated_nonempty_list(T_COMMA,variable) shift to state 37
-- On loption(separated_nonempty_list(T_COMMA,variable)) shift to state 450
-- On identifier shift to state 36
## Reductions:
-- On T_RPAREN
--   reduce production loption(separated_nonempty_list(T_COMMA,variable)) ->

State 450:
## Known stack suffix:
## T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable))
## LR(1) items:
function_declaration -> T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) . T_RPAREN curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN
## LR(1) items:
function_declaration -> T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN . curly_block(list(source_element)) [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_LCURLY shift to state 40
-- On curly_block(list(source_element)) shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element))
## LR(1) items:
function_declaration -> T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_declaration -> T_FUNCTION variable T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element))

State 453:
## Known stack suffix:
## statement
## LR(1) items:
source_element -> statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_element -> statement

State 454:
## Known stack suffix:
## source_element
## LR(1) items:
list(source_element) -> source_element . list(source_element) [ T_RCURLY EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FUNCTION shift to state 447
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 453
-- On source_element shift to state 454
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On list(source_element) shift to state 455
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On function_declaration shift to state 456
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:
-- On T_RCURLY EOF
--   reduce production list(source_element) ->

State 455:
## Known stack suffix:
## source_element list(source_element)
## LR(1) items:
list(source_element) -> source_element list(source_element) . [ T_RCURLY EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(source_element) -> source_element list(source_element)

State 456:
## Known stack suffix:
## function_declaration
## LR(1) items:
source_element -> function_declaration . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_DO T_DELETE T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_element -> function_declaration

State 457:
## Known stack suffix:
## T_LCURLY list(source_element)
## LR(1) items:
curly_block(list(source_element)) -> T_LCURLY list(source_element) . T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RCURLY shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## T_LCURLY list(source_element) T_RCURLY
## LR(1) items:
curly_block(list(source_element)) -> T_LCURLY list(source_element) T_RCURLY . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production curly_block(list(source_element)) -> T_LCURLY list(source_element) T_RCURLY

State 459:
## Known stack suffix:
## T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element))
## LR(1) items:
function_expression -> T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element)) . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_expression -> T_FUNCTION option(variable) T_LPAREN loption(separated_nonempty_list(T_COMMA,variable)) T_RPAREN curly_block(list(source_element))

State 460:
## Known stack suffix:
## T_INCR pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_INCR pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_INCR pre_in_expression

State 461:
## Known stack suffix:
## T_INCR_NB pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_INCR_NB pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_INCR_NB pre_in_expression

State 462:
## Known stack suffix:
## T_COMMA
## LR(1) items:
elison_rev -> T_COMMA . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elison_rev -> T_COMMA

State 463:
## Known stack suffix:
## elison_rev
## LR(1) items:
element_list_rev -> elison_rev . assignment_expression [ T_RBRACKET T_COMMA ]
elison -> elison_rev . [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 464
-- On array_literal shift to state 87
## Reductions:
-- On T_RBRACKET T_COMMA
--   reduce production elison -> elison_rev

State 464:
## Known stack suffix:
## elison_rev assignment_expression
## LR(1) items:
element_list_rev -> elison_rev assignment_expression . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> elison_rev assignment_expression

State 465:
## Known stack suffix:
## T_LBRACKET elison
## LR(1) items:
array_literal -> T_LBRACKET elison . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
elison_rev -> elison . T_COMMA [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT ]
## Transitions:
-- On T_RBRACKET shift to state 466
-- On T_COMMA shift to state 467
## Reductions:

State 466:
## Known stack suffix:
## T_LBRACKET elison T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET elison T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET elison T_RBRACKET

State 467:
## Known stack suffix:
## elison T_COMMA
## LR(1) items:
elison_rev -> elison T_COMMA . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elison_rev -> elison T_COMMA

State 468:
## Known stack suffix:
## T_LBRACKET element_list_rev
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev . elison_rev T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
element_list -> element_list_rev . [ T_RBRACKET ]
element_list_rev -> element_list_rev . elison assignment_expression [ T_RBRACKET T_COMMA ]
## Transitions:
-- On T_COMMA shift to state 462
-- On elison_rev shift to state 469
-- On elison shift to state 471
## Reductions:
-- On T_RBRACKET
--   reduce production element_list -> element_list_rev

State 469:
## Known stack suffix:
## T_LBRACKET element_list_rev elison_rev
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev elison_rev . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
elison -> elison_rev . [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT ]
## Transitions:
-- On T_RBRACKET shift to state 470
## Reductions:
-- On T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT
--   reduce production elison -> elison_rev

State 470:
## Known stack suffix:
## T_LBRACKET element_list_rev elison_rev T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET element_list_rev elison_rev T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET element_list_rev elison_rev T_RBRACKET

State 471:
## Known stack suffix:
## element_list_rev elison
## LR(1) items:
element_list_rev -> element_list_rev elison . assignment_expression [ T_RBRACKET T_COMMA ]
elison_rev -> elison . T_COMMA [ T_VOID T_TYPEOF T_TRUE T_THIS T_STRING T_REGEX T_RBRACKET T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IDENTIFIER T_FUNCTION T_FALSE T_DELETE T_DECR_NB T_DECR T_COMMA T_BIT_NOT ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_COMMA shift to state 467
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 472
-- On array_literal shift to state 87
## Reductions:

State 472:
## Known stack suffix:
## element_list_rev elison assignment_expression
## LR(1) items:
element_list_rev -> element_list_rev elison assignment_expression . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> element_list_rev elison assignment_expression

State 473:
## Known stack suffix:
## T_LBRACKET element_list
## LR(1) items:
array_literal -> T_LBRACKET element_list . T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RBRACKET shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## T_LBRACKET element_list T_RBRACKET
## LR(1) items:
array_literal -> T_LBRACKET element_list T_RBRACKET . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_literal -> T_LBRACKET element_list T_RBRACKET

State 475:
## Known stack suffix:
## assignment_expression
## LR(1) items:
element_list_rev -> assignment_expression . [ T_RBRACKET T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production element_list_rev -> assignment_expression

State 476:
## Known stack suffix:
## property_name T_COLON assignment_expression
## LR(1) items:
object_key_value -> property_name T_COLON assignment_expression . [ T_RCURLY T_COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production object_key_value -> property_name T_COLON assignment_expression

State 477:
## Known stack suffix:
## object_key_value
## LR(1) items:
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value . [ T_RCURLY ]
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value . T_COMMA [ T_RCURLY ]
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value . T_COMMA separated_or_terminated_list(T_COMMA,object_key_value) [ T_RCURLY ]
## Transitions:
-- On T_COMMA shift to state 478
## Reductions:
-- On T_RCURLY
--   reduce production separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value

State 478:
## Known stack suffix:
## object_key_value T_COMMA
## LR(1) items:
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value T_COMMA . [ T_RCURLY ]
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value T_COMMA . separated_or_terminated_list(T_COMMA,object_key_value) [ T_RCURLY ]
## Transitions:
-- On T_STRING shift to state 17
-- On T_NUMBER shift to state 10
-- On T_IDENTIFIER shift to state 18
-- On separated_or_terminated_list(T_COMMA,object_key_value) shift to state 479
-- On property_name shift to state 21
-- On object_key_value shift to state 477
-- On numeric_literal shift to state 480
## Reductions:
-- On T_RCURLY
--   reduce production separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value T_COMMA

State 479:
## Known stack suffix:
## object_key_value T_COMMA separated_or_terminated_list(T_COMMA,object_key_value)
## LR(1) items:
separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value T_COMMA separated_or_terminated_list(T_COMMA,object_key_value) . [ T_RCURLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_or_terminated_list(T_COMMA,object_key_value) -> object_key_value T_COMMA separated_or_terminated_list(T_COMMA,object_key_value)

State 480:
## Known stack suffix:
## numeric_literal
## LR(1) items:
property_name -> numeric_literal . [ T_COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production property_name -> numeric_literal

State 481:
## Known stack suffix:
## T_LCURLY empty
## LR(1) items:
curly_block(empty) -> T_LCURLY empty . T_RCURLY [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RCURLY shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## T_LCURLY empty T_RCURLY
## LR(1) items:
curly_block(empty) -> T_LCURLY empty T_RCURLY . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production curly_block(empty) -> T_LCURLY empty T_RCURLY

State 483:
## Known stack suffix:
## T_MINUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_MINUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_MINUS pre_in_expression

State 484:
## Known stack suffix:
## T_LPAREN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
primary_expression_no_statement -> T_LPAREN expression . T_RPAREN [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_RPAREN shift to state 485
-- On T_COMMA shift to state 136
## Reductions:

State 485:
## Known stack suffix:
## T_LPAREN expression T_RPAREN
## LR(1) items:
primary_expression_no_statement -> T_LPAREN expression T_RPAREN . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression_no_statement -> T_LPAREN expression T_RPAREN

State 486:
## Known stack suffix:
## T_NEW new_expression
## LR(1) items:
new_expression -> T_NEW new_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expression -> T_NEW new_expression

State 487:
## Known stack suffix:
## T_NEW member_expression
## LR(1) items:
member_expression -> member_expression . T_LBRACKET expression T_RBRACKET [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression -> member_expression . T_PERIOD identifier [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
member_expression -> T_NEW member_expression . arguments [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
new_expression -> member_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
-- On T_PERIOD shift to state 61
-- On T_LPAREN shift to state 63
-- On T_LBRACKET shift to state 155
-- On arguments shift to state 488
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF
--   reduce production new_expression -> member_expression

State 488:
## Known stack suffix:
## T_NEW member_expression arguments
## LR(1) items:
member_expression -> T_NEW member_expression arguments . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT_ASSIGN T_RSHIFT3_ASSIGN T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS_ASSIGN T_PLUS T_PLING T_PERIOD T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT_ASSIGN T_MULT T_MOD_ASSIGN T_MOD T_MINUS_ASSIGN T_MINUS T_LSHIFT_ASSIGN T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV_ASSIGN T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR_ASSIGN T_BIT_XOR T_BIT_OR_ASSIGN T_BIT_OR T_BIT_NOT T_BIT_AND_ASSIGN T_BIT_AND T_ASSIGN T_AND EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_expression -> T_NEW member_expression arguments

State 489:
## Known stack suffix:
## T_NOT pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_NOT pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_NOT pre_in_expression

State 490:
## Known stack suffix:
## T_PLUS pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_PLUS pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_MULT shift to state 71
-- On T_MOD shift to state 140
-- On T_INCR_NB shift to state 53
-- On T_DIV shift to state 142
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_PLUS pre_in_expression

State 491:
## Known stack suffix:
## T_TYPEOF pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_TYPEOF pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_TYPEOF pre_in_expression

State 492:
## Known stack suffix:
## T_VOID pre_in_expression
## LR(1) items:
pre_in_expression -> pre_in_expression . postfix_operator [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> T_VOID pre_in_expression . [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MULT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_DIV pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MOD pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_PLUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_MINUS pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_LSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
pre_in_expression -> pre_in_expression . T_RSHIFT3 pre_in_expression [ T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR_NB T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF ]
## Transitions:
-- On T_INCR_NB shift to state 53
-- On T_DECR_NB shift to state 54
-- On postfix_operator shift to state 55
## Reductions:
-- On T_WITH T_WHILE T_VOID T_VIRTUAL_SEMICOLON T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_STRICT_NOT_EQUAL T_STRICT_EQUAL T_SEMICOLON T_RSHIFT3 T_RSHIFT T_RPAREN T_RETURN T_REGEX T_RCURLY T_RBRACKET T_PLUS T_PLING T_OR T_NUMBER T_NULL T_NOT_EQUAL T_NOT T_NEW T_MULT T_MOD T_MINUS T_LSHIFT T_LPAREN T_LESS_THAN_EQUAL T_LESS_THAN T_LCURLY T_LBRACKET T_INSTANCEOF T_INCR T_IN T_IF T_IDENTIFIER T_GREATER_THAN_EQUAL T_GREATER_THAN T_FUNCTION T_FOR T_FALSE T_EQUAL T_ELSE T_DO T_DIV T_DELETE T_DEFAULT T_DECR T_DEBUGGER T_CONTINUE T_COMMA T_COLON T_CASE T_BREAK T_BIT_XOR T_BIT_OR T_BIT_NOT T_BIT_AND T_AND EOF
--   reduce production pre_in_expression -> T_VOID pre_in_expression

State 493:
## Known stack suffix:
## T_WITH T_LPAREN expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_RPAREN T_COMMA ]
with_statement -> T_WITH T_LPAREN expression . T_RPAREN statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_RPAREN shift to state 494
-- On T_COMMA shift to state 136
## Reductions:

State 494:
## Known stack suffix:
## T_WITH T_LPAREN expression T_RPAREN
## LR(1) items:
with_statement -> T_WITH T_LPAREN expression T_RPAREN . statement [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
-- On T_WITH shift to state 1
-- On T_WHILE shift to state 41
-- On T_VOID shift to state 164
-- On T_VAR shift to state 166
-- On T_TYPEOF shift to state 175
-- On T_TRY shift to state 177
-- On T_TRUE shift to state 5
-- On T_THROW shift to state 179
-- On T_THIS shift to state 6
-- On T_SWITCH shift to state 181
-- On T_STRING shift to state 7
-- On T_SEMICOLON shift to state 189
-- On T_RETURN shift to state 190
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 193
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 195
-- On T_NEW shift to state 197
-- On T_MINUS shift to state 201
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 178
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 203
-- On T_INCR shift to state 205
-- On T_IF shift to state 207
-- On T_IDENTIFIER shift to state 211
-- On T_FOR shift to state 212
-- On T_FALSE shift to state 43
-- On T_DO shift to state 261
-- On T_DELETE shift to state 262
-- On T_DECR_NB shift to state 264
-- On T_DECR shift to state 266
-- On T_DEBUGGER shift to state 268
-- On T_CONTINUE shift to state 269
-- On T_BREAK shift to state 273
-- On T_BIT_NOT shift to state 275
-- On with_statement shift to state 277
-- On while_statement shift to state 278
-- On variable_with_loc shift to state 48
-- On variable_statement shift to state 279
-- On try_statement shift to state 280
-- On throw_statement shift to state 281
-- On ternary(post_in_expression_no_statement,assignment_expression) shift to state 282
-- On switch_statement shift to state 283
-- On statement_no_semi shift to state 284
-- On statement_need_semi shift to state 285
-- On statement shift to state 495
-- On return_statement shift to state 294
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 295
-- On pre_in_expression_no_statement shift to state 296
-- On post_in_expression_no_statement shift to state 314
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression_no_statement shift to state 349
-- On member_expression_no_statement shift to state 350
-- On left_hand_side_expression_no_statement shift to state 357
-- On labeled_statement shift to state 360
-- On label shift to state 361
-- On if_statement shift to state 364
-- On identifier shift to state 272
-- On for_statement shift to state 365
-- On for_in_statement shift to state 366
-- On expression_statement shift to state 367
-- On expression_no_statement shift to state 368
-- On empty_statement shift to state 371
-- On do_while_statement shift to state 372
-- On debugger_statement shift to state 373
-- On curly_block(list(statement)) shift to state 374
-- On continue_statement shift to state 375
-- On conditional_expression_no_statement shift to state 376
-- On call_expression_no_statement shift to state 377
-- On break_statement shift to state 384
-- On boolean_literal shift to state 86
-- On assignment_expression_no_statement shift to state 385
-- On array_literal shift to state 87
## Reductions:

State 495:
## Known stack suffix:
## T_WITH T_LPAREN expression T_RPAREN statement
## LR(1) items:
with_statement -> T_WITH T_LPAREN expression T_RPAREN statement . [ T_WITH T_WHILE T_VOID T_VAR T_TYPEOF T_TRY T_TRUE T_THROW T_THIS T_SWITCH T_STRING T_SEMICOLON T_RETURN T_REGEX T_RCURLY T_PLUS T_NUMBER T_NULL T_NOT T_NEW T_MINUS T_LPAREN T_LCURLY T_LBRACKET T_INCR_NB T_INCR T_IF T_IDENTIFIER T_FUNCTION T_FOR T_FALSE T_ELSE T_DO T_DELETE T_DEFAULT T_DECR_NB T_DECR T_DEBUGGER T_CONTINUE T_CASE T_BREAK T_BIT_NOT EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_statement -> T_WITH T_LPAREN expression T_RPAREN statement

State 496:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

State 497:
## Known stack suffix:
## list(source_element)
## LR(1) items:
program -> list(source_element) . EOF [ # ]
## Transitions:
-- On EOF shift to state 498
## Reductions:

State 498:
## Known stack suffix:
## list(source_element) EOF
## LR(1) items:
program -> list(source_element) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> list(source_element) EOF

State 499:
## Known stack suffix:
##
## LR(1) items:
standalone_expression' -> . standalone_expression [ # ]
## Transitions:
-- On T_VOID shift to state 3
-- On T_TYPEOF shift to state 4
-- On T_TRUE shift to state 5
-- On T_THIS shift to state 6
-- On T_STRING shift to state 7
-- On T_REGEX shift to state 8
-- On T_PLUS shift to state 9
-- On T_NUMBER shift to state 10
-- On T_NULL shift to state 11
-- On T_NOT shift to state 12
-- On T_NEW shift to state 13
-- On T_MINUS shift to state 15
-- On T_LPAREN shift to state 14
-- On T_LCURLY shift to state 16
-- On T_LBRACKET shift to state 23
-- On T_INCR_NB shift to state 25
-- On T_INCR shift to state 26
-- On T_IDENTIFIER shift to state 27
-- On T_FUNCTION shift to state 28
-- On T_FALSE shift to state 43
-- On T_DELETE shift to state 44
-- On T_DECR_NB shift to state 45
-- On T_DECR shift to state 46
-- On T_BIT_NOT shift to state 47
-- On variable_with_loc shift to state 48
-- On ternary(post_in_expression,assignment_expression) shift to state 64
-- On standalone_expression shift to state 500
-- On regex_literal shift to state 49
-- On primary_expression_no_statement shift to state 50
-- On primary_expression shift to state 51
-- On pre_in_expression shift to state 66
-- On post_in_expression shift to state 81
-- On object_literal shift to state 56
-- On numeric_literal shift to state 57
-- On null_literal shift to state 58
-- On new_expression shift to state 59
-- On member_expression shift to state 60
-- On left_hand_side_expression shift to state 101
-- On function_expression shift to state 74
-- On expression shift to state 501
-- On curly_block(separated_or_terminated_list(T_COMMA,object_key_value)) shift to state 75
-- On curly_block(empty) shift to state 76
-- On conditional_expression shift to state 115
-- On call_expression shift to state 77
-- On boolean_literal shift to state 86
-- On assignment_expression shift to state 138
-- On array_literal shift to state 87
## Reductions:

State 500:
## Known stack suffix:
## standalone_expression
## LR(1) items:
standalone_expression' -> standalone_expression . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept standalone_expression

State 501:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . T_COMMA assignment_expression [ T_COMMA EOF ]
standalone_expression -> expression . EOF [ # ]
## Transitions:
-- On T_COMMA shift to state 136
-- On EOF shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## expression EOF
## LR(1) items:
standalone_expression -> expression EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production standalone_expression -> expression EOF

