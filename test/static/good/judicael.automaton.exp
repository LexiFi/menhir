State 0:
main' -> . main [ # ]
-- On INT shift to state 1
-- On IDENT shift to state 2
-- On main shift to state 5
-- On instruction shift to state 6
-- On expr shift to state 7

State 1:
expr -> INT . [ PLUS # ]
-- On PLUS reduce production expr -> INT
-- On # reduce production expr -> INT
** End-of-stream conflict on PLUS
**   There is a tension between
**   (1) reducing production expr -> INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 2:
instruction -> IDENT . PARENG PAREND [ # ]
-- On PARENG shift to state 3

State 3:
instruction -> IDENT PARENG . PAREND [ # ]
-- On PAREND shift to state 4

State 4:
instruction -> IDENT PARENG PAREND . [ # ]
-- On # reduce production instruction -> IDENT PARENG PAREND

State 5:
main' -> main . [ # ]
-- On # accept main

State 6:
main -> instruction . [ # ]
-- On # reduce production main -> instruction

State 7:
expr -> expr . PLUS expr [ PLUS # ]
instruction -> expr . [ # ]
-- On PLUS shift to state 8
-- On # reduce production instruction -> expr
** End-of-stream conflict on PLUS
**   There is a tension between
**   (1) reducing production instruction -> expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
expr -> expr PLUS . expr [ PLUS # ]
-- On INT shift to state 1
-- On expr shift to state 9

State 9:
expr -> expr . PLUS expr [ PLUS # ]
expr -> expr PLUS expr . [ PLUS # ]
-- On PLUS reduce production expr -> expr PLUS expr
-- On # reduce production expr -> expr PLUS expr
** End-of-stream conflict on PLUS
**   There is a tension between
**   (1) reducing production expr -> expr PLUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

