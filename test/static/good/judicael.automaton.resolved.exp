State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On INT shift to state 1
-- On IDENT shift to state 2
-- On main shift to state 5
-- On instruction shift to state 6
-- On expr shift to state 7
## Reductions:

State 1:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ PLUS # ]
## Transitions:
## Reductions:
-- On PLUS reduce production expr -> INT

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
instruction -> IDENT . PARENG PAREND [ # ]
## Transitions:
-- On PARENG shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## IDENT PARENG
## LR(1) items:
instruction -> IDENT PARENG . PAREND [ # ]
## Transitions:
-- On PAREND shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## IDENT PARENG PAREND
## LR(1) items:
instruction -> IDENT PARENG PAREND . [ # ]
## Transitions:
## Reductions:
-- On # reduce production instruction -> IDENT PARENG PAREND

State 5:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

State 6:
## Known stack suffix:
## instruction
## LR(1) items:
main -> instruction . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> instruction

State 7:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS # ]
instruction -> expr . [ # ]
## Transitions:
-- On PLUS shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ PLUS # ]
## Transitions:
-- On INT shift to state 1
-- On expr shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ PLUS # ]
expr -> expr PLUS expr . [ PLUS # ]
## Transitions:
## Reductions:
-- On PLUS reduce production expr -> expr PLUS expr

