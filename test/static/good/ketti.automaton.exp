State 0:
## Known stack suffix:
##
## LR(1) items:
expr' -> . expr [ # ]
## Transitions:
-- On PLUS shift to state 1
-- On INT shift to state 3
-- On plus shift to state 4
-- On indir shift to state 5
-- On expr shift to state 14
## Reductions:

State 1:
## Known stack suffix:
## PLUS
## LR(1) items:
expr -> PLUS . PLUS expr INT [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## PLUS PLUS
## LR(1) items:
expr -> PLUS PLUS . expr INT [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 1
-- On INT shift to state 3
-- On plus shift to state 4
-- On indir shift to state 5
-- On expr shift to state 12
## Reductions:

State 3:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ PLUS MINUS INT # ]
## Transitions:
## Reductions:
-- On PLUS MINUS INT #
--   reduce production expr -> INT
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production expr -> INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## plus
## LR(1) items:
expr -> plus . [ PLUS MINUS INT # ]
indir -> plus . [ MINUS ]
## Transitions:
## Reductions:
-- On PLUS MINUS INT #
--   reduce production expr -> plus
-- On MINUS
--   reduce production indir -> plus
** Conflict on MINUS
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production expr -> plus
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
## Known stack suffix:
## indir
## LR(1) items:
expr -> indir . MINUS indir [ PLUS MINUS INT # ]
## Transitions:
-- On MINUS shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## indir MINUS
## LR(1) items:
expr -> indir MINUS . indir [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 1
-- On INT shift to state 3
-- On plus shift to state 7
-- On indir shift to state 8
-- On expr shift to state 9
## Reductions:

State 7:
## Known stack suffix:
## plus
## LR(1) items:
expr -> plus . [ PLUS ]
indir -> plus . [ PLUS MINUS INT # ]
## Transitions:
## Reductions:
-- On PLUS
--   reduce production expr -> plus
-- On PLUS MINUS INT #
--   reduce production indir -> plus
** Conflict on PLUS
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production indir -> plus
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## indir MINUS indir
## LR(1) items:
expr -> indir . MINUS indir [ PLUS ]
expr -> indir MINUS indir . [ PLUS MINUS INT # ]
## Transitions:
-- On MINUS shift to state 6
## Reductions:
-- On PLUS MINUS INT #
--   reduce production expr -> indir MINUS indir
** Conflict on MINUS
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production expr -> indir MINUS indir
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## expr
## LR(1) items:
plus -> expr . PLUS expr [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## expr PLUS
## LR(1) items:
plus -> expr PLUS . expr [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 1
-- On INT shift to state 3
-- On plus shift to state 4
-- On indir shift to state 5
-- On expr shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
plus -> expr . PLUS expr [ PLUS MINUS INT # ]
plus -> expr PLUS expr . [ PLUS MINUS INT # ]
## Transitions:
-- On PLUS shift to state 10
## Reductions:
-- On PLUS MINUS INT #
--   reduce production plus -> expr PLUS expr
** Conflict on PLUS
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production plus -> expr PLUS expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 12:
## Known stack suffix:
## PLUS PLUS expr
## LR(1) items:
expr -> PLUS PLUS expr . INT [ PLUS MINUS INT # ]
plus -> expr . PLUS expr [ PLUS MINUS INT ]
## Transitions:
-- On PLUS shift to state 10
-- On INT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## PLUS PLUS expr INT
## LR(1) items:
expr -> PLUS PLUS expr INT . [ PLUS MINUS INT # ]
## Transitions:
## Reductions:
-- On PLUS MINUS INT #
--   reduce production expr -> PLUS PLUS expr INT
** End-of-stream conflict on PLUS MINUS INT
**   There is a tension between
**   (1) reducing production expr -> PLUS PLUS expr INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 14:
## Known stack suffix:
## expr
## LR(1) items:
expr' -> expr . [ # ]
plus -> expr . PLUS expr [ PLUS MINUS # ]
## Transitions:
-- On PLUS shift to state 10
## Reductions:
-- On #
--   accept expr
** End-of-stream conflict on PLUS
**   There is a tension between
**   (1) accepting expr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

