State 0:
code_list' -> . code_list [ # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 18
-- On code shift to state 19
-- On # reduce production code_list -> 

State 1:
code -> UNDEF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> UNDEF
-- On OTHER reduce production code -> UNDEF
-- On IFNDEF reduce production code -> UNDEF
-- On IFDEF reduce production code -> UNDEF
-- On ENDIF reduce production code -> UNDEF
-- On ELSE reduce production code -> UNDEF
-- On DEFINE reduce production code -> UNDEF
-- On # reduce production code -> UNDEF

State 2:
code -> OTHER . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> OTHER
-- On OTHER reduce production code -> OTHER
-- On IFNDEF reduce production code -> OTHER
-- On IFDEF reduce production code -> OTHER
-- On ENDIF reduce production code -> OTHER
-- On ELSE reduce production code -> OTHER
-- On DEFINE reduce production code -> OTHER
-- On # reduce production code -> OTHER

State 3:
code -> IFNDEF . code_list ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFNDEF . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 13
-- On code shift to state 11
-- On ENDIF reduce production code_list -> 
-- On ELSE reduce production code_list -> 

State 4:
code -> IFDEF . code_list ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFDEF . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 6
-- On code shift to state 11
-- On ENDIF reduce production code_list -> 
-- On ELSE reduce production code_list -> 

State 5:
code -> DEFINE . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> DEFINE
-- On OTHER reduce production code -> DEFINE
-- On IFNDEF reduce production code -> DEFINE
-- On IFDEF reduce production code -> DEFINE
-- On ENDIF reduce production code -> DEFINE
-- On ELSE reduce production code -> DEFINE
-- On DEFINE reduce production code -> DEFINE
-- On # reduce production code -> DEFINE

State 6:
code -> IFDEF code_list . ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFDEF code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On ENDIF shift to state 7
-- On ELSE shift to state 8

State 7:
code -> IFDEF code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> IFDEF code_list ENDIF
-- On OTHER reduce production code -> IFDEF code_list ENDIF
-- On IFNDEF reduce production code -> IFDEF code_list ENDIF
-- On IFDEF reduce production code -> IFDEF code_list ENDIF
-- On ENDIF reduce production code -> IFDEF code_list ENDIF
-- On ELSE reduce production code -> IFDEF code_list ENDIF
-- On DEFINE reduce production code -> IFDEF code_list ENDIF
-- On # reduce production code -> IFDEF code_list ENDIF

State 8:
code -> IFDEF code_list ELSE . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 9
-- On code shift to state 11
-- On ENDIF reduce production code_list -> 

State 9:
code -> IFDEF code_list ELSE code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On ENDIF shift to state 10

State 10:
code -> IFDEF code_list ELSE code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On OTHER reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On IFNDEF reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On IFDEF reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On ENDIF reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On ELSE reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On DEFINE reduce production code -> IFDEF code_list ELSE code_list ENDIF
-- On # reduce production code -> IFDEF code_list ELSE code_list ENDIF

State 11:
code_list -> code . code_list [ ENDIF ELSE ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 12
-- On code shift to state 11
-- On ENDIF reduce production code_list -> 
-- On ELSE reduce production code_list -> 

State 12:
code_list -> code code_list . [ ENDIF ELSE ]
-- On ENDIF reduce production code_list -> code code_list
-- On ELSE reduce production code_list -> code code_list

State 13:
code -> IFNDEF code_list . ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFNDEF code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On ENDIF shift to state 14
-- On ELSE shift to state 15

State 14:
code -> IFNDEF code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> IFNDEF code_list ENDIF
-- On OTHER reduce production code -> IFNDEF code_list ENDIF
-- On IFNDEF reduce production code -> IFNDEF code_list ENDIF
-- On IFDEF reduce production code -> IFNDEF code_list ENDIF
-- On ENDIF reduce production code -> IFNDEF code_list ENDIF
-- On ELSE reduce production code -> IFNDEF code_list ENDIF
-- On DEFINE reduce production code -> IFNDEF code_list ENDIF
-- On # reduce production code -> IFNDEF code_list ENDIF

State 15:
code -> IFNDEF code_list ELSE . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 16
-- On code shift to state 11
-- On ENDIF reduce production code_list -> 

State 16:
code -> IFNDEF code_list ELSE code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On ENDIF shift to state 17

State 17:
code -> IFNDEF code_list ELSE code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
-- On UNDEF reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On OTHER reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On IFNDEF reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On IFDEF reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On ENDIF reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On ELSE reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On DEFINE reduce production code -> IFNDEF code_list ELSE code_list ENDIF
-- On # reduce production code -> IFNDEF code_list ELSE code_list ENDIF

State 18:
code_list' -> code_list . [ # ]
-- On # accept code_list

State 19:
code_list -> code . code_list [ # ]
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 20
-- On code shift to state 19
-- On # reduce production code_list -> 

State 20:
code_list -> code code_list . [ # ]
-- On # reduce production code_list -> code code_list

State 0 has an end-of-stream conflict. There is a tension between
(1) reducing production code_list -> 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF DEFINE,
which would require some other action.

State 1 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> UNDEF
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 2 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> OTHER
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 5 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> DEFINE
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 7 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> IFDEF code_list ENDIF
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 10 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> IFDEF code_list ELSE code_list ENDIF
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 14 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> IFNDEF code_list ENDIF
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 17 has an end-of-stream conflict. There is a tension between
(1) reducing production code -> IFNDEF code_list ELSE code_list ENDIF
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE,
which would require some other action.

State 19 has an end-of-stream conflict. There is a tension between
(1) reducing production code_list -> 
without even requesting a lookahead token, and
(2) checking whether the lookahead token is one of UNDEF OTHER IFNDEF IFDEF DEFINE,
which would require some other action.

