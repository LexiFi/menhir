State 0:
## Known stack suffix:
##
## LR(1) items:
code_list' -> . code_list [ # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 18
-- On code shift to state 19
## Reductions:

State 1:
## Known stack suffix:
## UNDEF
## LR(1) items:
code -> UNDEF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> UNDEF

State 2:
## Known stack suffix:
## OTHER
## LR(1) items:
code -> OTHER . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> OTHER

State 3:
## Known stack suffix:
## IFNDEF
## LR(1) items:
code -> IFNDEF . code_list ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFNDEF . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 13
-- On code shift to state 11
## Reductions:
-- On ENDIF ELSE
--   reduce production code_list ->

State 4:
## Known stack suffix:
## IFDEF
## LR(1) items:
code -> IFDEF . code_list ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFDEF . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 6
-- On code shift to state 11
## Reductions:
-- On ENDIF ELSE
--   reduce production code_list ->

State 5:
## Known stack suffix:
## DEFINE
## LR(1) items:
code -> DEFINE . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> DEFINE

State 6:
## Known stack suffix:
## IFDEF code_list
## LR(1) items:
code -> IFDEF code_list . ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFDEF code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On ENDIF shift to state 7
-- On ELSE shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## IFDEF code_list ENDIF
## LR(1) items:
code -> IFDEF code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> IFDEF code_list ENDIF

State 8:
## Known stack suffix:
## IFDEF code_list ELSE
## LR(1) items:
code -> IFDEF code_list ELSE . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 9
-- On code shift to state 11
## Reductions:
-- On ENDIF
--   reduce production code_list ->

State 9:
## Known stack suffix:
## IFDEF code_list ELSE code_list
## LR(1) items:
code -> IFDEF code_list ELSE code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On ENDIF shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## IFDEF code_list ELSE code_list ENDIF
## LR(1) items:
code -> IFDEF code_list ELSE code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> IFDEF code_list ELSE code_list ENDIF

State 11:
## Known stack suffix:
## code
## LR(1) items:
code_list -> code . code_list [ ENDIF ELSE ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 12
-- On code shift to state 11
## Reductions:
-- On ENDIF ELSE
--   reduce production code_list ->

State 12:
## Known stack suffix:
## code code_list
## LR(1) items:
code_list -> code code_list . [ ENDIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code_list -> code code_list

State 13:
## Known stack suffix:
## IFNDEF code_list
## LR(1) items:
code -> IFNDEF code_list . ELSE code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
code -> IFNDEF code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On ENDIF shift to state 14
-- On ELSE shift to state 15
## Reductions:

State 14:
## Known stack suffix:
## IFNDEF code_list ENDIF
## LR(1) items:
code -> IFNDEF code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> IFNDEF code_list ENDIF

State 15:
## Known stack suffix:
## IFNDEF code_list ELSE
## LR(1) items:
code -> IFNDEF code_list ELSE . code_list ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 16
-- On code shift to state 11
## Reductions:
-- On ENDIF
--   reduce production code_list ->

State 16:
## Known stack suffix:
## IFNDEF code_list ELSE code_list
## LR(1) items:
code -> IFNDEF code_list ELSE code_list . ENDIF [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
-- On ENDIF shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## IFNDEF code_list ELSE code_list ENDIF
## LR(1) items:
code -> IFNDEF code_list ELSE code_list ENDIF . [ UNDEF OTHER IFNDEF IFDEF ENDIF ELSE DEFINE # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production code -> IFNDEF code_list ELSE code_list ENDIF

State 18:
## Known stack suffix:
## code_list
## LR(1) items:
code_list' -> code_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept code_list

State 19:
## Known stack suffix:
## code
## LR(1) items:
code_list -> code . code_list [ # ]
## Transitions:
-- On UNDEF shift to state 1
-- On OTHER shift to state 2
-- On IFNDEF shift to state 3
-- On IFDEF shift to state 4
-- On DEFINE shift to state 5
-- On code_list shift to state 20
-- On code shift to state 19
## Reductions:

State 20:
## Known stack suffix:
## code code_list
## LR(1) items:
code_list -> code code_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production code_list -> code code_list

