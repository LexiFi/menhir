State 0:
main' -> . main [ # ]
-- On Import shift to state 1
-- On main shift to state 10
-- On list(import) shift to state 11
-- On import shift to state 326
-- On entry(body) shift to state 328
-- On Type reduce production list(import) -> 
-- On Open reduce production list(import) -> 
-- On Let reduce production list(import) -> 
-- On Instance reduce production list(import) -> 
-- On Foreign reduce production list(import) -> 
-- On Exception reduce production list(import) -> 
-- On EOF reduce production list(import) -> 
-- On Class reduce production list(import) -> 

State 1:
import -> Import . import_module [ Type Open Let Instance Import Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 9

State 2:
upperName_aux -> UpperName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
upperName_aux -> UpperName . Dot upperName_aux [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
-- On Dot shift to state 3
-- On With reduce production upperName_aux -> UpperName
-- On UpperName reduce production upperName_aux -> UpperName
-- On Underscore reduce production upperName_aux -> UpperName
-- On Type reduce production upperName_aux -> UpperName
-- On RParen reduce production upperName_aux -> UpperName
-- On RDoubleArrowEff reduce production upperName_aux -> UpperName
-- On RBracketUp reduce production upperName_aux -> UpperName
-- On RBracket reduce production upperName_aux -> UpperName
-- On RBrace reduce production upperName_aux -> UpperName
-- On RArrowEff reduce production upperName_aux -> UpperName
-- On Pipe reduce production upperName_aux -> UpperName
-- On Open reduce production upperName_aux -> UpperName
-- On LowerName reduce production upperName_aux -> UpperName
-- On Let reduce production upperName_aux -> UpperName
-- On LParen reduce production upperName_aux -> UpperName
-- On LBracketUp reduce production upperName_aux -> UpperName
-- On LBracket reduce production upperName_aux -> UpperName
-- On LBrace reduce production upperName_aux -> UpperName
-- On LArrowEff reduce production upperName_aux -> UpperName
-- On Instance reduce production upperName_aux -> UpperName
-- On In reduce production upperName_aux -> UpperName
-- On Import reduce production upperName_aux -> UpperName
-- On Hash reduce production upperName_aux -> UpperName
-- On Foreign reduce production upperName_aux -> UpperName
-- On Exception reduce production upperName_aux -> UpperName
-- On Equal reduce production upperName_aux -> UpperName
-- On End reduce production upperName_aux -> UpperName
-- On EOF reduce production upperName_aux -> UpperName
-- On Comma reduce production upperName_aux -> UpperName
-- On Class reduce production upperName_aux -> UpperName
-- On As reduce production upperName_aux -> UpperName
-- On Arrow reduce production upperName_aux -> UpperName

State 3:
upperName_aux -> UpperName Dot . upperName_aux [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 4

State 4:
upperName_aux -> UpperName Dot upperName_aux . [ With UpperName Underscore Type Try String Semicolon RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket LBrace LArrowEff Int Instance In Import Hash Foreign Float Exception Equal End EOF Comma Colon Class Char As Arrow ]
-- On With reduce production upperName_aux -> UpperName Dot upperName_aux
-- On UpperName reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Underscore reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Type reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Try reduce production upperName_aux -> UpperName Dot upperName_aux
-- On String reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Semicolon reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RParen reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RDoubleArrowEff reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RBracketUp reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RBracket reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RBrace reduce production upperName_aux -> UpperName Dot upperName_aux
-- On RArrowEff reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Pipe reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Open reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Match reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LowerName reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Let reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LQMarkBracket reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LParen reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LBracketUp reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LBracket reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LBrace reduce production upperName_aux -> UpperName Dot upperName_aux
-- On LArrowEff reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Int reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Instance reduce production upperName_aux -> UpperName Dot upperName_aux
-- On In reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Import reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Hash reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Foreign reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Float reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Exception reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Equal reduce production upperName_aux -> UpperName Dot upperName_aux
-- On End reduce production upperName_aux -> UpperName Dot upperName_aux
-- On EOF reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Comma reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Colon reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Class reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Char reduce production upperName_aux -> UpperName Dot upperName_aux
-- On As reduce production upperName_aux -> UpperName Dot upperName_aux
-- On Arrow reduce production upperName_aux -> UpperName Dot upperName_aux

State 5:
import_module -> Library . upperName [ Type Open Let Instance Import Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 7

State 6:
upperName -> upperName_aux . [ With UpperName Underscore Type Try String Semicolon RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket LBrace LArrowEff Int Instance In Import Hash Foreign Float Exception Equal End EOF Comma Colon Class Char As Arrow ]
-- On With reduce production upperName -> upperName_aux
-- On UpperName reduce production upperName -> upperName_aux
-- On Underscore reduce production upperName -> upperName_aux
-- On Type reduce production upperName -> upperName_aux
-- On Try reduce production upperName -> upperName_aux
-- On String reduce production upperName -> upperName_aux
-- On Semicolon reduce production upperName -> upperName_aux
-- On RParen reduce production upperName -> upperName_aux
-- On RDoubleArrowEff reduce production upperName -> upperName_aux
-- On RBracketUp reduce production upperName -> upperName_aux
-- On RBracket reduce production upperName -> upperName_aux
-- On RBrace reduce production upperName -> upperName_aux
-- On RArrowEff reduce production upperName -> upperName_aux
-- On Pipe reduce production upperName -> upperName_aux
-- On Open reduce production upperName -> upperName_aux
-- On Match reduce production upperName -> upperName_aux
-- On LowerName reduce production upperName -> upperName_aux
-- On Let reduce production upperName -> upperName_aux
-- On LQMarkBracket reduce production upperName -> upperName_aux
-- On LParen reduce production upperName -> upperName_aux
-- On LBracketUp reduce production upperName -> upperName_aux
-- On LBracket reduce production upperName -> upperName_aux
-- On LBrace reduce production upperName -> upperName_aux
-- On LArrowEff reduce production upperName -> upperName_aux
-- On Int reduce production upperName -> upperName_aux
-- On Instance reduce production upperName -> upperName_aux
-- On In reduce production upperName -> upperName_aux
-- On Import reduce production upperName -> upperName_aux
-- On Hash reduce production upperName -> upperName_aux
-- On Foreign reduce production upperName -> upperName_aux
-- On Float reduce production upperName -> upperName_aux
-- On Exception reduce production upperName -> upperName_aux
-- On Equal reduce production upperName -> upperName_aux
-- On End reduce production upperName -> upperName_aux
-- On EOF reduce production upperName -> upperName_aux
-- On Comma reduce production upperName -> upperName_aux
-- On Colon reduce production upperName -> upperName_aux
-- On Class reduce production upperName -> upperName_aux
-- On Char reduce production upperName -> upperName_aux
-- On As reduce production upperName -> upperName_aux
-- On Arrow reduce production upperName -> upperName_aux

State 7:
import_module -> Library upperName . [ Type Open Let Instance Import Foreign Exception EOF Class ]
-- On Type reduce production import_module -> Library upperName
-- On Open reduce production import_module -> Library upperName
-- On Let reduce production import_module -> Library upperName
-- On Instance reduce production import_module -> Library upperName
-- On Import reduce production import_module -> Library upperName
-- On Foreign reduce production import_module -> Library upperName
-- On Exception reduce production import_module -> Library upperName
-- On EOF reduce production import_module -> Library upperName
-- On Class reduce production import_module -> Library upperName

State 8:
import_module -> upperName . [ Type Open Let Instance Import Foreign Exception EOF Class ]
-- On Type reduce production import_module -> upperName
-- On Open reduce production import_module -> upperName
-- On Let reduce production import_module -> upperName
-- On Instance reduce production import_module -> upperName
-- On Import reduce production import_module -> upperName
-- On Foreign reduce production import_module -> upperName
-- On Exception reduce production import_module -> upperName
-- On EOF reduce production import_module -> upperName
-- On Class reduce production import_module -> upperName

State 9:
import -> Import import_module . [ Type Open Let Instance Import Foreign Exception EOF Class ]
-- On Type reduce production import -> Import import_module
-- On Open reduce production import -> Import import_module
-- On Let reduce production import -> Import import_module
-- On Instance reduce production import -> Import import_module
-- On Import reduce production import -> Import import_module
-- On Foreign reduce production import -> Import import_module
-- On Exception reduce production import -> Import import_module
-- On EOF reduce production import -> Import import_module
-- On Class reduce production import -> Import import_module

State 10:
main' -> main . [ # ]
-- On # accept main

State 11:
entry(body) -> list(import) . body_list(body) [ # ]
-- On Type shift to state 12
-- On Open shift to state 130
-- On Let shift to state 132
-- On Instance shift to state 278
-- On Foreign shift to state 291
-- On Exception shift to state 299
-- On EOF shift to state 304
-- On Class shift to state 305
-- On typeAlias shift to state 320
-- On let_case shift to state 321
-- On datatype shift to state 322
-- On body_list(body) shift to state 323
-- On body shift to state 324

State 12:
body -> Type . newUpperName kindopt [ Type Open Let Instance Foreign Exception EOF Class ]
datatype -> Type . newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
typeAlias -> Type . Alias newUpperName Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On Alias shift to state 14
-- On newUpperName shift to state 112

State 13:
newUpperName -> UpperName . [ UpperName Underscore Type Pipe Open LowerName Let LParen LBracketUp LBracket Instance Foreign Exception Equal EOF Colon Class ]
-- On UpperName reduce production newUpperName -> UpperName
-- On Underscore reduce production newUpperName -> UpperName
-- On Type reduce production newUpperName -> UpperName
-- On Pipe reduce production newUpperName -> UpperName
-- On Open reduce production newUpperName -> UpperName
-- On LowerName reduce production newUpperName -> UpperName
-- On Let reduce production newUpperName -> UpperName
-- On LParen reduce production newUpperName -> UpperName
-- On LBracketUp reduce production newUpperName -> UpperName
-- On LBracket reduce production newUpperName -> UpperName
-- On Instance reduce production newUpperName -> UpperName
-- On Foreign reduce production newUpperName -> UpperName
-- On Exception reduce production newUpperName -> UpperName
-- On Equal reduce production newUpperName -> UpperName
-- On EOF reduce production newUpperName -> UpperName
-- On Colon reduce production newUpperName -> UpperName
-- On Class reduce production newUpperName -> UpperName

State 14:
typeAlias -> Type Alias . newUpperName Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On newUpperName shift to state 15

State 15:
typeAlias -> Type Alias newUpperName . Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Equal shift to state 16

State 16:
typeAlias -> Type Alias newUpperName Equal . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 111
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 17:
typeExprClosed -> Underscore . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> Underscore
-- On UpperName reduce production typeExprClosed -> Underscore
-- On Underscore reduce production typeExprClosed -> Underscore
-- On Type reduce production typeExprClosed -> Underscore
-- On RParen reduce production typeExprClosed -> Underscore
-- On RDoubleArrowEff reduce production typeExprClosed -> Underscore
-- On RBracketUp reduce production typeExprClosed -> Underscore
-- On RBracket reduce production typeExprClosed -> Underscore
-- On RBrace reduce production typeExprClosed -> Underscore
-- On RArrowEff reduce production typeExprClosed -> Underscore
-- On Pipe reduce production typeExprClosed -> Underscore
-- On Open reduce production typeExprClosed -> Underscore
-- On LowerName reduce production typeExprClosed -> Underscore
-- On Let reduce production typeExprClosed -> Underscore
-- On LParen reduce production typeExprClosed -> Underscore
-- On LBracketUp reduce production typeExprClosed -> Underscore
-- On LBracket reduce production typeExprClosed -> Underscore
-- On LArrowEff reduce production typeExprClosed -> Underscore
-- On Instance reduce production typeExprClosed -> Underscore
-- On In reduce production typeExprClosed -> Underscore
-- On Hash reduce production typeExprClosed -> Underscore
-- On Foreign reduce production typeExprClosed -> Underscore
-- On Exception reduce production typeExprClosed -> Underscore
-- On Equal reduce production typeExprClosed -> Underscore
-- On End reduce production typeExprClosed -> Underscore
-- On EOF reduce production typeExprClosed -> Underscore
-- On Comma reduce production typeExprClosed -> Underscore
-- On Class reduce production typeExprClosed -> Underscore
-- On Arrow reduce production typeExprClosed -> Underscore

State 18:
typeExprClosed -> LowerName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> LowerName
-- On UpperName reduce production typeExprClosed -> LowerName
-- On Underscore reduce production typeExprClosed -> LowerName
-- On Type reduce production typeExprClosed -> LowerName
-- On RParen reduce production typeExprClosed -> LowerName
-- On RDoubleArrowEff reduce production typeExprClosed -> LowerName
-- On RBracketUp reduce production typeExprClosed -> LowerName
-- On RBracket reduce production typeExprClosed -> LowerName
-- On RBrace reduce production typeExprClosed -> LowerName
-- On RArrowEff reduce production typeExprClosed -> LowerName
-- On Pipe reduce production typeExprClosed -> LowerName
-- On Open reduce production typeExprClosed -> LowerName
-- On LowerName reduce production typeExprClosed -> LowerName
-- On Let reduce production typeExprClosed -> LowerName
-- On LParen reduce production typeExprClosed -> LowerName
-- On LBracketUp reduce production typeExprClosed -> LowerName
-- On LBracket reduce production typeExprClosed -> LowerName
-- On LArrowEff reduce production typeExprClosed -> LowerName
-- On Instance reduce production typeExprClosed -> LowerName
-- On In reduce production typeExprClosed -> LowerName
-- On Hash reduce production typeExprClosed -> LowerName
-- On Foreign reduce production typeExprClosed -> LowerName
-- On Exception reduce production typeExprClosed -> LowerName
-- On Equal reduce production typeExprClosed -> LowerName
-- On End reduce production typeExprClosed -> LowerName
-- On EOF reduce production typeExprClosed -> LowerName
-- On Comma reduce production typeExprClosed -> LowerName
-- On Class reduce production typeExprClosed -> LowerName
-- On Arrow reduce production typeExprClosed -> LowerName

State 19:
typeExprStrictlyUnclosed -> Lambda . nonempty_list(kind_and_name) Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 41
-- On kind_and_name shift to state 92

State 20:
kind_and_name -> Underscore . [ Underscore LowerName LParen Equal Comma ]
-- On Underscore reduce production kind_and_name -> Underscore
-- On LowerName reduce production kind_and_name -> Underscore
-- On LParen reduce production kind_and_name -> Underscore
-- On Equal reduce production kind_and_name -> Underscore
-- On Comma reduce production kind_and_name -> Underscore

State 21:
kind_and_name -> LowerName . [ Underscore LowerName LParen Equal Comma ]
-- On Underscore reduce production kind_and_name -> LowerName
-- On LowerName reduce production kind_and_name -> LowerName
-- On LParen reduce production kind_and_name -> LowerName
-- On Equal reduce production kind_and_name -> LowerName
-- On Comma reduce production kind_and_name -> LowerName

State 22:
kind_and_name -> LParen . LowerName Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
kind_and_name -> LParen . Underscore Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
-- On Underscore shift to state 23
-- On LowerName shift to state 37

State 23:
kind_and_name -> LParen Underscore . Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
-- On Colon shift to state 24

State 24:
kind_and_name -> LParen Underscore Colon . kind RParen [ Underscore LowerName LParen Equal Comma ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 35

State 25:
kindClosed -> Star . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On Type reduce production kindClosed -> Star
-- On RParen reduce production kindClosed -> Star
-- On RBrace reduce production kindClosed -> Star
-- On Open reduce production kindClosed -> Star
-- On Let reduce production kindClosed -> Star
-- On Instance reduce production kindClosed -> Star
-- On Foreign reduce production kindClosed -> Star
-- On Exception reduce production kindClosed -> Star
-- On EOF reduce production kindClosed -> Star
-- On Class reduce production kindClosed -> Star
-- On Arrow reduce production kindClosed -> Star

State 26:
kindClosed -> LParen . kind RParen [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 33

State 27:
kindClosed -> Eff . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On Type reduce production kindClosed -> Eff
-- On RParen reduce production kindClosed -> Eff
-- On RBrace reduce production kindClosed -> Eff
-- On Open reduce production kindClosed -> Eff
-- On Let reduce production kindClosed -> Eff
-- On Instance reduce production kindClosed -> Eff
-- On Foreign reduce production kindClosed -> Eff
-- On Exception reduce production kindClosed -> Eff
-- On EOF reduce production kindClosed -> Eff
-- On Class reduce production kindClosed -> Eff
-- On Arrow reduce production kindClosed -> Eff

State 28:
kindClosed -> Caret . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On Type reduce production kindClosed -> Caret
-- On RParen reduce production kindClosed -> Caret
-- On RBrace reduce production kindClosed -> Caret
-- On Open reduce production kindClosed -> Caret
-- On Let reduce production kindClosed -> Caret
-- On Instance reduce production kindClosed -> Caret
-- On Foreign reduce production kindClosed -> Caret
-- On Exception reduce production kindClosed -> Caret
-- On EOF reduce production kindClosed -> Caret
-- On Class reduce production kindClosed -> Caret
-- On Arrow reduce production kindClosed -> Caret

State 29:
kind -> kindUnclosed . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production kind -> kindUnclosed
-- On RParen reduce production kind -> kindUnclosed
-- On RBrace reduce production kind -> kindUnclosed
-- On Open reduce production kind -> kindUnclosed
-- On Let reduce production kind -> kindUnclosed
-- On Instance reduce production kind -> kindUnclosed
-- On Foreign reduce production kind -> kindUnclosed
-- On Exception reduce production kind -> kindUnclosed
-- On EOF reduce production kind -> kindUnclosed
-- On Class reduce production kind -> kindUnclosed

State 30:
kind -> kindClosed . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
kindUnclosed -> kindClosed . Arrow kind [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
-- On Arrow shift to state 31
-- On Type reduce production kind -> kindClosed
-- On RParen reduce production kind -> kindClosed
-- On RBrace reduce production kind -> kindClosed
-- On Open reduce production kind -> kindClosed
-- On Let reduce production kind -> kindClosed
-- On Instance reduce production kind -> kindClosed
-- On Foreign reduce production kind -> kindClosed
-- On Exception reduce production kind -> kindClosed
-- On EOF reduce production kind -> kindClosed
-- On Class reduce production kind -> kindClosed

State 31:
kindUnclosed -> kindClosed Arrow . kind [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 32

State 32:
kindUnclosed -> kindClosed Arrow kind . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production kindUnclosed -> kindClosed Arrow kind
-- On RParen reduce production kindUnclosed -> kindClosed Arrow kind
-- On RBrace reduce production kindUnclosed -> kindClosed Arrow kind
-- On Open reduce production kindUnclosed -> kindClosed Arrow kind
-- On Let reduce production kindUnclosed -> kindClosed Arrow kind
-- On Instance reduce production kindUnclosed -> kindClosed Arrow kind
-- On Foreign reduce production kindUnclosed -> kindClosed Arrow kind
-- On Exception reduce production kindUnclosed -> kindClosed Arrow kind
-- On EOF reduce production kindUnclosed -> kindClosed Arrow kind
-- On Class reduce production kindUnclosed -> kindClosed Arrow kind

State 33:
kindClosed -> LParen kind . RParen [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On RParen shift to state 34

State 34:
kindClosed -> LParen kind RParen . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
-- On Type reduce production kindClosed -> LParen kind RParen
-- On RParen reduce production kindClosed -> LParen kind RParen
-- On RBrace reduce production kindClosed -> LParen kind RParen
-- On Open reduce production kindClosed -> LParen kind RParen
-- On Let reduce production kindClosed -> LParen kind RParen
-- On Instance reduce production kindClosed -> LParen kind RParen
-- On Foreign reduce production kindClosed -> LParen kind RParen
-- On Exception reduce production kindClosed -> LParen kind RParen
-- On EOF reduce production kindClosed -> LParen kind RParen
-- On Class reduce production kindClosed -> LParen kind RParen
-- On Arrow reduce production kindClosed -> LParen kind RParen

State 35:
kind_and_name -> LParen Underscore Colon kind . RParen [ Underscore LowerName LParen Equal Comma ]
-- On RParen shift to state 36

State 36:
kind_and_name -> LParen Underscore Colon kind RParen . [ Underscore LowerName LParen Equal Comma ]
-- On Underscore reduce production kind_and_name -> LParen Underscore Colon kind RParen
-- On LowerName reduce production kind_and_name -> LParen Underscore Colon kind RParen
-- On LParen reduce production kind_and_name -> LParen Underscore Colon kind RParen
-- On Equal reduce production kind_and_name -> LParen Underscore Colon kind RParen
-- On Comma reduce production kind_and_name -> LParen Underscore Colon kind RParen

State 37:
kind_and_name -> LParen LowerName . Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
-- On Colon shift to state 38

State 38:
kind_and_name -> LParen LowerName Colon . kind RParen [ Underscore LowerName LParen Equal Comma ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 39

State 39:
kind_and_name -> LParen LowerName Colon kind . RParen [ Underscore LowerName LParen Equal Comma ]
-- On RParen shift to state 40

State 40:
kind_and_name -> LParen LowerName Colon kind RParen . [ Underscore LowerName LParen Equal Comma ]
-- On Underscore reduce production kind_and_name -> LParen LowerName Colon kind RParen
-- On LowerName reduce production kind_and_name -> LParen LowerName Colon kind RParen
-- On LParen reduce production kind_and_name -> LParen LowerName Colon kind RParen
-- On Equal reduce production kind_and_name -> LParen LowerName Colon kind RParen
-- On Comma reduce production kind_and_name -> LParen LowerName Colon kind RParen

State 41:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) . Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On Comma shift to state 42

State 42:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 110
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 43:
typeExprClosed -> LParen . typeExpr RParen [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 108
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 44:
typeExprClosed -> LBracketUp . sum RBracketUp [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 101
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On sum shift to state 104
-- On separated_nonempty_list(Pipe,typeExpr) shift to state 106
-- On loption(separated_nonempty_list(Pipe,typeExpr)) shift to state 107
-- On RBracketUp reduce production loption(separated_nonempty_list(Pipe,typeExpr)) -> 

State 45:
typeExprClosed -> LBracket . eff RBracket [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 99
-- On RBracket reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> 

State 46:
typeExprStrictlyUnclosed -> LBrace . tyclass RBrace DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace . tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 66

State 47:
tyclass -> upperName . list(kind_and_name_in_value) nonempty_list(typeExprClosed) [ RParen RBrace ]
-- On LBrace shift to state 48
-- On list(kind_and_name_in_value) shift to state 59
-- On kind_and_name_in_value shift to state 64
-- On UpperName reduce production list(kind_and_name_in_value) -> 
-- On Underscore reduce production list(kind_and_name_in_value) -> 
-- On LowerName reduce production list(kind_and_name_in_value) -> 
-- On LParen reduce production list(kind_and_name_in_value) -> 
-- On LBracketUp reduce production list(kind_and_name_in_value) -> 
-- On LBracket reduce production list(kind_and_name_in_value) -> 

State 48:
kind_and_name_in_value -> LBrace . LowerName RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . Underscore RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . LowerName Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . Underscore Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On Underscore shift to state 49
-- On LowerName shift to state 54

State 49:
kind_and_name_in_value -> LBrace Underscore . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace Underscore . Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On RBrace shift to state 50
-- On Colon shift to state 51

State 50:
kind_and_name_in_value -> LBrace Underscore RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On UpperName reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On Underscore reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LowerName reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LQMarkParen reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LParen reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LBracketUp reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LBracket reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On LBrace reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On Equal reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On Colon reduce production kind_and_name_in_value -> LBrace Underscore RBrace
-- On Arrow reduce production kind_and_name_in_value -> LBrace Underscore RBrace

State 51:
kind_and_name_in_value -> LBrace Underscore Colon . kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 52

State 52:
kind_and_name_in_value -> LBrace Underscore Colon kind . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On RBrace shift to state 53

State 53:
kind_and_name_in_value -> LBrace Underscore Colon kind RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On UpperName reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On Underscore reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LowerName reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LQMarkParen reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LParen reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LBracketUp reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LBracket reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On LBrace reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On Equal reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On Colon reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace
-- On Arrow reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace

State 54:
kind_and_name_in_value -> LBrace LowerName . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace LowerName . Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On RBrace shift to state 55
-- On Colon shift to state 56

State 55:
kind_and_name_in_value -> LBrace LowerName RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On UpperName reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On Underscore reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LowerName reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LQMarkParen reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LParen reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LBracketUp reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LBracket reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On LBrace reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On Equal reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On Colon reduce production kind_and_name_in_value -> LBrace LowerName RBrace
-- On Arrow reduce production kind_and_name_in_value -> LBrace LowerName RBrace

State 56:
kind_and_name_in_value -> LBrace LowerName Colon . kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 57

State 57:
kind_and_name_in_value -> LBrace LowerName Colon kind . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On RBrace shift to state 58

State 58:
kind_and_name_in_value -> LBrace LowerName Colon kind RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
-- On UpperName reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On Underscore reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LowerName reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LQMarkParen reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LParen reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LBracketUp reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LBracket reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On LBrace reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On Equal reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On Colon reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace
-- On Arrow reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace

State 59:
tyclass -> upperName list(kind_and_name_in_value) . nonempty_list(typeExprClosed) [ RParen RBrace ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 63

State 60:
typeExprClosed -> upperName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> upperName
-- On UpperName reduce production typeExprClosed -> upperName
-- On Underscore reduce production typeExprClosed -> upperName
-- On Type reduce production typeExprClosed -> upperName
-- On RParen reduce production typeExprClosed -> upperName
-- On RDoubleArrowEff reduce production typeExprClosed -> upperName
-- On RBracketUp reduce production typeExprClosed -> upperName
-- On RBracket reduce production typeExprClosed -> upperName
-- On RBrace reduce production typeExprClosed -> upperName
-- On RArrowEff reduce production typeExprClosed -> upperName
-- On Pipe reduce production typeExprClosed -> upperName
-- On Open reduce production typeExprClosed -> upperName
-- On LowerName reduce production typeExprClosed -> upperName
-- On Let reduce production typeExprClosed -> upperName
-- On LParen reduce production typeExprClosed -> upperName
-- On LBracketUp reduce production typeExprClosed -> upperName
-- On LBracket reduce production typeExprClosed -> upperName
-- On LArrowEff reduce production typeExprClosed -> upperName
-- On Instance reduce production typeExprClosed -> upperName
-- On In reduce production typeExprClosed -> upperName
-- On Hash reduce production typeExprClosed -> upperName
-- On Foreign reduce production typeExprClosed -> upperName
-- On Exception reduce production typeExprClosed -> upperName
-- On Equal reduce production typeExprClosed -> upperName
-- On End reduce production typeExprClosed -> upperName
-- On EOF reduce production typeExprClosed -> upperName
-- On Comma reduce production typeExprClosed -> upperName
-- On Class reduce production typeExprClosed -> upperName
-- On Arrow reduce production typeExprClosed -> upperName

State 61:
nonempty_list(typeExprClosed) -> typeExprClosed . [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
nonempty_list(typeExprClosed) -> typeExprClosed . nonempty_list(typeExprClosed) [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 62
-- On Type reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RParen reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RBracket reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RBrace reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Open reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Let reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Instance reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Exception reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Equal reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On EOF reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Class reduce production nonempty_list(typeExprClosed) -> typeExprClosed

State 62:
nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed) . [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
-- On Type reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On RParen reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On RBracket reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On RBrace reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Open reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Let reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Instance reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Exception reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Equal reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On EOF reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)
-- On Class reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)

State 63:
tyclass -> upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed) . [ RParen RBrace ]
-- On RParen reduce production tyclass -> upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed)
-- On RBrace reduce production tyclass -> upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed)

State 64:
list(kind_and_name_in_value) -> kind_and_name_in_value . list(kind_and_name_in_value) [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
-- On LBrace shift to state 48
-- On list(kind_and_name_in_value) shift to state 65
-- On kind_and_name_in_value shift to state 64
-- On UpperName reduce production list(kind_and_name_in_value) -> 
-- On Underscore reduce production list(kind_and_name_in_value) -> 
-- On LowerName reduce production list(kind_and_name_in_value) -> 
-- On LParen reduce production list(kind_and_name_in_value) -> 
-- On LBracketUp reduce production list(kind_and_name_in_value) -> 
-- On LBracket reduce production list(kind_and_name_in_value) -> 

State 65:
list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value) . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
-- On UpperName reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)
-- On Underscore reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)
-- On LowerName reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)
-- On LParen reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)
-- On LBracketUp reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)
-- On LBracket reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)

State 66:
typeExprStrictlyUnclosed -> LBrace tyclass . RBrace DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace tyclass . RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On RBrace shift to state 67

State 67:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace . DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace tyclass RBrace . LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On LDoubleArrowEff shift to state 68
-- On DoubleArrow shift to state 97

State 68:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff . eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 94
-- On RDoubleArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> 

State 69:
typeExprStrictlyUnclosed -> Forall . nonempty_list(kind_and_name) Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 70
-- On kind_and_name shift to state 92

State 70:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) . Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On Comma shift to state 71

State 71:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 91
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 72:
typeExpr -> typeExprUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExpr -> typeExprUnclosed
-- On Type reduce production typeExpr -> typeExprUnclosed
-- On RParen reduce production typeExpr -> typeExprUnclosed
-- On RDoubleArrowEff reduce production typeExpr -> typeExprUnclosed
-- On RBracketUp reduce production typeExpr -> typeExprUnclosed
-- On RBracket reduce production typeExpr -> typeExprUnclosed
-- On RArrowEff reduce production typeExpr -> typeExprUnclosed
-- On Pipe reduce production typeExpr -> typeExprUnclosed
-- On Open reduce production typeExpr -> typeExprUnclosed
-- On Let reduce production typeExpr -> typeExprUnclosed
-- On Instance reduce production typeExpr -> typeExprUnclosed
-- On In reduce production typeExpr -> typeExprUnclosed
-- On Hash reduce production typeExpr -> typeExprUnclosed
-- On Foreign reduce production typeExpr -> typeExprUnclosed
-- On Exception reduce production typeExpr -> typeExprUnclosed
-- On Equal reduce production typeExpr -> typeExprUnclosed
-- On End reduce production typeExpr -> typeExprUnclosed
-- On EOF reduce production typeExpr -> typeExprUnclosed
-- On Comma reduce production typeExpr -> typeExprUnclosed
-- On Class reduce production typeExpr -> typeExprUnclosed

State 73:
typeExprUnclosed -> typeExprStrictlyUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Type reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On RParen reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On RDoubleArrowEff reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On RBracketUp reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On RBracket reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On RArrowEff reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Pipe reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Open reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Let reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Instance reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On In reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Hash reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Foreign reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Exception reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Equal reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On End reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On EOF reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Comma reduce production typeExprUnclosed -> typeExprStrictlyUnclosed
-- On Class reduce production typeExprUnclosed -> typeExprStrictlyUnclosed

State 74:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive . Arrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> typeExprProtectedPermissive . LArrowEff eff RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On LArrowEff shift to state 75
-- On Arrow shift to state 89

State 75:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff . eff RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 86
-- On RArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> 

State 76:
typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed . [ LArrowEff Arrow ]
typeExprUnclosed -> typeExprNonStrictlyUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Type reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RParen reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RDoubleArrowEff reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RBracketUp reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RBracket reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RArrowEff reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Pipe reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Open reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Let reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On LArrowEff reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed
-- On Instance reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On In reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Hash reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Foreign reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Exception reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Equal reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On End reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On EOF reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Comma reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Class reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed

State 77:
tyAppAux -> typeExprClosed . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExpr -> typeExprClosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprProtectedPermissive -> typeExprClosed . [ LArrowEff Arrow ]
-- On With reduce production typeExpr -> typeExprClosed
-- On UpperName reduce production tyAppAux -> typeExprClosed
-- On Underscore reduce production tyAppAux -> typeExprClosed
-- On Type reduce production typeExpr -> typeExprClosed
-- On RParen reduce production typeExpr -> typeExprClosed
-- On RDoubleArrowEff reduce production typeExpr -> typeExprClosed
-- On RBracketUp reduce production typeExpr -> typeExprClosed
-- On RBracket reduce production typeExpr -> typeExprClosed
-- On RArrowEff reduce production typeExpr -> typeExprClosed
-- On Pipe reduce production typeExpr -> typeExprClosed
-- On Open reduce production typeExpr -> typeExprClosed
-- On LowerName reduce production tyAppAux -> typeExprClosed
-- On Let reduce production typeExpr -> typeExprClosed
-- On LParen reduce production tyAppAux -> typeExprClosed
-- On LBracketUp reduce production tyAppAux -> typeExprClosed
-- On LBracket reduce production tyAppAux -> typeExprClosed
-- On LArrowEff reduce production typeExprProtectedPermissive -> typeExprClosed
-- On Instance reduce production typeExpr -> typeExprClosed
-- On In reduce production typeExpr -> typeExprClosed
-- On Hash reduce production typeExpr -> typeExprClosed
-- On Foreign reduce production typeExpr -> typeExprClosed
-- On Exception reduce production typeExpr -> typeExprClosed
-- On Equal reduce production typeExpr -> typeExprClosed
-- On End reduce production typeExpr -> typeExprClosed
-- On EOF reduce production typeExpr -> typeExprClosed
-- On Comma reduce production typeExpr -> typeExprClosed
-- On Class reduce production typeExpr -> typeExprClosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprClosed

State 78:
separated_nonempty_list(Comma,typeExpr) -> typeExpr . [ RDoubleArrowEff RBracket RArrowEff ]
separated_nonempty_list(Comma,typeExpr) -> typeExpr . Comma separated_nonempty_list(Comma,typeExpr) [ RDoubleArrowEff RBracket RArrowEff ]
-- On Comma shift to state 79
-- On RDoubleArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr
-- On RBracket reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr
-- On RArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr

State 79:
separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma . separated_nonempty_list(Comma,typeExpr) [ RDoubleArrowEff RBracket RArrowEff ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 83

State 80:
tyApp -> tyAppAux . typeExprClosed [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 81

State 81:
tyApp -> tyAppAux typeExprClosed . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production tyApp -> tyAppAux typeExprClosed
-- On UpperName reduce production tyApp -> tyAppAux typeExprClosed
-- On Underscore reduce production tyApp -> tyAppAux typeExprClosed
-- On Type reduce production tyApp -> tyAppAux typeExprClosed
-- On RParen reduce production tyApp -> tyAppAux typeExprClosed
-- On RDoubleArrowEff reduce production tyApp -> tyAppAux typeExprClosed
-- On RBracketUp reduce production tyApp -> tyAppAux typeExprClosed
-- On RBracket reduce production tyApp -> tyAppAux typeExprClosed
-- On RArrowEff reduce production tyApp -> tyAppAux typeExprClosed
-- On Pipe reduce production tyApp -> tyAppAux typeExprClosed
-- On Open reduce production tyApp -> tyAppAux typeExprClosed
-- On LowerName reduce production tyApp -> tyAppAux typeExprClosed
-- On Let reduce production tyApp -> tyAppAux typeExprClosed
-- On LParen reduce production tyApp -> tyAppAux typeExprClosed
-- On LBracketUp reduce production tyApp -> tyAppAux typeExprClosed
-- On LBracket reduce production tyApp -> tyAppAux typeExprClosed
-- On LArrowEff reduce production tyApp -> tyAppAux typeExprClosed
-- On Instance reduce production tyApp -> tyAppAux typeExprClosed
-- On In reduce production tyApp -> tyAppAux typeExprClosed
-- On Hash reduce production tyApp -> tyAppAux typeExprClosed
-- On Foreign reduce production tyApp -> tyAppAux typeExprClosed
-- On Exception reduce production tyApp -> tyAppAux typeExprClosed
-- On Equal reduce production tyApp -> tyAppAux typeExprClosed
-- On End reduce production tyApp -> tyAppAux typeExprClosed
-- On EOF reduce production tyApp -> tyAppAux typeExprClosed
-- On Comma reduce production tyApp -> tyAppAux typeExprClosed
-- On Class reduce production tyApp -> tyAppAux typeExprClosed
-- On Arrow reduce production tyApp -> tyAppAux typeExprClosed

State 82:
tyAppAux -> tyApp . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExprNonStrictlyUnclosed -> tyApp . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On UpperName reduce production tyAppAux -> tyApp
-- On Underscore reduce production tyAppAux -> tyApp
-- On Type reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RParen reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RDoubleArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RBracketUp reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RBracket reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Pipe reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Open reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On LowerName reduce production tyAppAux -> tyApp
-- On Let reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On LParen reduce production tyAppAux -> tyApp
-- On LBracketUp reduce production tyAppAux -> tyApp
-- On LBracket reduce production tyAppAux -> tyApp
-- On LArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Instance reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On In reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Hash reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Foreign reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Exception reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Equal reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On End reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On EOF reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Comma reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Class reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Arrow reduce production typeExprNonStrictlyUnclosed -> tyApp

State 83:
separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr) . [ RDoubleArrowEff RBracket RArrowEff ]
-- On RDoubleArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr)
-- On RBracket reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr)
-- On RArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr)

State 84:
loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr) . [ RDoubleArrowEff RBracket RArrowEff ]
-- On RDoubleArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr)
-- On RBracket reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr)
-- On RArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr)

State 85:
eff -> loption(separated_nonempty_list(Comma,typeExpr)) . [ RDoubleArrowEff RBracket RArrowEff ]
-- On RDoubleArrowEff reduce production eff -> loption(separated_nonempty_list(Comma,typeExpr))
-- On RBracket reduce production eff -> loption(separated_nonempty_list(Comma,typeExpr))
-- On RArrowEff reduce production eff -> loption(separated_nonempty_list(Comma,typeExpr))

State 86:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff . RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On RArrowEff shift to state 87

State 87:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 88
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 88:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr

State 89:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 90
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 90:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr

State 91:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr

State 92:
nonempty_list(kind_and_name) -> kind_and_name . [ Equal Comma ]
nonempty_list(kind_and_name) -> kind_and_name . nonempty_list(kind_and_name) [ Equal Comma ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 93
-- On kind_and_name shift to state 92
-- On Equal reduce production nonempty_list(kind_and_name) -> kind_and_name
-- On Comma reduce production nonempty_list(kind_and_name) -> kind_and_name

State 93:
nonempty_list(kind_and_name) -> kind_and_name nonempty_list(kind_and_name) . [ Equal Comma ]
-- On Equal reduce production nonempty_list(kind_and_name) -> kind_and_name nonempty_list(kind_and_name)
-- On Comma reduce production nonempty_list(kind_and_name) -> kind_and_name nonempty_list(kind_and_name)

State 94:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff . RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On RDoubleArrowEff shift to state 95

State 95:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 96
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 96:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr

State 97:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 98
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 98:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr

State 99:
typeExprClosed -> LBracket eff . RBracket [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On RBracket shift to state 100

State 100:
typeExprClosed -> LBracket eff RBracket . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> LBracket eff RBracket
-- On UpperName reduce production typeExprClosed -> LBracket eff RBracket
-- On Underscore reduce production typeExprClosed -> LBracket eff RBracket
-- On Type reduce production typeExprClosed -> LBracket eff RBracket
-- On RParen reduce production typeExprClosed -> LBracket eff RBracket
-- On RDoubleArrowEff reduce production typeExprClosed -> LBracket eff RBracket
-- On RBracketUp reduce production typeExprClosed -> LBracket eff RBracket
-- On RBracket reduce production typeExprClosed -> LBracket eff RBracket
-- On RBrace reduce production typeExprClosed -> LBracket eff RBracket
-- On RArrowEff reduce production typeExprClosed -> LBracket eff RBracket
-- On Pipe reduce production typeExprClosed -> LBracket eff RBracket
-- On Open reduce production typeExprClosed -> LBracket eff RBracket
-- On LowerName reduce production typeExprClosed -> LBracket eff RBracket
-- On Let reduce production typeExprClosed -> LBracket eff RBracket
-- On LParen reduce production typeExprClosed -> LBracket eff RBracket
-- On LBracketUp reduce production typeExprClosed -> LBracket eff RBracket
-- On LBracket reduce production typeExprClosed -> LBracket eff RBracket
-- On LArrowEff reduce production typeExprClosed -> LBracket eff RBracket
-- On Instance reduce production typeExprClosed -> LBracket eff RBracket
-- On In reduce production typeExprClosed -> LBracket eff RBracket
-- On Hash reduce production typeExprClosed -> LBracket eff RBracket
-- On Foreign reduce production typeExprClosed -> LBracket eff RBracket
-- On Exception reduce production typeExprClosed -> LBracket eff RBracket
-- On Equal reduce production typeExprClosed -> LBracket eff RBracket
-- On End reduce production typeExprClosed -> LBracket eff RBracket
-- On EOF reduce production typeExprClosed -> LBracket eff RBracket
-- On Comma reduce production typeExprClosed -> LBracket eff RBracket
-- On Class reduce production typeExprClosed -> LBracket eff RBracket
-- On Arrow reduce production typeExprClosed -> LBracket eff RBracket

State 101:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr . [ RBracketUp ]
separated_nonempty_list(Pipe,typeExpr) -> typeExpr . Pipe separated_nonempty_list(Pipe,typeExpr) [ RBracketUp ]
-- On Pipe shift to state 102
-- On RBracketUp reduce production separated_nonempty_list(Pipe,typeExpr) -> typeExpr

State 102:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe . separated_nonempty_list(Pipe,typeExpr) [ RBracketUp ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 101
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Pipe,typeExpr) shift to state 103

State 103:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe separated_nonempty_list(Pipe,typeExpr) . [ RBracketUp ]
-- On RBracketUp reduce production separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe separated_nonempty_list(Pipe,typeExpr)

State 104:
typeExprClosed -> LBracketUp sum . RBracketUp [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On RBracketUp shift to state 105

State 105:
typeExprClosed -> LBracketUp sum RBracketUp . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On UpperName reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Underscore reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Type reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RParen reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RDoubleArrowEff reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RBracketUp reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RBracket reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RBrace reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On RArrowEff reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Pipe reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Open reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On LowerName reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Let reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On LParen reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On LBracketUp reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On LBracket reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On LArrowEff reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Instance reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On In reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Hash reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Foreign reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Exception reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Equal reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On End reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On EOF reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Comma reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Class reduce production typeExprClosed -> LBracketUp sum RBracketUp
-- On Arrow reduce production typeExprClosed -> LBracketUp sum RBracketUp

State 106:
loption(separated_nonempty_list(Pipe,typeExpr)) -> separated_nonempty_list(Pipe,typeExpr) . [ RBracketUp ]
-- On RBracketUp reduce production loption(separated_nonempty_list(Pipe,typeExpr)) -> separated_nonempty_list(Pipe,typeExpr)

State 107:
sum -> loption(separated_nonempty_list(Pipe,typeExpr)) . [ RBracketUp ]
-- On RBracketUp reduce production sum -> loption(separated_nonempty_list(Pipe,typeExpr))

State 108:
typeExprClosed -> LParen typeExpr . RParen [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On RParen shift to state 109

State 109:
typeExprClosed -> LParen typeExpr RParen . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
-- On With reduce production typeExprClosed -> LParen typeExpr RParen
-- On UpperName reduce production typeExprClosed -> LParen typeExpr RParen
-- On Underscore reduce production typeExprClosed -> LParen typeExpr RParen
-- On Type reduce production typeExprClosed -> LParen typeExpr RParen
-- On RParen reduce production typeExprClosed -> LParen typeExpr RParen
-- On RDoubleArrowEff reduce production typeExprClosed -> LParen typeExpr RParen
-- On RBracketUp reduce production typeExprClosed -> LParen typeExpr RParen
-- On RBracket reduce production typeExprClosed -> LParen typeExpr RParen
-- On RBrace reduce production typeExprClosed -> LParen typeExpr RParen
-- On RArrowEff reduce production typeExprClosed -> LParen typeExpr RParen
-- On Pipe reduce production typeExprClosed -> LParen typeExpr RParen
-- On Open reduce production typeExprClosed -> LParen typeExpr RParen
-- On LowerName reduce production typeExprClosed -> LParen typeExpr RParen
-- On Let reduce production typeExprClosed -> LParen typeExpr RParen
-- On LParen reduce production typeExprClosed -> LParen typeExpr RParen
-- On LBracketUp reduce production typeExprClosed -> LParen typeExpr RParen
-- On LBracket reduce production typeExprClosed -> LParen typeExpr RParen
-- On LArrowEff reduce production typeExprClosed -> LParen typeExpr RParen
-- On Instance reduce production typeExprClosed -> LParen typeExpr RParen
-- On In reduce production typeExprClosed -> LParen typeExpr RParen
-- On Hash reduce production typeExprClosed -> LParen typeExpr RParen
-- On Foreign reduce production typeExprClosed -> LParen typeExpr RParen
-- On Exception reduce production typeExprClosed -> LParen typeExpr RParen
-- On Equal reduce production typeExprClosed -> LParen typeExpr RParen
-- On End reduce production typeExprClosed -> LParen typeExpr RParen
-- On EOF reduce production typeExprClosed -> LParen typeExpr RParen
-- On Comma reduce production typeExprClosed -> LParen typeExpr RParen
-- On Class reduce production typeExprClosed -> LParen typeExpr RParen
-- On Arrow reduce production typeExprClosed -> LParen typeExpr RParen

State 110:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
-- On With reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Type reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On RParen reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On RDoubleArrowEff reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On RBracketUp reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On RBracket reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On RArrowEff reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Pipe reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Open reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Let reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Instance reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On In reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Hash reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Foreign reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Exception reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Equal reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On End reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On EOF reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Comma reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr
-- On Class reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr

State 111:
typeAlias -> Type Alias newUpperName Equal typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Open reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Let reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Instance reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Foreign reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Exception reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On EOF reduce production typeAlias -> Type Alias newUpperName Equal typeExpr
-- On Class reduce production typeAlias -> Type Alias newUpperName Equal typeExpr

State 112:
body -> Type newUpperName . kindopt [ Type Open Let Instance Foreign Exception EOF Class ]
datatype -> Type newUpperName . list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On Colon shift to state 113
-- On list(kind_and_name) shift to state 115
-- On kindopt shift to state 127
-- On kind_and_name shift to state 128
-- On Type reduce production kindopt -> 
-- On Open reduce production kindopt -> 
-- On Let reduce production kindopt -> 
-- On Instance reduce production kindopt -> 
-- On Foreign reduce production kindopt -> 
-- On Exception reduce production kindopt -> 
-- On Equal reduce production list(kind_and_name) -> 
-- On EOF reduce production kindopt -> 
-- On Class reduce production kindopt -> 

State 113:
kindopt -> Colon . kind [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 114

State 114:
kindopt -> Colon kind . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production kindopt -> Colon kind
-- On Open reduce production kindopt -> Colon kind
-- On Let reduce production kindopt -> Colon kind
-- On Instance reduce production kindopt -> Colon kind
-- On Foreign reduce production kindopt -> Colon kind
-- On Exception reduce production kindopt -> Colon kind
-- On EOF reduce production kindopt -> Colon kind
-- On Class reduce production kindopt -> Colon kind

State 115:
datatype -> Type newUpperName list(kind_and_name) . Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Equal shift to state 116

State 116:
datatype -> Type newUpperName list(kind_and_name) Equal . option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 118
-- On UpperName reduce production option(Pipe) -> 

State 117:
option(Pipe) -> Pipe . [ UpperName Underscore LowerName LParen ]
-- On UpperName reduce production option(Pipe) -> Pipe
-- On Underscore reduce production option(Pipe) -> Pipe
-- On LowerName reduce production option(Pipe) -> Pipe
-- On LParen reduce production option(Pipe) -> Pipe

State 118:
datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) . separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On variant shift to state 119
-- On separated_nonempty_list(Pipe,variant) shift to state 126
-- On newUpperName shift to state 122

State 119:
separated_nonempty_list(Pipe,variant) -> variant . [ Type Open Let Instance Foreign Exception EOF Class ]
separated_nonempty_list(Pipe,variant) -> variant . Pipe separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Pipe shift to state 120
-- On Type reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Open reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Let reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Instance reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Foreign reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Exception reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On EOF reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Class reduce production separated_nonempty_list(Pipe,variant) -> variant

State 120:
separated_nonempty_list(Pipe,variant) -> variant Pipe . separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On variant shift to state 119
-- On separated_nonempty_list(Pipe,variant) shift to state 121
-- On newUpperName shift to state 122

State 121:
separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant) . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Open reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Let reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Instance reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Foreign reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Exception reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On EOF reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)
-- On Class reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)

State 122:
variant -> newUpperName . list(typeExprClosed) [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 123
-- On list(typeExprClosed) shift to state 125
-- On Type reduce production list(typeExprClosed) -> 
-- On Pipe reduce production list(typeExprClosed) -> 
-- On Open reduce production list(typeExprClosed) -> 
-- On Let reduce production list(typeExprClosed) -> 
-- On Instance reduce production list(typeExprClosed) -> 
-- On Foreign reduce production list(typeExprClosed) -> 
-- On Exception reduce production list(typeExprClosed) -> 
-- On EOF reduce production list(typeExprClosed) -> 
-- On Class reduce production list(typeExprClosed) -> 

State 123:
list(typeExprClosed) -> typeExprClosed . list(typeExprClosed) [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 123
-- On list(typeExprClosed) shift to state 124
-- On Type reduce production list(typeExprClosed) -> 
-- On Pipe reduce production list(typeExprClosed) -> 
-- On Open reduce production list(typeExprClosed) -> 
-- On Let reduce production list(typeExprClosed) -> 
-- On Instance reduce production list(typeExprClosed) -> 
-- On Foreign reduce production list(typeExprClosed) -> 
-- On Exception reduce production list(typeExprClosed) -> 
-- On EOF reduce production list(typeExprClosed) -> 
-- On Class reduce production list(typeExprClosed) -> 

State 124:
list(typeExprClosed) -> typeExprClosed list(typeExprClosed) . [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Pipe reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Open reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Let reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Instance reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Foreign reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Exception reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On EOF reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)
-- On Class reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)

State 125:
variant -> newUpperName list(typeExprClosed) . [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production variant -> newUpperName list(typeExprClosed)
-- On Pipe reduce production variant -> newUpperName list(typeExprClosed)
-- On Open reduce production variant -> newUpperName list(typeExprClosed)
-- On Let reduce production variant -> newUpperName list(typeExprClosed)
-- On Instance reduce production variant -> newUpperName list(typeExprClosed)
-- On Foreign reduce production variant -> newUpperName list(typeExprClosed)
-- On Exception reduce production variant -> newUpperName list(typeExprClosed)
-- On EOF reduce production variant -> newUpperName list(typeExprClosed)
-- On Class reduce production variant -> newUpperName list(typeExprClosed)

State 126:
datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Open reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Let reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Instance reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Foreign reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Exception reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On EOF reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
-- On Class reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)

State 127:
body -> Type newUpperName kindopt . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Type newUpperName kindopt
-- On Open reduce production body -> Type newUpperName kindopt
-- On Let reduce production body -> Type newUpperName kindopt
-- On Instance reduce production body -> Type newUpperName kindopt
-- On Foreign reduce production body -> Type newUpperName kindopt
-- On Exception reduce production body -> Type newUpperName kindopt
-- On EOF reduce production body -> Type newUpperName kindopt
-- On Class reduce production body -> Type newUpperName kindopt

State 128:
list(kind_and_name) -> kind_and_name . list(kind_and_name) [ Equal ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On list(kind_and_name) shift to state 129
-- On kind_and_name shift to state 128
-- On Equal reduce production list(kind_and_name) -> 

State 129:
list(kind_and_name) -> kind_and_name list(kind_and_name) . [ Equal ]
-- On Equal reduce production list(kind_and_name) -> kind_and_name list(kind_and_name)

State 130:
body -> Open . import_module [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 131

State 131:
body -> Open import_module . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Open import_module
-- On Open reduce production body -> Open import_module
-- On Let reduce production body -> Open import_module
-- On Instance reduce production body -> Open import_module
-- On Foreign reduce production body -> Open import_module
-- On Exception reduce production body -> Open import_module
-- On EOF reduce production body -> Open import_module
-- On Class reduce production body -> Open import_module

State 132:
let_case -> Let . LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Rec LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Rec Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Underscore shift to state 133
-- On Rec shift to state 271
-- On LowerName shift to state 276

State 133:
let_case -> Let Underscore . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 268
-- On arg shift to state 269

State 134:
arg -> LQMarkParen . LowerName Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LQMarkParen . Underscore Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Underscore shift to state 135
-- On LowerName shift to state 139

State 135:
arg -> LQMarkParen Underscore . Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Colon shift to state 136

State 136:
arg -> LQMarkParen Underscore Colon . tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 137

State 137:
arg -> LQMarkParen Underscore Colon tyclass . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On RParen shift to state 138

State 138:
arg -> LQMarkParen Underscore Colon tyclass RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> LQMarkParen Underscore Colon tyclass RParen
-- On LParen reduce production arg -> LQMarkParen Underscore Colon tyclass RParen
-- On LBrace reduce production arg -> LQMarkParen Underscore Colon tyclass RParen
-- On Equal reduce production arg -> LQMarkParen Underscore Colon tyclass RParen
-- On Colon reduce production arg -> LQMarkParen Underscore Colon tyclass RParen
-- On Arrow reduce production arg -> LQMarkParen Underscore Colon tyclass RParen

State 139:
arg -> LQMarkParen LowerName . Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Colon shift to state 140

State 140:
arg -> LQMarkParen LowerName Colon . tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 141

State 141:
arg -> LQMarkParen LowerName Colon tyclass . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On RParen shift to state 142

State 142:
arg -> LQMarkParen LowerName Colon tyclass RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> LQMarkParen LowerName Colon tyclass RParen
-- On LParen reduce production arg -> LQMarkParen LowerName Colon tyclass RParen
-- On LBrace reduce production arg -> LQMarkParen LowerName Colon tyclass RParen
-- On Equal reduce production arg -> LQMarkParen LowerName Colon tyclass RParen
-- On Colon reduce production arg -> LQMarkParen LowerName Colon tyclass RParen
-- On Arrow reduce production arg -> LQMarkParen LowerName Colon tyclass RParen

State 143:
arg -> LParen . LowerName Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LParen . Underscore Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LParen . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Underscore shift to state 144
-- On RParen shift to state 148
-- On LowerName shift to state 149

State 144:
arg -> LParen Underscore . Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Colon shift to state 145

State 145:
arg -> LParen Underscore Colon . typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 146
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 146:
arg -> LParen Underscore Colon typeExpr . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On RParen shift to state 147

State 147:
arg -> LParen Underscore Colon typeExpr RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> LParen Underscore Colon typeExpr RParen
-- On LParen reduce production arg -> LParen Underscore Colon typeExpr RParen
-- On LBrace reduce production arg -> LParen Underscore Colon typeExpr RParen
-- On Equal reduce production arg -> LParen Underscore Colon typeExpr RParen
-- On Colon reduce production arg -> LParen Underscore Colon typeExpr RParen
-- On Arrow reduce production arg -> LParen Underscore Colon typeExpr RParen

State 148:
arg -> LParen RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> LParen RParen
-- On LParen reduce production arg -> LParen RParen
-- On LBrace reduce production arg -> LParen RParen
-- On Equal reduce production arg -> LParen RParen
-- On Colon reduce production arg -> LParen RParen
-- On Arrow reduce production arg -> LParen RParen

State 149:
arg -> LParen LowerName . Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On Colon shift to state 150

State 150:
arg -> LParen LowerName Colon . typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 151
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 151:
arg -> LParen LowerName Colon typeExpr . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On RParen shift to state 152

State 152:
arg -> LParen LowerName Colon typeExpr RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> LParen LowerName Colon typeExpr RParen
-- On LParen reduce production arg -> LParen LowerName Colon typeExpr RParen
-- On LBrace reduce production arg -> LParen LowerName Colon typeExpr RParen
-- On Equal reduce production arg -> LParen LowerName Colon typeExpr RParen
-- On Colon reduce production arg -> LParen LowerName Colon typeExpr RParen
-- On Arrow reduce production arg -> LParen LowerName Colon typeExpr RParen

State 153:
let_aux -> Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 258
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 154:
lowerName_aux -> UpperName . Dot lowerName_aux [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName . [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName . Dot upperName_aux [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On Dot shift to state 155
-- On With reduce production upperName_aux -> UpperName
-- On UpperName reduce production upperName_aux -> UpperName
-- On Underscore reduce production upperName_aux -> UpperName
-- On Type reduce production upperName_aux -> UpperName
-- On Try reduce production upperName_aux -> UpperName
-- On String reduce production upperName_aux -> UpperName
-- On Semicolon reduce production upperName_aux -> UpperName
-- On RParen reduce production upperName_aux -> UpperName
-- On Pipe reduce production upperName_aux -> UpperName
-- On Open reduce production upperName_aux -> UpperName
-- On Match reduce production upperName_aux -> UpperName
-- On LowerName reduce production upperName_aux -> UpperName
-- On Let reduce production upperName_aux -> UpperName
-- On LQMarkBracket reduce production upperName_aux -> UpperName
-- On LParen reduce production upperName_aux -> UpperName
-- On LBracketUp reduce production upperName_aux -> UpperName
-- On LBracket reduce production upperName_aux -> UpperName
-- On Int reduce production upperName_aux -> UpperName
-- On Instance reduce production upperName_aux -> UpperName
-- On In reduce production upperName_aux -> UpperName
-- On Foreign reduce production upperName_aux -> UpperName
-- On Float reduce production upperName_aux -> UpperName
-- On Exception reduce production upperName_aux -> UpperName
-- On End reduce production upperName_aux -> UpperName
-- On EOF reduce production upperName_aux -> UpperName
-- On Colon reduce production upperName_aux -> UpperName
-- On Class reduce production upperName_aux -> UpperName
-- On Char reduce production upperName_aux -> UpperName

State 155:
lowerName_aux -> UpperName Dot . lowerName_aux [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName Dot . upperName_aux [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On LowerName shift to state 156
-- On upperName_aux shift to state 4
-- On lowerName_aux shift to state 157

State 156:
lowerName_aux -> LowerName . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production lowerName_aux -> LowerName
-- On UpperName reduce production lowerName_aux -> LowerName
-- On Type reduce production lowerName_aux -> LowerName
-- On Try reduce production lowerName_aux -> LowerName
-- On String reduce production lowerName_aux -> LowerName
-- On Semicolon reduce production lowerName_aux -> LowerName
-- On RParen reduce production lowerName_aux -> LowerName
-- On RBracket reduce production lowerName_aux -> LowerName
-- On Pipe reduce production lowerName_aux -> LowerName
-- On Open reduce production lowerName_aux -> LowerName
-- On Match reduce production lowerName_aux -> LowerName
-- On LowerName reduce production lowerName_aux -> LowerName
-- On Let reduce production lowerName_aux -> LowerName
-- On LQMarkBracket reduce production lowerName_aux -> LowerName
-- On LParen reduce production lowerName_aux -> LowerName
-- On LBracket reduce production lowerName_aux -> LowerName
-- On Int reduce production lowerName_aux -> LowerName
-- On Instance reduce production lowerName_aux -> LowerName
-- On In reduce production lowerName_aux -> LowerName
-- On Foreign reduce production lowerName_aux -> LowerName
-- On Float reduce production lowerName_aux -> LowerName
-- On Exception reduce production lowerName_aux -> LowerName
-- On End reduce production lowerName_aux -> LowerName
-- On EOF reduce production lowerName_aux -> LowerName
-- On Colon reduce production lowerName_aux -> LowerName
-- On Class reduce production lowerName_aux -> LowerName
-- On Char reduce production lowerName_aux -> LowerName

State 157:
lowerName_aux -> UpperName Dot lowerName_aux . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On UpperName reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Type reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Try reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On String reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Semicolon reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On RParen reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On RBracket reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Pipe reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Open reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Match reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On LowerName reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Let reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On LQMarkBracket reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On LParen reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On LBracket reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Int reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Instance reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On In reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Foreign reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Float reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Exception reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On End reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On EOF reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Colon reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Class reduce production lowerName_aux -> UpperName Dot lowerName_aux
-- On Char reduce production lowerName_aux -> UpperName Dot lowerName_aux

State 158:
termClosed -> Try . term With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 253
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 159:
termClosed -> String . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> String
-- On UpperName reduce production termClosed -> String
-- On Type reduce production termClosed -> String
-- On Try reduce production termClosed -> String
-- On String reduce production termClosed -> String
-- On Semicolon reduce production termClosed -> String
-- On RParen reduce production termClosed -> String
-- On Pipe reduce production termClosed -> String
-- On Open reduce production termClosed -> String
-- On Match reduce production termClosed -> String
-- On LowerName reduce production termClosed -> String
-- On Let reduce production termClosed -> String
-- On LQMarkBracket reduce production termClosed -> String
-- On LParen reduce production termClosed -> String
-- On LBracket reduce production termClosed -> String
-- On Int reduce production termClosed -> String
-- On Instance reduce production termClosed -> String
-- On In reduce production termClosed -> String
-- On Foreign reduce production termClosed -> String
-- On Float reduce production termClosed -> String
-- On Exception reduce production termClosed -> String
-- On End reduce production termClosed -> String
-- On EOF reduce production termClosed -> String
-- On Colon reduce production termClosed -> String
-- On Class reduce production termClosed -> String
-- On Char reduce production termClosed -> String

State 160:
termClosed -> Match . term With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 222
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 161:
termStrictlyUnclosed -> Lambda . nonempty_args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On nonempty_args(lambda_aux) shift to state 162
-- On kind_and_name_in_value shift to state 163
-- On arg shift to state 164

State 162:
termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Type reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On RParen reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Pipe reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Open reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Let reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Instance reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On In reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Foreign reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Exception reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On End reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On EOF reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)
-- On Class reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)

State 163:
arg -> kind_and_name_in_value . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
-- On LQMarkParen reduce production arg -> kind_and_name_in_value
-- On LParen reduce production arg -> kind_and_name_in_value
-- On LBrace reduce production arg -> kind_and_name_in_value
-- On Equal reduce production arg -> kind_and_name_in_value
-- On Colon reduce production arg -> kind_and_name_in_value
-- On Arrow reduce production arg -> kind_and_name_in_value

State 164:
nonempty_args(lambda_aux) -> arg . args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Colon shift to state 165
-- On Arrow shift to state 216
-- On lambda_aux shift to state 218
-- On kind_and_name_in_value shift to state 163
-- On args(lambda_aux) shift to state 219
-- On arg shift to state 220

State 165:
lambda_aux -> Colon . typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
lambda_aux -> Colon . typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprProtectedPermissive shift to state 166
-- On typeExprNonStrictlyUnclosed shift to state 212
-- On typeExprClosed shift to state 213
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 166:
lambda_aux -> Colon typeExprProtectedPermissive . Hash typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
lambda_aux -> Colon typeExprProtectedPermissive . Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On Hash shift to state 167
-- On Arrow shift to state 214

State 167:
lambda_aux -> Colon typeExprProtectedPermissive Hash . typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprProtectedPermissive shift to state 168
-- On typeExprNonStrictlyUnclosed shift to state 212
-- On typeExprClosed shift to state 213
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 168:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive . Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On Arrow shift to state 169

State 169:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 211
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 170:
termClosed -> LParen . term RParen [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 209
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 171:
termClosed -> Int . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> Int
-- On UpperName reduce production termClosed -> Int
-- On Type reduce production termClosed -> Int
-- On Try reduce production termClosed -> Int
-- On String reduce production termClosed -> Int
-- On Semicolon reduce production termClosed -> Int
-- On RParen reduce production termClosed -> Int
-- On Pipe reduce production termClosed -> Int
-- On Open reduce production termClosed -> Int
-- On Match reduce production termClosed -> Int
-- On LowerName reduce production termClosed -> Int
-- On Let reduce production termClosed -> Int
-- On LQMarkBracket reduce production termClosed -> Int
-- On LParen reduce production termClosed -> Int
-- On LBracket reduce production termClosed -> Int
-- On Int reduce production termClosed -> Int
-- On Instance reduce production termClosed -> Int
-- On In reduce production termClosed -> Int
-- On Foreign reduce production termClosed -> Int
-- On Float reduce production termClosed -> Int
-- On Exception reduce production termClosed -> Int
-- On End reduce production termClosed -> Int
-- On EOF reduce production termClosed -> Int
-- On Colon reduce production termClosed -> Int
-- On Class reduce production termClosed -> Int
-- On Char reduce production termClosed -> Int

State 172:
termClosed -> Float . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> Float
-- On UpperName reduce production termClosed -> Float
-- On Type reduce production termClosed -> Float
-- On Try reduce production termClosed -> Float
-- On String reduce production termClosed -> Float
-- On Semicolon reduce production termClosed -> Float
-- On RParen reduce production termClosed -> Float
-- On Pipe reduce production termClosed -> Float
-- On Open reduce production termClosed -> Float
-- On Match reduce production termClosed -> Float
-- On LowerName reduce production termClosed -> Float
-- On Let reduce production termClosed -> Float
-- On LQMarkBracket reduce production termClosed -> Float
-- On LParen reduce production termClosed -> Float
-- On LBracket reduce production termClosed -> Float
-- On Int reduce production termClosed -> Float
-- On Instance reduce production termClosed -> Float
-- On In reduce production termClosed -> Float
-- On Foreign reduce production termClosed -> Float
-- On Float reduce production termClosed -> Float
-- On Exception reduce production termClosed -> Float
-- On End reduce production termClosed -> Float
-- On EOF reduce production termClosed -> Float
-- On Colon reduce production termClosed -> Float
-- On Class reduce production termClosed -> Float
-- On Char reduce production termClosed -> Float

State 173:
termNonStrictlyUnclosed -> Fail . LBracket typeExpr RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On LBracket shift to state 174

State 174:
termNonStrictlyUnclosed -> Fail LBracket . typeExpr RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 175
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 175:
termNonStrictlyUnclosed -> Fail LBracket typeExpr . RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On RBracket shift to state 176

State 176:
termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket . termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termClosed shift to state 179
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181

State 177:
termClosed -> Char . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> Char
-- On UpperName reduce production termClosed -> Char
-- On Type reduce production termClosed -> Char
-- On Try reduce production termClosed -> Char
-- On String reduce production termClosed -> Char
-- On Semicolon reduce production termClosed -> Char
-- On RParen reduce production termClosed -> Char
-- On Pipe reduce production termClosed -> Char
-- On Open reduce production termClosed -> Char
-- On Match reduce production termClosed -> Char
-- On LowerName reduce production termClosed -> Char
-- On Let reduce production termClosed -> Char
-- On LQMarkBracket reduce production termClosed -> Char
-- On LParen reduce production termClosed -> Char
-- On LBracket reduce production termClosed -> Char
-- On Int reduce production termClosed -> Char
-- On Instance reduce production termClosed -> Char
-- On In reduce production termClosed -> Char
-- On Foreign reduce production termClosed -> Char
-- On Float reduce production termClosed -> Char
-- On Exception reduce production termClosed -> Char
-- On End reduce production termClosed -> Char
-- On EOF reduce production termClosed -> Char
-- On Colon reduce production termClosed -> Char
-- On Class reduce production termClosed -> Char
-- On Char reduce production termClosed -> Char

State 178:
termClosed -> upperName . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> upperName
-- On UpperName reduce production termClosed -> upperName
-- On Type reduce production termClosed -> upperName
-- On Try reduce production termClosed -> upperName
-- On String reduce production termClosed -> upperName
-- On Semicolon reduce production termClosed -> upperName
-- On RParen reduce production termClosed -> upperName
-- On Pipe reduce production termClosed -> upperName
-- On Open reduce production termClosed -> upperName
-- On Match reduce production termClosed -> upperName
-- On LowerName reduce production termClosed -> upperName
-- On Let reduce production termClosed -> upperName
-- On LQMarkBracket reduce production termClosed -> upperName
-- On LParen reduce production termClosed -> upperName
-- On LBracket reduce production termClosed -> upperName
-- On Int reduce production termClosed -> upperName
-- On Instance reduce production termClosed -> upperName
-- On In reduce production termClosed -> upperName
-- On Foreign reduce production termClosed -> upperName
-- On Float reduce production termClosed -> upperName
-- On Exception reduce production termClosed -> upperName
-- On End reduce production termClosed -> upperName
-- On EOF reduce production termClosed -> upperName
-- On Colon reduce production termClosed -> upperName
-- On Class reduce production termClosed -> upperName
-- On Char reduce production termClosed -> upperName

State 179:
termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed . [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On With reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Type reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Semicolon reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On RParen reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Pipe reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Open reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Let reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Instance reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On In reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Foreign reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Exception reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On End reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On EOF reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Colon reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed
-- On Class reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed

State 180:
lowerName -> lowerName_aux . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production lowerName -> lowerName_aux
-- On UpperName reduce production lowerName -> lowerName_aux
-- On Type reduce production lowerName -> lowerName_aux
-- On Try reduce production lowerName -> lowerName_aux
-- On String reduce production lowerName -> lowerName_aux
-- On Semicolon reduce production lowerName -> lowerName_aux
-- On RParen reduce production lowerName -> lowerName_aux
-- On RBracket reduce production lowerName -> lowerName_aux
-- On Pipe reduce production lowerName -> lowerName_aux
-- On Open reduce production lowerName -> lowerName_aux
-- On Match reduce production lowerName -> lowerName_aux
-- On LowerName reduce production lowerName -> lowerName_aux
-- On Let reduce production lowerName -> lowerName_aux
-- On LQMarkBracket reduce production lowerName -> lowerName_aux
-- On LParen reduce production lowerName -> lowerName_aux
-- On LBracket reduce production lowerName -> lowerName_aux
-- On Int reduce production lowerName -> lowerName_aux
-- On Instance reduce production lowerName -> lowerName_aux
-- On In reduce production lowerName -> lowerName_aux
-- On Foreign reduce production lowerName -> lowerName_aux
-- On Float reduce production lowerName -> lowerName_aux
-- On Exception reduce production lowerName -> lowerName_aux
-- On End reduce production lowerName -> lowerName_aux
-- On EOF reduce production lowerName -> lowerName_aux
-- On Colon reduce production lowerName -> lowerName_aux
-- On Class reduce production lowerName -> lowerName_aux
-- On Char reduce production lowerName -> lowerName_aux

State 181:
termClosed -> lowerName . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> lowerName
-- On UpperName reduce production termClosed -> lowerName
-- On Type reduce production termClosed -> lowerName
-- On Try reduce production termClosed -> lowerName
-- On String reduce production termClosed -> lowerName
-- On Semicolon reduce production termClosed -> lowerName
-- On RParen reduce production termClosed -> lowerName
-- On Pipe reduce production termClosed -> lowerName
-- On Open reduce production termClosed -> lowerName
-- On Match reduce production termClosed -> lowerName
-- On LowerName reduce production termClosed -> lowerName
-- On Let reduce production termClosed -> lowerName
-- On LQMarkBracket reduce production termClosed -> lowerName
-- On LParen reduce production termClosed -> lowerName
-- On LBracket reduce production termClosed -> lowerName
-- On Int reduce production termClosed -> lowerName
-- On Instance reduce production termClosed -> lowerName
-- On In reduce production termClosed -> lowerName
-- On Foreign reduce production termClosed -> lowerName
-- On Float reduce production termClosed -> lowerName
-- On Exception reduce production termClosed -> lowerName
-- On End reduce production termClosed -> lowerName
-- On EOF reduce production termClosed -> lowerName
-- On Colon reduce production termClosed -> lowerName
-- On Class reduce production termClosed -> lowerName
-- On Char reduce production termClosed -> lowerName

State 182:
term -> termUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production term -> termUnclosed
-- On Type reduce production term -> termUnclosed
-- On RParen reduce production term -> termUnclosed
-- On Pipe reduce production term -> termUnclosed
-- On Open reduce production term -> termUnclosed
-- On Let reduce production term -> termUnclosed
-- On Instance reduce production term -> termUnclosed
-- On In reduce production term -> termUnclosed
-- On Foreign reduce production term -> termUnclosed
-- On Exception reduce production term -> termUnclosed
-- On End reduce production term -> termUnclosed
-- On EOF reduce production term -> termUnclosed
-- On Class reduce production term -> termUnclosed

State 183:
termUnclosed -> termStrictlyUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termUnclosed -> termStrictlyUnclosed
-- On Type reduce production termUnclosed -> termStrictlyUnclosed
-- On RParen reduce production termUnclosed -> termStrictlyUnclosed
-- On Pipe reduce production termUnclosed -> termStrictlyUnclosed
-- On Open reduce production termUnclosed -> termStrictlyUnclosed
-- On Let reduce production termUnclosed -> termStrictlyUnclosed
-- On Instance reduce production termUnclosed -> termStrictlyUnclosed
-- On In reduce production termUnclosed -> termStrictlyUnclosed
-- On Foreign reduce production termUnclosed -> termStrictlyUnclosed
-- On Exception reduce production termUnclosed -> termStrictlyUnclosed
-- On End reduce production termUnclosed -> termStrictlyUnclosed
-- On EOF reduce production termUnclosed -> termStrictlyUnclosed
-- On Class reduce production termUnclosed -> termStrictlyUnclosed

State 184:
termStrictlyUnclosed -> termProtectedPermissive . Semicolon term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive . Colon typeExpr Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive . Colon typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On Semicolon shift to state 185
-- On Colon shift to state 205

State 185:
termStrictlyUnclosed -> termProtectedPermissive Semicolon . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 188
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 186:
termProtectedPermissive -> termNonStrictlyUnclosed . [ Semicolon Colon ]
termUnclosed -> termNonStrictlyUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Type reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Semicolon reduce production termProtectedPermissive -> termNonStrictlyUnclosed
-- On RParen reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Pipe reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Open reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Let reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Instance reduce production termUnclosed -> termNonStrictlyUnclosed
-- On In reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Foreign reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Exception reduce production termUnclosed -> termNonStrictlyUnclosed
-- On End reduce production termUnclosed -> termNonStrictlyUnclosed
-- On EOF reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Colon reduce production termProtectedPermissive -> termNonStrictlyUnclosed
-- On Class reduce production termUnclosed -> termNonStrictlyUnclosed

State 187:
appAux -> termClosed . [ UpperName Try String Match LowerName LQMarkBracket LParen LBracket Int Float Char ]
term -> termClosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termProtectedPermissive -> termClosed . [ Semicolon Colon ]
-- On With reduce production term -> termClosed
-- On UpperName reduce production appAux -> termClosed
-- On Type reduce production term -> termClosed
-- On Try reduce production appAux -> termClosed
-- On String reduce production appAux -> termClosed
-- On Semicolon reduce production termProtectedPermissive -> termClosed
-- On RParen reduce production term -> termClosed
-- On Pipe reduce production term -> termClosed
-- On Open reduce production term -> termClosed
-- On Match reduce production appAux -> termClosed
-- On LowerName reduce production appAux -> termClosed
-- On Let reduce production term -> termClosed
-- On LQMarkBracket reduce production appAux -> termClosed
-- On LParen reduce production appAux -> termClosed
-- On LBracket reduce production appAux -> termClosed
-- On Int reduce production appAux -> termClosed
-- On Instance reduce production term -> termClosed
-- On In reduce production term -> termClosed
-- On Foreign reduce production term -> termClosed
-- On Float reduce production appAux -> termClosed
-- On Exception reduce production term -> termClosed
-- On End reduce production term -> termClosed
-- On EOF reduce production term -> termClosed
-- On Colon reduce production termProtectedPermissive -> termClosed
-- On Class reduce production term -> termClosed
-- On Char reduce production appAux -> termClosed

State 188:
termStrictlyUnclosed -> termProtectedPermissive Semicolon term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Type reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On RParen reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Pipe reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Open reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Let reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Instance reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On In reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Foreign reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Exception reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On End reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On EOF reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term
-- On Class reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term

State 189:
termStrictlyUnclosed -> let_case . In term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On In shift to state 190

State 190:
termStrictlyUnclosed -> let_case In . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 191
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 191:
termStrictlyUnclosed -> let_case In term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termStrictlyUnclosed -> let_case In term
-- On Type reduce production termStrictlyUnclosed -> let_case In term
-- On RParen reduce production termStrictlyUnclosed -> let_case In term
-- On Pipe reduce production termStrictlyUnclosed -> let_case In term
-- On Open reduce production termStrictlyUnclosed -> let_case In term
-- On Let reduce production termStrictlyUnclosed -> let_case In term
-- On Instance reduce production termStrictlyUnclosed -> let_case In term
-- On In reduce production termStrictlyUnclosed -> let_case In term
-- On Foreign reduce production termStrictlyUnclosed -> let_case In term
-- On Exception reduce production termStrictlyUnclosed -> let_case In term
-- On End reduce production termStrictlyUnclosed -> let_case In term
-- On EOF reduce production termStrictlyUnclosed -> let_case In term
-- On Class reduce production termStrictlyUnclosed -> let_case In term

State 192:
app -> appAux . LBracket typeExpr RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
app -> appAux . termClosed [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
app -> appAux . LQMarkBracket tyclassAppArg RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On LQMarkBracket shift to state 193
-- On LParen shift to state 170
-- On LBracket shift to state 200
-- On Int shift to state 171
-- On Float shift to state 172
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termClosed shift to state 203
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181

State 193:
app -> appAux LQMarkBracket . tyclassAppArg RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 154
-- On LowerName shift to state 156
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 196
-- On tyclassAppArg shift to state 197
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 199

State 194:
tyclassInstance -> upperName . nonempty_list(typeExprClosed) [ Type RBracket Open Let Instance Exception Equal EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 195

State 195:
tyclassInstance -> upperName nonempty_list(typeExprClosed) . [ Type RBracket Open Let Instance Exception Equal EOF Class ]
-- On Type reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On RBracket reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Open reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Let reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Instance reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Exception reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Equal reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On EOF reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)
-- On Class reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)

State 196:
tyclassAppArg -> tyclassInstance . [ RBracket ]
-- On RBracket reduce production tyclassAppArg -> tyclassInstance

State 197:
app -> appAux LQMarkBracket tyclassAppArg . RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On RBracket shift to state 198

State 198:
app -> appAux LQMarkBracket tyclassAppArg RBracket . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On UpperName reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Type reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Try reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On String reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Semicolon reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On RParen reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Pipe reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Open reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Match reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On LowerName reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Let reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On LQMarkBracket reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On LParen reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On LBracket reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Int reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Instance reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On In reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Foreign reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Float reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Exception reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On End reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On EOF reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Colon reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Class reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket
-- On Char reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket

State 199:
tyclassAppArg -> lowerName . [ RBracket ]
-- On RBracket reduce production tyclassAppArg -> lowerName

State 200:
app -> appAux LBracket . typeExpr RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 201
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 201:
app -> appAux LBracket typeExpr . RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On RBracket shift to state 202

State 202:
app -> appAux LBracket typeExpr RBracket . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production app -> appAux LBracket typeExpr RBracket
-- On UpperName reduce production app -> appAux LBracket typeExpr RBracket
-- On Type reduce production app -> appAux LBracket typeExpr RBracket
-- On Try reduce production app -> appAux LBracket typeExpr RBracket
-- On String reduce production app -> appAux LBracket typeExpr RBracket
-- On Semicolon reduce production app -> appAux LBracket typeExpr RBracket
-- On RParen reduce production app -> appAux LBracket typeExpr RBracket
-- On Pipe reduce production app -> appAux LBracket typeExpr RBracket
-- On Open reduce production app -> appAux LBracket typeExpr RBracket
-- On Match reduce production app -> appAux LBracket typeExpr RBracket
-- On LowerName reduce production app -> appAux LBracket typeExpr RBracket
-- On Let reduce production app -> appAux LBracket typeExpr RBracket
-- On LQMarkBracket reduce production app -> appAux LBracket typeExpr RBracket
-- On LParen reduce production app -> appAux LBracket typeExpr RBracket
-- On LBracket reduce production app -> appAux LBracket typeExpr RBracket
-- On Int reduce production app -> appAux LBracket typeExpr RBracket
-- On Instance reduce production app -> appAux LBracket typeExpr RBracket
-- On In reduce production app -> appAux LBracket typeExpr RBracket
-- On Foreign reduce production app -> appAux LBracket typeExpr RBracket
-- On Float reduce production app -> appAux LBracket typeExpr RBracket
-- On Exception reduce production app -> appAux LBracket typeExpr RBracket
-- On End reduce production app -> appAux LBracket typeExpr RBracket
-- On EOF reduce production app -> appAux LBracket typeExpr RBracket
-- On Colon reduce production app -> appAux LBracket typeExpr RBracket
-- On Class reduce production app -> appAux LBracket typeExpr RBracket
-- On Char reduce production app -> appAux LBracket typeExpr RBracket

State 203:
app -> appAux termClosed . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production app -> appAux termClosed
-- On UpperName reduce production app -> appAux termClosed
-- On Type reduce production app -> appAux termClosed
-- On Try reduce production app -> appAux termClosed
-- On String reduce production app -> appAux termClosed
-- On Semicolon reduce production app -> appAux termClosed
-- On RParen reduce production app -> appAux termClosed
-- On Pipe reduce production app -> appAux termClosed
-- On Open reduce production app -> appAux termClosed
-- On Match reduce production app -> appAux termClosed
-- On LowerName reduce production app -> appAux termClosed
-- On Let reduce production app -> appAux termClosed
-- On LQMarkBracket reduce production app -> appAux termClosed
-- On LParen reduce production app -> appAux termClosed
-- On LBracket reduce production app -> appAux termClosed
-- On Int reduce production app -> appAux termClosed
-- On Instance reduce production app -> appAux termClosed
-- On In reduce production app -> appAux termClosed
-- On Foreign reduce production app -> appAux termClosed
-- On Float reduce production app -> appAux termClosed
-- On Exception reduce production app -> appAux termClosed
-- On End reduce production app -> appAux termClosed
-- On EOF reduce production app -> appAux termClosed
-- On Colon reduce production app -> appAux termClosed
-- On Class reduce production app -> appAux termClosed
-- On Char reduce production app -> appAux termClosed

State 204:
appAux -> app . [ UpperName Try String Match LowerName LQMarkBracket LParen LBracket Int Float Char ]
termNonStrictlyUnclosed -> app . [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
-- On With reduce production termNonStrictlyUnclosed -> app
-- On UpperName reduce production appAux -> app
-- On Type reduce production termNonStrictlyUnclosed -> app
-- On Try reduce production appAux -> app
-- On String reduce production appAux -> app
-- On Semicolon reduce production termNonStrictlyUnclosed -> app
-- On RParen reduce production termNonStrictlyUnclosed -> app
-- On Pipe reduce production termNonStrictlyUnclosed -> app
-- On Open reduce production termNonStrictlyUnclosed -> app
-- On Match reduce production appAux -> app
-- On LowerName reduce production appAux -> app
-- On Let reduce production termNonStrictlyUnclosed -> app
-- On LQMarkBracket reduce production appAux -> app
-- On LParen reduce production appAux -> app
-- On LBracket reduce production appAux -> app
-- On Int reduce production appAux -> app
-- On Instance reduce production termNonStrictlyUnclosed -> app
-- On In reduce production termNonStrictlyUnclosed -> app
-- On Foreign reduce production termNonStrictlyUnclosed -> app
-- On Float reduce production appAux -> app
-- On Exception reduce production termNonStrictlyUnclosed -> app
-- On End reduce production termNonStrictlyUnclosed -> app
-- On EOF reduce production termNonStrictlyUnclosed -> app
-- On Colon reduce production termNonStrictlyUnclosed -> app
-- On Class reduce production termNonStrictlyUnclosed -> app
-- On Char reduce production appAux -> app

State 205:
termStrictlyUnclosed -> termProtectedPermissive Colon . typeExpr Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive Colon . typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 206
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 206:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr . Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On Hash shift to state 207
-- On With reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Type reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On RParen reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Pipe reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Open reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Let reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Instance reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On In reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Foreign reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Exception reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On End reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On EOF reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Class reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr

State 207:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash . typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 208
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 208:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Type reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On RParen reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Pipe reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Open reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Let reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Instance reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On In reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Foreign reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Exception reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On End reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On EOF reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr
-- On Class reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr

State 209:
termClosed -> LParen term . RParen [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On RParen shift to state 210

State 210:
termClosed -> LParen term RParen . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> LParen term RParen
-- On UpperName reduce production termClosed -> LParen term RParen
-- On Type reduce production termClosed -> LParen term RParen
-- On Try reduce production termClosed -> LParen term RParen
-- On String reduce production termClosed -> LParen term RParen
-- On Semicolon reduce production termClosed -> LParen term RParen
-- On RParen reduce production termClosed -> LParen term RParen
-- On Pipe reduce production termClosed -> LParen term RParen
-- On Open reduce production termClosed -> LParen term RParen
-- On Match reduce production termClosed -> LParen term RParen
-- On LowerName reduce production termClosed -> LParen term RParen
-- On Let reduce production termClosed -> LParen term RParen
-- On LQMarkBracket reduce production termClosed -> LParen term RParen
-- On LParen reduce production termClosed -> LParen term RParen
-- On LBracket reduce production termClosed -> LParen term RParen
-- On Int reduce production termClosed -> LParen term RParen
-- On Instance reduce production termClosed -> LParen term RParen
-- On In reduce production termClosed -> LParen term RParen
-- On Foreign reduce production termClosed -> LParen term RParen
-- On Float reduce production termClosed -> LParen term RParen
-- On Exception reduce production termClosed -> LParen term RParen
-- On End reduce production termClosed -> LParen term RParen
-- On EOF reduce production termClosed -> LParen term RParen
-- On Colon reduce production termClosed -> LParen term RParen
-- On Class reduce production termClosed -> LParen term RParen
-- On Char reduce production termClosed -> LParen term RParen

State 211:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Type reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On RParen reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Pipe reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Open reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Let reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Instance reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On In reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Foreign reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Exception reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On End reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On EOF reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
-- On Class reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term

State 212:
typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed . [ Hash Arrow ]
-- On Hash reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed

State 213:
tyAppAux -> typeExprClosed . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExprProtectedPermissive -> typeExprClosed . [ Hash Arrow ]
-- On UpperName reduce production tyAppAux -> typeExprClosed
-- On Underscore reduce production tyAppAux -> typeExprClosed
-- On LowerName reduce production tyAppAux -> typeExprClosed
-- On LParen reduce production tyAppAux -> typeExprClosed
-- On LBracketUp reduce production tyAppAux -> typeExprClosed
-- On LBracket reduce production tyAppAux -> typeExprClosed
-- On Hash reduce production typeExprProtectedPermissive -> typeExprClosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprClosed

State 214:
lambda_aux -> Colon typeExprProtectedPermissive Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 215
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 215:
lambda_aux -> Colon typeExprProtectedPermissive Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Type reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On RParen reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Pipe reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Open reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Let reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Instance reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On In reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Foreign reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Exception reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On End reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On EOF reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term
-- On Class reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term

State 216:
lambda_aux -> Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 217
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 217:
lambda_aux -> Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production lambda_aux -> Arrow term
-- On Type reduce production lambda_aux -> Arrow term
-- On RParen reduce production lambda_aux -> Arrow term
-- On Pipe reduce production lambda_aux -> Arrow term
-- On Open reduce production lambda_aux -> Arrow term
-- On Let reduce production lambda_aux -> Arrow term
-- On Instance reduce production lambda_aux -> Arrow term
-- On In reduce production lambda_aux -> Arrow term
-- On Foreign reduce production lambda_aux -> Arrow term
-- On Exception reduce production lambda_aux -> Arrow term
-- On End reduce production lambda_aux -> Arrow term
-- On EOF reduce production lambda_aux -> Arrow term
-- On Class reduce production lambda_aux -> Arrow term

State 218:
args(lambda_aux) -> lambda_aux . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production args(lambda_aux) -> lambda_aux
-- On Type reduce production args(lambda_aux) -> lambda_aux
-- On RParen reduce production args(lambda_aux) -> lambda_aux
-- On Pipe reduce production args(lambda_aux) -> lambda_aux
-- On Open reduce production args(lambda_aux) -> lambda_aux
-- On Let reduce production args(lambda_aux) -> lambda_aux
-- On Instance reduce production args(lambda_aux) -> lambda_aux
-- On In reduce production args(lambda_aux) -> lambda_aux
-- On Foreign reduce production args(lambda_aux) -> lambda_aux
-- On Exception reduce production args(lambda_aux) -> lambda_aux
-- On End reduce production args(lambda_aux) -> lambda_aux
-- On EOF reduce production args(lambda_aux) -> lambda_aux
-- On Class reduce production args(lambda_aux) -> lambda_aux

State 219:
nonempty_args(lambda_aux) -> arg args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Type reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On RParen reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Pipe reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Open reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Let reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Instance reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On In reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Foreign reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Exception reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On End reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On EOF reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)
-- On Class reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)

State 220:
args(lambda_aux) -> arg . args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Colon shift to state 165
-- On Arrow shift to state 216
-- On lambda_aux shift to state 218
-- On kind_and_name_in_value shift to state 163
-- On args(lambda_aux) shift to state 221
-- On arg shift to state 220

State 221:
args(lambda_aux) -> arg args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
-- On With reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Type reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On RParen reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Pipe reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Open reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Let reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Instance reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On In reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Foreign reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Exception reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On End reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On EOF reduce production args(lambda_aux) -> arg args(lambda_aux)
-- On Class reduce production args(lambda_aux) -> arg args(lambda_aux)

State 222:
termClosed -> Match term . With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With shift to state 223

State 223:
termClosed -> Match term With . option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 224
-- On UpperName reduce production option(Pipe) -> 
-- On Underscore reduce production option(Pipe) -> 
-- On LowerName reduce production option(Pipe) -> 
-- On LParen reduce production option(Pipe) -> 

State 224:
termClosed -> Match term With option(Pipe) . separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 245
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250

State 225:
patClosed -> Underscore . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On UpperName reduce production patClosed -> Underscore
-- On Underscore reduce production patClosed -> Underscore
-- On RParen reduce production patClosed -> Underscore
-- On Pipe reduce production patClosed -> Underscore
-- On LowerName reduce production patClosed -> Underscore
-- On LParen reduce production patClosed -> Underscore
-- On As reduce production patClosed -> Underscore
-- On Arrow reduce production patClosed -> Underscore

State 226:
patClosed -> LowerName . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On UpperName reduce production patClosed -> LowerName
-- On Underscore reduce production patClosed -> LowerName
-- On RParen reduce production patClosed -> LowerName
-- On Pipe reduce production patClosed -> LowerName
-- On LowerName reduce production patClosed -> LowerName
-- On LParen reduce production patClosed -> LowerName
-- On As reduce production patClosed -> LowerName
-- On Arrow reduce production patClosed -> LowerName

State 227:
patClosed -> LParen . pat RParen [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 243

State 228:
patClosed -> upperName . [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> upperName . nonempty_list(patClosed) [ RParen Pipe As Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 229
-- On patClosed shift to state 230
-- On nonempty_list(patClosed) shift to state 232
-- On RParen reduce production patClosed -> upperName
-- On Pipe reduce production patClosed -> upperName
-- On As reduce production patClosed -> upperName
-- On Arrow reduce production patClosed -> upperName

State 229:
patClosed -> upperName . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On UpperName reduce production patClosed -> upperName
-- On Underscore reduce production patClosed -> upperName
-- On RParen reduce production patClosed -> upperName
-- On Pipe reduce production patClosed -> upperName
-- On LowerName reduce production patClosed -> upperName
-- On LParen reduce production patClosed -> upperName
-- On As reduce production patClosed -> upperName
-- On Arrow reduce production patClosed -> upperName

State 230:
nonempty_list(patClosed) -> patClosed . [ RParen Pipe As Arrow ]
nonempty_list(patClosed) -> patClosed . nonempty_list(patClosed) [ RParen Pipe As Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 229
-- On patClosed shift to state 230
-- On nonempty_list(patClosed) shift to state 231
-- On RParen reduce production nonempty_list(patClosed) -> patClosed
-- On Pipe reduce production nonempty_list(patClosed) -> patClosed
-- On As reduce production nonempty_list(patClosed) -> patClosed
-- On Arrow reduce production nonempty_list(patClosed) -> patClosed

State 231:
nonempty_list(patClosed) -> patClosed nonempty_list(patClosed) . [ RParen Pipe As Arrow ]
-- On RParen reduce production nonempty_list(patClosed) -> patClosed nonempty_list(patClosed)
-- On Pipe reduce production nonempty_list(patClosed) -> patClosed nonempty_list(patClosed)
-- On As reduce production nonempty_list(patClosed) -> patClosed nonempty_list(patClosed)
-- On Arrow reduce production nonempty_list(patClosed) -> patClosed nonempty_list(patClosed)

State 232:
patNonStrictlyUnclosed -> upperName nonempty_list(patClosed) . [ RParen Pipe As Arrow ]
-- On RParen reduce production patNonStrictlyUnclosed -> upperName nonempty_list(patClosed)
-- On Pipe reduce production patNonStrictlyUnclosed -> upperName nonempty_list(patClosed)
-- On As reduce production patNonStrictlyUnclosed -> upperName nonempty_list(patClosed)
-- On Arrow reduce production patNonStrictlyUnclosed -> upperName nonempty_list(patClosed)

State 233:
pat -> patUnclosed . [ RParen Arrow ]
-- On RParen reduce production pat -> patUnclosed
-- On Arrow reduce production pat -> patUnclosed

State 234:
patUnclosed -> patStrictlyUnclosed . [ RParen Arrow ]
-- On RParen reduce production patUnclosed -> patStrictlyUnclosed
-- On Arrow reduce production patUnclosed -> patStrictlyUnclosed

State 235:
patNonStrictlyUnclosed -> patProtectedPermissive . As LowerName [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> patProtectedPermissive . As Underscore [ RParen Pipe As Arrow ]
patStrictlyUnclosed -> patProtectedPermissive . Pipe pat [ RParen Arrow ]
-- On Pipe shift to state 236
-- On As shift to state 240

State 236:
patStrictlyUnclosed -> patProtectedPermissive Pipe . pat [ RParen Arrow ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 239

State 237:
patProtectedPermissive -> patNonStrictlyUnclosed . [ Pipe As ]
patUnclosed -> patNonStrictlyUnclosed . [ RParen Arrow ]
-- On RParen reduce production patUnclosed -> patNonStrictlyUnclosed
-- On Pipe reduce production patProtectedPermissive -> patNonStrictlyUnclosed
-- On As reduce production patProtectedPermissive -> patNonStrictlyUnclosed
-- On Arrow reduce production patUnclosed -> patNonStrictlyUnclosed

State 238:
pat -> patClosed . [ RParen Arrow ]
patProtectedPermissive -> patClosed . [ Pipe As ]
-- On RParen reduce production pat -> patClosed
-- On Pipe reduce production patProtectedPermissive -> patClosed
-- On As reduce production patProtectedPermissive -> patClosed
-- On Arrow reduce production pat -> patClosed

State 239:
patStrictlyUnclosed -> patProtectedPermissive Pipe pat . [ RParen Arrow ]
-- On RParen reduce production patStrictlyUnclosed -> patProtectedPermissive Pipe pat
-- On Arrow reduce production patStrictlyUnclosed -> patProtectedPermissive Pipe pat

State 240:
patNonStrictlyUnclosed -> patProtectedPermissive As . LowerName [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> patProtectedPermissive As . Underscore [ RParen Pipe As Arrow ]
-- On Underscore shift to state 241
-- On LowerName shift to state 242

State 241:
patNonStrictlyUnclosed -> patProtectedPermissive As Underscore . [ RParen Pipe As Arrow ]
-- On RParen reduce production patNonStrictlyUnclosed -> patProtectedPermissive As Underscore
-- On Pipe reduce production patNonStrictlyUnclosed -> patProtectedPermissive As Underscore
-- On As reduce production patNonStrictlyUnclosed -> patProtectedPermissive As Underscore
-- On Arrow reduce production patNonStrictlyUnclosed -> patProtectedPermissive As Underscore

State 242:
patNonStrictlyUnclosed -> patProtectedPermissive As LowerName . [ RParen Pipe As Arrow ]
-- On RParen reduce production patNonStrictlyUnclosed -> patProtectedPermissive As LowerName
-- On Pipe reduce production patNonStrictlyUnclosed -> patProtectedPermissive As LowerName
-- On As reduce production patNonStrictlyUnclosed -> patProtectedPermissive As LowerName
-- On Arrow reduce production patNonStrictlyUnclosed -> patProtectedPermissive As LowerName

State 243:
patClosed -> LParen pat . RParen [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On RParen shift to state 244

State 244:
patClosed -> LParen pat RParen . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
-- On UpperName reduce production patClosed -> LParen pat RParen
-- On Underscore reduce production patClosed -> LParen pat RParen
-- On RParen reduce production patClosed -> LParen pat RParen
-- On Pipe reduce production patClosed -> LParen pat RParen
-- On LowerName reduce production patClosed -> LParen pat RParen
-- On LParen reduce production patClosed -> LParen pat RParen
-- On As reduce production patClosed -> LParen pat RParen
-- On Arrow reduce production patClosed -> LParen pat RParen

State 245:
termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) . End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On End shift to state 246

State 246:
termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On UpperName reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Type reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Try reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On String reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Semicolon reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On RParen reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Pipe reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Open reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Match reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LowerName reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Let reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LQMarkBracket reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LParen reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LBracket reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Int reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Instance reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On In reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Foreign reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Float reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Exception reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On End reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On EOF reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Colon reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Class reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Char reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End

State 247:
separated_nonempty_list(Pipe,pattern) -> pattern . [ End ]
separated_nonempty_list(Pipe,pattern) -> pattern . Pipe separated_nonempty_list(Pipe,pattern) [ End ]
-- On Pipe shift to state 248
-- On End reduce production separated_nonempty_list(Pipe,pattern) -> pattern

State 248:
separated_nonempty_list(Pipe,pattern) -> pattern Pipe . separated_nonempty_list(Pipe,pattern) [ End ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 249
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250

State 249:
separated_nonempty_list(Pipe,pattern) -> pattern Pipe separated_nonempty_list(Pipe,pattern) . [ End ]
-- On End reduce production separated_nonempty_list(Pipe,pattern) -> pattern Pipe separated_nonempty_list(Pipe,pattern)

State 250:
pattern -> pat . Arrow term [ Pipe End ]
-- On Arrow shift to state 251

State 251:
pattern -> pat Arrow . term [ Pipe End ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 252
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 252:
pattern -> pat Arrow term . [ Pipe End ]
-- On Pipe reduce production pattern -> pat Arrow term
-- On End reduce production pattern -> pat Arrow term

State 253:
termClosed -> Try term . With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With shift to state 254

State 254:
termClosed -> Try term With . option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 255
-- On UpperName reduce production option(Pipe) -> 
-- On Underscore reduce production option(Pipe) -> 
-- On LowerName reduce production option(Pipe) -> 
-- On LParen reduce production option(Pipe) -> 

State 255:
termClosed -> Try term With option(Pipe) . separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 256
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250

State 256:
termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) . End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On End shift to state 257

State 257:
termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
-- On With reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On UpperName reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Type reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Try reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On String reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Semicolon reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On RParen reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Pipe reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Open reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Match reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LowerName reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Let reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LQMarkBracket reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LParen reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On LBracket reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Int reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Instance reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On In reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Foreign reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Float reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Exception reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On End reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On EOF reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Colon reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Class reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
-- On Char reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End

State 258:
let_aux -> Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_aux -> Equal term
-- On Open reduce production let_aux -> Equal term
-- On Let reduce production let_aux -> Equal term
-- On Instance reduce production let_aux -> Equal term
-- On In reduce production let_aux -> Equal term
-- On Foreign reduce production let_aux -> Equal term
-- On Exception reduce production let_aux -> Equal term
-- On End reduce production let_aux -> Equal term
-- On EOF reduce production let_aux -> Equal term
-- On Class reduce production let_aux -> Equal term

State 259:
let_aux -> Colon . typeExpr Hash typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_aux -> Colon . typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 260
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 260:
let_aux -> Colon typeExpr . Hash typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_aux -> Colon typeExpr . Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Hash shift to state 261
-- On Equal shift to state 265

State 261:
let_aux -> Colon typeExpr Hash . typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 262
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 262:
let_aux -> Colon typeExpr Hash typeExpr . Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Equal shift to state 263

State 263:
let_aux -> Colon typeExpr Hash typeExpr Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 264
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 264:
let_aux -> Colon typeExpr Hash typeExpr Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Open reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Let reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Instance reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On In reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Foreign reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Exception reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On End reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On EOF reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term
-- On Class reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term

State 265:
let_aux -> Colon typeExpr Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 266
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204

State 266:
let_aux -> Colon typeExpr Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_aux -> Colon typeExpr Equal term
-- On Open reduce production let_aux -> Colon typeExpr Equal term
-- On Let reduce production let_aux -> Colon typeExpr Equal term
-- On Instance reduce production let_aux -> Colon typeExpr Equal term
-- On In reduce production let_aux -> Colon typeExpr Equal term
-- On Foreign reduce production let_aux -> Colon typeExpr Equal term
-- On Exception reduce production let_aux -> Colon typeExpr Equal term
-- On End reduce production let_aux -> Colon typeExpr Equal term
-- On EOF reduce production let_aux -> Colon typeExpr Equal term
-- On Class reduce production let_aux -> Colon typeExpr Equal term

State 267:
args(let_aux) -> let_aux . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production args(let_aux) -> let_aux
-- On Open reduce production args(let_aux) -> let_aux
-- On Let reduce production args(let_aux) -> let_aux
-- On Instance reduce production args(let_aux) -> let_aux
-- On In reduce production args(let_aux) -> let_aux
-- On Foreign reduce production args(let_aux) -> let_aux
-- On Exception reduce production args(let_aux) -> let_aux
-- On End reduce production args(let_aux) -> let_aux
-- On EOF reduce production args(let_aux) -> let_aux
-- On Class reduce production args(let_aux) -> let_aux

State 268:
let_case -> Let Underscore args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_case -> Let Underscore args(let_aux)
-- On Open reduce production let_case -> Let Underscore args(let_aux)
-- On Let reduce production let_case -> Let Underscore args(let_aux)
-- On Instance reduce production let_case -> Let Underscore args(let_aux)
-- On In reduce production let_case -> Let Underscore args(let_aux)
-- On Foreign reduce production let_case -> Let Underscore args(let_aux)
-- On Exception reduce production let_case -> Let Underscore args(let_aux)
-- On End reduce production let_case -> Let Underscore args(let_aux)
-- On EOF reduce production let_case -> Let Underscore args(let_aux)
-- On Class reduce production let_case -> Let Underscore args(let_aux)

State 269:
args(let_aux) -> arg . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 270
-- On arg shift to state 269

State 270:
args(let_aux) -> arg args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production args(let_aux) -> arg args(let_aux)
-- On Open reduce production args(let_aux) -> arg args(let_aux)
-- On Let reduce production args(let_aux) -> arg args(let_aux)
-- On Instance reduce production args(let_aux) -> arg args(let_aux)
-- On In reduce production args(let_aux) -> arg args(let_aux)
-- On Foreign reduce production args(let_aux) -> arg args(let_aux)
-- On Exception reduce production args(let_aux) -> arg args(let_aux)
-- On End reduce production args(let_aux) -> arg args(let_aux)
-- On EOF reduce production args(let_aux) -> arg args(let_aux)
-- On Class reduce production args(let_aux) -> arg args(let_aux)

State 271:
let_case -> Let Rec . LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let Rec . Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Underscore shift to state 272
-- On LowerName shift to state 274

State 272:
let_case -> Let Rec Underscore . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 273
-- On arg shift to state 269

State 273:
let_case -> Let Rec Underscore args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Open reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Let reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Instance reduce production let_case -> Let Rec Underscore args(let_aux)
-- On In reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Foreign reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Exception reduce production let_case -> Let Rec Underscore args(let_aux)
-- On End reduce production let_case -> Let Rec Underscore args(let_aux)
-- On EOF reduce production let_case -> Let Rec Underscore args(let_aux)
-- On Class reduce production let_case -> Let Rec Underscore args(let_aux)

State 274:
let_case -> Let Rec LowerName . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 275
-- On arg shift to state 269

State 275:
let_case -> Let Rec LowerName args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Open reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Let reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Instance reduce production let_case -> Let Rec LowerName args(let_aux)
-- On In reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Foreign reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Exception reduce production let_case -> Let Rec LowerName args(let_aux)
-- On End reduce production let_case -> Let Rec LowerName args(let_aux)
-- On EOF reduce production let_case -> Let Rec LowerName args(let_aux)
-- On Class reduce production let_case -> Let Rec LowerName args(let_aux)

State 276:
let_case -> Let LowerName . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 277
-- On arg shift to state 269

State 277:
let_case -> Let LowerName args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
-- On Type reduce production let_case -> Let LowerName args(let_aux)
-- On Open reduce production let_case -> Let LowerName args(let_aux)
-- On Let reduce production let_case -> Let LowerName args(let_aux)
-- On Instance reduce production let_case -> Let LowerName args(let_aux)
-- On In reduce production let_case -> Let LowerName args(let_aux)
-- On Foreign reduce production let_case -> Let LowerName args(let_aux)
-- On Exception reduce production let_case -> Let LowerName args(let_aux)
-- On End reduce production let_case -> Let LowerName args(let_aux)
-- On EOF reduce production let_case -> Let LowerName args(let_aux)
-- On Class reduce production let_case -> Let LowerName args(let_aux)

State 278:
body -> Instance . instanceName tyclassInstance Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On LBracket shift to state 279
-- On instanceName shift to state 284
-- On UpperName reduce production instanceName -> 

State 279:
instanceName -> LBracket . LowerName RBracket [ UpperName ]
instanceName -> LBracket . Underscore RBracket [ UpperName ]
-- On Underscore shift to state 280
-- On LowerName shift to state 282

State 280:
instanceName -> LBracket Underscore . RBracket [ UpperName ]
-- On RBracket shift to state 281

State 281:
instanceName -> LBracket Underscore RBracket . [ UpperName ]
-- On UpperName reduce production instanceName -> LBracket Underscore RBracket

State 282:
instanceName -> LBracket LowerName . RBracket [ UpperName ]
-- On RBracket shift to state 283

State 283:
instanceName -> LBracket LowerName RBracket . [ UpperName ]
-- On UpperName reduce production instanceName -> LBracket LowerName RBracket

State 284:
body -> Instance instanceName . tyclassInstance Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 285

State 285:
body -> Instance instanceName tyclassInstance . Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Equal shift to state 286

State 286:
body -> Instance instanceName tyclassInstance Equal . nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Let shift to state 132
-- On nonempty_list(let_case) shift to state 287
-- On let_case shift to state 289

State 287:
body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) . End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On End shift to state 288

State 288:
body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Open reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Let reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Instance reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Foreign reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Exception reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On EOF reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
-- On Class reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End

State 289:
nonempty_list(let_case) -> let_case . [ End ]
nonempty_list(let_case) -> let_case . nonempty_list(let_case) [ End ]
-- On Let shift to state 132
-- On nonempty_list(let_case) shift to state 290
-- On let_case shift to state 289
-- On End reduce production nonempty_list(let_case) -> let_case

State 290:
nonempty_list(let_case) -> let_case nonempty_list(let_case) . [ End ]
-- On End reduce production nonempty_list(let_case) -> let_case nonempty_list(let_case)

State 291:
body -> Foreign . String LowerName Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
body -> Foreign . String Underscore Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On String shift to state 292

State 292:
body -> Foreign String . LowerName Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
body -> Foreign String . Underscore Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Underscore shift to state 293
-- On LowerName shift to state 296

State 293:
body -> Foreign String Underscore . Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Colon shift to state 294

State 294:
body -> Foreign String Underscore Colon . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 295
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 295:
body -> Foreign String Underscore Colon typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Foreign String Underscore Colon typeExpr
-- On Open reduce production body -> Foreign String Underscore Colon typeExpr
-- On Let reduce production body -> Foreign String Underscore Colon typeExpr
-- On Instance reduce production body -> Foreign String Underscore Colon typeExpr
-- On Foreign reduce production body -> Foreign String Underscore Colon typeExpr
-- On Exception reduce production body -> Foreign String Underscore Colon typeExpr
-- On EOF reduce production body -> Foreign String Underscore Colon typeExpr
-- On Class reduce production body -> Foreign String Underscore Colon typeExpr

State 296:
body -> Foreign String LowerName . Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Colon shift to state 297

State 297:
body -> Foreign String LowerName Colon . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 298
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 298:
body -> Foreign String LowerName Colon typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Foreign String LowerName Colon typeExpr
-- On Open reduce production body -> Foreign String LowerName Colon typeExpr
-- On Let reduce production body -> Foreign String LowerName Colon typeExpr
-- On Instance reduce production body -> Foreign String LowerName Colon typeExpr
-- On Foreign reduce production body -> Foreign String LowerName Colon typeExpr
-- On Exception reduce production body -> Foreign String LowerName Colon typeExpr
-- On EOF reduce production body -> Foreign String LowerName Colon typeExpr
-- On Class reduce production body -> Foreign String LowerName Colon typeExpr

State 299:
body -> Exception . newUpperName exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On newUpperName shift to state 300

State 300:
body -> Exception newUpperName . exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 303
-- On Type reduce production exceptionArgs -> 
-- On Open reduce production exceptionArgs -> 
-- On Let reduce production exceptionArgs -> 
-- On Instance reduce production exceptionArgs -> 
-- On Foreign reduce production exceptionArgs -> 
-- On Exception reduce production exceptionArgs -> 
-- On EOF reduce production exceptionArgs -> 
-- On Class reduce production exceptionArgs -> 

State 301:
exceptionArgs -> typeExprClosed . exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 302
-- On Type reduce production exceptionArgs -> 
-- On Open reduce production exceptionArgs -> 
-- On Let reduce production exceptionArgs -> 
-- On Instance reduce production exceptionArgs -> 
-- On Foreign reduce production exceptionArgs -> 
-- On Exception reduce production exceptionArgs -> 
-- On EOF reduce production exceptionArgs -> 
-- On Class reduce production exceptionArgs -> 

State 302:
exceptionArgs -> typeExprClosed exceptionArgs . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Open reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Let reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Instance reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Foreign reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Exception reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On EOF reduce production exceptionArgs -> typeExprClosed exceptionArgs
-- On Class reduce production exceptionArgs -> typeExprClosed exceptionArgs

State 303:
body -> Exception newUpperName exceptionArgs . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Exception newUpperName exceptionArgs
-- On Open reduce production body -> Exception newUpperName exceptionArgs
-- On Let reduce production body -> Exception newUpperName exceptionArgs
-- On Instance reduce production body -> Exception newUpperName exceptionArgs
-- On Foreign reduce production body -> Exception newUpperName exceptionArgs
-- On Exception reduce production body -> Exception newUpperName exceptionArgs
-- On EOF reduce production body -> Exception newUpperName exceptionArgs
-- On Class reduce production body -> Exception newUpperName exceptionArgs

State 304:
body_list(body) -> EOF . [ # ]
-- On # reduce production body_list(body) -> EOF

State 305:
body -> Class . newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On UpperName shift to state 13
-- On newUpperName shift to state 306

State 306:
body -> Class newUpperName . nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 307
-- On kind_and_name shift to state 92

State 307:
body -> Class newUpperName nonempty_list(kind_and_name) . Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Equal shift to state 308

State 308:
body -> Class newUpperName nonempty_list(kind_and_name) Equal . nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 316
-- On letSig shift to state 318

State 309:
letSig -> Let . LowerName Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
letSig -> Let . Underscore Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
-- On Underscore shift to state 310
-- On LowerName shift to state 313

State 310:
letSig -> Let Underscore . Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
-- On Colon shift to state 311

State 311:
letSig -> Let Underscore Colon . typeExpr [ Type Open Let Instance Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 312
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 312:
letSig -> Let Underscore Colon typeExpr . [ Type Open Let Instance Exception End EOF Class ]
-- On Type reduce production letSig -> Let Underscore Colon typeExpr
-- On Open reduce production letSig -> Let Underscore Colon typeExpr
-- On Let reduce production letSig -> Let Underscore Colon typeExpr
-- On Instance reduce production letSig -> Let Underscore Colon typeExpr
-- On Exception reduce production letSig -> Let Underscore Colon typeExpr
-- On End reduce production letSig -> Let Underscore Colon typeExpr
-- On EOF reduce production letSig -> Let Underscore Colon typeExpr
-- On Class reduce production letSig -> Let Underscore Colon typeExpr

State 313:
letSig -> Let LowerName . Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
-- On Colon shift to state 314

State 314:
letSig -> Let LowerName Colon . typeExpr [ Type Open Let Instance Exception End EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 315
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82

State 315:
letSig -> Let LowerName Colon typeExpr . [ Type Open Let Instance Exception End EOF Class ]
-- On Type reduce production letSig -> Let LowerName Colon typeExpr
-- On Open reduce production letSig -> Let LowerName Colon typeExpr
-- On Let reduce production letSig -> Let LowerName Colon typeExpr
-- On Instance reduce production letSig -> Let LowerName Colon typeExpr
-- On Exception reduce production letSig -> Let LowerName Colon typeExpr
-- On End reduce production letSig -> Let LowerName Colon typeExpr
-- On EOF reduce production letSig -> Let LowerName Colon typeExpr
-- On Class reduce production letSig -> Let LowerName Colon typeExpr

State 316:
body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) . End [ Type Open Let Instance Foreign Exception EOF Class ]
-- On End shift to state 317

State 317:
body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Open reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Let reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Instance reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Foreign reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Exception reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On EOF reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Class reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End

State 318:
nonempty_list(letSig) -> letSig . [ End ]
nonempty_list(letSig) -> letSig . nonempty_list(letSig) [ End ]
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 319
-- On letSig shift to state 318
-- On End reduce production nonempty_list(letSig) -> letSig

State 319:
nonempty_list(letSig) -> letSig nonempty_list(letSig) . [ End ]
-- On End reduce production nonempty_list(letSig) -> letSig nonempty_list(letSig)

State 320:
body -> typeAlias . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> typeAlias
-- On Open reduce production body -> typeAlias
-- On Let reduce production body -> typeAlias
-- On Instance reduce production body -> typeAlias
-- On Foreign reduce production body -> typeAlias
-- On Exception reduce production body -> typeAlias
-- On EOF reduce production body -> typeAlias
-- On Class reduce production body -> typeAlias

State 321:
body -> let_case . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> let_case
-- On Open reduce production body -> let_case
-- On Let reduce production body -> let_case
-- On Instance reduce production body -> let_case
-- On Foreign reduce production body -> let_case
-- On Exception reduce production body -> let_case
-- On EOF reduce production body -> let_case
-- On Class reduce production body -> let_case

State 322:
body -> datatype . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production body -> datatype
-- On Open reduce production body -> datatype
-- On Let reduce production body -> datatype
-- On Instance reduce production body -> datatype
-- On Foreign reduce production body -> datatype
-- On Exception reduce production body -> datatype
-- On EOF reduce production body -> datatype
-- On Class reduce production body -> datatype

State 323:
entry(body) -> list(import) body_list(body) . [ # ]
-- On # reduce production entry(body) -> list(import) body_list(body)

State 324:
body_list(body) -> body . body_list(body) [ # ]
-- On Type shift to state 12
-- On Open shift to state 130
-- On Let shift to state 132
-- On Instance shift to state 278
-- On Foreign shift to state 291
-- On Exception shift to state 299
-- On EOF shift to state 304
-- On Class shift to state 305
-- On typeAlias shift to state 320
-- On let_case shift to state 321
-- On datatype shift to state 322
-- On body_list(body) shift to state 325
-- On body shift to state 324

State 325:
body_list(body) -> body body_list(body) . [ # ]
-- On # reduce production body_list(body) -> body body_list(body)

State 326:
list(import) -> import . list(import) [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Import shift to state 1
-- On list(import) shift to state 327
-- On import shift to state 326
-- On Type reduce production list(import) -> 
-- On Open reduce production list(import) -> 
-- On Let reduce production list(import) -> 
-- On Instance reduce production list(import) -> 
-- On Foreign reduce production list(import) -> 
-- On Exception reduce production list(import) -> 
-- On EOF reduce production list(import) -> 
-- On Class reduce production list(import) -> 

State 327:
list(import) -> import list(import) . [ Type Open Let Instance Foreign Exception EOF Class ]
-- On Type reduce production list(import) -> import list(import)
-- On Open reduce production list(import) -> import list(import)
-- On Let reduce production list(import) -> import list(import)
-- On Instance reduce production list(import) -> import list(import)
-- On Foreign reduce production list(import) -> import list(import)
-- On Exception reduce production list(import) -> import list(import)
-- On EOF reduce production list(import) -> import list(import)
-- On Class reduce production list(import) -> import list(import)

State 328:
main -> entry(body) . [ # ]
-- On # reduce production main -> entry(body)

State 329:
mainInterface' -> . mainInterface [ # ]
-- On Import shift to state 1
-- On mainInterface shift to state 330
-- On list(import) shift to state 331
-- On import shift to state 326
-- On entry(bodyInterface) shift to state 356
-- On Type reduce production list(import) -> 
-- On Open reduce production list(import) -> 
-- On Let reduce production list(import) -> 
-- On Instance reduce production list(import) -> 
-- On Exception reduce production list(import) -> 
-- On EOF reduce production list(import) -> 
-- On Class reduce production list(import) -> 

State 330:
mainInterface' -> mainInterface . [ # ]
-- On # accept mainInterface

State 331:
entry(bodyInterface) -> list(import) . body_list(bodyInterface) [ # ]
-- On Type shift to state 332
-- On Open shift to state 335
-- On Let shift to state 309
-- On Instance shift to state 337
-- On Exception shift to state 340
-- On EOF shift to state 343
-- On Class shift to state 344
-- On typeAlias shift to state 350
-- On letSig shift to state 351
-- On datatype shift to state 352
-- On body_list(bodyInterface) shift to state 353
-- On bodyInterface shift to state 354

State 332:
bodyInterface -> Type . newUpperName kindopt [ Type Open Let Instance Exception EOF Class ]
datatype -> Type . newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Exception EOF Class ]
typeAlias -> Type . Alias newUpperName Equal typeExpr [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 13
-- On Alias shift to state 14
-- On newUpperName shift to state 333

State 333:
bodyInterface -> Type newUpperName . kindopt [ Type Open Let Instance Exception EOF Class ]
datatype -> Type newUpperName . list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Exception EOF Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On Colon shift to state 113
-- On list(kind_and_name) shift to state 115
-- On kindopt shift to state 334
-- On kind_and_name shift to state 128
-- On Type reduce production kindopt -> 
-- On Open reduce production kindopt -> 
-- On Let reduce production kindopt -> 
-- On Instance reduce production kindopt -> 
-- On Exception reduce production kindopt -> 
-- On Equal reduce production list(kind_and_name) -> 
-- On EOF reduce production kindopt -> 
-- On Class reduce production kindopt -> 

State 334:
bodyInterface -> Type newUpperName kindopt . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> Type newUpperName kindopt
-- On Open reduce production bodyInterface -> Type newUpperName kindopt
-- On Let reduce production bodyInterface -> Type newUpperName kindopt
-- On Instance reduce production bodyInterface -> Type newUpperName kindopt
-- On Exception reduce production bodyInterface -> Type newUpperName kindopt
-- On EOF reduce production bodyInterface -> Type newUpperName kindopt
-- On Class reduce production bodyInterface -> Type newUpperName kindopt

State 335:
bodyInterface -> Open . import_module [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 336

State 336:
bodyInterface -> Open import_module . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> Open import_module
-- On Open reduce production bodyInterface -> Open import_module
-- On Let reduce production bodyInterface -> Open import_module
-- On Instance reduce production bodyInterface -> Open import_module
-- On Exception reduce production bodyInterface -> Open import_module
-- On EOF reduce production bodyInterface -> Open import_module
-- On Class reduce production bodyInterface -> Open import_module

State 337:
bodyInterface -> Instance . instanceName tyclassInstance [ Type Open Let Instance Exception EOF Class ]
-- On LBracket shift to state 279
-- On instanceName shift to state 338
-- On UpperName reduce production instanceName -> 

State 338:
bodyInterface -> Instance instanceName . tyclassInstance [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 339

State 339:
bodyInterface -> Instance instanceName tyclassInstance . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On Open reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On Let reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On Instance reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On Exception reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On EOF reduce production bodyInterface -> Instance instanceName tyclassInstance
-- On Class reduce production bodyInterface -> Instance instanceName tyclassInstance

State 340:
bodyInterface -> Exception . newUpperName exceptionArgs [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 13
-- On newUpperName shift to state 341

State 341:
bodyInterface -> Exception newUpperName . exceptionArgs [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 342
-- On Type reduce production exceptionArgs -> 
-- On Open reduce production exceptionArgs -> 
-- On Let reduce production exceptionArgs -> 
-- On Instance reduce production exceptionArgs -> 
-- On Exception reduce production exceptionArgs -> 
-- On EOF reduce production exceptionArgs -> 
-- On Class reduce production exceptionArgs -> 

State 342:
bodyInterface -> Exception newUpperName exceptionArgs . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On Open reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On Let reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On Instance reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On Exception reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On EOF reduce production bodyInterface -> Exception newUpperName exceptionArgs
-- On Class reduce production bodyInterface -> Exception newUpperName exceptionArgs

State 343:
body_list(bodyInterface) -> EOF . [ # ]
-- On # reduce production body_list(bodyInterface) -> EOF

State 344:
bodyInterface -> Class . newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
-- On UpperName shift to state 13
-- On newUpperName shift to state 345

State 345:
bodyInterface -> Class newUpperName . nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 346
-- On kind_and_name shift to state 92

State 346:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) . Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
-- On Equal shift to state 347

State 347:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal . nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 348
-- On letSig shift to state 318

State 348:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) . End [ Type Open Let Instance Exception EOF Class ]
-- On End shift to state 349

State 349:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Open reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Let reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Instance reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Exception reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On EOF reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
-- On Class reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End

State 350:
bodyInterface -> typeAlias . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> typeAlias
-- On Open reduce production bodyInterface -> typeAlias
-- On Let reduce production bodyInterface -> typeAlias
-- On Instance reduce production bodyInterface -> typeAlias
-- On Exception reduce production bodyInterface -> typeAlias
-- On EOF reduce production bodyInterface -> typeAlias
-- On Class reduce production bodyInterface -> typeAlias

State 351:
bodyInterface -> letSig . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> letSig
-- On Open reduce production bodyInterface -> letSig
-- On Let reduce production bodyInterface -> letSig
-- On Instance reduce production bodyInterface -> letSig
-- On Exception reduce production bodyInterface -> letSig
-- On EOF reduce production bodyInterface -> letSig
-- On Class reduce production bodyInterface -> letSig

State 352:
bodyInterface -> datatype . [ Type Open Let Instance Exception EOF Class ]
-- On Type reduce production bodyInterface -> datatype
-- On Open reduce production bodyInterface -> datatype
-- On Let reduce production bodyInterface -> datatype
-- On Instance reduce production bodyInterface -> datatype
-- On Exception reduce production bodyInterface -> datatype
-- On EOF reduce production bodyInterface -> datatype
-- On Class reduce production bodyInterface -> datatype

State 353:
entry(bodyInterface) -> list(import) body_list(bodyInterface) . [ # ]
-- On # reduce production entry(bodyInterface) -> list(import) body_list(bodyInterface)

State 354:
body_list(bodyInterface) -> bodyInterface . body_list(bodyInterface) [ # ]
-- On Type shift to state 332
-- On Open shift to state 335
-- On Let shift to state 309
-- On Instance shift to state 337
-- On Exception shift to state 340
-- On EOF shift to state 343
-- On Class shift to state 344
-- On typeAlias shift to state 350
-- On letSig shift to state 351
-- On datatype shift to state 352
-- On body_list(bodyInterface) shift to state 355
-- On bodyInterface shift to state 354

State 355:
body_list(bodyInterface) -> bodyInterface body_list(bodyInterface) . [ # ]
-- On # reduce production body_list(bodyInterface) -> bodyInterface body_list(bodyInterface)

State 356:
mainInterface -> entry(bodyInterface) . [ # ]
-- On # reduce production mainInterface -> entry(bodyInterface)

