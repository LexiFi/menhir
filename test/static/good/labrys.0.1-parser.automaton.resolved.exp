State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On Import shift to state 1
-- On main shift to state 10
-- On list(import) shift to state 11
-- On import shift to state 326
-- On entry(body) shift to state 328
## Reductions:
-- On Type reduce production list(import) ->
-- On Open reduce production list(import) ->
-- On Let reduce production list(import) ->
-- On Instance reduce production list(import) ->
-- On Foreign reduce production list(import) ->
-- On Exception reduce production list(import) ->
-- On EOF reduce production list(import) ->
-- On Class reduce production list(import) ->

State 1:
## Known stack suffix:
## Import
## LR(1) items:
import -> Import . import_module [ Type Open Let Instance Import Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 9
## Reductions:

State 2:
## Known stack suffix:
## UpperName
## LR(1) items:
upperName_aux -> UpperName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
upperName_aux -> UpperName . Dot upperName_aux [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
## Transitions:
-- On Dot shift to state 3
## Reductions:
-- On With reduce production upperName_aux -> UpperName
-- On UpperName reduce production upperName_aux -> UpperName
-- On Underscore reduce production upperName_aux -> UpperName
-- On Type reduce production upperName_aux -> UpperName
-- On RParen reduce production upperName_aux -> UpperName
-- On RDoubleArrowEff reduce production upperName_aux -> UpperName
-- On RBracketUp reduce production upperName_aux -> UpperName
-- On RBracket reduce production upperName_aux -> UpperName
-- On RBrace reduce production upperName_aux -> UpperName
-- On RArrowEff reduce production upperName_aux -> UpperName
-- On Pipe reduce production upperName_aux -> UpperName
-- On Open reduce production upperName_aux -> UpperName
-- On LowerName reduce production upperName_aux -> UpperName
-- On Let reduce production upperName_aux -> UpperName
-- On LParen reduce production upperName_aux -> UpperName
-- On LBracketUp reduce production upperName_aux -> UpperName
-- On LBracket reduce production upperName_aux -> UpperName
-- On LBrace reduce production upperName_aux -> UpperName
-- On LArrowEff reduce production upperName_aux -> UpperName
-- On Instance reduce production upperName_aux -> UpperName
-- On In reduce production upperName_aux -> UpperName
-- On Import reduce production upperName_aux -> UpperName
-- On Hash reduce production upperName_aux -> UpperName
-- On Foreign reduce production upperName_aux -> UpperName
-- On Exception reduce production upperName_aux -> UpperName
-- On Equal reduce production upperName_aux -> UpperName
-- On End reduce production upperName_aux -> UpperName
-- On EOF reduce production upperName_aux -> UpperName
-- On Comma reduce production upperName_aux -> UpperName
-- On Class reduce production upperName_aux -> UpperName
-- On As reduce production upperName_aux -> UpperName
-- On Arrow reduce production upperName_aux -> UpperName

State 3:
## Known stack suffix:
## UpperName Dot
## LR(1) items:
upperName_aux -> UpperName Dot . upperName_aux [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LBrace LArrowEff Instance In Import Hash Foreign Exception Equal End EOF Comma Class As Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## UpperName Dot upperName_aux
## LR(1) items:
upperName_aux -> UpperName Dot upperName_aux . [ With UpperName Underscore Type Try String Semicolon RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket LBrace LArrowEff Int Instance In Import Hash Foreign Float Exception Equal End EOF Comma Colon Class Char As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production upperName_aux -> UpperName Dot upperName_aux

State 5:
## Known stack suffix:
## Library
## LR(1) items:
import_module -> Library . upperName [ Type Open Let Instance Import Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 7
## Reductions:

State 6:
## Known stack suffix:
## upperName_aux
## LR(1) items:
upperName -> upperName_aux . [ With UpperName Underscore Type Try String Semicolon RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket LBrace LArrowEff Int Instance In Import Hash Foreign Float Exception Equal End EOF Comma Colon Class Char As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production upperName -> upperName_aux

State 7:
## Known stack suffix:
## Library upperName
## LR(1) items:
import_module -> Library upperName . [ Type Open Let Instance Import Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_module -> Library upperName

State 8:
## Known stack suffix:
## upperName
## LR(1) items:
import_module -> upperName . [ Type Open Let Instance Import Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_module -> upperName

State 9:
## Known stack suffix:
## Import import_module
## LR(1) items:
import -> Import import_module . [ Type Open Let Instance Import Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import -> Import import_module

State 10:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 11:
## Known stack suffix:
## list(import)
## LR(1) items:
entry(body) -> list(import) . body_list(body) [ # ]
## Transitions:
-- On Type shift to state 12
-- On Open shift to state 130
-- On Let shift to state 132
-- On Instance shift to state 278
-- On Foreign shift to state 291
-- On Exception shift to state 299
-- On EOF shift to state 304
-- On Class shift to state 305
-- On typeAlias shift to state 320
-- On let_case shift to state 321
-- On datatype shift to state 322
-- On body_list(body) shift to state 323
-- On body shift to state 324
## Reductions:

State 12:
## Known stack suffix:
## Type
## LR(1) items:
body -> Type . newUpperName kindopt [ Type Open Let Instance Foreign Exception EOF Class ]
datatype -> Type . newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
typeAlias -> Type . Alias newUpperName Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On Alias shift to state 14
-- On newUpperName shift to state 112
## Reductions:

State 13:
## Known stack suffix:
## UpperName
## LR(1) items:
newUpperName -> UpperName . [ UpperName Underscore Type Pipe Open LowerName Let LParen LBracketUp LBracket Instance Foreign Exception Equal EOF Colon Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production newUpperName -> UpperName

State 14:
## Known stack suffix:
## Type Alias
## LR(1) items:
typeAlias -> Type Alias . newUpperName Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On newUpperName shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Type Alias newUpperName
## LR(1) items:
typeAlias -> Type Alias newUpperName . Equal typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Equal shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## Type Alias newUpperName Equal
## LR(1) items:
typeAlias -> Type Alias newUpperName Equal . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 111
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 17:
## Known stack suffix:
## Underscore
## LR(1) items:
typeExprClosed -> Underscore . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> Underscore

State 18:
## Known stack suffix:
## LowerName
## LR(1) items:
typeExprClosed -> LowerName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> LowerName

State 19:
## Known stack suffix:
## Lambda
## LR(1) items:
typeExprStrictlyUnclosed -> Lambda . nonempty_list(kind_and_name) Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 41
-- On kind_and_name shift to state 92
## Reductions:

State 20:
## Known stack suffix:
## Underscore
## LR(1) items:
kind_and_name -> Underscore . [ Underscore LowerName LParen Equal Comma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name -> Underscore

State 21:
## Known stack suffix:
## LowerName
## LR(1) items:
kind_and_name -> LowerName . [ Underscore LowerName LParen Equal Comma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name -> LowerName

State 22:
## Known stack suffix:
## LParen
## LR(1) items:
kind_and_name -> LParen . LowerName Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
kind_and_name -> LParen . Underscore Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On Underscore shift to state 23
-- On LowerName shift to state 37
## Reductions:

State 23:
## Known stack suffix:
## LParen Underscore
## LR(1) items:
kind_and_name -> LParen Underscore . Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On Colon shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LParen Underscore Colon
## LR(1) items:
kind_and_name -> LParen Underscore Colon . kind RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 35
## Reductions:

State 25:
## Known stack suffix:
## Star
## LR(1) items:
kindClosed -> Star . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindClosed -> Star

State 26:
## Known stack suffix:
## LParen
## LR(1) items:
kindClosed -> LParen . kind RParen [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 33
## Reductions:

State 27:
## Known stack suffix:
## Eff
## LR(1) items:
kindClosed -> Eff . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindClosed -> Eff

State 28:
## Known stack suffix:
## Caret
## LR(1) items:
kindClosed -> Caret . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindClosed -> Caret

State 29:
## Known stack suffix:
## kindUnclosed
## LR(1) items:
kind -> kindUnclosed . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> kindUnclosed

State 30:
## Known stack suffix:
## kindClosed
## LR(1) items:
kind -> kindClosed . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
kindUnclosed -> kindClosed . Arrow kind [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Arrow shift to state 31
## Reductions:
-- On Type reduce production kind -> kindClosed
-- On RParen reduce production kind -> kindClosed
-- On RBrace reduce production kind -> kindClosed
-- On Open reduce production kind -> kindClosed
-- On Let reduce production kind -> kindClosed
-- On Instance reduce production kind -> kindClosed
-- On Foreign reduce production kind -> kindClosed
-- On Exception reduce production kind -> kindClosed
-- On EOF reduce production kind -> kindClosed
-- On Class reduce production kind -> kindClosed

State 31:
## Known stack suffix:
## kindClosed Arrow
## LR(1) items:
kindUnclosed -> kindClosed Arrow . kind [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## kindClosed Arrow kind
## LR(1) items:
kindUnclosed -> kindClosed Arrow kind . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindUnclosed -> kindClosed Arrow kind

State 33:
## Known stack suffix:
## LParen kind
## LR(1) items:
kindClosed -> LParen kind . RParen [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
-- On RParen shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LParen kind RParen
## LR(1) items:
kindClosed -> LParen kind RParen . [ Type RParen RBrace Open Let Instance Foreign Exception EOF Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindClosed -> LParen kind RParen

State 35:
## Known stack suffix:
## LParen Underscore Colon kind
## LR(1) items:
kind_and_name -> LParen Underscore Colon kind . RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On RParen shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LParen Underscore Colon kind RParen
## LR(1) items:
kind_and_name -> LParen Underscore Colon kind RParen . [ Underscore LowerName LParen Equal Comma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name -> LParen Underscore Colon kind RParen

State 37:
## Known stack suffix:
## LParen LowerName
## LR(1) items:
kind_and_name -> LParen LowerName . Colon kind RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On Colon shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LParen LowerName Colon
## LR(1) items:
kind_and_name -> LParen LowerName Colon . kind RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## LParen LowerName Colon kind
## LR(1) items:
kind_and_name -> LParen LowerName Colon kind . RParen [ Underscore LowerName LParen Equal Comma ]
## Transitions:
-- On RParen shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LParen LowerName Colon kind RParen
## LR(1) items:
kind_and_name -> LParen LowerName Colon kind RParen . [ Underscore LowerName LParen Equal Comma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name -> LParen LowerName Colon kind RParen

State 41:
## Known stack suffix:
## Lambda nonempty_list(kind_and_name)
## LR(1) items:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) . Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On Comma shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## Lambda nonempty_list(kind_and_name) Comma
## LR(1) items:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 110
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 43:
## Known stack suffix:
## LParen
## LR(1) items:
typeExprClosed -> LParen . typeExpr RParen [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 108
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 44:
## Known stack suffix:
## LBracketUp
## LR(1) items:
typeExprClosed -> LBracketUp . sum RBracketUp [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 101
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On sum shift to state 104
-- On separated_nonempty_list(Pipe,typeExpr) shift to state 106
-- On loption(separated_nonempty_list(Pipe,typeExpr)) shift to state 107
## Reductions:
-- On RBracketUp reduce production loption(separated_nonempty_list(Pipe,typeExpr)) ->

State 45:
## Known stack suffix:
## LBracket
## LR(1) items:
typeExprClosed -> LBracket . eff RBracket [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 99
## Reductions:
-- On RBracket reduce production loption(separated_nonempty_list(Comma,typeExpr)) ->

State 46:
## Known stack suffix:
## LBrace
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace . tyclass RBrace DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace . tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 66
## Reductions:

State 47:
## Known stack suffix:
## upperName
## LR(1) items:
tyclass -> upperName . list(kind_and_name_in_value) nonempty_list(typeExprClosed) [ RParen RBrace ]
## Transitions:
-- On LBrace shift to state 48
-- On list(kind_and_name_in_value) shift to state 59
-- On kind_and_name_in_value shift to state 64
## Reductions:
-- On UpperName reduce production list(kind_and_name_in_value) ->
-- On Underscore reduce production list(kind_and_name_in_value) ->
-- On LowerName reduce production list(kind_and_name_in_value) ->
-- On LParen reduce production list(kind_and_name_in_value) ->
-- On LBracketUp reduce production list(kind_and_name_in_value) ->
-- On LBracket reduce production list(kind_and_name_in_value) ->

State 48:
## Known stack suffix:
## LBrace
## LR(1) items:
kind_and_name_in_value -> LBrace . LowerName RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . Underscore RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . LowerName Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace . Underscore Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On Underscore shift to state 49
-- On LowerName shift to state 54
## Reductions:

State 49:
## Known stack suffix:
## LBrace Underscore
## LR(1) items:
kind_and_name_in_value -> LBrace Underscore . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace Underscore . Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On RBrace shift to state 50
-- On Colon shift to state 51
## Reductions:

State 50:
## Known stack suffix:
## LBrace Underscore RBrace
## LR(1) items:
kind_and_name_in_value -> LBrace Underscore RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name_in_value -> LBrace Underscore RBrace

State 51:
## Known stack suffix:
## LBrace Underscore Colon
## LR(1) items:
kind_and_name_in_value -> LBrace Underscore Colon . kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LBrace Underscore Colon kind
## LR(1) items:
kind_and_name_in_value -> LBrace Underscore Colon kind . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On RBrace shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LBrace Underscore Colon kind RBrace
## LR(1) items:
kind_and_name_in_value -> LBrace Underscore Colon kind RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name_in_value -> LBrace Underscore Colon kind RBrace

State 54:
## Known stack suffix:
## LBrace LowerName
## LR(1) items:
kind_and_name_in_value -> LBrace LowerName . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
kind_and_name_in_value -> LBrace LowerName . Colon kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On RBrace shift to state 55
-- On Colon shift to state 56
## Reductions:

State 55:
## Known stack suffix:
## LBrace LowerName RBrace
## LR(1) items:
kind_and_name_in_value -> LBrace LowerName RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name_in_value -> LBrace LowerName RBrace

State 56:
## Known stack suffix:
## LBrace LowerName Colon
## LR(1) items:
kind_and_name_in_value -> LBrace LowerName Colon . kind RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## LBrace LowerName Colon kind
## LR(1) items:
kind_and_name_in_value -> LBrace LowerName Colon kind . RBrace [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
-- On RBrace shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LBrace LowerName Colon kind RBrace
## LR(1) items:
kind_and_name_in_value -> LBrace LowerName Colon kind RBrace . [ UpperName Underscore LowerName LQMarkParen LParen LBracketUp LBracket LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind_and_name_in_value -> LBrace LowerName Colon kind RBrace

State 59:
## Known stack suffix:
## upperName list(kind_and_name_in_value)
## LR(1) items:
tyclass -> upperName list(kind_and_name_in_value) . nonempty_list(typeExprClosed) [ RParen RBrace ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 63
## Reductions:

State 60:
## Known stack suffix:
## upperName
## LR(1) items:
typeExprClosed -> upperName . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> upperName

State 61:
## Known stack suffix:
## typeExprClosed
## LR(1) items:
nonempty_list(typeExprClosed) -> typeExprClosed . [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
nonempty_list(typeExprClosed) -> typeExprClosed . nonempty_list(typeExprClosed) [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 62
## Reductions:
-- On Type reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RParen reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RBracket reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On RBrace reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Open reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Let reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Instance reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Exception reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Equal reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On EOF reduce production nonempty_list(typeExprClosed) -> typeExprClosed
-- On Class reduce production nonempty_list(typeExprClosed) -> typeExprClosed

State 62:
## Known stack suffix:
## typeExprClosed nonempty_list(typeExprClosed)
## LR(1) items:
nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed) . [ Type RParen RBracket RBrace Open Let Instance Exception Equal EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(typeExprClosed) -> typeExprClosed nonempty_list(typeExprClosed)

State 63:
## Known stack suffix:
## upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed)
## LR(1) items:
tyclass -> upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed) . [ RParen RBrace ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyclass -> upperName list(kind_and_name_in_value) nonempty_list(typeExprClosed)

State 64:
## Known stack suffix:
## kind_and_name_in_value
## LR(1) items:
list(kind_and_name_in_value) -> kind_and_name_in_value . list(kind_and_name_in_value) [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
## Transitions:
-- On LBrace shift to state 48
-- On list(kind_and_name_in_value) shift to state 65
-- On kind_and_name_in_value shift to state 64
## Reductions:
-- On UpperName reduce production list(kind_and_name_in_value) ->
-- On Underscore reduce production list(kind_and_name_in_value) ->
-- On LowerName reduce production list(kind_and_name_in_value) ->
-- On LParen reduce production list(kind_and_name_in_value) ->
-- On LBracketUp reduce production list(kind_and_name_in_value) ->
-- On LBracket reduce production list(kind_and_name_in_value) ->

State 65:
## Known stack suffix:
## kind_and_name_in_value list(kind_and_name_in_value)
## LR(1) items:
list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value) . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(kind_and_name_in_value) -> kind_and_name_in_value list(kind_and_name_in_value)

State 66:
## Known stack suffix:
## LBrace tyclass
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass . RBrace DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace tyclass . RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On RBrace shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LBrace tyclass RBrace
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace . DoubleArrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> LBrace tyclass RBrace . LDoubleArrowEff eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On LDoubleArrowEff shift to state 68
-- On DoubleArrow shift to state 97
## Reductions:

State 68:
## Known stack suffix:
## LBrace tyclass RBrace LDoubleArrowEff
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff . eff RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 94
## Reductions:
-- On RDoubleArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) ->

State 69:
## Known stack suffix:
## Forall
## LR(1) items:
typeExprStrictlyUnclosed -> Forall . nonempty_list(kind_and_name) Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 70
-- On kind_and_name shift to state 92
## Reductions:

State 70:
## Known stack suffix:
## Forall nonempty_list(kind_and_name)
## LR(1) items:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) . Comma typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On Comma shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## Forall nonempty_list(kind_and_name) Comma
## LR(1) items:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 91
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 72:
## Known stack suffix:
## typeExprUnclosed
## LR(1) items:
typeExpr -> typeExprUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExpr -> typeExprUnclosed

State 73:
## Known stack suffix:
## typeExprStrictlyUnclosed
## LR(1) items:
typeExprUnclosed -> typeExprStrictlyUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprUnclosed -> typeExprStrictlyUnclosed

State 74:
## Known stack suffix:
## typeExprProtectedPermissive
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive . Arrow typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprStrictlyUnclosed -> typeExprProtectedPermissive . LArrowEff eff RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On LArrowEff shift to state 75
-- On Arrow shift to state 89
## Reductions:

State 75:
## Known stack suffix:
## typeExprProtectedPermissive LArrowEff
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff . eff RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 84
-- On loption(separated_nonempty_list(Comma,typeExpr)) shift to state 85
-- On eff shift to state 86
## Reductions:
-- On RArrowEff reduce production loption(separated_nonempty_list(Comma,typeExpr)) ->

State 76:
## Known stack suffix:
## typeExprNonStrictlyUnclosed
## LR(1) items:
typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed . [ LArrowEff Arrow ]
typeExprUnclosed -> typeExprNonStrictlyUnclosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Reductions:
-- On With reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Type reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RParen reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RDoubleArrowEff reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RBracketUp reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RBracket reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On RArrowEff reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Pipe reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Open reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Let reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On LArrowEff reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed
-- On Instance reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On In reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Hash reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Foreign reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Exception reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Equal reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On End reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On EOF reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Comma reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Class reduce production typeExprUnclosed -> typeExprNonStrictlyUnclosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed

State 77:
## Known stack suffix:
## typeExprClosed
## LR(1) items:
tyAppAux -> typeExprClosed . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExpr -> typeExprClosed . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
typeExprProtectedPermissive -> typeExprClosed . [ LArrowEff Arrow ]
## Transitions:
## Reductions:
-- On With reduce production typeExpr -> typeExprClosed
-- On UpperName reduce production tyAppAux -> typeExprClosed
-- On Underscore reduce production tyAppAux -> typeExprClosed
-- On Type reduce production typeExpr -> typeExprClosed
-- On RParen reduce production typeExpr -> typeExprClosed
-- On RDoubleArrowEff reduce production typeExpr -> typeExprClosed
-- On RBracketUp reduce production typeExpr -> typeExprClosed
-- On RBracket reduce production typeExpr -> typeExprClosed
-- On RArrowEff reduce production typeExpr -> typeExprClosed
-- On Pipe reduce production typeExpr -> typeExprClosed
-- On Open reduce production typeExpr -> typeExprClosed
-- On LowerName reduce production tyAppAux -> typeExprClosed
-- On Let reduce production typeExpr -> typeExprClosed
-- On LParen reduce production tyAppAux -> typeExprClosed
-- On LBracketUp reduce production tyAppAux -> typeExprClosed
-- On LBracket reduce production tyAppAux -> typeExprClosed
-- On LArrowEff reduce production typeExprProtectedPermissive -> typeExprClosed
-- On Instance reduce production typeExpr -> typeExprClosed
-- On In reduce production typeExpr -> typeExprClosed
-- On Hash reduce production typeExpr -> typeExprClosed
-- On Foreign reduce production typeExpr -> typeExprClosed
-- On Exception reduce production typeExpr -> typeExprClosed
-- On Equal reduce production typeExpr -> typeExprClosed
-- On End reduce production typeExpr -> typeExprClosed
-- On EOF reduce production typeExpr -> typeExprClosed
-- On Comma reduce production typeExpr -> typeExprClosed
-- On Class reduce production typeExpr -> typeExprClosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprClosed

State 78:
## Known stack suffix:
## typeExpr
## LR(1) items:
separated_nonempty_list(Comma,typeExpr) -> typeExpr . [ RDoubleArrowEff RBracket RArrowEff ]
separated_nonempty_list(Comma,typeExpr) -> typeExpr . Comma separated_nonempty_list(Comma,typeExpr) [ RDoubleArrowEff RBracket RArrowEff ]
## Transitions:
-- On Comma shift to state 79
## Reductions:
-- On RDoubleArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr
-- On RBracket reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr
-- On RArrowEff reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr

State 79:
## Known stack suffix:
## typeExpr Comma
## LR(1) items:
separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma . separated_nonempty_list(Comma,typeExpr) [ RDoubleArrowEff RBracket RArrowEff ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 78
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Comma,typeExpr) shift to state 83
## Reductions:

State 80:
## Known stack suffix:
## tyAppAux
## LR(1) items:
tyApp -> tyAppAux . typeExprClosed [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## tyAppAux typeExprClosed
## LR(1) items:
tyApp -> tyAppAux typeExprClosed . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyApp -> tyAppAux typeExprClosed

State 82:
## Known stack suffix:
## tyApp
## LR(1) items:
tyAppAux -> tyApp . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExprNonStrictlyUnclosed -> tyApp . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Reductions:
-- On With reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On UpperName reduce production tyAppAux -> tyApp
-- On Underscore reduce production tyAppAux -> tyApp
-- On Type reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RParen reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RDoubleArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RBracketUp reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RBracket reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On RArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Pipe reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Open reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On LowerName reduce production tyAppAux -> tyApp
-- On Let reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On LParen reduce production tyAppAux -> tyApp
-- On LBracketUp reduce production tyAppAux -> tyApp
-- On LBracket reduce production tyAppAux -> tyApp
-- On LArrowEff reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Instance reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On In reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Hash reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Foreign reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Exception reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Equal reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On End reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On EOF reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Comma reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Class reduce production typeExprNonStrictlyUnclosed -> tyApp
-- On Arrow reduce production typeExprNonStrictlyUnclosed -> tyApp

State 83:
## Known stack suffix:
## typeExpr Comma separated_nonempty_list(Comma,typeExpr)
## LR(1) items:
separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr) . [ RDoubleArrowEff RBracket RArrowEff ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(Comma,typeExpr) -> typeExpr Comma separated_nonempty_list(Comma,typeExpr)

State 84:
## Known stack suffix:
## separated_nonempty_list(Comma,typeExpr)
## LR(1) items:
loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr) . [ RDoubleArrowEff RBracket RArrowEff ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(Comma,typeExpr)) -> separated_nonempty_list(Comma,typeExpr)

State 85:
## Known stack suffix:
## loption(separated_nonempty_list(Comma,typeExpr))
## LR(1) items:
eff -> loption(separated_nonempty_list(Comma,typeExpr)) . [ RDoubleArrowEff RBracket RArrowEff ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production eff -> loption(separated_nonempty_list(Comma,typeExpr))

State 86:
## Known stack suffix:
## typeExprProtectedPermissive LArrowEff eff
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff . RArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On RArrowEff shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## typeExprProtectedPermissive LArrowEff eff RArrowEff
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 88
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 88:
## Known stack suffix:
## typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive LArrowEff eff RArrowEff typeExpr

State 89:
## Known stack suffix:
## typeExprProtectedPermissive Arrow
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 90
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 90:
## Known stack suffix:
## typeExprProtectedPermissive Arrow typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> typeExprProtectedPermissive Arrow typeExpr

State 91:
## Known stack suffix:
## Forall nonempty_list(kind_and_name) Comma typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> Forall nonempty_list(kind_and_name) Comma typeExpr

State 92:
## Known stack suffix:
## kind_and_name
## LR(1) items:
nonempty_list(kind_and_name) -> kind_and_name . [ Equal Comma ]
nonempty_list(kind_and_name) -> kind_and_name . nonempty_list(kind_and_name) [ Equal Comma ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 93
-- On kind_and_name shift to state 92
## Reductions:
-- On Equal reduce production nonempty_list(kind_and_name) -> kind_and_name
-- On Comma reduce production nonempty_list(kind_and_name) -> kind_and_name

State 93:
## Known stack suffix:
## kind_and_name nonempty_list(kind_and_name)
## LR(1) items:
nonempty_list(kind_and_name) -> kind_and_name nonempty_list(kind_and_name) . [ Equal Comma ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(kind_and_name) -> kind_and_name nonempty_list(kind_and_name)

State 94:
## Known stack suffix:
## LBrace tyclass RBrace LDoubleArrowEff eff
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff . RDoubleArrowEff typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On RDoubleArrowEff shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 96
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 96:
## Known stack suffix:
## LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace LDoubleArrowEff eff RDoubleArrowEff typeExpr

State 97:
## Known stack suffix:
## LBrace tyclass RBrace DoubleArrow
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow . typeExpr [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 98
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 98:
## Known stack suffix:
## LBrace tyclass RBrace DoubleArrow typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> LBrace tyclass RBrace DoubleArrow typeExpr

State 99:
## Known stack suffix:
## LBracket eff
## LR(1) items:
typeExprClosed -> LBracket eff . RBracket [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On RBracket shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LBracket eff RBracket
## LR(1) items:
typeExprClosed -> LBracket eff RBracket . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> LBracket eff RBracket

State 101:
## Known stack suffix:
## typeExpr
## LR(1) items:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr . [ RBracketUp ]
separated_nonempty_list(Pipe,typeExpr) -> typeExpr . Pipe separated_nonempty_list(Pipe,typeExpr) [ RBracketUp ]
## Transitions:
-- On Pipe shift to state 102
## Reductions:
-- On RBracketUp reduce production separated_nonempty_list(Pipe,typeExpr) -> typeExpr

State 102:
## Known stack suffix:
## typeExpr Pipe
## LR(1) items:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe . separated_nonempty_list(Pipe,typeExpr) [ RBracketUp ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 101
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
-- On separated_nonempty_list(Pipe,typeExpr) shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## typeExpr Pipe separated_nonempty_list(Pipe,typeExpr)
## LR(1) items:
separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe separated_nonempty_list(Pipe,typeExpr) . [ RBracketUp ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(Pipe,typeExpr) -> typeExpr Pipe separated_nonempty_list(Pipe,typeExpr)

State 104:
## Known stack suffix:
## LBracketUp sum
## LR(1) items:
typeExprClosed -> LBracketUp sum . RBracketUp [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On RBracketUp shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## LBracketUp sum RBracketUp
## LR(1) items:
typeExprClosed -> LBracketUp sum RBracketUp . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> LBracketUp sum RBracketUp

State 106:
## Known stack suffix:
## separated_nonempty_list(Pipe,typeExpr)
## LR(1) items:
loption(separated_nonempty_list(Pipe,typeExpr)) -> separated_nonempty_list(Pipe,typeExpr) . [ RBracketUp ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(Pipe,typeExpr)) -> separated_nonempty_list(Pipe,typeExpr)

State 107:
## Known stack suffix:
## loption(separated_nonempty_list(Pipe,typeExpr))
## LR(1) items:
sum -> loption(separated_nonempty_list(Pipe,typeExpr)) . [ RBracketUp ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sum -> loption(separated_nonempty_list(Pipe,typeExpr))

State 108:
## Known stack suffix:
## LParen typeExpr
## LR(1) items:
typeExprClosed -> LParen typeExpr . RParen [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
-- On RParen shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## LParen typeExpr RParen
## LR(1) items:
typeExprClosed -> LParen typeExpr RParen . [ With UpperName Underscore Type RParen RDoubleArrowEff RBracketUp RBracket RBrace RArrowEff Pipe Open LowerName Let LParen LBracketUp LBracket LArrowEff Instance In Hash Foreign Exception Equal End EOF Comma Class Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprClosed -> LParen typeExpr RParen

State 110:
## Known stack suffix:
## Lambda nonempty_list(kind_and_name) Comma typeExpr
## LR(1) items:
typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr . [ With Type RParen RDoubleArrowEff RBracketUp RBracket RArrowEff Pipe Open Let Instance In Hash Foreign Exception Equal End EOF Comma Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprStrictlyUnclosed -> Lambda nonempty_list(kind_and_name) Comma typeExpr

State 111:
## Known stack suffix:
## Type Alias newUpperName Equal typeExpr
## LR(1) items:
typeAlias -> Type Alias newUpperName Equal typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeAlias -> Type Alias newUpperName Equal typeExpr

State 112:
## Known stack suffix:
## Type newUpperName
## LR(1) items:
body -> Type newUpperName . kindopt [ Type Open Let Instance Foreign Exception EOF Class ]
datatype -> Type newUpperName . list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On Colon shift to state 113
-- On list(kind_and_name) shift to state 115
-- On kindopt shift to state 127
-- On kind_and_name shift to state 128
## Reductions:
-- On Type reduce production kindopt ->
-- On Open reduce production kindopt ->
-- On Let reduce production kindopt ->
-- On Instance reduce production kindopt ->
-- On Foreign reduce production kindopt ->
-- On Exception reduce production kindopt ->
-- On Equal reduce production list(kind_and_name) ->
-- On EOF reduce production kindopt ->
-- On Class reduce production kindopt ->

State 113:
## Known stack suffix:
## Colon
## LR(1) items:
kindopt -> Colon . kind [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Star shift to state 25
-- On LParen shift to state 26
-- On Eff shift to state 27
-- On Caret shift to state 28
-- On kindUnclosed shift to state 29
-- On kindClosed shift to state 30
-- On kind shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## Colon kind
## LR(1) items:
kindopt -> Colon kind . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kindopt -> Colon kind

State 115:
## Known stack suffix:
## Type newUpperName list(kind_and_name)
## LR(1) items:
datatype -> Type newUpperName list(kind_and_name) . Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Equal shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## Type newUpperName list(kind_and_name) Equal
## LR(1) items:
datatype -> Type newUpperName list(kind_and_name) Equal . option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 118
## Reductions:
-- On UpperName reduce production option(Pipe) ->

State 117:
## Known stack suffix:
## Pipe
## LR(1) items:
option(Pipe) -> Pipe . [ UpperName Underscore LowerName LParen ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(Pipe) -> Pipe

State 118:
## Known stack suffix:
## Type newUpperName list(kind_and_name) Equal option(Pipe)
## LR(1) items:
datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) . separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On variant shift to state 119
-- On separated_nonempty_list(Pipe,variant) shift to state 126
-- On newUpperName shift to state 122
## Reductions:

State 119:
## Known stack suffix:
## variant
## LR(1) items:
separated_nonempty_list(Pipe,variant) -> variant . [ Type Open Let Instance Foreign Exception EOF Class ]
separated_nonempty_list(Pipe,variant) -> variant . Pipe separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Pipe shift to state 120
## Reductions:
-- On Type reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Open reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Let reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Instance reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Foreign reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Exception reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On EOF reduce production separated_nonempty_list(Pipe,variant) -> variant
-- On Class reduce production separated_nonempty_list(Pipe,variant) -> variant

State 120:
## Known stack suffix:
## variant Pipe
## LR(1) items:
separated_nonempty_list(Pipe,variant) -> variant Pipe . separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On variant shift to state 119
-- On separated_nonempty_list(Pipe,variant) shift to state 121
-- On newUpperName shift to state 122
## Reductions:

State 121:
## Known stack suffix:
## variant Pipe separated_nonempty_list(Pipe,variant)
## LR(1) items:
separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant) . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(Pipe,variant) -> variant Pipe separated_nonempty_list(Pipe,variant)

State 122:
## Known stack suffix:
## newUpperName
## LR(1) items:
variant -> newUpperName . list(typeExprClosed) [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 123
-- On list(typeExprClosed) shift to state 125
## Reductions:
-- On Type reduce production list(typeExprClosed) ->
-- On Pipe reduce production list(typeExprClosed) ->
-- On Open reduce production list(typeExprClosed) ->
-- On Let reduce production list(typeExprClosed) ->
-- On Instance reduce production list(typeExprClosed) ->
-- On Foreign reduce production list(typeExprClosed) ->
-- On Exception reduce production list(typeExprClosed) ->
-- On EOF reduce production list(typeExprClosed) ->
-- On Class reduce production list(typeExprClosed) ->

State 123:
## Known stack suffix:
## typeExprClosed
## LR(1) items:
list(typeExprClosed) -> typeExprClosed . list(typeExprClosed) [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 123
-- On list(typeExprClosed) shift to state 124
## Reductions:
-- On Type reduce production list(typeExprClosed) ->
-- On Pipe reduce production list(typeExprClosed) ->
-- On Open reduce production list(typeExprClosed) ->
-- On Let reduce production list(typeExprClosed) ->
-- On Instance reduce production list(typeExprClosed) ->
-- On Foreign reduce production list(typeExprClosed) ->
-- On Exception reduce production list(typeExprClosed) ->
-- On EOF reduce production list(typeExprClosed) ->
-- On Class reduce production list(typeExprClosed) ->

State 124:
## Known stack suffix:
## typeExprClosed list(typeExprClosed)
## LR(1) items:
list(typeExprClosed) -> typeExprClosed list(typeExprClosed) . [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(typeExprClosed) -> typeExprClosed list(typeExprClosed)

State 125:
## Known stack suffix:
## newUpperName list(typeExprClosed)
## LR(1) items:
variant -> newUpperName list(typeExprClosed) . [ Type Pipe Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variant -> newUpperName list(typeExprClosed)

State 126:
## Known stack suffix:
## Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)
## LR(1) items:
datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> Type newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant)

State 127:
## Known stack suffix:
## Type newUpperName kindopt
## LR(1) items:
body -> Type newUpperName kindopt . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Type newUpperName kindopt

State 128:
## Known stack suffix:
## kind_and_name
## LR(1) items:
list(kind_and_name) -> kind_and_name . list(kind_and_name) [ Equal ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On list(kind_and_name) shift to state 129
-- On kind_and_name shift to state 128
## Reductions:
-- On Equal reduce production list(kind_and_name) ->

State 129:
## Known stack suffix:
## kind_and_name list(kind_and_name)
## LR(1) items:
list(kind_and_name) -> kind_and_name list(kind_and_name) . [ Equal ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(kind_and_name) -> kind_and_name list(kind_and_name)

State 130:
## Known stack suffix:
## Open
## LR(1) items:
body -> Open . import_module [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## Open import_module
## LR(1) items:
body -> Open import_module . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Open import_module

State 132:
## Known stack suffix:
## Let
## LR(1) items:
let_case -> Let . LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Rec LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let . Rec Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Underscore shift to state 133
-- On Rec shift to state 271
-- On LowerName shift to state 276
## Reductions:

State 133:
## Known stack suffix:
## Let Underscore
## LR(1) items:
let_case -> Let Underscore . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 268
-- On arg shift to state 269
## Reductions:

State 134:
## Known stack suffix:
## LQMarkParen
## LR(1) items:
arg -> LQMarkParen . LowerName Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LQMarkParen . Underscore Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Underscore shift to state 135
-- On LowerName shift to state 139
## Reductions:

State 135:
## Known stack suffix:
## LQMarkParen Underscore
## LR(1) items:
arg -> LQMarkParen Underscore . Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Colon shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## LQMarkParen Underscore Colon
## LR(1) items:
arg -> LQMarkParen Underscore Colon . tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## LQMarkParen Underscore Colon tyclass
## LR(1) items:
arg -> LQMarkParen Underscore Colon tyclass . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On RParen shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LQMarkParen Underscore Colon tyclass RParen
## LR(1) items:
arg -> LQMarkParen Underscore Colon tyclass RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> LQMarkParen Underscore Colon tyclass RParen

State 139:
## Known stack suffix:
## LQMarkParen LowerName
## LR(1) items:
arg -> LQMarkParen LowerName . Colon tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Colon shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## LQMarkParen LowerName Colon
## LR(1) items:
arg -> LQMarkParen LowerName Colon . tyclass RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 47
-- On tyclass shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## LQMarkParen LowerName Colon tyclass
## LR(1) items:
arg -> LQMarkParen LowerName Colon tyclass . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On RParen shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LQMarkParen LowerName Colon tyclass RParen
## LR(1) items:
arg -> LQMarkParen LowerName Colon tyclass RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> LQMarkParen LowerName Colon tyclass RParen

State 143:
## Known stack suffix:
## LParen
## LR(1) items:
arg -> LParen . LowerName Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LParen . Underscore Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
arg -> LParen . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Underscore shift to state 144
-- On RParen shift to state 148
-- On LowerName shift to state 149
## Reductions:

State 144:
## Known stack suffix:
## LParen Underscore
## LR(1) items:
arg -> LParen Underscore . Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Colon shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## LParen Underscore Colon
## LR(1) items:
arg -> LParen Underscore Colon . typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 146
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 146:
## Known stack suffix:
## LParen Underscore Colon typeExpr
## LR(1) items:
arg -> LParen Underscore Colon typeExpr . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On RParen shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LParen Underscore Colon typeExpr RParen
## LR(1) items:
arg -> LParen Underscore Colon typeExpr RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> LParen Underscore Colon typeExpr RParen

State 148:
## Known stack suffix:
## LParen RParen
## LR(1) items:
arg -> LParen RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> LParen RParen

State 149:
## Known stack suffix:
## LParen LowerName
## LR(1) items:
arg -> LParen LowerName . Colon typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On Colon shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## LParen LowerName Colon
## LR(1) items:
arg -> LParen LowerName Colon . typeExpr RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 151
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 151:
## Known stack suffix:
## LParen LowerName Colon typeExpr
## LR(1) items:
arg -> LParen LowerName Colon typeExpr . RParen [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
-- On RParen shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## LParen LowerName Colon typeExpr RParen
## LR(1) items:
arg -> LParen LowerName Colon typeExpr RParen . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> LParen LowerName Colon typeExpr RParen

State 153:
## Known stack suffix:
## Equal
## LR(1) items:
let_aux -> Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 258
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 154:
## Known stack suffix:
## UpperName
## LR(1) items:
lowerName_aux -> UpperName . Dot lowerName_aux [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName . [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName . Dot upperName_aux [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On Dot shift to state 155
## Reductions:
-- On With reduce production upperName_aux -> UpperName
-- On UpperName reduce production upperName_aux -> UpperName
-- On Underscore reduce production upperName_aux -> UpperName
-- On Type reduce production upperName_aux -> UpperName
-- On Try reduce production upperName_aux -> UpperName
-- On String reduce production upperName_aux -> UpperName
-- On Semicolon reduce production upperName_aux -> UpperName
-- On RParen reduce production upperName_aux -> UpperName
-- On Pipe reduce production upperName_aux -> UpperName
-- On Open reduce production upperName_aux -> UpperName
-- On Match reduce production upperName_aux -> UpperName
-- On LowerName reduce production upperName_aux -> UpperName
-- On Let reduce production upperName_aux -> UpperName
-- On LQMarkBracket reduce production upperName_aux -> UpperName
-- On LParen reduce production upperName_aux -> UpperName
-- On LBracketUp reduce production upperName_aux -> UpperName
-- On LBracket reduce production upperName_aux -> UpperName
-- On Int reduce production upperName_aux -> UpperName
-- On Instance reduce production upperName_aux -> UpperName
-- On In reduce production upperName_aux -> UpperName
-- On Foreign reduce production upperName_aux -> UpperName
-- On Float reduce production upperName_aux -> UpperName
-- On Exception reduce production upperName_aux -> UpperName
-- On End reduce production upperName_aux -> UpperName
-- On EOF reduce production upperName_aux -> UpperName
-- On Colon reduce production upperName_aux -> UpperName
-- On Class reduce production upperName_aux -> UpperName
-- On Char reduce production upperName_aux -> UpperName

State 155:
## Known stack suffix:
## UpperName Dot
## LR(1) items:
lowerName_aux -> UpperName Dot . lowerName_aux [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
upperName_aux -> UpperName Dot . upperName_aux [ With UpperName Underscore Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracketUp LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On LowerName shift to state 156
-- On upperName_aux shift to state 4
-- On lowerName_aux shift to state 157
## Reductions:

State 156:
## Known stack suffix:
## LowerName
## LR(1) items:
lowerName_aux -> LowerName . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lowerName_aux -> LowerName

State 157:
## Known stack suffix:
## UpperName Dot lowerName_aux
## LR(1) items:
lowerName_aux -> UpperName Dot lowerName_aux . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lowerName_aux -> UpperName Dot lowerName_aux

State 158:
## Known stack suffix:
## Try
## LR(1) items:
termClosed -> Try . term With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 253
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 159:
## Known stack suffix:
## String
## LR(1) items:
termClosed -> String . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> String

State 160:
## Known stack suffix:
## Match
## LR(1) items:
termClosed -> Match . term With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 222
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 161:
## Known stack suffix:
## Lambda
## LR(1) items:
termStrictlyUnclosed -> Lambda . nonempty_args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On nonempty_args(lambda_aux) shift to state 162
-- On kind_and_name_in_value shift to state 163
-- On arg shift to state 164
## Reductions:

State 162:
## Known stack suffix:
## Lambda nonempty_args(lambda_aux)
## LR(1) items:
termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termStrictlyUnclosed -> Lambda nonempty_args(lambda_aux)

State 163:
## Known stack suffix:
## kind_and_name_in_value
## LR(1) items:
arg -> kind_and_name_in_value . [ LQMarkParen LParen LBrace Equal Colon Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> kind_and_name_in_value

State 164:
## Known stack suffix:
## arg
## LR(1) items:
nonempty_args(lambda_aux) -> arg . args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Colon shift to state 165
-- On Arrow shift to state 216
-- On lambda_aux shift to state 218
-- On kind_and_name_in_value shift to state 163
-- On args(lambda_aux) shift to state 219
-- On arg shift to state 220
## Reductions:

State 165:
## Known stack suffix:
## Colon
## LR(1) items:
lambda_aux -> Colon . typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
lambda_aux -> Colon . typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprProtectedPermissive shift to state 166
-- On typeExprNonStrictlyUnclosed shift to state 212
-- On typeExprClosed shift to state 213
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 166:
## Known stack suffix:
## Colon typeExprProtectedPermissive
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive . Hash typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
lambda_aux -> Colon typeExprProtectedPermissive . Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Hash shift to state 167
-- On Arrow shift to state 214
## Reductions:

State 167:
## Known stack suffix:
## Colon typeExprProtectedPermissive Hash
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Hash . typeExprProtectedPermissive Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprProtectedPermissive shift to state 168
-- On typeExprNonStrictlyUnclosed shift to state 212
-- On typeExprClosed shift to state 213
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 168:
## Known stack suffix:
## Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive . Arrow term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Arrow shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 211
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 170:
## Known stack suffix:
## LParen
## LR(1) items:
termClosed -> LParen . term RParen [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 209
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 171:
## Known stack suffix:
## Int
## LR(1) items:
termClosed -> Int . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> Int

State 172:
## Known stack suffix:
## Float
## LR(1) items:
termClosed -> Float . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> Float

State 173:
## Known stack suffix:
## Fail
## LR(1) items:
termNonStrictlyUnclosed -> Fail . LBracket typeExpr RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
-- On LBracket shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## Fail LBracket
## LR(1) items:
termNonStrictlyUnclosed -> Fail LBracket . typeExpr RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 175
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 175:
## Known stack suffix:
## Fail LBracket typeExpr
## LR(1) items:
termNonStrictlyUnclosed -> Fail LBracket typeExpr . RBracket termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
-- On RBracket shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## Fail LBracket typeExpr RBracket
## LR(1) items:
termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket . termClosed [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termClosed shift to state 179
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
## Reductions:

State 177:
## Known stack suffix:
## Char
## LR(1) items:
termClosed -> Char . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> Char

State 178:
## Known stack suffix:
## upperName
## LR(1) items:
termClosed -> upperName . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> upperName

State 179:
## Known stack suffix:
## Fail LBracket typeExpr RBracket termClosed
## LR(1) items:
termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed . [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termNonStrictlyUnclosed -> Fail LBracket typeExpr RBracket termClosed

State 180:
## Known stack suffix:
## lowerName_aux
## LR(1) items:
lowerName -> lowerName_aux . [ With UpperName Type Try String Semicolon RParen RBracket Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lowerName -> lowerName_aux

State 181:
## Known stack suffix:
## lowerName
## LR(1) items:
termClosed -> lowerName . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> lowerName

State 182:
## Known stack suffix:
## termUnclosed
## LR(1) items:
term -> termUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> termUnclosed

State 183:
## Known stack suffix:
## termStrictlyUnclosed
## LR(1) items:
termUnclosed -> termStrictlyUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termUnclosed -> termStrictlyUnclosed

State 184:
## Known stack suffix:
## termProtectedPermissive
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive . Semicolon term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive . Colon typeExpr Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive . Colon typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Semicolon shift to state 185
-- On Colon shift to state 205
## Reductions:

State 185:
## Known stack suffix:
## termProtectedPermissive Semicolon
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Semicolon . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 188
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 186:
## Known stack suffix:
## termNonStrictlyUnclosed
## LR(1) items:
termProtectedPermissive -> termNonStrictlyUnclosed . [ Semicolon Colon ]
termUnclosed -> termNonStrictlyUnclosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Reductions:
-- On With reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Type reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Semicolon reduce production termProtectedPermissive -> termNonStrictlyUnclosed
-- On RParen reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Pipe reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Open reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Let reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Instance reduce production termUnclosed -> termNonStrictlyUnclosed
-- On In reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Foreign reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Exception reduce production termUnclosed -> termNonStrictlyUnclosed
-- On End reduce production termUnclosed -> termNonStrictlyUnclosed
-- On EOF reduce production termUnclosed -> termNonStrictlyUnclosed
-- On Colon reduce production termProtectedPermissive -> termNonStrictlyUnclosed
-- On Class reduce production termUnclosed -> termNonStrictlyUnclosed

State 187:
## Known stack suffix:
## termClosed
## LR(1) items:
appAux -> termClosed . [ UpperName Try String Match LowerName LQMarkBracket LParen LBracket Int Float Char ]
term -> termClosed . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termProtectedPermissive -> termClosed . [ Semicolon Colon ]
## Transitions:
## Reductions:
-- On With reduce production term -> termClosed
-- On UpperName reduce production appAux -> termClosed
-- On Type reduce production term -> termClosed
-- On Try reduce production appAux -> termClosed
-- On String reduce production appAux -> termClosed
-- On Semicolon reduce production termProtectedPermissive -> termClosed
-- On RParen reduce production term -> termClosed
-- On Pipe reduce production term -> termClosed
-- On Open reduce production term -> termClosed
-- On Match reduce production appAux -> termClosed
-- On LowerName reduce production appAux -> termClosed
-- On Let reduce production term -> termClosed
-- On LQMarkBracket reduce production appAux -> termClosed
-- On LParen reduce production appAux -> termClosed
-- On LBracket reduce production appAux -> termClosed
-- On Int reduce production appAux -> termClosed
-- On Instance reduce production term -> termClosed
-- On In reduce production term -> termClosed
-- On Foreign reduce production term -> termClosed
-- On Float reduce production appAux -> termClosed
-- On Exception reduce production term -> termClosed
-- On End reduce production term -> termClosed
-- On EOF reduce production term -> termClosed
-- On Colon reduce production termProtectedPermissive -> termClosed
-- On Class reduce production term -> termClosed
-- On Char reduce production appAux -> termClosed

State 188:
## Known stack suffix:
## termProtectedPermissive Semicolon term
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Semicolon term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termStrictlyUnclosed -> termProtectedPermissive Semicolon term

State 189:
## Known stack suffix:
## let_case
## LR(1) items:
termStrictlyUnclosed -> let_case . In term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On In shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## let_case In
## LR(1) items:
termStrictlyUnclosed -> let_case In . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 191
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 191:
## Known stack suffix:
## let_case In term
## LR(1) items:
termStrictlyUnclosed -> let_case In term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termStrictlyUnclosed -> let_case In term

State 192:
## Known stack suffix:
## appAux
## LR(1) items:
app -> appAux . LBracket typeExpr RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
app -> appAux . termClosed [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
app -> appAux . LQMarkBracket tyclassAppArg RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On LQMarkBracket shift to state 193
-- On LParen shift to state 170
-- On LBracket shift to state 200
-- On Int shift to state 171
-- On Float shift to state 172
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termClosed shift to state 203
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
## Reductions:

State 193:
## Known stack suffix:
## appAux LQMarkBracket
## LR(1) items:
app -> appAux LQMarkBracket . tyclassAppArg RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 154
-- On LowerName shift to state 156
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 196
-- On tyclassAppArg shift to state 197
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 199
## Reductions:

State 194:
## Known stack suffix:
## upperName
## LR(1) items:
tyclassInstance -> upperName . nonempty_list(typeExprClosed) [ Type RBracket Open Let Instance Exception Equal EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 61
-- On nonempty_list(typeExprClosed) shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## upperName nonempty_list(typeExprClosed)
## LR(1) items:
tyclassInstance -> upperName nonempty_list(typeExprClosed) . [ Type RBracket Open Let Instance Exception Equal EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyclassInstance -> upperName nonempty_list(typeExprClosed)

State 196:
## Known stack suffix:
## tyclassInstance
## LR(1) items:
tyclassAppArg -> tyclassInstance . [ RBracket ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyclassAppArg -> tyclassInstance

State 197:
## Known stack suffix:
## appAux LQMarkBracket tyclassAppArg
## LR(1) items:
app -> appAux LQMarkBracket tyclassAppArg . RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On RBracket shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## appAux LQMarkBracket tyclassAppArg RBracket
## LR(1) items:
app -> appAux LQMarkBracket tyclassAppArg RBracket . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app -> appAux LQMarkBracket tyclassAppArg RBracket

State 199:
## Known stack suffix:
## lowerName
## LR(1) items:
tyclassAppArg -> lowerName . [ RBracket ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tyclassAppArg -> lowerName

State 200:
## Known stack suffix:
## appAux LBracket
## LR(1) items:
app -> appAux LBracket . typeExpr RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 201
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 201:
## Known stack suffix:
## appAux LBracket typeExpr
## LR(1) items:
app -> appAux LBracket typeExpr . RBracket [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On RBracket shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## appAux LBracket typeExpr RBracket
## LR(1) items:
app -> appAux LBracket typeExpr RBracket . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app -> appAux LBracket typeExpr RBracket

State 203:
## Known stack suffix:
## appAux termClosed
## LR(1) items:
app -> appAux termClosed . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app -> appAux termClosed

State 204:
## Known stack suffix:
## app
## LR(1) items:
appAux -> app . [ UpperName Try String Match LowerName LQMarkBracket LParen LBracket Int Float Char ]
termNonStrictlyUnclosed -> app . [ With Type Semicolon RParen Pipe Open Let Instance In Foreign Exception End EOF Colon Class ]
## Transitions:
## Reductions:
-- On With reduce production termNonStrictlyUnclosed -> app
-- On UpperName reduce production appAux -> app
-- On Type reduce production termNonStrictlyUnclosed -> app
-- On Try reduce production appAux -> app
-- On String reduce production appAux -> app
-- On Semicolon reduce production termNonStrictlyUnclosed -> app
-- On RParen reduce production termNonStrictlyUnclosed -> app
-- On Pipe reduce production termNonStrictlyUnclosed -> app
-- On Open reduce production termNonStrictlyUnclosed -> app
-- On Match reduce production appAux -> app
-- On LowerName reduce production appAux -> app
-- On Let reduce production termNonStrictlyUnclosed -> app
-- On LQMarkBracket reduce production appAux -> app
-- On LParen reduce production appAux -> app
-- On LBracket reduce production appAux -> app
-- On Int reduce production appAux -> app
-- On Instance reduce production termNonStrictlyUnclosed -> app
-- On In reduce production termNonStrictlyUnclosed -> app
-- On Foreign reduce production termNonStrictlyUnclosed -> app
-- On Float reduce production appAux -> app
-- On Exception reduce production termNonStrictlyUnclosed -> app
-- On End reduce production termNonStrictlyUnclosed -> app
-- On EOF reduce production termNonStrictlyUnclosed -> app
-- On Colon reduce production termNonStrictlyUnclosed -> app
-- On Class reduce production termNonStrictlyUnclosed -> app
-- On Char reduce production appAux -> app

State 205:
## Known stack suffix:
## termProtectedPermissive Colon
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Colon . typeExpr Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive Colon . typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 206
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 206:
## Known stack suffix:
## termProtectedPermissive Colon typeExpr
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr . Hash typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Hash shift to state 207
## Reductions:
-- On With reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Type reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On RParen reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Pipe reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Open reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Let reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Instance reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On In reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Foreign reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Exception reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On End reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On EOF reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr
-- On Class reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr

State 207:
## Known stack suffix:
## termProtectedPermissive Colon typeExpr Hash
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash . typeExpr [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 208
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 208:
## Known stack suffix:
## termProtectedPermissive Colon typeExpr Hash typeExpr
## LR(1) items:
termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termStrictlyUnclosed -> termProtectedPermissive Colon typeExpr Hash typeExpr

State 209:
## Known stack suffix:
## LParen term
## LR(1) items:
termClosed -> LParen term . RParen [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On RParen shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LParen term RParen
## LR(1) items:
termClosed -> LParen term RParen . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> LParen term RParen

State 211:
## Known stack suffix:
## Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lambda_aux -> Colon typeExprProtectedPermissive Hash typeExprProtectedPermissive Arrow term

State 212:
## Known stack suffix:
## typeExprNonStrictlyUnclosed
## LR(1) items:
typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed . [ Hash Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeExprProtectedPermissive -> typeExprNonStrictlyUnclosed

State 213:
## Known stack suffix:
## typeExprClosed
## LR(1) items:
tyAppAux -> typeExprClosed . [ UpperName Underscore LowerName LParen LBracketUp LBracket ]
typeExprProtectedPermissive -> typeExprClosed . [ Hash Arrow ]
## Transitions:
## Reductions:
-- On UpperName reduce production tyAppAux -> typeExprClosed
-- On Underscore reduce production tyAppAux -> typeExprClosed
-- On LowerName reduce production tyAppAux -> typeExprClosed
-- On LParen reduce production tyAppAux -> typeExprClosed
-- On LBracketUp reduce production tyAppAux -> typeExprClosed
-- On LBracket reduce production tyAppAux -> typeExprClosed
-- On Hash reduce production typeExprProtectedPermissive -> typeExprClosed
-- On Arrow reduce production typeExprProtectedPermissive -> typeExprClosed

State 214:
## Known stack suffix:
## Colon typeExprProtectedPermissive Arrow
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 215
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 215:
## Known stack suffix:
## Colon typeExprProtectedPermissive Arrow term
## LR(1) items:
lambda_aux -> Colon typeExprProtectedPermissive Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lambda_aux -> Colon typeExprProtectedPermissive Arrow term

State 216:
## Known stack suffix:
## Arrow
## LR(1) items:
lambda_aux -> Arrow . term [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 217
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 217:
## Known stack suffix:
## Arrow term
## LR(1) items:
lambda_aux -> Arrow term . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lambda_aux -> Arrow term

State 218:
## Known stack suffix:
## lambda_aux
## LR(1) items:
args(lambda_aux) -> lambda_aux . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args(lambda_aux) -> lambda_aux

State 219:
## Known stack suffix:
## arg args(lambda_aux)
## LR(1) items:
nonempty_args(lambda_aux) -> arg args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_args(lambda_aux) -> arg args(lambda_aux)

State 220:
## Known stack suffix:
## arg
## LR(1) items:
args(lambda_aux) -> arg . args(lambda_aux) [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Colon shift to state 165
-- On Arrow shift to state 216
-- On lambda_aux shift to state 218
-- On kind_and_name_in_value shift to state 163
-- On args(lambda_aux) shift to state 221
-- On arg shift to state 220
## Reductions:

State 221:
## Known stack suffix:
## arg args(lambda_aux)
## LR(1) items:
args(lambda_aux) -> arg args(lambda_aux) . [ With Type RParen Pipe Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args(lambda_aux) -> arg args(lambda_aux)

State 222:
## Known stack suffix:
## Match term
## LR(1) items:
termClosed -> Match term . With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On With shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## Match term With
## LR(1) items:
termClosed -> Match term With . option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 224
## Reductions:
-- On UpperName reduce production option(Pipe) ->
-- On Underscore reduce production option(Pipe) ->
-- On LowerName reduce production option(Pipe) ->
-- On LParen reduce production option(Pipe) ->

State 224:
## Known stack suffix:
## Match term With option(Pipe)
## LR(1) items:
termClosed -> Match term With option(Pipe) . separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 245
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250
## Reductions:

State 225:
## Known stack suffix:
## Underscore
## LR(1) items:
patClosed -> Underscore . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patClosed -> Underscore

State 226:
## Known stack suffix:
## LowerName
## LR(1) items:
patClosed -> LowerName . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patClosed -> LowerName

State 227:
## Known stack suffix:
## LParen
## LR(1) items:
patClosed -> LParen . pat RParen [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 243
## Reductions:

State 228:
## Known stack suffix:
## upperName
## LR(1) items:
patClosed -> upperName . [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> upperName . nonempty_list(patClosed) [ RParen Pipe As Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 229
-- On patClosed shift to state 230
-- On nonempty_list(patClosed) shift to state 232
## Reductions:
-- On RParen reduce production patClosed -> upperName
-- On Pipe reduce production patClosed -> upperName
-- On As reduce production patClosed -> upperName
-- On Arrow reduce production patClosed -> upperName

State 229:
## Known stack suffix:
## upperName
## LR(1) items:
patClosed -> upperName . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patClosed -> upperName

State 230:
## Known stack suffix:
## patClosed
## LR(1) items:
nonempty_list(patClosed) -> patClosed . [ RParen Pipe As Arrow ]
nonempty_list(patClosed) -> patClosed . nonempty_list(patClosed) [ RParen Pipe As Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 229
-- On patClosed shift to state 230
-- On nonempty_list(patClosed) shift to state 231
## Reductions:
-- On RParen reduce production nonempty_list(patClosed) -> patClosed
-- On Pipe reduce production nonempty_list(patClosed) -> patClosed
-- On As reduce production nonempty_list(patClosed) -> patClosed
-- On Arrow reduce production nonempty_list(patClosed) -> patClosed

State 231:
## Known stack suffix:
## patClosed nonempty_list(patClosed)
## LR(1) items:
nonempty_list(patClosed) -> patClosed nonempty_list(patClosed) . [ RParen Pipe As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(patClosed) -> patClosed nonempty_list(patClosed)

State 232:
## Known stack suffix:
## upperName nonempty_list(patClosed)
## LR(1) items:
patNonStrictlyUnclosed -> upperName nonempty_list(patClosed) . [ RParen Pipe As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patNonStrictlyUnclosed -> upperName nonempty_list(patClosed)

State 233:
## Known stack suffix:
## patUnclosed
## LR(1) items:
pat -> patUnclosed . [ RParen Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> patUnclosed

State 234:
## Known stack suffix:
## patStrictlyUnclosed
## LR(1) items:
patUnclosed -> patStrictlyUnclosed . [ RParen Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patUnclosed -> patStrictlyUnclosed

State 235:
## Known stack suffix:
## patProtectedPermissive
## LR(1) items:
patNonStrictlyUnclosed -> patProtectedPermissive . As LowerName [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> patProtectedPermissive . As Underscore [ RParen Pipe As Arrow ]
patStrictlyUnclosed -> patProtectedPermissive . Pipe pat [ RParen Arrow ]
## Transitions:
-- On Pipe shift to state 236
-- On As shift to state 240
## Reductions:

State 236:
## Known stack suffix:
## patProtectedPermissive Pipe
## LR(1) items:
patStrictlyUnclosed -> patProtectedPermissive Pipe . pat [ RParen Arrow ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 239
## Reductions:

State 237:
## Known stack suffix:
## patNonStrictlyUnclosed
## LR(1) items:
patProtectedPermissive -> patNonStrictlyUnclosed . [ Pipe As ]
patUnclosed -> patNonStrictlyUnclosed . [ RParen Arrow ]
## Transitions:
## Reductions:
-- On RParen reduce production patUnclosed -> patNonStrictlyUnclosed
-- On Pipe reduce production patProtectedPermissive -> patNonStrictlyUnclosed
-- On As reduce production patProtectedPermissive -> patNonStrictlyUnclosed
-- On Arrow reduce production patUnclosed -> patNonStrictlyUnclosed

State 238:
## Known stack suffix:
## patClosed
## LR(1) items:
pat -> patClosed . [ RParen Arrow ]
patProtectedPermissive -> patClosed . [ Pipe As ]
## Transitions:
## Reductions:
-- On RParen reduce production pat -> patClosed
-- On Pipe reduce production patProtectedPermissive -> patClosed
-- On As reduce production patProtectedPermissive -> patClosed
-- On Arrow reduce production pat -> patClosed

State 239:
## Known stack suffix:
## patProtectedPermissive Pipe pat
## LR(1) items:
patStrictlyUnclosed -> patProtectedPermissive Pipe pat . [ RParen Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patStrictlyUnclosed -> patProtectedPermissive Pipe pat

State 240:
## Known stack suffix:
## patProtectedPermissive As
## LR(1) items:
patNonStrictlyUnclosed -> patProtectedPermissive As . LowerName [ RParen Pipe As Arrow ]
patNonStrictlyUnclosed -> patProtectedPermissive As . Underscore [ RParen Pipe As Arrow ]
## Transitions:
-- On Underscore shift to state 241
-- On LowerName shift to state 242
## Reductions:

State 241:
## Known stack suffix:
## patProtectedPermissive As Underscore
## LR(1) items:
patNonStrictlyUnclosed -> patProtectedPermissive As Underscore . [ RParen Pipe As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patNonStrictlyUnclosed -> patProtectedPermissive As Underscore

State 242:
## Known stack suffix:
## patProtectedPermissive As LowerName
## LR(1) items:
patNonStrictlyUnclosed -> patProtectedPermissive As LowerName . [ RParen Pipe As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patNonStrictlyUnclosed -> patProtectedPermissive As LowerName

State 243:
## Known stack suffix:
## LParen pat
## LR(1) items:
patClosed -> LParen pat . RParen [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
-- On RParen shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## LParen pat RParen
## LR(1) items:
patClosed -> LParen pat RParen . [ UpperName Underscore RParen Pipe LowerName LParen As Arrow ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patClosed -> LParen pat RParen

State 245:
## Known stack suffix:
## Match term With option(Pipe) separated_nonempty_list(Pipe,pattern)
## LR(1) items:
termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) . End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On End shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
## LR(1) items:
termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> Match term With option(Pipe) separated_nonempty_list(Pipe,pattern) End

State 247:
## Known stack suffix:
## pattern
## LR(1) items:
separated_nonempty_list(Pipe,pattern) -> pattern . [ End ]
separated_nonempty_list(Pipe,pattern) -> pattern . Pipe separated_nonempty_list(Pipe,pattern) [ End ]
## Transitions:
-- On Pipe shift to state 248
## Reductions:
-- On End reduce production separated_nonempty_list(Pipe,pattern) -> pattern

State 248:
## Known stack suffix:
## pattern Pipe
## LR(1) items:
separated_nonempty_list(Pipe,pattern) -> pattern Pipe . separated_nonempty_list(Pipe,pattern) [ End ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 249
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250
## Reductions:

State 249:
## Known stack suffix:
## pattern Pipe separated_nonempty_list(Pipe,pattern)
## LR(1) items:
separated_nonempty_list(Pipe,pattern) -> pattern Pipe separated_nonempty_list(Pipe,pattern) . [ End ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(Pipe,pattern) -> pattern Pipe separated_nonempty_list(Pipe,pattern)

State 250:
## Known stack suffix:
## pat
## LR(1) items:
pattern -> pat . Arrow term [ Pipe End ]
## Transitions:
-- On Arrow shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## pat Arrow
## LR(1) items:
pattern -> pat Arrow . term [ Pipe End ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 252
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 252:
## Known stack suffix:
## pat Arrow term
## LR(1) items:
pattern -> pat Arrow term . [ Pipe End ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pat Arrow term

State 253:
## Known stack suffix:
## Try term
## LR(1) items:
termClosed -> Try term . With option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On With shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## Try term With
## LR(1) items:
termClosed -> Try term With . option(Pipe) separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On Pipe shift to state 117
-- On option(Pipe) shift to state 255
## Reductions:
-- On UpperName reduce production option(Pipe) ->
-- On Underscore reduce production option(Pipe) ->
-- On LowerName reduce production option(Pipe) ->
-- On LParen reduce production option(Pipe) ->

State 255:
## Known stack suffix:
## Try term With option(Pipe)
## LR(1) items:
termClosed -> Try term With option(Pipe) . separated_nonempty_list(Pipe,pattern) End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 225
-- On LowerName shift to state 226
-- On LParen shift to state 227
-- On upperName_aux shift to state 6
-- On upperName shift to state 228
-- On separated_nonempty_list(Pipe,pattern) shift to state 256
-- On pattern shift to state 247
-- On patUnclosed shift to state 233
-- On patStrictlyUnclosed shift to state 234
-- On patProtectedPermissive shift to state 235
-- On patNonStrictlyUnclosed shift to state 237
-- On patClosed shift to state 238
-- On pat shift to state 250
## Reductions:

State 256:
## Known stack suffix:
## Try term With option(Pipe) separated_nonempty_list(Pipe,pattern)
## LR(1) items:
termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) . End [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
-- On End shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End
## LR(1) items:
termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End . [ With UpperName Type Try String Semicolon RParen Pipe Open Match LowerName Let LQMarkBracket LParen LBracket Int Instance In Foreign Float Exception End EOF Colon Class Char ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production termClosed -> Try term With option(Pipe) separated_nonempty_list(Pipe,pattern) End

State 258:
## Known stack suffix:
## Equal term
## LR(1) items:
let_aux -> Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_aux -> Equal term

State 259:
## Known stack suffix:
## Colon
## LR(1) items:
let_aux -> Colon . typeExpr Hash typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_aux -> Colon . typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 260
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 260:
## Known stack suffix:
## Colon typeExpr
## LR(1) items:
let_aux -> Colon typeExpr . Hash typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_aux -> Colon typeExpr . Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Hash shift to state 261
-- On Equal shift to state 265
## Reductions:

State 261:
## Known stack suffix:
## Colon typeExpr Hash
## LR(1) items:
let_aux -> Colon typeExpr Hash . typeExpr Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 262
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 262:
## Known stack suffix:
## Colon typeExpr Hash typeExpr
## LR(1) items:
let_aux -> Colon typeExpr Hash typeExpr . Equal term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Equal shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## Colon typeExpr Hash typeExpr Equal
## LR(1) items:
let_aux -> Colon typeExpr Hash typeExpr Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 264
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 264:
## Known stack suffix:
## Colon typeExpr Hash typeExpr Equal term
## LR(1) items:
let_aux -> Colon typeExpr Hash typeExpr Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_aux -> Colon typeExpr Hash typeExpr Equal term

State 265:
## Known stack suffix:
## Colon typeExpr Equal
## LR(1) items:
let_aux -> Colon typeExpr Equal . term [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 154
-- On Try shift to state 158
-- On String shift to state 159
-- On Match shift to state 160
-- On LowerName shift to state 156
-- On Let shift to state 132
-- On Lambda shift to state 161
-- On LParen shift to state 170
-- On Int shift to state 171
-- On Float shift to state 172
-- On Fail shift to state 173
-- On Char shift to state 177
-- On upperName_aux shift to state 6
-- On upperName shift to state 178
-- On termUnclosed shift to state 182
-- On termStrictlyUnclosed shift to state 183
-- On termProtectedPermissive shift to state 184
-- On termNonStrictlyUnclosed shift to state 186
-- On termClosed shift to state 187
-- On term shift to state 266
-- On lowerName_aux shift to state 180
-- On lowerName shift to state 181
-- On let_case shift to state 189
-- On appAux shift to state 192
-- On app shift to state 204
## Reductions:

State 266:
## Known stack suffix:
## Colon typeExpr Equal term
## LR(1) items:
let_aux -> Colon typeExpr Equal term . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_aux -> Colon typeExpr Equal term

State 267:
## Known stack suffix:
## let_aux
## LR(1) items:
args(let_aux) -> let_aux . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args(let_aux) -> let_aux

State 268:
## Known stack suffix:
## Let Underscore args(let_aux)
## LR(1) items:
let_case -> Let Underscore args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_case -> Let Underscore args(let_aux)

State 269:
## Known stack suffix:
## arg
## LR(1) items:
args(let_aux) -> arg . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 270
-- On arg shift to state 269
## Reductions:

State 270:
## Known stack suffix:
## arg args(let_aux)
## LR(1) items:
args(let_aux) -> arg args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args(let_aux) -> arg args(let_aux)

State 271:
## Known stack suffix:
## Let Rec
## LR(1) items:
let_case -> Let Rec . LowerName args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
let_case -> Let Rec . Underscore args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On Underscore shift to state 272
-- On LowerName shift to state 274
## Reductions:

State 272:
## Known stack suffix:
## Let Rec Underscore
## LR(1) items:
let_case -> Let Rec Underscore . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 273
-- On arg shift to state 269
## Reductions:

State 273:
## Known stack suffix:
## Let Rec Underscore args(let_aux)
## LR(1) items:
let_case -> Let Rec Underscore args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_case -> Let Rec Underscore args(let_aux)

State 274:
## Known stack suffix:
## Let Rec LowerName
## LR(1) items:
let_case -> Let Rec LowerName . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 275
-- On arg shift to state 269
## Reductions:

State 275:
## Known stack suffix:
## Let Rec LowerName args(let_aux)
## LR(1) items:
let_case -> Let Rec LowerName args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_case -> Let Rec LowerName args(let_aux)

State 276:
## Known stack suffix:
## Let LowerName
## LR(1) items:
let_case -> Let LowerName . args(let_aux) [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
-- On LQMarkParen shift to state 134
-- On LParen shift to state 143
-- On LBrace shift to state 48
-- On Equal shift to state 153
-- On Colon shift to state 259
-- On let_aux shift to state 267
-- On kind_and_name_in_value shift to state 163
-- On args(let_aux) shift to state 277
-- On arg shift to state 269
## Reductions:

State 277:
## Known stack suffix:
## Let LowerName args(let_aux)
## LR(1) items:
let_case -> Let LowerName args(let_aux) . [ Type Open Let Instance In Foreign Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_case -> Let LowerName args(let_aux)

State 278:
## Known stack suffix:
## Instance
## LR(1) items:
body -> Instance . instanceName tyclassInstance Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On LBracket shift to state 279
-- On instanceName shift to state 284
## Reductions:
-- On UpperName reduce production instanceName ->

State 279:
## Known stack suffix:
## LBracket
## LR(1) items:
instanceName -> LBracket . LowerName RBracket [ UpperName ]
instanceName -> LBracket . Underscore RBracket [ UpperName ]
## Transitions:
-- On Underscore shift to state 280
-- On LowerName shift to state 282
## Reductions:

State 280:
## Known stack suffix:
## LBracket Underscore
## LR(1) items:
instanceName -> LBracket Underscore . RBracket [ UpperName ]
## Transitions:
-- On RBracket shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## LBracket Underscore RBracket
## LR(1) items:
instanceName -> LBracket Underscore RBracket . [ UpperName ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instanceName -> LBracket Underscore RBracket

State 282:
## Known stack suffix:
## LBracket LowerName
## LR(1) items:
instanceName -> LBracket LowerName . RBracket [ UpperName ]
## Transitions:
-- On RBracket shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## LBracket LowerName RBracket
## LR(1) items:
instanceName -> LBracket LowerName RBracket . [ UpperName ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instanceName -> LBracket LowerName RBracket

State 284:
## Known stack suffix:
## Instance instanceName
## LR(1) items:
body -> Instance instanceName . tyclassInstance Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## Instance instanceName tyclassInstance
## LR(1) items:
body -> Instance instanceName tyclassInstance . Equal nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Equal shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## Instance instanceName tyclassInstance Equal
## LR(1) items:
body -> Instance instanceName tyclassInstance Equal . nonempty_list(let_case) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Let shift to state 132
-- On nonempty_list(let_case) shift to state 287
-- On let_case shift to state 289
## Reductions:

State 287:
## Known stack suffix:
## Instance instanceName tyclassInstance Equal nonempty_list(let_case)
## LR(1) items:
body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) . End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On End shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## Instance instanceName tyclassInstance Equal nonempty_list(let_case) End
## LR(1) items:
body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Instance instanceName tyclassInstance Equal nonempty_list(let_case) End

State 289:
## Known stack suffix:
## let_case
## LR(1) items:
nonempty_list(let_case) -> let_case . [ End ]
nonempty_list(let_case) -> let_case . nonempty_list(let_case) [ End ]
## Transitions:
-- On Let shift to state 132
-- On nonempty_list(let_case) shift to state 290
-- On let_case shift to state 289
## Reductions:
-- On End reduce production nonempty_list(let_case) -> let_case

State 290:
## Known stack suffix:
## let_case nonempty_list(let_case)
## LR(1) items:
nonempty_list(let_case) -> let_case nonempty_list(let_case) . [ End ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(let_case) -> let_case nonempty_list(let_case)

State 291:
## Known stack suffix:
## Foreign
## LR(1) items:
body -> Foreign . String LowerName Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
body -> Foreign . String Underscore Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On String shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## Foreign String
## LR(1) items:
body -> Foreign String . LowerName Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
body -> Foreign String . Underscore Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Underscore shift to state 293
-- On LowerName shift to state 296
## Reductions:

State 293:
## Known stack suffix:
## Foreign String Underscore
## LR(1) items:
body -> Foreign String Underscore . Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Colon shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## Foreign String Underscore Colon
## LR(1) items:
body -> Foreign String Underscore Colon . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 295
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 295:
## Known stack suffix:
## Foreign String Underscore Colon typeExpr
## LR(1) items:
body -> Foreign String Underscore Colon typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Foreign String Underscore Colon typeExpr

State 296:
## Known stack suffix:
## Foreign String LowerName
## LR(1) items:
body -> Foreign String LowerName . Colon typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Colon shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## Foreign String LowerName Colon
## LR(1) items:
body -> Foreign String LowerName Colon . typeExpr [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 298
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 298:
## Known stack suffix:
## Foreign String LowerName Colon typeExpr
## LR(1) items:
body -> Foreign String LowerName Colon typeExpr . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Foreign String LowerName Colon typeExpr

State 299:
## Known stack suffix:
## Exception
## LR(1) items:
body -> Exception . newUpperName exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On newUpperName shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## Exception newUpperName
## LR(1) items:
body -> Exception newUpperName . exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 303
## Reductions:
-- On Type reduce production exceptionArgs ->
-- On Open reduce production exceptionArgs ->
-- On Let reduce production exceptionArgs ->
-- On Instance reduce production exceptionArgs ->
-- On Foreign reduce production exceptionArgs ->
-- On Exception reduce production exceptionArgs ->
-- On EOF reduce production exceptionArgs ->
-- On Class reduce production exceptionArgs ->

State 301:
## Known stack suffix:
## typeExprClosed
## LR(1) items:
exceptionArgs -> typeExprClosed . exceptionArgs [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 302
## Reductions:
-- On Type reduce production exceptionArgs ->
-- On Open reduce production exceptionArgs ->
-- On Let reduce production exceptionArgs ->
-- On Instance reduce production exceptionArgs ->
-- On Foreign reduce production exceptionArgs ->
-- On Exception reduce production exceptionArgs ->
-- On EOF reduce production exceptionArgs ->
-- On Class reduce production exceptionArgs ->

State 302:
## Known stack suffix:
## typeExprClosed exceptionArgs
## LR(1) items:
exceptionArgs -> typeExprClosed exceptionArgs . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exceptionArgs -> typeExprClosed exceptionArgs

State 303:
## Known stack suffix:
## Exception newUpperName exceptionArgs
## LR(1) items:
body -> Exception newUpperName exceptionArgs . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Exception newUpperName exceptionArgs

State 304:
## Known stack suffix:
## EOF
## LR(1) items:
body_list(body) -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production body_list(body) -> EOF

State 305:
## Known stack suffix:
## Class
## LR(1) items:
body -> Class . newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On newUpperName shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## Class newUpperName
## LR(1) items:
body -> Class newUpperName . nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 307
-- On kind_and_name shift to state 92
## Reductions:

State 307:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name)
## LR(1) items:
body -> Class newUpperName nonempty_list(kind_and_name) . Equal nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Equal shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal
## LR(1) items:
body -> Class newUpperName nonempty_list(kind_and_name) Equal . nonempty_list(letSig) End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 316
-- On letSig shift to state 318
## Reductions:

State 309:
## Known stack suffix:
## Let
## LR(1) items:
letSig -> Let . LowerName Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
letSig -> Let . Underscore Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
-- On Underscore shift to state 310
-- On LowerName shift to state 313
## Reductions:

State 310:
## Known stack suffix:
## Let Underscore
## LR(1) items:
letSig -> Let Underscore . Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
-- On Colon shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## Let Underscore Colon
## LR(1) items:
letSig -> Let Underscore Colon . typeExpr [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 312
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 312:
## Known stack suffix:
## Let Underscore Colon typeExpr
## LR(1) items:
letSig -> Let Underscore Colon typeExpr . [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letSig -> Let Underscore Colon typeExpr

State 313:
## Known stack suffix:
## Let LowerName
## LR(1) items:
letSig -> Let LowerName . Colon typeExpr [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
-- On Colon shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## Let LowerName Colon
## LR(1) items:
letSig -> Let LowerName Colon . typeExpr [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On Lambda shift to state 19
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On LBrace shift to state 46
-- On Forall shift to state 69
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprUnclosed shift to state 72
-- On typeExprStrictlyUnclosed shift to state 73
-- On typeExprProtectedPermissive shift to state 74
-- On typeExprNonStrictlyUnclosed shift to state 76
-- On typeExprClosed shift to state 77
-- On typeExpr shift to state 315
-- On tyAppAux shift to state 80
-- On tyApp shift to state 82
## Reductions:

State 315:
## Known stack suffix:
## Let LowerName Colon typeExpr
## LR(1) items:
letSig -> Let LowerName Colon typeExpr . [ Type Open Let Instance Exception End EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letSig -> Let LowerName Colon typeExpr

State 316:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig)
## LR(1) items:
body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) . End [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On End shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
## LR(1) items:
body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End

State 318:
## Known stack suffix:
## letSig
## LR(1) items:
nonempty_list(letSig) -> letSig . [ End ]
nonempty_list(letSig) -> letSig . nonempty_list(letSig) [ End ]
## Transitions:
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 319
-- On letSig shift to state 318
## Reductions:
-- On End reduce production nonempty_list(letSig) -> letSig

State 319:
## Known stack suffix:
## letSig nonempty_list(letSig)
## LR(1) items:
nonempty_list(letSig) -> letSig nonempty_list(letSig) . [ End ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(letSig) -> letSig nonempty_list(letSig)

State 320:
## Known stack suffix:
## typeAlias
## LR(1) items:
body -> typeAlias . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> typeAlias

State 321:
## Known stack suffix:
## let_case
## LR(1) items:
body -> let_case . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> let_case

State 322:
## Known stack suffix:
## datatype
## LR(1) items:
body -> datatype . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production body -> datatype

State 323:
## Known stack suffix:
## list(import) body_list(body)
## LR(1) items:
entry(body) -> list(import) body_list(body) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production entry(body) -> list(import) body_list(body)

State 324:
## Known stack suffix:
## body
## LR(1) items:
body_list(body) -> body . body_list(body) [ # ]
## Transitions:
-- On Type shift to state 12
-- On Open shift to state 130
-- On Let shift to state 132
-- On Instance shift to state 278
-- On Foreign shift to state 291
-- On Exception shift to state 299
-- On EOF shift to state 304
-- On Class shift to state 305
-- On typeAlias shift to state 320
-- On let_case shift to state 321
-- On datatype shift to state 322
-- On body_list(body) shift to state 325
-- On body shift to state 324
## Reductions:

State 325:
## Known stack suffix:
## body body_list(body)
## LR(1) items:
body_list(body) -> body body_list(body) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production body_list(body) -> body body_list(body)

State 326:
## Known stack suffix:
## import
## LR(1) items:
list(import) -> import . list(import) [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
-- On Import shift to state 1
-- On list(import) shift to state 327
-- On import shift to state 326
## Reductions:
-- On Type reduce production list(import) ->
-- On Open reduce production list(import) ->
-- On Let reduce production list(import) ->
-- On Instance reduce production list(import) ->
-- On Foreign reduce production list(import) ->
-- On Exception reduce production list(import) ->
-- On EOF reduce production list(import) ->
-- On Class reduce production list(import) ->

State 327:
## Known stack suffix:
## import list(import)
## LR(1) items:
list(import) -> import list(import) . [ Type Open Let Instance Foreign Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(import) -> import list(import)

State 328:
## Known stack suffix:
## entry(body)
## LR(1) items:
main -> entry(body) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> entry(body)

State 329:
## Known stack suffix:
##
## LR(1) items:
mainInterface' -> . mainInterface [ # ]
## Transitions:
-- On Import shift to state 1
-- On mainInterface shift to state 330
-- On list(import) shift to state 331
-- On import shift to state 326
-- On entry(bodyInterface) shift to state 356
## Reductions:
-- On Type reduce production list(import) ->
-- On Open reduce production list(import) ->
-- On Let reduce production list(import) ->
-- On Instance reduce production list(import) ->
-- On Exception reduce production list(import) ->
-- On EOF reduce production list(import) ->
-- On Class reduce production list(import) ->

State 330:
## Known stack suffix:
## mainInterface
## LR(1) items:
mainInterface' -> mainInterface . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept mainInterface

State 331:
## Known stack suffix:
## list(import)
## LR(1) items:
entry(bodyInterface) -> list(import) . body_list(bodyInterface) [ # ]
## Transitions:
-- On Type shift to state 332
-- On Open shift to state 335
-- On Let shift to state 309
-- On Instance shift to state 337
-- On Exception shift to state 340
-- On EOF shift to state 343
-- On Class shift to state 344
-- On typeAlias shift to state 350
-- On letSig shift to state 351
-- On datatype shift to state 352
-- On body_list(bodyInterface) shift to state 353
-- On bodyInterface shift to state 354
## Reductions:

State 332:
## Known stack suffix:
## Type
## LR(1) items:
bodyInterface -> Type . newUpperName kindopt [ Type Open Let Instance Exception EOF Class ]
datatype -> Type . newUpperName list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Exception EOF Class ]
typeAlias -> Type . Alias newUpperName Equal typeExpr [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On Alias shift to state 14
-- On newUpperName shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## Type newUpperName
## LR(1) items:
bodyInterface -> Type newUpperName . kindopt [ Type Open Let Instance Exception EOF Class ]
datatype -> Type newUpperName . list(kind_and_name) Equal option(Pipe) separated_nonempty_list(Pipe,variant) [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On Colon shift to state 113
-- On list(kind_and_name) shift to state 115
-- On kindopt shift to state 334
-- On kind_and_name shift to state 128
## Reductions:
-- On Type reduce production kindopt ->
-- On Open reduce production kindopt ->
-- On Let reduce production kindopt ->
-- On Instance reduce production kindopt ->
-- On Exception reduce production kindopt ->
-- On Equal reduce production list(kind_and_name) ->
-- On EOF reduce production kindopt ->
-- On Class reduce production kindopt ->

State 334:
## Known stack suffix:
## Type newUpperName kindopt
## LR(1) items:
bodyInterface -> Type newUpperName kindopt . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> Type newUpperName kindopt

State 335:
## Known stack suffix:
## Open
## LR(1) items:
bodyInterface -> Open . import_module [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Library shift to state 5
-- On upperName_aux shift to state 6
-- On upperName shift to state 8
-- On import_module shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## Open import_module
## LR(1) items:
bodyInterface -> Open import_module . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> Open import_module

State 337:
## Known stack suffix:
## Instance
## LR(1) items:
bodyInterface -> Instance . instanceName tyclassInstance [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On LBracket shift to state 279
-- On instanceName shift to state 338
## Reductions:
-- On UpperName reduce production instanceName ->

State 338:
## Known stack suffix:
## Instance instanceName
## LR(1) items:
bodyInterface -> Instance instanceName . tyclassInstance [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On upperName_aux shift to state 6
-- On upperName shift to state 194
-- On tyclassInstance shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## Instance instanceName tyclassInstance
## LR(1) items:
bodyInterface -> Instance instanceName tyclassInstance . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> Instance instanceName tyclassInstance

State 340:
## Known stack suffix:
## Exception
## LR(1) items:
bodyInterface -> Exception . newUpperName exceptionArgs [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On newUpperName shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## Exception newUpperName
## LR(1) items:
bodyInterface -> Exception newUpperName . exceptionArgs [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 2
-- On Underscore shift to state 17
-- On LowerName shift to state 18
-- On LParen shift to state 43
-- On LBracketUp shift to state 44
-- On LBracket shift to state 45
-- On upperName_aux shift to state 6
-- On upperName shift to state 60
-- On typeExprClosed shift to state 301
-- On exceptionArgs shift to state 342
## Reductions:
-- On Type reduce production exceptionArgs ->
-- On Open reduce production exceptionArgs ->
-- On Let reduce production exceptionArgs ->
-- On Instance reduce production exceptionArgs ->
-- On Exception reduce production exceptionArgs ->
-- On EOF reduce production exceptionArgs ->
-- On Class reduce production exceptionArgs ->

State 342:
## Known stack suffix:
## Exception newUpperName exceptionArgs
## LR(1) items:
bodyInterface -> Exception newUpperName exceptionArgs . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> Exception newUpperName exceptionArgs

State 343:
## Known stack suffix:
## EOF
## LR(1) items:
body_list(bodyInterface) -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production body_list(bodyInterface) -> EOF

State 344:
## Known stack suffix:
## Class
## LR(1) items:
bodyInterface -> Class . newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On UpperName shift to state 13
-- On newUpperName shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## Class newUpperName
## LR(1) items:
bodyInterface -> Class newUpperName . nonempty_list(kind_and_name) Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On Underscore shift to state 20
-- On LowerName shift to state 21
-- On LParen shift to state 22
-- On nonempty_list(kind_and_name) shift to state 346
-- On kind_and_name shift to state 92
## Reductions:

State 346:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name)
## LR(1) items:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) . Equal nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On Equal shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal
## LR(1) items:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal . nonempty_list(letSig) End [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On Let shift to state 309
-- On nonempty_list(letSig) shift to state 348
-- On letSig shift to state 318
## Reductions:

State 348:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig)
## LR(1) items:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) . End [ Type Open Let Instance Exception EOF Class ]
## Transitions:
-- On End shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End
## LR(1) items:
bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> Class newUpperName nonempty_list(kind_and_name) Equal nonempty_list(letSig) End

State 350:
## Known stack suffix:
## typeAlias
## LR(1) items:
bodyInterface -> typeAlias . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> typeAlias

State 351:
## Known stack suffix:
## letSig
## LR(1) items:
bodyInterface -> letSig . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> letSig

State 352:
## Known stack suffix:
## datatype
## LR(1) items:
bodyInterface -> datatype . [ Type Open Let Instance Exception EOF Class ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bodyInterface -> datatype

State 353:
## Known stack suffix:
## list(import) body_list(bodyInterface)
## LR(1) items:
entry(bodyInterface) -> list(import) body_list(bodyInterface) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production entry(bodyInterface) -> list(import) body_list(bodyInterface)

State 354:
## Known stack suffix:
## bodyInterface
## LR(1) items:
body_list(bodyInterface) -> bodyInterface . body_list(bodyInterface) [ # ]
## Transitions:
-- On Type shift to state 332
-- On Open shift to state 335
-- On Let shift to state 309
-- On Instance shift to state 337
-- On Exception shift to state 340
-- On EOF shift to state 343
-- On Class shift to state 344
-- On typeAlias shift to state 350
-- On letSig shift to state 351
-- On datatype shift to state 352
-- On body_list(bodyInterface) shift to state 355
-- On bodyInterface shift to state 354
## Reductions:

State 355:
## Known stack suffix:
## bodyInterface body_list(bodyInterface)
## LR(1) items:
body_list(bodyInterface) -> bodyInterface body_list(bodyInterface) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production body_list(bodyInterface) -> bodyInterface body_list(bodyInterface)

State 356:
## Known stack suffix:
## entry(bodyInterface)
## LR(1) items:
mainInterface -> entry(bodyInterface) . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production mainInterface -> entry(bodyInterface)

