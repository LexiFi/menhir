%parameter< Filename : sig val get : string end >
%{
  let loc startpos endpos =
    let get_pos pos =
      { Location.pos_lnum = pos.Lexing.pos_lnum
      ; pos_cnum = pos.Lexing.pos_cnum - pos.Lexing.pos_bol
      }
    in
    { Location.loc_start = get_pos startpos
    ; loc_end = get_pos endpos
    ; filename = Filename.get
    }
%}
%start main
%start mainInterface
%token Alias
%token Arrow
%token As
%token Caret
%token <char list> Char
%token Class
%token Colon
%token Comma
%token Dot
%token DoubleArrow
%token EOF
%token Eff
%token End
%token Equal
%token Exception
%token Fail
%token <string> Float
%token Forall
%token Foreign
%token Hash
%token Import
%token In
%token Instance
%token <string> Int
%token LArrowEff
%token LBrace
%token LBracket
%token LBracketUp
%token LDoubleArrowEff
%token LParen
%token LQMarkBracket
%token LQMarkParen
%token Lambda
%token Let
%token Library
%token <string> LowerName
%token Match
%token Open
%token Pipe
%token RArrowEff
%token RBrace
%token RBracket
%token RBracketUp
%token RDoubleArrowEff
%token RParen
%token Rec
%token Semicolon
%token Star
%token <char list> String
%token Try
%token Type
%token Underscore
%token <string> UpperName
%token With
%type <(ParseTree.imports * ParseTree.top list)> main
%type <(ParseTree.imports * ParseTree.interface list)> mainInterface
%%

option_Pipe_:
  
    {    ( None )}
| x = Pipe
    {    ( Some x )}

loption_separated_nonempty_list_Comma_typeExpr__:
  
    {    ( [] )}
| x = separated_nonempty_list_Comma_typeExpr_
    {    ( x )}

loption_separated_nonempty_list_Pipe_typeExpr__:
  
    {    ( [] )}
| x = separated_nonempty_list_Pipe_typeExpr_
    {    ( x )}

list_import_:
  
    {    ( [] )}
| x = import xs = list_import_
    {    ( x :: xs )}

list_kind_and_name_:
  
    {    ( [] )}
| x = kind_and_name xs = list_kind_and_name_
    {    ( x :: xs )}

list_kind_and_name_in_value_:
  
    {    ( [] )}
| x = kind_and_name_in_value xs = list_kind_and_name_in_value_
    {    ( x :: xs )}

list_typeExprClosed_:
  
    {    ( [] )}
| x = typeExprClosed xs = list_typeExprClosed_
    {    ( x :: xs )}

nonempty_list_kind_and_name_:
  x = kind_and_name
    {    ( [ x ] )}
| x = kind_and_name xs = nonempty_list_kind_and_name_
    {    ( x :: xs )}

nonempty_list_letSig_:
  x = letSig
    {    ( [ x ] )}
| x = letSig xs = nonempty_list_letSig_
    {    ( x :: xs )}

nonempty_list_let_case_:
  x = let_case
    {    ( [ x ] )}
| x = let_case xs = nonempty_list_let_case_
    {    ( x :: xs )}

nonempty_list_patClosed_:
  x = patClosed
    {    ( [ x ] )}
| x = patClosed xs = nonempty_list_patClosed_
    {    ( x :: xs )}

nonempty_list_typeExprClosed_:
  x = typeExprClosed
    {    ( [ x ] )}
| x = typeExprClosed xs = nonempty_list_typeExprClosed_
    {    ( x :: xs )}

separated_nonempty_list_Comma_typeExpr_:
  x = typeExpr
    {    ( [ x ] )}
| x = typeExpr _2 = Comma xs = separated_nonempty_list_Comma_typeExpr_
    {    ( x :: xs )}

separated_nonempty_list_Pipe_pattern_:
  x = pattern
    {    ( [ x ] )}
| x = pattern _2 = Pipe xs = separated_nonempty_list_Pipe_pattern_
    {    ( x :: xs )}

separated_nonempty_list_Pipe_typeExpr_:
  x = typeExpr
    {    ( [ x ] )}
| x = typeExpr _2 = Pipe xs = separated_nonempty_list_Pipe_typeExpr_
    {    ( x :: xs )}

separated_nonempty_list_Pipe_variant_:
  x = variant
    {    ( [ x ] )}
| x = variant _2 = Pipe xs = separated_nonempty_list_Pipe_variant_
    {    ( x :: xs )}

main:
  _1 = entry_body_
    {                  ( _1 )}

mainInterface:
  _1 = entry_bodyInterface_
    {                                    ( _1 )}

body:
  x = let_case
    {      ( ParseTree.Value x )}
| typeAlias = typeAlias
    {      ( ParseTree.Type typeAlias )}
| _1 = Foreign cname = String name = LowerName _4 = Colon ty = typeExpr
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( ParseTree.Foreign (cname, name, ty) )}
| _1 = Foreign cname = String _1_inlined1 = Underscore _4 = Colon ty = typeExpr
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( ParseTree.Foreign (cname, name, ty) )}
| _1 = Type name = newUpperName k = kindopt
    {      ( ParseTree.AbstractType (name, k) )}
| datatype = datatype
    {      ( ParseTree.Datatype datatype )}
| _1 = Exception name = newUpperName args = exceptionArgs
    {      ( ParseTree.Exception (name, args) )}
| _1 = Open modul = import_module
    {      ( ParseTree.Open modul )}
| _1 = Class name = newUpperName params = nonempty_list_kind_and_name_ _4 = Equal sigs = nonempty_list_letSig_ _6 = End
    {      ( ParseTree.Class (name, params, sigs) )}
| _1 = Instance name = instanceName x = tyclassInstance _4 = Equal values = nonempty_list_let_case_ _6 = End
    {      ( ParseTree.Instance (x, name, values) )}

instanceName:
  
    {    ( None )}
| _1 = LBracket name = LowerName _3 = RBracket
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( Some name )}
| _1 = LBracket _1_inlined1 = Underscore _3 = RBracket
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( Some name )}

exceptionArgs:
  x = typeExprClosed xs = exceptionArgs
    {      ( x :: xs )}
| 
    {    ( [] )}

let_case:
  _1 = Let name = LowerName x = args_let_aux_
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
let r =     ( ParseTree.NonRec ) in
      ( (name, r, x) )}
| _1 = Let _1_inlined1 = Underscore x = args_let_aux_
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
let r =     ( ParseTree.NonRec ) in
      ( (name, r, x) )}
| _1 = Let _1_inlined1 = Rec name = LowerName x = args_let_aux_
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
let r =         ( ParseTree.Rec ) in
      ( (name, r, x) )}
| _1 = Let _1_inlined1 = Rec _1_inlined2 = Underscore x = args_let_aux_
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
let r =         ( ParseTree.Rec ) in
      ( (name, r, x) )}

let_aux:
  _2 = Equal t = term
    {let ty =     ( None ) in
      ( (ty, t) )}
| _1 = Colon eff = typeExpr _3 = Hash ty = typeExpr _2 = Equal t = term
    {let ty =
  let ty =       ( (ty, Some eff) ) in
        ( Some ty )
in
      ( (ty, t) )}
| _1 = Colon ty = typeExpr _2 = Equal t = term
    {let ty =
  let ty =       ( (ty, None) ) in
        ( Some ty )
in
      ( (ty, t) )}

datatype:
  _1 = Type name = newUpperName args = list_kind_and_name_ _4 = Equal _5 = option_Pipe_ variants = separated_nonempty_list_Pipe_variant_
    {      ( (name, args, variants) )}

typeAlias:
  _1 = Type _2 = Alias name = newUpperName _4 = Equal ty = typeExpr
    {      ( (name, ty) )}

lambda_aux:
  _2 = Arrow t = term
    {let ty =     ( None ) in
      ( (ty, t) )}
| _1 = Colon eff = typeExprProtectedPermissive _3 = Hash ty = typeExprProtectedPermissive _2 = Arrow t = term
    {let ty =
  let ty =       ( (ty, Some eff) ) in
        ( Some ty )
in
      ( (ty, t) )}
| _1 = Colon ty = typeExprProtectedPermissive _2 = Arrow t = term
    {let ty =
  let ty =       ( (ty, None) ) in
        ( Some ty )
in
      ( (ty, t) )}

termStrictlyUnclosed:
  _1 = Lambda args = nonempty_args_lambda_aux_
    {let _endpos = _endpos_args_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.Abs args) )}
| x = let_case _2 = In xs = term
    {let _endpos = _endpos_xs_ in
let _startpos = _startpos_x_ in
      ( (loc _startpos _endpos, ParseTree.Let (x, xs)) )}
| x = termProtectedPermissive _2 = Semicolon y = term
    {let _endpos = _endpos_y_ in
let _startpos = _startpos_x_ in
      ( (loc _startpos _endpos, ParseTree.Seq (x, y)) )}
| t = termProtectedPermissive _1 = Colon eff = typeExpr _3 = Hash ty = typeExpr
    {let ty =       ( (ty, Some eff) ) in
let _endpos = _endpos_ty_ in
let _startpos = _startpos_t_ in
      ( (loc _startpos _endpos, ParseTree.Annot (t, ty)) )}
| t = termProtectedPermissive _1 = Colon ty = typeExpr
    {let ty =       ( (ty, None) ) in
let _endpos = _endpos_ty_ in
let _startpos = _startpos_t_ in
      ( (loc _startpos _endpos, ParseTree.Annot (t, ty)) )}

termNonStrictlyUnclosed:
  x = app
    {      ( x )}
| _1 = Fail _2 = LBracket ty = typeExpr _4 = RBracket exn = termClosed
    {let _endpos = _endpos_exn_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.Fail (ty, exn)) )}

termUnclosed:
  x = termStrictlyUnclosed
    {                             ( x )}
| x = termNonStrictlyUnclosed
    {                                ( x )}

termClosed:
  name = lowerName
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, ParseTree.LowerVal name) )}
| name = upperName
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, ParseTree.UpperVal name) )}
| _1 = Match t = term _3 = With _4 = option_Pipe_ p = separated_nonempty_list_Pipe_pattern_ _6 = End
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.PatternMatching (t, p)) )}
| _1 = Try t = term _3 = With _4 = option_Pipe_ p = separated_nonempty_list_Pipe_pattern_ _6 = End
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.Try (t, p)) )}
| n = Int
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
      ( (loc _startpos _endpos, ParseTree.Const (ParseTree.Int n)) )}
| n = Float
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
      ( (loc _startpos _endpos, ParseTree.Const (ParseTree.Float n)) )}
| c = Char
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
      ( (loc _startpos _endpos, ParseTree.Const (ParseTree.Char c)) )}
| s = String
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
      ( (loc _startpos _endpos, ParseTree.Const (ParseTree.String s)) )}
| _1 = LParen x = term _3 = RParen
    {      ( x )}

term:
  x = termUnclosed
    {                     ( x )}
| x = termClosed
    {                   ( x )}

termProtectedPermissive:
  x = termNonStrictlyUnclosed
    {                                ( x )}
| x = termClosed
    {                   ( x )}

appAux:
  f = termClosed
    {                   ( f )}
| f = app
    {            ( f )}

app:
  f = appAux _2 = LBracket ty = typeExpr _4 = RBracket
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
      ( (loc _startpos _endpos, ParseTree.TApp (f, ty)) )}
| f = appAux x = termClosed
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_f_ in
      ( (loc _startpos _endpos, ParseTree.App (f, x)) )}
| f = appAux _2 = LQMarkBracket tyclass = tyclassAppArg _4 = RBracket
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
      ( (loc _startpos _endpos, ParseTree.TyClassApp (f, tyclass)) )}

tyclassInstance:
  name = upperName tys = nonempty_list_typeExprClosed_
    {      ( (name, tys) )}

tyclassAppArg:
  x = tyclassInstance
    {                        ( ParseTree.TyClassInstance x )}
| x = lowerName
    {                  ( ParseTree.TyClassVariable x )}

arg:
  _1 = LParen name = LowerName _3 = Colon ty = typeExpr _5 = RParen
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( ParseTree.VArg (name, ty) )}
| _1 = LParen _1_inlined1 = Underscore _3 = Colon ty = typeExpr _5 = RParen
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( ParseTree.VArg (name, ty) )}
| ty = kind_and_name_in_value
    {      ( ParseTree.TArg ty )}
| _1 = LParen _2 = RParen
    {      ( ParseTree.Unit )}
| _1 = LQMarkParen name = LowerName _3 = Colon tyclass = tyclass _5 = RParen
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( ParseTree.TyClassArg (name, tyclass) )}
| _1 = LQMarkParen _1_inlined1 = Underscore _3 = Colon tyclass = tyclass _5 = RParen
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( ParseTree.TyClassArg (name, tyclass) )}

args_lambda_aux_:
  rest = lambda_aux
    {      ( ([], rest) )}
| x = arg xs = args_lambda_aux_
    {let _endpos = _endpos_xs_ in
let _startpos = _startpos_x_ in
      ( let (xs, rest) = xs in
        ((loc _startpos _endpos, x) :: xs, rest)
      )}

args_let_aux_:
  rest = let_aux
    {      ( ([], rest) )}
| x = arg xs = args_let_aux_
    {let _endpos = _endpos_xs_ in
let _startpos = _startpos_x_ in
      ( let (xs, rest) = xs in
        ((loc _startpos _endpos, x) :: xs, rest)
      )}

nonempty_args_lambda_aux_:
  x = arg xs = args_lambda_aux_
    {let _endpos = _endpos_xs_ in
let _startpos = _startpos_x_ in
      ( let (xs, rest) = xs in
        ((loc _startpos _endpos, x) :: xs, rest)
      )}

tyclass:
  name = upperName tyvars = list_kind_and_name_in_value_ args = nonempty_list_typeExprClosed_
    {      ( (name, tyvars, args) )}

typeExprStrictlyUnclosed:
  param = typeExprProtectedPermissive _2 = Arrow ret = typeExpr
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos_param_ in
      ( (loc _startpos _endpos, ParseTree.Fun (param, None, ret)) )}
| param = typeExprProtectedPermissive _2 = LArrowEff eff = eff _4 = RArrowEff ret = typeExpr
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos_param_ in
      ( (loc _startpos _endpos, ParseTree.Fun (param, Some eff, ret)) )}
| _1 = Forall x = nonempty_list_kind_and_name_ _3 = Comma ret = typeExpr
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.Forall (x, ret)) )}
| _1 = LBrace tyclass = tyclass _3 = RBrace _4 = DoubleArrow ty = typeExpr
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.TyClass (tyclass, None, ty)) )}
| _1 = LBrace tyclass = tyclass _3 = RBrace _4 = LDoubleArrowEff eff = eff _6 = RDoubleArrowEff ty = typeExpr
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.TyClass (tyclass, Some eff, ty)) )}
| _1 = Lambda x = nonempty_list_kind_and_name_ _3 = Comma ret = typeExpr
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos__1_ in
      ( (loc _startpos _endpos, ParseTree.AbsOnTy (x, ret)) )}

typeExprNonStrictlyUnclosed:
  x = tyApp
    {      ( x )}

typeExprUnclosed:
  x = typeExprStrictlyUnclosed
    {                                 ( x )}
| x = typeExprNonStrictlyUnclosed
    {                                    ( x )}

typeExprClosed:
  name = upperName
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, ParseTree.Ty name) )}
| name = LowerName
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, ParseTree.TyVar name) )}
| _1 = Underscore
    {let name =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
let (_endpos_name_, _startpos_name_) = (_endpos__1_, _startpos__1_) in
let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, ParseTree.TyVar name) )}
| _1 = LBracket eff = eff _3 = RBracket
    {      ( (loc _startpos_eff_ _endpos_eff_, ParseTree.Eff eff) )}
| _1 = LBracketUp sum = sum _3 = RBracketUp
    {      ( (loc _startpos_sum_ _endpos_sum_, ParseTree.Sum sum) )}
| _1 = LParen x = typeExpr _3 = RParen
    {      ( x )}

typeExpr:
  x = typeExprUnclosed
    {                         ( x )}
| x = typeExprClosed
    {                       ( x )}

typeExprProtectedPermissive:
  x = typeExprNonStrictlyUnclosed
    {                                    ( x )}
| x = typeExprClosed
    {                       ( x )}

tyAppAux:
  f = typeExprClosed
    {                       ( f )}
| f = tyApp
    {              ( f )}

tyApp:
  f = tyAppAux x = typeExprClosed
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_f_ in
      ( (loc _startpos _endpos, ParseTree.AppOnTy (f, x)) )}

kindUnclosed:
  k1 = kindClosed _2 = Arrow k2 = kind
    {      ( ParseTree.KFun (k1, k2) )}

kindClosed:
  _1 = Star
    {         ( ParseTree.KStar )}
| _1 = Eff
    {        ( ParseTree.KEff )}
| _1 = Caret
    {          ( ParseTree.KExn )}
| _1 = LParen x = kind _3 = RParen
    {                           ( x )}

kind:
  x = kindUnclosed
    {                     ( x )}
| x = kindClosed
    {                   ( x )}

eff:
  xs = loption_separated_nonempty_list_Comma_typeExpr__
    {let eff =     ( xs ) in
let (_endpos_eff_, _startpos_eff_) = (_endpos_xs_, _startpos_xs_) in
let _endpos = _endpos_eff_ in
let _startpos = _startpos_eff_ in
                                           ( (loc _startpos _endpos, eff) )}

sum:
  xs = loption_separated_nonempty_list_Pipe_typeExpr__
    {let sum =     ( xs ) in
                                          ( sum )}

variant:
  name = newUpperName tys = list_typeExprClosed_
    {      ( (name, tys) )}

kindopt:
  
    {    ( None )}
| _1 = Colon k = kind
    {                   ( Some k )}

kind_and_name:
  name = LowerName
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( (name, None) )}
| _1 = Underscore
    {let name =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( (name, None) )}
| _1 = LParen name = LowerName _3 = Colon k = kind _5 = RParen
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( (name, Some k) )}
| _1 = LParen _1_inlined1 = Underscore _3 = Colon k = kind _5 = RParen
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( (name, Some k) )}

kind_and_name_in_value:
  _1 = LBrace name = LowerName _3 = RBrace
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( (name, None) )}
| _1 = LBrace _1_inlined1 = Underscore _3 = RBrace
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( (name, None) )}
| _1 = LBrace name = LowerName _3 = Colon k = kind _5 = RBrace
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( (name, Some k) )}
| _1 = LBrace _1_inlined1 = Underscore _3 = Colon k = kind _5 = RBrace
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( (name, Some k) )}

pattern:
  p = pat _2 = Arrow t = term
    {      ( (p, t) )}

patClosed:
  name = LowerName
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( ParseTree.Any name )}
| _1 = Underscore
    {let name =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( ParseTree.Any name )}
| name = upperName
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( ParseTree.TyConstr (loc _startpos _endpos, name, []) )}
| _1 = LParen p = pat _3 = RParen
    {      ( p )}

patNonStrictlyUnclosed:
  name = upperName args = nonempty_list_patClosed_
    {let _endpos = _endpos_args_ in
let _startpos = _startpos_name_ in
      ( ParseTree.TyConstr (loc _startpos _endpos, name, args) )}
| p = patProtectedPermissive _2 = As name = LowerName
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( ParseTree.As (p, name) )}
| p = patProtectedPermissive _2 = As _1 = Underscore
    {let name =
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( ParseTree.As (p, name) )}

patStrictlyUnclosed:
  p1 = patProtectedPermissive _2 = Pipe p2 = pat
    {      ( ParseTree.Or (p1, p2) )}

patUnclosed:
  p = patNonStrictlyUnclosed
    {                               ( p )}
| p = patStrictlyUnclosed
    {                            ( p )}

patProtectedPermissive:
  p = patClosed
    {                  ( p )}
| p = patNonStrictlyUnclosed
    {                               ( p )}

pat:
  p = patClosed
    {                  ( p )}
| p = patUnclosed
    {                    ( p )}

letSig:
  _1 = Let name = LowerName _3 = Colon ty = typeExpr
    {let name =
  let _endpos = _endpos_name_ in
  let _startpos = _startpos_name_ in
        ( (loc _startpos _endpos, `NewLowerName name) )
in
      ( (name, ty) )}
| _1 = Let _1_inlined1 = Underscore _3 = Colon ty = typeExpr
    {let name =
  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
  let _endpos = _endpos__1_ in
  let _startpos = _startpos__1_ in
        ( (loc _startpos _endpos, `Underscore) )
in
      ( (name, ty) )}

lowerName_aux:
  name = LowerName
    {      ( [name] )}
| m = UpperName _2 = Dot xs = lowerName_aux
    {      ( m :: xs )}

lowerName:
  x = lowerName_aux
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
                             ( (loc _startpos _endpos, `LowerName x) )}

upperName_aux:
  name = UpperName
    {      ( [name] )}
| m = UpperName _2 = Dot xs = upperName_aux
    {      ( m :: xs )}

upperName:
  x = upperName_aux
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
                             ( (loc _startpos _endpos, `UpperName x) )}

newUpperName:
  name = UpperName
    {let _endpos = _endpos_name_ in
let _startpos = _startpos_name_ in
      ( (loc _startpos _endpos, `NewUpperName name) )}

bodyInterface:
  x = letSig
    {      ( ParseTree.IVal x )}
| _1 = Type name = newUpperName k = kindopt
    {      ( ParseTree.IAbstractType (name, k) )}
| datatype = datatype
    {      ( ParseTree.IDatatype datatype )}
| typeAlias = typeAlias
    {      ( ParseTree.ITypeAlias typeAlias )}
| _1 = Exception name = newUpperName args = exceptionArgs
    {      ( ParseTree.IException (name, args) )}
| _1 = Open modul = import_module
    {      ( ParseTree.IOpen modul )}
| _1 = Class name = newUpperName params = nonempty_list_kind_and_name_ _4 = Equal sigs = nonempty_list_letSig_ _6 = End
    {      ( ParseTree.IClass (name, params, sigs) )}
| _1 = Instance name = instanceName x = tyclassInstance
    {      ( ParseTree.IInstance (x, name) )}

import_module:
  modul = upperName
    {      ( ParseTree.Source modul )}
| _1 = Library modul = upperName
    {      ( ParseTree.Library modul )}

import:
  _1 = Import m = import_module
    {                                 ( m )}

entry_body_:
  imports = list_import_ body = body_list_body_
    {      ( (imports, body) )}

entry_bodyInterface_:
  imports = list_import_ body = body_list_bodyInterface_
    {      ( (imports, body) )}

body_list_body_:
  _1 = EOF
    {      ( [] )}
| x = body xs = body_list_body_
    {      ( x :: xs )}

body_list_bodyInterface_:
  _1 = EOF
    {      ( [] )}
| x = bodyInterface xs = body_list_bodyInterface_
    {      ( x :: xs )}

%%
