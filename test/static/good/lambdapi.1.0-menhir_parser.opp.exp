%{
open Console
open Parser

let build_prod : (string * p_term) list -> p_term -> p_term =
  List.fold_right (fun (x,a) b -> Pos.none (P_Prod(Pos.none x, Some(a), b)))

let build_abst : (string * p_term) list -> p_term -> p_term =
  List.fold_right (fun (x,a) b -> Pos.none (P_Abst(Pos.none x, Some(a), b)))

let build_config : string -> string option -> Eval.config = fun s1 s2o ->
  try
    let open Eval in
    let config steps strategy =
      let steps =
        match steps with
        | None     -> None
        | Some(nb) -> Some(int_of_string nb)
      in
      {strategy; steps}
    in
    match (s1, s2o) with
    | ("SNF" , io         ) -> config io        SNF
    | ("HNF" , io         ) -> config io        HNF
    | ("WHNF", io         ) -> config io        WHNF
    | (i     , Some "SNF" ) -> config (Some(i)) SNF
    | (i     , Some "HNF" ) -> config (Some(i)) HNF
    | (i     , Some "WHNF") -> config (Some(i)) WHNF
    | (i     , None       ) -> config (Some(i)) SNF
    | (_     , _          ) -> raise Exit (* captured bellow *)
  with _ -> fatal_no_pos "Invalid command configuration."
%}
%start line
%token ARROW
%token ASSERT
%token ASSERTNOT
%token CHECK
%token CHECKNOT
%token COLON
%token COMMA
%token DEF
%token DOT
%token EOF
%token EQUAL
%token EVAL
%token FATARROW
%token <string> ID
%token INFER
%token KW_DEF
%token KW_INJ
%token KW_THM
%token LEFTPAR
%token LEFTSQU
%token LONGARROW
%token <string> NAME
%token <string*string> QID
%token <string> REQUIRE
%token RIGHTPAR
%token RIGHTSQU
%token TYPE
%token UNDERSCORE
%right ARROW FATARROW
%type <Parser.p_cmd Pos.loc> line
%%

option___anonymous_0_:
  
    {    ( None )}
| _1 = COLON a = term
    {let x =                                 ( a ) in
    ( Some x )}

loption_separated_nonempty_list_COMMA_context_item__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_context_item_
    {    ( x )}

list_param_:
  
    {    ( [] )}
| x = param xs = list_param_
    {    ( x :: xs )}

list_sterm_:
  
    {    ( [] )}
| x = sterm xs = list_sterm_
    {    ( x :: xs )}

nonempty_list_param_:
  x = param
    {    ( [ x ] )}
| x = param xs = nonempty_list_param_
    {    ( x :: xs )}

nonempty_list_rule_:
  x = rule
    {    ( [ x ] )}
| x = rule xs = nonempty_list_rule_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_context_item_:
  x = context_item
    {    ( [ x ] )}
| x = context_item _2 = COMMA xs = separated_nonempty_list_COMMA_context_item_
    {    ( x :: xs )}

line:
  s = ID ps = list_param_ _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_SymDecl(Terms.Const, Pos.none s, build_prod ps a)) )}
| _1 = KW_DEF s = ID _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_SymDecl(Terms.Defin, Pos.none s, a)) )}
| _1 = KW_INJ s = ID _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_SymDecl(Terms.Injec, Pos.none s, a)) )}
| _1 = KW_DEF s = ID _3 = COLON a = term _5 = DEF t = term _7 = DOT
    {      ( Pos.none (P_SymDef(false, Pos.none s, Some(a), t)) )}
| _1 = KW_DEF s = ID _3 = DEF t = term _5 = DOT
    {      ( Pos.none (P_SymDef(false, Pos.none s,  None, t)) )}
| _1 = KW_DEF s = ID ps = nonempty_list_param_ _4 = COLON a = term _6 = DEF t = term _8 = DOT
    {      ( Pos.none (P_SymDef(false, Pos.none s, Some(build_prod ps a), build_abst ps t)) )}
| _1 = KW_DEF s = ID ps = nonempty_list_param_ _4 = DEF t = term _6 = DOT
    {      ( Pos.none (P_SymDef(false, Pos.none s, None, build_abst ps t)) )}
| _1 = KW_THM s = ID _3 = COLON a = term _5 = DEF t = term _7 = DOT
    {      ( Pos.none (P_SymDef(true, Pos.none s, Some(a), t)) )}
| _1 = KW_THM s = ID ps = nonempty_list_param_ _4 = COLON a = term _6 = DEF t = term _8 = DOT
    {      ( Pos.none (P_SymDef(true, Pos.none s, Some(build_prod ps a), build_abst ps t)) )}
| rs = nonempty_list_rule_ _2 = DOT
    {      ( Pos.none (P_OldRules(rs)) )}
| _1 = EVAL t = term _3 = DOT
    {      ( Pos.none (P_Eval(t, Eval.{strategy = SNF; steps = None})) )}
| _1 = EVAL c = eval_config t = term _4 = DOT
    {      ( Pos.none (P_Eval(t, c)) )}
| _1 = INFER t = term _3 = DOT
    {      ( Pos.none (P_Infer(t, Eval.{strategy = SNF; steps = None})) )}
| _1 = INFER c = eval_config t = term _4 = DOT
    {      ( Pos.none (P_Infer(t, c)) )}
| _1 = CHECK t = aterm _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_TestType(false, false, t, a)) )}
| _1 = CHECKNOT t = aterm _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_TestType(false, true , t, a)) )}
| _1 = ASSERT t = aterm _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_TestType(true , false, t, a)) )}
| _1 = ASSERTNOT t = aterm _3 = COLON a = term _5 = DOT
    {      ( Pos.none (P_TestType(true , true , t, a)) )}
| _1 = CHECK t = aterm _3 = EQUAL u = term _5 = DOT
    {      ( Pos.none (P_TestConv(false, false, t, u)) )}
| _1 = CHECKNOT t = aterm _3 = EQUAL u = term _5 = DOT
    {      ( Pos.none (P_TestConv(false, true , t, u)) )}
| _1 = ASSERT t = aterm _3 = EQUAL u = term _5 = DOT
    {      ( Pos.none (P_TestConv(true , false, t, u)) )}
| _1 = ASSERTNOT t = aterm _3 = EQUAL u = term _5 = DOT
    {      ( Pos.none (P_TestConv(true , true , t, u)) )}
| _1 = NAME _2 = DOT
    {                     ( Pos.none (P_Other(Pos.none "NAME")) )}
| r = REQUIRE _2 = DOT
    {                     ( Pos.none (P_Require([r])) )}
| _1 = EOF
    {                     ( raise End_of_file )}

eval_config:
  _1 = LEFTSQU s = ID _3 = RIGHTSQU
    {                                       ( build_config s None )}
| _1 = LEFTSQU s1 = ID _3 = COMMA s2 = ID _5 = RIGHTSQU
    {                                       ( build_config s1 (Some s2) )}

param:
  _1 = LEFTPAR id = ID _3 = COLON te = term _5 = RIGHTPAR
    {                                         ( (id, te) )}

rule:
  _1 = LEFTSQU c = context _3 = RIGHTSQU lhs = term _5 = LONGARROW rhs = term
    {                                                           ( (c, lhs, rhs ) )}

context_item:
  x = ID ao = option___anonymous_0_
    {                                       ( (Pos.none x, ao) )}

context:
  xs = loption_separated_nonempty_list_COMMA_context_item__
    {let l =     ( xs ) in
                                          ( l )}

sterm:
  qid = QID
    {      ( let (m,id)=qid in Pos.none (P_Vari(Pos.none([m], id))) )}
| id = ID
    {      ( Pos.none (P_Vari(Pos.none([], id))) )}
| _1 = LEFTPAR t = term _3 = RIGHTPAR
    {      ( t )}
| _1 = UNDERSCORE
    {      ( Pos.none P_Wild )}
| _1 = TYPE
    {      ( Pos.none P_Type )}

aterm:
  t = sterm ts = list_sterm_
    {      ( List.fold_left (fun t u -> Pos.none (P_Appl(t,u))) t ts )}

term:
  t = aterm
    {      ( t )}
| x = ID _2 = COLON a = aterm _4 = ARROW b = term
    {      ( Pos.none (P_Prod(Pos.none x, Some(a), b)) )}
| _1 = LEFTPAR x = ID _3 = COLON a = aterm _5 = RIGHTPAR _6 = ARROW b = term
    {      ( Pos.none (P_Prod(Pos.none x, Some(a), b)) )}
| a = term _2 = ARROW b = term
    {      ( Pos.none (P_Prod(Pos.none "_", Some(a), b)) )}
| x = ID _2 = FATARROW t = term
    {      ( Pos.none (P_Abst(Pos.none x, None, t)) )}
| x = ID _2 = COLON a = aterm _4 = FATARROW t = term
    {      ( Pos.none (P_Abst(Pos.none x, Some(a), t)) )}

%%


