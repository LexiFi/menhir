%{
module Globalenv = Lambdoc_rlambtex_globalenv

open Lambdoc_reader
open Globalenv
%}
%start document
%token <Lambdoc_reader_ast.command_t> ANSWER
%token <Lambdoc_reader_ast.command_t> APPENDIX
%token BEGIN
%token <string> BEGIN_ABSTRACT
%token <string> BEGIN_BIB
%token <string> BEGIN_BLKPAT_FRAG
%token <string> BEGIN_BLKPAT_LIT
%token <string> BEGIN_CUSTOM
%token <string> BEGIN_DESCRIPTION
%token <Lambdoc_reader_ast.command_t> BEGIN_DUMMY
%token <string> BEGIN_ENUMERATE
%token <string> BEGIN_EQUATION
%token <string> BEGIN_FIGURE
%token <string> BEGIN_ITEMIZE
%token <string> BEGIN_MATHML_BLK
%token <Lambdoc_reader_ast.command_t> BEGIN_MATHML_INL
%token <string> BEGIN_MATHTEX_BLK
%token <Lambdoc_reader_ast.command_t> BEGIN_MATHTEX_INL
%token <string> BEGIN_NOTE
%token <string> BEGIN_PRINTOUT
%token <string> BEGIN_PULLQUOTE
%token <string> BEGIN_QANDA
%token <string> BEGIN_QUOTE
%token <string> BEGIN_SOURCE
%token <string> BEGIN_SUBPAGE
%token <string> BEGIN_TABLE
%token <string> BEGIN_TABULAR
%token <string> BEGIN_VERBATIM
%token <string> BEGIN_VERSE
%token <Lambdoc_reader_ast.command_t> BIBLIOGRAPHY
%token <Lambdoc_reader_ast.command_t> BIB_AUTHOR
%token <Lambdoc_reader_ast.command_t> BIB_RESOURCE
%token <Lambdoc_reader_ast.command_t> BIB_TITLE
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> BLKPAT_EMPTY
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> BLKPAT_RAW
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> BLKPAT_RAW_RAW
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> BLKPAT_SEQ
%token <Lambdoc_reader_ast.command_t> BOLD
%token <Lambdoc_reader_ast.command_t> BOXOUTDEF
%token <Lambdoc_reader_ast.command_t> CAPS
%token <Lambdoc_reader_ast.command_t> CELL_MARK
%token <Lambdoc_reader_ast.command_t> CITE
%token CLOSE_DUMMY
%token <Lambdoc_reader_ast.command_t> CODE
%token <Lambdoc_reader_ast.command_t> DEL
%token <Lambdoc_reader_ast.command_t> DREF
%token <Lambdoc_reader_ast.command_t> EMPH
%token END
%token END_BLOCK
%token <string> END_DUMMY
%token <Lambdoc_reader_ast.command_t> END_MATHML_INL
%token <Lambdoc_reader_ast.command_t> END_MATHTEX_INL
%token <Lambdoc_reader_ast.command_t * string> ENTITY
%token EOF
%token <Lambdoc_reader_ast.command_t> GLYPH
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_EMPTY
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_RAW
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_RAW_RAW
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_RAW_SEQ
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_RAW_SEQOPT
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t> INLPAT_SEQ
%token <Lambdoc_reader_ast.command_t> INS
%token <Lambdoc_reader_ast.command_t> ITEM
%token <Lambdoc_reader_ast.command_t> LINEBREAK
%token <Lambdoc_reader_ast.command_t> LINK
%token <Lambdoc_reader_ast.command_t> MACROARG
%token <Lambdoc_reader_ast.command_t * Lambdoc_core_basic.Ident.t > MACROCALL
%token <Lambdoc_reader_ast.command_t> MACRODEF
%token <Lambdoc_reader_ast.command_t> MBOX
%token <Lambdoc_reader_ast.command_t> MREF
%token <Lambdoc_reader_ast.command_t> NEW_PAR
%token <Lambdoc_reader_ast.command_t> NOTES
%token OPEN_DUMMY
%token <Lambdoc_reader_ast.command_t> PARAGRAPH
%token <Lambdoc_reader_ast.command_t> PART
%token <Lambdoc_reader_ast.command_t> PICTURE
%token <Lambdoc_reader_ast.command_t * BatText.t> PLAIN
%token <Lambdoc_reader_ast.command_t> QUESTION
%token <Lambdoc_reader_ast.command_t> RANSWER
%token <BatText.t> RAW
%token <Lambdoc_reader_ast.command_t> ROW_END
%token <Lambdoc_reader_ast.command_t> RQUESTION
%token <Lambdoc_reader_ast.command_t> RULE
%token <Lambdoc_reader_ast.command_t * int> SECTION
%token <Lambdoc_reader_ast.command_t> SEE
%token <Lambdoc_reader_ast.command_t> SPAN
%token <Lambdoc_reader_ast.command_t> SREF
%token <Lambdoc_reader_ast.command_t> SUB
%token <Lambdoc_reader_ast.command_t> SUP
%token <Lambdoc_reader_ast.command_t> TBODY
%token <Lambdoc_reader_ast.command_t> TFOOT
%token <Lambdoc_reader_ast.command_t> THEAD
%token <Lambdoc_reader_ast.command_t> THEOREMDEF
%token <Lambdoc_reader_ast.command_t * int> TITLE
%token <Lambdoc_reader_ast.command_t> TOC
%type <Lambdoc_reader_ast.t> document
%%

option_foot_:
  
    {    ( None )}
| x = foot
    {    ( Some x )}

option_head_:
  
    {    ( None )}
| x = head
    {    ( Some x )}

option_inline_bundle_:
  
    {    ( None )}
| x = inline_bundle
    {    ( Some x )}

option_nonempty_list_inline__:
  
    {    ( None )}
| x = nonempty_list_inline_
    {    ( Some x )}

option_raw_bundle_:
  
    {    ( None )}
| x = raw_bundle
    {    ( Some x )}

list_anon_item_frag_:
  
    {    ( [] )}
| x = anon_item_frag xs = list_anon_item_frag_
    {    ( x :: xs )}

list_block_:
  
    {    ( [] )}
| x = block xs = list_block_
    {    ( x :: xs )}

list_body_:
  
    {    ( [] )}
| x = body xs = list_body_
    {    ( x :: xs )}

list_desc_item_frag_:
  
    {    ( [] )}
| x = desc_item_frag xs = list_desc_item_frag_
    {    ( x :: xs )}

list_inline_:
  
    {    ( [] )}
| x = inline xs = list_inline_
    {    ( x :: xs )}

list_inline_bundle_:
  
    {    ( [] )}
| x = inline_bundle xs = list_inline_bundle_
    {    ( x :: xs )}

list_qanda_frag_:
  
    {    ( [] )}
| x = qanda_frag xs = list_qanda_frag_
    {    ( x :: xs )}

list_raw_bundle_:
  
    {    ( [] )}
| x = raw_bundle xs = list_raw_bundle_
    {    ( x :: xs )}

list_row_:
  
    {    ( [] )}
| x = row xs = list_row_
    {    ( x :: xs )}

nonempty_list_body_:
  x = body
    {    ( [ x ] )}
| x = body xs = nonempty_list_body_
    {    ( x :: xs )}

nonempty_list_cell_:
  x = cell
    {    ( [ x ] )}
| x = cell xs = nonempty_list_cell_
    {    ( x :: xs )}

nonempty_list_inline_:
  x = inline
    {    ( [ x ] )}
| x = inline xs = nonempty_list_inline_
    {    ( x :: xs )}

nonempty_list_row_:
  x = row
    {    ( [ x ] )}
| x = row xs = nonempty_list_row_
    {    ( x :: xs )}

document:
  _1 = list_block_ _2 = EOF
    {                    (_1)}

block:
  _1 = NEW_PAR _2 = nonempty_list_inline_
    {                        ((_1, Ast.Paragraph _2))}
| _1 = simple_block
    {                        (_1)}
| _1 = env_block
    {                        (_1)}

simple_block:
  _1 = PARAGRAPH _2 = inline_bundle
    {                                                    ((_1, Ast.Paragraph _2))}
| _1 = PICTURE _2 = raw_bundle _3 = raw_bundle
    {                                                    ((_1, Ast.Picture (_2, _3)))}
| _1 = PART _2 = inline_bundle
    {                                                    ((_1, Ast.Part _2))}
| _1 = APPENDIX
    {                                                    ((_1, Ast.Appendix))}
| _1 = SECTION _2 = inline_bundle
    {                                                    (let (comm, level) = _1 in (comm, Ast.Section (level, _2)))}
| _1 = BIBLIOGRAPHY
    {                                                    ((_1, Ast.Bibliography))}
| _1 = NOTES
    {                                                    ((_1, Ast.Notes))}
| _1 = TOC
    {                                                    ((_1, Ast.Toc))}
| _1 = TITLE _2 = inline_bundle
    {                                                    (let (comm, level) = _1 in (comm, Ast.Title (level, _2)))}
| _1 = RULE
    {                                                    ((_1, Ast.Rule))}
| _1 = MACRODEF _2 = raw_bundle _3 = raw_bundle _4 = inline_bundle
    {                                                    ((_1, Ast.Macrodef (_2, _3, _4)))}
| _1 = BOXOUTDEF _2 = raw_bundle _3 = boxoutdef
    {                                                    (let (caption, counter) = _3 in (_1, Ast.Boxoutdef (_2, caption, counter)))}
| _1 = THEOREMDEF _2 = raw_bundle _3 = theoremdef
    {                                                    (let (caption, counter) = _3 in (_1, Ast.Theoremdef (_2, caption, counter)))}
| _1 = sim_blkpat
    {                                                    (let (comm, tag, blkpat) = _1 in (comm, Ast.Extcomm_blk (tag, blkpat)))}

env_block:
  _1 = begin_block_blk_itemize_ _2 = list_anon_item_frag_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Itemize _2))}
| _1 = begin_block_blk_enumerate_ _2 = list_anon_item_frag_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Enumerate _2))}
| _1 = begin_block_blk_description_ _2 = list_desc_item_frag_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Description _2))}
| _1 = begin_block_blk_qanda_ _2 = list_qanda_frag_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Qanda _2))}
| _1 = begin_block_blk_verse_ _2 = list_block_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Verse _2))}
| _1 = begin_block_blk_quote_ _2 = list_block_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Quote _2))}
| _1 = begin_block_blk_mathtex_blk_ _2 = RAW _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Mathtex_blk (BatText.to_string _2)))}
| _1 = begin_block_blk_mathml_blk_ _2 = RAW _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Mathml_blk (BatText.to_string _2)))}
| _1 = begin_block_blk_source_ _2 = RAW _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Source (BatText.to_string _2)))}
| _1 = begin_block_blk_tabular_ _2 = raw_bundle _3 = tabular _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Tabular (_2, _3)))}
| _1 = begin_block_blk_subpage_ _2 = list_block_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Subpage _2))}
| _1 = begin_block_blk_verbatim_ _2 = RAW _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Verbatim (BatText.to_string _2)))}
| _1 = begin_block_blk_pullquote_ _2 = option_inline_bundle_ _3 = list_block_ _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Pullquote (_2, _3)))}
| _1 = begin_block_blk_custom_ _2 = option_inline_bundle_ _3 = list_block_ _4 = end_block
    {                                                                        (let (comm, tag) = _1 in (comm, Ast.Custom (None, tag, _2, _3)))}
| _1 = begin_block_blk_equation_ _2 = option_inline_bundle_ _3 = block _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Equation (_2, _3)))}
| _1 = begin_block_blk_printout_ _2 = option_inline_bundle_ _3 = block _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Printout (_2, _3)))}
| _1 = begin_block_blk_table_ _2 = option_inline_bundle_ _3 = block _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Table (_2, _3)))}
| _1 = begin_block_blk_figure_ _2 = option_inline_bundle_ _3 = block _4 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Figure (_2, _3)))}
| _1 = begin_block_blk_abstract_ _2 = list_block_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Abstract _2))}
| _1 = begin_block_blk_bib_ _2 = bib_author _3 = bib_title _4 = bib_resource _5 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Bib {Ast.author = _2; Ast.title = _3; Ast.resource = _4}))}
| _1 = begin_block_blk_note_ _2 = list_block_ _3 = end_block
    {                                                                        (let (comm, _) = _1 in (comm, Ast.Note _2))}
| _1 = env_blkpat
    {                                                                        (let (comm, tag, blkpat) = _1 in (comm, Ast.Extcomm_blk (tag, blkpat)))}

anon_item_frag:
  _1 = ITEM _2 = list_block_
    {                                                ((_1, _2))}

desc_item_frag:
  _1 = ITEM _2 = inline_bundle _3 = list_block_
    {                                                ((_1, _2, _3))}

qanda_frag:
  _1 = QUESTION _2 = option_inline_bundle_ _3 = list_block_
    {                                                ((_1, Ast.New_questioner _2, _3))}
| _1 = RQUESTION _2 = list_block_
    {                                                ((_1, Ast.Same_questioner, _2))}
| _1 = ANSWER _2 = option_inline_bundle_ _3 = list_block_
    {                                                        ((_1, Ast.New_answerer _2, _3))}
| _1 = RANSWER _2 = list_block_
    {                                                ((_1, Ast.Same_answerer, _2))}

bib_author:
  _1 = BIB_AUTHOR _2 = inline_bundle
    {                                                ((_1, _2))}

bib_title:
  _1 = BIB_TITLE _2 = inline_bundle
    {                                                ((_1, _2))}

bib_resource:
  _1 = BIB_RESOURCE _2 = inline_bundle
    {                                                ((_1, _2))}

boxoutdef:
  
    {                                                ((None, None))}
| _1 = inline_bundle
    {                                                ((Some _1, None))}
| _1 = inline_bundle _2 = raw_bundle
    {                                                ((Some _1, Some _2))}

theoremdef:
  _1 = inline_bundle
    {                                                ((_1, None))}
| _1 = inline_bundle _2 = raw_bundle
    {                                                ((_1, Some _2))}

sim_blkpat:
  _1 = BLKPAT_EMPTY
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_empty))}
| _1 = BLKPAT_SEQ _2 = inline_bundle
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_seq _2))}
| _1 = BLKPAT_RAW _2 = raw_bundle
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_raw _2))}
| _1 = BLKPAT_RAW_RAW _2 = raw_bundle _3 = raw_bundle
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_raw_raw (_2, _3)))}

env_blkpat:
  _1 = begin_block_blkpat_lit_ _2 = RAW _3 = end_block
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_lit (BatText.to_string _2)))}
| _1 = begin_block_blkpat_frag_ _2 = list_block_ _3 = end_block
    {                                                (let (comm, tag) = _1 in (comm, tag, Ast.Blkpat_frag _2))}

tabular:
  _1 = option_head_ _2 = nonempty_list_body_ _3 = option_foot_
    {                                                ({Ast.thead = _1; Ast.tfoot = _3; Ast.tbodies = _2;})}
| _1 = row _2 = list_row_ _3 = list_body_ _4 = option_foot_
    {                                                ({Ast.thead = None; Ast.tfoot = _4; Ast.tbodies = (fst _1, _1 :: _2) :: _3;})}

head:
  _1 = THEAD _2 = nonempty_list_row_
    {                                                ((_1, _2))}

foot:
  _1 = TFOOT _2 = nonempty_list_row_
    {                                                ((_1, _2))}

body:
  _1 = TBODY _2 = nonempty_list_row_
    {                                                ((_1, _2))}

row:
  _1 = nonempty_list_cell_ _2 = ROW_END
    {                                                ((_2, _1))}

cell:
  _1 = CELL_MARK _2 = option_raw_bundle_ _3 = option_nonempty_list_inline__
    {                                                ((_1, _2, _3))}

inline:
  _1 = PLAIN
    {                                                                                    (let (comm, txt) = _1 in (comm, Ast.Plain (BatText.to_string txt)))}
| _1 = ENTITY
    {                                                                                    (let (comm, ent) = _1 in (comm, Ast.Entity ent))}
| _1 = LINEBREAK
    {                                                                                    ((_1, Ast.Linebreak))}
| _1 = BEGIN_MATHTEX_INL _2 = push_mathtex_inl_ _3 = OPEN_DUMMY _4 = RAW _5 = pop_brk _6 = END_MATHTEX_INL
    {                                                                                    ((_1, Ast.Mathtex_inl (BatText.to_string _4)))}
| _1 = BEGIN_MATHML_INL _2 = push_mathml_inl_ _3 = OPEN_DUMMY _4 = RAW _5 = pop_brk _6 = END_MATHML_INL
    {                                                                                    ((_1, Ast.Mathml_inl (BatText.to_string _4)))}
| _1 = GLYPH _2 = raw_bundle _3 = raw_bundle
    {                                                                                    ((_1, Ast.Glyph (_2, _3)))}
| _1 = BOLD _2 = inline_bundle
    {                                                                                    ((_1, Ast.Bold _2))}
| _1 = EMPH _2 = inline_bundle
    {                                                                                    ((_1, Ast.Emph _2))}
| _1 = CODE _2 = inline_bundle
    {                                                                                    ((_1, Ast.Code _2))}
| _1 = CAPS _2 = inline_bundle
    {                                                                                    ((_1, Ast.Caps _2))}
| _1 = INS _2 = inline_bundle
    {                                                                                    ((_1, Ast.Ins _2))}
| _1 = DEL _2 = inline_bundle
    {                                                                                    ((_1, Ast.Del _2))}
| _1 = SUP _2 = inline_bundle
    {                                                                                    ((_1, Ast.Sup _2))}
| _1 = SUB _2 = inline_bundle
    {                                                                                    ((_1, Ast.Sub _2))}
| _1 = MBOX _2 = inline_bundle
    {                                                                                    ((_1, Ast.Mbox _2))}
| _1 = SPAN _2 = inline_bundle
    {                                                                                    ((_1, Ast.Span _2))}
| _1 = LINK _2 = raw_bundle _3 = option_inline_bundle_
    {                                                                                    ((_1, Ast.Link (_2, _3)))}
| _1 = SEE _2 = list_raw_bundle_
    {                                                                                    ((_1, Ast.See _2))}
| _1 = CITE _2 = list_raw_bundle_
    {                                                                                    ((_1, Ast.Cite _2))}
| _1 = DREF _2 = raw_bundle _3 = option_inline_bundle_
    {                                                                                    ((_1, Ast.Dref (_2, _3)))}
| _1 = SREF _2 = raw_bundle _3 = option_inline_bundle_
    {                                                                                    ((_1, Ast.Sref (_2, _3)))}
| _1 = MREF _2 = raw_bundle _3 = inline_bundle
    {                                                                                    ((_1, Ast.Mref (_2, _3)))}
| _1 = MACROARG _2 = raw_bundle
    {                                                                                    ((_1, Ast.Macroarg _2))}
| _1 = MACROCALL _2 = list_inline_bundle_
    {                                                                                    (let (comm, label) = _1 in (comm, Ast.Macrocall (label, _2)))}
| _1 = sim_inlpat
    {                                                                                    (let (comm, tag, inlpat) = _1 in (comm, Ast.Extcomm_inl (tag, inlpat)))}

sim_inlpat:
  _1 = INLPAT_EMPTY
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_empty))}
| _1 = INLPAT_SEQ _2 = inline_bundle
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_seq _2))}
| _1 = INLPAT_RAW _2 = raw_bundle
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_raw _2))}
| _1 = INLPAT_RAW_RAW _2 = raw_bundle _3 = raw_bundle
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_raw_raw (_2, _3)))}
| _1 = INLPAT_RAW_SEQ _2 = raw_bundle _3 = inline_bundle
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_raw_seq (_2, _3)))}
| _1 = INLPAT_RAW_SEQOPT _2 = raw_bundle _3 = option_inline_bundle_
    {                                                    (let (comm, tag) = _1 in (comm, tag, Ast.Inlpat_raw_seqopt (_2, _3)))}

inline_bundle:
  _1 = BEGIN _2 = push_general_ _3 = OPEN_DUMMY _4 = list_inline_ _5 = pop_brk _6 = END
    {                                                                        (_4)}

raw_bundle:
  _1 = BEGIN _2 = push_raw_ _3 = OPEN_DUMMY _4 = RAW _5 = pop_brk _6 = END
    {                                                                        (BatText.to_string _4)}

begin_block_blk_abstract_:
  _1 = push_blk_blk_abstract_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_bib_:
  _1 = push_blk_blk_bib_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_custom_:
  _1 = push_blk_blk_custom_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_description_:
  _1 = push_blk_blk_description_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_enumerate_:
  _1 = push_blk_blk_enumerate_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_equation_:
  _1 = push_blk_blk_equation_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_figure_:
  _1 = push_blk_blk_figure_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_itemize_:
  _1 = push_blk_blk_itemize_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_mathml_blk_:
  _1 = push_blk_blk_mathml_blk_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_mathtex_blk_:
  _1 = push_blk_blk_mathtex_blk_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_note_:
  _1 = push_blk_blk_note_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_printout_:
  _1 = push_blk_blk_printout_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_pullquote_:
  _1 = push_blk_blk_pullquote_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_qanda_:
  _1 = push_blk_blk_qanda_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_quote_:
  _1 = push_blk_blk_quote_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_source_:
  _1 = push_blk_blk_source_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_subpage_:
  _1 = push_blk_blk_subpage_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_table_:
  _1 = push_blk_blk_table_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_tabular_:
  _1 = push_blk_blk_tabular_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_verbatim_:
  _1 = push_blk_blk_verbatim_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blk_verse_:
  _1 = push_blk_blk_verse_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blkpat_frag_:
  _1 = push_blk_blkpat_frag_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

begin_block_blkpat_lit_:
  _1 = push_blk_blkpat_lit_ _2 = BEGIN_DUMMY
    {                                                ((_2, _1))}

end_block:
  _1 = pop_blk _2 = END_BLOCK
    {                                                (_2)}

push_blk_blk_abstract_:
  _1 = blk_abstract
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_bib_:
  _1 = blk_bib
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_custom_:
  _1 = blk_custom
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_description_:
  _1 = blk_description
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_enumerate_:
  _1 = blk_enumerate
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_equation_:
  _1 = blk_equation
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_figure_:
  _1 = blk_figure
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_itemize_:
  _1 = blk_itemize
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_mathml_blk_:
  _1 = blk_mathml_blk
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_mathtex_blk_:
  _1 = blk_mathtex_blk
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_note_:
  _1 = blk_note
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_printout_:
  _1 = blk_printout
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_pullquote_:
  _1 = blk_pullquote
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_qanda_:
  _1 = blk_qanda
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_quote_:
  _1 = blk_quote
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_source_:
  _1 = blk_source
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_subpage_:
  _1 = blk_subpage
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_table_:
  _1 = blk_table
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_tabular_:
  _1 = blk_tabular
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_verbatim_:
  _1 = blk_verbatim
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blk_verse_:
  _1 = blk_verse
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blkpat_frag_:
  _1 = blkpat_frag
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_blk_blkpat_lit_:
  _1 = blkpat_lit
    {                                                (let (tag, scanner) = _1 in Globalenv.push (Some tag, scanner); tag)}

push_general_:
  _1 = general
    {                                                (Globalenv.push _1)}

push_mathml_inl_:
  _1 = mathml_inl
    {                                                (Globalenv.push _1)}

push_mathtex_inl_:
  _1 = mathtex_inl
    {                                                (Globalenv.push _1)}

push_raw_:
  _1 = raw
    {                                                (Globalenv.push _1)}

pop_blk:
  _1 = END_DUMMY
    {                                                (Globalenv.pop (Some _1))}

pop_brk:
  _1 = CLOSE_DUMMY
    {                                                (Globalenv.pop None)}

general:
  
    {                                                ((None, Scanner_general))}

raw:
  
    {                                                ((None, Scanner_raw))}

mathtex_inl:
  
    {                                                ((None, Scanner_mathtex_inl))}

mathml_inl:
  
    {                                                ((None, Scanner_mathml_inl))}

blk_itemize:
  _1 = BEGIN_ITEMIZE
    {                                                ((_1, Scanner_general))}

blk_enumerate:
  _1 = BEGIN_ENUMERATE
    {                                                ((_1, Scanner_general))}

blk_description:
  _1 = BEGIN_DESCRIPTION
    {                                                ((_1, Scanner_general))}

blk_qanda:
  _1 = BEGIN_QANDA
    {                                                ((_1, Scanner_general))}

blk_verse:
  _1 = BEGIN_VERSE
    {                                                ((_1, Scanner_general))}

blk_quote:
  _1 = BEGIN_QUOTE
    {                                                ((_1, Scanner_general))}

blk_mathtex_blk:
  _1 = BEGIN_MATHTEX_BLK
    {                                                ((_1, Scanner_literal _1))}

blk_mathml_blk:
  _1 = BEGIN_MATHML_BLK
    {                                                ((_1, Scanner_literal _1))}

blk_source:
  _1 = BEGIN_SOURCE
    {                                                ((_1, Scanner_literal _1))}

blk_tabular:
  _1 = BEGIN_TABULAR
    {                                                ((_1, Scanner_tabular))}

blk_subpage:
  _1 = BEGIN_SUBPAGE
    {                                                ((_1, Scanner_general))}

blk_verbatim:
  _1 = BEGIN_VERBATIM
    {                                                ((_1, Scanner_literal _1))}

blk_pullquote:
  _1 = BEGIN_PULLQUOTE
    {                                                ((_1, Scanner_general))}

blk_custom:
  _1 = BEGIN_CUSTOM
    {                                                ((_1, Scanner_general))}

blk_equation:
  _1 = BEGIN_EQUATION
    {                                                ((_1, Scanner_general))}

blk_printout:
  _1 = BEGIN_PRINTOUT
    {                                                ((_1, Scanner_general))}

blk_table:
  _1 = BEGIN_TABLE
    {                                                ((_1, Scanner_general))}

blk_figure:
  _1 = BEGIN_FIGURE
    {                                                ((_1, Scanner_general))}

blk_abstract:
  _1 = BEGIN_ABSTRACT
    {                                                ((_1, Scanner_general))}

blk_bib:
  _1 = BEGIN_BIB
    {                                                ((_1, Scanner_general))}

blk_note:
  _1 = BEGIN_NOTE
    {                                                ((_1, Scanner_general))}

blkpat_lit:
  _1 = BEGIN_BLKPAT_LIT
    {                                                ((_1, Scanner_literal _1))}

blkpat_frag:
  _1 = BEGIN_BLKPAT_FRAG
    {                                                ((_1, Scanner_general))}

%%
