File "leap_IGraphParser.mly", line 54, characters 7-10:
Warning: the token EOF is unused.
%{

(***********************************************************************)
(*                                                                     *)
(*                                 LEAP                                *)
(*                                                                     *)
(*               Alejandro Sanchez, IMDEA Software Institute           *)
(*                                                                     *)
(*                                                                     *)
(*      Copyright 2011 IMDEA Software Institute                        *)
(*                                                                     *)
(*  Licensed under the Apache License, Version 2.0 (the "License");    *)
(*  you may not use this file except in compliance with the License.   *)
(*  You may obtain a copy of the License at                            *)
(*                                                                     *)
(*      http://www.apache.org/licenses/LICENSE-2.0                     *)
(*                                                                     *)
(*  Unless required by applicable law or agreed to in writing,         *)
(*  software distributed under the License is distributed on an        *)
(*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       *)
(*  either express or implied.                                         *)
(*  See the License for the specific language governing permissions    *)
(*  and limitations under the License.                                 *)
(*                                                                     *)
(***********************************************************************)


(* Type rename *)

type case_t = Expression.pc_t         *
              Premise.t list          *
              Tag.f_tag list          *
              Tactics.proof_plan

(* slow way to project: traverse one time per entry *)
let get_name id = fst id
let get_line id = snd id



%}
%start axioms
%start graph
%start pvd_support
%token AXIOM_FORALL
%token BAR
%token CLOSE_BRACE
%token CLOSE_BRACK
%token CLOSE_PAREN
%token COLON
%token COMMA
%token CONC_ARROW
%token COND_ACCEPTANCE
%token COND_CONSECUTION
%token COND_FAIRNESS
%token COND_INITIATION
%token DOUBLECOLON
%token EOF
%token FACTS
%token <string*int> IDENT
%token <int> NUMBER
%token OPEN_BRACE
%token OPEN_BRACK
%token OPEN_PAREN
%token OTHERS_PREMISE
%token SELF_PREMISE
%token SEMICOLON
%token SEQ_ARROW
%token SMP_DNF
%token SMP_PRUNING
%token SMP_UNION
%token TACTICS
%type <Axioms.case_t> axiom_case
%type <Axioms.case_t list> axiom_case_list
%type <Axioms.case_t list> axiom_cases
%type <(Tag.f_tag * Axioms.axiom_kind_t) list> axiom_list
%type <Axioms.rule_t> axiom_rule
%type <Axioms.rule_t list> axiom_rule_list
%type <Axioms.t> axioms
%type <case_t> case
%type <case_t list> case_list
%type <case_t list> cases
%type <PVD.conditions_t> condition
%type <PVD.conditions_t list> condition_list
%type <(PVD.supp_line_t * Tag.f_tag list)> fact
%type <(PVD.supp_line_t * Tag.f_tag list) list> fact_list
%type <(Tactics.formula_split_tactic_t)> formula_split_tactic
%type <(Tactics.formula_split_tactic_t list)> formula_split_tactic_list
%type <(Tactics.formula_tactic_t)> formula_tactic
%type <(Tactics.formula_tactic_t list)> formula_tactic_list
%type <IGraph.t> graph
%type <string list> ident_list
%type <Tag.f_tag> inv
%type <Tag.f_tag list> inv_group
%type <Tag.f_tag list> inv_list
%type <(Tag.f_tag * Axioms.axiom_kind_t) list> maybe_empty_axiom_tag_list
%type <Tag.f_tag list> maybe_empty_tag_list
%type <Premise.t list> premise
%type <PVD.support_t> pvd_support
%type <IGraph.rule_t> rule
%type <IGraph.rule_t list> rule_list
%type <case_t> seq_case
%type <case_t list> seq_case_list
%type <case_t list> seq_cases
%type <(Smp.cutoff_strategy_t option)> smp_strategy
%type <(Tactics.support_split_tactic_t)> support_split_tactic
%type <(Tactics.support_split_tactic_t list)> support_split_tactic_list
%type <(Tactics.support_tactic_t)> support_tactic
%type <(Tactics.support_tactic_t list)> support_tactic_list
%type <(PVD.supp_line_t * Tactics.proof_plan)> tactic_case
%type <(PVD.supp_line_t * Tactics.proof_plan) list> tactic_case_list
%type <Tactics.proof_plan> tactics
%%

axioms:
  
    {    ( Axioms.empty_axioms() )}
| _1 = axiom_rule_list
    {    ( Axioms.new_axioms(_1) )}

axiom_rule_list:
  _1 = axiom_rule
    {    ( [_1] )}
| _1 = axiom_rule _2 = axiom_rule_list
    {    (
      let r = _1 in
      let rs = _2
      in
        r :: rs
    )}

axiom_rule:
  _1 = inv _2 = axiom_cases
    {    (
      let i = _1 in
      let cs = _2 in
        Axioms.new_rule i cs
    )}

axiom_cases:
  
    {    ( [] )}
| _1 = OPEN_BRACK _2 = axiom_case_list _3 = CLOSE_BRACK
    {    ( _2 )}

axiom_case_list:
  _1 = axiom_case
    {    ( [_1] )}
| _1 = axiom_case _2 = SEMICOLON _3 = axiom_case_list
    {    ( _1 :: _3 )}

axiom_case:
  _1 = NUMBER _2 = COLON _3 = maybe_empty_axiom_tag_list
    {    (
      let pc = _1 in
      let axiom_list = _3
      in
        Axioms.new_case pc axiom_list
    )}

maybe_empty_axiom_tag_list:
  
    {    ( [] )}
| _1 = axiom_list
    {    ( _1 )}

axiom_list:
  _1 = inv_group _2 = axiom_kind
    {    (
      let xs = _1 in
      let k = _2 in
      List.map (fun a -> (a,k)) xs
    )}
| _1 = inv _2 = axiom_kind
    {    ( [(_1, _2)] )}
| _1 = inv_group _2 = axiom_kind _3 = COMMA _4 = axiom_list
    {    (
      let axs = _1 in
      let k = _2 in
      let is = _4 in
      List.fold_left (fun xs a ->
        (a,k) :: xs
      ) is axs
    )}
| _1 = inv _2 = axiom_kind _3 = COMMA _4 = axiom_list
    {    (
      let i = _1 in
      let k = _2 in
      let is = _4
      in
        (i,k) :: is
    )}

axiom_kind:
  _1 = OPEN_PAREN _2 = AXIOM_FORALL _3 = CLOSE_PAREN
    {    ( Axioms.Forall )}
| 
    {    ( Axioms.Instantiate )}

pvd_support:
  _1 = TACTICS _2 = COLON _3 = tactic_case_list _4 = FACTS _5 = COLON _6 = fact_list
    {    (
      let tactics = _3 in
      let facts = _6 in
      PVD.new_support tactics facts
    )}

tactic_case_list:
  
    {    ( [] )}
| _1 = tactic_case _2 = tactic_case_list
    {    ( _1 :: _2 )}

tactic_case:
  _1 = tactics _2 = SEMICOLON
    {    ( (PVD.All, _1) )}
| _1 = NUMBER _2 = COLON _3 = tactics _4 = SEMICOLON
    {    ( (PVD.Trans _1, _3) )}
| _1 = NUMBER _2 = COLON _3 = condition _4 = COLON _5 = tactics _6 = SEMICOLON
    {    ( (PVD.TransSpec (_1,_3), _5) )}
| _1 = NUMBER _2 = COLON _3 = OPEN_BRACK _4 = ident_list _5 = BAR _6 = condition_list _7 = CLOSE_BRACK _8 = COLON _9 = tactics _10 = SEMICOLON
    {    ( (PVD.TransNodeSpec (_1,_4,_6), _9) )}

fact_list:
  
    {    ( [] )}
| _1 = fact _2 = fact_list
    {    ( _1 :: _2 )}

fact:
  _1 = inv_list _2 = SEMICOLON
    {    ( (PVD.All, _1) )}
| _1 = NUMBER _2 = COLON _3 = inv_list _4 = SEMICOLON
    {    ( (PVD.Trans _1, _3) )}
| _1 = NUMBER _2 = COLON _3 = condition _4 = COLON _5 = inv_list _6 = SEMICOLON
    {    ( (PVD.TransSpec (_1,_3), _5) )}

graph:
  
    {    ( IGraph.empty_igraph() )}
| _1 = rule_list
    {    ( IGraph.new_igraph(_1) )}

rule_list:
  _1 = rule
    {    ( [_1] )}
| _1 = rule _2 = rule_list
    {    (
      let r = _1 in
      let rs = _2
      in
        r :: rs
    )}

rule:
  _1 = maybe_empty_tag_list _2 = CONC_ARROW _3 = inv _4 = cases _5 = tactics
    {    (
      let sup = _1 in
      let i = _3 in
      let cs = _4 in
      let ts = _5 in
      (* LOG "Concurrent tactics size: %i" (List.length (Tactics.post_tacs ts)) LEVEL DEBUG; *)
        IGraph.new_rule IGraph.Concurrent sup i cs ts
    )}
| _1 = maybe_empty_tag_list _2 = SEQ_ARROW _3 = inv _4 = seq_cases _5 = tactics
    {    (
      let sup = _1 in
      let i = _3 in
      let cs = _4 in
      let ts = _5 in
      (* LOG "Sequential tactics size: %i" (List.length (Tactics.post_tacs ts)) LEVEL DEBUG; *)
        IGraph.new_rule IGraph.Sequential sup i cs ts
    )}

maybe_empty_tag_list:
  
    {    ( [] )}
| _1 = inv_list
    {    ( _1 )}

inv_list:
  _1 = inv_group
    {    ( _1 )}
| _1 = inv
    {    ( [_1] )}
| _1 = inv_group _2 = COMMA _3 = inv_list
    {    ( _1 @ _3 )}
| _1 = inv _2 = COMMA _3 = inv_list
    {    (
      let i = _1 in
      let is = _3
      in
        i :: is
    )}

inv_group:
  _1 = IDENT _2 = DOUBLECOLON _3 = OPEN_BRACE _4 = ident_list _5 = CLOSE_BRACE
    {    ( List.map (fun st -> Tag.new_tag (get_name _1) st) _4 )}

ident_list:
  _1 = IDENT
    {    ( [(get_name _1)] )}
| _1 = IDENT _2 = COMMA _3 = ident_list
    {    ( (get_name _1) :: _3 )}

inv:
  _1 = IDENT
    {    ( Tag.new_tag (get_name _1) "" )}
| _1 = IDENT _2 = DOUBLECOLON _3 = IDENT
    {    (
      Tag.new_tag (get_name _1) (get_name _3)
    )}

cases:
  
    {    ( [] )}
| _1 = OPEN_BRACK _2 = case_list _3 = CLOSE_BRACK
    {    ( _2 )}

seq_cases:
  
    {    ( [] )}
| _1 = OPEN_BRACK _2 = seq_case_list _3 = CLOSE_BRACK
    {    ( _2 )}

case_list:
  _1 = case
    {    ( [_1] )}
| _1 = case _2 = SEMICOLON _3 = case_list
    {    ( _1 :: _3 )}

seq_case_list:
  _1 = seq_case
    {    ( [_1] )}
| _1 = seq_case _2 = SEMICOLON _3 = seq_case_list
    {    ( _1 :: _3 )}

case:
  _1 = NUMBER _2 = COLON _3 = premise _4 = maybe_empty_tag_list _5 = tactics
    {    (
      let pc = _1 in
      let prem = _3 in
      let phi_list = _4 in
      let tacs = _5
      in
        (pc, prem, phi_list, tacs)
    )}

seq_case:
  _1 = NUMBER _2 = COLON _3 = maybe_empty_tag_list _4 = tactics
    {    (
      let pc = _1 in
      let phi_list = _3 in
      let tacs = _4
      in
        (pc, [Premise.SelfConseq], phi_list, tacs)
    )}

premise:
  
    {    ( [Premise.SelfConseq; Premise.OthersConseq] )}
| _1 = SELF_PREMISE _2 = COLON
    {    ( [Premise.SelfConseq] )}
| _1 = OTHERS_PREMISE _2 = COLON
    {    ( [Premise.OthersConseq] )}

condition:
  _1 = COND_INITIATION
    {    ( PVD.Initiation )}
| _1 = COND_CONSECUTION
    {    ( PVD.Consecution )}
| _1 = COND_ACCEPTANCE
    {    ( PVD.Acceptance )}
| _1 = COND_FAIRNESS
    {    ( PVD.Fairness )}

condition_list:
  _1 = condition
    {    ( [_1] )}
| _1 = condition _2 = COMMA _3 = condition_list
    {    ( _1 :: _3 )}

tactics:
  
    {    ( Tactics.new_proof_plan None [] [] [] [] )}
| _1 = OPEN_BRACE _2 = smp_strategy _3 = support_split_tactic_list _4 = support_tactic_list _5 = formula_split_tactic_list _6 = formula_tactic_list _7 = CLOSE_BRACE
    {    (
      Tactics.new_proof_plan _2 _3 _4 _5 _6
    )}

smp_strategy:
  
    {    ( None )}
| _1 = SMP_UNION _2 = COLON
    {    ( Some Smp.Union )}
| _1 = SMP_PRUNING _2 = COLON
    {    ( Some Smp.Pruning )}
| _1 = SMP_DNF _2 = COLON
    {    ( Some Smp.Dnf )}

support_split_tactic_list:
  _1 = BAR
    {    ( [] )}
| _1 = support_split_tactic _2 = support_split_tactic_list
    {    ( _1 :: _2 )}

support_tactic_list:
  _1 = BAR
    {    ( [] )}
| _1 = support_tactic _2 = support_tactic_list
    {    ( _1 :: _2 )}

formula_split_tactic_list:
  _1 = BAR
    {    ( [] )}
| _1 = formula_split_tactic _2 = formula_split_tactic_list
    {    ( _1 :: _2 )}

formula_tactic_list:
  
    {    ( [] )}
| _1 = formula_tactic _2 = formula_tactic_list
    {    ( _1 :: _2 )}

support_split_tactic:
  _1 = IDENT
    {    ( Tactics.support_split_tactic_from_string (get_name _1) )}

support_tactic:
  _1 = IDENT
    {    ( Tactics.support_tactic_from_string (get_name _1) )}

formula_split_tactic:
  _1 = IDENT
    {    ( Tactics.formula_split_tactic_from_string (get_name _1) )}

formula_tactic:
  _1 = IDENT
    {    ( Tactics.formula_tactic_from_string (get_name _1) )}

%%


