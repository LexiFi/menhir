State 0:
## Known stack suffix:
##
## LR(1) items:
invariant_list' -> . invariant_list [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On one_invariant shift to state 40
-- On invariant_list shift to state 42
## Reductions:

State 1:
## Known stack suffix:
## IDENT
## LR(1) items:
one_invariant -> IDENT . COLON conjunction_of_literals [ IDENT # ]
## Transitions:
-- On COLON shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
one_invariant -> IDENT COLON . conjunction_of_literals [ IDENT # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 18
-- On LOGICAL_FALSE shift to state 19
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal_list shift to state 26
-- On literal shift to state 27
-- On integer shift to state 30
-- On conjunction_of_literals shift to state 39
## Reductions:

State 3:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
integer -> OPEN_PAREN . integer CLOSE_PAREN [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 8
## Reductions:

State 4:
## Known stack suffix:
## NUMBER
## LR(1) items:
integer -> NUMBER . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> NUMBER
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> NUMBER
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
## Known stack suffix:
## MATH_MINUS
## LR(1) items:
integer -> MATH_MINUS . integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 7
## Reductions:

State 6:
## Known stack suffix:
## IDENT
## LR(1) items:
integer -> IDENT . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> IDENT
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 7:
## Known stack suffix:
## MATH_MINUS integer
## LR(1) items:
integer -> MATH_MINUS integer . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> MATH_MINUS integer
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> MATH_MINUS integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## OPEN_PAREN integer
## LR(1) items:
integer -> OPEN_PAREN integer . CLOSE_PAREN [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV CLOSE_PAREN ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV CLOSE_PAREN ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV CLOSE_PAREN ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV CLOSE_PAREN ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
-- On CLOSE_PAREN shift to state 17
## Reductions:

State 9:
## Known stack suffix:
## integer MATH_PLUS
## LR(1) items:
integer -> integer MATH_PLUS . integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## integer MATH_PLUS integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer MATH_PLUS integer . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On MATH_MULT shift to state 11
-- On MATH_DIV shift to state 13
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> integer MATH_PLUS integer
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> integer MATH_PLUS integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## integer MATH_MULT
## LR(1) items:
integer -> integer MATH_MULT . integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## integer MATH_MULT integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer MATH_MULT integer . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> integer MATH_MULT integer
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> integer MATH_MULT integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## integer MATH_DIV
## LR(1) items:
integer -> integer MATH_DIV . integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## integer MATH_DIV integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer MATH_DIV integer . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> integer MATH_DIV integer
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> integer MATH_DIV integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 15:
## Known stack suffix:
## integer MATH_MINUS
## LR(1) items:
integer -> integer MATH_MINUS . integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## integer MATH_MINUS integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer MATH_MINUS integer . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
-- On MATH_MULT shift to state 11
-- On MATH_DIV shift to state 13
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> integer MATH_MINUS integer
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> integer MATH_MINUS integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## OPEN_PAREN integer CLOSE_PAREN
## LR(1) items:
integer -> OPEN_PAREN integer CLOSE_PAREN . [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN #
--   reduce production integer -> OPEN_PAREN integer CLOSE_PAREN
** End-of-stream conflict on NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT EQUALS CLOSE_PAREN
**   There is a tension between
**   (1) reducing production integer -> OPEN_PAREN integer CLOSE_PAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 18:
## Known stack suffix:
## LOGICAL_TRUE
## LR(1) items:
conjunction_of_literals -> LOGICAL_TRUE . [ IDENT # ]
## Transitions:
## Reductions:
-- On IDENT #
--   reduce production conjunction_of_literals -> LOGICAL_TRUE
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production conjunction_of_literals -> LOGICAL_TRUE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## LOGICAL_FALSE
## LR(1) items:
conjunction_of_literals -> LOGICAL_FALSE . [ IDENT # ]
## Transitions:
## Reductions:
-- On IDENT #
--   reduce production conjunction_of_literals -> LOGICAL_FALSE
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production conjunction_of_literals -> LOGICAL_FALSE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## term
## LR(1) items:
literal -> term . EQUALS term [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> term . NOT_EQUALS term [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On NOT_EQUALS shift to state 21
-- On EQUALS shift to state 24
## Reductions:

State 21:
## Known stack suffix:
## term NOT_EQUALS
## LR(1) items:
literal -> term NOT_EQUALS . term [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On term shift to state 22
-- On integer shift to state 23
## Reductions:

State 22:
## Known stack suffix:
## term NOT_EQUALS term
## LR(1) items:
literal -> term NOT_EQUALS term . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> term NOT_EQUALS term
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> term NOT_EQUALS term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
term -> integer . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production term -> integer
** End-of-stream conflict on MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production term -> integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## term EQUALS
## LR(1) items:
literal -> term EQUALS . term [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On term shift to state 25
-- On integer shift to state 23
## Reductions:

State 25:
## Known stack suffix:
## term EQUALS term
## LR(1) items:
literal -> term EQUALS term . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> term EQUALS term
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> term EQUALS term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## literal_list
## LR(1) items:
conjunction_of_literals -> literal_list . [ IDENT # ]
## Transitions:
## Reductions:
-- On IDENT #
--   reduce production conjunction_of_literals -> literal_list
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production conjunction_of_literals -> literal_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
## Known stack suffix:
## literal
## LR(1) items:
literal_list -> literal . [ IDENT # ]
literal_list -> literal . LOGICAL_AND literal_list [ IDENT # ]
## Transitions:
-- On LOGICAL_AND shift to state 28
## Reductions:
-- On IDENT #
--   reduce production literal_list -> literal
** End-of-stream conflict on LOGICAL_AND IDENT
**   There is a tension between
**   (1) reducing production literal_list -> literal
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## literal LOGICAL_AND
## LR(1) items:
literal_list -> literal LOGICAL_AND . literal_list [ IDENT # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal_list shift to state 29
-- On literal shift to state 27
-- On integer shift to state 30
## Reductions:

State 29:
## Known stack suffix:
## literal LOGICAL_AND literal_list
## LR(1) items:
literal_list -> literal LOGICAL_AND literal_list . [ IDENT # ]
## Transitions:
## Reductions:
-- On IDENT #
--   reduce production literal_list -> literal LOGICAL_AND literal_list
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production literal_list -> literal LOGICAL_AND literal_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 30:
## Known stack suffix:
## integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS ]
literal -> integer . MATH_LESS integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer . MATH_GREATER integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer . MATH_LESS_EQ integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer . MATH_GREATER_EQ integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
term -> integer . [ NOT_EQUALS EQUALS ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_LESS_EQ shift to state 31
-- On MATH_LESS shift to state 33
-- On MATH_GREATER_EQ shift to state 35
-- On MATH_GREATER shift to state 37
-- On MATH_DIV shift to state 13
## Reductions:
-- On NOT_EQUALS EQUALS
--   reduce production term -> integer

State 31:
## Known stack suffix:
## integer MATH_LESS_EQ
## LR(1) items:
literal -> integer MATH_LESS_EQ . integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## integer MATH_LESS_EQ integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer MATH_LESS_EQ integer . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> integer MATH_LESS_EQ integer
** End-of-stream conflict on MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> integer MATH_LESS_EQ integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 33:
## Known stack suffix:
## integer MATH_LESS
## LR(1) items:
literal -> integer MATH_LESS . integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## integer MATH_LESS integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer MATH_LESS integer . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> integer MATH_LESS integer
** End-of-stream conflict on MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> integer MATH_LESS integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 35:
## Known stack suffix:
## integer MATH_GREATER_EQ
## LR(1) items:
literal -> integer MATH_GREATER_EQ . integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## integer MATH_GREATER_EQ integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer MATH_GREATER_EQ integer . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> integer MATH_GREATER_EQ integer
** End-of-stream conflict on MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> integer MATH_GREATER_EQ integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 37:
## Known stack suffix:
## integer MATH_GREATER
## LR(1) items:
literal -> integer MATH_GREATER . integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 3
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On IDENT shift to state 6
-- On integer shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## integer MATH_GREATER integer
## LR(1) items:
integer -> integer . MATH_PLUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MINUS integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_MULT integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> integer . MATH_DIV integer [ MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
literal -> integer MATH_GREATER integer . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_DIV shift to state 13
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production literal -> integer MATH_GREATER integer
** End-of-stream conflict on MATH_PLUS MATH_MULT MATH_MINUS MATH_DIV LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production literal -> integer MATH_GREATER integer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 39:
## Known stack suffix:
## IDENT COLON conjunction_of_literals
## LR(1) items:
one_invariant -> IDENT COLON conjunction_of_literals . [ IDENT # ]
## Transitions:
## Reductions:
-- On IDENT #
--   reduce production one_invariant -> IDENT COLON conjunction_of_literals
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production one_invariant -> IDENT COLON conjunction_of_literals
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 40:
## Known stack suffix:
## one_invariant
## LR(1) items:
invariant_list -> one_invariant . [ # ]
invariant_list -> one_invariant . invariant_list [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On one_invariant shift to state 40
-- On invariant_list shift to state 41
## Reductions:
-- On #
--   reduce production invariant_list -> one_invariant
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production invariant_list -> one_invariant
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 41:
## Known stack suffix:
## one_invariant invariant_list
## LR(1) items:
invariant_list -> one_invariant invariant_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production invariant_list -> one_invariant invariant_list

State 42:
## Known stack suffix:
## invariant_list
## LR(1) items:
invariant_list' -> invariant_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept invariant_list

State 43:
## Known stack suffix:
##
## LR(1) items:
specification' -> . specification [ # ]
## Transitions:
-- On IDENT shift to state 44
-- On specification shift to state 64
-- On one_spec shift to state 65
## Reductions:

State 44:
## Known stack suffix:
## IDENT
## LR(1) items:
one_spec -> IDENT . COLON formula [ IDENT # ]
## Transitions:
-- On COLON shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
one_spec -> IDENT COLON . formula [ IDENT # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 63
## Reductions:

State 46:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
formula -> OPEN_PAREN . formula CLOSE_PAREN [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
integer -> OPEN_PAREN . integer CLOSE_PAREN [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 52
-- On formula shift to state 53
## Reductions:

State 47:
## Known stack suffix:
## LOGICAL_TRUE
## LR(1) items:
formula -> LOGICAL_TRUE . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> LOGICAL_TRUE
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> LOGICAL_TRUE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 48:
## Known stack suffix:
## LOGICAL_NOT
## LR(1) items:
formula -> LOGICAL_NOT . formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 51
## Reductions:

State 49:
## Known stack suffix:
## LOGICAL_FALSE
## LR(1) items:
formula -> LOGICAL_FALSE . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> LOGICAL_FALSE
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> LOGICAL_FALSE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 50:
## Known stack suffix:
## literal
## LR(1) items:
formula -> literal . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> literal
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> literal
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 51:
## Known stack suffix:
## LOGICAL_NOT formula
## LR(1) items:
formula -> LOGICAL_NOT formula . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> LOGICAL_NOT formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> LOGICAL_NOT formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 52:
## Known stack suffix:
## OPEN_PAREN integer
## LR(1) items:
integer -> OPEN_PAREN integer . CLOSE_PAREN [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
integer -> integer . MATH_PLUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
integer -> integer . MATH_MINUS integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
integer -> integer . MATH_MULT integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
integer -> integer . MATH_DIV integer [ NOT_EQUALS MATH_PLUS MATH_MULT MATH_MINUS MATH_LESS_EQ MATH_LESS MATH_GREATER_EQ MATH_GREATER MATH_DIV EQUALS CLOSE_PAREN ]
literal -> integer . MATH_LESS integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
literal -> integer . MATH_GREATER integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
literal -> integer . MATH_LESS_EQ integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
literal -> integer . MATH_GREATER_EQ integer [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
term -> integer . [ NOT_EQUALS EQUALS ]
## Transitions:
-- On MATH_PLUS shift to state 9
-- On MATH_MULT shift to state 11
-- On MATH_MINUS shift to state 15
-- On MATH_LESS_EQ shift to state 31
-- On MATH_LESS shift to state 33
-- On MATH_GREATER_EQ shift to state 35
-- On MATH_GREATER shift to state 37
-- On MATH_DIV shift to state 13
-- On CLOSE_PAREN shift to state 17
## Reductions:
-- On NOT_EQUALS EQUALS
--   reduce production term -> integer

State 53:
## Known stack suffix:
## OPEN_PAREN formula
## LR(1) items:
formula -> OPEN_PAREN formula . CLOSE_PAREN [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND CLOSE_PAREN ]
## Transitions:
-- On LOGICAL_THEN shift to state 54
-- On LOGICAL_OR shift to state 58
-- On LOGICAL_IFF shift to state 56
-- On LOGICAL_AND shift to state 60
-- On CLOSE_PAREN shift to state 62
## Reductions:

State 54:
## Known stack suffix:
## formula LOGICAL_THEN
## LR(1) items:
formula -> formula LOGICAL_THEN . formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## formula LOGICAL_THEN formula
## LR(1) items:
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula LOGICAL_THEN formula . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On LOGICAL_THEN shift to state 54
-- On LOGICAL_IFF shift to state 56
## Reductions:
-- On LOGICAL_OR LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> formula LOGICAL_THEN formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> formula LOGICAL_THEN formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 56:
## Known stack suffix:
## formula LOGICAL_IFF
## LR(1) items:
formula -> formula LOGICAL_IFF . formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## formula LOGICAL_IFF formula
## LR(1) items:
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula LOGICAL_IFF formula . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On LOGICAL_IFF shift to state 56
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> formula LOGICAL_IFF formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> formula LOGICAL_IFF formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 58:
## Known stack suffix:
## formula LOGICAL_OR
## LR(1) items:
formula -> formula LOGICAL_OR . formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## formula LOGICAL_OR formula
## LR(1) items:
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula LOGICAL_OR formula . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On LOGICAL_THEN shift to state 54
-- On LOGICAL_OR shift to state 58
-- On LOGICAL_IFF shift to state 56
## Reductions:
-- On LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> formula LOGICAL_OR formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> formula LOGICAL_OR formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
## Known stack suffix:
## formula LOGICAL_AND
## LR(1) items:
formula -> formula LOGICAL_AND . formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 46
-- On NUMBER shift to state 4
-- On MATH_MINUS shift to state 5
-- On LOGICAL_TRUE shift to state 47
-- On LOGICAL_NOT shift to state 48
-- On LOGICAL_FALSE shift to state 49
-- On IDENT shift to state 6
-- On term shift to state 20
-- On literal shift to state 50
-- On integer shift to state 30
-- On formula shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## formula LOGICAL_AND formula
## LR(1) items:
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula LOGICAL_AND formula . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
-- On LOGICAL_THEN shift to state 54
-- On LOGICAL_OR shift to state 58
-- On LOGICAL_IFF shift to state 56
-- On LOGICAL_AND shift to state 60
## Reductions:
-- On IDENT CLOSE_PAREN #
--   reduce production formula -> formula LOGICAL_AND formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> formula LOGICAL_AND formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 62:
## Known stack suffix:
## OPEN_PAREN formula CLOSE_PAREN
## LR(1) items:
formula -> OPEN_PAREN formula CLOSE_PAREN . [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN # ]
## Transitions:
## Reductions:
-- On LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN #
--   reduce production formula -> OPEN_PAREN formula CLOSE_PAREN
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT CLOSE_PAREN
**   There is a tension between
**   (1) reducing production formula -> OPEN_PAREN formula CLOSE_PAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 63:
## Known stack suffix:
## IDENT COLON formula
## LR(1) items:
formula -> formula . LOGICAL_AND formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT # ]
formula -> formula . LOGICAL_OR formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT # ]
formula -> formula . LOGICAL_THEN formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT # ]
formula -> formula . LOGICAL_IFF formula [ LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT # ]
one_spec -> IDENT COLON formula . [ IDENT # ]
## Transitions:
-- On LOGICAL_THEN shift to state 54
-- On LOGICAL_OR shift to state 58
-- On LOGICAL_IFF shift to state 56
-- On LOGICAL_AND shift to state 60
## Reductions:
-- On IDENT #
--   reduce production one_spec -> IDENT COLON formula
** End-of-stream conflict on LOGICAL_THEN LOGICAL_OR LOGICAL_IFF LOGICAL_AND IDENT
**   There is a tension between
**   (1) reducing production one_spec -> IDENT COLON formula
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 64:
## Known stack suffix:
## specification
## LR(1) items:
specification' -> specification . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept specification

State 65:
## Known stack suffix:
## one_spec
## LR(1) items:
specification -> one_spec . [ # ]
specification -> one_spec . specification [ # ]
## Transitions:
-- On IDENT shift to state 44
-- On specification shift to state 66
-- On one_spec shift to state 65
## Reductions:
-- On #
--   reduce production specification -> one_spec
** End-of-stream conflict on IDENT
**   There is a tension between
**   (1) reducing production specification -> one_spec
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 66:
## Known stack suffix:
## one_spec specification
## LR(1) items:
specification -> one_spec specification . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production specification -> one_spec specification

