File "leap_SpecParser.mly", line 53, characters 7-10:
Warning: the token EOF is unused.
%{

(***********************************************************************)
(*                                                                     *)
(*                                 LEAP                                *)
(*                                                                     *)
(*               Alejandro Sanchez, IMDEA Software Institute           *)
(*                                                                     *)
(*                                                                     *)
(*      Copyright 2011 IMDEA Software Institute                        *)
(*                                                                     *)
(*  Licensed under the Apache License, Version 2.0 (the "License");    *)
(*  you may not use this file except in compliance with the License.   *)
(*  You may obtain a copy of the License at                            *)
(*                                                                     *)
(*      http://www.apache.org/licenses/LICENSE-2.0                     *)
(*                                                                     *)
(*  Unless required by applicable law or agreed to in writing,         *)
(*  software distributed under the License is distributed on an        *)
(*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       *)
(*  either express or implied.                                         *)
(*  See the License for the specific language governing permissions    *)
(*  and limitations under the License.                                 *)
(*                                                                     *)
(***********************************************************************)

open Printf

open LeapLib
open Global
open Hashtbl

module Expr = Expression
module NumExpr = NumExpression
module F = Formula

let get_name id = fst id
let get_line id = snd id

%}
%start invariant_list
%start specification
%token CLOSE_PAREN
%token COLON
%token EOF
%token EQUALS
%token <string*int> IDENT
%token LOGICAL_AND
%token LOGICAL_FALSE
%token LOGICAL_IFF
%token LOGICAL_NOT
%token LOGICAL_OR
%token LOGICAL_THEN
%token LOGICAL_TRUE
%token MATH_DIV
%token MATH_GREATER
%token MATH_GREATER_EQ
%token MATH_LESS
%token MATH_LESS_EQ
%token MATH_MINUS
%token MATH_MULT
%token MATH_PLUS
%token NOT_EQUALS
%token <int> NUMBER
%token OPEN_PAREN
%nonassoc EQUALS MATH_GREATER MATH_GREATER_EQ MATH_LESS MATH_LESS_EQ NOT_EQUALS
%nonassoc IDENT
%right LOGICAL_AND
%right LOGICAL_OR
%right LOGICAL_THEN
%right LOGICAL_IFF
%nonassoc LOGICAL_NOT
%left MATH_MINUS MATH_PLUS
%left MATH_DIV MATH_MULT
%right MATH_NEG
%type <NumExpression.conjunctive_formula> conjunction_of_literals
%type <NumExpression.formula> formula
%type <NumExpression.integer> integer
%type <(string * (NumExpression.conjunctive_formula)) list> invariant_list
%type <NumExpression.literal> literal
%type <NumExpression.literal list> literal_list
%type <(string * NumExpression.conjunctive_formula)> one_invariant
%type <(string * NumExpression.formula)> one_spec
%type <(string * NumExpression.formula) list> specification
%type <NumExpression.term> term
%%

specification:
  _1 = one_spec
    {( [_1] )}
| _1 = one_spec _2 = specification
    {( _1::_2 )}

one_spec:
  _1 = IDENT _2 = COLON _3 = formula
    {( (get_name _1,_3) )}

invariant_list:
  _1 = one_invariant
    {  (  [ _1 ] )}
| _1 = one_invariant _2 = invariant_list
    {  (  _1::_2 )}

one_invariant:
  _1 = IDENT _2 = COLON _3 = conjunction_of_literals
    {   (   (get_name _1,_3) )}

formula:
  _1 = OPEN_PAREN _2 = formula _3 = CLOSE_PAREN
    {      ( _2 )}
| _1 = literal
    {      ( F.Literal _1 )}
| _1 = LOGICAL_TRUE
    {      ( F.True )}
| _1 = LOGICAL_FALSE
    {      ( F.False )}
| _1 = LOGICAL_NOT _2 = formula
    {      ( F.Not _2 )}
| _1 = formula _2 = LOGICAL_AND _3 = formula
    {      ( F.And (_1, _3) )}
| _1 = formula _2 = LOGICAL_OR _3 = formula
    {      ( F.Or (_1, _3) )}
| _1 = formula _2 = LOGICAL_THEN _3 = formula
    {      ( F.Implies (_1, _3) )}
| _1 = formula _2 = LOGICAL_IFF _3 = formula
    {      ( F.Iff (_1, _3) )}

conjunction_of_literals:
  _1 = LOGICAL_FALSE
    {      ( F.FalseConj )}
| _1 = LOGICAL_TRUE
    {      ( F.TrueConj )}
| _1 = literal_list
    {      ( F.Conj _1 )}

literal_list:
  _1 = literal
    {      ( [_1] )}
| _1 = literal _2 = LOGICAL_AND _3 = literal_list
    {      ( _1::_3 )}

literal:
  _1 = integer _2 = MATH_LESS _3 = integer
    {    (
      F.Atom (NumExpr.Less (_1, _3))
    )}
| _1 = integer _2 = MATH_GREATER _3 = integer
    {    (
      F.Atom (NumExpr.Greater (_1, _3))
    )}
| _1 = integer _2 = MATH_LESS_EQ _3 = integer
    {    (
      F.Atom (NumExpr.LessEq (_1, _3))
    )}
| _1 = integer _2 = MATH_GREATER_EQ _3 = integer
    {    (
      F.Atom (NumExpr.GreaterEq (_1, _3))
    )}
| _1 = term _2 = EQUALS _3 = term
    {    (
      F.Atom (NumExpr.Eq(_1,_3))
    )}
| _1 = term _2 = NOT_EQUALS _3 = term
    {    (
      F.Atom (NumExpr.InEq(_1,_3))
    )}

term:
  _1 = integer
    {    ( NumExpr.IntV _1 )}

integer:
  _1 = IDENT
    {      (
        let v = NumExpr.build_var (get_name _1) NumExpr.Int false
                                  NumExpr.V.Shared NumExpr.V.GlobalScope
        in
          NumExpr.Var v
      )}
| _1 = OPEN_PAREN _2 = integer _3 = CLOSE_PAREN
    {    ( _2 )}
| _1 = NUMBER
    {    ( NumExpr.Val _1 )}
| _1 = MATH_MINUS _2 = integer %prec MATH_NEG
    {    (
      NumExpr.Neg _2
    )}
| _1 = integer _2 = MATH_PLUS _3 = integer
    {    (
      NumExpr.Add (_1,_3)
    )}
| _1 = integer _2 = MATH_MINUS _3 = integer
    {    (
      NumExpr.Sub (_1,_3)
    )}
| _1 = integer _2 = MATH_MULT _3 = integer
    {    (
      NumExpr.Mul (_1,_3)
    )}
| _1 = integer _2 = MATH_DIV _3 = integer
    {    (
      NumExpr.Div (_1,_3)
    )}

%%
