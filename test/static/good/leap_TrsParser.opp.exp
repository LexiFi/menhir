File "leap_TrsParser.mly", line 59, characters 7-10:
Warning: the token EOF is unused.
%{

(***********************************************************************)
(*                                                                     *)
(*                                 LEAP                                *)
(*                                                                     *)
(*               Alejandro Sanchez, IMDEA Software Institute           *)
(*                                                                     *)
(*                                                                     *)
(*      Copyright 2011 IMDEA Software Institute                        *)
(*                                                                     *)
(*  Licensed under the Apache License, Version 2.0 (the "License");    *)
(*  you may not use this file except in compliance with the License.   *)
(*  You may obtain a copy of the License at                            *)
(*                                                                     *)
(*      http://www.apache.org/licenses/LICENSE-2.0                     *)
(*                                                                     *)
(*  Unless required by applicable law or agreed to in writing,         *)
(*  software distributed under the License is distributed on an        *)
(*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       *)
(*  either express or implied.                                         *)
(*  See the License for the specific language governing permissions    *)
(*  and limitations under the License.                                 *)
(*                                                                     *)
(***********************************************************************)

open Printf

open LeapLib
open Global

module Expr = Expression


exception WrongType of Expr.term


(* slow way to project: traverse one time per entry *)
let get_name id = fst id
let get_line id = snd id


let inv_table = Hashtbl.create 100


%}
%start conj_list
%start exists_projector
%start invariant_info
%token ANSWER
%token AT
%token CLOSE_PAREN
%token DOUBLE_UNDERSCORE
%token EOF
%token EQUALS
%token FALSE
%token GREATER_EQ
%token <string*int> IDENT
%token INVARIANT
%token LESS_EQ
%token LOC
%token LOGICAL_AND
%token MATH_DIV
%token MATH_MINUS
%token MATH_MULT
%token MATH_PLUS
%token <int> NUMBER
%token OPEN_PAREN
%token PRIME
%token TRUE
%token UNDERSCORE
%right LOGICAL_AND
%left MATH_MINUS MATH_PLUS
%left MATH_DIV MATH_MULT
%right MATH_NEG
%type <Expression.formula list> conj_list
%type <Expression.formula> exists_projector
%type <Expr.integer> integer
%type <(int list * Expr.formula)> invariant
%type <(int list, Expression.formula) Hashtbl.t> invariant_info
%type <unit> invariant_list
%type <Expr.formula> literal
%type <int list> pos_list
%type <bool> primed
%type <Expr.tid option> th_param
%%

exists_projector:
  _1 = ANSWER _2 = OPEN_PAREN _3 = conj_list _4 = CLOSE_PAREN
    {    (
      Expr.conj_list _3
    )}

invariant_info:
  _1 = invariant_list
    {    (
      let copy = Hashtbl.copy inv_table in
      let _    = Hashtbl.clear inv_table
      in
        copy
    )}

invariant_list:
  
    {    ( () )}
| _1 = invariant _2 = invariant_list
    {    (
      let (loc,inv) = _1 in
      let _ = Hashtbl.add inv_table loc inv in
        ()
    )}

invariant:
  _1 = INVARIANT _2 = AT _3 = LOC _4 = UNDERSCORE _5 = pos_list _6 = OPEN_PAREN _7 = conj_list _8 = CLOSE_PAREN
    {    (
      let p_list = _5 in
      let expr  = _7 in

      (p_list, Expr.conj_list expr)
    )}

pos_list:
  _1 = NUMBER
    {    ( [_1] )}
| _1 = NUMBER _2 = UNDERSCORE _3 = pos_list
    {    ( _1 :: _3 )}

conj_list:
  _1 = literal
    {    ( [_1] )}
| _1 = literal _2 = LOGICAL_AND _3 = conj_list
    {    ( _1 :: _3 )}

literal:
  _1 = TRUE
    {    ( Expr.True )}
| _1 = FALSE
    {    ( Expr.False )}
| _1 = integer _2 = EQUALS _3 = integer
    {    (
      let n1 = _1 in
      let n2 = _3 in

      Expr.eq_int n1 n2
    )}
| _1 = integer _2 = LESS_EQ _3 = integer
    {    (
      let n1 = _1 in
      let n2 = _3 in

      Expr.lesseq_form n1 n2
    )}
| _1 = integer _2 = GREATER_EQ _3 = integer
    {    (
      let n1 = _1 in
      let n2 = _3 in

      Expr.greatereq_form n1 n2
    )}

th_param:
  
    {    (
      None
    )}
| _1 = DOUBLE_UNDERSCORE _2 = NUMBER
    {    (
      Some (Expr.VarTh (Expr.build_num_tid_var _2))
    )}
| _1 = DOUBLE_UNDERSCORE _2 = IDENT
    {    (
      let id = get_name _2
      in
        Some (Expr.VarTh (Expr.build_global_var id Expr.Tid))
    )}

primed:
  
    {    ( false )}
| _1 = PRIME
    {    ( true )}

integer:
  _1 = NUMBER
    {    (
      Expr.IntVal _1
    )}
| _1 = IDENT _2 = th_param _3 = primed
    {    (
      let id         = get_name _1 in
      let pr         = _3 in
      let th         = _2 in
      let proc_owner = None in
      let kind       = Expr.Normal in

      Expr.VarInt (Expr.build_var id Expr.Int pr th proc_owner kind)
    )}
| _1 = IDENT _2 = UNDERSCORE _3 = IDENT _4 = th_param _5 = primed
    {    (
      let id         = get_name _3 in
      let pr         = _5 in
      let th         = _4 in
      let proc_owner = Some (get_name _1) in
      let kind       = Expr.Normal in

      Expr.VarInt (Expr.build_var id Expr.Int pr th proc_owner kind)
    )}
| _1 = MATH_MINUS _2 = integer %prec MATH_NEG
    {    (
      Expr.IntNeg _2
    )}
| _1 = integer _2 = MATH_PLUS _3 = integer
    {    (
      Expr.IntAdd (_1, _3)
    )}
| _1 = integer _2 = MATH_MINUS _3 = integer
    {    (
      Expr.IntSub (_1, _3)
    )}
| _1 = integer _2 = MATH_MULT _3 = integer
    {    (
      Expr.IntMul (_1, _3)
    )}
| _1 = integer _2 = MATH_DIV _3 = integer
    {    (
      Expr.IntDiv (_1, _3)
    )}

%%


