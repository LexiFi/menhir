State 0:
## Known stack suffix:
##
## LR(1) items:
generic_model' -> . generic_model [ # ]
## Transitions:
-- On OPEN_PAREN shift to state 1
-- On generic_model shift to state 70
-- On assertion_list shift to state 71
-- On assertion shift to state 72
## Reductions:

State 1:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
assertion -> OPEN_PAREN . EQUAL record NUMBER CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL var var CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL var value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL value var CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN . EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On EQUAL shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## OPEN_PAREN EQUAL
## LR(1) items:
assertion -> OPEN_PAREN EQUAL . record NUMBER CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . var var CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . var value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . value var CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL . OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 4
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On IDENT shift to state 45
-- On ERROR shift to state 46
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On var shift to state 58
-- On value shift to state 63
-- On record shift to state 67
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 3:
## Known stack suffix:
## TID_ELEM
## LR(1) items:
constant -> TID_ELEM . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TID_ELEM

State 4:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN . SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN . SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN . SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN . SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
record -> OPEN_PAREN . MK_RECORD field_list CLOSE_PAREN [ OPEN_PAREN NUMBER IDENT ERROR ]
var -> OPEN_PAREN . fun_name param_list CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM BOOL ADDR_ELEM ]
var -> OPEN_PAREN . fun_name record CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM BOOL ADDR_ELEM ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On SELECT shift to state 5
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MK_RECORD shift to state 10
-- On MINUS shift to state 13
-- On IDENT shift to state 24
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On number shift to state 18
-- On fun_name shift to state 25
-- On constant shift to state 33
## Reductions:

State 5:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT . NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT . NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT . sel IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT . sel NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 6
-- On NUMBER shift to state 34
-- On IDENT shift to state 45
-- On ERROR shift to state 46
-- On var shift to state 47
-- On sel shift to state 48
-- On record shift to state 57
## Reductions:

State 6:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
record -> OPEN_PAREN . MK_RECORD field_list CLOSE_PAREN [ NUMBER IDENT CLOSE_PAREN ]
var -> OPEN_PAREN . fun_name param_list CLOSE_PAREN [ NUMBER IDENT CLOSE_PAREN ]
var -> OPEN_PAREN . fun_name record CLOSE_PAREN [ NUMBER IDENT CLOSE_PAREN ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MK_RECORD shift to state 10
-- On MINUS shift to state 13
-- On IDENT shift to state 24
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On number shift to state 18
-- On fun_name shift to state 25
-- On constant shift to state 33
## Reductions:

State 7:
## Known stack suffix:
## NUMBER
## LR(1) items:
number -> NUMBER . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production number -> NUMBER

State 8:
## Known stack suffix:
## NULL
## LR(1) items:
constant -> NULL . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> NULL

State 9:
## Known stack suffix:
## NO_THREAD
## LR(1) items:
constant -> NO_THREAD . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> NO_THREAD

State 10:
## Known stack suffix:
## OPEN_PAREN MK_RECORD
## LR(1) items:
record -> OPEN_PAREN MK_RECORD . field_list CLOSE_PAREN [ OPEN_PAREN NUMBER IDENT ERROR CLOSE_PAREN ]
## Transitions:
-- On IDENT shift to state 11
-- On field_list shift to state 20
-- On field shift to state 22
## Reductions:

State 11:
## Known stack suffix:
## IDENT
## LR(1) items:
field -> IDENT . DOUBLE_COLON constant [ IDENT CLOSE_PAREN ]
## Transitions:
-- On DOUBLE_COLON shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## IDENT DOUBLE_COLON
## LR(1) items:
field -> IDENT DOUBLE_COLON . constant [ IDENT CLOSE_PAREN ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On number shift to state 18
-- On constant shift to state 19
## Reductions:

State 13:
## Known stack suffix:
## MINUS
## LR(1) items:
number -> MINUS . NUMBER [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
-- On NUMBER shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## MINUS NUMBER
## LR(1) items:
number -> MINUS NUMBER . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production number -> MINUS NUMBER

State 15:
## Known stack suffix:
## ELEM_ELEM
## LR(1) items:
constant -> ELEM_ELEM . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> ELEM_ELEM

State 16:
## Known stack suffix:
## BOOL
## LR(1) items:
constant -> BOOL . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> BOOL

State 17:
## Known stack suffix:
## ADDR_ELEM
## LR(1) items:
constant -> ADDR_ELEM . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> ADDR_ELEM

State 18:
## Known stack suffix:
## number
## LR(1) items:
constant -> number . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> number

State 19:
## Known stack suffix:
## IDENT DOUBLE_COLON constant
## LR(1) items:
field -> IDENT DOUBLE_COLON constant . [ IDENT CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field -> IDENT DOUBLE_COLON constant

State 20:
## Known stack suffix:
## OPEN_PAREN MK_RECORD field_list
## LR(1) items:
record -> OPEN_PAREN MK_RECORD field_list . CLOSE_PAREN [ OPEN_PAREN NUMBER IDENT ERROR CLOSE_PAREN ]
## Transitions:
-- On CLOSE_PAREN shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## OPEN_PAREN MK_RECORD field_list CLOSE_PAREN
## LR(1) items:
record -> OPEN_PAREN MK_RECORD field_list CLOSE_PAREN . [ OPEN_PAREN NUMBER IDENT ERROR CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record -> OPEN_PAREN MK_RECORD field_list CLOSE_PAREN

State 22:
## Known stack suffix:
## field
## LR(1) items:
field_list -> field . [ CLOSE_PAREN ]
field_list -> field . field_list [ CLOSE_PAREN ]
## Transitions:
-- On IDENT shift to state 11
-- On field_list shift to state 23
-- On field shift to state 22
## Reductions:
-- On CLOSE_PAREN
--   reduce production field_list -> field

State 23:
## Known stack suffix:
## field field_list
## LR(1) items:
field_list -> field field_list . [ CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_list -> field field_list

State 24:
## Known stack suffix:
## IDENT
## LR(1) items:
fun_name -> IDENT . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS ELEM_ELEM BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_name -> IDENT

State 25:
## Known stack suffix:
## OPEN_PAREN fun_name
## LR(1) items:
var -> OPEN_PAREN fun_name . param_list CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
var -> OPEN_PAREN fun_name . record CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 26
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On record shift to state 27
-- On param_list shift to state 29
-- On number shift to state 18
-- On constant shift to state 31
## Reductions:

State 26:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
record -> OPEN_PAREN . MK_RECORD field_list CLOSE_PAREN [ CLOSE_PAREN ]
## Transitions:
-- On MK_RECORD shift to state 10
## Reductions:

State 27:
## Known stack suffix:
## OPEN_PAREN fun_name record
## LR(1) items:
var -> OPEN_PAREN fun_name record . CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
-- On CLOSE_PAREN shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## OPEN_PAREN fun_name record CLOSE_PAREN
## LR(1) items:
var -> OPEN_PAREN fun_name record CLOSE_PAREN . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> OPEN_PAREN fun_name record CLOSE_PAREN

State 29:
## Known stack suffix:
## OPEN_PAREN fun_name param_list
## LR(1) items:
var -> OPEN_PAREN fun_name param_list . CLOSE_PAREN [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
-- On CLOSE_PAREN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## OPEN_PAREN fun_name param_list CLOSE_PAREN
## LR(1) items:
var -> OPEN_PAREN fun_name param_list CLOSE_PAREN . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> OPEN_PAREN fun_name param_list CLOSE_PAREN

State 31:
## Known stack suffix:
## constant
## LR(1) items:
param_list -> constant . [ CLOSE_PAREN ]
param_list -> constant . param_list [ CLOSE_PAREN ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On param_list shift to state 32
-- On number shift to state 18
-- On constant shift to state 31
## Reductions:
-- On CLOSE_PAREN
--   reduce production param_list -> constant

State 32:
## Known stack suffix:
## constant param_list
## LR(1) items:
param_list -> constant param_list . [ CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_list -> constant param_list

State 33:
## Known stack suffix:
## constant
## LR(1) items:
fun_name -> constant . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS ELEM_ELEM BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_name -> constant

State 34:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER . IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER . NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On NUMBER shift to state 35
-- On IDENT shift to state 41
## Reductions:

State 35:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER . CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN . value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 26
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On value shift to state 37
-- On record shift to state 39
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 37:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER NUMBER CLOSE_PAREN value CLOSE_PAREN

State 39:
## Known stack suffix:
## record
## LR(1) items:
value -> record . [ CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> record

State 40:
## Known stack suffix:
## constant
## LR(1) items:
value -> constant . [ OPEN_PAREN IDENT ERROR CLOSE_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> constant

State 41:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT . CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN . value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 26
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On value shift to state 43
-- On record shift to state 39
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 43:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT NUMBER IDENT CLOSE_PAREN value CLOSE_PAREN

State 45:
## Known stack suffix:
## IDENT
## LR(1) items:
var -> IDENT . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> IDENT

State 46:
## Known stack suffix:
## ERROR
## LR(1) items:
var -> ERROR . [ TID_ELEM OPEN_PAREN NUMBER NULL NO_THREAD MINUS IDENT ERROR ELEM_ELEM CLOSE_PAREN BOOL ADDR_ELEM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> ERROR

State 47:
## Known stack suffix:
## var
## LR(1) items:
sel -> var . [ NUMBER IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sel -> var

State 48:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel . IDENT CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel . NUMBER CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On NUMBER shift to state 49
-- On IDENT shift to state 53
## Reductions:

State 49:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER . CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN . value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 26
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On value shift to state 51
-- On record shift to state 39
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 51:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel NUMBER CLOSE_PAREN value CLOSE_PAREN

State 53:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT . CLOSE_PAREN value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN . value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 26
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On value shift to state 55
-- On record shift to state 39
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 55:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL OPEN_PAREN SELECT sel IDENT CLOSE_PAREN value CLOSE_PAREN

State 57:
## Known stack suffix:
## record
## LR(1) items:
sel -> record . [ NUMBER IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sel -> record

State 58:
## Known stack suffix:
## OPEN_PAREN EQUAL var
## LR(1) items:
assertion -> OPEN_PAREN EQUAL var . var CLOSE_PAREN [ OPEN_PAREN # ]
assertion -> OPEN_PAREN EQUAL var . value CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On OPEN_PAREN shift to state 6
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On IDENT shift to state 45
-- On ERROR shift to state 46
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On var shift to state 59
-- On value shift to state 61
-- On record shift to state 39
-- On number shift to state 18
-- On constant shift to state 40
## Reductions:

State 59:
## Known stack suffix:
## OPEN_PAREN EQUAL var var
## LR(1) items:
assertion -> OPEN_PAREN EQUAL var var . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## OPEN_PAREN EQUAL var var CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL var var CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL var var CLOSE_PAREN

State 61:
## Known stack suffix:
## OPEN_PAREN EQUAL var value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL var value . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## OPEN_PAREN EQUAL var value CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL var value CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL var value CLOSE_PAREN

State 63:
## Known stack suffix:
## OPEN_PAREN EQUAL value
## LR(1) items:
assertion -> OPEN_PAREN EQUAL value . var CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On OPEN_PAREN shift to state 64
-- On IDENT shift to state 45
-- On ERROR shift to state 46
-- On var shift to state 65
## Reductions:

State 64:
## Known stack suffix:
## OPEN_PAREN
## LR(1) items:
var -> OPEN_PAREN . fun_name param_list CLOSE_PAREN [ CLOSE_PAREN ]
var -> OPEN_PAREN . fun_name record CLOSE_PAREN [ CLOSE_PAREN ]
## Transitions:
-- On TID_ELEM shift to state 3
-- On NUMBER shift to state 7
-- On NULL shift to state 8
-- On NO_THREAD shift to state 9
-- On MINUS shift to state 13
-- On IDENT shift to state 24
-- On ELEM_ELEM shift to state 15
-- On BOOL shift to state 16
-- On ADDR_ELEM shift to state 17
-- On number shift to state 18
-- On fun_name shift to state 25
-- On constant shift to state 33
## Reductions:

State 65:
## Known stack suffix:
## OPEN_PAREN EQUAL value var
## LR(1) items:
assertion -> OPEN_PAREN EQUAL value var . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## OPEN_PAREN EQUAL value var CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL value var CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL value var CLOSE_PAREN

State 67:
## Known stack suffix:
## OPEN_PAREN EQUAL record
## LR(1) items:
assertion -> OPEN_PAREN EQUAL record . NUMBER CLOSE_PAREN [ OPEN_PAREN # ]
value -> record . [ OPEN_PAREN IDENT ERROR ]
## Transitions:
-- On NUMBER shift to state 68
## Reductions:
-- On OPEN_PAREN IDENT ERROR
--   reduce production value -> record

State 68:
## Known stack suffix:
## OPEN_PAREN EQUAL record NUMBER
## LR(1) items:
assertion -> OPEN_PAREN EQUAL record NUMBER . CLOSE_PAREN [ OPEN_PAREN # ]
## Transitions:
-- On CLOSE_PAREN shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## OPEN_PAREN EQUAL record NUMBER CLOSE_PAREN
## LR(1) items:
assertion -> OPEN_PAREN EQUAL record NUMBER CLOSE_PAREN . [ OPEN_PAREN # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assertion -> OPEN_PAREN EQUAL record NUMBER CLOSE_PAREN

State 70:
## Known stack suffix:
## generic_model
## LR(1) items:
generic_model' -> generic_model . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept generic_model

State 71:
## Known stack suffix:
## assertion_list
## LR(1) items:
generic_model -> assertion_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production generic_model -> assertion_list

State 72:
## Known stack suffix:
## assertion
## LR(1) items:
assertion_list -> assertion . [ # ]
assertion_list -> assertion . assertion_list [ # ]
## Transitions:
-- On OPEN_PAREN shift to state 1
-- On assertion_list shift to state 73
-- On assertion shift to state 72
## Reductions:

State 73:
## Known stack suffix:
## assertion assertion_list
## LR(1) items:
assertion_list -> assertion assertion_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production assertion_list -> assertion assertion_list

