File "leap_Z3ModelParser.mly", line 159, characters 36-52:
Warning: the token DOUBLE_SEMICOLON is unused.
File "leap_Z3ModelParser.mly", line 164, characters 11-14:
Warning: the token EOF is unused.
File "leap_Z3ModelParser.mly", line 164, characters 7-10:
Warning: the token EOL is unused.
%{

(***********************************************************************)
(*                                                                     *)
(*                                 LEAP                                *)
(*                                                                     *)
(*               Alejandro Sanchez, IMDEA Software Institute           *)
(*                                                                     *)
(*                                                                     *)
(*      Copyright 2011 IMDEA Software Institute                        *)
(*                                                                     *)
(*  Licensed under the Apache License, Version 2.0 (the "License");    *)
(*  you may not use this file except in compliance with the License.   *)
(*  You may obtain a copy of the License at                            *)
(*                                                                     *)
(*      http://www.apache.org/licenses/LICENSE-2.0                     *)
(*                                                                     *)
(*  Unless required by applicable law or agreed to in writing,         *)
(*  software distributed under the License is distributed on an        *)
(*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,       *)
(*  either express or implied.                                         *)
(*  See the License for the specific language governing permissions    *)
(*  and limitations under the License.                                 *)
(*                                                                     *)
(***********************************************************************)

open LeapLib

(* Type rename *)

module GM = GenericModel



type value_t =
  | Constant of string
  | Record of (GM.id * abs_value_t list)
  | FunMap of ((GM.id option) list, abs_value_t) Hashtbl.t
  | Store of (abs_value_t * GM.id * value_t)


and abs_value_t =
  | Concrete of value_t
  | AsArray of int


exception Not_implemented of string

(* slow way to project: traverse one time per entry *)
let get_name id = fst id
let get_line id = snd id


(* Mappings *)
let model = GM.new_model ()


(* Mapping from identifiers to array ids*)
let var_array_map : (GM.id, int) Hashtbl.t = Hashtbl.create 10

(* Mapping from identifiers to values *)
let var_value_map : (GM.id, value_t) Hashtbl.t = Hashtbl.create 10

(* Mapping form array ids to values *)
let array_value_map : (int, value_t) Hashtbl.t = Hashtbl.create 10


let abs_to_value (a:abs_value_t) : value_t =
  match a with
  | Concrete v -> v
  | AsArray i -> Hashtbl.find array_value_map i


let rec value_to_vals (v:value_t) : GM.vals =
  match v with
  | Constant c -> c
  | FunMap tbl -> "[" ^ (Hashtbl.fold (fun id_list abs_val str ->
                          let ids = String.concat "," (List.map (Option.default "_") id_list) in
                          str ^ ids ^ ":" ^ (value_to_vals (abs_to_value abs_val)) ^ ";"
                        ) tbl "") ^ "]"
  | _          -> "IMPOSSIBLE TO REPRESENT =("


let convert (v:value_t) : GM.value =
  match v with
  | Constant c -> GM.Single c
  | Record (name, vs) -> let lbls = List.map string_of_int
                                      (LeapLib.rangeList 0 (List.length vs-1))in
                         let vs' = List.map (abs_to_value>>value_to_vals) vs
                         in
                           GM.Record (name, List.combine lbls vs')
  | FunMap _ -> raise(Not_implemented "conversion over function maps")
  | Store _ -> raise(Not_implemented "conversion over array store")


let rec build_fun (tbl:((GM.id option) list, abs_value_t) Hashtbl.t)
                  (prevs:(GM.id option) list)
                  (av:abs_value_t) : unit =
  match av with
  | Concrete (Constant _)      -> Hashtbl.add tbl prevs av
  | Concrete (Record (_,_))    -> Hashtbl.add tbl prevs av
  | Concrete (Store (av,_,_))  -> Hashtbl.add tbl prevs av
  | Concrete (FunMap fMap)     -> Hashtbl.iter (fun ids av ->
                                    build_fun tbl (prevs@ids) av
                                  ) fMap
  | AsArray i                  -> build_fun tbl prevs
                                    (Concrete (Hashtbl.find array_value_map i))


let build_fun_from (i:int) : ((GM.id option) list, abs_value_t) Hashtbl.t =
  let tbl = Hashtbl.create 10 in
  let av = Hashtbl.find array_value_map i in
    (build_fun tbl [] (Concrete av); tbl)


(* Defines a new value in the model *)
let define (id:GM.id) (v:value_t) : unit =
  match v with
  | Constant _        -> GM.decl_const model id (convert v)
  | Record (_, _)     -> GM.decl_const model id (convert v)
  | FunMap fMap       -> Hashtbl.iter (fun ps v ->
                           GM.decl_fun model id ps ((abs_to_value>>convert) v)
                         ) fMap
  | Store (abs, i, v) -> let _ = GM.decl_fun model id [Some i] (convert v)
                         in
                           match abs with
                           | Concrete c -> GM.decl_fun model
                                             id [None] (convert c)
                           | AsArray j  -> Hashtbl.iter (fun ps av ->
                                             GM.decl_fun model id ps
                                               ((abs_to_value>>convert) av)
                                           ) (build_fun_from j)


(* Fills the model with the parsed information *)
let fill_model () : unit =
  Hashtbl.iter (fun v i ->
    try
      define v (FunMap (build_fun_from i))
    with _ -> ()
  ) var_array_map;
  Hashtbl.iter (fun v x ->
    define v x
  ) var_value_map



%}
%start generic_model
%token <string> ADDR_ELEM
%token AND
%token ARRAY
%token <int> ARRAY_ID
%token AS
%token AS_ARRAY
%token <bool> BOOL
%token CLOSE_PAREN
%token CONST
%token DECLARE_FUN
%token DEFINE_FUN
%token DOUBLE_SEMICOLON
%token <string> ELEM_ELEM
%token EOF
%token EOL
%token EQUAL
%token ERROR
%token FORALL
%token <string*int> IDENT
%token ITE
%token MODEL
%token NO_THREAD
%token <int> NUMBER
%token OPEN_PAREN
%token OR
%token STORE
%token <string> TID_ELEM
%token UNDERSCORE
%type <abs_value_t> abs_value
%type <abs_value_t list> abs_value_list
%type <int> as_array
%type <unit> assertion
%type <unit> assertion_list
%type <unit> cardinality_constraint
%type <GM.id> cond_elem
%type <(GM.id option) list> cond_elem_as_arguments
%type <GM.id list> cond_list
%type <unit> conds
%type <value_t> const_array
%type <GM.vals> constant
%type <unit> define_fun
%type <((GM.id option) list, abs_value_t) Hashtbl.t> else_ite
%type <GenericModel.t> generic_model
%type <((GM.id option) list, abs_value_t) Hashtbl.t> ite
%type <unit> param_list
%type <unit> params
%type <GM.id * abs_value_t list> record
%type <(abs_value_t * GM.id * value_t)> store
%type <unit> type_decl
%type <unit> universe_decl
%type <value_t> value
%type <GM.id> var
%%

generic_model:
  
    {    ( GM.new_model() )}
| _1 = OPEN_PAREN _2 = MODEL _3 = assertion_list _4 = CLOSE_PAREN
    {    ( let _ = fill_model () in
      let m = GM.copy_model model in
      let _ = GM.clear_model model in
      let _ = Hashtbl.clear var_array_map in
      let _ = Hashtbl.clear var_value_map in
      let _ = Hashtbl.clear array_value_map
      in
        m
    )}

assertion_list:
  _1 = assertion
    {    ( () )}
| _1 = assertion _2 = assertion_list
    {    ( () )}

assertion:
  _1 = universe_decl
    {    ( () )}
| _1 = cardinality_constraint
    {    ( () )}
| _1 = define_fun
    {    ( () )}

universe_decl:
  _1 = OPEN_PAREN _2 = DECLARE_FUN _3 = IDENT _4 = params _5 = type_decl _6 = CLOSE_PAREN
    {    ( () )}

cardinality_constraint:
  _1 = OPEN_PAREN _2 = FORALL _3 = params _4 = conds _5 = CLOSE_PAREN
    {    ( () )}

conds:
  _1 = cond_elem
    {    ( () )}
| _1 = OPEN_PAREN _2 = OR _3 = cond_list _4 = CLOSE_PAREN
    {    ( () )}

cond_list:
  
    {    ( [] )}
| _1 = cond_elem _2 = cond_list
    {    ( _1 :: _2 )}

cond_elem:
  _1 = OPEN_PAREN _2 = EQUAL _3 = IDENT _4 = constant _5 = CLOSE_PAREN
    {    ( _4 )}

cond_elem_as_arguments:
  _1 = cond_elem
    {    ( [Some _1] )}
| _1 = OPEN_PAREN _2 = AND _3 = cond_list _4 = CLOSE_PAREN
    {    ( List.map (fun c -> Some c) _3 )}

define_fun:
  _1 = OPEN_PAREN _2 = DEFINE_FUN _3 = var _4 = params _5 = type_decl _6 = as_array _7 = CLOSE_PAREN
    {    (
      Hashtbl.add var_array_map _3 _6
    )}
| _1 = OPEN_PAREN _2 = DEFINE_FUN _3 = var _4 = params _5 = type_decl _6 = value _7 = CLOSE_PAREN
    {    (
      Hashtbl.add var_value_map _3 _6
    )}
| _1 = OPEN_PAREN _2 = DEFINE_FUN _3 = ARRAY_ID _4 = params _5 = type_decl _6 = value _7 = CLOSE_PAREN
    {    (
      Hashtbl.add array_value_map _3 _6;
    )}

var:
  _1 = ERROR
    {    ( "error" )}
| _1 = IDENT
    {    ( get_name _1 )}

params:
  _1 = OPEN_PAREN _2 = param_list _3 = CLOSE_PAREN
    {    ( () )}

param_list:
  
    {    ( () )}
| _1 = OPEN_PAREN _2 = IDENT _3 = type_decl _4 = CLOSE_PAREN _5 = param_list
    {    ( () )}

as_array:
  _1 = OPEN_PAREN _2 = UNDERSCORE _3 = AS_ARRAY _4 = ARRAY_ID _5 = CLOSE_PAREN
    {    ( _4 )}

abs_value:
  _1 = value
    {    ( Concrete _1 )}
| _1 = as_array
    {    ( AsArray _1 )}

value:
  _1 = constant
    {    ( Constant _1 )}
| _1 = record
    {    ( Record _1 )}
| _1 = ite
    {    ( FunMap _1 )}
| _1 = const_array
    {    ( _1 )}
| _1 = store
    {    ( Store _1 )}

constant:
  _1 = BOOL
    {    ( if _1 then "true" else "false" )}
| _1 = TID_ELEM
    {    ( _1 )}
| _1 = ADDR_ELEM
    {    ( _1 )}
| _1 = ELEM_ELEM
    {    ( _1 )}
| _1 = NUMBER
    {    ( string_of_int _1 )}
| _1 = NO_THREAD
    {    ( "NoThread" )}
| _1 = IDENT
    {    ( get_name _1 )}

record:
  _1 = OPEN_PAREN _2 = IDENT _3 = abs_value_list _4 = CLOSE_PAREN
    {    ( (get_name _2, _3) )}

ite:
  _1 = OPEN_PAREN _2 = ITE _3 = cond_elem_as_arguments _4 = abs_value _5 = else_ite _6 = CLOSE_PAREN
    {    (
      let conds = _3 in
      let cte = _4 in
      let tbl = _5 in
      let _ = Hashtbl.add tbl conds cte
      in
        tbl
    )}

else_ite:
  _1 = constant
    {    ( (*(Some (Concrete (Constant $1)), Hashtbl.create 10)*)
      let tbl = Hashtbl.create 10 in
      (Hashtbl.add tbl [None] (Concrete (Constant _1)); tbl)
    )}
| _1 = record
    {    ( (*(Some (Concrete (Record $1)), Hashtbl.create 10)*)
      let tbl = Hashtbl.create 10 in
      (Hashtbl.add tbl [None] (Concrete (Record _1)); tbl)
    )}
| _1 = as_array
    {    ( (*(Some (AsArray $1), Hashtbl.create 10)*)
      let tbl = Hashtbl.create 10 in
      (Hashtbl.add tbl [None] (AsArray _1); tbl)
    )}
| _1 = ite
    {    ( _1 )}

const_array:
  _1 = OPEN_PAREN _2 = OPEN_PAREN _3 = AS _4 = CONST _5 = type_decl _6 = CLOSE_PAREN _7 = value _8 = CLOSE_PAREN
    {    ( _7 )}

store:
  _1 = OPEN_PAREN _2 = STORE _3 = abs_value _4 = constant _5 = value _6 = CLOSE_PAREN
    {    ( (_3, _4, _5) )}

abs_value_list:
  _1 = abs_value
    {    ( [_1] )}
| _1 = abs_value _2 = abs_value_list
    {    ( _1 :: _2 )}

type_decl:
  _1 = IDENT
    {    ( () (*GM.Const (get_name $1)*) )}
| _1 = OPEN_PAREN _2 = ARRAY _3 = type_decl _4 = type_decl _5 = CLOSE_PAREN
    {    ( () (*GM.Fun ([get_name $3], [get_name $4])*) )}

%%


