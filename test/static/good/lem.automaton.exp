State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On file shift to state 730
-- On defs_help shift to state 721
-- On defs shift to state 731
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:

State 1:
## Known stack suffix:
## Val
## LR(1) items:
val_spec -> Val . x Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_spec -> Val . x Lsquare BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 38
## Reductions:

State 2:
## Known stack suffix:
## X
## LR(1) items:
x -> X . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> X

State 3:
## Known stack suffix:
## Lparen
## LR(1) items:
x -> Lparen . Eq Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . IN Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . MEM Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . MinusMinusGt Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . AmpAmp Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . BarBar Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . ColonColon Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . Star Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . Plus Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . GtEq Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . PlusX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . StarX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . GtEqX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . EqualX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . StarstarX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . At Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . AtX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
## Reductions:

State 4:
## Known stack suffix:
## Lparen StarstarX
## LR(1) items:
x -> Lparen StarstarX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## Lparen StarstarX Rparen
## LR(1) items:
x -> Lparen StarstarX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen StarstarX Rparen

State 6:
## Known stack suffix:
## Lparen StarX
## LR(1) items:
x -> Lparen StarX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## Lparen StarX Rparen
## LR(1) items:
x -> Lparen StarX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen StarX Rparen

State 8:
## Known stack suffix:
## Lparen Star
## LR(1) items:
x -> Lparen Star . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## Lparen Star Rparen
## LR(1) items:
x -> Lparen Star Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen Star Rparen

State 10:
## Known stack suffix:
## Lparen PlusX
## LR(1) items:
x -> Lparen PlusX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## Lparen PlusX Rparen
## LR(1) items:
x -> Lparen PlusX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen PlusX Rparen

State 12:
## Known stack suffix:
## Lparen Plus
## LR(1) items:
x -> Lparen Plus . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## Lparen Plus Rparen
## LR(1) items:
x -> Lparen Plus Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen Plus Rparen

State 14:
## Known stack suffix:
## Lparen MinusMinusGt
## LR(1) items:
x -> Lparen MinusMinusGt . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Lparen MinusMinusGt Rparen
## LR(1) items:
x -> Lparen MinusMinusGt Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen MinusMinusGt Rparen

State 16:
## Known stack suffix:
## Lparen MEM
## LR(1) items:
x -> Lparen MEM . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## Lparen MEM Rparen
## LR(1) items:
x -> Lparen MEM Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen MEM Rparen

State 18:
## Known stack suffix:
## Lparen IN
## LR(1) items:
x -> Lparen IN . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## Lparen IN Rparen
## LR(1) items:
x -> Lparen IN Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen IN Rparen

State 20:
## Known stack suffix:
## Lparen GtEqX
## LR(1) items:
x -> Lparen GtEqX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## Lparen GtEqX Rparen
## LR(1) items:
x -> Lparen GtEqX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen GtEqX Rparen

State 22:
## Known stack suffix:
## Lparen GtEq
## LR(1) items:
x -> Lparen GtEq . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## Lparen GtEq Rparen
## LR(1) items:
x -> Lparen GtEq Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen GtEq Rparen

State 24:
## Known stack suffix:
## Lparen EqualX
## LR(1) items:
x -> Lparen EqualX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## Lparen EqualX Rparen
## LR(1) items:
x -> Lparen EqualX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen EqualX Rparen

State 26:
## Known stack suffix:
## Lparen Eq
## LR(1) items:
x -> Lparen Eq . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## Lparen Eq Rparen
## LR(1) items:
x -> Lparen Eq Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen Eq Rparen

State 28:
## Known stack suffix:
## Lparen ColonColon
## LR(1) items:
x -> Lparen ColonColon . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## Lparen ColonColon Rparen
## LR(1) items:
x -> Lparen ColonColon Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen ColonColon Rparen

State 30:
## Known stack suffix:
## Lparen BarBar
## LR(1) items:
x -> Lparen BarBar . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## Lparen BarBar Rparen
## LR(1) items:
x -> Lparen BarBar Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen BarBar Rparen

State 32:
## Known stack suffix:
## Lparen AtX
## LR(1) items:
x -> Lparen AtX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## Lparen AtX Rparen
## LR(1) items:
x -> Lparen AtX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen AtX Rparen

State 34:
## Known stack suffix:
## Lparen At
## LR(1) items:
x -> Lparen At . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## Lparen At Rparen
## LR(1) items:
x -> Lparen At Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen At Rparen

State 36:
## Known stack suffix:
## Lparen AmpAmp
## LR(1) items:
x -> Lparen AmpAmp . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## Lparen AmpAmp Rparen
## LR(1) items:
x -> Lparen AmpAmp Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production x -> Lparen AmpAmp Rparen

State 38:
## Known stack suffix:
## Val x
## LR(1) items:
val_spec -> Val x . Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_spec -> Val x . Lsquare BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 39
-- On Colon shift to state 118
## Reductions:

State 39:
## Known stack suffix:
## Val x Lsquare
## LR(1) items:
val_spec -> Val x Lsquare . BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## Val x Lsquare BacktickString
## LR(1) items:
val_spec -> Val x Lsquare BacktickString . Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rsquare shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare . Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare Colon
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare Colon . typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 116
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 43:
## Known stack suffix:
## Under
## LR(1) items:
atomic_typ -> Under . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_typ -> Under

State 44:
## Known stack suffix:
## Tyvar
## LR(1) items:
atomic_typ -> Tyvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_typ -> Tyvar

State 45:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_typ -> Lparen . typ Rparen [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
x -> Lparen . Eq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . IN Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MEM Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MinusMinusGt Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AmpAmp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . BarBar Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . ColonColon Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Star Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Plus Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . PlusX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEqX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . EqualX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarstarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . At Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AtX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 45
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On BacktickString shift to state 46
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On typ shift to state 53
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 46:
## Known stack suffix:
## BacktickString
## LR(1) items:
app_typ -> BacktickString . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typ -> BacktickString . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 81
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production atomic_typ -> BacktickString

State 47:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_nexp -> Nvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_nexp -> Nvar

State 48:
## Known stack suffix:
## Num
## LR(1) items:
atomic_nexp -> Num . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_nexp -> Num

State 49:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_nexp -> Lparen . nexp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
atomic_typ -> Lparen . typ Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Eq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . IN Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MEM Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MinusMinusGt Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AmpAmp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . BarBar Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . ColonColon Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Star Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Plus Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . PlusX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEqX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . EqualX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarstarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . At Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AtX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 49
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On BacktickString shift to state 46
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On typ shift to state 53
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 75
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 50:
## Known stack suffix:
## x
## LR(1) items:
id_help -> x . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
id_help -> x . Dot id_help [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Dot shift to state 51
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production id_help -> x

State 51:
## Known stack suffix:
## x Dot
## LR(1) items:
id_help -> x Dot . id_help [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## x Dot id_help
## LR(1) items:
id_help -> x Dot id_help . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production id_help -> x Dot id_help

State 53:
## Known stack suffix:
## Lparen typ
## LR(1) items:
atomic_typ -> Lparen typ . Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On Rparen shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## Lparen typ Rparen
## LR(1) items:
atomic_typ -> Lparen typ Rparen . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_typ -> Lparen typ Rparen

State 55:
## Known stack suffix:
## star_typ_list
## LR(1) items:
star_typ -> star_typ_list . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert Arrow And
--   reduce production star_typ -> star_typ_list

State 56:
## Known stack suffix:
## star_typ
## LR(1) items:
typ -> star_typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
typ -> star_typ . Arrow typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
-- On Arrow shift to state 57
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And
--   reduce production typ -> star_typ

State 57:
## Known stack suffix:
## star_typ Arrow
## LR(1) items:
typ -> star_typ Arrow . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 58
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 58:
## Known stack suffix:
## star_typ Arrow typ
## LR(1) items:
typ -> star_typ Arrow typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And
--   reduce production typ -> star_typ Arrow typ

State 59:
## Known stack suffix:
## id_help
## LR(1) items:
id -> id_help . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production id -> id_help

State 60:
## Known stack suffix:
## id
## LR(1) items:
app_typ -> id . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typ -> id . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 63
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production atomic_typ -> id

State 61:
## Known stack suffix:
## BacktickString
## LR(1) items:
atomic_typ -> BacktickString . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_typ -> BacktickString

State 62:
## Known stack suffix:
## id
## LR(1) items:
atomic_typ -> id . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_typ -> id

State 63:
## Known stack suffix:
## id atomic_typs
## LR(1) items:
app_typ -> id atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production app_typ -> id atomic_typs

State 64:
## Known stack suffix:
## atomic_typ
## LR(1) items:
appt_typ -> atomic_typ . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production appt_typ -> atomic_typ

State 65:
## Known stack suffix:
## atomic_nexp
## LR(1) items:
appt_typ -> atomic_nexp . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production appt_typ -> atomic_nexp

State 66:
## Known stack suffix:
## appt_typ
## LR(1) items:
atomic_typs -> appt_typ . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typs -> appt_typ . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 67
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production atomic_typs -> appt_typ

State 67:
## Known stack suffix:
## appt_typ atomic_typs
## LR(1) items:
atomic_typs -> appt_typ atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production atomic_typs -> appt_typ atomic_typs

State 68:
## Known stack suffix:
## atomic_typ
## LR(1) items:
app_typ -> atomic_typ . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production app_typ -> atomic_typ

State 69:
## Known stack suffix:
## app_typ
## LR(1) items:
star_typ_list -> app_typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
star_typ_list -> app_typ . Star star_typ_list [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On Star shift to state 70
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production star_typ_list -> app_typ

State 70:
## Known stack suffix:
## app_typ Star
## LR(1) items:
star_typ_list -> app_typ Star . star_typ_list [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 71
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 71:
## Known stack suffix:
## app_typ Star star_typ_list
## LR(1) items:
star_typ_list -> app_typ Star star_typ_list . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production star_typ_list -> app_typ Star star_typ_list

State 72:
## Known stack suffix:
## star_nexp
## LR(1) items:
nexp -> star_nexp . [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
nexp -> star_nexp . Plus nexp [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Plus shift to state 73
## Reductions:
-- On Rsquare Rparen GtEq EqGt Eq Dot Comma
--   reduce production nexp -> star_nexp

State 73:
## Known stack suffix:
## star_nexp Plus
## LR(1) items:
nexp -> star_nexp Plus . nexp [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 80
-- On atomic_nexp shift to state 77
## Reductions:

State 74:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_nexp -> Lparen . nexp Rparen [ Star Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 75
-- On atomic_nexp shift to state 77
## Reductions:

State 75:
## Known stack suffix:
## Lparen nexp
## LR(1) items:
atomic_nexp -> Lparen nexp . Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On Rparen shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## Lparen nexp Rparen
## LR(1) items:
atomic_nexp -> Lparen nexp Rparen . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And
--   reduce production atomic_nexp -> Lparen nexp Rparen

State 77:
## Known stack suffix:
## atomic_nexp
## LR(1) items:
star_nexp -> atomic_nexp . [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
star_nexp -> atomic_nexp . Star star_nexp [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Star shift to state 78
## Reductions:
-- On Rsquare Rparen Plus GtEq EqGt Eq Dot Comma
--   reduce production star_nexp -> atomic_nexp

State 78:
## Known stack suffix:
## atomic_nexp Star
## LR(1) items:
star_nexp -> atomic_nexp Star . star_nexp [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 79
-- On atomic_nexp shift to state 77
## Reductions:

State 79:
## Known stack suffix:
## atomic_nexp Star star_nexp
## LR(1) items:
star_nexp -> atomic_nexp Star star_nexp . [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Plus GtEq EqGt Eq Dot Comma
--   reduce production star_nexp -> atomic_nexp Star star_nexp

State 80:
## Known stack suffix:
## star_nexp Plus nexp
## LR(1) items:
nexp -> star_nexp Plus nexp . [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
## Reductions:
-- On Rsquare Rparen GtEq EqGt Eq Dot Comma
--   reduce production nexp -> star_nexp Plus nexp

State 81:
## Known stack suffix:
## BacktickString atomic_typs
## LR(1) items:
app_typ -> BacktickString atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And
--   reduce production app_typ -> BacktickString atomic_typs

State 82:
## Known stack suffix:
## Forall
## LR(1) items:
typschm -> Forall . tnvs Dot typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 85
-- On tnvar shift to state 114
## Reductions:
-- On Dot
--   reduce production tnvs ->

State 83:
## Known stack suffix:
## Tyvar
## LR(1) items:
tnvar -> Tyvar . [ Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And
--   reduce production tnvar -> Tyvar

State 84:
## Known stack suffix:
## Nvar
## LR(1) items:
tnvar -> Nvar . [ Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And
--   reduce production tnvar -> Nvar

State 85:
## Known stack suffix:
## Forall tnvs
## LR(1) items:
typschm -> Forall tnvs . Dot typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Dot shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## Forall tnvs Dot
## LR(1) items:
typschm -> Forall tnvs Dot . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 87
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On ranges shift to state 88
-- On range shift to state 91
-- On nexp shift to state 94
-- On id_help shift to state 59
-- On id shift to state 99
-- On cs shift to state 103
-- On c shift to state 110
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 87:
## Known stack suffix:
## Forall tnvs Dot typ
## LR(1) items:
typschm -> Forall tnvs Dot typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production typschm -> Forall tnvs Dot typ

State 88:
## Known stack suffix:
## Forall tnvs Dot ranges
## LR(1) items:
typschm -> Forall tnvs Dot ranges . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On EqGt shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## Forall tnvs Dot ranges EqGt
## LR(1) items:
typschm -> Forall tnvs Dot ranges EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 90
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 90:
## Known stack suffix:
## Forall tnvs Dot ranges EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot ranges EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production typschm -> Forall tnvs Dot ranges EqGt typ

State 91:
## Known stack suffix:
## range
## LR(1) items:
ranges -> range . [ EqGt ]
ranges -> range . Comma ranges [ EqGt ]
## Transitions:
-- On Comma shift to state 92
## Reductions:
-- On EqGt
--   reduce production ranges -> range

State 92:
## Known stack suffix:
## range Comma
## LR(1) items:
ranges -> range Comma . ranges [ EqGt ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On ranges shift to state 93
-- On range shift to state 91
-- On nexp shift to state 94
-- On atomic_nexp shift to state 77
## Reductions:

State 93:
## Known stack suffix:
## range Comma ranges
## LR(1) items:
ranges -> range Comma ranges . [ EqGt ]
## Transitions:
## Reductions:
-- On EqGt
--   reduce production ranges -> range Comma ranges

State 94:
## Known stack suffix:
## nexp
## LR(1) items:
range -> nexp . Eq nexp [ EqGt Comma ]
range -> nexp . GtEq nexp [ EqGt Comma ]
## Transitions:
-- On GtEq shift to state 95
-- On Eq shift to state 97
## Reductions:

State 95:
## Known stack suffix:
## nexp GtEq
## LR(1) items:
range -> nexp GtEq . nexp [ EqGt Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 96
-- On atomic_nexp shift to state 77
## Reductions:

State 96:
## Known stack suffix:
## nexp GtEq nexp
## LR(1) items:
range -> nexp GtEq nexp . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt Comma
--   reduce production range -> nexp GtEq nexp

State 97:
## Known stack suffix:
## nexp Eq
## LR(1) items:
range -> nexp Eq . nexp [ EqGt Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 98
-- On atomic_nexp shift to state 77
## Reductions:

State 98:
## Known stack suffix:
## nexp Eq nexp
## LR(1) items:
range -> nexp Eq nexp . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt Comma
--   reduce production range -> nexp Eq nexp

State 99:
## Known stack suffix:
## id
## LR(1) items:
app_typ -> id . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert Arrow ]
atomic_typ -> id . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert Arrow ]
c -> id . tnvar [ Semi EqGt Comma ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 100
-- On Nvar shift to state 101
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On tnvar shift to state 102
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 63
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness Val Type Theorem Star SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert Arrow
--   reduce production atomic_typ -> id

State 100:
## Known stack suffix:
## Tyvar
## LR(1) items:
atomic_typ -> Tyvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow ]
tnvar -> Tyvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow
--   reduce production atomic_typ -> Tyvar
-- On Semi EqGt Comma
--   reduce production tnvar -> Tyvar
** Conflict on Semi

State 101:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_nexp -> Nvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow ]
tnvar -> Nvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow
--   reduce production atomic_nexp -> Nvar
-- On Semi EqGt Comma
--   reduce production tnvar -> Nvar
** Conflict on Semi

State 102:
## Known stack suffix:
## id tnvar
## LR(1) items:
c -> id tnvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On Semi EqGt Comma
--   reduce production c -> id tnvar

State 103:
## Known stack suffix:
## Forall tnvs Dot cs
## LR(1) items:
typschm -> Forall tnvs Dot cs . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot cs . Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Semi shift to state 104
-- On EqGt shift to state 108
## Reductions:

State 104:
## Known stack suffix:
## Forall tnvs Dot cs Semi
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi . ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On ranges shift to state 105
-- On range shift to state 91
-- On nexp shift to state 94
-- On atomic_nexp shift to state 77
## Reductions:

State 105:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On EqGt shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges EqGt
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 107
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 107:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ

State 108:
## Known stack suffix:
## Forall tnvs Dot cs EqGt
## LR(1) items:
typschm -> Forall tnvs Dot cs EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 109
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 109:
## Known stack suffix:
## Forall tnvs Dot cs EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot cs EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production typschm -> Forall tnvs Dot cs EqGt typ

State 110:
## Known stack suffix:
## c
## LR(1) items:
cs -> c . [ Semi EqGt ]
cs -> c . Comma cs [ Semi EqGt ]
## Transitions:
-- On Comma shift to state 111
## Reductions:
-- On Semi EqGt
--   reduce production cs -> c

State 111:
## Known stack suffix:
## c Comma
## LR(1) items:
cs -> c Comma . cs [ Semi EqGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 112
-- On cs shift to state 113
-- On c shift to state 110
## Reductions:

State 112:
## Known stack suffix:
## id
## LR(1) items:
c -> id . tnvar [ Semi EqGt Comma ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 102
## Reductions:

State 113:
## Known stack suffix:
## c Comma cs
## LR(1) items:
cs -> c Comma cs . [ Semi EqGt ]
## Transitions:
## Reductions:
-- On Semi EqGt
--   reduce production cs -> c Comma cs

State 114:
## Known stack suffix:
## tnvar
## LR(1) items:
tnvs -> tnvar . tnvs [ Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 115
-- On tnvar shift to state 114
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And
--   reduce production tnvs ->

State 115:
## Known stack suffix:
## tnvar tnvs
## LR(1) items:
tnvs -> tnvar tnvs . [ Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And
--   reduce production tnvs -> tnvar tnvs

State 116:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare Colon typschm
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm

State 117:
## Known stack suffix:
## typ
## LR(1) items:
typschm -> typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production typschm -> typ

State 118:
## Known stack suffix:
## Val x Colon
## LR(1) items:
val_spec -> Val x Colon . typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 119
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 119:
## Known stack suffix:
## Val x Colon typschm
## LR(1) items:
val_spec -> Val x Colon typschm . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_spec -> Val x Colon typschm

State 120:
## Known stack suffix:
## Type
## LR(1) items:
def -> Type . tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 121
-- On tds shift to state 158
-- On td shift to state 159
## Reductions:

State 121:
## Known stack suffix:
## x
## LR(1) items:
td -> x . tnvs [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs name_sect [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs name_sect Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 122
-- On tnvar shift to state 114
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And
--   reduce production tnvs ->

State 122:
## Known stack suffix:
## x tnvs
## LR(1) items:
td -> x tnvs . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . name_sect [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . name_sect Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Lsquare shift to state 123
-- On Eq shift to state 128
-- On name_sect shift to state 155
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production td -> x tnvs

State 123:
## Known stack suffix:
## Lsquare
## LR(1) items:
name_sect -> Lsquare . x Eq String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## Lsquare x
## LR(1) items:
name_sect -> Lsquare x . Eq String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On Eq shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## Lsquare x Eq
## LR(1) items:
name_sect -> Lsquare x Eq . String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On String shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## Lsquare x Eq String
## LR(1) items:
name_sect -> Lsquare x Eq String . Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On Rsquare shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## Lsquare x Eq String Rsquare
## LR(1) items:
name_sect -> Lsquare x Eq String Rsquare . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And
--   reduce production name_sect -> Lsquare x Eq String Rsquare

State 128:
## Known stack suffix:
## x tnvs Eq
## LR(1) items:
td -> x tnvs Eq . texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On LtBar shift to state 129
-- On Lparen shift to state 45
-- On Bar shift to state 138
-- On BacktickString shift to state 46
-- On x shift to state 146
-- On typ shift to state 149
-- On texp shift to state 150
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On ctor_texp shift to state 151
-- On ctor_single_texp shift to state 154
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 129:
## Known stack suffix:
## LtBar
## LR(1) items:
texp -> LtBar . xtyps BarGt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On xtyps shift to state 130
-- On xtyp shift to state 132
-- On x shift to state 135
## Reductions:

State 130:
## Known stack suffix:
## LtBar xtyps
## LR(1) items:
texp -> LtBar xtyps . BarGt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On BarGt shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LtBar xtyps BarGt
## LR(1) items:
texp -> LtBar xtyps BarGt . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production texp -> LtBar xtyps BarGt

State 132:
## Known stack suffix:
## xtyp
## LR(1) items:
xtyps -> xtyp . [ BarGt ]
xtyps -> xtyp . Semi [ BarGt ]
xtyps -> xtyp . Semi xtyps [ BarGt ]
## Transitions:
-- On Semi shift to state 133
## Reductions:
-- On BarGt
--   reduce production xtyps -> xtyp

State 133:
## Known stack suffix:
## xtyp Semi
## LR(1) items:
xtyps -> xtyp Semi . [ BarGt ]
xtyps -> xtyp Semi . xtyps [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On xtyps shift to state 134
-- On xtyp shift to state 132
-- On x shift to state 135
## Reductions:
-- On BarGt
--   reduce production xtyps -> xtyp Semi

State 134:
## Known stack suffix:
## xtyp Semi xtyps
## LR(1) items:
xtyps -> xtyp Semi xtyps . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt
--   reduce production xtyps -> xtyp Semi xtyps

State 135:
## Known stack suffix:
## x
## LR(1) items:
xtyp -> x . Colon typ [ Semi BarGt ]
## Transitions:
-- On Colon shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## x Colon
## LR(1) items:
xtyp -> x Colon . typ [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 137
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 137:
## Known stack suffix:
## x Colon typ
## LR(1) items:
xtyp -> x Colon typ . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi BarGt
--   reduce production xtyp -> x Colon typ

State 138:
## Known stack suffix:
## Bar
## LR(1) items:
texp -> Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 142
-- On ctor_texp shift to state 143
## Reductions:

State 139:
## Known stack suffix:
## x
## LR(1) items:
ctor_texp -> x . Of star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
ctor_texp -> x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
-- On Of shift to state 140
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And
--   reduce production ctor_texp -> x

State 140:
## Known stack suffix:
## x Of
## LR(1) items:
ctor_texp -> x Of . star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 141
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 141:
## Known stack suffix:
## x Of star_typ_list
## LR(1) items:
ctor_texp -> x Of star_typ_list . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And
--   reduce production ctor_texp -> x Of star_typ_list

State 142:
## Known stack suffix:
## Bar ctor_texps
## LR(1) items:
texp -> Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production texp -> Bar ctor_texps

State 143:
## Known stack suffix:
## ctor_texp
## LR(1) items:
ctor_texps -> ctor_texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texps -> ctor_texp . Bar ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Bar shift to state 144
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production ctor_texps -> ctor_texp

State 144:
## Known stack suffix:
## ctor_texp Bar
## LR(1) items:
ctor_texps -> ctor_texp Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 145
-- On ctor_texp shift to state 143
## Reductions:

State 145:
## Known stack suffix:
## ctor_texp Bar ctor_texps
## LR(1) items:
ctor_texps -> ctor_texp Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production ctor_texps -> ctor_texp Bar ctor_texps

State 146:
## Known stack suffix:
## x
## LR(1) items:
ctor_single_texp -> x . Of star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x . Of star_typ_list [ Bar ]
ctor_texp -> x . [ Bar ]
id_help -> x . [ X Val Under Tyvar Type Theorem Star SemiSemi Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow And ]
id_help -> x . Dot id_help [ X Val Under Tyvar Type Theorem Star SemiSemi Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow And ]
## Transitions:
-- On Of shift to state 147
-- On Dot shift to state 51
## Reductions:
-- On Bar
--   reduce production ctor_texp -> x
-- On X Val Under Tyvar Type Theorem Star SemiSemi Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow And
--   reduce production id_help -> x

State 147:
## Known stack suffix:
## x Of
## LR(1) items:
ctor_single_texp -> x Of . star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x Of . star_typ_list [ Bar ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 148
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 148:
## Known stack suffix:
## x Of star_typ_list
## LR(1) items:
ctor_single_texp -> x Of star_typ_list . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x Of star_typ_list . [ Bar ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production ctor_single_texp -> x Of star_typ_list
-- On Bar
--   reduce production ctor_texp -> x Of star_typ_list

State 149:
## Known stack suffix:
## typ
## LR(1) items:
texp -> typ . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production texp -> typ

State 150:
## Known stack suffix:
## x tnvs Eq texp
## LR(1) items:
td -> x tnvs Eq texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production td -> x tnvs Eq texp

State 151:
## Known stack suffix:
## ctor_texp
## LR(1) items:
texp -> ctor_texp . Bar ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Bar shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## ctor_texp Bar
## LR(1) items:
texp -> ctor_texp Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 153
-- On ctor_texp shift to state 143
## Reductions:

State 153:
## Known stack suffix:
## ctor_texp Bar ctor_texps
## LR(1) items:
texp -> ctor_texp Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production texp -> ctor_texp Bar ctor_texps

State 154:
## Known stack suffix:
## ctor_single_texp
## LR(1) items:
texp -> ctor_single_texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production texp -> ctor_single_texp

State 155:
## Known stack suffix:
## x tnvs name_sect
## LR(1) items:
td -> x tnvs name_sect . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs name_sect . Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Eq shift to state 156
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production td -> x tnvs name_sect

State 156:
## Known stack suffix:
## x tnvs name_sect Eq
## LR(1) items:
td -> x tnvs name_sect Eq . texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On LtBar shift to state 129
-- On Lparen shift to state 45
-- On Bar shift to state 138
-- On BacktickString shift to state 46
-- On x shift to state 146
-- On typ shift to state 149
-- On texp shift to state 157
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On ctor_texp shift to state 151
-- On ctor_single_texp shift to state 154
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 157:
## Known stack suffix:
## x tnvs name_sect Eq texp
## LR(1) items:
td -> x tnvs name_sect Eq texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production td -> x tnvs name_sect Eq texp

State 158:
## Known stack suffix:
## Type tds
## LR(1) items:
def -> Type tds . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Type tds

State 159:
## Known stack suffix:
## td
## LR(1) items:
tds -> td . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
tds -> td . And tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 160
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production tds -> td

State 160:
## Known stack suffix:
## td And
## LR(1) items:
tds -> td And . tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 121
-- On tds shift to state 161
-- On td shift to state 159
## Reductions:

State 161:
## Known stack suffix:
## td And tds
## LR(1) items:
tds -> td And tds . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production tds -> td And tds

State 162:
## Known stack suffix:
## Theorem
## LR(1) items:
lemma_typ -> Theorem . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly
--   reduce production lemma_typ -> Theorem

State 163:
## Known stack suffix:
## Open_
## LR(1) items:
open_import -> Open_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
open_import -> Open_ . Import_ [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
-- On Import_ shift to state 164
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly BacktickString
--   reduce production open_import -> Open_

State 164:
## Known stack suffix:
## Open_ Import_
## LR(1) items:
open_import -> Open_ Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly BacktickString
--   reduce production open_import -> Open_ Import_

State 165:
## Known stack suffix:
## Module_
## LR(1) items:
def -> Module_ . x Eq Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ . x Eq id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## Module_ x
## LR(1) items:
def -> Module_ x . Eq Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ x . Eq id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## Module_ x Eq
## LR(1) items:
def -> Module_ x Eq . Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ x Eq . id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Struct shift to state 168
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 729
## Reductions:

State 168:
## Known stack suffix:
## Module_ x Eq Struct
## LR(1) items:
def -> Module_ x Eq Struct . defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 721
-- On defs shift to state 722
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:

State 169:
## Known stack suffix:
## Let_
## LR(1) items:
val_def -> Let_ . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Rec targets_opt funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Inline targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Lem_transform targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rec shift to state 170
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lem_transform shift to state 498
-- On Lcurly shift to state 179
-- On Inline shift to state 501
-- On targets_opt shift to state 504
## Reductions:
-- On X Under True String OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False Char BraceBar BinNum Bin
--   reduce production targets_opt ->

State 170:
## Known stack suffix:
## Let_ Rec
## LR(1) items:
val_def -> Let_ Rec . targets_opt funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 183
## Reductions:
-- On X Lparen
--   reduce production targets_opt ->

State 171:
## Known stack suffix:
## NonExec
## LR(1) items:
targets_opt -> NonExec . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep
--   reduce production targets_opt -> NonExec

State 172:
## Known stack suffix:
## NegLcurly
## LR(1) items:
targets_opt -> NegLcurly . targets Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On X shift to state 173
-- On targets shift to state 174
-- On target shift to state 176
## Reductions:

State 173:
## Known stack suffix:
## X
## LR(1) items:
target -> X . [ TargetRep Semi Rcurly ]
## Transitions:
## Reductions:
-- On TargetRep Semi Rcurly
--   reduce production target -> X

State 174:
## Known stack suffix:
## NegLcurly targets
## LR(1) items:
targets_opt -> NegLcurly targets . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On Rcurly shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## NegLcurly targets Rcurly
## LR(1) items:
targets_opt -> NegLcurly targets Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep
--   reduce production targets_opt -> NegLcurly targets Rcurly

State 176:
## Known stack suffix:
## target
## LR(1) items:
targets -> target . [ Rcurly ]
targets -> target . Semi targets [ Rcurly ]
## Transitions:
-- On Semi shift to state 177
## Reductions:
-- On Rcurly
--   reduce production targets -> target

State 177:
## Known stack suffix:
## target Semi
## LR(1) items:
targets -> target Semi . targets [ Rcurly ]
## Transitions:
-- On X shift to state 173
-- On targets shift to state 178
-- On target shift to state 176
## Reductions:

State 178:
## Known stack suffix:
## target Semi targets
## LR(1) items:
targets -> target Semi targets . [ Rcurly ]
## Transitions:
## Reductions:
-- On Rcurly
--   reduce production targets -> target Semi targets

State 179:
## Known stack suffix:
## Lcurly
## LR(1) items:
targets_opt -> Lcurly . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
targets_opt -> Lcurly . targets Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On X shift to state 173
-- On Rcurly shift to state 180
-- On targets shift to state 181
-- On target shift to state 176
## Reductions:

State 180:
## Known stack suffix:
## Lcurly Rcurly
## LR(1) items:
targets_opt -> Lcurly Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep
--   reduce production targets_opt -> Lcurly Rcurly

State 181:
## Known stack suffix:
## Lcurly targets
## LR(1) items:
targets_opt -> Lcurly targets . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On Rcurly shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## Lcurly targets Rcurly
## LR(1) items:
targets_opt -> Lcurly targets Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep
--   reduce production targets_opt -> Lcurly targets Rcurly

State 183:
## Known stack suffix:
## Let_ Rec targets_opt
## LR(1) items:
val_def -> Let_ Rec targets_opt . funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 184
-- On funcls shift to state 494
-- On funcl shift to state 495
## Reductions:

State 184:
## Known stack suffix:
## x
## LR(1) items:
funcl -> x . atomic_pats1 opt_typ_annot Eq exp [ And ]
funcls -> x . atomic_pats1 opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 253
-- On atomic_pat shift to state 426
## Reductions:

State 185:
## Known stack suffix:
## Under
## LR(1) items:
atomic_pat -> Under . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Under

State 186:
## Known stack suffix:
## True
## LR(1) items:
lit -> True . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> True

State 187:
## Known stack suffix:
## String
## LR(1) items:
lit -> String . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> String

State 188:
## Known stack suffix:
## OctNum
## LR(1) items:
lit -> OctNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> OctNum

State 189:
## Known stack suffix:
## Num
## LR(1) items:
lit -> Num . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> Num

State 190:
## Known stack suffix:
## LtBar
## LR(1) items:
atomic_pat -> LtBar . fpats BarGt [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 191
-- On fpats shift to state 248
-- On fpat shift to state 250
## Reductions:

State 191:
## Known stack suffix:
## id
## LR(1) items:
fpat -> id . Eq pat [ Semi BarGt ]
## Transitions:
-- On Eq shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## id Eq
## LR(1) items:
fpat -> id Eq . pat [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 247
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 193:
## Known stack suffix:
## Lsquare
## LR(1) items:
atomic_pat -> Lsquare . semi_pats Rsquare [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_help shift to state 241
-- On semi_pats shift to state 242
-- On pat shift to state 244
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On Rsquare
--   reduce production semi_pats ->

State 194:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_pat -> Lparen . pat Colon typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . comma_pats Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . pat Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . pat As x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
lit -> Lparen . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Eq Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . IN Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . MEM Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . MinusMinusGt Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . AmpAmp Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . BarBar Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . ColonColon Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Star Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Plus Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . GtEq Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . PlusX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . StarX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . GtEqX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . EqualX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . StarstarX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . At Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . AtX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On Rparen shift to state 195
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On False shift to state 200
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 205
-- On pat shift to state 220
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On comma_pats shift to state 239
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 195:
## Known stack suffix:
## Lparen Rparen
## LR(1) items:
lit -> Lparen Rparen . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> Lparen Rparen

State 196:
## Known stack suffix:
## HexNum
## LR(1) items:
lit -> HexNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> HexNum

State 197:
## Known stack suffix:
## Hex
## LR(1) items:
lit -> Hex . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> Hex

State 198:
## Known stack suffix:
## HashZero
## LR(1) items:
lit -> HashZero . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> HashZero

State 199:
## Known stack suffix:
## HashOne
## LR(1) items:
lit -> HashOne . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> HashOne

State 200:
## Known stack suffix:
## False
## LR(1) items:
lit -> False . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> False

State 201:
## Known stack suffix:
## Char
## LR(1) items:
lit -> Char . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> Char

State 202:
## Known stack suffix:
## BraceBar
## LR(1) items:
atomic_pat -> BraceBar . semi_pats_atomic BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> BraceBar . atomic_pats_two BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_atomic shift to state 208
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 212
-- On atomic_pat shift to state 214
## Reductions:

State 203:
## Known stack suffix:
## BinNum
## LR(1) items:
lit -> BinNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> BinNum

State 204:
## Known stack suffix:
## Bin
## LR(1) items:
lit -> Bin . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp
--   reduce production lit -> Bin

State 205:
## Known stack suffix:
## x
## LR(1) items:
atomic_pat -> x . Plus Num [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
id_help -> x . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
id_help -> x . Dot id_help [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Plus shift to state 206
-- On Dot shift to state 51
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production id_help -> x

State 206:
## Known stack suffix:
## x Plus
## LR(1) items:
atomic_pat -> x Plus . Num [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Num shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## x Plus Num
## LR(1) items:
atomic_pat -> x Plus Num . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> x Plus Num

State 208:
## Known stack suffix:
## BraceBar semi_pats_atomic
## LR(1) items:
atomic_pat -> BraceBar semi_pats_atomic . BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarBrace shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## BraceBar semi_pats_atomic BarBrace
## LR(1) items:
atomic_pat -> BraceBar semi_pats_atomic BarBrace . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace

State 210:
## Known stack suffix:
## lit
## LR(1) items:
atomic_pat -> lit . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> lit

State 211:
## Known stack suffix:
## id
## LR(1) items:
atomic_pat -> id . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> id

State 212:
## Known stack suffix:
## BraceBar atomic_pats_two
## LR(1) items:
atomic_pat -> BraceBar atomic_pats_two . BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarBrace shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## BraceBar atomic_pats_two BarBrace
## LR(1) items:
atomic_pat -> BraceBar atomic_pats_two BarBrace . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace

State 214:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats_two -> atomic_pat . atomic_pat [ BarBrace ]
atomic_pats_two -> atomic_pat . atomic_pats_two [ BarBrace ]
semi_pats_atomic -> atomic_pat . [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi semi_pats_atomic [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On Semi shift to state 215
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 218
-- On atomic_pat shift to state 219
## Reductions:
-- On BarBrace
--   reduce production semi_pats_atomic -> atomic_pat

State 215:
## Known stack suffix:
## atomic_pat Semi
## LR(1) items:
semi_pats_atomic -> atomic_pat Semi . [ BarBrace ]
semi_pats_atomic -> atomic_pat Semi . semi_pats_atomic [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_atomic shift to state 216
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pat shift to state 217
## Reductions:
-- On BarBrace
--   reduce production semi_pats_atomic -> atomic_pat Semi

State 216:
## Known stack suffix:
## atomic_pat Semi semi_pats_atomic
## LR(1) items:
semi_pats_atomic -> atomic_pat Semi semi_pats_atomic . [ BarBrace ]
## Transitions:
## Reductions:
-- On BarBrace
--   reduce production semi_pats_atomic -> atomic_pat Semi semi_pats_atomic

State 217:
## Known stack suffix:
## atomic_pat
## LR(1) items:
semi_pats_atomic -> atomic_pat . [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi semi_pats_atomic [ BarBrace ]
## Transitions:
-- On Semi shift to state 215
## Reductions:
-- On BarBrace
--   reduce production semi_pats_atomic -> atomic_pat

State 218:
## Known stack suffix:
## atomic_pat atomic_pats_two
## LR(1) items:
atomic_pats_two -> atomic_pat atomic_pats_two . [ BarBrace ]
## Transitions:
## Reductions:
-- On BarBrace
--   reduce production atomic_pats_two -> atomic_pat atomic_pats_two

State 219:
## Known stack suffix:
## atomic_pat atomic_pat
## LR(1) items:
atomic_pats_two -> atomic_pat . atomic_pat [ BarBrace ]
atomic_pats_two -> atomic_pat atomic_pat . [ BarBrace ]
atomic_pats_two -> atomic_pat . atomic_pats_two [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 218
-- On atomic_pat shift to state 219
## Reductions:
-- On BarBrace
--   reduce production atomic_pats_two -> atomic_pat atomic_pat

State 220:
## Known stack suffix:
## Lparen pat
## LR(1) items:
atomic_pat -> Lparen pat . Colon typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen pat . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen pat . As x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
comma_pats -> pat . Comma pat [ Rparen ]
comma_pats -> pat . Comma comma_pats [ Rparen ]
## Transitions:
-- On Rparen shift to state 221
-- On Comma shift to state 222
-- On Colon shift to state 233
-- On As shift to state 236
## Reductions:

State 221:
## Known stack suffix:
## Lparen pat Rparen
## LR(1) items:
atomic_pat -> Lparen pat Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Lparen pat Rparen

State 222:
## Known stack suffix:
## pat Comma
## LR(1) items:
comma_pats -> pat Comma . pat [ Rparen ]
comma_pats -> pat Comma . comma_pats [ Rparen ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 223
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On comma_pats shift to state 228
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 223:
## Known stack suffix:
## pat Comma pat
## LR(1) items:
comma_pats -> pat . Comma pat [ Rparen ]
comma_pats -> pat Comma pat . [ Rparen ]
comma_pats -> pat . Comma comma_pats [ Rparen ]
## Transitions:
-- On Comma shift to state 222
## Reductions:
-- On Rparen
--   reduce production comma_pats -> pat Comma pat

State 224:
## Known stack suffix:
## id
## LR(1) items:
app_pat -> id . atomic_pats [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
atomic_pat -> id . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats shift to state 225
-- On atomic_pat shift to state 226
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow
--   reduce production atomic_pat -> id

State 225:
## Known stack suffix:
## id atomic_pats
## LR(1) items:
app_pat -> id atomic_pats . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow
--   reduce production app_pat -> id atomic_pats

State 226:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats -> atomic_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
atomic_pats -> atomic_pat . atomic_pats [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats shift to state 227
-- On atomic_pat shift to state 226
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow
--   reduce production atomic_pats -> atomic_pat

State 227:
## Known stack suffix:
## atomic_pat atomic_pats
## LR(1) items:
atomic_pats -> atomic_pat atomic_pats . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow
--   reduce production atomic_pats -> atomic_pat atomic_pats

State 228:
## Known stack suffix:
## pat Comma comma_pats
## LR(1) items:
comma_pats -> pat Comma comma_pats . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production comma_pats -> pat Comma comma_pats

State 229:
## Known stack suffix:
## atomic_pat
## LR(1) items:
app_pat -> atomic_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow
--   reduce production app_pat -> atomic_pat

State 230:
## Known stack suffix:
## app_pat
## LR(1) items:
pat -> app_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
pat -> app_pat . ColonColon pat [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
-- On ColonColon shift to state 231
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow
--   reduce production pat -> app_pat

State 231:
## Known stack suffix:
## app_pat ColonColon
## LR(1) items:
pat -> app_pat ColonColon . pat [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 232
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 232:
## Known stack suffix:
## app_pat ColonColon pat
## LR(1) items:
pat -> app_pat ColonColon pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow
--   reduce production pat -> app_pat ColonColon pat

State 233:
## Known stack suffix:
## Lparen pat Colon
## LR(1) items:
atomic_pat -> Lparen pat Colon . typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 234
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 234:
## Known stack suffix:
## Lparen pat Colon typ
## LR(1) items:
atomic_pat -> Lparen pat Colon typ . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## Lparen pat Colon typ Rparen
## LR(1) items:
atomic_pat -> Lparen pat Colon typ Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Lparen pat Colon typ Rparen

State 236:
## Known stack suffix:
## Lparen pat As
## LR(1) items:
atomic_pat -> Lparen pat As . x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## Lparen pat As x
## LR(1) items:
atomic_pat -> Lparen pat As x . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## Lparen pat As x Rparen
## LR(1) items:
atomic_pat -> Lparen pat As x Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Lparen pat As x Rparen

State 239:
## Known stack suffix:
## Lparen comma_pats
## LR(1) items:
atomic_pat -> Lparen comma_pats . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## Lparen comma_pats Rparen
## LR(1) items:
atomic_pat -> Lparen comma_pats Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Lparen comma_pats Rparen

State 241:
## Known stack suffix:
## semi_pats_help
## LR(1) items:
semi_pats -> semi_pats_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production semi_pats -> semi_pats_help

State 242:
## Known stack suffix:
## Lsquare semi_pats
## LR(1) items:
atomic_pat -> Lsquare semi_pats . Rsquare [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rsquare shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## Lsquare semi_pats Rsquare
## LR(1) items:
atomic_pat -> Lsquare semi_pats Rsquare . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> Lsquare semi_pats Rsquare

State 244:
## Known stack suffix:
## pat
## LR(1) items:
semi_pats_help -> pat . [ Rsquare ]
semi_pats_help -> pat . Semi [ Rsquare ]
semi_pats_help -> pat . Semi semi_pats_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 245
## Reductions:
-- On Rsquare
--   reduce production semi_pats_help -> pat

State 245:
## Known stack suffix:
## pat Semi
## LR(1) items:
semi_pats_help -> pat Semi . [ Rsquare ]
semi_pats_help -> pat Semi . semi_pats_help [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_help shift to state 246
-- On pat shift to state 244
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On Rsquare
--   reduce production semi_pats_help -> pat Semi

State 246:
## Known stack suffix:
## pat Semi semi_pats_help
## LR(1) items:
semi_pats_help -> pat Semi semi_pats_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production semi_pats_help -> pat Semi semi_pats_help

State 247:
## Known stack suffix:
## id Eq pat
## LR(1) items:
fpat -> id Eq pat . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi BarGt
--   reduce production fpat -> id Eq pat

State 248:
## Known stack suffix:
## LtBar fpats
## LR(1) items:
atomic_pat -> LtBar fpats . BarGt [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarGt shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## LtBar fpats BarGt
## LR(1) items:
atomic_pat -> LtBar fpats BarGt . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow
--   reduce production atomic_pat -> LtBar fpats BarGt

State 250:
## Known stack suffix:
## fpat
## LR(1) items:
fpats -> fpat . [ BarGt ]
fpats -> fpat . Semi [ BarGt ]
fpats -> fpat . Semi fpats [ BarGt ]
## Transitions:
-- On Semi shift to state 251
## Reductions:
-- On BarGt
--   reduce production fpats -> fpat

State 251:
## Known stack suffix:
## fpat Semi
## LR(1) items:
fpats -> fpat Semi . [ BarGt ]
fpats -> fpat Semi . fpats [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 191
-- On fpats shift to state 252
-- On fpat shift to state 250
## Reductions:
-- On BarGt
--   reduce production fpats -> fpat Semi

State 252:
## Known stack suffix:
## fpat Semi fpats
## LR(1) items:
fpats -> fpat Semi fpats . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt
--   reduce production fpats -> fpat Semi fpats

State 253:
## Known stack suffix:
## x atomic_pats1
## LR(1) items:
funcl -> x atomic_pats1 . opt_typ_annot Eq exp [ And ]
funcls -> x atomic_pats1 . opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 254
-- On opt_typ_annot shift to state 256
## Reductions:
-- On Eq
--   reduce production opt_typ_annot ->

State 254:
## Known stack suffix:
## Colon
## LR(1) items:
opt_typ_annot -> Colon . typ [ Eq ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 255
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 255:
## Known stack suffix:
## Colon typ
## LR(1) items:
opt_typ_annot -> Colon typ . [ Eq ]
## Transitions:
## Reductions:
-- On Eq
--   reduce production opt_typ_annot -> Colon typ

State 256:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot . Eq exp [ And ]
funcls -> x atomic_pats1 opt_typ_annot . Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot Eq
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot Eq . exp [ And ]
funcls -> x atomic_pats1 opt_typ_annot Eq . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 493
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 258:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_exp -> Nvar . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Nvar

State 259:
## Known stack suffix:
## Match
## LR(1) items:
atomic_exp -> Match . exp With patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match . exp With Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 486
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 260:
## Known stack suffix:
## LtBar
## LR(1) items:
atomic_exp -> LtBar . fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> LtBar . at_exp With fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 472
-- On field_exp shift to state 312
-- On fexps_help shift to state 475
-- On fexps shift to state 476
-- On fexp shift to state 478
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 482
-- On app_exp shift to state 366
## Reductions:

State 261:
## Known stack suffix:
## Lsquare
## LR(1) items:
atomic_exp -> Lsquare . semi_exps Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lsquare . exp Bar Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 463
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 465
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rsquare
--   reduce production semi_exps ->

State 262:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_exp -> Lparen . exp Colon typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen . comma_exps Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen . exp Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
lit -> Lparen . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Eq Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . IN Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . MEM Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . MinusMinusGt Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . AmpAmp Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . BarBar Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . ColonColon Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Star Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Plus Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . GtEq Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . PlusX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . StarX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . GtEqX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . EqualX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . StarstarX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . At Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . AtX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On Rparen shift to state 195
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On Match shift to state 259
-- On MEM shift to state 16
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On Do shift to state 288
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BarBar shift to state 30
-- On BacktickString shift to state 294
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 453
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On comma_exps shift to state 461
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 263:
## Known stack suffix:
## Let_
## LR(1) items:
right_atomic_exp -> Let_ . letbind In exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 450
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 264:
## Known stack suffix:
## pat
## LR(1) items:
letbind -> pat . opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 254
-- On opt_typ_annot shift to state 265
## Reductions:
-- On Eq
--   reduce production opt_typ_annot ->

State 265:
## Known stack suffix:
## pat opt_typ_annot
## LR(1) items:
letbind -> pat opt_typ_annot . Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## pat opt_typ_annot Eq
## LR(1) items:
letbind -> pat opt_typ_annot Eq . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 449
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 267:
## Known stack suffix:
## Lcurly
## LR(1) items:
atomic_exp -> Lcurly . exp Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly . exp Bar Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly . semi_exps Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 438
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 440
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rcurly
--   reduce production semi_exps ->

State 268:
## Known stack suffix:
## If_
## LR(1) items:
right_atomic_exp -> If_ . exp Then exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 433
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 269:
## Known stack suffix:
## Function_
## LR(1) items:
atomic_exp -> Function_ . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Function_ . Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Bar shift to state 270
-- On x shift to state 205
-- On patexps shift to state 431
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 270:
## Known stack suffix:
## Function_ Bar
## LR(1) items:
atomic_exp -> Function_ Bar . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 271
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 271:
## Known stack suffix:
## Function_ Bar patexps
## LR(1) items:
atomic_exp -> Function_ Bar patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## Function_ Bar patexps End
## LR(1) items:
atomic_exp -> Function_ Bar patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Function_ Bar patexps End

State 273:
## Known stack suffix:
## pat
## LR(1) items:
patexps -> pat . Arrow exp [ End ]
patexps -> pat . Arrow exp Bar patexps [ End ]
## Transitions:
-- On Arrow shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## pat Arrow
## LR(1) items:
patexps -> pat Arrow . exp [ End ]
patexps -> pat Arrow . exp Bar patexps [ End ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 428
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 275:
## Known stack suffix:
## Fun_
## LR(1) items:
right_atomic_exp -> Fun_ . patsexp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patsexp shift to state 276
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 277
-- On atomic_pat shift to state 426
## Reductions:

State 276:
## Known stack suffix:
## Fun_ patsexp
## LR(1) items:
right_atomic_exp -> Fun_ patsexp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production right_atomic_exp -> Fun_ patsexp

State 277:
## Known stack suffix:
## atomic_pats1
## LR(1) items:
patsexp -> atomic_pats1 . Arrow exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Arrow shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## atomic_pats1 Arrow
## LR(1) items:
patsexp -> atomic_pats1 Arrow . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 425
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 279:
## Known stack suffix:
## Forall
## LR(1) items:
right_atomic_exp -> Forall . quant_bindings Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 422
## Reductions:

State 280:
## Known stack suffix:
## Lparen
## LR(1) items:
quant_bindings -> Lparen . pat IN exp Rparen [ Dot Bar ]
quant_bindings -> Lparen . pat MEM exp Rparen [ Dot Bar ]
quant_bindings -> Lparen . pat IN exp Rparen quant_bindings [ Dot Bar ]
quant_bindings -> Lparen . pat MEM exp Rparen quant_bindings [ Dot Bar ]
x -> Lparen . Eq Rparen [ X Lparen Dot Bar ]
x -> Lparen . IN Rparen [ X Lparen Dot Bar ]
x -> Lparen . MEM Rparen [ X Lparen Dot Bar ]
x -> Lparen . MinusMinusGt Rparen [ X Lparen Dot Bar ]
x -> Lparen . AmpAmp Rparen [ X Lparen Dot Bar ]
x -> Lparen . BarBar Rparen [ X Lparen Dot Bar ]
x -> Lparen . ColonColon Rparen [ X Lparen Dot Bar ]
x -> Lparen . Star Rparen [ X Lparen Dot Bar ]
x -> Lparen . Plus Rparen [ X Lparen Dot Bar ]
x -> Lparen . GtEq Rparen [ X Lparen Dot Bar ]
x -> Lparen . PlusX Rparen [ X Lparen Dot Bar ]
x -> Lparen . StarX Rparen [ X Lparen Dot Bar ]
x -> Lparen . GtEqX Rparen [ X Lparen Dot Bar ]
x -> Lparen . EqualX Rparen [ X Lparen Dot Bar ]
x -> Lparen . StarstarX Rparen [ X Lparen Dot Bar ]
x -> Lparen . At Rparen [ X Lparen Dot Bar ]
x -> Lparen . AtX Rparen [ X Lparen Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On False shift to state 200
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 205
-- On pat shift to state 281
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 281:
## Known stack suffix:
## Lparen pat
## LR(1) items:
quant_bindings -> Lparen pat . IN exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat . MEM exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat . IN exp Rparen quant_bindings [ Dot Bar ]
quant_bindings -> Lparen pat . MEM exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On MEM shift to state 282
-- On IN shift to state 418
## Reductions:

State 282:
## Known stack suffix:
## Lparen pat MEM
## LR(1) items:
quant_bindings -> Lparen pat MEM . exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat MEM . exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 415
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 283:
## Known stack suffix:
## Exists
## LR(1) items:
right_atomic_exp -> Exists . quant_bindings Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 286
## Reductions:

State 284:
## Known stack suffix:
## x
## LR(1) items:
quant_bindings -> x . [ Dot Bar ]
quant_bindings -> x . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 285
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> x

State 285:
## Known stack suffix:
## x quant_bindings
## LR(1) items:
quant_bindings -> x quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> x quant_bindings

State 286:
## Known stack suffix:
## Exists quant_bindings
## LR(1) items:
right_atomic_exp -> Exists quant_bindings . Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Dot shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## Exists quant_bindings Dot
## LR(1) items:
right_atomic_exp -> Exists quant_bindings Dot . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 414
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 288:
## Known stack suffix:
## Do
## LR(1) items:
atomic_exp -> Do . id do_exps In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## Do id
## LR(1) items:
atomic_exp -> Do id . do_exps In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 290
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On do_exps shift to state 410
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On In
--   reduce production do_exps ->

State 290:
## Known stack suffix:
## pat
## LR(1) items:
do_exps -> pat . LeftArrow exp Semi do_exps [ In ]
## Transitions:
-- On LeftArrow shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## pat LeftArrow
## LR(1) items:
do_exps -> pat LeftArrow . exp Semi do_exps [ In ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 407
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 292:
## Known stack suffix:
## BraceBar
## LR(1) items:
atomic_exp -> BraceBar . semi_exps BarBrace [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 402
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 404
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On BarBrace
--   reduce production semi_exps ->

State 293:
## Known stack suffix:
## Begin_
## LR(1) items:
atomic_exp -> Begin_ . exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 399
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 294:
## Known stack suffix:
## BacktickString
## LR(1) items:
atomic_exp -> BacktickString . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> BacktickString

State 295:
## Known stack suffix:
## starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production star_right_atomic_exp -> starstar_right_atomic_exp

State 296:
## Known stack suffix:
## starstar_exp
## LR(1) items:
star_exp -> starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production star_exp -> starstar_exp

State 297:
## Known stack suffix:
## star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production plus_right_atomic_exp -> star_right_atomic_exp

State 298:
## Known stack suffix:
## star_exp
## LR(1) items:
plus_exp -> star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> star_exp

State 299:
## Known stack suffix:
## star_exp StarX
## LR(1) items:
star_exp -> star_exp StarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp StarX . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 300
-- On starstar_exp shift to state 301
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 300:
## Known stack suffix:
## star_exp StarX starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp

State 301:
## Known stack suffix:
## star_exp StarX starstar_exp
## LR(1) items:
star_exp -> star_exp StarX starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production star_exp -> star_exp StarX starstar_exp

State 302:
## Known stack suffix:
## right_atomic_exp
## LR(1) items:
starstar_right_atomic_exp -> right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production starstar_right_atomic_exp -> right_atomic_exp

State 303:
## Known stack suffix:
## lit
## LR(1) items:
atomic_exp -> lit . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> lit

State 304:
## Known stack suffix:
## id
## LR(1) items:
field_exp -> id . DotBrace nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id . DotBrace nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On DotBrace shift to state 305
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> id

State 305:
## Known stack suffix:
## id DotBrace
## LR(1) items:
field_exp -> id DotBrace . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id DotBrace . nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 306
-- On atomic_nexp shift to state 77
## Reductions:

State 306:
## Known stack suffix:
## id DotBrace nexp
## LR(1) items:
field_exp -> id DotBrace nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id DotBrace nexp . Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 307
-- On Dot shift to state 308
## Reductions:

State 307:
## Known stack suffix:
## id DotBrace nexp Rsquare
## LR(1) items:
field_exp -> id DotBrace nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> id DotBrace nexp Rsquare

State 308:
## Known stack suffix:
## id DotBrace nexp Dot
## LR(1) items:
field_exp -> id DotBrace nexp Dot . Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Dot shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## id DotBrace nexp Dot Dot
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 310
-- On atomic_nexp shift to state 77
## Reductions:

State 310:
## Known stack suffix:
## id DotBrace nexp Dot Dot nexp
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## id DotBrace nexp Dot Dot nexp Rsquare
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare

State 312:
## Known stack suffix:
## field_exp
## LR(1) items:
app_exp -> field_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production app_exp -> field_exp

State 313:
## Known stack suffix:
## atomic_exp
## LR(1) items:
field_exp -> atomic_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . Dot id [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . DotBrace nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . DotBrace nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On DotBrace shift to state 314
-- On Dot shift to state 321
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> atomic_exp

State 314:
## Known stack suffix:
## atomic_exp DotBrace
## LR(1) items:
field_exp -> atomic_exp DotBrace . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp DotBrace . nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 315
-- On atomic_nexp shift to state 77
## Reductions:

State 315:
## Known stack suffix:
## atomic_exp DotBrace nexp
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp DotBrace nexp . Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 316
-- On Dot shift to state 317
## Reductions:

State 316:
## Known stack suffix:
## atomic_exp DotBrace nexp Rsquare
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> atomic_exp DotBrace nexp Rsquare

State 317:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot . Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Dot shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 319
-- On atomic_nexp shift to state 77
## Reductions:

State 319:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot nexp
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot nexp Rsquare
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare

State 321:
## Known stack suffix:
## atomic_exp Dot
## LR(1) items:
field_exp -> atomic_exp Dot . id [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## atomic_exp Dot id
## LR(1) items:
field_exp -> atomic_exp Dot id . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production field_exp -> atomic_exp Dot id

State 323:
## Known stack suffix:
## app_exp
## LR(1) items:
app_exp -> app_exp . field_exp [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . StarstarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_right_atomic_exp -> app_exp . StarstarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 324
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 327
-- On atomic_exp shift to state 313
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production starstar_exp -> app_exp

State 324:
## Known stack suffix:
## app_exp StarstarX
## LR(1) items:
starstar_exp -> app_exp StarstarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_right_atomic_exp -> app_exp StarstarX . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 325
-- On starstar_exp shift to state 326
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 325:
## Known stack suffix:
## app_exp StarstarX starstar_right_atomic_exp
## LR(1) items:
starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp

State 326:
## Known stack suffix:
## app_exp StarstarX starstar_exp
## LR(1) items:
starstar_exp -> app_exp StarstarX starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production starstar_exp -> app_exp StarstarX starstar_exp

State 327:
## Known stack suffix:
## app_exp field_exp
## LR(1) items:
app_exp -> app_exp field_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production app_exp -> app_exp field_exp

State 328:
## Known stack suffix:
## star_exp Star
## LR(1) items:
star_exp -> star_exp Star . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp Star . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 329
-- On starstar_exp shift to state 330
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 329:
## Known stack suffix:
## star_exp Star starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp

State 330:
## Known stack suffix:
## star_exp Star starstar_exp
## LR(1) items:
star_exp -> star_exp Star starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production star_exp -> star_exp Star starstar_exp

State 331:
## Known stack suffix:
## plus_right_atomic_exp
## LR(1) items:
cons_right_atomic_exp -> plus_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production cons_right_atomic_exp -> plus_right_atomic_exp

State 332:
## Known stack suffix:
## plus_exp
## LR(1) items:
cons_exp -> plus_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_exp -> plus_exp . ColonColon cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_right_atomic_exp -> plus_exp . ColonColon cons_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
plus_exp -> plus_exp . Plus star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . PlusX star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp . Plus star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
plus_right_atomic_exp -> plus_exp . PlusX star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On PlusX shift to state 333
-- On Plus shift to state 336
-- On ColonColon shift to state 339
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production cons_exp -> plus_exp

State 333:
## Known stack suffix:
## plus_exp PlusX
## LR(1) items:
plus_exp -> plus_exp PlusX . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp PlusX . star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 334
-- On star_exp shift to state 335
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 334:
## Known stack suffix:
## plus_exp PlusX star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp

State 335:
## Known stack suffix:
## plus_exp PlusX star_exp
## LR(1) items:
plus_exp -> plus_exp PlusX star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> plus_exp PlusX star_exp

State 336:
## Known stack suffix:
## plus_exp Plus
## LR(1) items:
plus_exp -> plus_exp Plus . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp Plus . star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 337
-- On star_exp shift to state 338
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 337:
## Known stack suffix:
## plus_exp Plus star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp

State 338:
## Known stack suffix:
## plus_exp Plus star_exp
## LR(1) items:
plus_exp -> plus_exp Plus star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> plus_exp Plus star_exp

State 339:
## Known stack suffix:
## plus_exp ColonColon
## LR(1) items:
cons_exp -> plus_exp ColonColon . cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_right_atomic_exp -> plus_exp ColonColon . cons_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 340
-- On cons_exp shift to state 341
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 340:
## Known stack suffix:
## plus_exp ColonColon cons_right_atomic_exp
## LR(1) items:
cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp

State 341:
## Known stack suffix:
## plus_exp ColonColon cons_exp
## LR(1) items:
cons_exp -> plus_exp ColonColon cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production cons_exp -> plus_exp ColonColon cons_exp

State 342:
## Known stack suffix:
## or_right_atomic_exp
## LR(1) items:
imp_right_atomic_exp -> or_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production imp_right_atomic_exp -> or_right_atomic_exp

State 343:
## Known stack suffix:
## or_exp
## LR(1) items:
imp_exp -> or_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_exp -> or_exp . MinusMinusGt imp_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_right_atomic_exp -> or_exp . MinusMinusGt imp_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On MinusMinusGt shift to state 344
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production imp_exp -> or_exp

State 344:
## Known stack suffix:
## or_exp MinusMinusGt
## LR(1) items:
imp_exp -> or_exp MinusMinusGt . imp_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_right_atomic_exp -> or_exp MinusMinusGt . imp_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 345
-- On imp_exp shift to state 346
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 345:
## Known stack suffix:
## or_exp MinusMinusGt imp_right_atomic_exp
## LR(1) items:
imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp

State 346:
## Known stack suffix:
## or_exp MinusMinusGt imp_exp
## LR(1) items:
imp_exp -> or_exp MinusMinusGt imp_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production imp_exp -> or_exp MinusMinusGt imp_exp

State 347:
## Known stack suffix:
## eq_right_atomic_exp
## LR(1) items:
and_right_atomic_exp -> eq_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production and_right_atomic_exp -> eq_right_atomic_exp

State 348:
## Known stack suffix:
## eq_exp
## LR(1) items:
and_exp -> eq_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_exp -> eq_exp . AmpAmp and_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_right_atomic_exp -> eq_exp . AmpAmp and_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_exp -> eq_exp . Eq at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . EqualX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . GtEq at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . GtEqX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . IN at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . MEM at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp . Eq at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . EqualX at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . IN at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . MEM at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On MEM shift to state 349
-- On IN shift to state 360
-- On GtEqX shift to state 363
-- On GtEq shift to state 379
-- On EqualX shift to state 381
-- On Eq shift to state 384
-- On AmpAmp shift to state 387
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And
--   reduce production and_exp -> eq_exp

State 349:
## Known stack suffix:
## eq_exp MEM
## LR(1) items:
eq_exp -> eq_exp MEM . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp MEM . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 358
-- On at_exp shift to state 359
-- On app_exp shift to state 323
## Reductions:

State 350:
## Known stack suffix:
## cons_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production at_right_atomic_exp -> cons_right_atomic_exp

State 351:
## Known stack suffix:
## cons_exp
## LR(1) items:
at_exp -> cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . At at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . AtX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp . At at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
at_right_atomic_exp -> cons_exp . AtX at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On AtX shift to state 352
-- On At shift to state 355
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production at_exp -> cons_exp

State 352:
## Known stack suffix:
## cons_exp AtX
## LR(1) items:
at_exp -> cons_exp AtX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp AtX . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 353
-- On at_exp shift to state 354
-- On app_exp shift to state 323
## Reductions:

State 353:
## Known stack suffix:
## cons_exp AtX at_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp

State 354:
## Known stack suffix:
## cons_exp AtX at_exp
## LR(1) items:
at_exp -> cons_exp AtX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production at_exp -> cons_exp AtX at_exp

State 355:
## Known stack suffix:
## cons_exp At
## LR(1) items:
at_exp -> cons_exp At . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp At . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 356
-- On at_exp shift to state 357
-- On app_exp shift to state 323
## Reductions:

State 356:
## Known stack suffix:
## cons_exp At at_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_exp At at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp

State 357:
## Known stack suffix:
## cons_exp At at_exp
## LR(1) items:
at_exp -> cons_exp At at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production at_exp -> cons_exp At at_exp

State 358:
## Known stack suffix:
## eq_exp MEM at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp

State 359:
## Known stack suffix:
## eq_exp MEM at_exp
## LR(1) items:
eq_exp -> eq_exp MEM at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp MEM at_exp

State 360:
## Known stack suffix:
## eq_exp IN
## LR(1) items:
eq_exp -> eq_exp IN . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp IN . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 361
-- On at_exp shift to state 362
-- On app_exp shift to state 323
## Reductions:

State 361:
## Known stack suffix:
## eq_exp IN at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp

State 362:
## Known stack suffix:
## eq_exp IN at_exp
## LR(1) items:
eq_exp -> eq_exp IN at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp IN at_exp

State 363:
## Known stack suffix:
## eq_exp GtEqX
## LR(1) items:
eq_exp -> eq_exp GtEqX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 378
-- On app_exp shift to state 366
## Reductions:

State 364:
## Known stack suffix:
## star_exp
## LR(1) items:
plus_exp -> star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> star_exp

State 365:
## Known stack suffix:
## star_exp StarX
## LR(1) items:
star_exp -> star_exp StarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 301
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## app_exp
## LR(1) items:
app_exp -> app_exp . field_exp [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . StarstarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 367
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 327
-- On atomic_exp shift to state 313
## Reductions:
-- On With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production starstar_exp -> app_exp

State 367:
## Known stack suffix:
## app_exp StarstarX
## LR(1) items:
starstar_exp -> app_exp StarstarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 326
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 368:
## Known stack suffix:
## star_exp Star
## LR(1) items:
star_exp -> star_exp Star . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 330
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 369:
## Known stack suffix:
## plus_exp
## LR(1) items:
cons_exp -> plus_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_exp -> plus_exp . ColonColon cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . Plus star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . PlusX star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On PlusX shift to state 370
-- On Plus shift to state 372
-- On ColonColon shift to state 374
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production cons_exp -> plus_exp

State 370:
## Known stack suffix:
## plus_exp PlusX
## LR(1) items:
plus_exp -> plus_exp PlusX . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 371
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 371:
## Known stack suffix:
## plus_exp PlusX star_exp
## LR(1) items:
plus_exp -> plus_exp PlusX star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> plus_exp PlusX star_exp

State 372:
## Known stack suffix:
## plus_exp Plus
## LR(1) items:
plus_exp -> plus_exp Plus . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 373
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 373:
## Known stack suffix:
## plus_exp Plus star_exp
## LR(1) items:
plus_exp -> plus_exp Plus star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp
--   reduce production plus_exp -> plus_exp Plus star_exp

State 374:
## Known stack suffix:
## plus_exp ColonColon
## LR(1) items:
cons_exp -> plus_exp ColonColon . cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 341
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 375:
## Known stack suffix:
## cons_exp
## LR(1) items:
at_exp -> cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . At at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . AtX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On AtX shift to state 376
-- On At shift to state 377
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production at_exp -> cons_exp

State 376:
## Known stack suffix:
## cons_exp AtX
## LR(1) items:
at_exp -> cons_exp AtX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 354
-- On app_exp shift to state 366
## Reductions:

State 377:
## Known stack suffix:
## cons_exp At
## LR(1) items:
at_exp -> cons_exp At . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 357
-- On app_exp shift to state 366
## Reductions:

State 378:
## Known stack suffix:
## eq_exp GtEqX at_exp
## LR(1) items:
eq_exp -> eq_exp GtEqX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp GtEqX at_exp

State 379:
## Known stack suffix:
## eq_exp GtEq
## LR(1) items:
eq_exp -> eq_exp GtEq . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 380
-- On app_exp shift to state 366
## Reductions:

State 380:
## Known stack suffix:
## eq_exp GtEq at_exp
## LR(1) items:
eq_exp -> eq_exp GtEq at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp GtEq at_exp

State 381:
## Known stack suffix:
## eq_exp EqualX
## LR(1) items:
eq_exp -> eq_exp EqualX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp EqualX . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 382
-- On at_exp shift to state 383
-- On app_exp shift to state 323
## Reductions:

State 382:
## Known stack suffix:
## eq_exp EqualX at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp

State 383:
## Known stack suffix:
## eq_exp EqualX at_exp
## LR(1) items:
eq_exp -> eq_exp EqualX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp EqualX at_exp

State 384:
## Known stack suffix:
## eq_exp Eq
## LR(1) items:
eq_exp -> eq_exp Eq . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp Eq . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 385
-- On at_exp shift to state 386
-- On app_exp shift to state 323
## Reductions:

State 385:
## Known stack suffix:
## eq_exp Eq at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp

State 386:
## Known stack suffix:
## eq_exp Eq at_exp
## LR(1) items:
eq_exp -> eq_exp Eq at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> eq_exp Eq at_exp

State 387:
## Known stack suffix:
## eq_exp AmpAmp
## LR(1) items:
and_exp -> eq_exp AmpAmp . and_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_right_atomic_exp -> eq_exp AmpAmp . and_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 390
-- On and_exp shift to state 391
## Reductions:

State 388:
## Known stack suffix:
## at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production eq_right_atomic_exp -> at_right_atomic_exp

State 389:
## Known stack suffix:
## at_exp
## LR(1) items:
eq_exp -> at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp
--   reduce production eq_exp -> at_exp

State 390:
## Known stack suffix:
## eq_exp AmpAmp and_right_atomic_exp
## LR(1) items:
and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp

State 391:
## Known stack suffix:
## eq_exp AmpAmp and_exp
## LR(1) items:
and_exp -> eq_exp AmpAmp and_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And
--   reduce production and_exp -> eq_exp AmpAmp and_exp

State 392:
## Known stack suffix:
## and_right_atomic_exp
## LR(1) items:
or_right_atomic_exp -> and_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production or_right_atomic_exp -> and_right_atomic_exp

State 393:
## Known stack suffix:
## and_exp
## LR(1) items:
or_exp -> and_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_exp -> and_exp . BarBar or_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_right_atomic_exp -> and_exp . BarBar or_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On BarBar shift to state 394
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production or_exp -> and_exp

State 394:
## Known stack suffix:
## and_exp BarBar
## LR(1) items:
or_exp -> and_exp BarBar . or_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_right_atomic_exp -> and_exp BarBar . or_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 395
-- On or_exp shift to state 396
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 395:
## Known stack suffix:
## and_exp BarBar or_right_atomic_exp
## LR(1) items:
or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp

State 396:
## Known stack suffix:
## and_exp BarBar or_exp
## LR(1) items:
or_exp -> and_exp BarBar or_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production or_exp -> and_exp BarBar or_exp

State 397:
## Known stack suffix:
## imp_right_atomic_exp
## LR(1) items:
exp -> imp_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production exp -> imp_right_atomic_exp

State 398:
## Known stack suffix:
## imp_exp
## LR(1) items:
exp -> imp_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production exp -> imp_exp

State 399:
## Known stack suffix:
## Begin_ exp
## LR(1) items:
atomic_exp -> Begin_ exp . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## Begin_ exp End
## LR(1) items:
atomic_exp -> Begin_ exp End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Begin_ exp End

State 401:
## Known stack suffix:
## semi_exps_help
## LR(1) items:
semi_exps -> semi_exps_help . [ Rsquare Rcurly BarBrace ]
## Transitions:
## Reductions:
-- On Rsquare Rcurly BarBrace
--   reduce production semi_exps -> semi_exps_help

State 402:
## Known stack suffix:
## BraceBar semi_exps
## LR(1) items:
atomic_exp -> BraceBar semi_exps . BarBrace [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarBrace shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## BraceBar semi_exps BarBrace
## LR(1) items:
atomic_exp -> BraceBar semi_exps BarBrace . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> BraceBar semi_exps BarBrace

State 404:
## Known stack suffix:
## exp
## LR(1) items:
semi_exps_help -> exp . [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp . Semi [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp . Semi semi_exps_help [ Rsquare Rcurly BarBrace ]
## Transitions:
-- On Semi shift to state 405
## Reductions:
-- On Rsquare Rcurly BarBrace
--   reduce production semi_exps_help -> exp

State 405:
## Known stack suffix:
## exp Semi
## LR(1) items:
semi_exps_help -> exp Semi . [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp Semi . semi_exps_help [ Rsquare Rcurly BarBrace ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 406
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 404
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rsquare Rcurly BarBrace
--   reduce production semi_exps_help -> exp Semi

State 406:
## Known stack suffix:
## exp Semi semi_exps_help
## LR(1) items:
semi_exps_help -> exp Semi semi_exps_help . [ Rsquare Rcurly BarBrace ]
## Transitions:
## Reductions:
-- On Rsquare Rcurly BarBrace
--   reduce production semi_exps_help -> exp Semi semi_exps_help

State 407:
## Known stack suffix:
## pat LeftArrow exp
## LR(1) items:
do_exps -> pat LeftArrow exp . Semi do_exps [ In ]
## Transitions:
-- On Semi shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## pat LeftArrow exp Semi
## LR(1) items:
do_exps -> pat LeftArrow exp Semi . do_exps [ In ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 290
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On do_exps shift to state 409
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On In
--   reduce production do_exps ->

State 409:
## Known stack suffix:
## pat LeftArrow exp Semi do_exps
## LR(1) items:
do_exps -> pat LeftArrow exp Semi do_exps . [ In ]
## Transitions:
## Reductions:
-- On In
--   reduce production do_exps -> pat LeftArrow exp Semi do_exps

State 410:
## Known stack suffix:
## Do id do_exps
## LR(1) items:
atomic_exp -> Do id do_exps . In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On In shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## Do id do_exps In
## LR(1) items:
atomic_exp -> Do id do_exps In . exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 412
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 412:
## Known stack suffix:
## Do id do_exps In exp
## LR(1) items:
atomic_exp -> Do id do_exps In exp . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## Do id do_exps In exp End
## LR(1) items:
atomic_exp -> Do id do_exps In exp End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Do id do_exps In exp End

State 414:
## Known stack suffix:
## Exists quant_bindings Dot exp
## LR(1) items:
right_atomic_exp -> Exists quant_bindings Dot exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production right_atomic_exp -> Exists quant_bindings Dot exp

State 415:
## Known stack suffix:
## Lparen pat MEM exp
## LR(1) items:
quant_bindings -> Lparen pat MEM exp . Rparen [ Dot Bar ]
quant_bindings -> Lparen pat MEM exp . Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On Rparen shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## Lparen pat MEM exp Rparen
## LR(1) items:
quant_bindings -> Lparen pat MEM exp Rparen . [ Dot Bar ]
quant_bindings -> Lparen pat MEM exp Rparen . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 417
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> Lparen pat MEM exp Rparen

State 417:
## Known stack suffix:
## Lparen pat MEM exp Rparen quant_bindings
## LR(1) items:
quant_bindings -> Lparen pat MEM exp Rparen quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> Lparen pat MEM exp Rparen quant_bindings

State 418:
## Known stack suffix:
## Lparen pat IN
## LR(1) items:
quant_bindings -> Lparen pat IN . exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat IN . exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 419
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 419:
## Known stack suffix:
## Lparen pat IN exp
## LR(1) items:
quant_bindings -> Lparen pat IN exp . Rparen [ Dot Bar ]
quant_bindings -> Lparen pat IN exp . Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On Rparen shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## Lparen pat IN exp Rparen
## LR(1) items:
quant_bindings -> Lparen pat IN exp Rparen . [ Dot Bar ]
quant_bindings -> Lparen pat IN exp Rparen . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 421
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> Lparen pat IN exp Rparen

State 421:
## Known stack suffix:
## Lparen pat IN exp Rparen quant_bindings
## LR(1) items:
quant_bindings -> Lparen pat IN exp Rparen quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot Bar
--   reduce production quant_bindings -> Lparen pat IN exp Rparen quant_bindings

State 422:
## Known stack suffix:
## Forall quant_bindings
## LR(1) items:
right_atomic_exp -> Forall quant_bindings . Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Dot shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## Forall quant_bindings Dot
## LR(1) items:
right_atomic_exp -> Forall quant_bindings Dot . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 424
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 424:
## Known stack suffix:
## Forall quant_bindings Dot exp
## LR(1) items:
right_atomic_exp -> Forall quant_bindings Dot exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production right_atomic_exp -> Forall quant_bindings Dot exp

State 425:
## Known stack suffix:
## atomic_pats1 Arrow exp
## LR(1) items:
patsexp -> atomic_pats1 Arrow exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production patsexp -> atomic_pats1 Arrow exp

State 426:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats1 -> atomic_pat . [ Eq Colon Arrow ]
atomic_pats1 -> atomic_pat . atomic_pats1 [ Eq Colon Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 427
-- On atomic_pat shift to state 426
## Reductions:
-- On Eq Colon Arrow
--   reduce production atomic_pats1 -> atomic_pat

State 427:
## Known stack suffix:
## atomic_pat atomic_pats1
## LR(1) items:
atomic_pats1 -> atomic_pat atomic_pats1 . [ Eq Colon Arrow ]
## Transitions:
## Reductions:
-- On Eq Colon Arrow
--   reduce production atomic_pats1 -> atomic_pat atomic_pats1

State 428:
## Known stack suffix:
## pat Arrow exp
## LR(1) items:
patexps -> pat Arrow exp . [ End ]
patexps -> pat Arrow exp . Bar patexps [ End ]
## Transitions:
-- On Bar shift to state 429
## Reductions:
-- On End
--   reduce production patexps -> pat Arrow exp

State 429:
## Known stack suffix:
## pat Arrow exp Bar
## LR(1) items:
patexps -> pat Arrow exp Bar . patexps [ End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 430
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 430:
## Known stack suffix:
## pat Arrow exp Bar patexps
## LR(1) items:
patexps -> pat Arrow exp Bar patexps . [ End ]
## Transitions:
## Reductions:
-- On End
--   reduce production patexps -> pat Arrow exp Bar patexps

State 431:
## Known stack suffix:
## Function_ patexps
## LR(1) items:
atomic_exp -> Function_ patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## Function_ patexps End
## LR(1) items:
atomic_exp -> Function_ patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Function_ patexps End

State 433:
## Known stack suffix:
## If_ exp
## LR(1) items:
right_atomic_exp -> If_ exp . Then exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Then shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## If_ exp Then
## LR(1) items:
right_atomic_exp -> If_ exp Then . exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 435
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 435:
## Known stack suffix:
## If_ exp Then exp
## LR(1) items:
right_atomic_exp -> If_ exp Then exp . Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Else shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## If_ exp Then exp Else
## LR(1) items:
right_atomic_exp -> If_ exp Then exp Else . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 437
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 437:
## Known stack suffix:
## If_ exp Then exp Else exp
## LR(1) items:
right_atomic_exp -> If_ exp Then exp Else exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production right_atomic_exp -> If_ exp Then exp Else exp

State 438:
## Known stack suffix:
## Lcurly semi_exps
## LR(1) items:
atomic_exp -> Lcurly semi_exps . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## Lcurly semi_exps Rcurly
## LR(1) items:
atomic_exp -> Lcurly semi_exps Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lcurly semi_exps Rcurly

State 440:
## Known stack suffix:
## Lcurly exp
## LR(1) items:
atomic_exp -> Lcurly exp . Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly exp . Bar Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
semi_exps_help -> exp . [ Rcurly ]
semi_exps_help -> exp . Semi [ Rcurly ]
semi_exps_help -> exp . Semi semi_exps_help [ Rcurly ]
## Transitions:
-- On Semi shift to state 405
-- On Bar shift to state 441
## Reductions:
-- On Rcurly
--   reduce production semi_exps_help -> exp

State 441:
## Known stack suffix:
## Lcurly exp Bar
## LR(1) items:
atomic_exp -> Lcurly exp Bar . exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly exp Bar . Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 442
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 447
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 442:
## Known stack suffix:
## Lcurly exp Bar Forall
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall . quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
right_atomic_exp -> Forall . quant_bindings Dot exp [ Rcurly ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings . Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
right_atomic_exp -> Forall quant_bindings . Dot exp [ Rcurly ]
## Transitions:
-- On Dot shift to state 423
-- On Bar shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar . exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 445
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 445:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar exp
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly

State 447:
## Known stack suffix:
## Lcurly exp Bar exp
## LR(1) items:
atomic_exp -> Lcurly exp Bar exp . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## Lcurly exp Bar exp Rcurly
## LR(1) items:
atomic_exp -> Lcurly exp Bar exp Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lcurly exp Bar exp Rcurly

State 449:
## Known stack suffix:
## pat opt_typ_annot Eq exp
## LR(1) items:
letbind -> pat opt_typ_annot Eq exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert
--   reduce production letbind -> pat opt_typ_annot Eq exp

State 450:
## Known stack suffix:
## Let_ letbind
## LR(1) items:
right_atomic_exp -> Let_ letbind . In exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On In shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## Let_ letbind In
## LR(1) items:
right_atomic_exp -> Let_ letbind In . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 452
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 452:
## Known stack suffix:
## Let_ letbind In exp
## LR(1) items:
right_atomic_exp -> Let_ letbind In exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And
--   reduce production right_atomic_exp -> Let_ letbind In exp

State 453:
## Known stack suffix:
## Lparen exp
## LR(1) items:
atomic_exp -> Lparen exp . Colon typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen exp . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
comma_exps -> exp . Comma exp [ Rparen ]
comma_exps -> exp . Comma comma_exps [ Rparen ]
## Transitions:
-- On Rparen shift to state 454
-- On Comma shift to state 455
-- On Colon shift to state 458
## Reductions:

State 454:
## Known stack suffix:
## Lparen exp Rparen
## LR(1) items:
atomic_exp -> Lparen exp Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lparen exp Rparen

State 455:
## Known stack suffix:
## exp Comma
## LR(1) items:
comma_exps -> exp Comma . exp [ Rparen ]
comma_exps -> exp Comma . comma_exps [ Rparen ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 456
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On comma_exps shift to state 457
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 456:
## Known stack suffix:
## exp Comma exp
## LR(1) items:
comma_exps -> exp . Comma exp [ Rparen ]
comma_exps -> exp Comma exp . [ Rparen ]
comma_exps -> exp . Comma comma_exps [ Rparen ]
## Transitions:
-- On Comma shift to state 455
## Reductions:
-- On Rparen
--   reduce production comma_exps -> exp Comma exp

State 457:
## Known stack suffix:
## exp Comma comma_exps
## LR(1) items:
comma_exps -> exp Comma comma_exps . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production comma_exps -> exp Comma comma_exps

State 458:
## Known stack suffix:
## Lparen exp Colon
## LR(1) items:
atomic_exp -> Lparen exp Colon . typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 459
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 459:
## Known stack suffix:
## Lparen exp Colon typ
## LR(1) items:
atomic_exp -> Lparen exp Colon typ . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rparen shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## Lparen exp Colon typ Rparen
## LR(1) items:
atomic_exp -> Lparen exp Colon typ Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lparen exp Colon typ Rparen

State 461:
## Known stack suffix:
## Lparen comma_exps
## LR(1) items:
atomic_exp -> Lparen comma_exps . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rparen shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## Lparen comma_exps Rparen
## LR(1) items:
atomic_exp -> Lparen comma_exps Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lparen comma_exps Rparen

State 463:
## Known stack suffix:
## Lsquare semi_exps
## LR(1) items:
atomic_exp -> Lsquare semi_exps . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## Lsquare semi_exps Rsquare
## LR(1) items:
atomic_exp -> Lsquare semi_exps Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lsquare semi_exps Rsquare

State 465:
## Known stack suffix:
## Lsquare exp
## LR(1) items:
atomic_exp -> Lsquare exp . Bar Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
semi_exps_help -> exp . [ Rsquare ]
semi_exps_help -> exp . Semi [ Rsquare ]
semi_exps_help -> exp . Semi semi_exps_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 405
-- On Bar shift to state 466
## Reductions:
-- On Rsquare
--   reduce production semi_exps_help -> exp

State 466:
## Known stack suffix:
## Lsquare exp Bar
## LR(1) items:
atomic_exp -> Lsquare exp Bar . Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Forall shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## Lsquare exp Bar Forall
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall . quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings . Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Bar shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar . exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 470
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 470:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar exp
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare

State 472:
## Known stack suffix:
## id
## LR(1) items:
fexp -> id . Eq exp [ Semi BarGt ]
field_exp -> id . DotBrace nexp Rsquare [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
field_exp -> id . DotBrace nexp Dot Dot nexp Rsquare [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
field_exp -> id . [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
## Transitions:
-- On Eq shift to state 473
-- On DotBrace shift to state 305
## Reductions:
-- On X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At
--   reduce production field_exp -> id

State 473:
## Known stack suffix:
## id Eq
## LR(1) items:
fexp -> id Eq . exp [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 474
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 474:
## Known stack suffix:
## id Eq exp
## LR(1) items:
fexp -> id Eq exp . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi BarGt
--   reduce production fexp -> id Eq exp

State 475:
## Known stack suffix:
## fexps_help
## LR(1) items:
fexps -> fexps_help . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt
--   reduce production fexps -> fexps_help

State 476:
## Known stack suffix:
## LtBar fexps
## LR(1) items:
atomic_exp -> LtBar fexps . BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarGt shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## LtBar fexps BarGt
## LR(1) items:
atomic_exp -> LtBar fexps BarGt . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> LtBar fexps BarGt

State 478:
## Known stack suffix:
## fexp
## LR(1) items:
fexps_help -> fexp . [ BarGt ]
fexps_help -> fexp . Semi [ BarGt ]
fexps_help -> fexp . Semi fexps_help [ BarGt ]
## Transitions:
-- On Semi shift to state 479
## Reductions:
-- On BarGt
--   reduce production fexps_help -> fexp

State 479:
## Known stack suffix:
## fexp Semi
## LR(1) items:
fexps_help -> fexp Semi . [ BarGt ]
fexps_help -> fexp Semi . fexps_help [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 480
-- On fexps_help shift to state 481
-- On fexp shift to state 478
## Reductions:
-- On BarGt
--   reduce production fexps_help -> fexp Semi

State 480:
## Known stack suffix:
## id
## LR(1) items:
fexp -> id . Eq exp [ Semi BarGt ]
## Transitions:
-- On Eq shift to state 473
## Reductions:

State 481:
## Known stack suffix:
## fexp Semi fexps_help
## LR(1) items:
fexps_help -> fexp Semi fexps_help . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt
--   reduce production fexps_help -> fexp Semi fexps_help

State 482:
## Known stack suffix:
## LtBar at_exp
## LR(1) items:
atomic_exp -> LtBar at_exp . With fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On With shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## LtBar at_exp With
## LR(1) items:
atomic_exp -> LtBar at_exp With . fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 480
-- On fexps_help shift to state 475
-- On fexps shift to state 484
-- On fexp shift to state 478
## Reductions:

State 484:
## Known stack suffix:
## LtBar at_exp With fexps
## LR(1) items:
atomic_exp -> LtBar at_exp With fexps . BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarGt shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## LtBar at_exp With fexps BarGt
## LR(1) items:
atomic_exp -> LtBar at_exp With fexps BarGt . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> LtBar at_exp With fexps BarGt

State 486:
## Known stack suffix:
## Match exp
## LR(1) items:
atomic_exp -> Match exp . With patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match exp . With Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On With shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## Match exp With
## LR(1) items:
atomic_exp -> Match exp With . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match exp With . Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Bar shift to state 488
-- On x shift to state 205
-- On patexps shift to state 491
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 488:
## Known stack suffix:
## Match exp With Bar
## LR(1) items:
atomic_exp -> Match exp With Bar . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 489
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 489:
## Known stack suffix:
## Match exp With Bar patexps
## LR(1) items:
atomic_exp -> Match exp With Bar patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## Match exp With Bar patexps End
## LR(1) items:
atomic_exp -> Match exp With Bar patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Match exp With Bar patexps End

State 491:
## Known stack suffix:
## Match exp With patexps
## LR(1) items:
atomic_exp -> Match exp With patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## Match exp With patexps End
## LR(1) items:
atomic_exp -> Match exp With patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp
--   reduce production atomic_exp -> Match exp With patexps End

State 493:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot Eq exp
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot Eq exp . [ And ]
funcls -> x atomic_pats1 opt_typ_annot Eq exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On And
--   reduce production funcl -> x atomic_pats1 opt_typ_annot Eq exp
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp

State 494:
## Known stack suffix:
## Let_ Rec targets_opt funcls
## LR(1) items:
val_def -> Let_ Rec targets_opt funcls . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_def -> Let_ Rec targets_opt funcls

State 495:
## Known stack suffix:
## funcl
## LR(1) items:
funcls -> funcl . And funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## funcl And
## LR(1) items:
funcls -> funcl And . funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 184
-- On funcls shift to state 497
-- On funcl shift to state 495
## Reductions:

State 497:
## Known stack suffix:
## funcl And funcls
## LR(1) items:
funcls -> funcl And funcls . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production funcls -> funcl And funcls

State 498:
## Known stack suffix:
## Let_ Lem_transform
## LR(1) items:
val_def -> Let_ Lem_transform . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 499
## Reductions:
-- On X Under True String OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False Char BraceBar BinNum Bin
--   reduce production targets_opt ->

State 499:
## Known stack suffix:
## Let_ Lem_transform targets_opt
## LR(1) items:
val_def -> Let_ Lem_transform targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 500
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 500:
## Known stack suffix:
## Let_ Lem_transform targets_opt letbind
## LR(1) items:
val_def -> Let_ Lem_transform targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_def -> Let_ Lem_transform targets_opt letbind

State 501:
## Known stack suffix:
## Let_ Inline
## LR(1) items:
val_def -> Let_ Inline . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 502
## Reductions:
-- On X Under True String OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False Char BraceBar BinNum Bin
--   reduce production targets_opt ->

State 502:
## Known stack suffix:
## Let_ Inline targets_opt
## LR(1) items:
val_def -> Let_ Inline targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 503
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 503:
## Known stack suffix:
## Let_ Inline targets_opt letbind
## LR(1) items:
val_def -> Let_ Inline targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_def -> Let_ Inline targets_opt letbind

State 504:
## Known stack suffix:
## Let_ targets_opt
## LR(1) items:
val_def -> Let_ targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 505
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 505:
## Known stack suffix:
## Let_ targets_opt letbind
## LR(1) items:
val_def -> Let_ targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production val_def -> Let_ targets_opt letbind

State 506:
## Known stack suffix:
## Lemma
## LR(1) items:
lemma_typ -> Lemma . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly
--   reduce production lemma_typ -> Lemma

State 507:
## Known stack suffix:
## Inst_default
## LR(1) items:
def -> Inst_default . instschm val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 508
-- On Forall shift to state 514
-- On instschm shift to state 532
## Reductions:

State 508:
## Known stack suffix:
## Lparen
## LR(1) items:
instschm -> Lparen . id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 509
## Reductions:

State 509:
## Known stack suffix:
## Lparen id
## LR(1) items:
instschm -> Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 512
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 510:
## Known stack suffix:
## typ
## LR(1) items:
insttyp -> typ . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production insttyp -> typ

State 511:
## Known stack suffix:
## nexp
## LR(1) items:
insttyp -> nexp . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production insttyp -> nexp

State 512:
## Known stack suffix:
## Lparen id insttyp
## LR(1) items:
instschm -> Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 513
## Reductions:

State 513:
## Known stack suffix:
## Lparen id insttyp Rparen
## LR(1) items:
instschm -> Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_
--   reduce production instschm -> Lparen id insttyp Rparen

State 514:
## Known stack suffix:
## Forall
## LR(1) items:
instschm -> Forall . tnvs Dot Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall . tnvs Dot cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 515
-- On tnvar shift to state 114
## Reductions:
-- On Dot
--   reduce production tnvs ->

State 515:
## Known stack suffix:
## Forall tnvs
## LR(1) items:
instschm -> Forall tnvs . Dot Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall tnvs . Dot cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Dot shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## Forall tnvs Dot
## LR(1) items:
instschm -> Forall tnvs Dot . Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall tnvs Dot . cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 517
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 521
-- On cs2 shift to state 523
-- On c2 shift to state 529
## Reductions:

State 517:
## Known stack suffix:
## Forall tnvs Dot Lparen
## LR(1) items:
instschm -> Forall tnvs Dot Lparen . id insttyp Rparen [ Let_ ]
x -> Lparen . Eq Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . IN Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . MEM Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . MinusMinusGt Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . AmpAmp Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . BarBar Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . ColonColon Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . Star Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . Plus Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . GtEq Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . PlusX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . StarX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . GtEqX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . EqualX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . StarstarX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . At Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . AtX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
## Transitions:
-- On X shift to state 2
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 3
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 518
## Reductions:

State 518:
## Known stack suffix:
## Forall tnvs Dot Lparen id
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 519
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 519:
## Known stack suffix:
## Forall tnvs Dot Lparen id insttyp
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## Forall tnvs Dot Lparen id insttyp Rparen
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_
--   reduce production instschm -> Forall tnvs Dot Lparen id insttyp Rparen

State 521:
## Known stack suffix:
## id
## LR(1) items:
c2 -> id . typ [ EqGt Comma ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 522
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 522:
## Known stack suffix:
## id typ
## LR(1) items:
c2 -> id typ . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt Comma
--   reduce production c2 -> id typ

State 523:
## Known stack suffix:
## Forall tnvs Dot cs2
## LR(1) items:
instschm -> Forall tnvs Dot cs2 . EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On EqGt shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt . Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Lparen shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen . id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 527
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 527:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id insttyp
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 528
## Reductions:

State 528:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_
--   reduce production instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen

State 529:
## Known stack suffix:
## c2
## LR(1) items:
cs2 -> c2 . [ EqGt ]
cs2 -> c2 . Comma cs2 [ EqGt ]
## Transitions:
-- On Comma shift to state 530
## Reductions:
-- On EqGt
--   reduce production cs2 -> c2

State 530:
## Known stack suffix:
## c2 Comma
## LR(1) items:
cs2 -> c2 Comma . cs2 [ EqGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 521
-- On cs2 shift to state 531
-- On c2 shift to state 529
## Reductions:

State 531:
## Known stack suffix:
## c2 Comma cs2
## LR(1) items:
cs2 -> c2 Comma cs2 . [ EqGt ]
## Transitions:
## Reductions:
-- On EqGt
--   reduce production cs2 -> c2 Comma cs2

State 532:
## Known stack suffix:
## Inst_default instschm
## LR(1) items:
def -> Inst_default instschm . val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 533
-- On val_def shift to state 535
## Reductions:

State 533:
## Known stack suffix:
## Inst_default instschm val_defs
## LR(1) items:
def -> Inst_default instschm val_defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## Inst_default instschm val_defs End
## LR(1) items:
def -> Inst_default instschm val_defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Inst_default instschm val_defs End

State 535:
## Known stack suffix:
## val_def
## LR(1) items:
val_defs -> val_def . [ End ]
val_defs -> val_def . val_defs [ End ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 536
-- On val_def shift to state 535
## Reductions:
-- On End
--   reduce production val_defs -> val_def

State 536:
## Known stack suffix:
## val_def val_defs
## LR(1) items:
val_defs -> val_def val_defs . [ End ]
## Transitions:
## Reductions:
-- On End
--   reduce production val_defs -> val_def val_defs

State 537:
## Known stack suffix:
## Inst
## LR(1) items:
def -> Inst . instschm val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 508
-- On Forall shift to state 514
-- On instschm shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## Inst instschm
## LR(1) items:
def -> Inst instschm . val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 539
-- On val_def shift to state 535
## Reductions:

State 539:
## Known stack suffix:
## Inst instschm val_defs
## LR(1) items:
def -> Inst instschm val_defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 540
## Reductions:

State 540:
## Known stack suffix:
## Inst instschm val_defs End
## LR(1) items:
def -> Inst instschm val_defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Inst instschm val_defs End

State 541:
## Known stack suffix:
## Indreln
## LR(1) items:
def -> Indreln . targets_opt and_indreln_names and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 542
## Reductions:
-- On Lsquare
--   reduce production targets_opt ->

State 542:
## Known stack suffix:
## Indreln targets_opt
## LR(1) items:
def -> Indreln targets_opt . and_indreln_names and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 543
-- On indreln_name shift to state 567
-- On and_indreln_names shift to state 570
## Reductions:

State 543:
## Known stack suffix:
## Lsquare
## LR(1) items:
indreln_name -> Lsquare . x Colon typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## Lsquare x
## LR(1) items:
indreln_name -> Lsquare x . Colon typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Colon shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## Lsquare x Colon
## LR(1) items:
indreln_name -> Lsquare x Colon . typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 546
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 546:
## Known stack suffix:
## Lsquare x Colon typschm
## LR(1) items:
indreln_name -> Lsquare x Colon typschm . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Witness shift to state 547
-- On Semi shift to state 551
-- On Rsquare shift to state 552
-- On witness_clause shift to state 553
## Reductions:

State 547:
## Known stack suffix:
## Witness
## LR(1) items:
witness_clause -> Witness . Type x Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On Type shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## Witness Type
## LR(1) items:
witness_clause -> Witness Type . x Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## Witness Type x
## LR(1) items:
witness_clause -> Witness Type x . Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On Semi shift to state 550
## Reductions:

State 550:
## Known stack suffix:
## Witness Type x Semi
## LR(1) items:
witness_clause -> Witness Type x Semi . [ X Rsquare Lparen Check ]
## Transitions:
## Reductions:
-- On X Rsquare Lparen Check
--   reduce production witness_clause -> Witness Type x Semi

State 551:
## Known stack suffix:
## Semi
## LR(1) items:
witness_clause -> Semi . [ X Rsquare Lparen Check ]
## Transitions:
## Reductions:
-- On X Rsquare Lparen Check
--   reduce production witness_clause -> Semi

State 552:
## Known stack suffix:
## Lsquare x Colon typschm Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X Lparen And
--   reduce production indreln_name -> Lsquare x Colon typschm Rsquare

State 553:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause . check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause . check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Rsquare shift to state 554
-- On Check shift to state 555
-- On check_clause shift to state 558
## Reductions:
-- On X Rsquare Lparen
--   reduce production check_clause ->
** Conflict on Rsquare

State 554:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X Lparen And
--   reduce production indreln_name -> Lsquare x Colon typschm witness_clause Rsquare

State 555:
## Known stack suffix:
## Check
## LR(1) items:
check_clause -> Check . x Semi [ X Rsquare Lparen ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## Check x
## LR(1) items:
check_clause -> Check x . Semi [ X Rsquare Lparen ]
## Transitions:
-- On Semi shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## Check x Semi
## LR(1) items:
check_clause -> Check x Semi . [ X Rsquare Lparen ]
## Transitions:
## Reductions:
-- On X Rsquare Lparen
--   reduce production check_clause -> Check x Semi

State 558:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause check_clause . functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Rsquare shift to state 559
-- On Lparen shift to state 3
-- On x shift to state 560
-- On functions_clause shift to state 565
## Reductions:

State 559:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X Lparen And
--   reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare

State 560:
## Known stack suffix:
## x
## LR(1) items:
functions_clause -> x . Colon typ [ Rsquare ]
functions_clause -> x . Colon typ Semi functions_clause [ Rsquare ]
## Transitions:
-- On Colon shift to state 561
## Reductions:

State 561:
## Known stack suffix:
## x Colon
## LR(1) items:
functions_clause -> x Colon . typ [ Rsquare ]
functions_clause -> x Colon . typ Semi functions_clause [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 562
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 562:
## Known stack suffix:
## x Colon typ
## LR(1) items:
functions_clause -> x Colon typ . [ Rsquare ]
functions_clause -> x Colon typ . Semi functions_clause [ Rsquare ]
## Transitions:
-- On Semi shift to state 563
## Reductions:
-- On Rsquare
--   reduce production functions_clause -> x Colon typ

State 563:
## Known stack suffix:
## x Colon typ Semi
## LR(1) items:
functions_clause -> x Colon typ Semi . functions_clause [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 560
-- On functions_clause shift to state 564
## Reductions:

State 564:
## Known stack suffix:
## x Colon typ Semi functions_clause
## LR(1) items:
functions_clause -> x Colon typ Semi functions_clause . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production functions_clause -> x Colon typ Semi functions_clause

State 565:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause functions_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause . Rsquare [ X Lparen And ]
## Transitions:
-- On Rsquare shift to state 566
## Reductions:

State 566:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X Lparen And
--   reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare

State 567:
## Known stack suffix:
## indreln_name
## LR(1) items:
and_indreln_names -> indreln_name . [ X Lparen ]
and_indreln_names -> indreln_name . And and_indreln_names [ X Lparen ]
## Transitions:
-- On And shift to state 568
## Reductions:
-- On X Lparen
--   reduce production and_indreln_names -> indreln_name

State 568:
## Known stack suffix:
## indreln_name And
## LR(1) items:
and_indreln_names -> indreln_name And . and_indreln_names [ X Lparen ]
## Transitions:
-- On Lsquare shift to state 543
-- On indreln_name shift to state 567
-- On and_indreln_names shift to state 569
## Reductions:

State 569:
## Known stack suffix:
## indreln_name And and_indreln_names
## LR(1) items:
and_indreln_names -> indreln_name And and_indreln_names . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production and_indreln_names -> indreln_name And and_indreln_names

State 570:
## Known stack suffix:
## Indreln targets_opt and_indreln_names
## LR(1) items:
def -> Indreln targets_opt and_indreln_names . and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 571
-- On indreln_clause shift to state 590
-- On and_indreln_clauses shift to state 593
## Reductions:

State 571:
## Known stack suffix:
## x
## LR(1) items:
indreln_clause -> x . Colon Forall name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Colon shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## x Colon
## LR(1) items:
indreln_clause -> x Colon . Forall name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Forall shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## x Colon Forall
## LR(1) items:
indreln_clause -> x Colon Forall . name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 582
## Reductions:
-- On Dot
--   reduce production name_ts ->

State 574:
## Known stack suffix:
## Lparen
## LR(1) items:
name_ts -> Lparen . x Colon typ Rparen name_ts [ Dot ]
x -> Lparen . Eq Rparen [ X Lparen Dot ]
x -> Lparen . IN Rparen [ X Lparen Dot ]
x -> Lparen . MEM Rparen [ X Lparen Dot ]
x -> Lparen . MinusMinusGt Rparen [ X Lparen Dot ]
x -> Lparen . AmpAmp Rparen [ X Lparen Dot ]
x -> Lparen . BarBar Rparen [ X Lparen Dot ]
x -> Lparen . ColonColon Rparen [ X Lparen Dot ]
x -> Lparen . Star Rparen [ X Lparen Dot ]
x -> Lparen . Plus Rparen [ X Lparen Dot ]
x -> Lparen . GtEq Rparen [ X Lparen Dot ]
x -> Lparen . PlusX Rparen [ X Lparen Dot ]
x -> Lparen . StarX Rparen [ X Lparen Dot ]
x -> Lparen . GtEqX Rparen [ X Lparen Dot ]
x -> Lparen . EqualX Rparen [ X Lparen Dot ]
x -> Lparen . StarstarX Rparen [ X Lparen Dot ]
x -> Lparen . At Rparen [ X Lparen Dot ]
x -> Lparen . AtX Rparen [ X Lparen Dot ]
## Transitions:
-- On X shift to state 2
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 3
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## Lparen x
## LR(1) items:
name_ts -> Lparen x . Colon typ Rparen name_ts [ Dot ]
## Transitions:
-- On Colon shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## Lparen x Colon
## LR(1) items:
name_ts -> Lparen x Colon . typ Rparen name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 577
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 577:
## Known stack suffix:
## Lparen x Colon typ
## LR(1) items:
name_ts -> Lparen x Colon typ . Rparen name_ts [ Dot ]
## Transitions:
-- On Rparen shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## Lparen x Colon typ Rparen
## LR(1) items:
name_ts -> Lparen x Colon typ Rparen . name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 581
## Reductions:
-- On Dot
--   reduce production name_ts ->

State 579:
## Known stack suffix:
## x
## LR(1) items:
name_ts -> x . name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 580
## Reductions:
-- On Dot
--   reduce production name_ts ->

State 580:
## Known stack suffix:
## x name_ts
## LR(1) items:
name_ts -> x name_ts . [ Dot ]
## Transitions:
## Reductions:
-- On Dot
--   reduce production name_ts -> x name_ts

State 581:
## Known stack suffix:
## Lparen x Colon typ Rparen name_ts
## LR(1) items:
name_ts -> Lparen x Colon typ Rparen name_ts . [ Dot ]
## Transitions:
## Reductions:
-- On Dot
--   reduce production name_ts -> Lparen x Colon typ Rparen name_ts

State 582:
## Known stack suffix:
## x Colon Forall name_ts
## LR(1) items:
indreln_clause -> x Colon Forall name_ts . Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Dot shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## x Colon Forall name_ts Dot
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot . exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 584
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 584:
## Known stack suffix:
## x Colon Forall name_ts Dot exp
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp . EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On EqEqGt shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt . x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt x
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 589
-- On atomic_exp shift to state 313
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production exps ->

State 587:
## Known stack suffix:
## field_exp
## LR(1) items:
exps -> field_exp . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 588
-- On atomic_exp shift to state 313
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production exps ->

State 588:
## Known stack suffix:
## field_exp exps
## LR(1) items:
exps -> field_exp exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production exps -> field_exp exps

State 589:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt x exps
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And
--   reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps

State 590:
## Known stack suffix:
## indreln_clause
## LR(1) items:
and_indreln_clauses -> indreln_clause . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
and_indreln_clauses -> indreln_clause . And and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 591
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production and_indreln_clauses -> indreln_clause

State 591:
## Known stack suffix:
## indreln_clause And
## LR(1) items:
and_indreln_clauses -> indreln_clause And . and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 571
-- On indreln_clause shift to state 590
-- On and_indreln_clauses shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## indreln_clause And and_indreln_clauses
## LR(1) items:
and_indreln_clauses -> indreln_clause And and_indreln_clauses . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses

State 593:
## Known stack suffix:
## Indreln targets_opt and_indreln_names and_indreln_clauses
## LR(1) items:
def -> Indreln targets_opt and_indreln_names and_indreln_clauses . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses

State 594:
## Known stack suffix:
## Include_
## LR(1) items:
open_import -> Include_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
open_import -> Include_ . Import_ [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
-- On Import_ shift to state 595
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly BacktickString
--   reduce production open_import -> Include_

State 595:
## Known stack suffix:
## Include_ Import_
## LR(1) items:
open_import -> Include_ Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly BacktickString
--   reduce production open_import -> Include_ Import_

State 596:
## Known stack suffix:
## Import_
## LR(1) items:
open_import -> Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly BacktickString
--   reduce production open_import -> Import_

State 597:
## Known stack suffix:
## Declare
## LR(1) items:
declaration -> Declare . targets_opt CompileMessage id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt Rename Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt Rename component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt AsciiRep component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . target TargetRep component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . target TargetRep component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . SetFlag x Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt TerminationArgument id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 173
-- On SetFlag shift to state 598
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 602
-- On target shift to state 650
## Reductions:
-- On TerminationArgument Rename PatternMatch CompileMessage AsciiRep
--   reduce production targets_opt ->

State 598:
## Known stack suffix:
## Declare SetFlag
## LR(1) items:
declaration -> Declare SetFlag . x Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## Declare SetFlag x
## LR(1) items:
declaration -> Declare SetFlag x . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## Declare SetFlag x Eq
## LR(1) items:
declaration -> Declare SetFlag x Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## Declare SetFlag x Eq x
## LR(1) items:
declaration -> Declare SetFlag x Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare SetFlag x Eq x

State 602:
## Known stack suffix:
## Declare targets_opt
## LR(1) items:
declaration -> Declare targets_opt . CompileMessage id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . Rename Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . Rename component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . AsciiRep component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . TerminationArgument id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On TerminationArgument shift to state 603
-- On Rename shift to state 609
-- On PatternMatch shift to state 622
-- On CompileMessage shift to state 640
-- On AsciiRep shift to state 644
## Reductions:

State 603:
## Known stack suffix:
## Declare targets_opt TerminationArgument
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument . id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## Declare targets_opt TerminationArgument id
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id . Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 605
## Reductions:

State 605:
## Known stack suffix:
## Declare targets_opt TerminationArgument id Eq
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id Eq . termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Manual shift to state 606
-- On Automatic shift to state 607
-- On termination_setting shift to state 608
## Reductions:

State 606:
## Known stack suffix:
## Manual
## LR(1) items:
termination_setting -> Manual . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production termination_setting -> Manual

State 607:
## Known stack suffix:
## Automatic
## LR(1) items:
termination_setting -> Automatic . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production termination_setting -> Automatic

State 608:
## Known stack suffix:
## Declare targets_opt TerminationArgument id Eq termination_setting
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id Eq termination_setting . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting

State 609:
## Known stack suffix:
## Declare targets_opt Rename
## LR(1) items:
declaration -> Declare targets_opt Rename . Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt Rename . component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Module_ shift to state 611
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 616
-- On component_term shift to state 617
-- On component shift to state 618
## Reductions:

State 610:
## Known stack suffix:
## Type
## LR(1) items:
component_type -> Type . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component_type -> Type

State 611:
## Known stack suffix:
## Declare targets_opt Rename Module_
## LR(1) items:
component -> Module_ . [ X Lparen ]
declaration -> Declare targets_opt Rename Module_ . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 612
## Reductions:
-- On X Lparen
--   reduce production component -> Module_

State 612:
## Known stack suffix:
## Declare targets_opt Rename Module_ Eq
## LR(1) items:
declaration -> Declare targets_opt Rename Module_ Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## Declare targets_opt Rename Module_ Eq x
## LR(1) items:
declaration -> Declare targets_opt Rename Module_ Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt Rename Module_ Eq x

State 614:
## Known stack suffix:
## Function_
## LR(1) items:
component_term -> Function_ . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component_term -> Function_

State 615:
## Known stack suffix:
## Field
## LR(1) items:
component_term -> Field . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component_term -> Field

State 616:
## Known stack suffix:
## component_type
## LR(1) items:
component -> component_type . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component -> component_type

State 617:
## Known stack suffix:
## component_term
## LR(1) items:
component -> component_term . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component -> component_term

State 618:
## Known stack suffix:
## Declare targets_opt Rename component
## LR(1) items:
declaration -> Declare targets_opt Rename component . id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## Declare targets_opt Rename component id
## LR(1) items:
declaration -> Declare targets_opt Rename component id . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 620
## Reductions:

State 620:
## Known stack suffix:
## Declare targets_opt Rename component id Eq
## LR(1) items:
declaration -> Declare targets_opt Rename component id Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 621
## Reductions:

State 621:
## Known stack suffix:
## Declare targets_opt Rename component id Eq x
## LR(1) items:
declaration -> Declare targets_opt Rename component id Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt Rename component id Eq x

State 622:
## Known stack suffix:
## Declare targets_opt PatternMatch
## LR(1) items:
declaration -> Declare targets_opt PatternMatch . exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Inexhaustive shift to state 623
-- On Exhaustive shift to state 624
-- On exhaustivity_setting shift to state 625
## Reductions:

State 623:
## Known stack suffix:
## Inexhaustive
## LR(1) items:
exhaustivity_setting -> Inexhaustive . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production exhaustivity_setting -> Inexhaustive

State 624:
## Known stack suffix:
## Exhaustive
## LR(1) items:
exhaustivity_setting -> Exhaustive . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production exhaustivity_setting -> Exhaustive

State 625:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting . id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 626
## Reductions:

State 626:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id . tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar_list shift to state 627
-- On tnvar shift to state 638
## Reductions:
-- On Eq
--   reduce production tnvar_list ->

State 627:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list . Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq . Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 629
## Reductions:

State 629:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare . semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On semi_ids_help shift to state 630
-- On semi_ids shift to state 631
-- On id_help shift to state 59
-- On id shift to state 635
## Reductions:
-- On Rsquare
--   reduce production semi_ids ->

State 630:
## Known stack suffix:
## semi_ids_help
## LR(1) items:
semi_ids -> semi_ids_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production semi_ids -> semi_ids_help

State 631:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids . Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rsquare shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare . elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 633
-- On elim_opt shift to state 634
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production elim_opt ->

State 633:
## Known stack suffix:
## id
## LR(1) items:
elim_opt -> id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production elim_opt -> id

State 634:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt

State 635:
## Known stack suffix:
## id
## LR(1) items:
semi_ids_help -> id . [ Rsquare ]
semi_ids_help -> id . Semi [ Rsquare ]
semi_ids_help -> id . Semi semi_ids_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 636
## Reductions:
-- On Rsquare
--   reduce production semi_ids_help -> id

State 636:
## Known stack suffix:
## id Semi
## LR(1) items:
semi_ids_help -> id Semi . [ Rsquare ]
semi_ids_help -> id Semi . semi_ids_help [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On semi_ids_help shift to state 637
-- On id_help shift to state 59
-- On id shift to state 635
## Reductions:
-- On Rsquare
--   reduce production semi_ids_help -> id Semi

State 637:
## Known stack suffix:
## id Semi semi_ids_help
## LR(1) items:
semi_ids_help -> id Semi semi_ids_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production semi_ids_help -> id Semi semi_ids_help

State 638:
## Known stack suffix:
## tnvar
## LR(1) items:
tnvar_list -> tnvar . tnvar_list [ Eq ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar_list shift to state 639
-- On tnvar shift to state 638
## Reductions:
-- On Eq
--   reduce production tnvar_list ->

State 639:
## Known stack suffix:
## tnvar tnvar_list
## LR(1) items:
tnvar_list -> tnvar tnvar_list . [ Eq ]
## Transitions:
## Reductions:
-- On Eq
--   reduce production tnvar_list -> tnvar tnvar_list

State 640:
## Known stack suffix:
## Declare targets_opt CompileMessage
## LR(1) items:
declaration -> Declare targets_opt CompileMessage . id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## Declare targets_opt CompileMessage id
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id . Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 642
## Reductions:

State 642:
## Known stack suffix:
## Declare targets_opt CompileMessage id Eq
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id Eq . String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On String shift to state 643
## Reductions:

State 643:
## Known stack suffix:
## Declare targets_opt CompileMessage id Eq String
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id Eq String . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt CompileMessage id Eq String

State 644:
## Known stack suffix:
## Declare targets_opt AsciiRep
## LR(1) items:
declaration -> Declare targets_opt AsciiRep . component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Module_ shift to state 645
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 616
-- On component_term shift to state 617
-- On component shift to state 646
## Reductions:

State 645:
## Known stack suffix:
## Module_
## LR(1) items:
component -> Module_ . [ X Lparen ]
## Transitions:
## Reductions:
-- On X Lparen
--   reduce production component -> Module_

State 646:
## Known stack suffix:
## Declare targets_opt AsciiRep component
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component . id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 647
## Reductions:

State 647:
## Known stack suffix:
## Declare targets_opt AsciiRep component id
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id . Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 648
## Reductions:

State 648:
## Known stack suffix:
## Declare targets_opt AsciiRep component id Eq
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id Eq . BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## Declare targets_opt AsciiRep component id Eq BacktickString
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id Eq BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString

State 650:
## Known stack suffix:
## Declare target
## LR(1) items:
declaration -> Declare target . TargetRep component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare target . TargetRep component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On TargetRep shift to state 651
## Reductions:

State 651:
## Known stack suffix:
## Declare target TargetRep
## LR(1) items:
declaration -> Declare target TargetRep . component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare target TargetRep . component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 652
-- On component_term shift to state 658
## Reductions:

State 652:
## Known stack suffix:
## Declare target TargetRep component_type
## LR(1) items:
declaration -> Declare target TargetRep component_type . id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## Declare target TargetRep component_type id
## LR(1) items:
declaration -> Declare target TargetRep component_type id . tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 654
-- On tnvar shift to state 114
## Reductions:
-- On Eq
--   reduce production tnvs ->

State 654:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs . Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs Eq
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs Eq . target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 656
-- On target_rep_rhs_type shift to state 657
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 656:
## Known stack suffix:
## typ
## LR(1) items:
target_rep_rhs_type -> typ . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production target_rep_rhs_type -> typ

State 657:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type

State 658:
## Known stack suffix:
## Declare target TargetRep component_term
## LR(1) items:
declaration -> Declare target TargetRep component_term . id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## Declare target TargetRep component_term id
## LR(1) items:
declaration -> Declare target TargetRep component_term id . x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 660
-- On x_ls shift to state 662
## Reductions:
-- On Eq
--   reduce production x_ls ->

State 660:
## Known stack suffix:
## X
## LR(1) items:
x_ls -> X . x_ls [ Eq ]
## Transitions:
-- On X shift to state 660
-- On x_ls shift to state 661
## Reductions:
-- On Eq
--   reduce production x_ls ->

State 661:
## Known stack suffix:
## X x_ls
## LR(1) items:
x_ls -> X x_ls . [ Eq ]
## Transitions:
## Reductions:
-- On Eq
--   reduce production x_ls -> X x_ls

State 662:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls . Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 663
## Reductions:

State 663:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls Eq
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls Eq . target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On Special shift to state 664
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On Infix shift to state 667
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On target_rep_rhs_term shift to state 676
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 677
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production target_rep_rhs_term ->
** Conflict on Let_

State 664:
## Known stack suffix:
## Special
## LR(1) items:
target_rep_rhs_term -> Special . String exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On String shift to state 665
## Reductions:

State 665:
## Known stack suffix:
## Special String
## LR(1) items:
target_rep_rhs_term -> Special String . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 666
-- On atomic_exp shift to state 313
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production exps ->

State 666:
## Known stack suffix:
## Special String exps
## LR(1) items:
target_rep_rhs_term -> Special String exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production target_rep_rhs_term -> Special String exps

State 667:
## Known stack suffix:
## Infix
## LR(1) items:
target_rep_rhs_term -> Infix . fixity_decl BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On RightAssoc shift to state 668
-- On NonAssoc shift to state 670
-- On LeftAssoc shift to state 672
-- On fixity_decl shift to state 674
## Reductions:
-- On BacktickString
--   reduce production fixity_decl ->

State 668:
## Known stack suffix:
## RightAssoc
## LR(1) items:
fixity_decl -> RightAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## RightAssoc Num
## LR(1) items:
fixity_decl -> RightAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString
--   reduce production fixity_decl -> RightAssoc Num

State 670:
## Known stack suffix:
## NonAssoc
## LR(1) items:
fixity_decl -> NonAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 671
## Reductions:

State 671:
## Known stack suffix:
## NonAssoc Num
## LR(1) items:
fixity_decl -> NonAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString
--   reduce production fixity_decl -> NonAssoc Num

State 672:
## Known stack suffix:
## LeftAssoc
## LR(1) items:
fixity_decl -> LeftAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 673
## Reductions:

State 673:
## Known stack suffix:
## LeftAssoc Num
## LR(1) items:
fixity_decl -> LeftAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString
--   reduce production fixity_decl -> LeftAssoc Num

State 674:
## Known stack suffix:
## Infix fixity_decl
## LR(1) items:
target_rep_rhs_term -> Infix fixity_decl . BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 675
## Reductions:

State 675:
## Known stack suffix:
## Infix fixity_decl BacktickString
## LR(1) items:
target_rep_rhs_term -> Infix fixity_decl BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString

State 676:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term

State 677:
## Known stack suffix:
## exp
## LR(1) items:
target_rep_rhs_term -> exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production target_rep_rhs_term -> exp

State 678:
## Known stack suffix:
## Class_
## LR(1) items:
def -> Class_ . Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Class_ . Inline Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 679
-- On Inline shift to state 697
## Reductions:

State 679:
## Known stack suffix:
## Class_ Lparen
## LR(1) items:
def -> Class_ Lparen . x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## Class_ Lparen x
## LR(1) items:
def -> Class_ Lparen x . tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 681
## Reductions:

State 681:
## Known stack suffix:
## Class_ Lparen x tnvar
## LR(1) items:
def -> Class_ Lparen x tnvar . Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rparen shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen . class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 693
-- On class_val_spec shift to state 695
## Reductions:

State 683:
## Known stack suffix:
## Val
## LR(1) items:
class_val_spec -> Val . targets_opt x Colon typ [ Val End ]
class_val_spec -> Val . targets_opt x Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 684
## Reductions:
-- On X Lparen
--   reduce production targets_opt ->

State 684:
## Known stack suffix:
## Val targets_opt
## LR(1) items:
class_val_spec -> Val targets_opt . x Colon typ [ Val End ]
class_val_spec -> Val targets_opt . x Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 685
## Reductions:

State 685:
## Known stack suffix:
## Val targets_opt x
## LR(1) items:
class_val_spec -> Val targets_opt x . Colon typ [ Val End ]
class_val_spec -> Val targets_opt x . Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On Lsquare shift to state 686
-- On Colon shift to state 691
## Reductions:

State 686:
## Known stack suffix:
## Val targets_opt x Lsquare
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare . BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On BacktickString shift to state 687
## Reductions:

State 687:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString . Rsquare Colon typ [ Val End ]
## Transitions:
-- On Rsquare shift to state 688
## Reductions:

State 688:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare . Colon typ [ Val End ]
## Transitions:
-- On Colon shift to state 689
## Reductions:

State 689:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare Colon
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon . typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 690
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 690:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare Colon typ
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon typ . [ Val End ]
## Transitions:
## Reductions:
-- On Val End
--   reduce production class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon typ

State 691:
## Known stack suffix:
## Val targets_opt x Colon
## LR(1) items:
class_val_spec -> Val targets_opt x Colon . typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 692
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 692:
## Known stack suffix:
## Val targets_opt x Colon typ
## LR(1) items:
class_val_spec -> Val targets_opt x Colon typ . [ Val End ]
## Transitions:
## Reductions:
-- On Val End
--   reduce production class_val_spec -> Val targets_opt x Colon typ

State 693:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen class_val_specs
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen class_val_specs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen class_val_specs End
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen class_val_specs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End

State 695:
## Known stack suffix:
## class_val_spec
## LR(1) items:
class_val_specs -> class_val_spec . [ End ]
class_val_specs -> class_val_spec . class_val_specs [ End ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 696
-- On class_val_spec shift to state 695
## Reductions:
-- On End
--   reduce production class_val_specs -> class_val_spec

State 696:
## Known stack suffix:
## class_val_spec class_val_specs
## LR(1) items:
class_val_specs -> class_val_spec class_val_specs . [ End ]
## Transitions:
## Reductions:
-- On End
--   reduce production class_val_specs -> class_val_spec class_val_specs

State 697:
## Known stack suffix:
## Class_ Inline
## LR(1) items:
def -> Class_ Inline . Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## Class_ Inline Lparen
## LR(1) items:
def -> Class_ Inline Lparen . x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## Class_ Inline Lparen x
## LR(1) items:
def -> Class_ Inline Lparen x . tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## Class_ Inline Lparen x tnvar
## LR(1) items:
def -> Class_ Inline Lparen x tnvar . Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rparen shift to state 701
## Reductions:

State 701:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen . class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 702
-- On class_val_spec shift to state 695
## Reductions:

State 702:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen class_val_specs
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen class_val_specs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 703
## Reductions:

State 703:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen class_val_specs End
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End

State 704:
## Known stack suffix:
## Assert
## LR(1) items:
lemma_typ -> Assert . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X NonExec NegLcurly Lparen Lcurly
--   reduce production lemma_typ -> Assert

State 705:
## Known stack suffix:
## val_spec
## LR(1) items:
def -> val_spec . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> val_spec

State 706:
## Known stack suffix:
## val_def
## LR(1) items:
def -> val_def . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> val_def

State 707:
## Known stack suffix:
## open_import
## LR(1) items:
def -> open_import . targets_opt backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> open_import . ids [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lparen shift to state 3
-- On Lcurly shift to state 179
-- On x shift to state 50
-- On targets_opt shift to state 708
-- On ids shift to state 712
-- On id_help shift to state 59
-- On id shift to state 713
## Reductions:
-- On BacktickString
--   reduce production targets_opt ->

State 708:
## Known stack suffix:
## open_import targets_opt
## LR(1) items:
def -> open_import targets_opt . backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 709
-- On backtickstrings shift to state 711
## Reductions:

State 709:
## Known stack suffix:
## BacktickString
## LR(1) items:
backtickstrings -> BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
backtickstrings -> BacktickString . backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 709
-- On backtickstrings shift to state 710
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production backtickstrings -> BacktickString

State 710:
## Known stack suffix:
## BacktickString backtickstrings
## LR(1) items:
backtickstrings -> BacktickString backtickstrings . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production backtickstrings -> BacktickString backtickstrings

State 711:
## Known stack suffix:
## open_import targets_opt backtickstrings
## LR(1) items:
def -> open_import targets_opt backtickstrings . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> open_import targets_opt backtickstrings

State 712:
## Known stack suffix:
## open_import ids
## LR(1) items:
def -> open_import ids . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> open_import ids

State 713:
## Known stack suffix:
## id
## LR(1) items:
ids -> id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
ids -> id . ids [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On ids shift to state 714
-- On id_help shift to state 59
-- On id shift to state 713
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production ids -> id

State 714:
## Known stack suffix:
## id ids
## LR(1) items:
ids -> id ids . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production ids -> id ids

State 715:
## Known stack suffix:
## lemma_typ
## LR(1) items:
lemma -> lemma_typ . targets_opt x Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 716
## Reductions:
-- On X Lparen
--   reduce production targets_opt ->

State 716:
## Known stack suffix:
## lemma_typ targets_opt
## LR(1) items:
lemma -> lemma_typ targets_opt . x Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 717
## Reductions:

State 717:
## Known stack suffix:
## lemma_typ targets_opt x
## LR(1) items:
lemma -> lemma_typ targets_opt x . Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 718
## Reductions:

State 718:
## Known stack suffix:
## lemma_typ targets_opt x Colon
## LR(1) items:
lemma -> lemma_typ targets_opt x Colon . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 719
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 719:
## Known stack suffix:
## lemma_typ targets_opt x Colon exp
## LR(1) items:
lemma -> lemma_typ targets_opt x Colon exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production lemma -> lemma_typ targets_opt x Colon exp

State 720:
## Known stack suffix:
## lemma
## LR(1) items:
def -> lemma . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> lemma

State 721:
## Known stack suffix:
## defs_help
## LR(1) items:
defs -> defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof End
--   reduce production defs -> defs_help

State 722:
## Known stack suffix:
## Module_ x Eq Struct defs
## LR(1) items:
def -> Module_ x Eq Struct defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 723
## Reductions:

State 723:
## Known stack suffix:
## Module_ x Eq Struct defs End
## LR(1) items:
def -> Module_ x Eq Struct defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Module_ x Eq Struct defs End

State 724:
## Known stack suffix:
## def
## LR(1) items:
defs_help -> def . [ Eof End ]
defs_help -> def . SemiSemi [ Eof End ]
defs_help -> def . defs_help [ Eof End ]
defs_help -> def . SemiSemi defs_help [ Eof End ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On SemiSemi shift to state 725
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 728
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:
-- On Eof End
--   reduce production defs_help -> def

State 725:
## Known stack suffix:
## def SemiSemi
## LR(1) items:
defs_help -> def SemiSemi . [ Eof End ]
defs_help -> def SemiSemi . defs_help [ Eof End ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 726
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:
-- On Eof End
--   reduce production defs_help -> def SemiSemi

State 726:
## Known stack suffix:
## def SemiSemi defs_help
## LR(1) items:
defs_help -> def SemiSemi defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof End
--   reduce production defs_help -> def SemiSemi defs_help

State 727:
## Known stack suffix:
## declaration
## LR(1) items:
def -> declaration . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> declaration

State 728:
## Known stack suffix:
## def defs_help
## LR(1) items:
defs_help -> def defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof End
--   reduce production defs_help -> def defs_help

State 729:
## Known stack suffix:
## Module_ x Eq id
## LR(1) items:
def -> Module_ x Eq id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert
--   reduce production def -> Module_ x Eq id

State 730:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 731:
## Known stack suffix:
## defs
## LR(1) items:
file -> defs . Eof [ # ]
## Transitions:
-- On Eof shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## defs Eof
## LR(1) items:
file -> defs Eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> defs Eof

