State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On file shift to state 730
-- On defs_help shift to state 721
-- On defs shift to state 731
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:

State 1:
## Known stack suffix:
## Val
## LR(1) items:
val_spec -> Val . x Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_spec -> Val . x Lsquare BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 38
## Reductions:

State 2:
## Known stack suffix:
## X
## LR(1) items:
x -> X . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> X
-- On Witness reduce production x -> X
-- On With reduce production x -> X
-- On Val reduce production x -> X
-- On Under reduce production x -> X
-- On Tyvar reduce production x -> X
-- On Type reduce production x -> X
-- On True reduce production x -> X
-- On Theorem reduce production x -> X
-- On Then reduce production x -> X
-- On String reduce production x -> X
-- On StarstarX reduce production x -> X
-- On StarX reduce production x -> X
-- On Star reduce production x -> X
-- On SemiSemi reduce production x -> X
-- On Semi reduce production x -> X
-- On Rsquare reduce production x -> X
-- On Rparen reduce production x -> X
-- On Rcurly reduce production x -> X
-- On PlusX reduce production x -> X
-- On Plus reduce production x -> X
-- On Open_ reduce production x -> X
-- On Of reduce production x -> X
-- On OctNum reduce production x -> X
-- On Nvar reduce production x -> X
-- On Num reduce production x -> X
-- On Module_ reduce production x -> X
-- On MinusMinusGt reduce production x -> X
-- On Match reduce production x -> X
-- On MEM reduce production x -> X
-- On LtBar reduce production x -> X
-- On Lsquare reduce production x -> X
-- On Lparen reduce production x -> X
-- On Let_ reduce production x -> X
-- On Lemma reduce production x -> X
-- On LeftArrow reduce production x -> X
-- On Lcurly reduce production x -> X
-- On Inst_default reduce production x -> X
-- On Inst reduce production x -> X
-- On Indreln reduce production x -> X
-- On Include_ reduce production x -> X
-- On In reduce production x -> X
-- On Import_ reduce production x -> X
-- On IN reduce production x -> X
-- On HexNum reduce production x -> X
-- On Hex reduce production x -> X
-- On HashZero reduce production x -> X
-- On HashOne reduce production x -> X
-- On GtEqX reduce production x -> X
-- On GtEq reduce production x -> X
-- On Function_ reduce production x -> X
-- On False reduce production x -> X
-- On EqualX reduce production x -> X
-- On EqGt reduce production x -> X
-- On EqEqGt reduce production x -> X
-- On Eq reduce production x -> X
-- On Eof reduce production x -> X
-- On End reduce production x -> X
-- On Else reduce production x -> X
-- On DotBrace reduce production x -> X
-- On Dot reduce production x -> X
-- On Do reduce production x -> X
-- On Declare reduce production x -> X
-- On Comma reduce production x -> X
-- On ColonColon reduce production x -> X
-- On Colon reduce production x -> X
-- On Class_ reduce production x -> X
-- On Char reduce production x -> X
-- On BraceBar reduce production x -> X
-- On BinNum reduce production x -> X
-- On Bin reduce production x -> X
-- On Begin_ reduce production x -> X
-- On BarGt reduce production x -> X
-- On BarBrace reduce production x -> X
-- On BarBar reduce production x -> X
-- On Bar reduce production x -> X
-- On BacktickString reduce production x -> X
-- On AtX reduce production x -> X
-- On At reduce production x -> X
-- On Assert reduce production x -> X
-- On As reduce production x -> X
-- On Arrow reduce production x -> X
-- On And reduce production x -> X
-- On AmpAmp reduce production x -> X

State 3:
## Known stack suffix:
## Lparen
## LR(1) items:
x -> Lparen . Eq Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . IN Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . MEM Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . MinusMinusGt Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . AmpAmp Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . BarBar Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . ColonColon Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . Star Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . Plus Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . GtEq Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . PlusX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . StarX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . GtEqX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . EqualX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . StarstarX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . At Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
x -> Lparen . AtX Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
## Reductions:

State 4:
## Known stack suffix:
## Lparen StarstarX
## LR(1) items:
x -> Lparen StarstarX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## Lparen StarstarX Rparen
## LR(1) items:
x -> Lparen StarstarX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen StarstarX Rparen
-- On Witness reduce production x -> Lparen StarstarX Rparen
-- On With reduce production x -> Lparen StarstarX Rparen
-- On Val reduce production x -> Lparen StarstarX Rparen
-- On Under reduce production x -> Lparen StarstarX Rparen
-- On Tyvar reduce production x -> Lparen StarstarX Rparen
-- On Type reduce production x -> Lparen StarstarX Rparen
-- On True reduce production x -> Lparen StarstarX Rparen
-- On Theorem reduce production x -> Lparen StarstarX Rparen
-- On Then reduce production x -> Lparen StarstarX Rparen
-- On String reduce production x -> Lparen StarstarX Rparen
-- On StarstarX reduce production x -> Lparen StarstarX Rparen
-- On StarX reduce production x -> Lparen StarstarX Rparen
-- On Star reduce production x -> Lparen StarstarX Rparen
-- On SemiSemi reduce production x -> Lparen StarstarX Rparen
-- On Semi reduce production x -> Lparen StarstarX Rparen
-- On Rsquare reduce production x -> Lparen StarstarX Rparen
-- On Rparen reduce production x -> Lparen StarstarX Rparen
-- On Rcurly reduce production x -> Lparen StarstarX Rparen
-- On PlusX reduce production x -> Lparen StarstarX Rparen
-- On Plus reduce production x -> Lparen StarstarX Rparen
-- On Open_ reduce production x -> Lparen StarstarX Rparen
-- On Of reduce production x -> Lparen StarstarX Rparen
-- On OctNum reduce production x -> Lparen StarstarX Rparen
-- On Nvar reduce production x -> Lparen StarstarX Rparen
-- On Num reduce production x -> Lparen StarstarX Rparen
-- On Module_ reduce production x -> Lparen StarstarX Rparen
-- On MinusMinusGt reduce production x -> Lparen StarstarX Rparen
-- On Match reduce production x -> Lparen StarstarX Rparen
-- On MEM reduce production x -> Lparen StarstarX Rparen
-- On LtBar reduce production x -> Lparen StarstarX Rparen
-- On Lsquare reduce production x -> Lparen StarstarX Rparen
-- On Lparen reduce production x -> Lparen StarstarX Rparen
-- On Let_ reduce production x -> Lparen StarstarX Rparen
-- On Lemma reduce production x -> Lparen StarstarX Rparen
-- On LeftArrow reduce production x -> Lparen StarstarX Rparen
-- On Lcurly reduce production x -> Lparen StarstarX Rparen
-- On Inst_default reduce production x -> Lparen StarstarX Rparen
-- On Inst reduce production x -> Lparen StarstarX Rparen
-- On Indreln reduce production x -> Lparen StarstarX Rparen
-- On Include_ reduce production x -> Lparen StarstarX Rparen
-- On In reduce production x -> Lparen StarstarX Rparen
-- On Import_ reduce production x -> Lparen StarstarX Rparen
-- On IN reduce production x -> Lparen StarstarX Rparen
-- On HexNum reduce production x -> Lparen StarstarX Rparen
-- On Hex reduce production x -> Lparen StarstarX Rparen
-- On HashZero reduce production x -> Lparen StarstarX Rparen
-- On HashOne reduce production x -> Lparen StarstarX Rparen
-- On GtEqX reduce production x -> Lparen StarstarX Rparen
-- On GtEq reduce production x -> Lparen StarstarX Rparen
-- On Function_ reduce production x -> Lparen StarstarX Rparen
-- On False reduce production x -> Lparen StarstarX Rparen
-- On EqualX reduce production x -> Lparen StarstarX Rparen
-- On EqGt reduce production x -> Lparen StarstarX Rparen
-- On EqEqGt reduce production x -> Lparen StarstarX Rparen
-- On Eq reduce production x -> Lparen StarstarX Rparen
-- On Eof reduce production x -> Lparen StarstarX Rparen
-- On End reduce production x -> Lparen StarstarX Rparen
-- On Else reduce production x -> Lparen StarstarX Rparen
-- On DotBrace reduce production x -> Lparen StarstarX Rparen
-- On Dot reduce production x -> Lparen StarstarX Rparen
-- On Do reduce production x -> Lparen StarstarX Rparen
-- On Declare reduce production x -> Lparen StarstarX Rparen
-- On Comma reduce production x -> Lparen StarstarX Rparen
-- On ColonColon reduce production x -> Lparen StarstarX Rparen
-- On Colon reduce production x -> Lparen StarstarX Rparen
-- On Class_ reduce production x -> Lparen StarstarX Rparen
-- On Char reduce production x -> Lparen StarstarX Rparen
-- On BraceBar reduce production x -> Lparen StarstarX Rparen
-- On BinNum reduce production x -> Lparen StarstarX Rparen
-- On Bin reduce production x -> Lparen StarstarX Rparen
-- On Begin_ reduce production x -> Lparen StarstarX Rparen
-- On BarGt reduce production x -> Lparen StarstarX Rparen
-- On BarBrace reduce production x -> Lparen StarstarX Rparen
-- On BarBar reduce production x -> Lparen StarstarX Rparen
-- On Bar reduce production x -> Lparen StarstarX Rparen
-- On BacktickString reduce production x -> Lparen StarstarX Rparen
-- On AtX reduce production x -> Lparen StarstarX Rparen
-- On At reduce production x -> Lparen StarstarX Rparen
-- On Assert reduce production x -> Lparen StarstarX Rparen
-- On As reduce production x -> Lparen StarstarX Rparen
-- On Arrow reduce production x -> Lparen StarstarX Rparen
-- On And reduce production x -> Lparen StarstarX Rparen
-- On AmpAmp reduce production x -> Lparen StarstarX Rparen

State 6:
## Known stack suffix:
## Lparen StarX
## LR(1) items:
x -> Lparen StarX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## Lparen StarX Rparen
## LR(1) items:
x -> Lparen StarX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen StarX Rparen
-- On Witness reduce production x -> Lparen StarX Rparen
-- On With reduce production x -> Lparen StarX Rparen
-- On Val reduce production x -> Lparen StarX Rparen
-- On Under reduce production x -> Lparen StarX Rparen
-- On Tyvar reduce production x -> Lparen StarX Rparen
-- On Type reduce production x -> Lparen StarX Rparen
-- On True reduce production x -> Lparen StarX Rparen
-- On Theorem reduce production x -> Lparen StarX Rparen
-- On Then reduce production x -> Lparen StarX Rparen
-- On String reduce production x -> Lparen StarX Rparen
-- On StarstarX reduce production x -> Lparen StarX Rparen
-- On StarX reduce production x -> Lparen StarX Rparen
-- On Star reduce production x -> Lparen StarX Rparen
-- On SemiSemi reduce production x -> Lparen StarX Rparen
-- On Semi reduce production x -> Lparen StarX Rparen
-- On Rsquare reduce production x -> Lparen StarX Rparen
-- On Rparen reduce production x -> Lparen StarX Rparen
-- On Rcurly reduce production x -> Lparen StarX Rparen
-- On PlusX reduce production x -> Lparen StarX Rparen
-- On Plus reduce production x -> Lparen StarX Rparen
-- On Open_ reduce production x -> Lparen StarX Rparen
-- On Of reduce production x -> Lparen StarX Rparen
-- On OctNum reduce production x -> Lparen StarX Rparen
-- On Nvar reduce production x -> Lparen StarX Rparen
-- On Num reduce production x -> Lparen StarX Rparen
-- On Module_ reduce production x -> Lparen StarX Rparen
-- On MinusMinusGt reduce production x -> Lparen StarX Rparen
-- On Match reduce production x -> Lparen StarX Rparen
-- On MEM reduce production x -> Lparen StarX Rparen
-- On LtBar reduce production x -> Lparen StarX Rparen
-- On Lsquare reduce production x -> Lparen StarX Rparen
-- On Lparen reduce production x -> Lparen StarX Rparen
-- On Let_ reduce production x -> Lparen StarX Rparen
-- On Lemma reduce production x -> Lparen StarX Rparen
-- On LeftArrow reduce production x -> Lparen StarX Rparen
-- On Lcurly reduce production x -> Lparen StarX Rparen
-- On Inst_default reduce production x -> Lparen StarX Rparen
-- On Inst reduce production x -> Lparen StarX Rparen
-- On Indreln reduce production x -> Lparen StarX Rparen
-- On Include_ reduce production x -> Lparen StarX Rparen
-- On In reduce production x -> Lparen StarX Rparen
-- On Import_ reduce production x -> Lparen StarX Rparen
-- On IN reduce production x -> Lparen StarX Rparen
-- On HexNum reduce production x -> Lparen StarX Rparen
-- On Hex reduce production x -> Lparen StarX Rparen
-- On HashZero reduce production x -> Lparen StarX Rparen
-- On HashOne reduce production x -> Lparen StarX Rparen
-- On GtEqX reduce production x -> Lparen StarX Rparen
-- On GtEq reduce production x -> Lparen StarX Rparen
-- On Function_ reduce production x -> Lparen StarX Rparen
-- On False reduce production x -> Lparen StarX Rparen
-- On EqualX reduce production x -> Lparen StarX Rparen
-- On EqGt reduce production x -> Lparen StarX Rparen
-- On EqEqGt reduce production x -> Lparen StarX Rparen
-- On Eq reduce production x -> Lparen StarX Rparen
-- On Eof reduce production x -> Lparen StarX Rparen
-- On End reduce production x -> Lparen StarX Rparen
-- On Else reduce production x -> Lparen StarX Rparen
-- On DotBrace reduce production x -> Lparen StarX Rparen
-- On Dot reduce production x -> Lparen StarX Rparen
-- On Do reduce production x -> Lparen StarX Rparen
-- On Declare reduce production x -> Lparen StarX Rparen
-- On Comma reduce production x -> Lparen StarX Rparen
-- On ColonColon reduce production x -> Lparen StarX Rparen
-- On Colon reduce production x -> Lparen StarX Rparen
-- On Class_ reduce production x -> Lparen StarX Rparen
-- On Char reduce production x -> Lparen StarX Rparen
-- On BraceBar reduce production x -> Lparen StarX Rparen
-- On BinNum reduce production x -> Lparen StarX Rparen
-- On Bin reduce production x -> Lparen StarX Rparen
-- On Begin_ reduce production x -> Lparen StarX Rparen
-- On BarGt reduce production x -> Lparen StarX Rparen
-- On BarBrace reduce production x -> Lparen StarX Rparen
-- On BarBar reduce production x -> Lparen StarX Rparen
-- On Bar reduce production x -> Lparen StarX Rparen
-- On BacktickString reduce production x -> Lparen StarX Rparen
-- On AtX reduce production x -> Lparen StarX Rparen
-- On At reduce production x -> Lparen StarX Rparen
-- On Assert reduce production x -> Lparen StarX Rparen
-- On As reduce production x -> Lparen StarX Rparen
-- On Arrow reduce production x -> Lparen StarX Rparen
-- On And reduce production x -> Lparen StarX Rparen
-- On AmpAmp reduce production x -> Lparen StarX Rparen

State 8:
## Known stack suffix:
## Lparen Star
## LR(1) items:
x -> Lparen Star . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## Lparen Star Rparen
## LR(1) items:
x -> Lparen Star Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen Star Rparen
-- On Witness reduce production x -> Lparen Star Rparen
-- On With reduce production x -> Lparen Star Rparen
-- On Val reduce production x -> Lparen Star Rparen
-- On Under reduce production x -> Lparen Star Rparen
-- On Tyvar reduce production x -> Lparen Star Rparen
-- On Type reduce production x -> Lparen Star Rparen
-- On True reduce production x -> Lparen Star Rparen
-- On Theorem reduce production x -> Lparen Star Rparen
-- On Then reduce production x -> Lparen Star Rparen
-- On String reduce production x -> Lparen Star Rparen
-- On StarstarX reduce production x -> Lparen Star Rparen
-- On StarX reduce production x -> Lparen Star Rparen
-- On Star reduce production x -> Lparen Star Rparen
-- On SemiSemi reduce production x -> Lparen Star Rparen
-- On Semi reduce production x -> Lparen Star Rparen
-- On Rsquare reduce production x -> Lparen Star Rparen
-- On Rparen reduce production x -> Lparen Star Rparen
-- On Rcurly reduce production x -> Lparen Star Rparen
-- On PlusX reduce production x -> Lparen Star Rparen
-- On Plus reduce production x -> Lparen Star Rparen
-- On Open_ reduce production x -> Lparen Star Rparen
-- On Of reduce production x -> Lparen Star Rparen
-- On OctNum reduce production x -> Lparen Star Rparen
-- On Nvar reduce production x -> Lparen Star Rparen
-- On Num reduce production x -> Lparen Star Rparen
-- On Module_ reduce production x -> Lparen Star Rparen
-- On MinusMinusGt reduce production x -> Lparen Star Rparen
-- On Match reduce production x -> Lparen Star Rparen
-- On MEM reduce production x -> Lparen Star Rparen
-- On LtBar reduce production x -> Lparen Star Rparen
-- On Lsquare reduce production x -> Lparen Star Rparen
-- On Lparen reduce production x -> Lparen Star Rparen
-- On Let_ reduce production x -> Lparen Star Rparen
-- On Lemma reduce production x -> Lparen Star Rparen
-- On LeftArrow reduce production x -> Lparen Star Rparen
-- On Lcurly reduce production x -> Lparen Star Rparen
-- On Inst_default reduce production x -> Lparen Star Rparen
-- On Inst reduce production x -> Lparen Star Rparen
-- On Indreln reduce production x -> Lparen Star Rparen
-- On Include_ reduce production x -> Lparen Star Rparen
-- On In reduce production x -> Lparen Star Rparen
-- On Import_ reduce production x -> Lparen Star Rparen
-- On IN reduce production x -> Lparen Star Rparen
-- On HexNum reduce production x -> Lparen Star Rparen
-- On Hex reduce production x -> Lparen Star Rparen
-- On HashZero reduce production x -> Lparen Star Rparen
-- On HashOne reduce production x -> Lparen Star Rparen
-- On GtEqX reduce production x -> Lparen Star Rparen
-- On GtEq reduce production x -> Lparen Star Rparen
-- On Function_ reduce production x -> Lparen Star Rparen
-- On False reduce production x -> Lparen Star Rparen
-- On EqualX reduce production x -> Lparen Star Rparen
-- On EqGt reduce production x -> Lparen Star Rparen
-- On EqEqGt reduce production x -> Lparen Star Rparen
-- On Eq reduce production x -> Lparen Star Rparen
-- On Eof reduce production x -> Lparen Star Rparen
-- On End reduce production x -> Lparen Star Rparen
-- On Else reduce production x -> Lparen Star Rparen
-- On DotBrace reduce production x -> Lparen Star Rparen
-- On Dot reduce production x -> Lparen Star Rparen
-- On Do reduce production x -> Lparen Star Rparen
-- On Declare reduce production x -> Lparen Star Rparen
-- On Comma reduce production x -> Lparen Star Rparen
-- On ColonColon reduce production x -> Lparen Star Rparen
-- On Colon reduce production x -> Lparen Star Rparen
-- On Class_ reduce production x -> Lparen Star Rparen
-- On Char reduce production x -> Lparen Star Rparen
-- On BraceBar reduce production x -> Lparen Star Rparen
-- On BinNum reduce production x -> Lparen Star Rparen
-- On Bin reduce production x -> Lparen Star Rparen
-- On Begin_ reduce production x -> Lparen Star Rparen
-- On BarGt reduce production x -> Lparen Star Rparen
-- On BarBrace reduce production x -> Lparen Star Rparen
-- On BarBar reduce production x -> Lparen Star Rparen
-- On Bar reduce production x -> Lparen Star Rparen
-- On BacktickString reduce production x -> Lparen Star Rparen
-- On AtX reduce production x -> Lparen Star Rparen
-- On At reduce production x -> Lparen Star Rparen
-- On Assert reduce production x -> Lparen Star Rparen
-- On As reduce production x -> Lparen Star Rparen
-- On Arrow reduce production x -> Lparen Star Rparen
-- On And reduce production x -> Lparen Star Rparen
-- On AmpAmp reduce production x -> Lparen Star Rparen

State 10:
## Known stack suffix:
## Lparen PlusX
## LR(1) items:
x -> Lparen PlusX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## Lparen PlusX Rparen
## LR(1) items:
x -> Lparen PlusX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen PlusX Rparen
-- On Witness reduce production x -> Lparen PlusX Rparen
-- On With reduce production x -> Lparen PlusX Rparen
-- On Val reduce production x -> Lparen PlusX Rparen
-- On Under reduce production x -> Lparen PlusX Rparen
-- On Tyvar reduce production x -> Lparen PlusX Rparen
-- On Type reduce production x -> Lparen PlusX Rparen
-- On True reduce production x -> Lparen PlusX Rparen
-- On Theorem reduce production x -> Lparen PlusX Rparen
-- On Then reduce production x -> Lparen PlusX Rparen
-- On String reduce production x -> Lparen PlusX Rparen
-- On StarstarX reduce production x -> Lparen PlusX Rparen
-- On StarX reduce production x -> Lparen PlusX Rparen
-- On Star reduce production x -> Lparen PlusX Rparen
-- On SemiSemi reduce production x -> Lparen PlusX Rparen
-- On Semi reduce production x -> Lparen PlusX Rparen
-- On Rsquare reduce production x -> Lparen PlusX Rparen
-- On Rparen reduce production x -> Lparen PlusX Rparen
-- On Rcurly reduce production x -> Lparen PlusX Rparen
-- On PlusX reduce production x -> Lparen PlusX Rparen
-- On Plus reduce production x -> Lparen PlusX Rparen
-- On Open_ reduce production x -> Lparen PlusX Rparen
-- On Of reduce production x -> Lparen PlusX Rparen
-- On OctNum reduce production x -> Lparen PlusX Rparen
-- On Nvar reduce production x -> Lparen PlusX Rparen
-- On Num reduce production x -> Lparen PlusX Rparen
-- On Module_ reduce production x -> Lparen PlusX Rparen
-- On MinusMinusGt reduce production x -> Lparen PlusX Rparen
-- On Match reduce production x -> Lparen PlusX Rparen
-- On MEM reduce production x -> Lparen PlusX Rparen
-- On LtBar reduce production x -> Lparen PlusX Rparen
-- On Lsquare reduce production x -> Lparen PlusX Rparen
-- On Lparen reduce production x -> Lparen PlusX Rparen
-- On Let_ reduce production x -> Lparen PlusX Rparen
-- On Lemma reduce production x -> Lparen PlusX Rparen
-- On LeftArrow reduce production x -> Lparen PlusX Rparen
-- On Lcurly reduce production x -> Lparen PlusX Rparen
-- On Inst_default reduce production x -> Lparen PlusX Rparen
-- On Inst reduce production x -> Lparen PlusX Rparen
-- On Indreln reduce production x -> Lparen PlusX Rparen
-- On Include_ reduce production x -> Lparen PlusX Rparen
-- On In reduce production x -> Lparen PlusX Rparen
-- On Import_ reduce production x -> Lparen PlusX Rparen
-- On IN reduce production x -> Lparen PlusX Rparen
-- On HexNum reduce production x -> Lparen PlusX Rparen
-- On Hex reduce production x -> Lparen PlusX Rparen
-- On HashZero reduce production x -> Lparen PlusX Rparen
-- On HashOne reduce production x -> Lparen PlusX Rparen
-- On GtEqX reduce production x -> Lparen PlusX Rparen
-- On GtEq reduce production x -> Lparen PlusX Rparen
-- On Function_ reduce production x -> Lparen PlusX Rparen
-- On False reduce production x -> Lparen PlusX Rparen
-- On EqualX reduce production x -> Lparen PlusX Rparen
-- On EqGt reduce production x -> Lparen PlusX Rparen
-- On EqEqGt reduce production x -> Lparen PlusX Rparen
-- On Eq reduce production x -> Lparen PlusX Rparen
-- On Eof reduce production x -> Lparen PlusX Rparen
-- On End reduce production x -> Lparen PlusX Rparen
-- On Else reduce production x -> Lparen PlusX Rparen
-- On DotBrace reduce production x -> Lparen PlusX Rparen
-- On Dot reduce production x -> Lparen PlusX Rparen
-- On Do reduce production x -> Lparen PlusX Rparen
-- On Declare reduce production x -> Lparen PlusX Rparen
-- On Comma reduce production x -> Lparen PlusX Rparen
-- On ColonColon reduce production x -> Lparen PlusX Rparen
-- On Colon reduce production x -> Lparen PlusX Rparen
-- On Class_ reduce production x -> Lparen PlusX Rparen
-- On Char reduce production x -> Lparen PlusX Rparen
-- On BraceBar reduce production x -> Lparen PlusX Rparen
-- On BinNum reduce production x -> Lparen PlusX Rparen
-- On Bin reduce production x -> Lparen PlusX Rparen
-- On Begin_ reduce production x -> Lparen PlusX Rparen
-- On BarGt reduce production x -> Lparen PlusX Rparen
-- On BarBrace reduce production x -> Lparen PlusX Rparen
-- On BarBar reduce production x -> Lparen PlusX Rparen
-- On Bar reduce production x -> Lparen PlusX Rparen
-- On BacktickString reduce production x -> Lparen PlusX Rparen
-- On AtX reduce production x -> Lparen PlusX Rparen
-- On At reduce production x -> Lparen PlusX Rparen
-- On Assert reduce production x -> Lparen PlusX Rparen
-- On As reduce production x -> Lparen PlusX Rparen
-- On Arrow reduce production x -> Lparen PlusX Rparen
-- On And reduce production x -> Lparen PlusX Rparen
-- On AmpAmp reduce production x -> Lparen PlusX Rparen

State 12:
## Known stack suffix:
## Lparen Plus
## LR(1) items:
x -> Lparen Plus . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## Lparen Plus Rparen
## LR(1) items:
x -> Lparen Plus Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen Plus Rparen
-- On Witness reduce production x -> Lparen Plus Rparen
-- On With reduce production x -> Lparen Plus Rparen
-- On Val reduce production x -> Lparen Plus Rparen
-- On Under reduce production x -> Lparen Plus Rparen
-- On Tyvar reduce production x -> Lparen Plus Rparen
-- On Type reduce production x -> Lparen Plus Rparen
-- On True reduce production x -> Lparen Plus Rparen
-- On Theorem reduce production x -> Lparen Plus Rparen
-- On Then reduce production x -> Lparen Plus Rparen
-- On String reduce production x -> Lparen Plus Rparen
-- On StarstarX reduce production x -> Lparen Plus Rparen
-- On StarX reduce production x -> Lparen Plus Rparen
-- On Star reduce production x -> Lparen Plus Rparen
-- On SemiSemi reduce production x -> Lparen Plus Rparen
-- On Semi reduce production x -> Lparen Plus Rparen
-- On Rsquare reduce production x -> Lparen Plus Rparen
-- On Rparen reduce production x -> Lparen Plus Rparen
-- On Rcurly reduce production x -> Lparen Plus Rparen
-- On PlusX reduce production x -> Lparen Plus Rparen
-- On Plus reduce production x -> Lparen Plus Rparen
-- On Open_ reduce production x -> Lparen Plus Rparen
-- On Of reduce production x -> Lparen Plus Rparen
-- On OctNum reduce production x -> Lparen Plus Rparen
-- On Nvar reduce production x -> Lparen Plus Rparen
-- On Num reduce production x -> Lparen Plus Rparen
-- On Module_ reduce production x -> Lparen Plus Rparen
-- On MinusMinusGt reduce production x -> Lparen Plus Rparen
-- On Match reduce production x -> Lparen Plus Rparen
-- On MEM reduce production x -> Lparen Plus Rparen
-- On LtBar reduce production x -> Lparen Plus Rparen
-- On Lsquare reduce production x -> Lparen Plus Rparen
-- On Lparen reduce production x -> Lparen Plus Rparen
-- On Let_ reduce production x -> Lparen Plus Rparen
-- On Lemma reduce production x -> Lparen Plus Rparen
-- On LeftArrow reduce production x -> Lparen Plus Rparen
-- On Lcurly reduce production x -> Lparen Plus Rparen
-- On Inst_default reduce production x -> Lparen Plus Rparen
-- On Inst reduce production x -> Lparen Plus Rparen
-- On Indreln reduce production x -> Lparen Plus Rparen
-- On Include_ reduce production x -> Lparen Plus Rparen
-- On In reduce production x -> Lparen Plus Rparen
-- On Import_ reduce production x -> Lparen Plus Rparen
-- On IN reduce production x -> Lparen Plus Rparen
-- On HexNum reduce production x -> Lparen Plus Rparen
-- On Hex reduce production x -> Lparen Plus Rparen
-- On HashZero reduce production x -> Lparen Plus Rparen
-- On HashOne reduce production x -> Lparen Plus Rparen
-- On GtEqX reduce production x -> Lparen Plus Rparen
-- On GtEq reduce production x -> Lparen Plus Rparen
-- On Function_ reduce production x -> Lparen Plus Rparen
-- On False reduce production x -> Lparen Plus Rparen
-- On EqualX reduce production x -> Lparen Plus Rparen
-- On EqGt reduce production x -> Lparen Plus Rparen
-- On EqEqGt reduce production x -> Lparen Plus Rparen
-- On Eq reduce production x -> Lparen Plus Rparen
-- On Eof reduce production x -> Lparen Plus Rparen
-- On End reduce production x -> Lparen Plus Rparen
-- On Else reduce production x -> Lparen Plus Rparen
-- On DotBrace reduce production x -> Lparen Plus Rparen
-- On Dot reduce production x -> Lparen Plus Rparen
-- On Do reduce production x -> Lparen Plus Rparen
-- On Declare reduce production x -> Lparen Plus Rparen
-- On Comma reduce production x -> Lparen Plus Rparen
-- On ColonColon reduce production x -> Lparen Plus Rparen
-- On Colon reduce production x -> Lparen Plus Rparen
-- On Class_ reduce production x -> Lparen Plus Rparen
-- On Char reduce production x -> Lparen Plus Rparen
-- On BraceBar reduce production x -> Lparen Plus Rparen
-- On BinNum reduce production x -> Lparen Plus Rparen
-- On Bin reduce production x -> Lparen Plus Rparen
-- On Begin_ reduce production x -> Lparen Plus Rparen
-- On BarGt reduce production x -> Lparen Plus Rparen
-- On BarBrace reduce production x -> Lparen Plus Rparen
-- On BarBar reduce production x -> Lparen Plus Rparen
-- On Bar reduce production x -> Lparen Plus Rparen
-- On BacktickString reduce production x -> Lparen Plus Rparen
-- On AtX reduce production x -> Lparen Plus Rparen
-- On At reduce production x -> Lparen Plus Rparen
-- On Assert reduce production x -> Lparen Plus Rparen
-- On As reduce production x -> Lparen Plus Rparen
-- On Arrow reduce production x -> Lparen Plus Rparen
-- On And reduce production x -> Lparen Plus Rparen
-- On AmpAmp reduce production x -> Lparen Plus Rparen

State 14:
## Known stack suffix:
## Lparen MinusMinusGt
## LR(1) items:
x -> Lparen MinusMinusGt . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Lparen MinusMinusGt Rparen
## LR(1) items:
x -> Lparen MinusMinusGt Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen MinusMinusGt Rparen
-- On Witness reduce production x -> Lparen MinusMinusGt Rparen
-- On With reduce production x -> Lparen MinusMinusGt Rparen
-- On Val reduce production x -> Lparen MinusMinusGt Rparen
-- On Under reduce production x -> Lparen MinusMinusGt Rparen
-- On Tyvar reduce production x -> Lparen MinusMinusGt Rparen
-- On Type reduce production x -> Lparen MinusMinusGt Rparen
-- On True reduce production x -> Lparen MinusMinusGt Rparen
-- On Theorem reduce production x -> Lparen MinusMinusGt Rparen
-- On Then reduce production x -> Lparen MinusMinusGt Rparen
-- On String reduce production x -> Lparen MinusMinusGt Rparen
-- On StarstarX reduce production x -> Lparen MinusMinusGt Rparen
-- On StarX reduce production x -> Lparen MinusMinusGt Rparen
-- On Star reduce production x -> Lparen MinusMinusGt Rparen
-- On SemiSemi reduce production x -> Lparen MinusMinusGt Rparen
-- On Semi reduce production x -> Lparen MinusMinusGt Rparen
-- On Rsquare reduce production x -> Lparen MinusMinusGt Rparen
-- On Rparen reduce production x -> Lparen MinusMinusGt Rparen
-- On Rcurly reduce production x -> Lparen MinusMinusGt Rparen
-- On PlusX reduce production x -> Lparen MinusMinusGt Rparen
-- On Plus reduce production x -> Lparen MinusMinusGt Rparen
-- On Open_ reduce production x -> Lparen MinusMinusGt Rparen
-- On Of reduce production x -> Lparen MinusMinusGt Rparen
-- On OctNum reduce production x -> Lparen MinusMinusGt Rparen
-- On Nvar reduce production x -> Lparen MinusMinusGt Rparen
-- On Num reduce production x -> Lparen MinusMinusGt Rparen
-- On Module_ reduce production x -> Lparen MinusMinusGt Rparen
-- On MinusMinusGt reduce production x -> Lparen MinusMinusGt Rparen
-- On Match reduce production x -> Lparen MinusMinusGt Rparen
-- On MEM reduce production x -> Lparen MinusMinusGt Rparen
-- On LtBar reduce production x -> Lparen MinusMinusGt Rparen
-- On Lsquare reduce production x -> Lparen MinusMinusGt Rparen
-- On Lparen reduce production x -> Lparen MinusMinusGt Rparen
-- On Let_ reduce production x -> Lparen MinusMinusGt Rparen
-- On Lemma reduce production x -> Lparen MinusMinusGt Rparen
-- On LeftArrow reduce production x -> Lparen MinusMinusGt Rparen
-- On Lcurly reduce production x -> Lparen MinusMinusGt Rparen
-- On Inst_default reduce production x -> Lparen MinusMinusGt Rparen
-- On Inst reduce production x -> Lparen MinusMinusGt Rparen
-- On Indreln reduce production x -> Lparen MinusMinusGt Rparen
-- On Include_ reduce production x -> Lparen MinusMinusGt Rparen
-- On In reduce production x -> Lparen MinusMinusGt Rparen
-- On Import_ reduce production x -> Lparen MinusMinusGt Rparen
-- On IN reduce production x -> Lparen MinusMinusGt Rparen
-- On HexNum reduce production x -> Lparen MinusMinusGt Rparen
-- On Hex reduce production x -> Lparen MinusMinusGt Rparen
-- On HashZero reduce production x -> Lparen MinusMinusGt Rparen
-- On HashOne reduce production x -> Lparen MinusMinusGt Rparen
-- On GtEqX reduce production x -> Lparen MinusMinusGt Rparen
-- On GtEq reduce production x -> Lparen MinusMinusGt Rparen
-- On Function_ reduce production x -> Lparen MinusMinusGt Rparen
-- On False reduce production x -> Lparen MinusMinusGt Rparen
-- On EqualX reduce production x -> Lparen MinusMinusGt Rparen
-- On EqGt reduce production x -> Lparen MinusMinusGt Rparen
-- On EqEqGt reduce production x -> Lparen MinusMinusGt Rparen
-- On Eq reduce production x -> Lparen MinusMinusGt Rparen
-- On Eof reduce production x -> Lparen MinusMinusGt Rparen
-- On End reduce production x -> Lparen MinusMinusGt Rparen
-- On Else reduce production x -> Lparen MinusMinusGt Rparen
-- On DotBrace reduce production x -> Lparen MinusMinusGt Rparen
-- On Dot reduce production x -> Lparen MinusMinusGt Rparen
-- On Do reduce production x -> Lparen MinusMinusGt Rparen
-- On Declare reduce production x -> Lparen MinusMinusGt Rparen
-- On Comma reduce production x -> Lparen MinusMinusGt Rparen
-- On ColonColon reduce production x -> Lparen MinusMinusGt Rparen
-- On Colon reduce production x -> Lparen MinusMinusGt Rparen
-- On Class_ reduce production x -> Lparen MinusMinusGt Rparen
-- On Char reduce production x -> Lparen MinusMinusGt Rparen
-- On BraceBar reduce production x -> Lparen MinusMinusGt Rparen
-- On BinNum reduce production x -> Lparen MinusMinusGt Rparen
-- On Bin reduce production x -> Lparen MinusMinusGt Rparen
-- On Begin_ reduce production x -> Lparen MinusMinusGt Rparen
-- On BarGt reduce production x -> Lparen MinusMinusGt Rparen
-- On BarBrace reduce production x -> Lparen MinusMinusGt Rparen
-- On BarBar reduce production x -> Lparen MinusMinusGt Rparen
-- On Bar reduce production x -> Lparen MinusMinusGt Rparen
-- On BacktickString reduce production x -> Lparen MinusMinusGt Rparen
-- On AtX reduce production x -> Lparen MinusMinusGt Rparen
-- On At reduce production x -> Lparen MinusMinusGt Rparen
-- On Assert reduce production x -> Lparen MinusMinusGt Rparen
-- On As reduce production x -> Lparen MinusMinusGt Rparen
-- On Arrow reduce production x -> Lparen MinusMinusGt Rparen
-- On And reduce production x -> Lparen MinusMinusGt Rparen
-- On AmpAmp reduce production x -> Lparen MinusMinusGt Rparen

State 16:
## Known stack suffix:
## Lparen MEM
## LR(1) items:
x -> Lparen MEM . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## Lparen MEM Rparen
## LR(1) items:
x -> Lparen MEM Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen MEM Rparen
-- On Witness reduce production x -> Lparen MEM Rparen
-- On With reduce production x -> Lparen MEM Rparen
-- On Val reduce production x -> Lparen MEM Rparen
-- On Under reduce production x -> Lparen MEM Rparen
-- On Tyvar reduce production x -> Lparen MEM Rparen
-- On Type reduce production x -> Lparen MEM Rparen
-- On True reduce production x -> Lparen MEM Rparen
-- On Theorem reduce production x -> Lparen MEM Rparen
-- On Then reduce production x -> Lparen MEM Rparen
-- On String reduce production x -> Lparen MEM Rparen
-- On StarstarX reduce production x -> Lparen MEM Rparen
-- On StarX reduce production x -> Lparen MEM Rparen
-- On Star reduce production x -> Lparen MEM Rparen
-- On SemiSemi reduce production x -> Lparen MEM Rparen
-- On Semi reduce production x -> Lparen MEM Rparen
-- On Rsquare reduce production x -> Lparen MEM Rparen
-- On Rparen reduce production x -> Lparen MEM Rparen
-- On Rcurly reduce production x -> Lparen MEM Rparen
-- On PlusX reduce production x -> Lparen MEM Rparen
-- On Plus reduce production x -> Lparen MEM Rparen
-- On Open_ reduce production x -> Lparen MEM Rparen
-- On Of reduce production x -> Lparen MEM Rparen
-- On OctNum reduce production x -> Lparen MEM Rparen
-- On Nvar reduce production x -> Lparen MEM Rparen
-- On Num reduce production x -> Lparen MEM Rparen
-- On Module_ reduce production x -> Lparen MEM Rparen
-- On MinusMinusGt reduce production x -> Lparen MEM Rparen
-- On Match reduce production x -> Lparen MEM Rparen
-- On MEM reduce production x -> Lparen MEM Rparen
-- On LtBar reduce production x -> Lparen MEM Rparen
-- On Lsquare reduce production x -> Lparen MEM Rparen
-- On Lparen reduce production x -> Lparen MEM Rparen
-- On Let_ reduce production x -> Lparen MEM Rparen
-- On Lemma reduce production x -> Lparen MEM Rparen
-- On LeftArrow reduce production x -> Lparen MEM Rparen
-- On Lcurly reduce production x -> Lparen MEM Rparen
-- On Inst_default reduce production x -> Lparen MEM Rparen
-- On Inst reduce production x -> Lparen MEM Rparen
-- On Indreln reduce production x -> Lparen MEM Rparen
-- On Include_ reduce production x -> Lparen MEM Rparen
-- On In reduce production x -> Lparen MEM Rparen
-- On Import_ reduce production x -> Lparen MEM Rparen
-- On IN reduce production x -> Lparen MEM Rparen
-- On HexNum reduce production x -> Lparen MEM Rparen
-- On Hex reduce production x -> Lparen MEM Rparen
-- On HashZero reduce production x -> Lparen MEM Rparen
-- On HashOne reduce production x -> Lparen MEM Rparen
-- On GtEqX reduce production x -> Lparen MEM Rparen
-- On GtEq reduce production x -> Lparen MEM Rparen
-- On Function_ reduce production x -> Lparen MEM Rparen
-- On False reduce production x -> Lparen MEM Rparen
-- On EqualX reduce production x -> Lparen MEM Rparen
-- On EqGt reduce production x -> Lparen MEM Rparen
-- On EqEqGt reduce production x -> Lparen MEM Rparen
-- On Eq reduce production x -> Lparen MEM Rparen
-- On Eof reduce production x -> Lparen MEM Rparen
-- On End reduce production x -> Lparen MEM Rparen
-- On Else reduce production x -> Lparen MEM Rparen
-- On DotBrace reduce production x -> Lparen MEM Rparen
-- On Dot reduce production x -> Lparen MEM Rparen
-- On Do reduce production x -> Lparen MEM Rparen
-- On Declare reduce production x -> Lparen MEM Rparen
-- On Comma reduce production x -> Lparen MEM Rparen
-- On ColonColon reduce production x -> Lparen MEM Rparen
-- On Colon reduce production x -> Lparen MEM Rparen
-- On Class_ reduce production x -> Lparen MEM Rparen
-- On Char reduce production x -> Lparen MEM Rparen
-- On BraceBar reduce production x -> Lparen MEM Rparen
-- On BinNum reduce production x -> Lparen MEM Rparen
-- On Bin reduce production x -> Lparen MEM Rparen
-- On Begin_ reduce production x -> Lparen MEM Rparen
-- On BarGt reduce production x -> Lparen MEM Rparen
-- On BarBrace reduce production x -> Lparen MEM Rparen
-- On BarBar reduce production x -> Lparen MEM Rparen
-- On Bar reduce production x -> Lparen MEM Rparen
-- On BacktickString reduce production x -> Lparen MEM Rparen
-- On AtX reduce production x -> Lparen MEM Rparen
-- On At reduce production x -> Lparen MEM Rparen
-- On Assert reduce production x -> Lparen MEM Rparen
-- On As reduce production x -> Lparen MEM Rparen
-- On Arrow reduce production x -> Lparen MEM Rparen
-- On And reduce production x -> Lparen MEM Rparen
-- On AmpAmp reduce production x -> Lparen MEM Rparen

State 18:
## Known stack suffix:
## Lparen IN
## LR(1) items:
x -> Lparen IN . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## Lparen IN Rparen
## LR(1) items:
x -> Lparen IN Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen IN Rparen
-- On Witness reduce production x -> Lparen IN Rparen
-- On With reduce production x -> Lparen IN Rparen
-- On Val reduce production x -> Lparen IN Rparen
-- On Under reduce production x -> Lparen IN Rparen
-- On Tyvar reduce production x -> Lparen IN Rparen
-- On Type reduce production x -> Lparen IN Rparen
-- On True reduce production x -> Lparen IN Rparen
-- On Theorem reduce production x -> Lparen IN Rparen
-- On Then reduce production x -> Lparen IN Rparen
-- On String reduce production x -> Lparen IN Rparen
-- On StarstarX reduce production x -> Lparen IN Rparen
-- On StarX reduce production x -> Lparen IN Rparen
-- On Star reduce production x -> Lparen IN Rparen
-- On SemiSemi reduce production x -> Lparen IN Rparen
-- On Semi reduce production x -> Lparen IN Rparen
-- On Rsquare reduce production x -> Lparen IN Rparen
-- On Rparen reduce production x -> Lparen IN Rparen
-- On Rcurly reduce production x -> Lparen IN Rparen
-- On PlusX reduce production x -> Lparen IN Rparen
-- On Plus reduce production x -> Lparen IN Rparen
-- On Open_ reduce production x -> Lparen IN Rparen
-- On Of reduce production x -> Lparen IN Rparen
-- On OctNum reduce production x -> Lparen IN Rparen
-- On Nvar reduce production x -> Lparen IN Rparen
-- On Num reduce production x -> Lparen IN Rparen
-- On Module_ reduce production x -> Lparen IN Rparen
-- On MinusMinusGt reduce production x -> Lparen IN Rparen
-- On Match reduce production x -> Lparen IN Rparen
-- On MEM reduce production x -> Lparen IN Rparen
-- On LtBar reduce production x -> Lparen IN Rparen
-- On Lsquare reduce production x -> Lparen IN Rparen
-- On Lparen reduce production x -> Lparen IN Rparen
-- On Let_ reduce production x -> Lparen IN Rparen
-- On Lemma reduce production x -> Lparen IN Rparen
-- On LeftArrow reduce production x -> Lparen IN Rparen
-- On Lcurly reduce production x -> Lparen IN Rparen
-- On Inst_default reduce production x -> Lparen IN Rparen
-- On Inst reduce production x -> Lparen IN Rparen
-- On Indreln reduce production x -> Lparen IN Rparen
-- On Include_ reduce production x -> Lparen IN Rparen
-- On In reduce production x -> Lparen IN Rparen
-- On Import_ reduce production x -> Lparen IN Rparen
-- On IN reduce production x -> Lparen IN Rparen
-- On HexNum reduce production x -> Lparen IN Rparen
-- On Hex reduce production x -> Lparen IN Rparen
-- On HashZero reduce production x -> Lparen IN Rparen
-- On HashOne reduce production x -> Lparen IN Rparen
-- On GtEqX reduce production x -> Lparen IN Rparen
-- On GtEq reduce production x -> Lparen IN Rparen
-- On Function_ reduce production x -> Lparen IN Rparen
-- On False reduce production x -> Lparen IN Rparen
-- On EqualX reduce production x -> Lparen IN Rparen
-- On EqGt reduce production x -> Lparen IN Rparen
-- On EqEqGt reduce production x -> Lparen IN Rparen
-- On Eq reduce production x -> Lparen IN Rparen
-- On Eof reduce production x -> Lparen IN Rparen
-- On End reduce production x -> Lparen IN Rparen
-- On Else reduce production x -> Lparen IN Rparen
-- On DotBrace reduce production x -> Lparen IN Rparen
-- On Dot reduce production x -> Lparen IN Rparen
-- On Do reduce production x -> Lparen IN Rparen
-- On Declare reduce production x -> Lparen IN Rparen
-- On Comma reduce production x -> Lparen IN Rparen
-- On ColonColon reduce production x -> Lparen IN Rparen
-- On Colon reduce production x -> Lparen IN Rparen
-- On Class_ reduce production x -> Lparen IN Rparen
-- On Char reduce production x -> Lparen IN Rparen
-- On BraceBar reduce production x -> Lparen IN Rparen
-- On BinNum reduce production x -> Lparen IN Rparen
-- On Bin reduce production x -> Lparen IN Rparen
-- On Begin_ reduce production x -> Lparen IN Rparen
-- On BarGt reduce production x -> Lparen IN Rparen
-- On BarBrace reduce production x -> Lparen IN Rparen
-- On BarBar reduce production x -> Lparen IN Rparen
-- On Bar reduce production x -> Lparen IN Rparen
-- On BacktickString reduce production x -> Lparen IN Rparen
-- On AtX reduce production x -> Lparen IN Rparen
-- On At reduce production x -> Lparen IN Rparen
-- On Assert reduce production x -> Lparen IN Rparen
-- On As reduce production x -> Lparen IN Rparen
-- On Arrow reduce production x -> Lparen IN Rparen
-- On And reduce production x -> Lparen IN Rparen
-- On AmpAmp reduce production x -> Lparen IN Rparen

State 20:
## Known stack suffix:
## Lparen GtEqX
## LR(1) items:
x -> Lparen GtEqX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## Lparen GtEqX Rparen
## LR(1) items:
x -> Lparen GtEqX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen GtEqX Rparen
-- On Witness reduce production x -> Lparen GtEqX Rparen
-- On With reduce production x -> Lparen GtEqX Rparen
-- On Val reduce production x -> Lparen GtEqX Rparen
-- On Under reduce production x -> Lparen GtEqX Rparen
-- On Tyvar reduce production x -> Lparen GtEqX Rparen
-- On Type reduce production x -> Lparen GtEqX Rparen
-- On True reduce production x -> Lparen GtEqX Rparen
-- On Theorem reduce production x -> Lparen GtEqX Rparen
-- On Then reduce production x -> Lparen GtEqX Rparen
-- On String reduce production x -> Lparen GtEqX Rparen
-- On StarstarX reduce production x -> Lparen GtEqX Rparen
-- On StarX reduce production x -> Lparen GtEqX Rparen
-- On Star reduce production x -> Lparen GtEqX Rparen
-- On SemiSemi reduce production x -> Lparen GtEqX Rparen
-- On Semi reduce production x -> Lparen GtEqX Rparen
-- On Rsquare reduce production x -> Lparen GtEqX Rparen
-- On Rparen reduce production x -> Lparen GtEqX Rparen
-- On Rcurly reduce production x -> Lparen GtEqX Rparen
-- On PlusX reduce production x -> Lparen GtEqX Rparen
-- On Plus reduce production x -> Lparen GtEqX Rparen
-- On Open_ reduce production x -> Lparen GtEqX Rparen
-- On Of reduce production x -> Lparen GtEqX Rparen
-- On OctNum reduce production x -> Lparen GtEqX Rparen
-- On Nvar reduce production x -> Lparen GtEqX Rparen
-- On Num reduce production x -> Lparen GtEqX Rparen
-- On Module_ reduce production x -> Lparen GtEqX Rparen
-- On MinusMinusGt reduce production x -> Lparen GtEqX Rparen
-- On Match reduce production x -> Lparen GtEqX Rparen
-- On MEM reduce production x -> Lparen GtEqX Rparen
-- On LtBar reduce production x -> Lparen GtEqX Rparen
-- On Lsquare reduce production x -> Lparen GtEqX Rparen
-- On Lparen reduce production x -> Lparen GtEqX Rparen
-- On Let_ reduce production x -> Lparen GtEqX Rparen
-- On Lemma reduce production x -> Lparen GtEqX Rparen
-- On LeftArrow reduce production x -> Lparen GtEqX Rparen
-- On Lcurly reduce production x -> Lparen GtEqX Rparen
-- On Inst_default reduce production x -> Lparen GtEqX Rparen
-- On Inst reduce production x -> Lparen GtEqX Rparen
-- On Indreln reduce production x -> Lparen GtEqX Rparen
-- On Include_ reduce production x -> Lparen GtEqX Rparen
-- On In reduce production x -> Lparen GtEqX Rparen
-- On Import_ reduce production x -> Lparen GtEqX Rparen
-- On IN reduce production x -> Lparen GtEqX Rparen
-- On HexNum reduce production x -> Lparen GtEqX Rparen
-- On Hex reduce production x -> Lparen GtEqX Rparen
-- On HashZero reduce production x -> Lparen GtEqX Rparen
-- On HashOne reduce production x -> Lparen GtEqX Rparen
-- On GtEqX reduce production x -> Lparen GtEqX Rparen
-- On GtEq reduce production x -> Lparen GtEqX Rparen
-- On Function_ reduce production x -> Lparen GtEqX Rparen
-- On False reduce production x -> Lparen GtEqX Rparen
-- On EqualX reduce production x -> Lparen GtEqX Rparen
-- On EqGt reduce production x -> Lparen GtEqX Rparen
-- On EqEqGt reduce production x -> Lparen GtEqX Rparen
-- On Eq reduce production x -> Lparen GtEqX Rparen
-- On Eof reduce production x -> Lparen GtEqX Rparen
-- On End reduce production x -> Lparen GtEqX Rparen
-- On Else reduce production x -> Lparen GtEqX Rparen
-- On DotBrace reduce production x -> Lparen GtEqX Rparen
-- On Dot reduce production x -> Lparen GtEqX Rparen
-- On Do reduce production x -> Lparen GtEqX Rparen
-- On Declare reduce production x -> Lparen GtEqX Rparen
-- On Comma reduce production x -> Lparen GtEqX Rparen
-- On ColonColon reduce production x -> Lparen GtEqX Rparen
-- On Colon reduce production x -> Lparen GtEqX Rparen
-- On Class_ reduce production x -> Lparen GtEqX Rparen
-- On Char reduce production x -> Lparen GtEqX Rparen
-- On BraceBar reduce production x -> Lparen GtEqX Rparen
-- On BinNum reduce production x -> Lparen GtEqX Rparen
-- On Bin reduce production x -> Lparen GtEqX Rparen
-- On Begin_ reduce production x -> Lparen GtEqX Rparen
-- On BarGt reduce production x -> Lparen GtEqX Rparen
-- On BarBrace reduce production x -> Lparen GtEqX Rparen
-- On BarBar reduce production x -> Lparen GtEqX Rparen
-- On Bar reduce production x -> Lparen GtEqX Rparen
-- On BacktickString reduce production x -> Lparen GtEqX Rparen
-- On AtX reduce production x -> Lparen GtEqX Rparen
-- On At reduce production x -> Lparen GtEqX Rparen
-- On Assert reduce production x -> Lparen GtEqX Rparen
-- On As reduce production x -> Lparen GtEqX Rparen
-- On Arrow reduce production x -> Lparen GtEqX Rparen
-- On And reduce production x -> Lparen GtEqX Rparen
-- On AmpAmp reduce production x -> Lparen GtEqX Rparen

State 22:
## Known stack suffix:
## Lparen GtEq
## LR(1) items:
x -> Lparen GtEq . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## Lparen GtEq Rparen
## LR(1) items:
x -> Lparen GtEq Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen GtEq Rparen
-- On Witness reduce production x -> Lparen GtEq Rparen
-- On With reduce production x -> Lparen GtEq Rparen
-- On Val reduce production x -> Lparen GtEq Rparen
-- On Under reduce production x -> Lparen GtEq Rparen
-- On Tyvar reduce production x -> Lparen GtEq Rparen
-- On Type reduce production x -> Lparen GtEq Rparen
-- On True reduce production x -> Lparen GtEq Rparen
-- On Theorem reduce production x -> Lparen GtEq Rparen
-- On Then reduce production x -> Lparen GtEq Rparen
-- On String reduce production x -> Lparen GtEq Rparen
-- On StarstarX reduce production x -> Lparen GtEq Rparen
-- On StarX reduce production x -> Lparen GtEq Rparen
-- On Star reduce production x -> Lparen GtEq Rparen
-- On SemiSemi reduce production x -> Lparen GtEq Rparen
-- On Semi reduce production x -> Lparen GtEq Rparen
-- On Rsquare reduce production x -> Lparen GtEq Rparen
-- On Rparen reduce production x -> Lparen GtEq Rparen
-- On Rcurly reduce production x -> Lparen GtEq Rparen
-- On PlusX reduce production x -> Lparen GtEq Rparen
-- On Plus reduce production x -> Lparen GtEq Rparen
-- On Open_ reduce production x -> Lparen GtEq Rparen
-- On Of reduce production x -> Lparen GtEq Rparen
-- On OctNum reduce production x -> Lparen GtEq Rparen
-- On Nvar reduce production x -> Lparen GtEq Rparen
-- On Num reduce production x -> Lparen GtEq Rparen
-- On Module_ reduce production x -> Lparen GtEq Rparen
-- On MinusMinusGt reduce production x -> Lparen GtEq Rparen
-- On Match reduce production x -> Lparen GtEq Rparen
-- On MEM reduce production x -> Lparen GtEq Rparen
-- On LtBar reduce production x -> Lparen GtEq Rparen
-- On Lsquare reduce production x -> Lparen GtEq Rparen
-- On Lparen reduce production x -> Lparen GtEq Rparen
-- On Let_ reduce production x -> Lparen GtEq Rparen
-- On Lemma reduce production x -> Lparen GtEq Rparen
-- On LeftArrow reduce production x -> Lparen GtEq Rparen
-- On Lcurly reduce production x -> Lparen GtEq Rparen
-- On Inst_default reduce production x -> Lparen GtEq Rparen
-- On Inst reduce production x -> Lparen GtEq Rparen
-- On Indreln reduce production x -> Lparen GtEq Rparen
-- On Include_ reduce production x -> Lparen GtEq Rparen
-- On In reduce production x -> Lparen GtEq Rparen
-- On Import_ reduce production x -> Lparen GtEq Rparen
-- On IN reduce production x -> Lparen GtEq Rparen
-- On HexNum reduce production x -> Lparen GtEq Rparen
-- On Hex reduce production x -> Lparen GtEq Rparen
-- On HashZero reduce production x -> Lparen GtEq Rparen
-- On HashOne reduce production x -> Lparen GtEq Rparen
-- On GtEqX reduce production x -> Lparen GtEq Rparen
-- On GtEq reduce production x -> Lparen GtEq Rparen
-- On Function_ reduce production x -> Lparen GtEq Rparen
-- On False reduce production x -> Lparen GtEq Rparen
-- On EqualX reduce production x -> Lparen GtEq Rparen
-- On EqGt reduce production x -> Lparen GtEq Rparen
-- On EqEqGt reduce production x -> Lparen GtEq Rparen
-- On Eq reduce production x -> Lparen GtEq Rparen
-- On Eof reduce production x -> Lparen GtEq Rparen
-- On End reduce production x -> Lparen GtEq Rparen
-- On Else reduce production x -> Lparen GtEq Rparen
-- On DotBrace reduce production x -> Lparen GtEq Rparen
-- On Dot reduce production x -> Lparen GtEq Rparen
-- On Do reduce production x -> Lparen GtEq Rparen
-- On Declare reduce production x -> Lparen GtEq Rparen
-- On Comma reduce production x -> Lparen GtEq Rparen
-- On ColonColon reduce production x -> Lparen GtEq Rparen
-- On Colon reduce production x -> Lparen GtEq Rparen
-- On Class_ reduce production x -> Lparen GtEq Rparen
-- On Char reduce production x -> Lparen GtEq Rparen
-- On BraceBar reduce production x -> Lparen GtEq Rparen
-- On BinNum reduce production x -> Lparen GtEq Rparen
-- On Bin reduce production x -> Lparen GtEq Rparen
-- On Begin_ reduce production x -> Lparen GtEq Rparen
-- On BarGt reduce production x -> Lparen GtEq Rparen
-- On BarBrace reduce production x -> Lparen GtEq Rparen
-- On BarBar reduce production x -> Lparen GtEq Rparen
-- On Bar reduce production x -> Lparen GtEq Rparen
-- On BacktickString reduce production x -> Lparen GtEq Rparen
-- On AtX reduce production x -> Lparen GtEq Rparen
-- On At reduce production x -> Lparen GtEq Rparen
-- On Assert reduce production x -> Lparen GtEq Rparen
-- On As reduce production x -> Lparen GtEq Rparen
-- On Arrow reduce production x -> Lparen GtEq Rparen
-- On And reduce production x -> Lparen GtEq Rparen
-- On AmpAmp reduce production x -> Lparen GtEq Rparen

State 24:
## Known stack suffix:
## Lparen EqualX
## LR(1) items:
x -> Lparen EqualX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## Lparen EqualX Rparen
## LR(1) items:
x -> Lparen EqualX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen EqualX Rparen
-- On Witness reduce production x -> Lparen EqualX Rparen
-- On With reduce production x -> Lparen EqualX Rparen
-- On Val reduce production x -> Lparen EqualX Rparen
-- On Under reduce production x -> Lparen EqualX Rparen
-- On Tyvar reduce production x -> Lparen EqualX Rparen
-- On Type reduce production x -> Lparen EqualX Rparen
-- On True reduce production x -> Lparen EqualX Rparen
-- On Theorem reduce production x -> Lparen EqualX Rparen
-- On Then reduce production x -> Lparen EqualX Rparen
-- On String reduce production x -> Lparen EqualX Rparen
-- On StarstarX reduce production x -> Lparen EqualX Rparen
-- On StarX reduce production x -> Lparen EqualX Rparen
-- On Star reduce production x -> Lparen EqualX Rparen
-- On SemiSemi reduce production x -> Lparen EqualX Rparen
-- On Semi reduce production x -> Lparen EqualX Rparen
-- On Rsquare reduce production x -> Lparen EqualX Rparen
-- On Rparen reduce production x -> Lparen EqualX Rparen
-- On Rcurly reduce production x -> Lparen EqualX Rparen
-- On PlusX reduce production x -> Lparen EqualX Rparen
-- On Plus reduce production x -> Lparen EqualX Rparen
-- On Open_ reduce production x -> Lparen EqualX Rparen
-- On Of reduce production x -> Lparen EqualX Rparen
-- On OctNum reduce production x -> Lparen EqualX Rparen
-- On Nvar reduce production x -> Lparen EqualX Rparen
-- On Num reduce production x -> Lparen EqualX Rparen
-- On Module_ reduce production x -> Lparen EqualX Rparen
-- On MinusMinusGt reduce production x -> Lparen EqualX Rparen
-- On Match reduce production x -> Lparen EqualX Rparen
-- On MEM reduce production x -> Lparen EqualX Rparen
-- On LtBar reduce production x -> Lparen EqualX Rparen
-- On Lsquare reduce production x -> Lparen EqualX Rparen
-- On Lparen reduce production x -> Lparen EqualX Rparen
-- On Let_ reduce production x -> Lparen EqualX Rparen
-- On Lemma reduce production x -> Lparen EqualX Rparen
-- On LeftArrow reduce production x -> Lparen EqualX Rparen
-- On Lcurly reduce production x -> Lparen EqualX Rparen
-- On Inst_default reduce production x -> Lparen EqualX Rparen
-- On Inst reduce production x -> Lparen EqualX Rparen
-- On Indreln reduce production x -> Lparen EqualX Rparen
-- On Include_ reduce production x -> Lparen EqualX Rparen
-- On In reduce production x -> Lparen EqualX Rparen
-- On Import_ reduce production x -> Lparen EqualX Rparen
-- On IN reduce production x -> Lparen EqualX Rparen
-- On HexNum reduce production x -> Lparen EqualX Rparen
-- On Hex reduce production x -> Lparen EqualX Rparen
-- On HashZero reduce production x -> Lparen EqualX Rparen
-- On HashOne reduce production x -> Lparen EqualX Rparen
-- On GtEqX reduce production x -> Lparen EqualX Rparen
-- On GtEq reduce production x -> Lparen EqualX Rparen
-- On Function_ reduce production x -> Lparen EqualX Rparen
-- On False reduce production x -> Lparen EqualX Rparen
-- On EqualX reduce production x -> Lparen EqualX Rparen
-- On EqGt reduce production x -> Lparen EqualX Rparen
-- On EqEqGt reduce production x -> Lparen EqualX Rparen
-- On Eq reduce production x -> Lparen EqualX Rparen
-- On Eof reduce production x -> Lparen EqualX Rparen
-- On End reduce production x -> Lparen EqualX Rparen
-- On Else reduce production x -> Lparen EqualX Rparen
-- On DotBrace reduce production x -> Lparen EqualX Rparen
-- On Dot reduce production x -> Lparen EqualX Rparen
-- On Do reduce production x -> Lparen EqualX Rparen
-- On Declare reduce production x -> Lparen EqualX Rparen
-- On Comma reduce production x -> Lparen EqualX Rparen
-- On ColonColon reduce production x -> Lparen EqualX Rparen
-- On Colon reduce production x -> Lparen EqualX Rparen
-- On Class_ reduce production x -> Lparen EqualX Rparen
-- On Char reduce production x -> Lparen EqualX Rparen
-- On BraceBar reduce production x -> Lparen EqualX Rparen
-- On BinNum reduce production x -> Lparen EqualX Rparen
-- On Bin reduce production x -> Lparen EqualX Rparen
-- On Begin_ reduce production x -> Lparen EqualX Rparen
-- On BarGt reduce production x -> Lparen EqualX Rparen
-- On BarBrace reduce production x -> Lparen EqualX Rparen
-- On BarBar reduce production x -> Lparen EqualX Rparen
-- On Bar reduce production x -> Lparen EqualX Rparen
-- On BacktickString reduce production x -> Lparen EqualX Rparen
-- On AtX reduce production x -> Lparen EqualX Rparen
-- On At reduce production x -> Lparen EqualX Rparen
-- On Assert reduce production x -> Lparen EqualX Rparen
-- On As reduce production x -> Lparen EqualX Rparen
-- On Arrow reduce production x -> Lparen EqualX Rparen
-- On And reduce production x -> Lparen EqualX Rparen
-- On AmpAmp reduce production x -> Lparen EqualX Rparen

State 26:
## Known stack suffix:
## Lparen Eq
## LR(1) items:
x -> Lparen Eq . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## Lparen Eq Rparen
## LR(1) items:
x -> Lparen Eq Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen Eq Rparen
-- On Witness reduce production x -> Lparen Eq Rparen
-- On With reduce production x -> Lparen Eq Rparen
-- On Val reduce production x -> Lparen Eq Rparen
-- On Under reduce production x -> Lparen Eq Rparen
-- On Tyvar reduce production x -> Lparen Eq Rparen
-- On Type reduce production x -> Lparen Eq Rparen
-- On True reduce production x -> Lparen Eq Rparen
-- On Theorem reduce production x -> Lparen Eq Rparen
-- On Then reduce production x -> Lparen Eq Rparen
-- On String reduce production x -> Lparen Eq Rparen
-- On StarstarX reduce production x -> Lparen Eq Rparen
-- On StarX reduce production x -> Lparen Eq Rparen
-- On Star reduce production x -> Lparen Eq Rparen
-- On SemiSemi reduce production x -> Lparen Eq Rparen
-- On Semi reduce production x -> Lparen Eq Rparen
-- On Rsquare reduce production x -> Lparen Eq Rparen
-- On Rparen reduce production x -> Lparen Eq Rparen
-- On Rcurly reduce production x -> Lparen Eq Rparen
-- On PlusX reduce production x -> Lparen Eq Rparen
-- On Plus reduce production x -> Lparen Eq Rparen
-- On Open_ reduce production x -> Lparen Eq Rparen
-- On Of reduce production x -> Lparen Eq Rparen
-- On OctNum reduce production x -> Lparen Eq Rparen
-- On Nvar reduce production x -> Lparen Eq Rparen
-- On Num reduce production x -> Lparen Eq Rparen
-- On Module_ reduce production x -> Lparen Eq Rparen
-- On MinusMinusGt reduce production x -> Lparen Eq Rparen
-- On Match reduce production x -> Lparen Eq Rparen
-- On MEM reduce production x -> Lparen Eq Rparen
-- On LtBar reduce production x -> Lparen Eq Rparen
-- On Lsquare reduce production x -> Lparen Eq Rparen
-- On Lparen reduce production x -> Lparen Eq Rparen
-- On Let_ reduce production x -> Lparen Eq Rparen
-- On Lemma reduce production x -> Lparen Eq Rparen
-- On LeftArrow reduce production x -> Lparen Eq Rparen
-- On Lcurly reduce production x -> Lparen Eq Rparen
-- On Inst_default reduce production x -> Lparen Eq Rparen
-- On Inst reduce production x -> Lparen Eq Rparen
-- On Indreln reduce production x -> Lparen Eq Rparen
-- On Include_ reduce production x -> Lparen Eq Rparen
-- On In reduce production x -> Lparen Eq Rparen
-- On Import_ reduce production x -> Lparen Eq Rparen
-- On IN reduce production x -> Lparen Eq Rparen
-- On HexNum reduce production x -> Lparen Eq Rparen
-- On Hex reduce production x -> Lparen Eq Rparen
-- On HashZero reduce production x -> Lparen Eq Rparen
-- On HashOne reduce production x -> Lparen Eq Rparen
-- On GtEqX reduce production x -> Lparen Eq Rparen
-- On GtEq reduce production x -> Lparen Eq Rparen
-- On Function_ reduce production x -> Lparen Eq Rparen
-- On False reduce production x -> Lparen Eq Rparen
-- On EqualX reduce production x -> Lparen Eq Rparen
-- On EqGt reduce production x -> Lparen Eq Rparen
-- On EqEqGt reduce production x -> Lparen Eq Rparen
-- On Eq reduce production x -> Lparen Eq Rparen
-- On Eof reduce production x -> Lparen Eq Rparen
-- On End reduce production x -> Lparen Eq Rparen
-- On Else reduce production x -> Lparen Eq Rparen
-- On DotBrace reduce production x -> Lparen Eq Rparen
-- On Dot reduce production x -> Lparen Eq Rparen
-- On Do reduce production x -> Lparen Eq Rparen
-- On Declare reduce production x -> Lparen Eq Rparen
-- On Comma reduce production x -> Lparen Eq Rparen
-- On ColonColon reduce production x -> Lparen Eq Rparen
-- On Colon reduce production x -> Lparen Eq Rparen
-- On Class_ reduce production x -> Lparen Eq Rparen
-- On Char reduce production x -> Lparen Eq Rparen
-- On BraceBar reduce production x -> Lparen Eq Rparen
-- On BinNum reduce production x -> Lparen Eq Rparen
-- On Bin reduce production x -> Lparen Eq Rparen
-- On Begin_ reduce production x -> Lparen Eq Rparen
-- On BarGt reduce production x -> Lparen Eq Rparen
-- On BarBrace reduce production x -> Lparen Eq Rparen
-- On BarBar reduce production x -> Lparen Eq Rparen
-- On Bar reduce production x -> Lparen Eq Rparen
-- On BacktickString reduce production x -> Lparen Eq Rparen
-- On AtX reduce production x -> Lparen Eq Rparen
-- On At reduce production x -> Lparen Eq Rparen
-- On Assert reduce production x -> Lparen Eq Rparen
-- On As reduce production x -> Lparen Eq Rparen
-- On Arrow reduce production x -> Lparen Eq Rparen
-- On And reduce production x -> Lparen Eq Rparen
-- On AmpAmp reduce production x -> Lparen Eq Rparen

State 28:
## Known stack suffix:
## Lparen ColonColon
## LR(1) items:
x -> Lparen ColonColon . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## Lparen ColonColon Rparen
## LR(1) items:
x -> Lparen ColonColon Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen ColonColon Rparen
-- On Witness reduce production x -> Lparen ColonColon Rparen
-- On With reduce production x -> Lparen ColonColon Rparen
-- On Val reduce production x -> Lparen ColonColon Rparen
-- On Under reduce production x -> Lparen ColonColon Rparen
-- On Tyvar reduce production x -> Lparen ColonColon Rparen
-- On Type reduce production x -> Lparen ColonColon Rparen
-- On True reduce production x -> Lparen ColonColon Rparen
-- On Theorem reduce production x -> Lparen ColonColon Rparen
-- On Then reduce production x -> Lparen ColonColon Rparen
-- On String reduce production x -> Lparen ColonColon Rparen
-- On StarstarX reduce production x -> Lparen ColonColon Rparen
-- On StarX reduce production x -> Lparen ColonColon Rparen
-- On Star reduce production x -> Lparen ColonColon Rparen
-- On SemiSemi reduce production x -> Lparen ColonColon Rparen
-- On Semi reduce production x -> Lparen ColonColon Rparen
-- On Rsquare reduce production x -> Lparen ColonColon Rparen
-- On Rparen reduce production x -> Lparen ColonColon Rparen
-- On Rcurly reduce production x -> Lparen ColonColon Rparen
-- On PlusX reduce production x -> Lparen ColonColon Rparen
-- On Plus reduce production x -> Lparen ColonColon Rparen
-- On Open_ reduce production x -> Lparen ColonColon Rparen
-- On Of reduce production x -> Lparen ColonColon Rparen
-- On OctNum reduce production x -> Lparen ColonColon Rparen
-- On Nvar reduce production x -> Lparen ColonColon Rparen
-- On Num reduce production x -> Lparen ColonColon Rparen
-- On Module_ reduce production x -> Lparen ColonColon Rparen
-- On MinusMinusGt reduce production x -> Lparen ColonColon Rparen
-- On Match reduce production x -> Lparen ColonColon Rparen
-- On MEM reduce production x -> Lparen ColonColon Rparen
-- On LtBar reduce production x -> Lparen ColonColon Rparen
-- On Lsquare reduce production x -> Lparen ColonColon Rparen
-- On Lparen reduce production x -> Lparen ColonColon Rparen
-- On Let_ reduce production x -> Lparen ColonColon Rparen
-- On Lemma reduce production x -> Lparen ColonColon Rparen
-- On LeftArrow reduce production x -> Lparen ColonColon Rparen
-- On Lcurly reduce production x -> Lparen ColonColon Rparen
-- On Inst_default reduce production x -> Lparen ColonColon Rparen
-- On Inst reduce production x -> Lparen ColonColon Rparen
-- On Indreln reduce production x -> Lparen ColonColon Rparen
-- On Include_ reduce production x -> Lparen ColonColon Rparen
-- On In reduce production x -> Lparen ColonColon Rparen
-- On Import_ reduce production x -> Lparen ColonColon Rparen
-- On IN reduce production x -> Lparen ColonColon Rparen
-- On HexNum reduce production x -> Lparen ColonColon Rparen
-- On Hex reduce production x -> Lparen ColonColon Rparen
-- On HashZero reduce production x -> Lparen ColonColon Rparen
-- On HashOne reduce production x -> Lparen ColonColon Rparen
-- On GtEqX reduce production x -> Lparen ColonColon Rparen
-- On GtEq reduce production x -> Lparen ColonColon Rparen
-- On Function_ reduce production x -> Lparen ColonColon Rparen
-- On False reduce production x -> Lparen ColonColon Rparen
-- On EqualX reduce production x -> Lparen ColonColon Rparen
-- On EqGt reduce production x -> Lparen ColonColon Rparen
-- On EqEqGt reduce production x -> Lparen ColonColon Rparen
-- On Eq reduce production x -> Lparen ColonColon Rparen
-- On Eof reduce production x -> Lparen ColonColon Rparen
-- On End reduce production x -> Lparen ColonColon Rparen
-- On Else reduce production x -> Lparen ColonColon Rparen
-- On DotBrace reduce production x -> Lparen ColonColon Rparen
-- On Dot reduce production x -> Lparen ColonColon Rparen
-- On Do reduce production x -> Lparen ColonColon Rparen
-- On Declare reduce production x -> Lparen ColonColon Rparen
-- On Comma reduce production x -> Lparen ColonColon Rparen
-- On ColonColon reduce production x -> Lparen ColonColon Rparen
-- On Colon reduce production x -> Lparen ColonColon Rparen
-- On Class_ reduce production x -> Lparen ColonColon Rparen
-- On Char reduce production x -> Lparen ColonColon Rparen
-- On BraceBar reduce production x -> Lparen ColonColon Rparen
-- On BinNum reduce production x -> Lparen ColonColon Rparen
-- On Bin reduce production x -> Lparen ColonColon Rparen
-- On Begin_ reduce production x -> Lparen ColonColon Rparen
-- On BarGt reduce production x -> Lparen ColonColon Rparen
-- On BarBrace reduce production x -> Lparen ColonColon Rparen
-- On BarBar reduce production x -> Lparen ColonColon Rparen
-- On Bar reduce production x -> Lparen ColonColon Rparen
-- On BacktickString reduce production x -> Lparen ColonColon Rparen
-- On AtX reduce production x -> Lparen ColonColon Rparen
-- On At reduce production x -> Lparen ColonColon Rparen
-- On Assert reduce production x -> Lparen ColonColon Rparen
-- On As reduce production x -> Lparen ColonColon Rparen
-- On Arrow reduce production x -> Lparen ColonColon Rparen
-- On And reduce production x -> Lparen ColonColon Rparen
-- On AmpAmp reduce production x -> Lparen ColonColon Rparen

State 30:
## Known stack suffix:
## Lparen BarBar
## LR(1) items:
x -> Lparen BarBar . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## Lparen BarBar Rparen
## LR(1) items:
x -> Lparen BarBar Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen BarBar Rparen
-- On Witness reduce production x -> Lparen BarBar Rparen
-- On With reduce production x -> Lparen BarBar Rparen
-- On Val reduce production x -> Lparen BarBar Rparen
-- On Under reduce production x -> Lparen BarBar Rparen
-- On Tyvar reduce production x -> Lparen BarBar Rparen
-- On Type reduce production x -> Lparen BarBar Rparen
-- On True reduce production x -> Lparen BarBar Rparen
-- On Theorem reduce production x -> Lparen BarBar Rparen
-- On Then reduce production x -> Lparen BarBar Rparen
-- On String reduce production x -> Lparen BarBar Rparen
-- On StarstarX reduce production x -> Lparen BarBar Rparen
-- On StarX reduce production x -> Lparen BarBar Rparen
-- On Star reduce production x -> Lparen BarBar Rparen
-- On SemiSemi reduce production x -> Lparen BarBar Rparen
-- On Semi reduce production x -> Lparen BarBar Rparen
-- On Rsquare reduce production x -> Lparen BarBar Rparen
-- On Rparen reduce production x -> Lparen BarBar Rparen
-- On Rcurly reduce production x -> Lparen BarBar Rparen
-- On PlusX reduce production x -> Lparen BarBar Rparen
-- On Plus reduce production x -> Lparen BarBar Rparen
-- On Open_ reduce production x -> Lparen BarBar Rparen
-- On Of reduce production x -> Lparen BarBar Rparen
-- On OctNum reduce production x -> Lparen BarBar Rparen
-- On Nvar reduce production x -> Lparen BarBar Rparen
-- On Num reduce production x -> Lparen BarBar Rparen
-- On Module_ reduce production x -> Lparen BarBar Rparen
-- On MinusMinusGt reduce production x -> Lparen BarBar Rparen
-- On Match reduce production x -> Lparen BarBar Rparen
-- On MEM reduce production x -> Lparen BarBar Rparen
-- On LtBar reduce production x -> Lparen BarBar Rparen
-- On Lsquare reduce production x -> Lparen BarBar Rparen
-- On Lparen reduce production x -> Lparen BarBar Rparen
-- On Let_ reduce production x -> Lparen BarBar Rparen
-- On Lemma reduce production x -> Lparen BarBar Rparen
-- On LeftArrow reduce production x -> Lparen BarBar Rparen
-- On Lcurly reduce production x -> Lparen BarBar Rparen
-- On Inst_default reduce production x -> Lparen BarBar Rparen
-- On Inst reduce production x -> Lparen BarBar Rparen
-- On Indreln reduce production x -> Lparen BarBar Rparen
-- On Include_ reduce production x -> Lparen BarBar Rparen
-- On In reduce production x -> Lparen BarBar Rparen
-- On Import_ reduce production x -> Lparen BarBar Rparen
-- On IN reduce production x -> Lparen BarBar Rparen
-- On HexNum reduce production x -> Lparen BarBar Rparen
-- On Hex reduce production x -> Lparen BarBar Rparen
-- On HashZero reduce production x -> Lparen BarBar Rparen
-- On HashOne reduce production x -> Lparen BarBar Rparen
-- On GtEqX reduce production x -> Lparen BarBar Rparen
-- On GtEq reduce production x -> Lparen BarBar Rparen
-- On Function_ reduce production x -> Lparen BarBar Rparen
-- On False reduce production x -> Lparen BarBar Rparen
-- On EqualX reduce production x -> Lparen BarBar Rparen
-- On EqGt reduce production x -> Lparen BarBar Rparen
-- On EqEqGt reduce production x -> Lparen BarBar Rparen
-- On Eq reduce production x -> Lparen BarBar Rparen
-- On Eof reduce production x -> Lparen BarBar Rparen
-- On End reduce production x -> Lparen BarBar Rparen
-- On Else reduce production x -> Lparen BarBar Rparen
-- On DotBrace reduce production x -> Lparen BarBar Rparen
-- On Dot reduce production x -> Lparen BarBar Rparen
-- On Do reduce production x -> Lparen BarBar Rparen
-- On Declare reduce production x -> Lparen BarBar Rparen
-- On Comma reduce production x -> Lparen BarBar Rparen
-- On ColonColon reduce production x -> Lparen BarBar Rparen
-- On Colon reduce production x -> Lparen BarBar Rparen
-- On Class_ reduce production x -> Lparen BarBar Rparen
-- On Char reduce production x -> Lparen BarBar Rparen
-- On BraceBar reduce production x -> Lparen BarBar Rparen
-- On BinNum reduce production x -> Lparen BarBar Rparen
-- On Bin reduce production x -> Lparen BarBar Rparen
-- On Begin_ reduce production x -> Lparen BarBar Rparen
-- On BarGt reduce production x -> Lparen BarBar Rparen
-- On BarBrace reduce production x -> Lparen BarBar Rparen
-- On BarBar reduce production x -> Lparen BarBar Rparen
-- On Bar reduce production x -> Lparen BarBar Rparen
-- On BacktickString reduce production x -> Lparen BarBar Rparen
-- On AtX reduce production x -> Lparen BarBar Rparen
-- On At reduce production x -> Lparen BarBar Rparen
-- On Assert reduce production x -> Lparen BarBar Rparen
-- On As reduce production x -> Lparen BarBar Rparen
-- On Arrow reduce production x -> Lparen BarBar Rparen
-- On And reduce production x -> Lparen BarBar Rparen
-- On AmpAmp reduce production x -> Lparen BarBar Rparen

State 32:
## Known stack suffix:
## Lparen AtX
## LR(1) items:
x -> Lparen AtX . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## Lparen AtX Rparen
## LR(1) items:
x -> Lparen AtX Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen AtX Rparen
-- On Witness reduce production x -> Lparen AtX Rparen
-- On With reduce production x -> Lparen AtX Rparen
-- On Val reduce production x -> Lparen AtX Rparen
-- On Under reduce production x -> Lparen AtX Rparen
-- On Tyvar reduce production x -> Lparen AtX Rparen
-- On Type reduce production x -> Lparen AtX Rparen
-- On True reduce production x -> Lparen AtX Rparen
-- On Theorem reduce production x -> Lparen AtX Rparen
-- On Then reduce production x -> Lparen AtX Rparen
-- On String reduce production x -> Lparen AtX Rparen
-- On StarstarX reduce production x -> Lparen AtX Rparen
-- On StarX reduce production x -> Lparen AtX Rparen
-- On Star reduce production x -> Lparen AtX Rparen
-- On SemiSemi reduce production x -> Lparen AtX Rparen
-- On Semi reduce production x -> Lparen AtX Rparen
-- On Rsquare reduce production x -> Lparen AtX Rparen
-- On Rparen reduce production x -> Lparen AtX Rparen
-- On Rcurly reduce production x -> Lparen AtX Rparen
-- On PlusX reduce production x -> Lparen AtX Rparen
-- On Plus reduce production x -> Lparen AtX Rparen
-- On Open_ reduce production x -> Lparen AtX Rparen
-- On Of reduce production x -> Lparen AtX Rparen
-- On OctNum reduce production x -> Lparen AtX Rparen
-- On Nvar reduce production x -> Lparen AtX Rparen
-- On Num reduce production x -> Lparen AtX Rparen
-- On Module_ reduce production x -> Lparen AtX Rparen
-- On MinusMinusGt reduce production x -> Lparen AtX Rparen
-- On Match reduce production x -> Lparen AtX Rparen
-- On MEM reduce production x -> Lparen AtX Rparen
-- On LtBar reduce production x -> Lparen AtX Rparen
-- On Lsquare reduce production x -> Lparen AtX Rparen
-- On Lparen reduce production x -> Lparen AtX Rparen
-- On Let_ reduce production x -> Lparen AtX Rparen
-- On Lemma reduce production x -> Lparen AtX Rparen
-- On LeftArrow reduce production x -> Lparen AtX Rparen
-- On Lcurly reduce production x -> Lparen AtX Rparen
-- On Inst_default reduce production x -> Lparen AtX Rparen
-- On Inst reduce production x -> Lparen AtX Rparen
-- On Indreln reduce production x -> Lparen AtX Rparen
-- On Include_ reduce production x -> Lparen AtX Rparen
-- On In reduce production x -> Lparen AtX Rparen
-- On Import_ reduce production x -> Lparen AtX Rparen
-- On IN reduce production x -> Lparen AtX Rparen
-- On HexNum reduce production x -> Lparen AtX Rparen
-- On Hex reduce production x -> Lparen AtX Rparen
-- On HashZero reduce production x -> Lparen AtX Rparen
-- On HashOne reduce production x -> Lparen AtX Rparen
-- On GtEqX reduce production x -> Lparen AtX Rparen
-- On GtEq reduce production x -> Lparen AtX Rparen
-- On Function_ reduce production x -> Lparen AtX Rparen
-- On False reduce production x -> Lparen AtX Rparen
-- On EqualX reduce production x -> Lparen AtX Rparen
-- On EqGt reduce production x -> Lparen AtX Rparen
-- On EqEqGt reduce production x -> Lparen AtX Rparen
-- On Eq reduce production x -> Lparen AtX Rparen
-- On Eof reduce production x -> Lparen AtX Rparen
-- On End reduce production x -> Lparen AtX Rparen
-- On Else reduce production x -> Lparen AtX Rparen
-- On DotBrace reduce production x -> Lparen AtX Rparen
-- On Dot reduce production x -> Lparen AtX Rparen
-- On Do reduce production x -> Lparen AtX Rparen
-- On Declare reduce production x -> Lparen AtX Rparen
-- On Comma reduce production x -> Lparen AtX Rparen
-- On ColonColon reduce production x -> Lparen AtX Rparen
-- On Colon reduce production x -> Lparen AtX Rparen
-- On Class_ reduce production x -> Lparen AtX Rparen
-- On Char reduce production x -> Lparen AtX Rparen
-- On BraceBar reduce production x -> Lparen AtX Rparen
-- On BinNum reduce production x -> Lparen AtX Rparen
-- On Bin reduce production x -> Lparen AtX Rparen
-- On Begin_ reduce production x -> Lparen AtX Rparen
-- On BarGt reduce production x -> Lparen AtX Rparen
-- On BarBrace reduce production x -> Lparen AtX Rparen
-- On BarBar reduce production x -> Lparen AtX Rparen
-- On Bar reduce production x -> Lparen AtX Rparen
-- On BacktickString reduce production x -> Lparen AtX Rparen
-- On AtX reduce production x -> Lparen AtX Rparen
-- On At reduce production x -> Lparen AtX Rparen
-- On Assert reduce production x -> Lparen AtX Rparen
-- On As reduce production x -> Lparen AtX Rparen
-- On Arrow reduce production x -> Lparen AtX Rparen
-- On And reduce production x -> Lparen AtX Rparen
-- On AmpAmp reduce production x -> Lparen AtX Rparen

State 34:
## Known stack suffix:
## Lparen At
## LR(1) items:
x -> Lparen At . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## Lparen At Rparen
## LR(1) items:
x -> Lparen At Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen At Rparen
-- On Witness reduce production x -> Lparen At Rparen
-- On With reduce production x -> Lparen At Rparen
-- On Val reduce production x -> Lparen At Rparen
-- On Under reduce production x -> Lparen At Rparen
-- On Tyvar reduce production x -> Lparen At Rparen
-- On Type reduce production x -> Lparen At Rparen
-- On True reduce production x -> Lparen At Rparen
-- On Theorem reduce production x -> Lparen At Rparen
-- On Then reduce production x -> Lparen At Rparen
-- On String reduce production x -> Lparen At Rparen
-- On StarstarX reduce production x -> Lparen At Rparen
-- On StarX reduce production x -> Lparen At Rparen
-- On Star reduce production x -> Lparen At Rparen
-- On SemiSemi reduce production x -> Lparen At Rparen
-- On Semi reduce production x -> Lparen At Rparen
-- On Rsquare reduce production x -> Lparen At Rparen
-- On Rparen reduce production x -> Lparen At Rparen
-- On Rcurly reduce production x -> Lparen At Rparen
-- On PlusX reduce production x -> Lparen At Rparen
-- On Plus reduce production x -> Lparen At Rparen
-- On Open_ reduce production x -> Lparen At Rparen
-- On Of reduce production x -> Lparen At Rparen
-- On OctNum reduce production x -> Lparen At Rparen
-- On Nvar reduce production x -> Lparen At Rparen
-- On Num reduce production x -> Lparen At Rparen
-- On Module_ reduce production x -> Lparen At Rparen
-- On MinusMinusGt reduce production x -> Lparen At Rparen
-- On Match reduce production x -> Lparen At Rparen
-- On MEM reduce production x -> Lparen At Rparen
-- On LtBar reduce production x -> Lparen At Rparen
-- On Lsquare reduce production x -> Lparen At Rparen
-- On Lparen reduce production x -> Lparen At Rparen
-- On Let_ reduce production x -> Lparen At Rparen
-- On Lemma reduce production x -> Lparen At Rparen
-- On LeftArrow reduce production x -> Lparen At Rparen
-- On Lcurly reduce production x -> Lparen At Rparen
-- On Inst_default reduce production x -> Lparen At Rparen
-- On Inst reduce production x -> Lparen At Rparen
-- On Indreln reduce production x -> Lparen At Rparen
-- On Include_ reduce production x -> Lparen At Rparen
-- On In reduce production x -> Lparen At Rparen
-- On Import_ reduce production x -> Lparen At Rparen
-- On IN reduce production x -> Lparen At Rparen
-- On HexNum reduce production x -> Lparen At Rparen
-- On Hex reduce production x -> Lparen At Rparen
-- On HashZero reduce production x -> Lparen At Rparen
-- On HashOne reduce production x -> Lparen At Rparen
-- On GtEqX reduce production x -> Lparen At Rparen
-- On GtEq reduce production x -> Lparen At Rparen
-- On Function_ reduce production x -> Lparen At Rparen
-- On False reduce production x -> Lparen At Rparen
-- On EqualX reduce production x -> Lparen At Rparen
-- On EqGt reduce production x -> Lparen At Rparen
-- On EqEqGt reduce production x -> Lparen At Rparen
-- On Eq reduce production x -> Lparen At Rparen
-- On Eof reduce production x -> Lparen At Rparen
-- On End reduce production x -> Lparen At Rparen
-- On Else reduce production x -> Lparen At Rparen
-- On DotBrace reduce production x -> Lparen At Rparen
-- On Dot reduce production x -> Lparen At Rparen
-- On Do reduce production x -> Lparen At Rparen
-- On Declare reduce production x -> Lparen At Rparen
-- On Comma reduce production x -> Lparen At Rparen
-- On ColonColon reduce production x -> Lparen At Rparen
-- On Colon reduce production x -> Lparen At Rparen
-- On Class_ reduce production x -> Lparen At Rparen
-- On Char reduce production x -> Lparen At Rparen
-- On BraceBar reduce production x -> Lparen At Rparen
-- On BinNum reduce production x -> Lparen At Rparen
-- On Bin reduce production x -> Lparen At Rparen
-- On Begin_ reduce production x -> Lparen At Rparen
-- On BarGt reduce production x -> Lparen At Rparen
-- On BarBrace reduce production x -> Lparen At Rparen
-- On BarBar reduce production x -> Lparen At Rparen
-- On Bar reduce production x -> Lparen At Rparen
-- On BacktickString reduce production x -> Lparen At Rparen
-- On AtX reduce production x -> Lparen At Rparen
-- On At reduce production x -> Lparen At Rparen
-- On Assert reduce production x -> Lparen At Rparen
-- On As reduce production x -> Lparen At Rparen
-- On Arrow reduce production x -> Lparen At Rparen
-- On And reduce production x -> Lparen At Rparen
-- On AmpAmp reduce production x -> Lparen At Rparen

State 36:
## Known stack suffix:
## Lparen AmpAmp
## LR(1) items:
x -> Lparen AmpAmp . Rparen [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Rparen shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## Lparen AmpAmp Rparen
## LR(1) items:
x -> Lparen AmpAmp Rparen . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Of OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production x -> Lparen AmpAmp Rparen
-- On Witness reduce production x -> Lparen AmpAmp Rparen
-- On With reduce production x -> Lparen AmpAmp Rparen
-- On Val reduce production x -> Lparen AmpAmp Rparen
-- On Under reduce production x -> Lparen AmpAmp Rparen
-- On Tyvar reduce production x -> Lparen AmpAmp Rparen
-- On Type reduce production x -> Lparen AmpAmp Rparen
-- On True reduce production x -> Lparen AmpAmp Rparen
-- On Theorem reduce production x -> Lparen AmpAmp Rparen
-- On Then reduce production x -> Lparen AmpAmp Rparen
-- On String reduce production x -> Lparen AmpAmp Rparen
-- On StarstarX reduce production x -> Lparen AmpAmp Rparen
-- On StarX reduce production x -> Lparen AmpAmp Rparen
-- On Star reduce production x -> Lparen AmpAmp Rparen
-- On SemiSemi reduce production x -> Lparen AmpAmp Rparen
-- On Semi reduce production x -> Lparen AmpAmp Rparen
-- On Rsquare reduce production x -> Lparen AmpAmp Rparen
-- On Rparen reduce production x -> Lparen AmpAmp Rparen
-- On Rcurly reduce production x -> Lparen AmpAmp Rparen
-- On PlusX reduce production x -> Lparen AmpAmp Rparen
-- On Plus reduce production x -> Lparen AmpAmp Rparen
-- On Open_ reduce production x -> Lparen AmpAmp Rparen
-- On Of reduce production x -> Lparen AmpAmp Rparen
-- On OctNum reduce production x -> Lparen AmpAmp Rparen
-- On Nvar reduce production x -> Lparen AmpAmp Rparen
-- On Num reduce production x -> Lparen AmpAmp Rparen
-- On Module_ reduce production x -> Lparen AmpAmp Rparen
-- On MinusMinusGt reduce production x -> Lparen AmpAmp Rparen
-- On Match reduce production x -> Lparen AmpAmp Rparen
-- On MEM reduce production x -> Lparen AmpAmp Rparen
-- On LtBar reduce production x -> Lparen AmpAmp Rparen
-- On Lsquare reduce production x -> Lparen AmpAmp Rparen
-- On Lparen reduce production x -> Lparen AmpAmp Rparen
-- On Let_ reduce production x -> Lparen AmpAmp Rparen
-- On Lemma reduce production x -> Lparen AmpAmp Rparen
-- On LeftArrow reduce production x -> Lparen AmpAmp Rparen
-- On Lcurly reduce production x -> Lparen AmpAmp Rparen
-- On Inst_default reduce production x -> Lparen AmpAmp Rparen
-- On Inst reduce production x -> Lparen AmpAmp Rparen
-- On Indreln reduce production x -> Lparen AmpAmp Rparen
-- On Include_ reduce production x -> Lparen AmpAmp Rparen
-- On In reduce production x -> Lparen AmpAmp Rparen
-- On Import_ reduce production x -> Lparen AmpAmp Rparen
-- On IN reduce production x -> Lparen AmpAmp Rparen
-- On HexNum reduce production x -> Lparen AmpAmp Rparen
-- On Hex reduce production x -> Lparen AmpAmp Rparen
-- On HashZero reduce production x -> Lparen AmpAmp Rparen
-- On HashOne reduce production x -> Lparen AmpAmp Rparen
-- On GtEqX reduce production x -> Lparen AmpAmp Rparen
-- On GtEq reduce production x -> Lparen AmpAmp Rparen
-- On Function_ reduce production x -> Lparen AmpAmp Rparen
-- On False reduce production x -> Lparen AmpAmp Rparen
-- On EqualX reduce production x -> Lparen AmpAmp Rparen
-- On EqGt reduce production x -> Lparen AmpAmp Rparen
-- On EqEqGt reduce production x -> Lparen AmpAmp Rparen
-- On Eq reduce production x -> Lparen AmpAmp Rparen
-- On Eof reduce production x -> Lparen AmpAmp Rparen
-- On End reduce production x -> Lparen AmpAmp Rparen
-- On Else reduce production x -> Lparen AmpAmp Rparen
-- On DotBrace reduce production x -> Lparen AmpAmp Rparen
-- On Dot reduce production x -> Lparen AmpAmp Rparen
-- On Do reduce production x -> Lparen AmpAmp Rparen
-- On Declare reduce production x -> Lparen AmpAmp Rparen
-- On Comma reduce production x -> Lparen AmpAmp Rparen
-- On ColonColon reduce production x -> Lparen AmpAmp Rparen
-- On Colon reduce production x -> Lparen AmpAmp Rparen
-- On Class_ reduce production x -> Lparen AmpAmp Rparen
-- On Char reduce production x -> Lparen AmpAmp Rparen
-- On BraceBar reduce production x -> Lparen AmpAmp Rparen
-- On BinNum reduce production x -> Lparen AmpAmp Rparen
-- On Bin reduce production x -> Lparen AmpAmp Rparen
-- On Begin_ reduce production x -> Lparen AmpAmp Rparen
-- On BarGt reduce production x -> Lparen AmpAmp Rparen
-- On BarBrace reduce production x -> Lparen AmpAmp Rparen
-- On BarBar reduce production x -> Lparen AmpAmp Rparen
-- On Bar reduce production x -> Lparen AmpAmp Rparen
-- On BacktickString reduce production x -> Lparen AmpAmp Rparen
-- On AtX reduce production x -> Lparen AmpAmp Rparen
-- On At reduce production x -> Lparen AmpAmp Rparen
-- On Assert reduce production x -> Lparen AmpAmp Rparen
-- On As reduce production x -> Lparen AmpAmp Rparen
-- On Arrow reduce production x -> Lparen AmpAmp Rparen
-- On And reduce production x -> Lparen AmpAmp Rparen
-- On AmpAmp reduce production x -> Lparen AmpAmp Rparen

State 38:
## Known stack suffix:
## Val x
## LR(1) items:
val_spec -> Val x . Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_spec -> Val x . Lsquare BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 39
-- On Colon shift to state 118
## Reductions:

State 39:
## Known stack suffix:
## Val x Lsquare
## LR(1) items:
val_spec -> Val x Lsquare . BacktickString Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## Val x Lsquare BacktickString
## LR(1) items:
val_spec -> Val x Lsquare BacktickString . Rsquare Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rsquare shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare . Colon typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare Colon
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare Colon . typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 116
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 43:
## Known stack suffix:
## Under
## LR(1) items:
atomic_typ -> Under . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> Under
-- On Witness reduce production atomic_typ -> Under
-- On Val reduce production atomic_typ -> Under
-- On Under reduce production atomic_typ -> Under
-- On Tyvar reduce production atomic_typ -> Under
-- On Type reduce production atomic_typ -> Under
-- On Theorem reduce production atomic_typ -> Under
-- On Star reduce production atomic_typ -> Under
-- On SemiSemi reduce production atomic_typ -> Under
-- On Semi reduce production atomic_typ -> Under
-- On Rsquare reduce production atomic_typ -> Under
-- On Rparen reduce production atomic_typ -> Under
-- On Open_ reduce production atomic_typ -> Under
-- On Nvar reduce production atomic_typ -> Under
-- On Num reduce production atomic_typ -> Under
-- On Module_ reduce production atomic_typ -> Under
-- On Lparen reduce production atomic_typ -> Under
-- On Let_ reduce production atomic_typ -> Under
-- On Lemma reduce production atomic_typ -> Under
-- On Inst_default reduce production atomic_typ -> Under
-- On Inst reduce production atomic_typ -> Under
-- On Indreln reduce production atomic_typ -> Under
-- On Include_ reduce production atomic_typ -> Under
-- On Import_ reduce production atomic_typ -> Under
-- On EqGt reduce production atomic_typ -> Under
-- On Eq reduce production atomic_typ -> Under
-- On Eof reduce production atomic_typ -> Under
-- On End reduce production atomic_typ -> Under
-- On Declare reduce production atomic_typ -> Under
-- On Comma reduce production atomic_typ -> Under
-- On Class_ reduce production atomic_typ -> Under
-- On BarGt reduce production atomic_typ -> Under
-- On Bar reduce production atomic_typ -> Under
-- On BacktickString reduce production atomic_typ -> Under
-- On Assert reduce production atomic_typ -> Under
-- On Arrow reduce production atomic_typ -> Under
-- On And reduce production atomic_typ -> Under

State 44:
## Known stack suffix:
## Tyvar
## LR(1) items:
atomic_typ -> Tyvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> Tyvar
-- On Witness reduce production atomic_typ -> Tyvar
-- On Val reduce production atomic_typ -> Tyvar
-- On Under reduce production atomic_typ -> Tyvar
-- On Tyvar reduce production atomic_typ -> Tyvar
-- On Type reduce production atomic_typ -> Tyvar
-- On Theorem reduce production atomic_typ -> Tyvar
-- On Star reduce production atomic_typ -> Tyvar
-- On SemiSemi reduce production atomic_typ -> Tyvar
-- On Semi reduce production atomic_typ -> Tyvar
-- On Rsquare reduce production atomic_typ -> Tyvar
-- On Rparen reduce production atomic_typ -> Tyvar
-- On Open_ reduce production atomic_typ -> Tyvar
-- On Nvar reduce production atomic_typ -> Tyvar
-- On Num reduce production atomic_typ -> Tyvar
-- On Module_ reduce production atomic_typ -> Tyvar
-- On Lparen reduce production atomic_typ -> Tyvar
-- On Let_ reduce production atomic_typ -> Tyvar
-- On Lemma reduce production atomic_typ -> Tyvar
-- On Inst_default reduce production atomic_typ -> Tyvar
-- On Inst reduce production atomic_typ -> Tyvar
-- On Indreln reduce production atomic_typ -> Tyvar
-- On Include_ reduce production atomic_typ -> Tyvar
-- On Import_ reduce production atomic_typ -> Tyvar
-- On EqGt reduce production atomic_typ -> Tyvar
-- On Eq reduce production atomic_typ -> Tyvar
-- On Eof reduce production atomic_typ -> Tyvar
-- On End reduce production atomic_typ -> Tyvar
-- On Declare reduce production atomic_typ -> Tyvar
-- On Comma reduce production atomic_typ -> Tyvar
-- On Class_ reduce production atomic_typ -> Tyvar
-- On BarGt reduce production atomic_typ -> Tyvar
-- On Bar reduce production atomic_typ -> Tyvar
-- On BacktickString reduce production atomic_typ -> Tyvar
-- On Assert reduce production atomic_typ -> Tyvar
-- On Arrow reduce production atomic_typ -> Tyvar
-- On And reduce production atomic_typ -> Tyvar

State 45:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_typ -> Lparen . typ Rparen [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
x -> Lparen . Eq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . IN Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MEM Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MinusMinusGt Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AmpAmp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . BarBar Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . ColonColon Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Star Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Plus Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . PlusX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEqX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . EqualX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarstarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . At Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AtX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Of Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 45
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On BacktickString shift to state 46
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On typ shift to state 53
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 46:
## Known stack suffix:
## BacktickString
## LR(1) items:
app_typ -> BacktickString . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typ -> BacktickString . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 81
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness reduce production atomic_typ -> BacktickString
-- On Val reduce production atomic_typ -> BacktickString
-- On Type reduce production atomic_typ -> BacktickString
-- On Theorem reduce production atomic_typ -> BacktickString
-- On Star reduce production atomic_typ -> BacktickString
-- On SemiSemi reduce production atomic_typ -> BacktickString
-- On Semi reduce production atomic_typ -> BacktickString
-- On Rsquare reduce production atomic_typ -> BacktickString
-- On Rparen reduce production atomic_typ -> BacktickString
-- On Open_ reduce production atomic_typ -> BacktickString
-- On Module_ reduce production atomic_typ -> BacktickString
-- On Let_ reduce production atomic_typ -> BacktickString
-- On Lemma reduce production atomic_typ -> BacktickString
-- On Inst_default reduce production atomic_typ -> BacktickString
-- On Inst reduce production atomic_typ -> BacktickString
-- On Indreln reduce production atomic_typ -> BacktickString
-- On Include_ reduce production atomic_typ -> BacktickString
-- On Import_ reduce production atomic_typ -> BacktickString
-- On EqGt reduce production atomic_typ -> BacktickString
-- On Eq reduce production atomic_typ -> BacktickString
-- On Eof reduce production atomic_typ -> BacktickString
-- On End reduce production atomic_typ -> BacktickString
-- On Declare reduce production atomic_typ -> BacktickString
-- On Comma reduce production atomic_typ -> BacktickString
-- On Class_ reduce production atomic_typ -> BacktickString
-- On BarGt reduce production atomic_typ -> BacktickString
-- On Bar reduce production atomic_typ -> BacktickString
-- On Assert reduce production atomic_typ -> BacktickString
-- On Arrow reduce production atomic_typ -> BacktickString
-- On And reduce production atomic_typ -> BacktickString

State 47:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_nexp -> Nvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_nexp -> Nvar
-- On Witness reduce production atomic_nexp -> Nvar
-- On Val reduce production atomic_nexp -> Nvar
-- On Under reduce production atomic_nexp -> Nvar
-- On Tyvar reduce production atomic_nexp -> Nvar
-- On Type reduce production atomic_nexp -> Nvar
-- On Theorem reduce production atomic_nexp -> Nvar
-- On Star reduce production atomic_nexp -> Nvar
-- On SemiSemi reduce production atomic_nexp -> Nvar
-- On Semi reduce production atomic_nexp -> Nvar
-- On Rsquare reduce production atomic_nexp -> Nvar
-- On Rparen reduce production atomic_nexp -> Nvar
-- On Plus reduce production atomic_nexp -> Nvar
-- On Open_ reduce production atomic_nexp -> Nvar
-- On Nvar reduce production atomic_nexp -> Nvar
-- On Num reduce production atomic_nexp -> Nvar
-- On Module_ reduce production atomic_nexp -> Nvar
-- On Lparen reduce production atomic_nexp -> Nvar
-- On Let_ reduce production atomic_nexp -> Nvar
-- On Lemma reduce production atomic_nexp -> Nvar
-- On Inst_default reduce production atomic_nexp -> Nvar
-- On Inst reduce production atomic_nexp -> Nvar
-- On Indreln reduce production atomic_nexp -> Nvar
-- On Include_ reduce production atomic_nexp -> Nvar
-- On Import_ reduce production atomic_nexp -> Nvar
-- On GtEq reduce production atomic_nexp -> Nvar
-- On EqGt reduce production atomic_nexp -> Nvar
-- On Eq reduce production atomic_nexp -> Nvar
-- On Eof reduce production atomic_nexp -> Nvar
-- On End reduce production atomic_nexp -> Nvar
-- On Dot reduce production atomic_nexp -> Nvar
-- On Declare reduce production atomic_nexp -> Nvar
-- On Comma reduce production atomic_nexp -> Nvar
-- On Class_ reduce production atomic_nexp -> Nvar
-- On BarGt reduce production atomic_nexp -> Nvar
-- On Bar reduce production atomic_nexp -> Nvar
-- On BacktickString reduce production atomic_nexp -> Nvar
-- On Assert reduce production atomic_nexp -> Nvar
-- On Arrow reduce production atomic_nexp -> Nvar
-- On And reduce production atomic_nexp -> Nvar

State 48:
## Known stack suffix:
## Num
## LR(1) items:
atomic_nexp -> Num . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_nexp -> Num
-- On Witness reduce production atomic_nexp -> Num
-- On Val reduce production atomic_nexp -> Num
-- On Under reduce production atomic_nexp -> Num
-- On Tyvar reduce production atomic_nexp -> Num
-- On Type reduce production atomic_nexp -> Num
-- On Theorem reduce production atomic_nexp -> Num
-- On Star reduce production atomic_nexp -> Num
-- On SemiSemi reduce production atomic_nexp -> Num
-- On Semi reduce production atomic_nexp -> Num
-- On Rsquare reduce production atomic_nexp -> Num
-- On Rparen reduce production atomic_nexp -> Num
-- On Plus reduce production atomic_nexp -> Num
-- On Open_ reduce production atomic_nexp -> Num
-- On Nvar reduce production atomic_nexp -> Num
-- On Num reduce production atomic_nexp -> Num
-- On Module_ reduce production atomic_nexp -> Num
-- On Lparen reduce production atomic_nexp -> Num
-- On Let_ reduce production atomic_nexp -> Num
-- On Lemma reduce production atomic_nexp -> Num
-- On Inst_default reduce production atomic_nexp -> Num
-- On Inst reduce production atomic_nexp -> Num
-- On Indreln reduce production atomic_nexp -> Num
-- On Include_ reduce production atomic_nexp -> Num
-- On Import_ reduce production atomic_nexp -> Num
-- On GtEq reduce production atomic_nexp -> Num
-- On EqGt reduce production atomic_nexp -> Num
-- On Eq reduce production atomic_nexp -> Num
-- On Eof reduce production atomic_nexp -> Num
-- On End reduce production atomic_nexp -> Num
-- On Dot reduce production atomic_nexp -> Num
-- On Declare reduce production atomic_nexp -> Num
-- On Comma reduce production atomic_nexp -> Num
-- On Class_ reduce production atomic_nexp -> Num
-- On BarGt reduce production atomic_nexp -> Num
-- On Bar reduce production atomic_nexp -> Num
-- On BacktickString reduce production atomic_nexp -> Num
-- On Assert reduce production atomic_nexp -> Num
-- On Arrow reduce production atomic_nexp -> Num
-- On And reduce production atomic_nexp -> Num

State 49:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_nexp -> Lparen . nexp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
atomic_typ -> Lparen . typ Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Eq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . IN Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MEM Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . MinusMinusGt Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AmpAmp Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . BarBar Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . ColonColon Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Star Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . Plus Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEq Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . PlusX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . GtEqX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . EqualX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . StarstarX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . At Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
x -> Lparen . AtX Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 49
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On BacktickString shift to state 46
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On typ shift to state 53
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 75
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 50:
## Known stack suffix:
## x
## LR(1) items:
id_help -> x . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
id_help -> x . Dot id_help [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On Dot shift to state 51
## Reductions:
-- On X reduce production id_help -> x
-- On Witness reduce production id_help -> x
-- On With reduce production id_help -> x
-- On Val reduce production id_help -> x
-- On Under reduce production id_help -> x
-- On Tyvar reduce production id_help -> x
-- On Type reduce production id_help -> x
-- On True reduce production id_help -> x
-- On Theorem reduce production id_help -> x
-- On Then reduce production id_help -> x
-- On String reduce production id_help -> x
-- On StarstarX reduce production id_help -> x
-- On StarX reduce production id_help -> x
-- On Star reduce production id_help -> x
-- On SemiSemi reduce production id_help -> x
-- On Semi reduce production id_help -> x
-- On Rsquare reduce production id_help -> x
-- On Rparen reduce production id_help -> x
-- On Rcurly reduce production id_help -> x
-- On PlusX reduce production id_help -> x
-- On Plus reduce production id_help -> x
-- On Open_ reduce production id_help -> x
-- On OctNum reduce production id_help -> x
-- On Nvar reduce production id_help -> x
-- On Num reduce production id_help -> x
-- On Module_ reduce production id_help -> x
-- On MinusMinusGt reduce production id_help -> x
-- On Match reduce production id_help -> x
-- On MEM reduce production id_help -> x
-- On LtBar reduce production id_help -> x
-- On Lsquare reduce production id_help -> x
-- On Lparen reduce production id_help -> x
-- On Let_ reduce production id_help -> x
-- On Lemma reduce production id_help -> x
-- On LeftArrow reduce production id_help -> x
-- On Lcurly reduce production id_help -> x
-- On Inst_default reduce production id_help -> x
-- On Inst reduce production id_help -> x
-- On Indreln reduce production id_help -> x
-- On Include_ reduce production id_help -> x
-- On In reduce production id_help -> x
-- On Import_ reduce production id_help -> x
-- On IN reduce production id_help -> x
-- On HexNum reduce production id_help -> x
-- On Hex reduce production id_help -> x
-- On HashZero reduce production id_help -> x
-- On HashOne reduce production id_help -> x
-- On GtEqX reduce production id_help -> x
-- On GtEq reduce production id_help -> x
-- On Function_ reduce production id_help -> x
-- On False reduce production id_help -> x
-- On EqualX reduce production id_help -> x
-- On EqGt reduce production id_help -> x
-- On EqEqGt reduce production id_help -> x
-- On Eq reduce production id_help -> x
-- On Eof reduce production id_help -> x
-- On End reduce production id_help -> x
-- On Else reduce production id_help -> x
-- On DotBrace reduce production id_help -> x
-- On Do reduce production id_help -> x
-- On Declare reduce production id_help -> x
-- On Comma reduce production id_help -> x
-- On ColonColon reduce production id_help -> x
-- On Colon reduce production id_help -> x
-- On Class_ reduce production id_help -> x
-- On Char reduce production id_help -> x
-- On BraceBar reduce production id_help -> x
-- On BinNum reduce production id_help -> x
-- On Bin reduce production id_help -> x
-- On Begin_ reduce production id_help -> x
-- On BarGt reduce production id_help -> x
-- On BarBrace reduce production id_help -> x
-- On BarBar reduce production id_help -> x
-- On Bar reduce production id_help -> x
-- On BacktickString reduce production id_help -> x
-- On AtX reduce production id_help -> x
-- On At reduce production id_help -> x
-- On Assert reduce production id_help -> x
-- On As reduce production id_help -> x
-- On Arrow reduce production id_help -> x
-- On And reduce production id_help -> x
-- On AmpAmp reduce production id_help -> x

State 51:
## Known stack suffix:
## x Dot
## LR(1) items:
id_help -> x Dot . id_help [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## x Dot id_help
## LR(1) items:
id_help -> x Dot id_help . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production id_help -> x Dot id_help
-- On Witness reduce production id_help -> x Dot id_help
-- On With reduce production id_help -> x Dot id_help
-- On Val reduce production id_help -> x Dot id_help
-- On Under reduce production id_help -> x Dot id_help
-- On Tyvar reduce production id_help -> x Dot id_help
-- On Type reduce production id_help -> x Dot id_help
-- On True reduce production id_help -> x Dot id_help
-- On Theorem reduce production id_help -> x Dot id_help
-- On Then reduce production id_help -> x Dot id_help
-- On String reduce production id_help -> x Dot id_help
-- On StarstarX reduce production id_help -> x Dot id_help
-- On StarX reduce production id_help -> x Dot id_help
-- On Star reduce production id_help -> x Dot id_help
-- On SemiSemi reduce production id_help -> x Dot id_help
-- On Semi reduce production id_help -> x Dot id_help
-- On Rsquare reduce production id_help -> x Dot id_help
-- On Rparen reduce production id_help -> x Dot id_help
-- On Rcurly reduce production id_help -> x Dot id_help
-- On PlusX reduce production id_help -> x Dot id_help
-- On Plus reduce production id_help -> x Dot id_help
-- On Open_ reduce production id_help -> x Dot id_help
-- On OctNum reduce production id_help -> x Dot id_help
-- On Nvar reduce production id_help -> x Dot id_help
-- On Num reduce production id_help -> x Dot id_help
-- On Module_ reduce production id_help -> x Dot id_help
-- On MinusMinusGt reduce production id_help -> x Dot id_help
-- On Match reduce production id_help -> x Dot id_help
-- On MEM reduce production id_help -> x Dot id_help
-- On LtBar reduce production id_help -> x Dot id_help
-- On Lsquare reduce production id_help -> x Dot id_help
-- On Lparen reduce production id_help -> x Dot id_help
-- On Let_ reduce production id_help -> x Dot id_help
-- On Lemma reduce production id_help -> x Dot id_help
-- On LeftArrow reduce production id_help -> x Dot id_help
-- On Lcurly reduce production id_help -> x Dot id_help
-- On Inst_default reduce production id_help -> x Dot id_help
-- On Inst reduce production id_help -> x Dot id_help
-- On Indreln reduce production id_help -> x Dot id_help
-- On Include_ reduce production id_help -> x Dot id_help
-- On In reduce production id_help -> x Dot id_help
-- On Import_ reduce production id_help -> x Dot id_help
-- On IN reduce production id_help -> x Dot id_help
-- On HexNum reduce production id_help -> x Dot id_help
-- On Hex reduce production id_help -> x Dot id_help
-- On HashZero reduce production id_help -> x Dot id_help
-- On HashOne reduce production id_help -> x Dot id_help
-- On GtEqX reduce production id_help -> x Dot id_help
-- On GtEq reduce production id_help -> x Dot id_help
-- On Function_ reduce production id_help -> x Dot id_help
-- On False reduce production id_help -> x Dot id_help
-- On EqualX reduce production id_help -> x Dot id_help
-- On EqGt reduce production id_help -> x Dot id_help
-- On EqEqGt reduce production id_help -> x Dot id_help
-- On Eq reduce production id_help -> x Dot id_help
-- On Eof reduce production id_help -> x Dot id_help
-- On End reduce production id_help -> x Dot id_help
-- On Else reduce production id_help -> x Dot id_help
-- On DotBrace reduce production id_help -> x Dot id_help
-- On Do reduce production id_help -> x Dot id_help
-- On Declare reduce production id_help -> x Dot id_help
-- On Comma reduce production id_help -> x Dot id_help
-- On ColonColon reduce production id_help -> x Dot id_help
-- On Colon reduce production id_help -> x Dot id_help
-- On Class_ reduce production id_help -> x Dot id_help
-- On Char reduce production id_help -> x Dot id_help
-- On BraceBar reduce production id_help -> x Dot id_help
-- On BinNum reduce production id_help -> x Dot id_help
-- On Bin reduce production id_help -> x Dot id_help
-- On Begin_ reduce production id_help -> x Dot id_help
-- On BarGt reduce production id_help -> x Dot id_help
-- On BarBrace reduce production id_help -> x Dot id_help
-- On BarBar reduce production id_help -> x Dot id_help
-- On Bar reduce production id_help -> x Dot id_help
-- On BacktickString reduce production id_help -> x Dot id_help
-- On AtX reduce production id_help -> x Dot id_help
-- On At reduce production id_help -> x Dot id_help
-- On Assert reduce production id_help -> x Dot id_help
-- On As reduce production id_help -> x Dot id_help
-- On Arrow reduce production id_help -> x Dot id_help
-- On And reduce production id_help -> x Dot id_help
-- On AmpAmp reduce production id_help -> x Dot id_help

State 53:
## Known stack suffix:
## Lparen typ
## LR(1) items:
atomic_typ -> Lparen typ . Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On Rparen shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## Lparen typ Rparen
## LR(1) items:
atomic_typ -> Lparen typ Rparen . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> Lparen typ Rparen
-- On Witness reduce production atomic_typ -> Lparen typ Rparen
-- On Val reduce production atomic_typ -> Lparen typ Rparen
-- On Under reduce production atomic_typ -> Lparen typ Rparen
-- On Tyvar reduce production atomic_typ -> Lparen typ Rparen
-- On Type reduce production atomic_typ -> Lparen typ Rparen
-- On Theorem reduce production atomic_typ -> Lparen typ Rparen
-- On Star reduce production atomic_typ -> Lparen typ Rparen
-- On SemiSemi reduce production atomic_typ -> Lparen typ Rparen
-- On Semi reduce production atomic_typ -> Lparen typ Rparen
-- On Rsquare reduce production atomic_typ -> Lparen typ Rparen
-- On Rparen reduce production atomic_typ -> Lparen typ Rparen
-- On Open_ reduce production atomic_typ -> Lparen typ Rparen
-- On Nvar reduce production atomic_typ -> Lparen typ Rparen
-- On Num reduce production atomic_typ -> Lparen typ Rparen
-- On Module_ reduce production atomic_typ -> Lparen typ Rparen
-- On Lparen reduce production atomic_typ -> Lparen typ Rparen
-- On Let_ reduce production atomic_typ -> Lparen typ Rparen
-- On Lemma reduce production atomic_typ -> Lparen typ Rparen
-- On Inst_default reduce production atomic_typ -> Lparen typ Rparen
-- On Inst reduce production atomic_typ -> Lparen typ Rparen
-- On Indreln reduce production atomic_typ -> Lparen typ Rparen
-- On Include_ reduce production atomic_typ -> Lparen typ Rparen
-- On Import_ reduce production atomic_typ -> Lparen typ Rparen
-- On EqGt reduce production atomic_typ -> Lparen typ Rparen
-- On Eq reduce production atomic_typ -> Lparen typ Rparen
-- On Eof reduce production atomic_typ -> Lparen typ Rparen
-- On End reduce production atomic_typ -> Lparen typ Rparen
-- On Declare reduce production atomic_typ -> Lparen typ Rparen
-- On Comma reduce production atomic_typ -> Lparen typ Rparen
-- On Class_ reduce production atomic_typ -> Lparen typ Rparen
-- On BarGt reduce production atomic_typ -> Lparen typ Rparen
-- On Bar reduce production atomic_typ -> Lparen typ Rparen
-- On BacktickString reduce production atomic_typ -> Lparen typ Rparen
-- On Assert reduce production atomic_typ -> Lparen typ Rparen
-- On Arrow reduce production atomic_typ -> Lparen typ Rparen
-- On And reduce production atomic_typ -> Lparen typ Rparen

State 55:
## Known stack suffix:
## star_typ_list
## LR(1) items:
star_typ -> star_typ_list . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production star_typ -> star_typ_list
-- On Val reduce production star_typ -> star_typ_list
-- On Type reduce production star_typ -> star_typ_list
-- On Theorem reduce production star_typ -> star_typ_list
-- On SemiSemi reduce production star_typ -> star_typ_list
-- On Semi reduce production star_typ -> star_typ_list
-- On Rsquare reduce production star_typ -> star_typ_list
-- On Rparen reduce production star_typ -> star_typ_list
-- On Open_ reduce production star_typ -> star_typ_list
-- On Module_ reduce production star_typ -> star_typ_list
-- On Let_ reduce production star_typ -> star_typ_list
-- On Lemma reduce production star_typ -> star_typ_list
-- On Inst_default reduce production star_typ -> star_typ_list
-- On Inst reduce production star_typ -> star_typ_list
-- On Indreln reduce production star_typ -> star_typ_list
-- On Include_ reduce production star_typ -> star_typ_list
-- On Import_ reduce production star_typ -> star_typ_list
-- On EqGt reduce production star_typ -> star_typ_list
-- On Eq reduce production star_typ -> star_typ_list
-- On Eof reduce production star_typ -> star_typ_list
-- On End reduce production star_typ -> star_typ_list
-- On Declare reduce production star_typ -> star_typ_list
-- On Comma reduce production star_typ -> star_typ_list
-- On Class_ reduce production star_typ -> star_typ_list
-- On BarGt reduce production star_typ -> star_typ_list
-- On Assert reduce production star_typ -> star_typ_list
-- On Arrow reduce production star_typ -> star_typ_list
-- On And reduce production star_typ -> star_typ_list

State 56:
## Known stack suffix:
## star_typ
## LR(1) items:
typ -> star_typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
typ -> star_typ . Arrow typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
-- On Arrow shift to state 57
## Reductions:
-- On Witness reduce production typ -> star_typ
-- On Val reduce production typ -> star_typ
-- On Type reduce production typ -> star_typ
-- On Theorem reduce production typ -> star_typ
-- On SemiSemi reduce production typ -> star_typ
-- On Semi reduce production typ -> star_typ
-- On Rsquare reduce production typ -> star_typ
-- On Rparen reduce production typ -> star_typ
-- On Open_ reduce production typ -> star_typ
-- On Module_ reduce production typ -> star_typ
-- On Let_ reduce production typ -> star_typ
-- On Lemma reduce production typ -> star_typ
-- On Inst_default reduce production typ -> star_typ
-- On Inst reduce production typ -> star_typ
-- On Indreln reduce production typ -> star_typ
-- On Include_ reduce production typ -> star_typ
-- On Import_ reduce production typ -> star_typ
-- On EqGt reduce production typ -> star_typ
-- On Eq reduce production typ -> star_typ
-- On Eof reduce production typ -> star_typ
-- On End reduce production typ -> star_typ
-- On Declare reduce production typ -> star_typ
-- On Comma reduce production typ -> star_typ
-- On Class_ reduce production typ -> star_typ
-- On BarGt reduce production typ -> star_typ
-- On Assert reduce production typ -> star_typ
-- On And reduce production typ -> star_typ

State 57:
## Known stack suffix:
## star_typ Arrow
## LR(1) items:
typ -> star_typ Arrow . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 58
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 58:
## Known stack suffix:
## star_typ Arrow typ
## LR(1) items:
typ -> star_typ Arrow typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Assert And ]
## Transitions:
## Reductions:
-- On Witness reduce production typ -> star_typ Arrow typ
-- On Val reduce production typ -> star_typ Arrow typ
-- On Type reduce production typ -> star_typ Arrow typ
-- On Theorem reduce production typ -> star_typ Arrow typ
-- On SemiSemi reduce production typ -> star_typ Arrow typ
-- On Semi reduce production typ -> star_typ Arrow typ
-- On Rsquare reduce production typ -> star_typ Arrow typ
-- On Rparen reduce production typ -> star_typ Arrow typ
-- On Open_ reduce production typ -> star_typ Arrow typ
-- On Module_ reduce production typ -> star_typ Arrow typ
-- On Let_ reduce production typ -> star_typ Arrow typ
-- On Lemma reduce production typ -> star_typ Arrow typ
-- On Inst_default reduce production typ -> star_typ Arrow typ
-- On Inst reduce production typ -> star_typ Arrow typ
-- On Indreln reduce production typ -> star_typ Arrow typ
-- On Include_ reduce production typ -> star_typ Arrow typ
-- On Import_ reduce production typ -> star_typ Arrow typ
-- On EqGt reduce production typ -> star_typ Arrow typ
-- On Eq reduce production typ -> star_typ Arrow typ
-- On Eof reduce production typ -> star_typ Arrow typ
-- On End reduce production typ -> star_typ Arrow typ
-- On Declare reduce production typ -> star_typ Arrow typ
-- On Comma reduce production typ -> star_typ Arrow typ
-- On Class_ reduce production typ -> star_typ Arrow typ
-- On BarGt reduce production typ -> star_typ Arrow typ
-- On Assert reduce production typ -> star_typ Arrow typ
-- On And reduce production typ -> star_typ Arrow typ

State 59:
## Known stack suffix:
## id_help
## LR(1) items:
id -> id_help . [ X Witness With Val Under Tyvar Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqGt EqEqGt Eq Eof End Else DotBrace Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production id -> id_help
-- On Witness reduce production id -> id_help
-- On With reduce production id -> id_help
-- On Val reduce production id -> id_help
-- On Under reduce production id -> id_help
-- On Tyvar reduce production id -> id_help
-- On Type reduce production id -> id_help
-- On True reduce production id -> id_help
-- On Theorem reduce production id -> id_help
-- On Then reduce production id -> id_help
-- On String reduce production id -> id_help
-- On StarstarX reduce production id -> id_help
-- On StarX reduce production id -> id_help
-- On Star reduce production id -> id_help
-- On SemiSemi reduce production id -> id_help
-- On Semi reduce production id -> id_help
-- On Rsquare reduce production id -> id_help
-- On Rparen reduce production id -> id_help
-- On Rcurly reduce production id -> id_help
-- On PlusX reduce production id -> id_help
-- On Plus reduce production id -> id_help
-- On Open_ reduce production id -> id_help
-- On OctNum reduce production id -> id_help
-- On Nvar reduce production id -> id_help
-- On Num reduce production id -> id_help
-- On Module_ reduce production id -> id_help
-- On MinusMinusGt reduce production id -> id_help
-- On Match reduce production id -> id_help
-- On MEM reduce production id -> id_help
-- On LtBar reduce production id -> id_help
-- On Lsquare reduce production id -> id_help
-- On Lparen reduce production id -> id_help
-- On Let_ reduce production id -> id_help
-- On Lemma reduce production id -> id_help
-- On LeftArrow reduce production id -> id_help
-- On Lcurly reduce production id -> id_help
-- On Inst_default reduce production id -> id_help
-- On Inst reduce production id -> id_help
-- On Indreln reduce production id -> id_help
-- On Include_ reduce production id -> id_help
-- On In reduce production id -> id_help
-- On Import_ reduce production id -> id_help
-- On IN reduce production id -> id_help
-- On HexNum reduce production id -> id_help
-- On Hex reduce production id -> id_help
-- On HashZero reduce production id -> id_help
-- On HashOne reduce production id -> id_help
-- On GtEqX reduce production id -> id_help
-- On GtEq reduce production id -> id_help
-- On Function_ reduce production id -> id_help
-- On False reduce production id -> id_help
-- On EqualX reduce production id -> id_help
-- On EqGt reduce production id -> id_help
-- On EqEqGt reduce production id -> id_help
-- On Eq reduce production id -> id_help
-- On Eof reduce production id -> id_help
-- On End reduce production id -> id_help
-- On Else reduce production id -> id_help
-- On DotBrace reduce production id -> id_help
-- On Do reduce production id -> id_help
-- On Declare reduce production id -> id_help
-- On Comma reduce production id -> id_help
-- On ColonColon reduce production id -> id_help
-- On Colon reduce production id -> id_help
-- On Class_ reduce production id -> id_help
-- On Char reduce production id -> id_help
-- On BraceBar reduce production id -> id_help
-- On BinNum reduce production id -> id_help
-- On Bin reduce production id -> id_help
-- On Begin_ reduce production id -> id_help
-- On BarGt reduce production id -> id_help
-- On BarBrace reduce production id -> id_help
-- On BarBar reduce production id -> id_help
-- On Bar reduce production id -> id_help
-- On BacktickString reduce production id -> id_help
-- On AtX reduce production id -> id_help
-- On At reduce production id -> id_help
-- On Assert reduce production id -> id_help
-- On As reduce production id -> id_help
-- On Arrow reduce production id -> id_help
-- On And reduce production id -> id_help
-- On AmpAmp reduce production id -> id_help

State 60:
## Known stack suffix:
## id
## LR(1) items:
app_typ -> id . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typ -> id . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 63
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness reduce production atomic_typ -> id
-- On Val reduce production atomic_typ -> id
-- On Type reduce production atomic_typ -> id
-- On Theorem reduce production atomic_typ -> id
-- On Star reduce production atomic_typ -> id
-- On SemiSemi reduce production atomic_typ -> id
-- On Semi reduce production atomic_typ -> id
-- On Rsquare reduce production atomic_typ -> id
-- On Rparen reduce production atomic_typ -> id
-- On Open_ reduce production atomic_typ -> id
-- On Module_ reduce production atomic_typ -> id
-- On Let_ reduce production atomic_typ -> id
-- On Lemma reduce production atomic_typ -> id
-- On Inst_default reduce production atomic_typ -> id
-- On Inst reduce production atomic_typ -> id
-- On Indreln reduce production atomic_typ -> id
-- On Include_ reduce production atomic_typ -> id
-- On Import_ reduce production atomic_typ -> id
-- On EqGt reduce production atomic_typ -> id
-- On Eq reduce production atomic_typ -> id
-- On Eof reduce production atomic_typ -> id
-- On End reduce production atomic_typ -> id
-- On Declare reduce production atomic_typ -> id
-- On Comma reduce production atomic_typ -> id
-- On Class_ reduce production atomic_typ -> id
-- On BarGt reduce production atomic_typ -> id
-- On Bar reduce production atomic_typ -> id
-- On Assert reduce production atomic_typ -> id
-- On Arrow reduce production atomic_typ -> id
-- On And reduce production atomic_typ -> id

State 61:
## Known stack suffix:
## BacktickString
## LR(1) items:
atomic_typ -> BacktickString . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> BacktickString
-- On Witness reduce production atomic_typ -> BacktickString
-- On Val reduce production atomic_typ -> BacktickString
-- On Under reduce production atomic_typ -> BacktickString
-- On Tyvar reduce production atomic_typ -> BacktickString
-- On Type reduce production atomic_typ -> BacktickString
-- On Theorem reduce production atomic_typ -> BacktickString
-- On Star reduce production atomic_typ -> BacktickString
-- On SemiSemi reduce production atomic_typ -> BacktickString
-- On Semi reduce production atomic_typ -> BacktickString
-- On Rsquare reduce production atomic_typ -> BacktickString
-- On Rparen reduce production atomic_typ -> BacktickString
-- On Open_ reduce production atomic_typ -> BacktickString
-- On Nvar reduce production atomic_typ -> BacktickString
-- On Num reduce production atomic_typ -> BacktickString
-- On Module_ reduce production atomic_typ -> BacktickString
-- On Lparen reduce production atomic_typ -> BacktickString
-- On Let_ reduce production atomic_typ -> BacktickString
-- On Lemma reduce production atomic_typ -> BacktickString
-- On Inst_default reduce production atomic_typ -> BacktickString
-- On Inst reduce production atomic_typ -> BacktickString
-- On Indreln reduce production atomic_typ -> BacktickString
-- On Include_ reduce production atomic_typ -> BacktickString
-- On Import_ reduce production atomic_typ -> BacktickString
-- On EqGt reduce production atomic_typ -> BacktickString
-- On Eq reduce production atomic_typ -> BacktickString
-- On Eof reduce production atomic_typ -> BacktickString
-- On End reduce production atomic_typ -> BacktickString
-- On Declare reduce production atomic_typ -> BacktickString
-- On Comma reduce production atomic_typ -> BacktickString
-- On Class_ reduce production atomic_typ -> BacktickString
-- On BarGt reduce production atomic_typ -> BacktickString
-- On Bar reduce production atomic_typ -> BacktickString
-- On BacktickString reduce production atomic_typ -> BacktickString
-- On Assert reduce production atomic_typ -> BacktickString
-- On Arrow reduce production atomic_typ -> BacktickString
-- On And reduce production atomic_typ -> BacktickString

State 62:
## Known stack suffix:
## id
## LR(1) items:
atomic_typ -> id . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> id
-- On Witness reduce production atomic_typ -> id
-- On Val reduce production atomic_typ -> id
-- On Under reduce production atomic_typ -> id
-- On Tyvar reduce production atomic_typ -> id
-- On Type reduce production atomic_typ -> id
-- On Theorem reduce production atomic_typ -> id
-- On Star reduce production atomic_typ -> id
-- On SemiSemi reduce production atomic_typ -> id
-- On Semi reduce production atomic_typ -> id
-- On Rsquare reduce production atomic_typ -> id
-- On Rparen reduce production atomic_typ -> id
-- On Open_ reduce production atomic_typ -> id
-- On Nvar reduce production atomic_typ -> id
-- On Num reduce production atomic_typ -> id
-- On Module_ reduce production atomic_typ -> id
-- On Lparen reduce production atomic_typ -> id
-- On Let_ reduce production atomic_typ -> id
-- On Lemma reduce production atomic_typ -> id
-- On Inst_default reduce production atomic_typ -> id
-- On Inst reduce production atomic_typ -> id
-- On Indreln reduce production atomic_typ -> id
-- On Include_ reduce production atomic_typ -> id
-- On Import_ reduce production atomic_typ -> id
-- On EqGt reduce production atomic_typ -> id
-- On Eq reduce production atomic_typ -> id
-- On Eof reduce production atomic_typ -> id
-- On End reduce production atomic_typ -> id
-- On Declare reduce production atomic_typ -> id
-- On Comma reduce production atomic_typ -> id
-- On Class_ reduce production atomic_typ -> id
-- On BarGt reduce production atomic_typ -> id
-- On Bar reduce production atomic_typ -> id
-- On BacktickString reduce production atomic_typ -> id
-- On Assert reduce production atomic_typ -> id
-- On Arrow reduce production atomic_typ -> id
-- On And reduce production atomic_typ -> id

State 63:
## Known stack suffix:
## id atomic_typs
## LR(1) items:
app_typ -> id atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production app_typ -> id atomic_typs
-- On Val reduce production app_typ -> id atomic_typs
-- On Type reduce production app_typ -> id atomic_typs
-- On Theorem reduce production app_typ -> id atomic_typs
-- On Star reduce production app_typ -> id atomic_typs
-- On SemiSemi reduce production app_typ -> id atomic_typs
-- On Semi reduce production app_typ -> id atomic_typs
-- On Rsquare reduce production app_typ -> id atomic_typs
-- On Rparen reduce production app_typ -> id atomic_typs
-- On Open_ reduce production app_typ -> id atomic_typs
-- On Module_ reduce production app_typ -> id atomic_typs
-- On Let_ reduce production app_typ -> id atomic_typs
-- On Lemma reduce production app_typ -> id atomic_typs
-- On Inst_default reduce production app_typ -> id atomic_typs
-- On Inst reduce production app_typ -> id atomic_typs
-- On Indreln reduce production app_typ -> id atomic_typs
-- On Include_ reduce production app_typ -> id atomic_typs
-- On Import_ reduce production app_typ -> id atomic_typs
-- On EqGt reduce production app_typ -> id atomic_typs
-- On Eq reduce production app_typ -> id atomic_typs
-- On Eof reduce production app_typ -> id atomic_typs
-- On End reduce production app_typ -> id atomic_typs
-- On Declare reduce production app_typ -> id atomic_typs
-- On Comma reduce production app_typ -> id atomic_typs
-- On Class_ reduce production app_typ -> id atomic_typs
-- On BarGt reduce production app_typ -> id atomic_typs
-- On Bar reduce production app_typ -> id atomic_typs
-- On Assert reduce production app_typ -> id atomic_typs
-- On Arrow reduce production app_typ -> id atomic_typs
-- On And reduce production app_typ -> id atomic_typs

State 64:
## Known stack suffix:
## atomic_typ
## LR(1) items:
appt_typ -> atomic_typ . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production appt_typ -> atomic_typ
-- On Witness reduce production appt_typ -> atomic_typ
-- On Val reduce production appt_typ -> atomic_typ
-- On Under reduce production appt_typ -> atomic_typ
-- On Tyvar reduce production appt_typ -> atomic_typ
-- On Type reduce production appt_typ -> atomic_typ
-- On Theorem reduce production appt_typ -> atomic_typ
-- On Star reduce production appt_typ -> atomic_typ
-- On SemiSemi reduce production appt_typ -> atomic_typ
-- On Semi reduce production appt_typ -> atomic_typ
-- On Rsquare reduce production appt_typ -> atomic_typ
-- On Rparen reduce production appt_typ -> atomic_typ
-- On Open_ reduce production appt_typ -> atomic_typ
-- On Nvar reduce production appt_typ -> atomic_typ
-- On Num reduce production appt_typ -> atomic_typ
-- On Module_ reduce production appt_typ -> atomic_typ
-- On Lparen reduce production appt_typ -> atomic_typ
-- On Let_ reduce production appt_typ -> atomic_typ
-- On Lemma reduce production appt_typ -> atomic_typ
-- On Inst_default reduce production appt_typ -> atomic_typ
-- On Inst reduce production appt_typ -> atomic_typ
-- On Indreln reduce production appt_typ -> atomic_typ
-- On Include_ reduce production appt_typ -> atomic_typ
-- On Import_ reduce production appt_typ -> atomic_typ
-- On EqGt reduce production appt_typ -> atomic_typ
-- On Eq reduce production appt_typ -> atomic_typ
-- On Eof reduce production appt_typ -> atomic_typ
-- On End reduce production appt_typ -> atomic_typ
-- On Declare reduce production appt_typ -> atomic_typ
-- On Comma reduce production appt_typ -> atomic_typ
-- On Class_ reduce production appt_typ -> atomic_typ
-- On BarGt reduce production appt_typ -> atomic_typ
-- On Bar reduce production appt_typ -> atomic_typ
-- On BacktickString reduce production appt_typ -> atomic_typ
-- On Assert reduce production appt_typ -> atomic_typ
-- On Arrow reduce production appt_typ -> atomic_typ
-- On And reduce production appt_typ -> atomic_typ

State 65:
## Known stack suffix:
## atomic_nexp
## LR(1) items:
appt_typ -> atomic_nexp . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production appt_typ -> atomic_nexp
-- On Witness reduce production appt_typ -> atomic_nexp
-- On Val reduce production appt_typ -> atomic_nexp
-- On Under reduce production appt_typ -> atomic_nexp
-- On Tyvar reduce production appt_typ -> atomic_nexp
-- On Type reduce production appt_typ -> atomic_nexp
-- On Theorem reduce production appt_typ -> atomic_nexp
-- On Star reduce production appt_typ -> atomic_nexp
-- On SemiSemi reduce production appt_typ -> atomic_nexp
-- On Semi reduce production appt_typ -> atomic_nexp
-- On Rsquare reduce production appt_typ -> atomic_nexp
-- On Rparen reduce production appt_typ -> atomic_nexp
-- On Open_ reduce production appt_typ -> atomic_nexp
-- On Nvar reduce production appt_typ -> atomic_nexp
-- On Num reduce production appt_typ -> atomic_nexp
-- On Module_ reduce production appt_typ -> atomic_nexp
-- On Lparen reduce production appt_typ -> atomic_nexp
-- On Let_ reduce production appt_typ -> atomic_nexp
-- On Lemma reduce production appt_typ -> atomic_nexp
-- On Inst_default reduce production appt_typ -> atomic_nexp
-- On Inst reduce production appt_typ -> atomic_nexp
-- On Indreln reduce production appt_typ -> atomic_nexp
-- On Include_ reduce production appt_typ -> atomic_nexp
-- On Import_ reduce production appt_typ -> atomic_nexp
-- On EqGt reduce production appt_typ -> atomic_nexp
-- On Eq reduce production appt_typ -> atomic_nexp
-- On Eof reduce production appt_typ -> atomic_nexp
-- On End reduce production appt_typ -> atomic_nexp
-- On Declare reduce production appt_typ -> atomic_nexp
-- On Comma reduce production appt_typ -> atomic_nexp
-- On Class_ reduce production appt_typ -> atomic_nexp
-- On BarGt reduce production appt_typ -> atomic_nexp
-- On Bar reduce production appt_typ -> atomic_nexp
-- On BacktickString reduce production appt_typ -> atomic_nexp
-- On Assert reduce production appt_typ -> atomic_nexp
-- On Arrow reduce production appt_typ -> atomic_nexp
-- On And reduce production appt_typ -> atomic_nexp

State 66:
## Known stack suffix:
## appt_typ
## LR(1) items:
atomic_typs -> appt_typ . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
atomic_typs -> appt_typ . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 67
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness reduce production atomic_typs -> appt_typ
-- On Val reduce production atomic_typs -> appt_typ
-- On Type reduce production atomic_typs -> appt_typ
-- On Theorem reduce production atomic_typs -> appt_typ
-- On Star reduce production atomic_typs -> appt_typ
-- On SemiSemi reduce production atomic_typs -> appt_typ
-- On Semi reduce production atomic_typs -> appt_typ
-- On Rsquare reduce production atomic_typs -> appt_typ
-- On Rparen reduce production atomic_typs -> appt_typ
-- On Open_ reduce production atomic_typs -> appt_typ
-- On Module_ reduce production atomic_typs -> appt_typ
-- On Let_ reduce production atomic_typs -> appt_typ
-- On Lemma reduce production atomic_typs -> appt_typ
-- On Inst_default reduce production atomic_typs -> appt_typ
-- On Inst reduce production atomic_typs -> appt_typ
-- On Indreln reduce production atomic_typs -> appt_typ
-- On Include_ reduce production atomic_typs -> appt_typ
-- On Import_ reduce production atomic_typs -> appt_typ
-- On EqGt reduce production atomic_typs -> appt_typ
-- On Eq reduce production atomic_typs -> appt_typ
-- On Eof reduce production atomic_typs -> appt_typ
-- On End reduce production atomic_typs -> appt_typ
-- On Declare reduce production atomic_typs -> appt_typ
-- On Comma reduce production atomic_typs -> appt_typ
-- On Class_ reduce production atomic_typs -> appt_typ
-- On BarGt reduce production atomic_typs -> appt_typ
-- On Bar reduce production atomic_typs -> appt_typ
-- On Assert reduce production atomic_typs -> appt_typ
-- On Arrow reduce production atomic_typs -> appt_typ
-- On And reduce production atomic_typs -> appt_typ

State 67:
## Known stack suffix:
## appt_typ atomic_typs
## LR(1) items:
atomic_typs -> appt_typ atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production atomic_typs -> appt_typ atomic_typs
-- On Val reduce production atomic_typs -> appt_typ atomic_typs
-- On Type reduce production atomic_typs -> appt_typ atomic_typs
-- On Theorem reduce production atomic_typs -> appt_typ atomic_typs
-- On Star reduce production atomic_typs -> appt_typ atomic_typs
-- On SemiSemi reduce production atomic_typs -> appt_typ atomic_typs
-- On Semi reduce production atomic_typs -> appt_typ atomic_typs
-- On Rsquare reduce production atomic_typs -> appt_typ atomic_typs
-- On Rparen reduce production atomic_typs -> appt_typ atomic_typs
-- On Open_ reduce production atomic_typs -> appt_typ atomic_typs
-- On Module_ reduce production atomic_typs -> appt_typ atomic_typs
-- On Let_ reduce production atomic_typs -> appt_typ atomic_typs
-- On Lemma reduce production atomic_typs -> appt_typ atomic_typs
-- On Inst_default reduce production atomic_typs -> appt_typ atomic_typs
-- On Inst reduce production atomic_typs -> appt_typ atomic_typs
-- On Indreln reduce production atomic_typs -> appt_typ atomic_typs
-- On Include_ reduce production atomic_typs -> appt_typ atomic_typs
-- On Import_ reduce production atomic_typs -> appt_typ atomic_typs
-- On EqGt reduce production atomic_typs -> appt_typ atomic_typs
-- On Eq reduce production atomic_typs -> appt_typ atomic_typs
-- On Eof reduce production atomic_typs -> appt_typ atomic_typs
-- On End reduce production atomic_typs -> appt_typ atomic_typs
-- On Declare reduce production atomic_typs -> appt_typ atomic_typs
-- On Comma reduce production atomic_typs -> appt_typ atomic_typs
-- On Class_ reduce production atomic_typs -> appt_typ atomic_typs
-- On BarGt reduce production atomic_typs -> appt_typ atomic_typs
-- On Bar reduce production atomic_typs -> appt_typ atomic_typs
-- On Assert reduce production atomic_typs -> appt_typ atomic_typs
-- On Arrow reduce production atomic_typs -> appt_typ atomic_typs
-- On And reduce production atomic_typs -> appt_typ atomic_typs

State 68:
## Known stack suffix:
## atomic_typ
## LR(1) items:
app_typ -> atomic_typ . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production app_typ -> atomic_typ
-- On Val reduce production app_typ -> atomic_typ
-- On Type reduce production app_typ -> atomic_typ
-- On Theorem reduce production app_typ -> atomic_typ
-- On Star reduce production app_typ -> atomic_typ
-- On SemiSemi reduce production app_typ -> atomic_typ
-- On Semi reduce production app_typ -> atomic_typ
-- On Rsquare reduce production app_typ -> atomic_typ
-- On Rparen reduce production app_typ -> atomic_typ
-- On Open_ reduce production app_typ -> atomic_typ
-- On Module_ reduce production app_typ -> atomic_typ
-- On Let_ reduce production app_typ -> atomic_typ
-- On Lemma reduce production app_typ -> atomic_typ
-- On Inst_default reduce production app_typ -> atomic_typ
-- On Inst reduce production app_typ -> atomic_typ
-- On Indreln reduce production app_typ -> atomic_typ
-- On Include_ reduce production app_typ -> atomic_typ
-- On Import_ reduce production app_typ -> atomic_typ
-- On EqGt reduce production app_typ -> atomic_typ
-- On Eq reduce production app_typ -> atomic_typ
-- On Eof reduce production app_typ -> atomic_typ
-- On End reduce production app_typ -> atomic_typ
-- On Declare reduce production app_typ -> atomic_typ
-- On Comma reduce production app_typ -> atomic_typ
-- On Class_ reduce production app_typ -> atomic_typ
-- On BarGt reduce production app_typ -> atomic_typ
-- On Bar reduce production app_typ -> atomic_typ
-- On Assert reduce production app_typ -> atomic_typ
-- On Arrow reduce production app_typ -> atomic_typ
-- On And reduce production app_typ -> atomic_typ

State 69:
## Known stack suffix:
## app_typ
## LR(1) items:
star_typ_list -> app_typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
star_typ_list -> app_typ . Star star_typ_list [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On Star shift to state 70
## Reductions:
-- On Witness reduce production star_typ_list -> app_typ
-- On Val reduce production star_typ_list -> app_typ
-- On Type reduce production star_typ_list -> app_typ
-- On Theorem reduce production star_typ_list -> app_typ
-- On SemiSemi reduce production star_typ_list -> app_typ
-- On Semi reduce production star_typ_list -> app_typ
-- On Rsquare reduce production star_typ_list -> app_typ
-- On Rparen reduce production star_typ_list -> app_typ
-- On Open_ reduce production star_typ_list -> app_typ
-- On Module_ reduce production star_typ_list -> app_typ
-- On Let_ reduce production star_typ_list -> app_typ
-- On Lemma reduce production star_typ_list -> app_typ
-- On Inst_default reduce production star_typ_list -> app_typ
-- On Inst reduce production star_typ_list -> app_typ
-- On Indreln reduce production star_typ_list -> app_typ
-- On Include_ reduce production star_typ_list -> app_typ
-- On Import_ reduce production star_typ_list -> app_typ
-- On EqGt reduce production star_typ_list -> app_typ
-- On Eq reduce production star_typ_list -> app_typ
-- On Eof reduce production star_typ_list -> app_typ
-- On End reduce production star_typ_list -> app_typ
-- On Declare reduce production star_typ_list -> app_typ
-- On Comma reduce production star_typ_list -> app_typ
-- On Class_ reduce production star_typ_list -> app_typ
-- On BarGt reduce production star_typ_list -> app_typ
-- On Bar reduce production star_typ_list -> app_typ
-- On Assert reduce production star_typ_list -> app_typ
-- On Arrow reduce production star_typ_list -> app_typ
-- On And reduce production star_typ_list -> app_typ

State 70:
## Known stack suffix:
## app_typ Star
## LR(1) items:
star_typ_list -> app_typ Star . star_typ_list [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 71
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 71:
## Known stack suffix:
## app_typ Star star_typ_list
## LR(1) items:
star_typ_list -> app_typ Star star_typ_list . [ Witness Val Type Theorem SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production star_typ_list -> app_typ Star star_typ_list
-- On Val reduce production star_typ_list -> app_typ Star star_typ_list
-- On Type reduce production star_typ_list -> app_typ Star star_typ_list
-- On Theorem reduce production star_typ_list -> app_typ Star star_typ_list
-- On SemiSemi reduce production star_typ_list -> app_typ Star star_typ_list
-- On Semi reduce production star_typ_list -> app_typ Star star_typ_list
-- On Rsquare reduce production star_typ_list -> app_typ Star star_typ_list
-- On Rparen reduce production star_typ_list -> app_typ Star star_typ_list
-- On Open_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On Module_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On Let_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On Lemma reduce production star_typ_list -> app_typ Star star_typ_list
-- On Inst_default reduce production star_typ_list -> app_typ Star star_typ_list
-- On Inst reduce production star_typ_list -> app_typ Star star_typ_list
-- On Indreln reduce production star_typ_list -> app_typ Star star_typ_list
-- On Include_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On Import_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On EqGt reduce production star_typ_list -> app_typ Star star_typ_list
-- On Eq reduce production star_typ_list -> app_typ Star star_typ_list
-- On Eof reduce production star_typ_list -> app_typ Star star_typ_list
-- On End reduce production star_typ_list -> app_typ Star star_typ_list
-- On Declare reduce production star_typ_list -> app_typ Star star_typ_list
-- On Comma reduce production star_typ_list -> app_typ Star star_typ_list
-- On Class_ reduce production star_typ_list -> app_typ Star star_typ_list
-- On BarGt reduce production star_typ_list -> app_typ Star star_typ_list
-- On Bar reduce production star_typ_list -> app_typ Star star_typ_list
-- On Assert reduce production star_typ_list -> app_typ Star star_typ_list
-- On Arrow reduce production star_typ_list -> app_typ Star star_typ_list
-- On And reduce production star_typ_list -> app_typ Star star_typ_list

State 72:
## Known stack suffix:
## star_nexp
## LR(1) items:
nexp -> star_nexp . [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
nexp -> star_nexp . Plus nexp [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Plus shift to state 73
## Reductions:
-- On Rsquare reduce production nexp -> star_nexp
-- On Rparen reduce production nexp -> star_nexp
-- On GtEq reduce production nexp -> star_nexp
-- On EqGt reduce production nexp -> star_nexp
-- On Eq reduce production nexp -> star_nexp
-- On Dot reduce production nexp -> star_nexp
-- On Comma reduce production nexp -> star_nexp

State 73:
## Known stack suffix:
## star_nexp Plus
## LR(1) items:
nexp -> star_nexp Plus . nexp [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 80
-- On atomic_nexp shift to state 77
## Reductions:

State 74:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_nexp -> Lparen . nexp Rparen [ Star Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 75
-- On atomic_nexp shift to state 77
## Reductions:

State 75:
## Known stack suffix:
## Lparen nexp
## LR(1) items:
atomic_nexp -> Lparen nexp . Rparen [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
-- On Rparen shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## Lparen nexp Rparen
## LR(1) items:
atomic_nexp -> Lparen nexp Rparen . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Rparen Plus Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ GtEq EqGt Eq Eof End Dot Declare Comma Class_ BarGt Bar BacktickString Assert Arrow And ]
## Transitions:
## Reductions:
-- On X reduce production atomic_nexp -> Lparen nexp Rparen
-- On Witness reduce production atomic_nexp -> Lparen nexp Rparen
-- On Val reduce production atomic_nexp -> Lparen nexp Rparen
-- On Under reduce production atomic_nexp -> Lparen nexp Rparen
-- On Tyvar reduce production atomic_nexp -> Lparen nexp Rparen
-- On Type reduce production atomic_nexp -> Lparen nexp Rparen
-- On Theorem reduce production atomic_nexp -> Lparen nexp Rparen
-- On Star reduce production atomic_nexp -> Lparen nexp Rparen
-- On SemiSemi reduce production atomic_nexp -> Lparen nexp Rparen
-- On Semi reduce production atomic_nexp -> Lparen nexp Rparen
-- On Rsquare reduce production atomic_nexp -> Lparen nexp Rparen
-- On Rparen reduce production atomic_nexp -> Lparen nexp Rparen
-- On Plus reduce production atomic_nexp -> Lparen nexp Rparen
-- On Open_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On Nvar reduce production atomic_nexp -> Lparen nexp Rparen
-- On Num reduce production atomic_nexp -> Lparen nexp Rparen
-- On Module_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On Lparen reduce production atomic_nexp -> Lparen nexp Rparen
-- On Let_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On Lemma reduce production atomic_nexp -> Lparen nexp Rparen
-- On Inst_default reduce production atomic_nexp -> Lparen nexp Rparen
-- On Inst reduce production atomic_nexp -> Lparen nexp Rparen
-- On Indreln reduce production atomic_nexp -> Lparen nexp Rparen
-- On Include_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On Import_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On GtEq reduce production atomic_nexp -> Lparen nexp Rparen
-- On EqGt reduce production atomic_nexp -> Lparen nexp Rparen
-- On Eq reduce production atomic_nexp -> Lparen nexp Rparen
-- On Eof reduce production atomic_nexp -> Lparen nexp Rparen
-- On End reduce production atomic_nexp -> Lparen nexp Rparen
-- On Dot reduce production atomic_nexp -> Lparen nexp Rparen
-- On Declare reduce production atomic_nexp -> Lparen nexp Rparen
-- On Comma reduce production atomic_nexp -> Lparen nexp Rparen
-- On Class_ reduce production atomic_nexp -> Lparen nexp Rparen
-- On BarGt reduce production atomic_nexp -> Lparen nexp Rparen
-- On Bar reduce production atomic_nexp -> Lparen nexp Rparen
-- On BacktickString reduce production atomic_nexp -> Lparen nexp Rparen
-- On Assert reduce production atomic_nexp -> Lparen nexp Rparen
-- On Arrow reduce production atomic_nexp -> Lparen nexp Rparen
-- On And reduce production atomic_nexp -> Lparen nexp Rparen

State 77:
## Known stack suffix:
## atomic_nexp
## LR(1) items:
star_nexp -> atomic_nexp . [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
star_nexp -> atomic_nexp . Star star_nexp [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Star shift to state 78
## Reductions:
-- On Rsquare reduce production star_nexp -> atomic_nexp
-- On Rparen reduce production star_nexp -> atomic_nexp
-- On Plus reduce production star_nexp -> atomic_nexp
-- On GtEq reduce production star_nexp -> atomic_nexp
-- On EqGt reduce production star_nexp -> atomic_nexp
-- On Eq reduce production star_nexp -> atomic_nexp
-- On Dot reduce production star_nexp -> atomic_nexp
-- On Comma reduce production star_nexp -> atomic_nexp

State 78:
## Known stack suffix:
## atomic_nexp Star
## LR(1) items:
star_nexp -> atomic_nexp Star . star_nexp [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 79
-- On atomic_nexp shift to state 77
## Reductions:

State 79:
## Known stack suffix:
## atomic_nexp Star star_nexp
## LR(1) items:
star_nexp -> atomic_nexp Star star_nexp . [ Rsquare Rparen Plus GtEq EqGt Eq Dot Comma ]
## Transitions:
## Reductions:
-- On Rsquare reduce production star_nexp -> atomic_nexp Star star_nexp
-- On Rparen reduce production star_nexp -> atomic_nexp Star star_nexp
-- On Plus reduce production star_nexp -> atomic_nexp Star star_nexp
-- On GtEq reduce production star_nexp -> atomic_nexp Star star_nexp
-- On EqGt reduce production star_nexp -> atomic_nexp Star star_nexp
-- On Eq reduce production star_nexp -> atomic_nexp Star star_nexp
-- On Dot reduce production star_nexp -> atomic_nexp Star star_nexp
-- On Comma reduce production star_nexp -> atomic_nexp Star star_nexp

State 80:
## Known stack suffix:
## star_nexp Plus nexp
## LR(1) items:
nexp -> star_nexp Plus nexp . [ Rsquare Rparen GtEq EqGt Eq Dot Comma ]
## Transitions:
## Reductions:
-- On Rsquare reduce production nexp -> star_nexp Plus nexp
-- On Rparen reduce production nexp -> star_nexp Plus nexp
-- On GtEq reduce production nexp -> star_nexp Plus nexp
-- On EqGt reduce production nexp -> star_nexp Plus nexp
-- On Eq reduce production nexp -> star_nexp Plus nexp
-- On Dot reduce production nexp -> star_nexp Plus nexp
-- On Comma reduce production nexp -> star_nexp Plus nexp

State 81:
## Known stack suffix:
## BacktickString atomic_typs
## LR(1) items:
app_typ -> BacktickString atomic_typs . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Rparen Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Declare Comma Class_ BarGt Bar Assert Arrow And ]
## Transitions:
## Reductions:
-- On Witness reduce production app_typ -> BacktickString atomic_typs
-- On Val reduce production app_typ -> BacktickString atomic_typs
-- On Type reduce production app_typ -> BacktickString atomic_typs
-- On Theorem reduce production app_typ -> BacktickString atomic_typs
-- On Star reduce production app_typ -> BacktickString atomic_typs
-- On SemiSemi reduce production app_typ -> BacktickString atomic_typs
-- On Semi reduce production app_typ -> BacktickString atomic_typs
-- On Rsquare reduce production app_typ -> BacktickString atomic_typs
-- On Rparen reduce production app_typ -> BacktickString atomic_typs
-- On Open_ reduce production app_typ -> BacktickString atomic_typs
-- On Module_ reduce production app_typ -> BacktickString atomic_typs
-- On Let_ reduce production app_typ -> BacktickString atomic_typs
-- On Lemma reduce production app_typ -> BacktickString atomic_typs
-- On Inst_default reduce production app_typ -> BacktickString atomic_typs
-- On Inst reduce production app_typ -> BacktickString atomic_typs
-- On Indreln reduce production app_typ -> BacktickString atomic_typs
-- On Include_ reduce production app_typ -> BacktickString atomic_typs
-- On Import_ reduce production app_typ -> BacktickString atomic_typs
-- On EqGt reduce production app_typ -> BacktickString atomic_typs
-- On Eq reduce production app_typ -> BacktickString atomic_typs
-- On Eof reduce production app_typ -> BacktickString atomic_typs
-- On End reduce production app_typ -> BacktickString atomic_typs
-- On Declare reduce production app_typ -> BacktickString atomic_typs
-- On Comma reduce production app_typ -> BacktickString atomic_typs
-- On Class_ reduce production app_typ -> BacktickString atomic_typs
-- On BarGt reduce production app_typ -> BacktickString atomic_typs
-- On Bar reduce production app_typ -> BacktickString atomic_typs
-- On Assert reduce production app_typ -> BacktickString atomic_typs
-- On Arrow reduce production app_typ -> BacktickString atomic_typs
-- On And reduce production app_typ -> BacktickString atomic_typs

State 82:
## Known stack suffix:
## Forall
## LR(1) items:
typschm -> Forall . tnvs Dot typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall . tnvs Dot cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 85
-- On tnvar shift to state 114
## Reductions:
-- On Dot reduce production tnvs ->

State 83:
## Known stack suffix:
## Tyvar
## LR(1) items:
tnvar -> Tyvar . [ Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production tnvar -> Tyvar
-- On Tyvar reduce production tnvar -> Tyvar
-- On Type reduce production tnvar -> Tyvar
-- On Theorem reduce production tnvar -> Tyvar
-- On SemiSemi reduce production tnvar -> Tyvar
-- On Semi reduce production tnvar -> Tyvar
-- On Rparen reduce production tnvar -> Tyvar
-- On Open_ reduce production tnvar -> Tyvar
-- On Nvar reduce production tnvar -> Tyvar
-- On Module_ reduce production tnvar -> Tyvar
-- On Lsquare reduce production tnvar -> Tyvar
-- On Let_ reduce production tnvar -> Tyvar
-- On Lemma reduce production tnvar -> Tyvar
-- On Inst_default reduce production tnvar -> Tyvar
-- On Inst reduce production tnvar -> Tyvar
-- On Indreln reduce production tnvar -> Tyvar
-- On Include_ reduce production tnvar -> Tyvar
-- On Import_ reduce production tnvar -> Tyvar
-- On EqGt reduce production tnvar -> Tyvar
-- On Eq reduce production tnvar -> Tyvar
-- On Eof reduce production tnvar -> Tyvar
-- On End reduce production tnvar -> Tyvar
-- On Dot reduce production tnvar -> Tyvar
-- On Declare reduce production tnvar -> Tyvar
-- On Comma reduce production tnvar -> Tyvar
-- On Class_ reduce production tnvar -> Tyvar
-- On Assert reduce production tnvar -> Tyvar
-- On And reduce production tnvar -> Tyvar

State 84:
## Known stack suffix:
## Nvar
## LR(1) items:
tnvar -> Nvar . [ Val Tyvar Type Theorem SemiSemi Semi Rparen Open_ Nvar Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ EqGt Eq Eof End Dot Declare Comma Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production tnvar -> Nvar
-- On Tyvar reduce production tnvar -> Nvar
-- On Type reduce production tnvar -> Nvar
-- On Theorem reduce production tnvar -> Nvar
-- On SemiSemi reduce production tnvar -> Nvar
-- On Semi reduce production tnvar -> Nvar
-- On Rparen reduce production tnvar -> Nvar
-- On Open_ reduce production tnvar -> Nvar
-- On Nvar reduce production tnvar -> Nvar
-- On Module_ reduce production tnvar -> Nvar
-- On Lsquare reduce production tnvar -> Nvar
-- On Let_ reduce production tnvar -> Nvar
-- On Lemma reduce production tnvar -> Nvar
-- On Inst_default reduce production tnvar -> Nvar
-- On Inst reduce production tnvar -> Nvar
-- On Indreln reduce production tnvar -> Nvar
-- On Include_ reduce production tnvar -> Nvar
-- On Import_ reduce production tnvar -> Nvar
-- On EqGt reduce production tnvar -> Nvar
-- On Eq reduce production tnvar -> Nvar
-- On Eof reduce production tnvar -> Nvar
-- On End reduce production tnvar -> Nvar
-- On Dot reduce production tnvar -> Nvar
-- On Declare reduce production tnvar -> Nvar
-- On Comma reduce production tnvar -> Nvar
-- On Class_ reduce production tnvar -> Nvar
-- On Assert reduce production tnvar -> Nvar
-- On And reduce production tnvar -> Nvar

State 85:
## Known stack suffix:
## Forall tnvs
## LR(1) items:
typschm -> Forall tnvs . Dot typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs . Dot cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Dot shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## Forall tnvs Dot
## LR(1) items:
typschm -> Forall tnvs Dot . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . cs EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot . cs Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 87
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On ranges shift to state 88
-- On range shift to state 91
-- On nexp shift to state 94
-- On id_help shift to state 59
-- On id shift to state 99
-- On cs shift to state 103
-- On c shift to state 110
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 87:
## Known stack suffix:
## Forall tnvs Dot typ
## LR(1) items:
typschm -> Forall tnvs Dot typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness reduce production typschm -> Forall tnvs Dot typ
-- On Val reduce production typschm -> Forall tnvs Dot typ
-- On Type reduce production typschm -> Forall tnvs Dot typ
-- On Theorem reduce production typschm -> Forall tnvs Dot typ
-- On SemiSemi reduce production typschm -> Forall tnvs Dot typ
-- On Semi reduce production typschm -> Forall tnvs Dot typ
-- On Rsquare reduce production typschm -> Forall tnvs Dot typ
-- On Open_ reduce production typschm -> Forall tnvs Dot typ
-- On Module_ reduce production typschm -> Forall tnvs Dot typ
-- On Let_ reduce production typschm -> Forall tnvs Dot typ
-- On Lemma reduce production typschm -> Forall tnvs Dot typ
-- On Inst_default reduce production typschm -> Forall tnvs Dot typ
-- On Inst reduce production typschm -> Forall tnvs Dot typ
-- On Indreln reduce production typschm -> Forall tnvs Dot typ
-- On Include_ reduce production typschm -> Forall tnvs Dot typ
-- On Import_ reduce production typschm -> Forall tnvs Dot typ
-- On Eof reduce production typschm -> Forall tnvs Dot typ
-- On End reduce production typschm -> Forall tnvs Dot typ
-- On Declare reduce production typschm -> Forall tnvs Dot typ
-- On Class_ reduce production typschm -> Forall tnvs Dot typ
-- On Assert reduce production typschm -> Forall tnvs Dot typ

State 88:
## Known stack suffix:
## Forall tnvs Dot ranges
## LR(1) items:
typschm -> Forall tnvs Dot ranges . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On EqGt shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## Forall tnvs Dot ranges EqGt
## LR(1) items:
typschm -> Forall tnvs Dot ranges EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 90
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 90:
## Known stack suffix:
## Forall tnvs Dot ranges EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot ranges EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Val reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Type reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Theorem reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On SemiSemi reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Semi reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Rsquare reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Open_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Module_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Let_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Lemma reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Inst_default reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Inst reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Indreln reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Include_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Import_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Eof reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On End reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Declare reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Class_ reduce production typschm -> Forall tnvs Dot ranges EqGt typ
-- On Assert reduce production typschm -> Forall tnvs Dot ranges EqGt typ

State 91:
## Known stack suffix:
## range
## LR(1) items:
ranges -> range . [ EqGt ]
ranges -> range . Comma ranges [ EqGt ]
## Transitions:
-- On Comma shift to state 92
## Reductions:
-- On EqGt reduce production ranges -> range

State 92:
## Known stack suffix:
## range Comma
## LR(1) items:
ranges -> range Comma . ranges [ EqGt ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On ranges shift to state 93
-- On range shift to state 91
-- On nexp shift to state 94
-- On atomic_nexp shift to state 77
## Reductions:

State 93:
## Known stack suffix:
## range Comma ranges
## LR(1) items:
ranges -> range Comma ranges . [ EqGt ]
## Transitions:
## Reductions:
-- On EqGt reduce production ranges -> range Comma ranges

State 94:
## Known stack suffix:
## nexp
## LR(1) items:
range -> nexp . Eq nexp [ EqGt Comma ]
range -> nexp . GtEq nexp [ EqGt Comma ]
## Transitions:
-- On GtEq shift to state 95
-- On Eq shift to state 97
## Reductions:

State 95:
## Known stack suffix:
## nexp GtEq
## LR(1) items:
range -> nexp GtEq . nexp [ EqGt Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 96
-- On atomic_nexp shift to state 77
## Reductions:

State 96:
## Known stack suffix:
## nexp GtEq nexp
## LR(1) items:
range -> nexp GtEq nexp . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt reduce production range -> nexp GtEq nexp
-- On Comma reduce production range -> nexp GtEq nexp

State 97:
## Known stack suffix:
## nexp Eq
## LR(1) items:
range -> nexp Eq . nexp [ EqGt Comma ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 98
-- On atomic_nexp shift to state 77
## Reductions:

State 98:
## Known stack suffix:
## nexp Eq nexp
## LR(1) items:
range -> nexp Eq nexp . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt reduce production range -> nexp Eq nexp
-- On Comma reduce production range -> nexp Eq nexp

State 99:
## Known stack suffix:
## id
## LR(1) items:
app_typ -> id . atomic_typs [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert Arrow ]
atomic_typ -> id . [ Witness Val Type Theorem Star SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert Arrow ]
c -> id . tnvar [ Semi EqGt Comma ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 100
-- On Nvar shift to state 101
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 61
-- On x shift to state 50
-- On tnvar shift to state 102
-- On id_help shift to state 59
-- On id shift to state 62
-- On atomic_typs shift to state 63
-- On atomic_typ shift to state 64
-- On atomic_nexp shift to state 65
-- On appt_typ shift to state 66
## Reductions:
-- On Witness reduce production atomic_typ -> id
-- On Val reduce production atomic_typ -> id
-- On Type reduce production atomic_typ -> id
-- On Theorem reduce production atomic_typ -> id
-- On Star reduce production atomic_typ -> id
-- On SemiSemi reduce production atomic_typ -> id
-- On Semi reduce production atomic_typ -> id
-- On Rsquare reduce production atomic_typ -> id
-- On Open_ reduce production atomic_typ -> id
-- On Module_ reduce production atomic_typ -> id
-- On Let_ reduce production atomic_typ -> id
-- On Lemma reduce production atomic_typ -> id
-- On Inst_default reduce production atomic_typ -> id
-- On Inst reduce production atomic_typ -> id
-- On Indreln reduce production atomic_typ -> id
-- On Include_ reduce production atomic_typ -> id
-- On Import_ reduce production atomic_typ -> id
-- On Eof reduce production atomic_typ -> id
-- On End reduce production atomic_typ -> id
-- On Declare reduce production atomic_typ -> id
-- On Class_ reduce production atomic_typ -> id
-- On Assert reduce production atomic_typ -> id
-- On Arrow reduce production atomic_typ -> id

State 100:
## Known stack suffix:
## Tyvar
## LR(1) items:
atomic_typ -> Tyvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow ]
tnvar -> Tyvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On X reduce production atomic_typ -> Tyvar
-- On Witness reduce production atomic_typ -> Tyvar
-- On Val reduce production atomic_typ -> Tyvar
-- On Under reduce production atomic_typ -> Tyvar
-- On Tyvar reduce production atomic_typ -> Tyvar
-- On Type reduce production atomic_typ -> Tyvar
-- On Theorem reduce production atomic_typ -> Tyvar
-- On Star reduce production atomic_typ -> Tyvar
-- On SemiSemi reduce production atomic_typ -> Tyvar
-- On Semi reduce production atomic_typ -> Tyvar
-- On Semi reduce production tnvar -> Tyvar
-- On Rsquare reduce production atomic_typ -> Tyvar
-- On Open_ reduce production atomic_typ -> Tyvar
-- On Nvar reduce production atomic_typ -> Tyvar
-- On Num reduce production atomic_typ -> Tyvar
-- On Module_ reduce production atomic_typ -> Tyvar
-- On Lparen reduce production atomic_typ -> Tyvar
-- On Let_ reduce production atomic_typ -> Tyvar
-- On Lemma reduce production atomic_typ -> Tyvar
-- On Inst_default reduce production atomic_typ -> Tyvar
-- On Inst reduce production atomic_typ -> Tyvar
-- On Indreln reduce production atomic_typ -> Tyvar
-- On Include_ reduce production atomic_typ -> Tyvar
-- On Import_ reduce production atomic_typ -> Tyvar
-- On EqGt reduce production tnvar -> Tyvar
-- On Eof reduce production atomic_typ -> Tyvar
-- On End reduce production atomic_typ -> Tyvar
-- On Declare reduce production atomic_typ -> Tyvar
-- On Comma reduce production tnvar -> Tyvar
-- On Class_ reduce production atomic_typ -> Tyvar
-- On BacktickString reduce production atomic_typ -> Tyvar
-- On Assert reduce production atomic_typ -> Tyvar
-- On Arrow reduce production atomic_typ -> Tyvar
** Conflict on Semi

State 101:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_nexp -> Nvar . [ X Witness Val Under Tyvar Type Theorem Star SemiSemi Semi Rsquare Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow ]
tnvar -> Nvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On X reduce production atomic_nexp -> Nvar
-- On Witness reduce production atomic_nexp -> Nvar
-- On Val reduce production atomic_nexp -> Nvar
-- On Under reduce production atomic_nexp -> Nvar
-- On Tyvar reduce production atomic_nexp -> Nvar
-- On Type reduce production atomic_nexp -> Nvar
-- On Theorem reduce production atomic_nexp -> Nvar
-- On Star reduce production atomic_nexp -> Nvar
-- On SemiSemi reduce production atomic_nexp -> Nvar
-- On Semi reduce production atomic_nexp -> Nvar
-- On Semi reduce production tnvar -> Nvar
-- On Rsquare reduce production atomic_nexp -> Nvar
-- On Open_ reduce production atomic_nexp -> Nvar
-- On Nvar reduce production atomic_nexp -> Nvar
-- On Num reduce production atomic_nexp -> Nvar
-- On Module_ reduce production atomic_nexp -> Nvar
-- On Lparen reduce production atomic_nexp -> Nvar
-- On Let_ reduce production atomic_nexp -> Nvar
-- On Lemma reduce production atomic_nexp -> Nvar
-- On Inst_default reduce production atomic_nexp -> Nvar
-- On Inst reduce production atomic_nexp -> Nvar
-- On Indreln reduce production atomic_nexp -> Nvar
-- On Include_ reduce production atomic_nexp -> Nvar
-- On Import_ reduce production atomic_nexp -> Nvar
-- On EqGt reduce production tnvar -> Nvar
-- On Eof reduce production atomic_nexp -> Nvar
-- On End reduce production atomic_nexp -> Nvar
-- On Declare reduce production atomic_nexp -> Nvar
-- On Comma reduce production tnvar -> Nvar
-- On Class_ reduce production atomic_nexp -> Nvar
-- On BacktickString reduce production atomic_nexp -> Nvar
-- On Assert reduce production atomic_nexp -> Nvar
-- On Arrow reduce production atomic_nexp -> Nvar
** Conflict on Semi

State 102:
## Known stack suffix:
## id tnvar
## LR(1) items:
c -> id tnvar . [ Semi EqGt Comma ]
## Transitions:
## Reductions:
-- On Semi reduce production c -> id tnvar
-- On EqGt reduce production c -> id tnvar
-- On Comma reduce production c -> id tnvar

State 103:
## Known stack suffix:
## Forall tnvs Dot cs
## LR(1) items:
typschm -> Forall tnvs Dot cs . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
typschm -> Forall tnvs Dot cs . Semi ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Semi shift to state 104
-- On EqGt shift to state 108
## Reductions:

State 104:
## Known stack suffix:
## Forall tnvs Dot cs Semi
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi . ranges EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On ranges shift to state 105
-- On range shift to state 91
-- On nexp shift to state 94
-- On atomic_nexp shift to state 77
## Reductions:

State 105:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges . EqGt typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On EqGt shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges EqGt
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 107
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 107:
## Known stack suffix:
## Forall tnvs Dot cs Semi ranges EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot cs Semi ranges EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Val reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Type reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Theorem reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On SemiSemi reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Semi reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Rsquare reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Open_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Module_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Let_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Lemma reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Inst_default reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Inst reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Indreln reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Include_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Import_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Eof reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On End reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Declare reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Class_ reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ
-- On Assert reduce production typschm -> Forall tnvs Dot cs Semi ranges EqGt typ

State 108:
## Known stack suffix:
## Forall tnvs Dot cs EqGt
## LR(1) items:
typschm -> Forall tnvs Dot cs EqGt . typ [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 109
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 109:
## Known stack suffix:
## Forall tnvs Dot cs EqGt typ
## LR(1) items:
typschm -> Forall tnvs Dot cs EqGt typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Val reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Type reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Theorem reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On SemiSemi reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Semi reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Rsquare reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Open_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Module_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Let_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Lemma reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Inst_default reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Inst reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Indreln reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Include_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Import_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Eof reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On End reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Declare reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Class_ reduce production typschm -> Forall tnvs Dot cs EqGt typ
-- On Assert reduce production typschm -> Forall tnvs Dot cs EqGt typ

State 110:
## Known stack suffix:
## c
## LR(1) items:
cs -> c . [ Semi EqGt ]
cs -> c . Comma cs [ Semi EqGt ]
## Transitions:
-- On Comma shift to state 111
## Reductions:
-- On Semi reduce production cs -> c
-- On EqGt reduce production cs -> c

State 111:
## Known stack suffix:
## c Comma
## LR(1) items:
cs -> c Comma . cs [ Semi EqGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 112
-- On cs shift to state 113
-- On c shift to state 110
## Reductions:

State 112:
## Known stack suffix:
## id
## LR(1) items:
c -> id . tnvar [ Semi EqGt Comma ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 102
## Reductions:

State 113:
## Known stack suffix:
## c Comma cs
## LR(1) items:
cs -> c Comma cs . [ Semi EqGt ]
## Transitions:
## Reductions:
-- On Semi reduce production cs -> c Comma cs
-- On EqGt reduce production cs -> c Comma cs

State 114:
## Known stack suffix:
## tnvar
## LR(1) items:
tnvs -> tnvar . tnvs [ Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 115
-- On tnvar shift to state 114
## Reductions:
-- On Val reduce production tnvs ->
-- On Type reduce production tnvs ->
-- On Theorem reduce production tnvs ->
-- On SemiSemi reduce production tnvs ->
-- On Open_ reduce production tnvs ->
-- On Module_ reduce production tnvs ->
-- On Lsquare reduce production tnvs ->
-- On Let_ reduce production tnvs ->
-- On Lemma reduce production tnvs ->
-- On Inst_default reduce production tnvs ->
-- On Inst reduce production tnvs ->
-- On Indreln reduce production tnvs ->
-- On Include_ reduce production tnvs ->
-- On Import_ reduce production tnvs ->
-- On Eq reduce production tnvs ->
-- On Eof reduce production tnvs ->
-- On End reduce production tnvs ->
-- On Dot reduce production tnvs ->
-- On Declare reduce production tnvs ->
-- On Class_ reduce production tnvs ->
-- On Assert reduce production tnvs ->
-- On And reduce production tnvs ->

State 115:
## Known stack suffix:
## tnvar tnvs
## LR(1) items:
tnvs -> tnvar tnvs . [ Val Type Theorem SemiSemi Open_ Module_ Lsquare Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Dot Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production tnvs -> tnvar tnvs
-- On Type reduce production tnvs -> tnvar tnvs
-- On Theorem reduce production tnvs -> tnvar tnvs
-- On SemiSemi reduce production tnvs -> tnvar tnvs
-- On Open_ reduce production tnvs -> tnvar tnvs
-- On Module_ reduce production tnvs -> tnvar tnvs
-- On Lsquare reduce production tnvs -> tnvar tnvs
-- On Let_ reduce production tnvs -> tnvar tnvs
-- On Lemma reduce production tnvs -> tnvar tnvs
-- On Inst_default reduce production tnvs -> tnvar tnvs
-- On Inst reduce production tnvs -> tnvar tnvs
-- On Indreln reduce production tnvs -> tnvar tnvs
-- On Include_ reduce production tnvs -> tnvar tnvs
-- On Import_ reduce production tnvs -> tnvar tnvs
-- On Eq reduce production tnvs -> tnvar tnvs
-- On Eof reduce production tnvs -> tnvar tnvs
-- On End reduce production tnvs -> tnvar tnvs
-- On Dot reduce production tnvs -> tnvar tnvs
-- On Declare reduce production tnvs -> tnvar tnvs
-- On Class_ reduce production tnvs -> tnvar tnvs
-- On Assert reduce production tnvs -> tnvar tnvs
-- On And reduce production tnvs -> tnvar tnvs

State 116:
## Known stack suffix:
## Val x Lsquare BacktickString Rsquare Colon typschm
## LR(1) items:
val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Type reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Theorem reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On SemiSemi reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Open_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Module_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Let_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Lemma reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Inst_default reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Inst reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Indreln reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Include_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Import_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Eof reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On End reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Declare reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Class_ reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm
-- On Assert reduce production val_spec -> Val x Lsquare BacktickString Rsquare Colon typschm

State 117:
## Known stack suffix:
## typ
## LR(1) items:
typschm -> typ . [ Witness Val Type Theorem SemiSemi Semi Rsquare Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Witness reduce production typschm -> typ
-- On Val reduce production typschm -> typ
-- On Type reduce production typschm -> typ
-- On Theorem reduce production typschm -> typ
-- On SemiSemi reduce production typschm -> typ
-- On Semi reduce production typschm -> typ
-- On Rsquare reduce production typschm -> typ
-- On Open_ reduce production typschm -> typ
-- On Module_ reduce production typschm -> typ
-- On Let_ reduce production typschm -> typ
-- On Lemma reduce production typschm -> typ
-- On Inst_default reduce production typschm -> typ
-- On Inst reduce production typschm -> typ
-- On Indreln reduce production typschm -> typ
-- On Include_ reduce production typschm -> typ
-- On Import_ reduce production typschm -> typ
-- On Eof reduce production typschm -> typ
-- On End reduce production typschm -> typ
-- On Declare reduce production typschm -> typ
-- On Class_ reduce production typschm -> typ
-- On Assert reduce production typschm -> typ

State 118:
## Known stack suffix:
## Val x Colon
## LR(1) items:
val_spec -> Val x Colon . typschm [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 119
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 119:
## Known stack suffix:
## Val x Colon typschm
## LR(1) items:
val_spec -> Val x Colon typschm . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_spec -> Val x Colon typschm
-- On Type reduce production val_spec -> Val x Colon typschm
-- On Theorem reduce production val_spec -> Val x Colon typschm
-- On SemiSemi reduce production val_spec -> Val x Colon typschm
-- On Open_ reduce production val_spec -> Val x Colon typschm
-- On Module_ reduce production val_spec -> Val x Colon typschm
-- On Let_ reduce production val_spec -> Val x Colon typschm
-- On Lemma reduce production val_spec -> Val x Colon typschm
-- On Inst_default reduce production val_spec -> Val x Colon typschm
-- On Inst reduce production val_spec -> Val x Colon typschm
-- On Indreln reduce production val_spec -> Val x Colon typschm
-- On Include_ reduce production val_spec -> Val x Colon typschm
-- On Import_ reduce production val_spec -> Val x Colon typschm
-- On Eof reduce production val_spec -> Val x Colon typschm
-- On End reduce production val_spec -> Val x Colon typschm
-- On Declare reduce production val_spec -> Val x Colon typschm
-- On Class_ reduce production val_spec -> Val x Colon typschm
-- On Assert reduce production val_spec -> Val x Colon typschm

State 120:
## Known stack suffix:
## Type
## LR(1) items:
def -> Type . tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 121
-- On tds shift to state 158
-- On td shift to state 159
## Reductions:

State 121:
## Known stack suffix:
## x
## LR(1) items:
td -> x . tnvs [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs name_sect [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x . tnvs name_sect Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 122
-- On tnvar shift to state 114
## Reductions:
-- On Val reduce production tnvs ->
-- On Type reduce production tnvs ->
-- On Theorem reduce production tnvs ->
-- On SemiSemi reduce production tnvs ->
-- On Open_ reduce production tnvs ->
-- On Module_ reduce production tnvs ->
-- On Lsquare reduce production tnvs ->
-- On Let_ reduce production tnvs ->
-- On Lemma reduce production tnvs ->
-- On Inst_default reduce production tnvs ->
-- On Inst reduce production tnvs ->
-- On Indreln reduce production tnvs ->
-- On Include_ reduce production tnvs ->
-- On Import_ reduce production tnvs ->
-- On Eq reduce production tnvs ->
-- On Eof reduce production tnvs ->
-- On End reduce production tnvs ->
-- On Declare reduce production tnvs ->
-- On Class_ reduce production tnvs ->
-- On Assert reduce production tnvs ->
-- On And reduce production tnvs ->

State 122:
## Known stack suffix:
## x tnvs
## LR(1) items:
td -> x tnvs . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . name_sect [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs . name_sect Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Lsquare shift to state 123
-- On Eq shift to state 128
-- On name_sect shift to state 155
## Reductions:
-- On Val reduce production td -> x tnvs
-- On Type reduce production td -> x tnvs
-- On Theorem reduce production td -> x tnvs
-- On SemiSemi reduce production td -> x tnvs
-- On Open_ reduce production td -> x tnvs
-- On Module_ reduce production td -> x tnvs
-- On Let_ reduce production td -> x tnvs
-- On Lemma reduce production td -> x tnvs
-- On Inst_default reduce production td -> x tnvs
-- On Inst reduce production td -> x tnvs
-- On Indreln reduce production td -> x tnvs
-- On Include_ reduce production td -> x tnvs
-- On Import_ reduce production td -> x tnvs
-- On Eof reduce production td -> x tnvs
-- On End reduce production td -> x tnvs
-- On Declare reduce production td -> x tnvs
-- On Class_ reduce production td -> x tnvs
-- On Assert reduce production td -> x tnvs
-- On And reduce production td -> x tnvs

State 123:
## Known stack suffix:
## Lsquare
## LR(1) items:
name_sect -> Lsquare . x Eq String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## Lsquare x
## LR(1) items:
name_sect -> Lsquare x . Eq String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On Eq shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## Lsquare x Eq
## LR(1) items:
name_sect -> Lsquare x Eq . String Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On String shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## Lsquare x Eq String
## LR(1) items:
name_sect -> Lsquare x Eq String . Rsquare [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
-- On Rsquare shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## Lsquare x Eq String Rsquare
## LR(1) items:
name_sect -> Lsquare x Eq String Rsquare . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eq Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Type reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Theorem reduce production name_sect -> Lsquare x Eq String Rsquare
-- On SemiSemi reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Open_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Module_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Let_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Lemma reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Inst_default reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Inst reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Indreln reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Include_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Import_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Eq reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Eof reduce production name_sect -> Lsquare x Eq String Rsquare
-- On End reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Declare reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Class_ reduce production name_sect -> Lsquare x Eq String Rsquare
-- On Assert reduce production name_sect -> Lsquare x Eq String Rsquare
-- On And reduce production name_sect -> Lsquare x Eq String Rsquare

State 128:
## Known stack suffix:
## x tnvs Eq
## LR(1) items:
td -> x tnvs Eq . texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On LtBar shift to state 129
-- On Lparen shift to state 45
-- On Bar shift to state 138
-- On BacktickString shift to state 46
-- On x shift to state 146
-- On typ shift to state 149
-- On texp shift to state 150
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On ctor_texp shift to state 151
-- On ctor_single_texp shift to state 154
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 129:
## Known stack suffix:
## LtBar
## LR(1) items:
texp -> LtBar . xtyps BarGt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On xtyps shift to state 130
-- On xtyp shift to state 132
-- On x shift to state 135
## Reductions:

State 130:
## Known stack suffix:
## LtBar xtyps
## LR(1) items:
texp -> LtBar xtyps . BarGt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On BarGt shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LtBar xtyps BarGt
## LR(1) items:
texp -> LtBar xtyps BarGt . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production texp -> LtBar xtyps BarGt
-- On Type reduce production texp -> LtBar xtyps BarGt
-- On Theorem reduce production texp -> LtBar xtyps BarGt
-- On SemiSemi reduce production texp -> LtBar xtyps BarGt
-- On Open_ reduce production texp -> LtBar xtyps BarGt
-- On Module_ reduce production texp -> LtBar xtyps BarGt
-- On Let_ reduce production texp -> LtBar xtyps BarGt
-- On Lemma reduce production texp -> LtBar xtyps BarGt
-- On Inst_default reduce production texp -> LtBar xtyps BarGt
-- On Inst reduce production texp -> LtBar xtyps BarGt
-- On Indreln reduce production texp -> LtBar xtyps BarGt
-- On Include_ reduce production texp -> LtBar xtyps BarGt
-- On Import_ reduce production texp -> LtBar xtyps BarGt
-- On Eof reduce production texp -> LtBar xtyps BarGt
-- On End reduce production texp -> LtBar xtyps BarGt
-- On Declare reduce production texp -> LtBar xtyps BarGt
-- On Class_ reduce production texp -> LtBar xtyps BarGt
-- On Assert reduce production texp -> LtBar xtyps BarGt
-- On And reduce production texp -> LtBar xtyps BarGt

State 132:
## Known stack suffix:
## xtyp
## LR(1) items:
xtyps -> xtyp . [ BarGt ]
xtyps -> xtyp . Semi [ BarGt ]
xtyps -> xtyp . Semi xtyps [ BarGt ]
## Transitions:
-- On Semi shift to state 133
## Reductions:
-- On BarGt reduce production xtyps -> xtyp

State 133:
## Known stack suffix:
## xtyp Semi
## LR(1) items:
xtyps -> xtyp Semi . [ BarGt ]
xtyps -> xtyp Semi . xtyps [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On xtyps shift to state 134
-- On xtyp shift to state 132
-- On x shift to state 135
## Reductions:
-- On BarGt reduce production xtyps -> xtyp Semi

State 134:
## Known stack suffix:
## xtyp Semi xtyps
## LR(1) items:
xtyps -> xtyp Semi xtyps . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt reduce production xtyps -> xtyp Semi xtyps

State 135:
## Known stack suffix:
## x
## LR(1) items:
xtyp -> x . Colon typ [ Semi BarGt ]
## Transitions:
-- On Colon shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## x Colon
## LR(1) items:
xtyp -> x Colon . typ [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 137
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 137:
## Known stack suffix:
## x Colon typ
## LR(1) items:
xtyp -> x Colon typ . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi reduce production xtyp -> x Colon typ
-- On BarGt reduce production xtyp -> x Colon typ

State 138:
## Known stack suffix:
## Bar
## LR(1) items:
texp -> Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 142
-- On ctor_texp shift to state 143
## Reductions:

State 139:
## Known stack suffix:
## x
## LR(1) items:
ctor_texp -> x . Of star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
ctor_texp -> x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
-- On Of shift to state 140
## Reductions:
-- On Val reduce production ctor_texp -> x
-- On Type reduce production ctor_texp -> x
-- On Theorem reduce production ctor_texp -> x
-- On SemiSemi reduce production ctor_texp -> x
-- On Open_ reduce production ctor_texp -> x
-- On Module_ reduce production ctor_texp -> x
-- On Let_ reduce production ctor_texp -> x
-- On Lemma reduce production ctor_texp -> x
-- On Inst_default reduce production ctor_texp -> x
-- On Inst reduce production ctor_texp -> x
-- On Indreln reduce production ctor_texp -> x
-- On Include_ reduce production ctor_texp -> x
-- On Import_ reduce production ctor_texp -> x
-- On Eof reduce production ctor_texp -> x
-- On End reduce production ctor_texp -> x
-- On Declare reduce production ctor_texp -> x
-- On Class_ reduce production ctor_texp -> x
-- On Bar reduce production ctor_texp -> x
-- On Assert reduce production ctor_texp -> x
-- On And reduce production ctor_texp -> x

State 140:
## Known stack suffix:
## x Of
## LR(1) items:
ctor_texp -> x Of . star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 141
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 141:
## Known stack suffix:
## x Of star_typ_list
## LR(1) items:
ctor_texp -> x Of star_typ_list . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Bar Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production ctor_texp -> x Of star_typ_list
-- On Type reduce production ctor_texp -> x Of star_typ_list
-- On Theorem reduce production ctor_texp -> x Of star_typ_list
-- On SemiSemi reduce production ctor_texp -> x Of star_typ_list
-- On Open_ reduce production ctor_texp -> x Of star_typ_list
-- On Module_ reduce production ctor_texp -> x Of star_typ_list
-- On Let_ reduce production ctor_texp -> x Of star_typ_list
-- On Lemma reduce production ctor_texp -> x Of star_typ_list
-- On Inst_default reduce production ctor_texp -> x Of star_typ_list
-- On Inst reduce production ctor_texp -> x Of star_typ_list
-- On Indreln reduce production ctor_texp -> x Of star_typ_list
-- On Include_ reduce production ctor_texp -> x Of star_typ_list
-- On Import_ reduce production ctor_texp -> x Of star_typ_list
-- On Eof reduce production ctor_texp -> x Of star_typ_list
-- On End reduce production ctor_texp -> x Of star_typ_list
-- On Declare reduce production ctor_texp -> x Of star_typ_list
-- On Class_ reduce production ctor_texp -> x Of star_typ_list
-- On Bar reduce production ctor_texp -> x Of star_typ_list
-- On Assert reduce production ctor_texp -> x Of star_typ_list
-- On And reduce production ctor_texp -> x Of star_typ_list

State 142:
## Known stack suffix:
## Bar ctor_texps
## LR(1) items:
texp -> Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production texp -> Bar ctor_texps
-- On Type reduce production texp -> Bar ctor_texps
-- On Theorem reduce production texp -> Bar ctor_texps
-- On SemiSemi reduce production texp -> Bar ctor_texps
-- On Open_ reduce production texp -> Bar ctor_texps
-- On Module_ reduce production texp -> Bar ctor_texps
-- On Let_ reduce production texp -> Bar ctor_texps
-- On Lemma reduce production texp -> Bar ctor_texps
-- On Inst_default reduce production texp -> Bar ctor_texps
-- On Inst reduce production texp -> Bar ctor_texps
-- On Indreln reduce production texp -> Bar ctor_texps
-- On Include_ reduce production texp -> Bar ctor_texps
-- On Import_ reduce production texp -> Bar ctor_texps
-- On Eof reduce production texp -> Bar ctor_texps
-- On End reduce production texp -> Bar ctor_texps
-- On Declare reduce production texp -> Bar ctor_texps
-- On Class_ reduce production texp -> Bar ctor_texps
-- On Assert reduce production texp -> Bar ctor_texps
-- On And reduce production texp -> Bar ctor_texps

State 143:
## Known stack suffix:
## ctor_texp
## LR(1) items:
ctor_texps -> ctor_texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texps -> ctor_texp . Bar ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Bar shift to state 144
## Reductions:
-- On Val reduce production ctor_texps -> ctor_texp
-- On Type reduce production ctor_texps -> ctor_texp
-- On Theorem reduce production ctor_texps -> ctor_texp
-- On SemiSemi reduce production ctor_texps -> ctor_texp
-- On Open_ reduce production ctor_texps -> ctor_texp
-- On Module_ reduce production ctor_texps -> ctor_texp
-- On Let_ reduce production ctor_texps -> ctor_texp
-- On Lemma reduce production ctor_texps -> ctor_texp
-- On Inst_default reduce production ctor_texps -> ctor_texp
-- On Inst reduce production ctor_texps -> ctor_texp
-- On Indreln reduce production ctor_texps -> ctor_texp
-- On Include_ reduce production ctor_texps -> ctor_texp
-- On Import_ reduce production ctor_texps -> ctor_texp
-- On Eof reduce production ctor_texps -> ctor_texp
-- On End reduce production ctor_texps -> ctor_texp
-- On Declare reduce production ctor_texps -> ctor_texp
-- On Class_ reduce production ctor_texps -> ctor_texp
-- On Assert reduce production ctor_texps -> ctor_texp
-- On And reduce production ctor_texps -> ctor_texp

State 144:
## Known stack suffix:
## ctor_texp Bar
## LR(1) items:
ctor_texps -> ctor_texp Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 145
-- On ctor_texp shift to state 143
## Reductions:

State 145:
## Known stack suffix:
## ctor_texp Bar ctor_texps
## LR(1) items:
ctor_texps -> ctor_texp Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Type reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Theorem reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On SemiSemi reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Open_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Module_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Let_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Lemma reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Inst_default reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Inst reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Indreln reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Include_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Import_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Eof reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On End reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Declare reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Class_ reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On Assert reduce production ctor_texps -> ctor_texp Bar ctor_texps
-- On And reduce production ctor_texps -> ctor_texp Bar ctor_texps

State 146:
## Known stack suffix:
## x
## LR(1) items:
ctor_single_texp -> x . Of star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x . Of star_typ_list [ Bar ]
ctor_texp -> x . [ Bar ]
id_help -> x . [ X Val Under Tyvar Type Theorem Star SemiSemi Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow And ]
id_help -> x . Dot id_help [ X Val Under Tyvar Type Theorem Star SemiSemi Open_ Nvar Num Module_ Lparen Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ BacktickString Assert Arrow And ]
## Transitions:
-- On Of shift to state 147
-- On Dot shift to state 51
## Reductions:
-- On X reduce production id_help -> x
-- On Val reduce production id_help -> x
-- On Under reduce production id_help -> x
-- On Tyvar reduce production id_help -> x
-- On Type reduce production id_help -> x
-- On Theorem reduce production id_help -> x
-- On Star reduce production id_help -> x
-- On SemiSemi reduce production id_help -> x
-- On Open_ reduce production id_help -> x
-- On Nvar reduce production id_help -> x
-- On Num reduce production id_help -> x
-- On Module_ reduce production id_help -> x
-- On Lparen reduce production id_help -> x
-- On Let_ reduce production id_help -> x
-- On Lemma reduce production id_help -> x
-- On Inst_default reduce production id_help -> x
-- On Inst reduce production id_help -> x
-- On Indreln reduce production id_help -> x
-- On Include_ reduce production id_help -> x
-- On Import_ reduce production id_help -> x
-- On Eof reduce production id_help -> x
-- On End reduce production id_help -> x
-- On Declare reduce production id_help -> x
-- On Class_ reduce production id_help -> x
-- On Bar reduce production ctor_texp -> x
-- On BacktickString reduce production id_help -> x
-- On Assert reduce production id_help -> x
-- On Arrow reduce production id_help -> x
-- On And reduce production id_help -> x

State 147:
## Known stack suffix:
## x Of
## LR(1) items:
ctor_single_texp -> x Of . star_typ_list [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x Of . star_typ_list [ Bar ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On star_typ_list shift to state 148
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 148:
## Known stack suffix:
## x Of star_typ_list
## LR(1) items:
ctor_single_texp -> x Of star_typ_list . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
ctor_texp -> x Of star_typ_list . [ Bar ]
## Transitions:
## Reductions:
-- On Val reduce production ctor_single_texp -> x Of star_typ_list
-- On Type reduce production ctor_single_texp -> x Of star_typ_list
-- On Theorem reduce production ctor_single_texp -> x Of star_typ_list
-- On SemiSemi reduce production ctor_single_texp -> x Of star_typ_list
-- On Open_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Module_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Let_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Lemma reduce production ctor_single_texp -> x Of star_typ_list
-- On Inst_default reduce production ctor_single_texp -> x Of star_typ_list
-- On Inst reduce production ctor_single_texp -> x Of star_typ_list
-- On Indreln reduce production ctor_single_texp -> x Of star_typ_list
-- On Include_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Import_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Eof reduce production ctor_single_texp -> x Of star_typ_list
-- On End reduce production ctor_single_texp -> x Of star_typ_list
-- On Declare reduce production ctor_single_texp -> x Of star_typ_list
-- On Class_ reduce production ctor_single_texp -> x Of star_typ_list
-- On Bar reduce production ctor_texp -> x Of star_typ_list
-- On Assert reduce production ctor_single_texp -> x Of star_typ_list
-- On And reduce production ctor_single_texp -> x Of star_typ_list

State 149:
## Known stack suffix:
## typ
## LR(1) items:
texp -> typ . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production texp -> typ
-- On Type reduce production texp -> typ
-- On Theorem reduce production texp -> typ
-- On SemiSemi reduce production texp -> typ
-- On Open_ reduce production texp -> typ
-- On Module_ reduce production texp -> typ
-- On Let_ reduce production texp -> typ
-- On Lemma reduce production texp -> typ
-- On Inst_default reduce production texp -> typ
-- On Inst reduce production texp -> typ
-- On Indreln reduce production texp -> typ
-- On Include_ reduce production texp -> typ
-- On Import_ reduce production texp -> typ
-- On Eof reduce production texp -> typ
-- On End reduce production texp -> typ
-- On Declare reduce production texp -> typ
-- On Class_ reduce production texp -> typ
-- On Assert reduce production texp -> typ
-- On And reduce production texp -> typ

State 150:
## Known stack suffix:
## x tnvs Eq texp
## LR(1) items:
td -> x tnvs Eq texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production td -> x tnvs Eq texp
-- On Type reduce production td -> x tnvs Eq texp
-- On Theorem reduce production td -> x tnvs Eq texp
-- On SemiSemi reduce production td -> x tnvs Eq texp
-- On Open_ reduce production td -> x tnvs Eq texp
-- On Module_ reduce production td -> x tnvs Eq texp
-- On Let_ reduce production td -> x tnvs Eq texp
-- On Lemma reduce production td -> x tnvs Eq texp
-- On Inst_default reduce production td -> x tnvs Eq texp
-- On Inst reduce production td -> x tnvs Eq texp
-- On Indreln reduce production td -> x tnvs Eq texp
-- On Include_ reduce production td -> x tnvs Eq texp
-- On Import_ reduce production td -> x tnvs Eq texp
-- On Eof reduce production td -> x tnvs Eq texp
-- On End reduce production td -> x tnvs Eq texp
-- On Declare reduce production td -> x tnvs Eq texp
-- On Class_ reduce production td -> x tnvs Eq texp
-- On Assert reduce production td -> x tnvs Eq texp
-- On And reduce production td -> x tnvs Eq texp

State 151:
## Known stack suffix:
## ctor_texp
## LR(1) items:
texp -> ctor_texp . Bar ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Bar shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## ctor_texp Bar
## LR(1) items:
texp -> ctor_texp Bar . ctor_texps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 139
-- On ctor_texps shift to state 153
-- On ctor_texp shift to state 143
## Reductions:

State 153:
## Known stack suffix:
## ctor_texp Bar ctor_texps
## LR(1) items:
texp -> ctor_texp Bar ctor_texps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production texp -> ctor_texp Bar ctor_texps
-- On Type reduce production texp -> ctor_texp Bar ctor_texps
-- On Theorem reduce production texp -> ctor_texp Bar ctor_texps
-- On SemiSemi reduce production texp -> ctor_texp Bar ctor_texps
-- On Open_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Module_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Let_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Lemma reduce production texp -> ctor_texp Bar ctor_texps
-- On Inst_default reduce production texp -> ctor_texp Bar ctor_texps
-- On Inst reduce production texp -> ctor_texp Bar ctor_texps
-- On Indreln reduce production texp -> ctor_texp Bar ctor_texps
-- On Include_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Import_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Eof reduce production texp -> ctor_texp Bar ctor_texps
-- On End reduce production texp -> ctor_texp Bar ctor_texps
-- On Declare reduce production texp -> ctor_texp Bar ctor_texps
-- On Class_ reduce production texp -> ctor_texp Bar ctor_texps
-- On Assert reduce production texp -> ctor_texp Bar ctor_texps
-- On And reduce production texp -> ctor_texp Bar ctor_texps

State 154:
## Known stack suffix:
## ctor_single_texp
## LR(1) items:
texp -> ctor_single_texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production texp -> ctor_single_texp
-- On Type reduce production texp -> ctor_single_texp
-- On Theorem reduce production texp -> ctor_single_texp
-- On SemiSemi reduce production texp -> ctor_single_texp
-- On Open_ reduce production texp -> ctor_single_texp
-- On Module_ reduce production texp -> ctor_single_texp
-- On Let_ reduce production texp -> ctor_single_texp
-- On Lemma reduce production texp -> ctor_single_texp
-- On Inst_default reduce production texp -> ctor_single_texp
-- On Inst reduce production texp -> ctor_single_texp
-- On Indreln reduce production texp -> ctor_single_texp
-- On Include_ reduce production texp -> ctor_single_texp
-- On Import_ reduce production texp -> ctor_single_texp
-- On Eof reduce production texp -> ctor_single_texp
-- On End reduce production texp -> ctor_single_texp
-- On Declare reduce production texp -> ctor_single_texp
-- On Class_ reduce production texp -> ctor_single_texp
-- On Assert reduce production texp -> ctor_single_texp
-- On And reduce production texp -> ctor_single_texp

State 155:
## Known stack suffix:
## x tnvs name_sect
## LR(1) items:
td -> x tnvs name_sect . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
td -> x tnvs name_sect . Eq texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Eq shift to state 156
## Reductions:
-- On Val reduce production td -> x tnvs name_sect
-- On Type reduce production td -> x tnvs name_sect
-- On Theorem reduce production td -> x tnvs name_sect
-- On SemiSemi reduce production td -> x tnvs name_sect
-- On Open_ reduce production td -> x tnvs name_sect
-- On Module_ reduce production td -> x tnvs name_sect
-- On Let_ reduce production td -> x tnvs name_sect
-- On Lemma reduce production td -> x tnvs name_sect
-- On Inst_default reduce production td -> x tnvs name_sect
-- On Inst reduce production td -> x tnvs name_sect
-- On Indreln reduce production td -> x tnvs name_sect
-- On Include_ reduce production td -> x tnvs name_sect
-- On Import_ reduce production td -> x tnvs name_sect
-- On Eof reduce production td -> x tnvs name_sect
-- On End reduce production td -> x tnvs name_sect
-- On Declare reduce production td -> x tnvs name_sect
-- On Class_ reduce production td -> x tnvs name_sect
-- On Assert reduce production td -> x tnvs name_sect
-- On And reduce production td -> x tnvs name_sect

State 156:
## Known stack suffix:
## x tnvs name_sect Eq
## LR(1) items:
td -> x tnvs name_sect Eq . texp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On LtBar shift to state 129
-- On Lparen shift to state 45
-- On Bar shift to state 138
-- On BacktickString shift to state 46
-- On x shift to state 146
-- On typ shift to state 149
-- On texp shift to state 157
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On ctor_texp shift to state 151
-- On ctor_single_texp shift to state 154
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 157:
## Known stack suffix:
## x tnvs name_sect Eq texp
## LR(1) items:
td -> x tnvs name_sect Eq texp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production td -> x tnvs name_sect Eq texp
-- On Type reduce production td -> x tnvs name_sect Eq texp
-- On Theorem reduce production td -> x tnvs name_sect Eq texp
-- On SemiSemi reduce production td -> x tnvs name_sect Eq texp
-- On Open_ reduce production td -> x tnvs name_sect Eq texp
-- On Module_ reduce production td -> x tnvs name_sect Eq texp
-- On Let_ reduce production td -> x tnvs name_sect Eq texp
-- On Lemma reduce production td -> x tnvs name_sect Eq texp
-- On Inst_default reduce production td -> x tnvs name_sect Eq texp
-- On Inst reduce production td -> x tnvs name_sect Eq texp
-- On Indreln reduce production td -> x tnvs name_sect Eq texp
-- On Include_ reduce production td -> x tnvs name_sect Eq texp
-- On Import_ reduce production td -> x tnvs name_sect Eq texp
-- On Eof reduce production td -> x tnvs name_sect Eq texp
-- On End reduce production td -> x tnvs name_sect Eq texp
-- On Declare reduce production td -> x tnvs name_sect Eq texp
-- On Class_ reduce production td -> x tnvs name_sect Eq texp
-- On Assert reduce production td -> x tnvs name_sect Eq texp
-- On And reduce production td -> x tnvs name_sect Eq texp

State 158:
## Known stack suffix:
## Type tds
## LR(1) items:
def -> Type tds . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Type tds
-- On Type reduce production def -> Type tds
-- On Theorem reduce production def -> Type tds
-- On SemiSemi reduce production def -> Type tds
-- On Open_ reduce production def -> Type tds
-- On Module_ reduce production def -> Type tds
-- On Let_ reduce production def -> Type tds
-- On Lemma reduce production def -> Type tds
-- On Inst_default reduce production def -> Type tds
-- On Inst reduce production def -> Type tds
-- On Indreln reduce production def -> Type tds
-- On Include_ reduce production def -> Type tds
-- On Import_ reduce production def -> Type tds
-- On Eof reduce production def -> Type tds
-- On End reduce production def -> Type tds
-- On Declare reduce production def -> Type tds
-- On Class_ reduce production def -> Type tds
-- On Assert reduce production def -> Type tds

State 159:
## Known stack suffix:
## td
## LR(1) items:
tds -> td . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
tds -> td . And tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 160
## Reductions:
-- On Val reduce production tds -> td
-- On Type reduce production tds -> td
-- On Theorem reduce production tds -> td
-- On SemiSemi reduce production tds -> td
-- On Open_ reduce production tds -> td
-- On Module_ reduce production tds -> td
-- On Let_ reduce production tds -> td
-- On Lemma reduce production tds -> td
-- On Inst_default reduce production tds -> td
-- On Inst reduce production tds -> td
-- On Indreln reduce production tds -> td
-- On Include_ reduce production tds -> td
-- On Import_ reduce production tds -> td
-- On Eof reduce production tds -> td
-- On End reduce production tds -> td
-- On Declare reduce production tds -> td
-- On Class_ reduce production tds -> td
-- On Assert reduce production tds -> td

State 160:
## Known stack suffix:
## td And
## LR(1) items:
tds -> td And . tds [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 121
-- On tds shift to state 161
-- On td shift to state 159
## Reductions:

State 161:
## Known stack suffix:
## td And tds
## LR(1) items:
tds -> td And tds . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production tds -> td And tds
-- On Type reduce production tds -> td And tds
-- On Theorem reduce production tds -> td And tds
-- On SemiSemi reduce production tds -> td And tds
-- On Open_ reduce production tds -> td And tds
-- On Module_ reduce production tds -> td And tds
-- On Let_ reduce production tds -> td And tds
-- On Lemma reduce production tds -> td And tds
-- On Inst_default reduce production tds -> td And tds
-- On Inst reduce production tds -> td And tds
-- On Indreln reduce production tds -> td And tds
-- On Include_ reduce production tds -> td And tds
-- On Import_ reduce production tds -> td And tds
-- On Eof reduce production tds -> td And tds
-- On End reduce production tds -> td And tds
-- On Declare reduce production tds -> td And tds
-- On Class_ reduce production tds -> td And tds
-- On Assert reduce production tds -> td And tds

State 162:
## Known stack suffix:
## Theorem
## LR(1) items:
lemma_typ -> Theorem . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X reduce production lemma_typ -> Theorem
-- On NonExec reduce production lemma_typ -> Theorem
-- On NegLcurly reduce production lemma_typ -> Theorem
-- On Lparen reduce production lemma_typ -> Theorem
-- On Lcurly reduce production lemma_typ -> Theorem

State 163:
## Known stack suffix:
## Open_
## LR(1) items:
open_import -> Open_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
open_import -> Open_ . Import_ [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
-- On Import_ shift to state 164
## Reductions:
-- On X reduce production open_import -> Open_
-- On NonExec reduce production open_import -> Open_
-- On NegLcurly reduce production open_import -> Open_
-- On Lparen reduce production open_import -> Open_
-- On Lcurly reduce production open_import -> Open_
-- On BacktickString reduce production open_import -> Open_

State 164:
## Known stack suffix:
## Open_ Import_
## LR(1) items:
open_import -> Open_ Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X reduce production open_import -> Open_ Import_
-- On NonExec reduce production open_import -> Open_ Import_
-- On NegLcurly reduce production open_import -> Open_ Import_
-- On Lparen reduce production open_import -> Open_ Import_
-- On Lcurly reduce production open_import -> Open_ Import_
-- On BacktickString reduce production open_import -> Open_ Import_

State 165:
## Known stack suffix:
## Module_
## LR(1) items:
def -> Module_ . x Eq Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ . x Eq id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## Module_ x
## LR(1) items:
def -> Module_ x . Eq Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ x . Eq id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## Module_ x Eq
## LR(1) items:
def -> Module_ x Eq . Struct defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Module_ x Eq . id [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Struct shift to state 168
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 729
## Reductions:

State 168:
## Known stack suffix:
## Module_ x Eq Struct
## LR(1) items:
def -> Module_ x Eq Struct . defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 721
-- On defs shift to state 722
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:

State 169:
## Known stack suffix:
## Let_
## LR(1) items:
val_def -> Let_ . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Rec targets_opt funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Inline targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
val_def -> Let_ . Lem_transform targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rec shift to state 170
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lem_transform shift to state 498
-- On Lcurly shift to state 179
-- On Inline shift to state 501
-- On targets_opt shift to state 504
## Reductions:
-- On X reduce production targets_opt ->
-- On Under reduce production targets_opt ->
-- On True reduce production targets_opt ->
-- On String reduce production targets_opt ->
-- On OctNum reduce production targets_opt ->
-- On Num reduce production targets_opt ->
-- On LtBar reduce production targets_opt ->
-- On Lsquare reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->
-- On HexNum reduce production targets_opt ->
-- On Hex reduce production targets_opt ->
-- On HashZero reduce production targets_opt ->
-- On HashOne reduce production targets_opt ->
-- On False reduce production targets_opt ->
-- On Char reduce production targets_opt ->
-- On BraceBar reduce production targets_opt ->
-- On BinNum reduce production targets_opt ->
-- On Bin reduce production targets_opt ->

State 170:
## Known stack suffix:
## Let_ Rec
## LR(1) items:
val_def -> Let_ Rec . targets_opt funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 183
## Reductions:
-- On X reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->

State 171:
## Known stack suffix:
## NonExec
## LR(1) items:
targets_opt -> NonExec . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X reduce production targets_opt -> NonExec
-- On Under reduce production targets_opt -> NonExec
-- On True reduce production targets_opt -> NonExec
-- On TerminationArgument reduce production targets_opt -> NonExec
-- On String reduce production targets_opt -> NonExec
-- On Rename reduce production targets_opt -> NonExec
-- On PatternMatch reduce production targets_opt -> NonExec
-- On OctNum reduce production targets_opt -> NonExec
-- On Num reduce production targets_opt -> NonExec
-- On LtBar reduce production targets_opt -> NonExec
-- On Lsquare reduce production targets_opt -> NonExec
-- On Lparen reduce production targets_opt -> NonExec
-- On HexNum reduce production targets_opt -> NonExec
-- On Hex reduce production targets_opt -> NonExec
-- On HashZero reduce production targets_opt -> NonExec
-- On HashOne reduce production targets_opt -> NonExec
-- On False reduce production targets_opt -> NonExec
-- On CompileMessage reduce production targets_opt -> NonExec
-- On Char reduce production targets_opt -> NonExec
-- On BraceBar reduce production targets_opt -> NonExec
-- On BinNum reduce production targets_opt -> NonExec
-- On Bin reduce production targets_opt -> NonExec
-- On BacktickString reduce production targets_opt -> NonExec
-- On AsciiRep reduce production targets_opt -> NonExec

State 172:
## Known stack suffix:
## NegLcurly
## LR(1) items:
targets_opt -> NegLcurly . targets Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On X shift to state 173
-- On targets shift to state 174
-- On target shift to state 176
## Reductions:

State 173:
## Known stack suffix:
## X
## LR(1) items:
target -> X . [ TargetRep Semi Rcurly ]
## Transitions:
## Reductions:
-- On TargetRep reduce production target -> X
-- On Semi reduce production target -> X
-- On Rcurly reduce production target -> X

State 174:
## Known stack suffix:
## NegLcurly targets
## LR(1) items:
targets_opt -> NegLcurly targets . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On Rcurly shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## NegLcurly targets Rcurly
## LR(1) items:
targets_opt -> NegLcurly targets Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X reduce production targets_opt -> NegLcurly targets Rcurly
-- On Under reduce production targets_opt -> NegLcurly targets Rcurly
-- On True reduce production targets_opt -> NegLcurly targets Rcurly
-- On TerminationArgument reduce production targets_opt -> NegLcurly targets Rcurly
-- On String reduce production targets_opt -> NegLcurly targets Rcurly
-- On Rename reduce production targets_opt -> NegLcurly targets Rcurly
-- On PatternMatch reduce production targets_opt -> NegLcurly targets Rcurly
-- On OctNum reduce production targets_opt -> NegLcurly targets Rcurly
-- On Num reduce production targets_opt -> NegLcurly targets Rcurly
-- On LtBar reduce production targets_opt -> NegLcurly targets Rcurly
-- On Lsquare reduce production targets_opt -> NegLcurly targets Rcurly
-- On Lparen reduce production targets_opt -> NegLcurly targets Rcurly
-- On HexNum reduce production targets_opt -> NegLcurly targets Rcurly
-- On Hex reduce production targets_opt -> NegLcurly targets Rcurly
-- On HashZero reduce production targets_opt -> NegLcurly targets Rcurly
-- On HashOne reduce production targets_opt -> NegLcurly targets Rcurly
-- On False reduce production targets_opt -> NegLcurly targets Rcurly
-- On CompileMessage reduce production targets_opt -> NegLcurly targets Rcurly
-- On Char reduce production targets_opt -> NegLcurly targets Rcurly
-- On BraceBar reduce production targets_opt -> NegLcurly targets Rcurly
-- On BinNum reduce production targets_opt -> NegLcurly targets Rcurly
-- On Bin reduce production targets_opt -> NegLcurly targets Rcurly
-- On BacktickString reduce production targets_opt -> NegLcurly targets Rcurly
-- On AsciiRep reduce production targets_opt -> NegLcurly targets Rcurly

State 176:
## Known stack suffix:
## target
## LR(1) items:
targets -> target . [ Rcurly ]
targets -> target . Semi targets [ Rcurly ]
## Transitions:
-- On Semi shift to state 177
## Reductions:
-- On Rcurly reduce production targets -> target

State 177:
## Known stack suffix:
## target Semi
## LR(1) items:
targets -> target Semi . targets [ Rcurly ]
## Transitions:
-- On X shift to state 173
-- On targets shift to state 178
-- On target shift to state 176
## Reductions:

State 178:
## Known stack suffix:
## target Semi targets
## LR(1) items:
targets -> target Semi targets . [ Rcurly ]
## Transitions:
## Reductions:
-- On Rcurly reduce production targets -> target Semi targets

State 179:
## Known stack suffix:
## Lcurly
## LR(1) items:
targets_opt -> Lcurly . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
targets_opt -> Lcurly . targets Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On X shift to state 173
-- On Rcurly shift to state 180
-- On targets shift to state 181
-- On target shift to state 176
## Reductions:

State 180:
## Known stack suffix:
## Lcurly Rcurly
## LR(1) items:
targets_opt -> Lcurly Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X reduce production targets_opt -> Lcurly Rcurly
-- On Under reduce production targets_opt -> Lcurly Rcurly
-- On True reduce production targets_opt -> Lcurly Rcurly
-- On TerminationArgument reduce production targets_opt -> Lcurly Rcurly
-- On String reduce production targets_opt -> Lcurly Rcurly
-- On Rename reduce production targets_opt -> Lcurly Rcurly
-- On PatternMatch reduce production targets_opt -> Lcurly Rcurly
-- On OctNum reduce production targets_opt -> Lcurly Rcurly
-- On Num reduce production targets_opt -> Lcurly Rcurly
-- On LtBar reduce production targets_opt -> Lcurly Rcurly
-- On Lsquare reduce production targets_opt -> Lcurly Rcurly
-- On Lparen reduce production targets_opt -> Lcurly Rcurly
-- On HexNum reduce production targets_opt -> Lcurly Rcurly
-- On Hex reduce production targets_opt -> Lcurly Rcurly
-- On HashZero reduce production targets_opt -> Lcurly Rcurly
-- On HashOne reduce production targets_opt -> Lcurly Rcurly
-- On False reduce production targets_opt -> Lcurly Rcurly
-- On CompileMessage reduce production targets_opt -> Lcurly Rcurly
-- On Char reduce production targets_opt -> Lcurly Rcurly
-- On BraceBar reduce production targets_opt -> Lcurly Rcurly
-- On BinNum reduce production targets_opt -> Lcurly Rcurly
-- On Bin reduce production targets_opt -> Lcurly Rcurly
-- On BacktickString reduce production targets_opt -> Lcurly Rcurly
-- On AsciiRep reduce production targets_opt -> Lcurly Rcurly

State 181:
## Known stack suffix:
## Lcurly targets
## LR(1) items:
targets_opt -> Lcurly targets . Rcurly [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
-- On Rcurly shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## Lcurly targets Rcurly
## LR(1) items:
targets_opt -> Lcurly targets Rcurly . [ X Under True TerminationArgument String Rename PatternMatch OctNum Num LtBar Lsquare Lparen HexNum Hex HashZero HashOne False CompileMessage Char BraceBar BinNum Bin BacktickString AsciiRep ]
## Transitions:
## Reductions:
-- On X reduce production targets_opt -> Lcurly targets Rcurly
-- On Under reduce production targets_opt -> Lcurly targets Rcurly
-- On True reduce production targets_opt -> Lcurly targets Rcurly
-- On TerminationArgument reduce production targets_opt -> Lcurly targets Rcurly
-- On String reduce production targets_opt -> Lcurly targets Rcurly
-- On Rename reduce production targets_opt -> Lcurly targets Rcurly
-- On PatternMatch reduce production targets_opt -> Lcurly targets Rcurly
-- On OctNum reduce production targets_opt -> Lcurly targets Rcurly
-- On Num reduce production targets_opt -> Lcurly targets Rcurly
-- On LtBar reduce production targets_opt -> Lcurly targets Rcurly
-- On Lsquare reduce production targets_opt -> Lcurly targets Rcurly
-- On Lparen reduce production targets_opt -> Lcurly targets Rcurly
-- On HexNum reduce production targets_opt -> Lcurly targets Rcurly
-- On Hex reduce production targets_opt -> Lcurly targets Rcurly
-- On HashZero reduce production targets_opt -> Lcurly targets Rcurly
-- On HashOne reduce production targets_opt -> Lcurly targets Rcurly
-- On False reduce production targets_opt -> Lcurly targets Rcurly
-- On CompileMessage reduce production targets_opt -> Lcurly targets Rcurly
-- On Char reduce production targets_opt -> Lcurly targets Rcurly
-- On BraceBar reduce production targets_opt -> Lcurly targets Rcurly
-- On BinNum reduce production targets_opt -> Lcurly targets Rcurly
-- On Bin reduce production targets_opt -> Lcurly targets Rcurly
-- On BacktickString reduce production targets_opt -> Lcurly targets Rcurly
-- On AsciiRep reduce production targets_opt -> Lcurly targets Rcurly

State 183:
## Known stack suffix:
## Let_ Rec targets_opt
## LR(1) items:
val_def -> Let_ Rec targets_opt . funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 184
-- On funcls shift to state 494
-- On funcl shift to state 495
## Reductions:

State 184:
## Known stack suffix:
## x
## LR(1) items:
funcl -> x . atomic_pats1 opt_typ_annot Eq exp [ And ]
funcls -> x . atomic_pats1 opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 253
-- On atomic_pat shift to state 426
## Reductions:

State 185:
## Known stack suffix:
## Under
## LR(1) items:
atomic_pat -> Under . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Under
-- On Under reduce production atomic_pat -> Under
-- On True reduce production atomic_pat -> Under
-- On String reduce production atomic_pat -> Under
-- On Semi reduce production atomic_pat -> Under
-- On Rsquare reduce production atomic_pat -> Under
-- On Rparen reduce production atomic_pat -> Under
-- On OctNum reduce production atomic_pat -> Under
-- On Num reduce production atomic_pat -> Under
-- On MEM reduce production atomic_pat -> Under
-- On LtBar reduce production atomic_pat -> Under
-- On Lsquare reduce production atomic_pat -> Under
-- On Lparen reduce production atomic_pat -> Under
-- On LeftArrow reduce production atomic_pat -> Under
-- On IN reduce production atomic_pat -> Under
-- On HexNum reduce production atomic_pat -> Under
-- On Hex reduce production atomic_pat -> Under
-- On HashZero reduce production atomic_pat -> Under
-- On HashOne reduce production atomic_pat -> Under
-- On False reduce production atomic_pat -> Under
-- On Eq reduce production atomic_pat -> Under
-- On Comma reduce production atomic_pat -> Under
-- On ColonColon reduce production atomic_pat -> Under
-- On Colon reduce production atomic_pat -> Under
-- On Char reduce production atomic_pat -> Under
-- On BraceBar reduce production atomic_pat -> Under
-- On BinNum reduce production atomic_pat -> Under
-- On Bin reduce production atomic_pat -> Under
-- On BarGt reduce production atomic_pat -> Under
-- On BarBrace reduce production atomic_pat -> Under
-- On As reduce production atomic_pat -> Under
-- On Arrow reduce production atomic_pat -> Under

State 186:
## Known stack suffix:
## True
## LR(1) items:
lit -> True . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> True
-- On With reduce production lit -> True
-- On Val reduce production lit -> True
-- On Under reduce production lit -> True
-- On Type reduce production lit -> True
-- On True reduce production lit -> True
-- On Theorem reduce production lit -> True
-- On Then reduce production lit -> True
-- On String reduce production lit -> True
-- On StarstarX reduce production lit -> True
-- On StarX reduce production lit -> True
-- On Star reduce production lit -> True
-- On SemiSemi reduce production lit -> True
-- On Semi reduce production lit -> True
-- On Rsquare reduce production lit -> True
-- On Rparen reduce production lit -> True
-- On Rcurly reduce production lit -> True
-- On PlusX reduce production lit -> True
-- On Plus reduce production lit -> True
-- On Open_ reduce production lit -> True
-- On OctNum reduce production lit -> True
-- On Nvar reduce production lit -> True
-- On Num reduce production lit -> True
-- On Module_ reduce production lit -> True
-- On MinusMinusGt reduce production lit -> True
-- On Match reduce production lit -> True
-- On MEM reduce production lit -> True
-- On LtBar reduce production lit -> True
-- On Lsquare reduce production lit -> True
-- On Lparen reduce production lit -> True
-- On Let_ reduce production lit -> True
-- On Lemma reduce production lit -> True
-- On LeftArrow reduce production lit -> True
-- On Lcurly reduce production lit -> True
-- On Inst_default reduce production lit -> True
-- On Inst reduce production lit -> True
-- On Indreln reduce production lit -> True
-- On Include_ reduce production lit -> True
-- On In reduce production lit -> True
-- On Import_ reduce production lit -> True
-- On IN reduce production lit -> True
-- On HexNum reduce production lit -> True
-- On Hex reduce production lit -> True
-- On HashZero reduce production lit -> True
-- On HashOne reduce production lit -> True
-- On GtEqX reduce production lit -> True
-- On GtEq reduce production lit -> True
-- On Function_ reduce production lit -> True
-- On False reduce production lit -> True
-- On EqualX reduce production lit -> True
-- On EqEqGt reduce production lit -> True
-- On Eq reduce production lit -> True
-- On Eof reduce production lit -> True
-- On End reduce production lit -> True
-- On Else reduce production lit -> True
-- On DotBrace reduce production lit -> True
-- On Dot reduce production lit -> True
-- On Do reduce production lit -> True
-- On Declare reduce production lit -> True
-- On Comma reduce production lit -> True
-- On ColonColon reduce production lit -> True
-- On Colon reduce production lit -> True
-- On Class_ reduce production lit -> True
-- On Char reduce production lit -> True
-- On BraceBar reduce production lit -> True
-- On BinNum reduce production lit -> True
-- On Bin reduce production lit -> True
-- On Begin_ reduce production lit -> True
-- On BarGt reduce production lit -> True
-- On BarBrace reduce production lit -> True
-- On BarBar reduce production lit -> True
-- On Bar reduce production lit -> True
-- On BacktickString reduce production lit -> True
-- On AtX reduce production lit -> True
-- On At reduce production lit -> True
-- On Assert reduce production lit -> True
-- On As reduce production lit -> True
-- On Arrow reduce production lit -> True
-- On And reduce production lit -> True
-- On AmpAmp reduce production lit -> True

State 187:
## Known stack suffix:
## String
## LR(1) items:
lit -> String . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> String
-- On With reduce production lit -> String
-- On Val reduce production lit -> String
-- On Under reduce production lit -> String
-- On Type reduce production lit -> String
-- On True reduce production lit -> String
-- On Theorem reduce production lit -> String
-- On Then reduce production lit -> String
-- On String reduce production lit -> String
-- On StarstarX reduce production lit -> String
-- On StarX reduce production lit -> String
-- On Star reduce production lit -> String
-- On SemiSemi reduce production lit -> String
-- On Semi reduce production lit -> String
-- On Rsquare reduce production lit -> String
-- On Rparen reduce production lit -> String
-- On Rcurly reduce production lit -> String
-- On PlusX reduce production lit -> String
-- On Plus reduce production lit -> String
-- On Open_ reduce production lit -> String
-- On OctNum reduce production lit -> String
-- On Nvar reduce production lit -> String
-- On Num reduce production lit -> String
-- On Module_ reduce production lit -> String
-- On MinusMinusGt reduce production lit -> String
-- On Match reduce production lit -> String
-- On MEM reduce production lit -> String
-- On LtBar reduce production lit -> String
-- On Lsquare reduce production lit -> String
-- On Lparen reduce production lit -> String
-- On Let_ reduce production lit -> String
-- On Lemma reduce production lit -> String
-- On LeftArrow reduce production lit -> String
-- On Lcurly reduce production lit -> String
-- On Inst_default reduce production lit -> String
-- On Inst reduce production lit -> String
-- On Indreln reduce production lit -> String
-- On Include_ reduce production lit -> String
-- On In reduce production lit -> String
-- On Import_ reduce production lit -> String
-- On IN reduce production lit -> String
-- On HexNum reduce production lit -> String
-- On Hex reduce production lit -> String
-- On HashZero reduce production lit -> String
-- On HashOne reduce production lit -> String
-- On GtEqX reduce production lit -> String
-- On GtEq reduce production lit -> String
-- On Function_ reduce production lit -> String
-- On False reduce production lit -> String
-- On EqualX reduce production lit -> String
-- On EqEqGt reduce production lit -> String
-- On Eq reduce production lit -> String
-- On Eof reduce production lit -> String
-- On End reduce production lit -> String
-- On Else reduce production lit -> String
-- On DotBrace reduce production lit -> String
-- On Dot reduce production lit -> String
-- On Do reduce production lit -> String
-- On Declare reduce production lit -> String
-- On Comma reduce production lit -> String
-- On ColonColon reduce production lit -> String
-- On Colon reduce production lit -> String
-- On Class_ reduce production lit -> String
-- On Char reduce production lit -> String
-- On BraceBar reduce production lit -> String
-- On BinNum reduce production lit -> String
-- On Bin reduce production lit -> String
-- On Begin_ reduce production lit -> String
-- On BarGt reduce production lit -> String
-- On BarBrace reduce production lit -> String
-- On BarBar reduce production lit -> String
-- On Bar reduce production lit -> String
-- On BacktickString reduce production lit -> String
-- On AtX reduce production lit -> String
-- On At reduce production lit -> String
-- On Assert reduce production lit -> String
-- On As reduce production lit -> String
-- On Arrow reduce production lit -> String
-- On And reduce production lit -> String
-- On AmpAmp reduce production lit -> String

State 188:
## Known stack suffix:
## OctNum
## LR(1) items:
lit -> OctNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> OctNum
-- On With reduce production lit -> OctNum
-- On Val reduce production lit -> OctNum
-- On Under reduce production lit -> OctNum
-- On Type reduce production lit -> OctNum
-- On True reduce production lit -> OctNum
-- On Theorem reduce production lit -> OctNum
-- On Then reduce production lit -> OctNum
-- On String reduce production lit -> OctNum
-- On StarstarX reduce production lit -> OctNum
-- On StarX reduce production lit -> OctNum
-- On Star reduce production lit -> OctNum
-- On SemiSemi reduce production lit -> OctNum
-- On Semi reduce production lit -> OctNum
-- On Rsquare reduce production lit -> OctNum
-- On Rparen reduce production lit -> OctNum
-- On Rcurly reduce production lit -> OctNum
-- On PlusX reduce production lit -> OctNum
-- On Plus reduce production lit -> OctNum
-- On Open_ reduce production lit -> OctNum
-- On OctNum reduce production lit -> OctNum
-- On Nvar reduce production lit -> OctNum
-- On Num reduce production lit -> OctNum
-- On Module_ reduce production lit -> OctNum
-- On MinusMinusGt reduce production lit -> OctNum
-- On Match reduce production lit -> OctNum
-- On MEM reduce production lit -> OctNum
-- On LtBar reduce production lit -> OctNum
-- On Lsquare reduce production lit -> OctNum
-- On Lparen reduce production lit -> OctNum
-- On Let_ reduce production lit -> OctNum
-- On Lemma reduce production lit -> OctNum
-- On LeftArrow reduce production lit -> OctNum
-- On Lcurly reduce production lit -> OctNum
-- On Inst_default reduce production lit -> OctNum
-- On Inst reduce production lit -> OctNum
-- On Indreln reduce production lit -> OctNum
-- On Include_ reduce production lit -> OctNum
-- On In reduce production lit -> OctNum
-- On Import_ reduce production lit -> OctNum
-- On IN reduce production lit -> OctNum
-- On HexNum reduce production lit -> OctNum
-- On Hex reduce production lit -> OctNum
-- On HashZero reduce production lit -> OctNum
-- On HashOne reduce production lit -> OctNum
-- On GtEqX reduce production lit -> OctNum
-- On GtEq reduce production lit -> OctNum
-- On Function_ reduce production lit -> OctNum
-- On False reduce production lit -> OctNum
-- On EqualX reduce production lit -> OctNum
-- On EqEqGt reduce production lit -> OctNum
-- On Eq reduce production lit -> OctNum
-- On Eof reduce production lit -> OctNum
-- On End reduce production lit -> OctNum
-- On Else reduce production lit -> OctNum
-- On DotBrace reduce production lit -> OctNum
-- On Dot reduce production lit -> OctNum
-- On Do reduce production lit -> OctNum
-- On Declare reduce production lit -> OctNum
-- On Comma reduce production lit -> OctNum
-- On ColonColon reduce production lit -> OctNum
-- On Colon reduce production lit -> OctNum
-- On Class_ reduce production lit -> OctNum
-- On Char reduce production lit -> OctNum
-- On BraceBar reduce production lit -> OctNum
-- On BinNum reduce production lit -> OctNum
-- On Bin reduce production lit -> OctNum
-- On Begin_ reduce production lit -> OctNum
-- On BarGt reduce production lit -> OctNum
-- On BarBrace reduce production lit -> OctNum
-- On BarBar reduce production lit -> OctNum
-- On Bar reduce production lit -> OctNum
-- On BacktickString reduce production lit -> OctNum
-- On AtX reduce production lit -> OctNum
-- On At reduce production lit -> OctNum
-- On Assert reduce production lit -> OctNum
-- On As reduce production lit -> OctNum
-- On Arrow reduce production lit -> OctNum
-- On And reduce production lit -> OctNum
-- On AmpAmp reduce production lit -> OctNum

State 189:
## Known stack suffix:
## Num
## LR(1) items:
lit -> Num . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> Num
-- On With reduce production lit -> Num
-- On Val reduce production lit -> Num
-- On Under reduce production lit -> Num
-- On Type reduce production lit -> Num
-- On True reduce production lit -> Num
-- On Theorem reduce production lit -> Num
-- On Then reduce production lit -> Num
-- On String reduce production lit -> Num
-- On StarstarX reduce production lit -> Num
-- On StarX reduce production lit -> Num
-- On Star reduce production lit -> Num
-- On SemiSemi reduce production lit -> Num
-- On Semi reduce production lit -> Num
-- On Rsquare reduce production lit -> Num
-- On Rparen reduce production lit -> Num
-- On Rcurly reduce production lit -> Num
-- On PlusX reduce production lit -> Num
-- On Plus reduce production lit -> Num
-- On Open_ reduce production lit -> Num
-- On OctNum reduce production lit -> Num
-- On Nvar reduce production lit -> Num
-- On Num reduce production lit -> Num
-- On Module_ reduce production lit -> Num
-- On MinusMinusGt reduce production lit -> Num
-- On Match reduce production lit -> Num
-- On MEM reduce production lit -> Num
-- On LtBar reduce production lit -> Num
-- On Lsquare reduce production lit -> Num
-- On Lparen reduce production lit -> Num
-- On Let_ reduce production lit -> Num
-- On Lemma reduce production lit -> Num
-- On LeftArrow reduce production lit -> Num
-- On Lcurly reduce production lit -> Num
-- On Inst_default reduce production lit -> Num
-- On Inst reduce production lit -> Num
-- On Indreln reduce production lit -> Num
-- On Include_ reduce production lit -> Num
-- On In reduce production lit -> Num
-- On Import_ reduce production lit -> Num
-- On IN reduce production lit -> Num
-- On HexNum reduce production lit -> Num
-- On Hex reduce production lit -> Num
-- On HashZero reduce production lit -> Num
-- On HashOne reduce production lit -> Num
-- On GtEqX reduce production lit -> Num
-- On GtEq reduce production lit -> Num
-- On Function_ reduce production lit -> Num
-- On False reduce production lit -> Num
-- On EqualX reduce production lit -> Num
-- On EqEqGt reduce production lit -> Num
-- On Eq reduce production lit -> Num
-- On Eof reduce production lit -> Num
-- On End reduce production lit -> Num
-- On Else reduce production lit -> Num
-- On DotBrace reduce production lit -> Num
-- On Dot reduce production lit -> Num
-- On Do reduce production lit -> Num
-- On Declare reduce production lit -> Num
-- On Comma reduce production lit -> Num
-- On ColonColon reduce production lit -> Num
-- On Colon reduce production lit -> Num
-- On Class_ reduce production lit -> Num
-- On Char reduce production lit -> Num
-- On BraceBar reduce production lit -> Num
-- On BinNum reduce production lit -> Num
-- On Bin reduce production lit -> Num
-- On Begin_ reduce production lit -> Num
-- On BarGt reduce production lit -> Num
-- On BarBrace reduce production lit -> Num
-- On BarBar reduce production lit -> Num
-- On Bar reduce production lit -> Num
-- On BacktickString reduce production lit -> Num
-- On AtX reduce production lit -> Num
-- On At reduce production lit -> Num
-- On Assert reduce production lit -> Num
-- On As reduce production lit -> Num
-- On Arrow reduce production lit -> Num
-- On And reduce production lit -> Num
-- On AmpAmp reduce production lit -> Num

State 190:
## Known stack suffix:
## LtBar
## LR(1) items:
atomic_pat -> LtBar . fpats BarGt [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 191
-- On fpats shift to state 248
-- On fpat shift to state 250
## Reductions:

State 191:
## Known stack suffix:
## id
## LR(1) items:
fpat -> id . Eq pat [ Semi BarGt ]
## Transitions:
-- On Eq shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## id Eq
## LR(1) items:
fpat -> id Eq . pat [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 247
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 193:
## Known stack suffix:
## Lsquare
## LR(1) items:
atomic_pat -> Lsquare . semi_pats Rsquare [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_help shift to state 241
-- On semi_pats shift to state 242
-- On pat shift to state 244
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On Rsquare reduce production semi_pats ->

State 194:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_pat -> Lparen . pat Colon typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . comma_pats Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . pat Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen . pat As x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
lit -> Lparen . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Eq Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . IN Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . MEM Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . MinusMinusGt Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . AmpAmp Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . BarBar Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . ColonColon Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Star Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . Plus Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . GtEq Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . PlusX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . StarX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . GtEqX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . EqualX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . StarstarX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . At Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
x -> Lparen . AtX Rparen [ X Under True String Semi Rsquare Rparen Plus OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Dot Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On Rparen shift to state 195
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On False shift to state 200
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 205
-- On pat shift to state 220
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On comma_pats shift to state 239
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 195:
## Known stack suffix:
## Lparen Rparen
## LR(1) items:
lit -> Lparen Rparen . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> Lparen Rparen
-- On With reduce production lit -> Lparen Rparen
-- On Val reduce production lit -> Lparen Rparen
-- On Under reduce production lit -> Lparen Rparen
-- On Type reduce production lit -> Lparen Rparen
-- On True reduce production lit -> Lparen Rparen
-- On Theorem reduce production lit -> Lparen Rparen
-- On Then reduce production lit -> Lparen Rparen
-- On String reduce production lit -> Lparen Rparen
-- On StarstarX reduce production lit -> Lparen Rparen
-- On StarX reduce production lit -> Lparen Rparen
-- On Star reduce production lit -> Lparen Rparen
-- On SemiSemi reduce production lit -> Lparen Rparen
-- On Semi reduce production lit -> Lparen Rparen
-- On Rsquare reduce production lit -> Lparen Rparen
-- On Rparen reduce production lit -> Lparen Rparen
-- On Rcurly reduce production lit -> Lparen Rparen
-- On PlusX reduce production lit -> Lparen Rparen
-- On Plus reduce production lit -> Lparen Rparen
-- On Open_ reduce production lit -> Lparen Rparen
-- On OctNum reduce production lit -> Lparen Rparen
-- On Nvar reduce production lit -> Lparen Rparen
-- On Num reduce production lit -> Lparen Rparen
-- On Module_ reduce production lit -> Lparen Rparen
-- On MinusMinusGt reduce production lit -> Lparen Rparen
-- On Match reduce production lit -> Lparen Rparen
-- On MEM reduce production lit -> Lparen Rparen
-- On LtBar reduce production lit -> Lparen Rparen
-- On Lsquare reduce production lit -> Lparen Rparen
-- On Lparen reduce production lit -> Lparen Rparen
-- On Let_ reduce production lit -> Lparen Rparen
-- On Lemma reduce production lit -> Lparen Rparen
-- On LeftArrow reduce production lit -> Lparen Rparen
-- On Lcurly reduce production lit -> Lparen Rparen
-- On Inst_default reduce production lit -> Lparen Rparen
-- On Inst reduce production lit -> Lparen Rparen
-- On Indreln reduce production lit -> Lparen Rparen
-- On Include_ reduce production lit -> Lparen Rparen
-- On In reduce production lit -> Lparen Rparen
-- On Import_ reduce production lit -> Lparen Rparen
-- On IN reduce production lit -> Lparen Rparen
-- On HexNum reduce production lit -> Lparen Rparen
-- On Hex reduce production lit -> Lparen Rparen
-- On HashZero reduce production lit -> Lparen Rparen
-- On HashOne reduce production lit -> Lparen Rparen
-- On GtEqX reduce production lit -> Lparen Rparen
-- On GtEq reduce production lit -> Lparen Rparen
-- On Function_ reduce production lit -> Lparen Rparen
-- On False reduce production lit -> Lparen Rparen
-- On EqualX reduce production lit -> Lparen Rparen
-- On EqEqGt reduce production lit -> Lparen Rparen
-- On Eq reduce production lit -> Lparen Rparen
-- On Eof reduce production lit -> Lparen Rparen
-- On End reduce production lit -> Lparen Rparen
-- On Else reduce production lit -> Lparen Rparen
-- On DotBrace reduce production lit -> Lparen Rparen
-- On Dot reduce production lit -> Lparen Rparen
-- On Do reduce production lit -> Lparen Rparen
-- On Declare reduce production lit -> Lparen Rparen
-- On Comma reduce production lit -> Lparen Rparen
-- On ColonColon reduce production lit -> Lparen Rparen
-- On Colon reduce production lit -> Lparen Rparen
-- On Class_ reduce production lit -> Lparen Rparen
-- On Char reduce production lit -> Lparen Rparen
-- On BraceBar reduce production lit -> Lparen Rparen
-- On BinNum reduce production lit -> Lparen Rparen
-- On Bin reduce production lit -> Lparen Rparen
-- On Begin_ reduce production lit -> Lparen Rparen
-- On BarGt reduce production lit -> Lparen Rparen
-- On BarBrace reduce production lit -> Lparen Rparen
-- On BarBar reduce production lit -> Lparen Rparen
-- On Bar reduce production lit -> Lparen Rparen
-- On BacktickString reduce production lit -> Lparen Rparen
-- On AtX reduce production lit -> Lparen Rparen
-- On At reduce production lit -> Lparen Rparen
-- On Assert reduce production lit -> Lparen Rparen
-- On As reduce production lit -> Lparen Rparen
-- On Arrow reduce production lit -> Lparen Rparen
-- On And reduce production lit -> Lparen Rparen
-- On AmpAmp reduce production lit -> Lparen Rparen

State 196:
## Known stack suffix:
## HexNum
## LR(1) items:
lit -> HexNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> HexNum
-- On With reduce production lit -> HexNum
-- On Val reduce production lit -> HexNum
-- On Under reduce production lit -> HexNum
-- On Type reduce production lit -> HexNum
-- On True reduce production lit -> HexNum
-- On Theorem reduce production lit -> HexNum
-- On Then reduce production lit -> HexNum
-- On String reduce production lit -> HexNum
-- On StarstarX reduce production lit -> HexNum
-- On StarX reduce production lit -> HexNum
-- On Star reduce production lit -> HexNum
-- On SemiSemi reduce production lit -> HexNum
-- On Semi reduce production lit -> HexNum
-- On Rsquare reduce production lit -> HexNum
-- On Rparen reduce production lit -> HexNum
-- On Rcurly reduce production lit -> HexNum
-- On PlusX reduce production lit -> HexNum
-- On Plus reduce production lit -> HexNum
-- On Open_ reduce production lit -> HexNum
-- On OctNum reduce production lit -> HexNum
-- On Nvar reduce production lit -> HexNum
-- On Num reduce production lit -> HexNum
-- On Module_ reduce production lit -> HexNum
-- On MinusMinusGt reduce production lit -> HexNum
-- On Match reduce production lit -> HexNum
-- On MEM reduce production lit -> HexNum
-- On LtBar reduce production lit -> HexNum
-- On Lsquare reduce production lit -> HexNum
-- On Lparen reduce production lit -> HexNum
-- On Let_ reduce production lit -> HexNum
-- On Lemma reduce production lit -> HexNum
-- On LeftArrow reduce production lit -> HexNum
-- On Lcurly reduce production lit -> HexNum
-- On Inst_default reduce production lit -> HexNum
-- On Inst reduce production lit -> HexNum
-- On Indreln reduce production lit -> HexNum
-- On Include_ reduce production lit -> HexNum
-- On In reduce production lit -> HexNum
-- On Import_ reduce production lit -> HexNum
-- On IN reduce production lit -> HexNum
-- On HexNum reduce production lit -> HexNum
-- On Hex reduce production lit -> HexNum
-- On HashZero reduce production lit -> HexNum
-- On HashOne reduce production lit -> HexNum
-- On GtEqX reduce production lit -> HexNum
-- On GtEq reduce production lit -> HexNum
-- On Function_ reduce production lit -> HexNum
-- On False reduce production lit -> HexNum
-- On EqualX reduce production lit -> HexNum
-- On EqEqGt reduce production lit -> HexNum
-- On Eq reduce production lit -> HexNum
-- On Eof reduce production lit -> HexNum
-- On End reduce production lit -> HexNum
-- On Else reduce production lit -> HexNum
-- On DotBrace reduce production lit -> HexNum
-- On Dot reduce production lit -> HexNum
-- On Do reduce production lit -> HexNum
-- On Declare reduce production lit -> HexNum
-- On Comma reduce production lit -> HexNum
-- On ColonColon reduce production lit -> HexNum
-- On Colon reduce production lit -> HexNum
-- On Class_ reduce production lit -> HexNum
-- On Char reduce production lit -> HexNum
-- On BraceBar reduce production lit -> HexNum
-- On BinNum reduce production lit -> HexNum
-- On Bin reduce production lit -> HexNum
-- On Begin_ reduce production lit -> HexNum
-- On BarGt reduce production lit -> HexNum
-- On BarBrace reduce production lit -> HexNum
-- On BarBar reduce production lit -> HexNum
-- On Bar reduce production lit -> HexNum
-- On BacktickString reduce production lit -> HexNum
-- On AtX reduce production lit -> HexNum
-- On At reduce production lit -> HexNum
-- On Assert reduce production lit -> HexNum
-- On As reduce production lit -> HexNum
-- On Arrow reduce production lit -> HexNum
-- On And reduce production lit -> HexNum
-- On AmpAmp reduce production lit -> HexNum

State 197:
## Known stack suffix:
## Hex
## LR(1) items:
lit -> Hex . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> Hex
-- On With reduce production lit -> Hex
-- On Val reduce production lit -> Hex
-- On Under reduce production lit -> Hex
-- On Type reduce production lit -> Hex
-- On True reduce production lit -> Hex
-- On Theorem reduce production lit -> Hex
-- On Then reduce production lit -> Hex
-- On String reduce production lit -> Hex
-- On StarstarX reduce production lit -> Hex
-- On StarX reduce production lit -> Hex
-- On Star reduce production lit -> Hex
-- On SemiSemi reduce production lit -> Hex
-- On Semi reduce production lit -> Hex
-- On Rsquare reduce production lit -> Hex
-- On Rparen reduce production lit -> Hex
-- On Rcurly reduce production lit -> Hex
-- On PlusX reduce production lit -> Hex
-- On Plus reduce production lit -> Hex
-- On Open_ reduce production lit -> Hex
-- On OctNum reduce production lit -> Hex
-- On Nvar reduce production lit -> Hex
-- On Num reduce production lit -> Hex
-- On Module_ reduce production lit -> Hex
-- On MinusMinusGt reduce production lit -> Hex
-- On Match reduce production lit -> Hex
-- On MEM reduce production lit -> Hex
-- On LtBar reduce production lit -> Hex
-- On Lsquare reduce production lit -> Hex
-- On Lparen reduce production lit -> Hex
-- On Let_ reduce production lit -> Hex
-- On Lemma reduce production lit -> Hex
-- On LeftArrow reduce production lit -> Hex
-- On Lcurly reduce production lit -> Hex
-- On Inst_default reduce production lit -> Hex
-- On Inst reduce production lit -> Hex
-- On Indreln reduce production lit -> Hex
-- On Include_ reduce production lit -> Hex
-- On In reduce production lit -> Hex
-- On Import_ reduce production lit -> Hex
-- On IN reduce production lit -> Hex
-- On HexNum reduce production lit -> Hex
-- On Hex reduce production lit -> Hex
-- On HashZero reduce production lit -> Hex
-- On HashOne reduce production lit -> Hex
-- On GtEqX reduce production lit -> Hex
-- On GtEq reduce production lit -> Hex
-- On Function_ reduce production lit -> Hex
-- On False reduce production lit -> Hex
-- On EqualX reduce production lit -> Hex
-- On EqEqGt reduce production lit -> Hex
-- On Eq reduce production lit -> Hex
-- On Eof reduce production lit -> Hex
-- On End reduce production lit -> Hex
-- On Else reduce production lit -> Hex
-- On DotBrace reduce production lit -> Hex
-- On Dot reduce production lit -> Hex
-- On Do reduce production lit -> Hex
-- On Declare reduce production lit -> Hex
-- On Comma reduce production lit -> Hex
-- On ColonColon reduce production lit -> Hex
-- On Colon reduce production lit -> Hex
-- On Class_ reduce production lit -> Hex
-- On Char reduce production lit -> Hex
-- On BraceBar reduce production lit -> Hex
-- On BinNum reduce production lit -> Hex
-- On Bin reduce production lit -> Hex
-- On Begin_ reduce production lit -> Hex
-- On BarGt reduce production lit -> Hex
-- On BarBrace reduce production lit -> Hex
-- On BarBar reduce production lit -> Hex
-- On Bar reduce production lit -> Hex
-- On BacktickString reduce production lit -> Hex
-- On AtX reduce production lit -> Hex
-- On At reduce production lit -> Hex
-- On Assert reduce production lit -> Hex
-- On As reduce production lit -> Hex
-- On Arrow reduce production lit -> Hex
-- On And reduce production lit -> Hex
-- On AmpAmp reduce production lit -> Hex

State 198:
## Known stack suffix:
## HashZero
## LR(1) items:
lit -> HashZero . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> HashZero
-- On With reduce production lit -> HashZero
-- On Val reduce production lit -> HashZero
-- On Under reduce production lit -> HashZero
-- On Type reduce production lit -> HashZero
-- On True reduce production lit -> HashZero
-- On Theorem reduce production lit -> HashZero
-- On Then reduce production lit -> HashZero
-- On String reduce production lit -> HashZero
-- On StarstarX reduce production lit -> HashZero
-- On StarX reduce production lit -> HashZero
-- On Star reduce production lit -> HashZero
-- On SemiSemi reduce production lit -> HashZero
-- On Semi reduce production lit -> HashZero
-- On Rsquare reduce production lit -> HashZero
-- On Rparen reduce production lit -> HashZero
-- On Rcurly reduce production lit -> HashZero
-- On PlusX reduce production lit -> HashZero
-- On Plus reduce production lit -> HashZero
-- On Open_ reduce production lit -> HashZero
-- On OctNum reduce production lit -> HashZero
-- On Nvar reduce production lit -> HashZero
-- On Num reduce production lit -> HashZero
-- On Module_ reduce production lit -> HashZero
-- On MinusMinusGt reduce production lit -> HashZero
-- On Match reduce production lit -> HashZero
-- On MEM reduce production lit -> HashZero
-- On LtBar reduce production lit -> HashZero
-- On Lsquare reduce production lit -> HashZero
-- On Lparen reduce production lit -> HashZero
-- On Let_ reduce production lit -> HashZero
-- On Lemma reduce production lit -> HashZero
-- On LeftArrow reduce production lit -> HashZero
-- On Lcurly reduce production lit -> HashZero
-- On Inst_default reduce production lit -> HashZero
-- On Inst reduce production lit -> HashZero
-- On Indreln reduce production lit -> HashZero
-- On Include_ reduce production lit -> HashZero
-- On In reduce production lit -> HashZero
-- On Import_ reduce production lit -> HashZero
-- On IN reduce production lit -> HashZero
-- On HexNum reduce production lit -> HashZero
-- On Hex reduce production lit -> HashZero
-- On HashZero reduce production lit -> HashZero
-- On HashOne reduce production lit -> HashZero
-- On GtEqX reduce production lit -> HashZero
-- On GtEq reduce production lit -> HashZero
-- On Function_ reduce production lit -> HashZero
-- On False reduce production lit -> HashZero
-- On EqualX reduce production lit -> HashZero
-- On EqEqGt reduce production lit -> HashZero
-- On Eq reduce production lit -> HashZero
-- On Eof reduce production lit -> HashZero
-- On End reduce production lit -> HashZero
-- On Else reduce production lit -> HashZero
-- On DotBrace reduce production lit -> HashZero
-- On Dot reduce production lit -> HashZero
-- On Do reduce production lit -> HashZero
-- On Declare reduce production lit -> HashZero
-- On Comma reduce production lit -> HashZero
-- On ColonColon reduce production lit -> HashZero
-- On Colon reduce production lit -> HashZero
-- On Class_ reduce production lit -> HashZero
-- On Char reduce production lit -> HashZero
-- On BraceBar reduce production lit -> HashZero
-- On BinNum reduce production lit -> HashZero
-- On Bin reduce production lit -> HashZero
-- On Begin_ reduce production lit -> HashZero
-- On BarGt reduce production lit -> HashZero
-- On BarBrace reduce production lit -> HashZero
-- On BarBar reduce production lit -> HashZero
-- On Bar reduce production lit -> HashZero
-- On BacktickString reduce production lit -> HashZero
-- On AtX reduce production lit -> HashZero
-- On At reduce production lit -> HashZero
-- On Assert reduce production lit -> HashZero
-- On As reduce production lit -> HashZero
-- On Arrow reduce production lit -> HashZero
-- On And reduce production lit -> HashZero
-- On AmpAmp reduce production lit -> HashZero

State 199:
## Known stack suffix:
## HashOne
## LR(1) items:
lit -> HashOne . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> HashOne
-- On With reduce production lit -> HashOne
-- On Val reduce production lit -> HashOne
-- On Under reduce production lit -> HashOne
-- On Type reduce production lit -> HashOne
-- On True reduce production lit -> HashOne
-- On Theorem reduce production lit -> HashOne
-- On Then reduce production lit -> HashOne
-- On String reduce production lit -> HashOne
-- On StarstarX reduce production lit -> HashOne
-- On StarX reduce production lit -> HashOne
-- On Star reduce production lit -> HashOne
-- On SemiSemi reduce production lit -> HashOne
-- On Semi reduce production lit -> HashOne
-- On Rsquare reduce production lit -> HashOne
-- On Rparen reduce production lit -> HashOne
-- On Rcurly reduce production lit -> HashOne
-- On PlusX reduce production lit -> HashOne
-- On Plus reduce production lit -> HashOne
-- On Open_ reduce production lit -> HashOne
-- On OctNum reduce production lit -> HashOne
-- On Nvar reduce production lit -> HashOne
-- On Num reduce production lit -> HashOne
-- On Module_ reduce production lit -> HashOne
-- On MinusMinusGt reduce production lit -> HashOne
-- On Match reduce production lit -> HashOne
-- On MEM reduce production lit -> HashOne
-- On LtBar reduce production lit -> HashOne
-- On Lsquare reduce production lit -> HashOne
-- On Lparen reduce production lit -> HashOne
-- On Let_ reduce production lit -> HashOne
-- On Lemma reduce production lit -> HashOne
-- On LeftArrow reduce production lit -> HashOne
-- On Lcurly reduce production lit -> HashOne
-- On Inst_default reduce production lit -> HashOne
-- On Inst reduce production lit -> HashOne
-- On Indreln reduce production lit -> HashOne
-- On Include_ reduce production lit -> HashOne
-- On In reduce production lit -> HashOne
-- On Import_ reduce production lit -> HashOne
-- On IN reduce production lit -> HashOne
-- On HexNum reduce production lit -> HashOne
-- On Hex reduce production lit -> HashOne
-- On HashZero reduce production lit -> HashOne
-- On HashOne reduce production lit -> HashOne
-- On GtEqX reduce production lit -> HashOne
-- On GtEq reduce production lit -> HashOne
-- On Function_ reduce production lit -> HashOne
-- On False reduce production lit -> HashOne
-- On EqualX reduce production lit -> HashOne
-- On EqEqGt reduce production lit -> HashOne
-- On Eq reduce production lit -> HashOne
-- On Eof reduce production lit -> HashOne
-- On End reduce production lit -> HashOne
-- On Else reduce production lit -> HashOne
-- On DotBrace reduce production lit -> HashOne
-- On Dot reduce production lit -> HashOne
-- On Do reduce production lit -> HashOne
-- On Declare reduce production lit -> HashOne
-- On Comma reduce production lit -> HashOne
-- On ColonColon reduce production lit -> HashOne
-- On Colon reduce production lit -> HashOne
-- On Class_ reduce production lit -> HashOne
-- On Char reduce production lit -> HashOne
-- On BraceBar reduce production lit -> HashOne
-- On BinNum reduce production lit -> HashOne
-- On Bin reduce production lit -> HashOne
-- On Begin_ reduce production lit -> HashOne
-- On BarGt reduce production lit -> HashOne
-- On BarBrace reduce production lit -> HashOne
-- On BarBar reduce production lit -> HashOne
-- On Bar reduce production lit -> HashOne
-- On BacktickString reduce production lit -> HashOne
-- On AtX reduce production lit -> HashOne
-- On At reduce production lit -> HashOne
-- On Assert reduce production lit -> HashOne
-- On As reduce production lit -> HashOne
-- On Arrow reduce production lit -> HashOne
-- On And reduce production lit -> HashOne
-- On AmpAmp reduce production lit -> HashOne

State 200:
## Known stack suffix:
## False
## LR(1) items:
lit -> False . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> False
-- On With reduce production lit -> False
-- On Val reduce production lit -> False
-- On Under reduce production lit -> False
-- On Type reduce production lit -> False
-- On True reduce production lit -> False
-- On Theorem reduce production lit -> False
-- On Then reduce production lit -> False
-- On String reduce production lit -> False
-- On StarstarX reduce production lit -> False
-- On StarX reduce production lit -> False
-- On Star reduce production lit -> False
-- On SemiSemi reduce production lit -> False
-- On Semi reduce production lit -> False
-- On Rsquare reduce production lit -> False
-- On Rparen reduce production lit -> False
-- On Rcurly reduce production lit -> False
-- On PlusX reduce production lit -> False
-- On Plus reduce production lit -> False
-- On Open_ reduce production lit -> False
-- On OctNum reduce production lit -> False
-- On Nvar reduce production lit -> False
-- On Num reduce production lit -> False
-- On Module_ reduce production lit -> False
-- On MinusMinusGt reduce production lit -> False
-- On Match reduce production lit -> False
-- On MEM reduce production lit -> False
-- On LtBar reduce production lit -> False
-- On Lsquare reduce production lit -> False
-- On Lparen reduce production lit -> False
-- On Let_ reduce production lit -> False
-- On Lemma reduce production lit -> False
-- On LeftArrow reduce production lit -> False
-- On Lcurly reduce production lit -> False
-- On Inst_default reduce production lit -> False
-- On Inst reduce production lit -> False
-- On Indreln reduce production lit -> False
-- On Include_ reduce production lit -> False
-- On In reduce production lit -> False
-- On Import_ reduce production lit -> False
-- On IN reduce production lit -> False
-- On HexNum reduce production lit -> False
-- On Hex reduce production lit -> False
-- On HashZero reduce production lit -> False
-- On HashOne reduce production lit -> False
-- On GtEqX reduce production lit -> False
-- On GtEq reduce production lit -> False
-- On Function_ reduce production lit -> False
-- On False reduce production lit -> False
-- On EqualX reduce production lit -> False
-- On EqEqGt reduce production lit -> False
-- On Eq reduce production lit -> False
-- On Eof reduce production lit -> False
-- On End reduce production lit -> False
-- On Else reduce production lit -> False
-- On DotBrace reduce production lit -> False
-- On Dot reduce production lit -> False
-- On Do reduce production lit -> False
-- On Declare reduce production lit -> False
-- On Comma reduce production lit -> False
-- On ColonColon reduce production lit -> False
-- On Colon reduce production lit -> False
-- On Class_ reduce production lit -> False
-- On Char reduce production lit -> False
-- On BraceBar reduce production lit -> False
-- On BinNum reduce production lit -> False
-- On Bin reduce production lit -> False
-- On Begin_ reduce production lit -> False
-- On BarGt reduce production lit -> False
-- On BarBrace reduce production lit -> False
-- On BarBar reduce production lit -> False
-- On Bar reduce production lit -> False
-- On BacktickString reduce production lit -> False
-- On AtX reduce production lit -> False
-- On At reduce production lit -> False
-- On Assert reduce production lit -> False
-- On As reduce production lit -> False
-- On Arrow reduce production lit -> False
-- On And reduce production lit -> False
-- On AmpAmp reduce production lit -> False

State 201:
## Known stack suffix:
## Char
## LR(1) items:
lit -> Char . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> Char
-- On With reduce production lit -> Char
-- On Val reduce production lit -> Char
-- On Under reduce production lit -> Char
-- On Type reduce production lit -> Char
-- On True reduce production lit -> Char
-- On Theorem reduce production lit -> Char
-- On Then reduce production lit -> Char
-- On String reduce production lit -> Char
-- On StarstarX reduce production lit -> Char
-- On StarX reduce production lit -> Char
-- On Star reduce production lit -> Char
-- On SemiSemi reduce production lit -> Char
-- On Semi reduce production lit -> Char
-- On Rsquare reduce production lit -> Char
-- On Rparen reduce production lit -> Char
-- On Rcurly reduce production lit -> Char
-- On PlusX reduce production lit -> Char
-- On Plus reduce production lit -> Char
-- On Open_ reduce production lit -> Char
-- On OctNum reduce production lit -> Char
-- On Nvar reduce production lit -> Char
-- On Num reduce production lit -> Char
-- On Module_ reduce production lit -> Char
-- On MinusMinusGt reduce production lit -> Char
-- On Match reduce production lit -> Char
-- On MEM reduce production lit -> Char
-- On LtBar reduce production lit -> Char
-- On Lsquare reduce production lit -> Char
-- On Lparen reduce production lit -> Char
-- On Let_ reduce production lit -> Char
-- On Lemma reduce production lit -> Char
-- On LeftArrow reduce production lit -> Char
-- On Lcurly reduce production lit -> Char
-- On Inst_default reduce production lit -> Char
-- On Inst reduce production lit -> Char
-- On Indreln reduce production lit -> Char
-- On Include_ reduce production lit -> Char
-- On In reduce production lit -> Char
-- On Import_ reduce production lit -> Char
-- On IN reduce production lit -> Char
-- On HexNum reduce production lit -> Char
-- On Hex reduce production lit -> Char
-- On HashZero reduce production lit -> Char
-- On HashOne reduce production lit -> Char
-- On GtEqX reduce production lit -> Char
-- On GtEq reduce production lit -> Char
-- On Function_ reduce production lit -> Char
-- On False reduce production lit -> Char
-- On EqualX reduce production lit -> Char
-- On EqEqGt reduce production lit -> Char
-- On Eq reduce production lit -> Char
-- On Eof reduce production lit -> Char
-- On End reduce production lit -> Char
-- On Else reduce production lit -> Char
-- On DotBrace reduce production lit -> Char
-- On Dot reduce production lit -> Char
-- On Do reduce production lit -> Char
-- On Declare reduce production lit -> Char
-- On Comma reduce production lit -> Char
-- On ColonColon reduce production lit -> Char
-- On Colon reduce production lit -> Char
-- On Class_ reduce production lit -> Char
-- On Char reduce production lit -> Char
-- On BraceBar reduce production lit -> Char
-- On BinNum reduce production lit -> Char
-- On Bin reduce production lit -> Char
-- On Begin_ reduce production lit -> Char
-- On BarGt reduce production lit -> Char
-- On BarBrace reduce production lit -> Char
-- On BarBar reduce production lit -> Char
-- On Bar reduce production lit -> Char
-- On BacktickString reduce production lit -> Char
-- On AtX reduce production lit -> Char
-- On At reduce production lit -> Char
-- On Assert reduce production lit -> Char
-- On As reduce production lit -> Char
-- On Arrow reduce production lit -> Char
-- On And reduce production lit -> Char
-- On AmpAmp reduce production lit -> Char

State 202:
## Known stack suffix:
## BraceBar
## LR(1) items:
atomic_pat -> BraceBar . semi_pats_atomic BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> BraceBar . atomic_pats_two BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_atomic shift to state 208
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 212
-- On atomic_pat shift to state 214
## Reductions:

State 203:
## Known stack suffix:
## BinNum
## LR(1) items:
lit -> BinNum . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> BinNum
-- On With reduce production lit -> BinNum
-- On Val reduce production lit -> BinNum
-- On Under reduce production lit -> BinNum
-- On Type reduce production lit -> BinNum
-- On True reduce production lit -> BinNum
-- On Theorem reduce production lit -> BinNum
-- On Then reduce production lit -> BinNum
-- On String reduce production lit -> BinNum
-- On StarstarX reduce production lit -> BinNum
-- On StarX reduce production lit -> BinNum
-- On Star reduce production lit -> BinNum
-- On SemiSemi reduce production lit -> BinNum
-- On Semi reduce production lit -> BinNum
-- On Rsquare reduce production lit -> BinNum
-- On Rparen reduce production lit -> BinNum
-- On Rcurly reduce production lit -> BinNum
-- On PlusX reduce production lit -> BinNum
-- On Plus reduce production lit -> BinNum
-- On Open_ reduce production lit -> BinNum
-- On OctNum reduce production lit -> BinNum
-- On Nvar reduce production lit -> BinNum
-- On Num reduce production lit -> BinNum
-- On Module_ reduce production lit -> BinNum
-- On MinusMinusGt reduce production lit -> BinNum
-- On Match reduce production lit -> BinNum
-- On MEM reduce production lit -> BinNum
-- On LtBar reduce production lit -> BinNum
-- On Lsquare reduce production lit -> BinNum
-- On Lparen reduce production lit -> BinNum
-- On Let_ reduce production lit -> BinNum
-- On Lemma reduce production lit -> BinNum
-- On LeftArrow reduce production lit -> BinNum
-- On Lcurly reduce production lit -> BinNum
-- On Inst_default reduce production lit -> BinNum
-- On Inst reduce production lit -> BinNum
-- On Indreln reduce production lit -> BinNum
-- On Include_ reduce production lit -> BinNum
-- On In reduce production lit -> BinNum
-- On Import_ reduce production lit -> BinNum
-- On IN reduce production lit -> BinNum
-- On HexNum reduce production lit -> BinNum
-- On Hex reduce production lit -> BinNum
-- On HashZero reduce production lit -> BinNum
-- On HashOne reduce production lit -> BinNum
-- On GtEqX reduce production lit -> BinNum
-- On GtEq reduce production lit -> BinNum
-- On Function_ reduce production lit -> BinNum
-- On False reduce production lit -> BinNum
-- On EqualX reduce production lit -> BinNum
-- On EqEqGt reduce production lit -> BinNum
-- On Eq reduce production lit -> BinNum
-- On Eof reduce production lit -> BinNum
-- On End reduce production lit -> BinNum
-- On Else reduce production lit -> BinNum
-- On DotBrace reduce production lit -> BinNum
-- On Dot reduce production lit -> BinNum
-- On Do reduce production lit -> BinNum
-- On Declare reduce production lit -> BinNum
-- On Comma reduce production lit -> BinNum
-- On ColonColon reduce production lit -> BinNum
-- On Colon reduce production lit -> BinNum
-- On Class_ reduce production lit -> BinNum
-- On Char reduce production lit -> BinNum
-- On BraceBar reduce production lit -> BinNum
-- On BinNum reduce production lit -> BinNum
-- On Bin reduce production lit -> BinNum
-- On Begin_ reduce production lit -> BinNum
-- On BarGt reduce production lit -> BinNum
-- On BarBrace reduce production lit -> BinNum
-- On BarBar reduce production lit -> BinNum
-- On Bar reduce production lit -> BinNum
-- On BacktickString reduce production lit -> BinNum
-- On AtX reduce production lit -> BinNum
-- On At reduce production lit -> BinNum
-- On Assert reduce production lit -> BinNum
-- On As reduce production lit -> BinNum
-- On Arrow reduce production lit -> BinNum
-- On And reduce production lit -> BinNum
-- On AmpAmp reduce production lit -> BinNum

State 204:
## Known stack suffix:
## Bin
## LR(1) items:
lit -> Bin . [ X With Val Under Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma LeftArrow Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert As Arrow And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production lit -> Bin
-- On With reduce production lit -> Bin
-- On Val reduce production lit -> Bin
-- On Under reduce production lit -> Bin
-- On Type reduce production lit -> Bin
-- On True reduce production lit -> Bin
-- On Theorem reduce production lit -> Bin
-- On Then reduce production lit -> Bin
-- On String reduce production lit -> Bin
-- On StarstarX reduce production lit -> Bin
-- On StarX reduce production lit -> Bin
-- On Star reduce production lit -> Bin
-- On SemiSemi reduce production lit -> Bin
-- On Semi reduce production lit -> Bin
-- On Rsquare reduce production lit -> Bin
-- On Rparen reduce production lit -> Bin
-- On Rcurly reduce production lit -> Bin
-- On PlusX reduce production lit -> Bin
-- On Plus reduce production lit -> Bin
-- On Open_ reduce production lit -> Bin
-- On OctNum reduce production lit -> Bin
-- On Nvar reduce production lit -> Bin
-- On Num reduce production lit -> Bin
-- On Module_ reduce production lit -> Bin
-- On MinusMinusGt reduce production lit -> Bin
-- On Match reduce production lit -> Bin
-- On MEM reduce production lit -> Bin
-- On LtBar reduce production lit -> Bin
-- On Lsquare reduce production lit -> Bin
-- On Lparen reduce production lit -> Bin
-- On Let_ reduce production lit -> Bin
-- On Lemma reduce production lit -> Bin
-- On LeftArrow reduce production lit -> Bin
-- On Lcurly reduce production lit -> Bin
-- On Inst_default reduce production lit -> Bin
-- On Inst reduce production lit -> Bin
-- On Indreln reduce production lit -> Bin
-- On Include_ reduce production lit -> Bin
-- On In reduce production lit -> Bin
-- On Import_ reduce production lit -> Bin
-- On IN reduce production lit -> Bin
-- On HexNum reduce production lit -> Bin
-- On Hex reduce production lit -> Bin
-- On HashZero reduce production lit -> Bin
-- On HashOne reduce production lit -> Bin
-- On GtEqX reduce production lit -> Bin
-- On GtEq reduce production lit -> Bin
-- On Function_ reduce production lit -> Bin
-- On False reduce production lit -> Bin
-- On EqualX reduce production lit -> Bin
-- On EqEqGt reduce production lit -> Bin
-- On Eq reduce production lit -> Bin
-- On Eof reduce production lit -> Bin
-- On End reduce production lit -> Bin
-- On Else reduce production lit -> Bin
-- On DotBrace reduce production lit -> Bin
-- On Dot reduce production lit -> Bin
-- On Do reduce production lit -> Bin
-- On Declare reduce production lit -> Bin
-- On Comma reduce production lit -> Bin
-- On ColonColon reduce production lit -> Bin
-- On Colon reduce production lit -> Bin
-- On Class_ reduce production lit -> Bin
-- On Char reduce production lit -> Bin
-- On BraceBar reduce production lit -> Bin
-- On BinNum reduce production lit -> Bin
-- On Bin reduce production lit -> Bin
-- On Begin_ reduce production lit -> Bin
-- On BarGt reduce production lit -> Bin
-- On BarBrace reduce production lit -> Bin
-- On BarBar reduce production lit -> Bin
-- On Bar reduce production lit -> Bin
-- On BacktickString reduce production lit -> Bin
-- On AtX reduce production lit -> Bin
-- On At reduce production lit -> Bin
-- On Assert reduce production lit -> Bin
-- On As reduce production lit -> Bin
-- On Arrow reduce production lit -> Bin
-- On And reduce production lit -> Bin
-- On AmpAmp reduce production lit -> Bin

State 205:
## Known stack suffix:
## x
## LR(1) items:
atomic_pat -> x . Plus Num [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
id_help -> x . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
id_help -> x . Dot id_help [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Plus shift to state 206
-- On Dot shift to state 51
## Reductions:
-- On X reduce production id_help -> x
-- On Under reduce production id_help -> x
-- On True reduce production id_help -> x
-- On String reduce production id_help -> x
-- On Semi reduce production id_help -> x
-- On Rsquare reduce production id_help -> x
-- On Rparen reduce production id_help -> x
-- On OctNum reduce production id_help -> x
-- On Num reduce production id_help -> x
-- On MEM reduce production id_help -> x
-- On LtBar reduce production id_help -> x
-- On Lsquare reduce production id_help -> x
-- On Lparen reduce production id_help -> x
-- On LeftArrow reduce production id_help -> x
-- On IN reduce production id_help -> x
-- On HexNum reduce production id_help -> x
-- On Hex reduce production id_help -> x
-- On HashZero reduce production id_help -> x
-- On HashOne reduce production id_help -> x
-- On False reduce production id_help -> x
-- On Eq reduce production id_help -> x
-- On Comma reduce production id_help -> x
-- On ColonColon reduce production id_help -> x
-- On Colon reduce production id_help -> x
-- On Char reduce production id_help -> x
-- On BraceBar reduce production id_help -> x
-- On BinNum reduce production id_help -> x
-- On Bin reduce production id_help -> x
-- On BarGt reduce production id_help -> x
-- On BarBrace reduce production id_help -> x
-- On As reduce production id_help -> x
-- On Arrow reduce production id_help -> x

State 206:
## Known stack suffix:
## x Plus
## LR(1) items:
atomic_pat -> x Plus . Num [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Num shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## x Plus Num
## LR(1) items:
atomic_pat -> x Plus Num . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> x Plus Num
-- On Under reduce production atomic_pat -> x Plus Num
-- On True reduce production atomic_pat -> x Plus Num
-- On String reduce production atomic_pat -> x Plus Num
-- On Semi reduce production atomic_pat -> x Plus Num
-- On Rsquare reduce production atomic_pat -> x Plus Num
-- On Rparen reduce production atomic_pat -> x Plus Num
-- On OctNum reduce production atomic_pat -> x Plus Num
-- On Num reduce production atomic_pat -> x Plus Num
-- On MEM reduce production atomic_pat -> x Plus Num
-- On LtBar reduce production atomic_pat -> x Plus Num
-- On Lsquare reduce production atomic_pat -> x Plus Num
-- On Lparen reduce production atomic_pat -> x Plus Num
-- On LeftArrow reduce production atomic_pat -> x Plus Num
-- On IN reduce production atomic_pat -> x Plus Num
-- On HexNum reduce production atomic_pat -> x Plus Num
-- On Hex reduce production atomic_pat -> x Plus Num
-- On HashZero reduce production atomic_pat -> x Plus Num
-- On HashOne reduce production atomic_pat -> x Plus Num
-- On False reduce production atomic_pat -> x Plus Num
-- On Eq reduce production atomic_pat -> x Plus Num
-- On Comma reduce production atomic_pat -> x Plus Num
-- On ColonColon reduce production atomic_pat -> x Plus Num
-- On Colon reduce production atomic_pat -> x Plus Num
-- On Char reduce production atomic_pat -> x Plus Num
-- On BraceBar reduce production atomic_pat -> x Plus Num
-- On BinNum reduce production atomic_pat -> x Plus Num
-- On Bin reduce production atomic_pat -> x Plus Num
-- On BarGt reduce production atomic_pat -> x Plus Num
-- On BarBrace reduce production atomic_pat -> x Plus Num
-- On As reduce production atomic_pat -> x Plus Num
-- On Arrow reduce production atomic_pat -> x Plus Num

State 208:
## Known stack suffix:
## BraceBar semi_pats_atomic
## LR(1) items:
atomic_pat -> BraceBar semi_pats_atomic . BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarBrace shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## BraceBar semi_pats_atomic BarBrace
## LR(1) items:
atomic_pat -> BraceBar semi_pats_atomic BarBrace . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Under reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On True reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On String reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Semi reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Rsquare reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Rparen reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On OctNum reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Num reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On MEM reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On LtBar reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Lsquare reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Lparen reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On LeftArrow reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On IN reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On HexNum reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Hex reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On HashZero reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On HashOne reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On False reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Eq reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Comma reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On ColonColon reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Colon reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Char reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On BraceBar reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On BinNum reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Bin reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On BarGt reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On BarBrace reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On As reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace
-- On Arrow reduce production atomic_pat -> BraceBar semi_pats_atomic BarBrace

State 210:
## Known stack suffix:
## lit
## LR(1) items:
atomic_pat -> lit . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> lit
-- On Under reduce production atomic_pat -> lit
-- On True reduce production atomic_pat -> lit
-- On String reduce production atomic_pat -> lit
-- On Semi reduce production atomic_pat -> lit
-- On Rsquare reduce production atomic_pat -> lit
-- On Rparen reduce production atomic_pat -> lit
-- On OctNum reduce production atomic_pat -> lit
-- On Num reduce production atomic_pat -> lit
-- On MEM reduce production atomic_pat -> lit
-- On LtBar reduce production atomic_pat -> lit
-- On Lsquare reduce production atomic_pat -> lit
-- On Lparen reduce production atomic_pat -> lit
-- On LeftArrow reduce production atomic_pat -> lit
-- On IN reduce production atomic_pat -> lit
-- On HexNum reduce production atomic_pat -> lit
-- On Hex reduce production atomic_pat -> lit
-- On HashZero reduce production atomic_pat -> lit
-- On HashOne reduce production atomic_pat -> lit
-- On False reduce production atomic_pat -> lit
-- On Eq reduce production atomic_pat -> lit
-- On Comma reduce production atomic_pat -> lit
-- On ColonColon reduce production atomic_pat -> lit
-- On Colon reduce production atomic_pat -> lit
-- On Char reduce production atomic_pat -> lit
-- On BraceBar reduce production atomic_pat -> lit
-- On BinNum reduce production atomic_pat -> lit
-- On Bin reduce production atomic_pat -> lit
-- On BarGt reduce production atomic_pat -> lit
-- On BarBrace reduce production atomic_pat -> lit
-- On As reduce production atomic_pat -> lit
-- On Arrow reduce production atomic_pat -> lit

State 211:
## Known stack suffix:
## id
## LR(1) items:
atomic_pat -> id . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> id
-- On Under reduce production atomic_pat -> id
-- On True reduce production atomic_pat -> id
-- On String reduce production atomic_pat -> id
-- On Semi reduce production atomic_pat -> id
-- On Rsquare reduce production atomic_pat -> id
-- On Rparen reduce production atomic_pat -> id
-- On OctNum reduce production atomic_pat -> id
-- On Num reduce production atomic_pat -> id
-- On MEM reduce production atomic_pat -> id
-- On LtBar reduce production atomic_pat -> id
-- On Lsquare reduce production atomic_pat -> id
-- On Lparen reduce production atomic_pat -> id
-- On LeftArrow reduce production atomic_pat -> id
-- On IN reduce production atomic_pat -> id
-- On HexNum reduce production atomic_pat -> id
-- On Hex reduce production atomic_pat -> id
-- On HashZero reduce production atomic_pat -> id
-- On HashOne reduce production atomic_pat -> id
-- On False reduce production atomic_pat -> id
-- On Eq reduce production atomic_pat -> id
-- On Comma reduce production atomic_pat -> id
-- On ColonColon reduce production atomic_pat -> id
-- On Colon reduce production atomic_pat -> id
-- On Char reduce production atomic_pat -> id
-- On BraceBar reduce production atomic_pat -> id
-- On BinNum reduce production atomic_pat -> id
-- On Bin reduce production atomic_pat -> id
-- On BarGt reduce production atomic_pat -> id
-- On BarBrace reduce production atomic_pat -> id
-- On As reduce production atomic_pat -> id
-- On Arrow reduce production atomic_pat -> id

State 212:
## Known stack suffix:
## BraceBar atomic_pats_two
## LR(1) items:
atomic_pat -> BraceBar atomic_pats_two . BarBrace [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarBrace shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## BraceBar atomic_pats_two BarBrace
## LR(1) items:
atomic_pat -> BraceBar atomic_pats_two BarBrace . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Under reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On True reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On String reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Semi reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Rsquare reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Rparen reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On OctNum reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Num reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On MEM reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On LtBar reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Lsquare reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Lparen reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On LeftArrow reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On IN reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On HexNum reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Hex reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On HashZero reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On HashOne reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On False reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Eq reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Comma reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On ColonColon reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Colon reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Char reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On BraceBar reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On BinNum reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Bin reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On BarGt reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On BarBrace reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On As reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace
-- On Arrow reduce production atomic_pat -> BraceBar atomic_pats_two BarBrace

State 214:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats_two -> atomic_pat . atomic_pat [ BarBrace ]
atomic_pats_two -> atomic_pat . atomic_pats_two [ BarBrace ]
semi_pats_atomic -> atomic_pat . [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi semi_pats_atomic [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On Semi shift to state 215
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 218
-- On atomic_pat shift to state 219
## Reductions:
-- On BarBrace reduce production semi_pats_atomic -> atomic_pat

State 215:
## Known stack suffix:
## atomic_pat Semi
## LR(1) items:
semi_pats_atomic -> atomic_pat Semi . [ BarBrace ]
semi_pats_atomic -> atomic_pat Semi . semi_pats_atomic [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_atomic shift to state 216
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pat shift to state 217
## Reductions:
-- On BarBrace reduce production semi_pats_atomic -> atomic_pat Semi

State 216:
## Known stack suffix:
## atomic_pat Semi semi_pats_atomic
## LR(1) items:
semi_pats_atomic -> atomic_pat Semi semi_pats_atomic . [ BarBrace ]
## Transitions:
## Reductions:
-- On BarBrace reduce production semi_pats_atomic -> atomic_pat Semi semi_pats_atomic

State 217:
## Known stack suffix:
## atomic_pat
## LR(1) items:
semi_pats_atomic -> atomic_pat . [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi [ BarBrace ]
semi_pats_atomic -> atomic_pat . Semi semi_pats_atomic [ BarBrace ]
## Transitions:
-- On Semi shift to state 215
## Reductions:
-- On BarBrace reduce production semi_pats_atomic -> atomic_pat

State 218:
## Known stack suffix:
## atomic_pat atomic_pats_two
## LR(1) items:
atomic_pats_two -> atomic_pat atomic_pats_two . [ BarBrace ]
## Transitions:
## Reductions:
-- On BarBrace reduce production atomic_pats_two -> atomic_pat atomic_pats_two

State 219:
## Known stack suffix:
## atomic_pat atomic_pat
## LR(1) items:
atomic_pats_two -> atomic_pat . atomic_pat [ BarBrace ]
atomic_pats_two -> atomic_pat atomic_pat . [ BarBrace ]
atomic_pats_two -> atomic_pat . atomic_pats_two [ BarBrace ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats_two shift to state 218
-- On atomic_pat shift to state 219
## Reductions:
-- On BarBrace reduce production atomic_pats_two -> atomic_pat atomic_pat

State 220:
## Known stack suffix:
## Lparen pat
## LR(1) items:
atomic_pat -> Lparen pat . Colon typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen pat . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
atomic_pat -> Lparen pat . As x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
comma_pats -> pat . Comma pat [ Rparen ]
comma_pats -> pat . Comma comma_pats [ Rparen ]
## Transitions:
-- On Rparen shift to state 221
-- On Comma shift to state 222
-- On Colon shift to state 233
-- On As shift to state 236
## Reductions:

State 221:
## Known stack suffix:
## Lparen pat Rparen
## LR(1) items:
atomic_pat -> Lparen pat Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Lparen pat Rparen
-- On Under reduce production atomic_pat -> Lparen pat Rparen
-- On True reduce production atomic_pat -> Lparen pat Rparen
-- On String reduce production atomic_pat -> Lparen pat Rparen
-- On Semi reduce production atomic_pat -> Lparen pat Rparen
-- On Rsquare reduce production atomic_pat -> Lparen pat Rparen
-- On Rparen reduce production atomic_pat -> Lparen pat Rparen
-- On OctNum reduce production atomic_pat -> Lparen pat Rparen
-- On Num reduce production atomic_pat -> Lparen pat Rparen
-- On MEM reduce production atomic_pat -> Lparen pat Rparen
-- On LtBar reduce production atomic_pat -> Lparen pat Rparen
-- On Lsquare reduce production atomic_pat -> Lparen pat Rparen
-- On Lparen reduce production atomic_pat -> Lparen pat Rparen
-- On LeftArrow reduce production atomic_pat -> Lparen pat Rparen
-- On IN reduce production atomic_pat -> Lparen pat Rparen
-- On HexNum reduce production atomic_pat -> Lparen pat Rparen
-- On Hex reduce production atomic_pat -> Lparen pat Rparen
-- On HashZero reduce production atomic_pat -> Lparen pat Rparen
-- On HashOne reduce production atomic_pat -> Lparen pat Rparen
-- On False reduce production atomic_pat -> Lparen pat Rparen
-- On Eq reduce production atomic_pat -> Lparen pat Rparen
-- On Comma reduce production atomic_pat -> Lparen pat Rparen
-- On ColonColon reduce production atomic_pat -> Lparen pat Rparen
-- On Colon reduce production atomic_pat -> Lparen pat Rparen
-- On Char reduce production atomic_pat -> Lparen pat Rparen
-- On BraceBar reduce production atomic_pat -> Lparen pat Rparen
-- On BinNum reduce production atomic_pat -> Lparen pat Rparen
-- On Bin reduce production atomic_pat -> Lparen pat Rparen
-- On BarGt reduce production atomic_pat -> Lparen pat Rparen
-- On BarBrace reduce production atomic_pat -> Lparen pat Rparen
-- On As reduce production atomic_pat -> Lparen pat Rparen
-- On Arrow reduce production atomic_pat -> Lparen pat Rparen

State 222:
## Known stack suffix:
## pat Comma
## LR(1) items:
comma_pats -> pat Comma . pat [ Rparen ]
comma_pats -> pat Comma . comma_pats [ Rparen ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 223
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On comma_pats shift to state 228
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 223:
## Known stack suffix:
## pat Comma pat
## LR(1) items:
comma_pats -> pat . Comma pat [ Rparen ]
comma_pats -> pat Comma pat . [ Rparen ]
comma_pats -> pat . Comma comma_pats [ Rparen ]
## Transitions:
-- On Comma shift to state 222
## Reductions:
-- On Rparen reduce production comma_pats -> pat Comma pat

State 224:
## Known stack suffix:
## id
## LR(1) items:
app_pat -> id . atomic_pats [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
atomic_pat -> id . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats shift to state 225
-- On atomic_pat shift to state 226
## Reductions:
-- On Semi reduce production atomic_pat -> id
-- On Rsquare reduce production atomic_pat -> id
-- On Rparen reduce production atomic_pat -> id
-- On MEM reduce production atomic_pat -> id
-- On LeftArrow reduce production atomic_pat -> id
-- On IN reduce production atomic_pat -> id
-- On Eq reduce production atomic_pat -> id
-- On Comma reduce production atomic_pat -> id
-- On ColonColon reduce production atomic_pat -> id
-- On Colon reduce production atomic_pat -> id
-- On BarGt reduce production atomic_pat -> id
-- On As reduce production atomic_pat -> id
-- On Arrow reduce production atomic_pat -> id

State 225:
## Known stack suffix:
## id atomic_pats
## LR(1) items:
app_pat -> id atomic_pats . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi reduce production app_pat -> id atomic_pats
-- On Rsquare reduce production app_pat -> id atomic_pats
-- On Rparen reduce production app_pat -> id atomic_pats
-- On MEM reduce production app_pat -> id atomic_pats
-- On LeftArrow reduce production app_pat -> id atomic_pats
-- On IN reduce production app_pat -> id atomic_pats
-- On Eq reduce production app_pat -> id atomic_pats
-- On Comma reduce production app_pat -> id atomic_pats
-- On ColonColon reduce production app_pat -> id atomic_pats
-- On Colon reduce production app_pat -> id atomic_pats
-- On BarGt reduce production app_pat -> id atomic_pats
-- On As reduce production app_pat -> id atomic_pats
-- On Arrow reduce production app_pat -> id atomic_pats

State 226:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats -> atomic_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
atomic_pats -> atomic_pat . atomic_pats [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats shift to state 227
-- On atomic_pat shift to state 226
## Reductions:
-- On Semi reduce production atomic_pats -> atomic_pat
-- On Rsquare reduce production atomic_pats -> atomic_pat
-- On Rparen reduce production atomic_pats -> atomic_pat
-- On MEM reduce production atomic_pats -> atomic_pat
-- On LeftArrow reduce production atomic_pats -> atomic_pat
-- On IN reduce production atomic_pats -> atomic_pat
-- On Eq reduce production atomic_pats -> atomic_pat
-- On Comma reduce production atomic_pats -> atomic_pat
-- On ColonColon reduce production atomic_pats -> atomic_pat
-- On Colon reduce production atomic_pats -> atomic_pat
-- On BarGt reduce production atomic_pats -> atomic_pat
-- On As reduce production atomic_pats -> atomic_pat
-- On Arrow reduce production atomic_pats -> atomic_pat

State 227:
## Known stack suffix:
## atomic_pat atomic_pats
## LR(1) items:
atomic_pats -> atomic_pat atomic_pats . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi reduce production atomic_pats -> atomic_pat atomic_pats
-- On Rsquare reduce production atomic_pats -> atomic_pat atomic_pats
-- On Rparen reduce production atomic_pats -> atomic_pat atomic_pats
-- On MEM reduce production atomic_pats -> atomic_pat atomic_pats
-- On LeftArrow reduce production atomic_pats -> atomic_pat atomic_pats
-- On IN reduce production atomic_pats -> atomic_pat atomic_pats
-- On Eq reduce production atomic_pats -> atomic_pat atomic_pats
-- On Comma reduce production atomic_pats -> atomic_pat atomic_pats
-- On ColonColon reduce production atomic_pats -> atomic_pat atomic_pats
-- On Colon reduce production atomic_pats -> atomic_pat atomic_pats
-- On BarGt reduce production atomic_pats -> atomic_pat atomic_pats
-- On As reduce production atomic_pats -> atomic_pat atomic_pats
-- On Arrow reduce production atomic_pats -> atomic_pat atomic_pats

State 228:
## Known stack suffix:
## pat Comma comma_pats
## LR(1) items:
comma_pats -> pat Comma comma_pats . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen reduce production comma_pats -> pat Comma comma_pats

State 229:
## Known stack suffix:
## atomic_pat
## LR(1) items:
app_pat -> atomic_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma ColonColon Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi reduce production app_pat -> atomic_pat
-- On Rsquare reduce production app_pat -> atomic_pat
-- On Rparen reduce production app_pat -> atomic_pat
-- On MEM reduce production app_pat -> atomic_pat
-- On LeftArrow reduce production app_pat -> atomic_pat
-- On IN reduce production app_pat -> atomic_pat
-- On Eq reduce production app_pat -> atomic_pat
-- On Comma reduce production app_pat -> atomic_pat
-- On ColonColon reduce production app_pat -> atomic_pat
-- On Colon reduce production app_pat -> atomic_pat
-- On BarGt reduce production app_pat -> atomic_pat
-- On As reduce production app_pat -> atomic_pat
-- On Arrow reduce production app_pat -> atomic_pat

State 230:
## Known stack suffix:
## app_pat
## LR(1) items:
pat -> app_pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
pat -> app_pat . ColonColon pat [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
-- On ColonColon shift to state 231
## Reductions:
-- On Semi reduce production pat -> app_pat
-- On Rsquare reduce production pat -> app_pat
-- On Rparen reduce production pat -> app_pat
-- On MEM reduce production pat -> app_pat
-- On LeftArrow reduce production pat -> app_pat
-- On IN reduce production pat -> app_pat
-- On Eq reduce production pat -> app_pat
-- On Comma reduce production pat -> app_pat
-- On Colon reduce production pat -> app_pat
-- On BarGt reduce production pat -> app_pat
-- On As reduce production pat -> app_pat
-- On Arrow reduce production pat -> app_pat

State 231:
## Known stack suffix:
## app_pat ColonColon
## LR(1) items:
pat -> app_pat ColonColon . pat [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 232
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 232:
## Known stack suffix:
## app_pat ColonColon pat
## LR(1) items:
pat -> app_pat ColonColon pat . [ Semi Rsquare Rparen MEM LeftArrow IN Eq Comma Colon BarGt As Arrow ]
## Transitions:
## Reductions:
-- On Semi reduce production pat -> app_pat ColonColon pat
-- On Rsquare reduce production pat -> app_pat ColonColon pat
-- On Rparen reduce production pat -> app_pat ColonColon pat
-- On MEM reduce production pat -> app_pat ColonColon pat
-- On LeftArrow reduce production pat -> app_pat ColonColon pat
-- On IN reduce production pat -> app_pat ColonColon pat
-- On Eq reduce production pat -> app_pat ColonColon pat
-- On Comma reduce production pat -> app_pat ColonColon pat
-- On Colon reduce production pat -> app_pat ColonColon pat
-- On BarGt reduce production pat -> app_pat ColonColon pat
-- On As reduce production pat -> app_pat ColonColon pat
-- On Arrow reduce production pat -> app_pat ColonColon pat

State 233:
## Known stack suffix:
## Lparen pat Colon
## LR(1) items:
atomic_pat -> Lparen pat Colon . typ Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 234
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 234:
## Known stack suffix:
## Lparen pat Colon typ
## LR(1) items:
atomic_pat -> Lparen pat Colon typ . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## Lparen pat Colon typ Rparen
## LR(1) items:
atomic_pat -> Lparen pat Colon typ Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Under reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On True reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On String reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Semi reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Rsquare reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Rparen reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On OctNum reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Num reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On MEM reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On LtBar reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Lsquare reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Lparen reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On LeftArrow reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On IN reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On HexNum reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Hex reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On HashZero reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On HashOne reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On False reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Eq reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Comma reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On ColonColon reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Colon reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Char reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On BraceBar reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On BinNum reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Bin reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On BarGt reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On BarBrace reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On As reduce production atomic_pat -> Lparen pat Colon typ Rparen
-- On Arrow reduce production atomic_pat -> Lparen pat Colon typ Rparen

State 236:
## Known stack suffix:
## Lparen pat As
## LR(1) items:
atomic_pat -> Lparen pat As . x Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## Lparen pat As x
## LR(1) items:
atomic_pat -> Lparen pat As x . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## Lparen pat As x Rparen
## LR(1) items:
atomic_pat -> Lparen pat As x Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Lparen pat As x Rparen
-- On Under reduce production atomic_pat -> Lparen pat As x Rparen
-- On True reduce production atomic_pat -> Lparen pat As x Rparen
-- On String reduce production atomic_pat -> Lparen pat As x Rparen
-- On Semi reduce production atomic_pat -> Lparen pat As x Rparen
-- On Rsquare reduce production atomic_pat -> Lparen pat As x Rparen
-- On Rparen reduce production atomic_pat -> Lparen pat As x Rparen
-- On OctNum reduce production atomic_pat -> Lparen pat As x Rparen
-- On Num reduce production atomic_pat -> Lparen pat As x Rparen
-- On MEM reduce production atomic_pat -> Lparen pat As x Rparen
-- On LtBar reduce production atomic_pat -> Lparen pat As x Rparen
-- On Lsquare reduce production atomic_pat -> Lparen pat As x Rparen
-- On Lparen reduce production atomic_pat -> Lparen pat As x Rparen
-- On LeftArrow reduce production atomic_pat -> Lparen pat As x Rparen
-- On IN reduce production atomic_pat -> Lparen pat As x Rparen
-- On HexNum reduce production atomic_pat -> Lparen pat As x Rparen
-- On Hex reduce production atomic_pat -> Lparen pat As x Rparen
-- On HashZero reduce production atomic_pat -> Lparen pat As x Rparen
-- On HashOne reduce production atomic_pat -> Lparen pat As x Rparen
-- On False reduce production atomic_pat -> Lparen pat As x Rparen
-- On Eq reduce production atomic_pat -> Lparen pat As x Rparen
-- On Comma reduce production atomic_pat -> Lparen pat As x Rparen
-- On ColonColon reduce production atomic_pat -> Lparen pat As x Rparen
-- On Colon reduce production atomic_pat -> Lparen pat As x Rparen
-- On Char reduce production atomic_pat -> Lparen pat As x Rparen
-- On BraceBar reduce production atomic_pat -> Lparen pat As x Rparen
-- On BinNum reduce production atomic_pat -> Lparen pat As x Rparen
-- On Bin reduce production atomic_pat -> Lparen pat As x Rparen
-- On BarGt reduce production atomic_pat -> Lparen pat As x Rparen
-- On BarBrace reduce production atomic_pat -> Lparen pat As x Rparen
-- On As reduce production atomic_pat -> Lparen pat As x Rparen
-- On Arrow reduce production atomic_pat -> Lparen pat As x Rparen

State 239:
## Known stack suffix:
## Lparen comma_pats
## LR(1) items:
atomic_pat -> Lparen comma_pats . Rparen [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rparen shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## Lparen comma_pats Rparen
## LR(1) items:
atomic_pat -> Lparen comma_pats Rparen . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Under reduce production atomic_pat -> Lparen comma_pats Rparen
-- On True reduce production atomic_pat -> Lparen comma_pats Rparen
-- On String reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Semi reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Rsquare reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Rparen reduce production atomic_pat -> Lparen comma_pats Rparen
-- On OctNum reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Num reduce production atomic_pat -> Lparen comma_pats Rparen
-- On MEM reduce production atomic_pat -> Lparen comma_pats Rparen
-- On LtBar reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Lsquare reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Lparen reduce production atomic_pat -> Lparen comma_pats Rparen
-- On LeftArrow reduce production atomic_pat -> Lparen comma_pats Rparen
-- On IN reduce production atomic_pat -> Lparen comma_pats Rparen
-- On HexNum reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Hex reduce production atomic_pat -> Lparen comma_pats Rparen
-- On HashZero reduce production atomic_pat -> Lparen comma_pats Rparen
-- On HashOne reduce production atomic_pat -> Lparen comma_pats Rparen
-- On False reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Eq reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Comma reduce production atomic_pat -> Lparen comma_pats Rparen
-- On ColonColon reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Colon reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Char reduce production atomic_pat -> Lparen comma_pats Rparen
-- On BraceBar reduce production atomic_pat -> Lparen comma_pats Rparen
-- On BinNum reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Bin reduce production atomic_pat -> Lparen comma_pats Rparen
-- On BarGt reduce production atomic_pat -> Lparen comma_pats Rparen
-- On BarBrace reduce production atomic_pat -> Lparen comma_pats Rparen
-- On As reduce production atomic_pat -> Lparen comma_pats Rparen
-- On Arrow reduce production atomic_pat -> Lparen comma_pats Rparen

State 241:
## Known stack suffix:
## semi_pats_help
## LR(1) items:
semi_pats -> semi_pats_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_pats -> semi_pats_help

State 242:
## Known stack suffix:
## Lsquare semi_pats
## LR(1) items:
atomic_pat -> Lsquare semi_pats . Rsquare [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On Rsquare shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## Lsquare semi_pats Rsquare
## LR(1) items:
atomic_pat -> Lsquare semi_pats Rsquare . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Under reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On True reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On String reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Semi reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Rsquare reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Rparen reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On OctNum reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Num reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On MEM reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On LtBar reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Lsquare reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Lparen reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On LeftArrow reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On IN reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On HexNum reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Hex reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On HashZero reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On HashOne reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On False reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Eq reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Comma reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On ColonColon reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Colon reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Char reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On BraceBar reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On BinNum reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Bin reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On BarGt reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On BarBrace reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On As reduce production atomic_pat -> Lsquare semi_pats Rsquare
-- On Arrow reduce production atomic_pat -> Lsquare semi_pats Rsquare

State 244:
## Known stack suffix:
## pat
## LR(1) items:
semi_pats_help -> pat . [ Rsquare ]
semi_pats_help -> pat . Semi [ Rsquare ]
semi_pats_help -> pat . Semi semi_pats_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 245
## Reductions:
-- On Rsquare reduce production semi_pats_help -> pat

State 245:
## Known stack suffix:
## pat Semi
## LR(1) items:
semi_pats_help -> pat Semi . [ Rsquare ]
semi_pats_help -> pat Semi . semi_pats_help [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On semi_pats_help shift to state 246
-- On pat shift to state 244
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On Rsquare reduce production semi_pats_help -> pat Semi

State 246:
## Known stack suffix:
## pat Semi semi_pats_help
## LR(1) items:
semi_pats_help -> pat Semi semi_pats_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_pats_help -> pat Semi semi_pats_help

State 247:
## Known stack suffix:
## id Eq pat
## LR(1) items:
fpat -> id Eq pat . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi reduce production fpat -> id Eq pat
-- On BarGt reduce production fpat -> id Eq pat

State 248:
## Known stack suffix:
## LtBar fpats
## LR(1) items:
atomic_pat -> LtBar fpats . BarGt [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
-- On BarGt shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## LtBar fpats BarGt
## LR(1) items:
atomic_pat -> LtBar fpats BarGt . [ X Under True String Semi Rsquare Rparen OctNum Num MEM LtBar Lsquare Lparen LeftArrow IN HexNum Hex HashZero HashOne False Eq Comma ColonColon Colon Char BraceBar BinNum Bin BarGt BarBrace As Arrow ]
## Transitions:
## Reductions:
-- On X reduce production atomic_pat -> LtBar fpats BarGt
-- On Under reduce production atomic_pat -> LtBar fpats BarGt
-- On True reduce production atomic_pat -> LtBar fpats BarGt
-- On String reduce production atomic_pat -> LtBar fpats BarGt
-- On Semi reduce production atomic_pat -> LtBar fpats BarGt
-- On Rsquare reduce production atomic_pat -> LtBar fpats BarGt
-- On Rparen reduce production atomic_pat -> LtBar fpats BarGt
-- On OctNum reduce production atomic_pat -> LtBar fpats BarGt
-- On Num reduce production atomic_pat -> LtBar fpats BarGt
-- On MEM reduce production atomic_pat -> LtBar fpats BarGt
-- On LtBar reduce production atomic_pat -> LtBar fpats BarGt
-- On Lsquare reduce production atomic_pat -> LtBar fpats BarGt
-- On Lparen reduce production atomic_pat -> LtBar fpats BarGt
-- On LeftArrow reduce production atomic_pat -> LtBar fpats BarGt
-- On IN reduce production atomic_pat -> LtBar fpats BarGt
-- On HexNum reduce production atomic_pat -> LtBar fpats BarGt
-- On Hex reduce production atomic_pat -> LtBar fpats BarGt
-- On HashZero reduce production atomic_pat -> LtBar fpats BarGt
-- On HashOne reduce production atomic_pat -> LtBar fpats BarGt
-- On False reduce production atomic_pat -> LtBar fpats BarGt
-- On Eq reduce production atomic_pat -> LtBar fpats BarGt
-- On Comma reduce production atomic_pat -> LtBar fpats BarGt
-- On ColonColon reduce production atomic_pat -> LtBar fpats BarGt
-- On Colon reduce production atomic_pat -> LtBar fpats BarGt
-- On Char reduce production atomic_pat -> LtBar fpats BarGt
-- On BraceBar reduce production atomic_pat -> LtBar fpats BarGt
-- On BinNum reduce production atomic_pat -> LtBar fpats BarGt
-- On Bin reduce production atomic_pat -> LtBar fpats BarGt
-- On BarGt reduce production atomic_pat -> LtBar fpats BarGt
-- On BarBrace reduce production atomic_pat -> LtBar fpats BarGt
-- On As reduce production atomic_pat -> LtBar fpats BarGt
-- On Arrow reduce production atomic_pat -> LtBar fpats BarGt

State 250:
## Known stack suffix:
## fpat
## LR(1) items:
fpats -> fpat . [ BarGt ]
fpats -> fpat . Semi [ BarGt ]
fpats -> fpat . Semi fpats [ BarGt ]
## Transitions:
-- On Semi shift to state 251
## Reductions:
-- On BarGt reduce production fpats -> fpat

State 251:
## Known stack suffix:
## fpat Semi
## LR(1) items:
fpats -> fpat Semi . [ BarGt ]
fpats -> fpat Semi . fpats [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 191
-- On fpats shift to state 252
-- On fpat shift to state 250
## Reductions:
-- On BarGt reduce production fpats -> fpat Semi

State 252:
## Known stack suffix:
## fpat Semi fpats
## LR(1) items:
fpats -> fpat Semi fpats . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt reduce production fpats -> fpat Semi fpats

State 253:
## Known stack suffix:
## x atomic_pats1
## LR(1) items:
funcl -> x atomic_pats1 . opt_typ_annot Eq exp [ And ]
funcls -> x atomic_pats1 . opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 254
-- On opt_typ_annot shift to state 256
## Reductions:
-- On Eq reduce production opt_typ_annot ->

State 254:
## Known stack suffix:
## Colon
## LR(1) items:
opt_typ_annot -> Colon . typ [ Eq ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 255
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 255:
## Known stack suffix:
## Colon typ
## LR(1) items:
opt_typ_annot -> Colon typ . [ Eq ]
## Transitions:
## Reductions:
-- On Eq reduce production opt_typ_annot -> Colon typ

State 256:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot . Eq exp [ And ]
funcls -> x atomic_pats1 opt_typ_annot . Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot Eq
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot Eq . exp [ And ]
funcls -> x atomic_pats1 opt_typ_annot Eq . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 493
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 258:
## Known stack suffix:
## Nvar
## LR(1) items:
atomic_exp -> Nvar . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Nvar
-- On With reduce production atomic_exp -> Nvar
-- On Val reduce production atomic_exp -> Nvar
-- On Type reduce production atomic_exp -> Nvar
-- On True reduce production atomic_exp -> Nvar
-- On Theorem reduce production atomic_exp -> Nvar
-- On Then reduce production atomic_exp -> Nvar
-- On String reduce production atomic_exp -> Nvar
-- On StarstarX reduce production atomic_exp -> Nvar
-- On StarX reduce production atomic_exp -> Nvar
-- On Star reduce production atomic_exp -> Nvar
-- On SemiSemi reduce production atomic_exp -> Nvar
-- On Semi reduce production atomic_exp -> Nvar
-- On Rsquare reduce production atomic_exp -> Nvar
-- On Rparen reduce production atomic_exp -> Nvar
-- On Rcurly reduce production atomic_exp -> Nvar
-- On PlusX reduce production atomic_exp -> Nvar
-- On Plus reduce production atomic_exp -> Nvar
-- On Open_ reduce production atomic_exp -> Nvar
-- On OctNum reduce production atomic_exp -> Nvar
-- On Nvar reduce production atomic_exp -> Nvar
-- On Num reduce production atomic_exp -> Nvar
-- On Module_ reduce production atomic_exp -> Nvar
-- On MinusMinusGt reduce production atomic_exp -> Nvar
-- On Match reduce production atomic_exp -> Nvar
-- On MEM reduce production atomic_exp -> Nvar
-- On LtBar reduce production atomic_exp -> Nvar
-- On Lsquare reduce production atomic_exp -> Nvar
-- On Lparen reduce production atomic_exp -> Nvar
-- On Let_ reduce production atomic_exp -> Nvar
-- On Lemma reduce production atomic_exp -> Nvar
-- On Lcurly reduce production atomic_exp -> Nvar
-- On Inst_default reduce production atomic_exp -> Nvar
-- On Inst reduce production atomic_exp -> Nvar
-- On Indreln reduce production atomic_exp -> Nvar
-- On Include_ reduce production atomic_exp -> Nvar
-- On In reduce production atomic_exp -> Nvar
-- On Import_ reduce production atomic_exp -> Nvar
-- On IN reduce production atomic_exp -> Nvar
-- On HexNum reduce production atomic_exp -> Nvar
-- On Hex reduce production atomic_exp -> Nvar
-- On HashZero reduce production atomic_exp -> Nvar
-- On HashOne reduce production atomic_exp -> Nvar
-- On GtEqX reduce production atomic_exp -> Nvar
-- On GtEq reduce production atomic_exp -> Nvar
-- On Function_ reduce production atomic_exp -> Nvar
-- On False reduce production atomic_exp -> Nvar
-- On EqualX reduce production atomic_exp -> Nvar
-- On EqEqGt reduce production atomic_exp -> Nvar
-- On Eq reduce production atomic_exp -> Nvar
-- On Eof reduce production atomic_exp -> Nvar
-- On End reduce production atomic_exp -> Nvar
-- On Else reduce production atomic_exp -> Nvar
-- On DotBrace reduce production atomic_exp -> Nvar
-- On Dot reduce production atomic_exp -> Nvar
-- On Do reduce production atomic_exp -> Nvar
-- On Declare reduce production atomic_exp -> Nvar
-- On Comma reduce production atomic_exp -> Nvar
-- On ColonColon reduce production atomic_exp -> Nvar
-- On Colon reduce production atomic_exp -> Nvar
-- On Class_ reduce production atomic_exp -> Nvar
-- On Char reduce production atomic_exp -> Nvar
-- On BraceBar reduce production atomic_exp -> Nvar
-- On BinNum reduce production atomic_exp -> Nvar
-- On Bin reduce production atomic_exp -> Nvar
-- On Begin_ reduce production atomic_exp -> Nvar
-- On BarGt reduce production atomic_exp -> Nvar
-- On BarBrace reduce production atomic_exp -> Nvar
-- On BarBar reduce production atomic_exp -> Nvar
-- On Bar reduce production atomic_exp -> Nvar
-- On BacktickString reduce production atomic_exp -> Nvar
-- On AtX reduce production atomic_exp -> Nvar
-- On At reduce production atomic_exp -> Nvar
-- On Assert reduce production atomic_exp -> Nvar
-- On And reduce production atomic_exp -> Nvar
-- On AmpAmp reduce production atomic_exp -> Nvar

State 259:
## Known stack suffix:
## Match
## LR(1) items:
atomic_exp -> Match . exp With patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match . exp With Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 486
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 260:
## Known stack suffix:
## LtBar
## LR(1) items:
atomic_exp -> LtBar . fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> LtBar . at_exp With fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 472
-- On field_exp shift to state 312
-- On fexps_help shift to state 475
-- On fexps shift to state 476
-- On fexp shift to state 478
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 482
-- On app_exp shift to state 366
## Reductions:

State 261:
## Known stack suffix:
## Lsquare
## LR(1) items:
atomic_exp -> Lsquare . semi_exps Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lsquare . exp Bar Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 463
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 465
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rsquare reduce production semi_exps ->

State 262:
## Known stack suffix:
## Lparen
## LR(1) items:
atomic_exp -> Lparen . exp Colon typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen . comma_exps Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen . exp Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
lit -> Lparen . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Eq Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . IN Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . MEM Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . MinusMinusGt Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . AmpAmp Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . BarBar Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . ColonColon Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Star Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . Plus Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . GtEq Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . PlusX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . StarX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . GtEqX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . EqualX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . StarstarX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . At Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
x -> Lparen . AtX Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On Rparen shift to state 195
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On Match shift to state 259
-- On MEM shift to state 16
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On Do shift to state 288
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BarBar shift to state 30
-- On BacktickString shift to state 294
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 453
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On comma_exps shift to state 461
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 263:
## Known stack suffix:
## Let_
## LR(1) items:
right_atomic_exp -> Let_ . letbind In exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 450
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 264:
## Known stack suffix:
## pat
## LR(1) items:
letbind -> pat . opt_typ_annot Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 254
-- On opt_typ_annot shift to state 265
## Reductions:
-- On Eq reduce production opt_typ_annot ->

State 265:
## Known stack suffix:
## pat opt_typ_annot
## LR(1) items:
letbind -> pat opt_typ_annot . Eq exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## pat opt_typ_annot Eq
## LR(1) items:
letbind -> pat opt_typ_annot Eq . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 449
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 267:
## Known stack suffix:
## Lcurly
## LR(1) items:
atomic_exp -> Lcurly . exp Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly . exp Bar Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly . semi_exps Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 438
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 440
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rcurly reduce production semi_exps ->

State 268:
## Known stack suffix:
## If_
## LR(1) items:
right_atomic_exp -> If_ . exp Then exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 433
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 269:
## Known stack suffix:
## Function_
## LR(1) items:
atomic_exp -> Function_ . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Function_ . Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Bar shift to state 270
-- On x shift to state 205
-- On patexps shift to state 431
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 270:
## Known stack suffix:
## Function_ Bar
## LR(1) items:
atomic_exp -> Function_ Bar . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 271
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 271:
## Known stack suffix:
## Function_ Bar patexps
## LR(1) items:
atomic_exp -> Function_ Bar patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## Function_ Bar patexps End
## LR(1) items:
atomic_exp -> Function_ Bar patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Function_ Bar patexps End
-- On With reduce production atomic_exp -> Function_ Bar patexps End
-- On Val reduce production atomic_exp -> Function_ Bar patexps End
-- On Type reduce production atomic_exp -> Function_ Bar patexps End
-- On True reduce production atomic_exp -> Function_ Bar patexps End
-- On Theorem reduce production atomic_exp -> Function_ Bar patexps End
-- On Then reduce production atomic_exp -> Function_ Bar patexps End
-- On String reduce production atomic_exp -> Function_ Bar patexps End
-- On StarstarX reduce production atomic_exp -> Function_ Bar patexps End
-- On StarX reduce production atomic_exp -> Function_ Bar patexps End
-- On Star reduce production atomic_exp -> Function_ Bar patexps End
-- On SemiSemi reduce production atomic_exp -> Function_ Bar patexps End
-- On Semi reduce production atomic_exp -> Function_ Bar patexps End
-- On Rsquare reduce production atomic_exp -> Function_ Bar patexps End
-- On Rparen reduce production atomic_exp -> Function_ Bar patexps End
-- On Rcurly reduce production atomic_exp -> Function_ Bar patexps End
-- On PlusX reduce production atomic_exp -> Function_ Bar patexps End
-- On Plus reduce production atomic_exp -> Function_ Bar patexps End
-- On Open_ reduce production atomic_exp -> Function_ Bar patexps End
-- On OctNum reduce production atomic_exp -> Function_ Bar patexps End
-- On Nvar reduce production atomic_exp -> Function_ Bar patexps End
-- On Num reduce production atomic_exp -> Function_ Bar patexps End
-- On Module_ reduce production atomic_exp -> Function_ Bar patexps End
-- On MinusMinusGt reduce production atomic_exp -> Function_ Bar patexps End
-- On Match reduce production atomic_exp -> Function_ Bar patexps End
-- On MEM reduce production atomic_exp -> Function_ Bar patexps End
-- On LtBar reduce production atomic_exp -> Function_ Bar patexps End
-- On Lsquare reduce production atomic_exp -> Function_ Bar patexps End
-- On Lparen reduce production atomic_exp -> Function_ Bar patexps End
-- On Let_ reduce production atomic_exp -> Function_ Bar patexps End
-- On Lemma reduce production atomic_exp -> Function_ Bar patexps End
-- On Lcurly reduce production atomic_exp -> Function_ Bar patexps End
-- On Inst_default reduce production atomic_exp -> Function_ Bar patexps End
-- On Inst reduce production atomic_exp -> Function_ Bar patexps End
-- On Indreln reduce production atomic_exp -> Function_ Bar patexps End
-- On Include_ reduce production atomic_exp -> Function_ Bar patexps End
-- On In reduce production atomic_exp -> Function_ Bar patexps End
-- On Import_ reduce production atomic_exp -> Function_ Bar patexps End
-- On IN reduce production atomic_exp -> Function_ Bar patexps End
-- On HexNum reduce production atomic_exp -> Function_ Bar patexps End
-- On Hex reduce production atomic_exp -> Function_ Bar patexps End
-- On HashZero reduce production atomic_exp -> Function_ Bar patexps End
-- On HashOne reduce production atomic_exp -> Function_ Bar patexps End
-- On GtEqX reduce production atomic_exp -> Function_ Bar patexps End
-- On GtEq reduce production atomic_exp -> Function_ Bar patexps End
-- On Function_ reduce production atomic_exp -> Function_ Bar patexps End
-- On False reduce production atomic_exp -> Function_ Bar patexps End
-- On EqualX reduce production atomic_exp -> Function_ Bar patexps End
-- On EqEqGt reduce production atomic_exp -> Function_ Bar patexps End
-- On Eq reduce production atomic_exp -> Function_ Bar patexps End
-- On Eof reduce production atomic_exp -> Function_ Bar patexps End
-- On End reduce production atomic_exp -> Function_ Bar patexps End
-- On Else reduce production atomic_exp -> Function_ Bar patexps End
-- On DotBrace reduce production atomic_exp -> Function_ Bar patexps End
-- On Dot reduce production atomic_exp -> Function_ Bar patexps End
-- On Do reduce production atomic_exp -> Function_ Bar patexps End
-- On Declare reduce production atomic_exp -> Function_ Bar patexps End
-- On Comma reduce production atomic_exp -> Function_ Bar patexps End
-- On ColonColon reduce production atomic_exp -> Function_ Bar patexps End
-- On Colon reduce production atomic_exp -> Function_ Bar patexps End
-- On Class_ reduce production atomic_exp -> Function_ Bar patexps End
-- On Char reduce production atomic_exp -> Function_ Bar patexps End
-- On BraceBar reduce production atomic_exp -> Function_ Bar patexps End
-- On BinNum reduce production atomic_exp -> Function_ Bar patexps End
-- On Bin reduce production atomic_exp -> Function_ Bar patexps End
-- On Begin_ reduce production atomic_exp -> Function_ Bar patexps End
-- On BarGt reduce production atomic_exp -> Function_ Bar patexps End
-- On BarBrace reduce production atomic_exp -> Function_ Bar patexps End
-- On BarBar reduce production atomic_exp -> Function_ Bar patexps End
-- On Bar reduce production atomic_exp -> Function_ Bar patexps End
-- On BacktickString reduce production atomic_exp -> Function_ Bar patexps End
-- On AtX reduce production atomic_exp -> Function_ Bar patexps End
-- On At reduce production atomic_exp -> Function_ Bar patexps End
-- On Assert reduce production atomic_exp -> Function_ Bar patexps End
-- On And reduce production atomic_exp -> Function_ Bar patexps End
-- On AmpAmp reduce production atomic_exp -> Function_ Bar patexps End

State 273:
## Known stack suffix:
## pat
## LR(1) items:
patexps -> pat . Arrow exp [ End ]
patexps -> pat . Arrow exp Bar patexps [ End ]
## Transitions:
-- On Arrow shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## pat Arrow
## LR(1) items:
patexps -> pat Arrow . exp [ End ]
patexps -> pat Arrow . exp Bar patexps [ End ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 428
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 275:
## Known stack suffix:
## Fun_
## LR(1) items:
right_atomic_exp -> Fun_ . patsexp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patsexp shift to state 276
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 277
-- On atomic_pat shift to state 426
## Reductions:

State 276:
## Known stack suffix:
## Fun_ patsexp
## LR(1) items:
right_atomic_exp -> Fun_ patsexp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production right_atomic_exp -> Fun_ patsexp
-- On Val reduce production right_atomic_exp -> Fun_ patsexp
-- On Type reduce production right_atomic_exp -> Fun_ patsexp
-- On Theorem reduce production right_atomic_exp -> Fun_ patsexp
-- On Then reduce production right_atomic_exp -> Fun_ patsexp
-- On SemiSemi reduce production right_atomic_exp -> Fun_ patsexp
-- On Semi reduce production right_atomic_exp -> Fun_ patsexp
-- On Rsquare reduce production right_atomic_exp -> Fun_ patsexp
-- On Rparen reduce production right_atomic_exp -> Fun_ patsexp
-- On Rcurly reduce production right_atomic_exp -> Fun_ patsexp
-- On Open_ reduce production right_atomic_exp -> Fun_ patsexp
-- On Module_ reduce production right_atomic_exp -> Fun_ patsexp
-- On Let_ reduce production right_atomic_exp -> Fun_ patsexp
-- On Lemma reduce production right_atomic_exp -> Fun_ patsexp
-- On Inst_default reduce production right_atomic_exp -> Fun_ patsexp
-- On Inst reduce production right_atomic_exp -> Fun_ patsexp
-- On Indreln reduce production right_atomic_exp -> Fun_ patsexp
-- On Include_ reduce production right_atomic_exp -> Fun_ patsexp
-- On In reduce production right_atomic_exp -> Fun_ patsexp
-- On Import_ reduce production right_atomic_exp -> Fun_ patsexp
-- On EqEqGt reduce production right_atomic_exp -> Fun_ patsexp
-- On Eof reduce production right_atomic_exp -> Fun_ patsexp
-- On End reduce production right_atomic_exp -> Fun_ patsexp
-- On Else reduce production right_atomic_exp -> Fun_ patsexp
-- On Declare reduce production right_atomic_exp -> Fun_ patsexp
-- On Comma reduce production right_atomic_exp -> Fun_ patsexp
-- On Colon reduce production right_atomic_exp -> Fun_ patsexp
-- On Class_ reduce production right_atomic_exp -> Fun_ patsexp
-- On BarGt reduce production right_atomic_exp -> Fun_ patsexp
-- On BarBrace reduce production right_atomic_exp -> Fun_ patsexp
-- On Bar reduce production right_atomic_exp -> Fun_ patsexp
-- On Assert reduce production right_atomic_exp -> Fun_ patsexp
-- On And reduce production right_atomic_exp -> Fun_ patsexp

State 277:
## Known stack suffix:
## atomic_pats1
## LR(1) items:
patsexp -> atomic_pats1 . Arrow exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Arrow shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## atomic_pats1 Arrow
## LR(1) items:
patsexp -> atomic_pats1 Arrow . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 425
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 279:
## Known stack suffix:
## Forall
## LR(1) items:
right_atomic_exp -> Forall . quant_bindings Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 422
## Reductions:

State 280:
## Known stack suffix:
## Lparen
## LR(1) items:
quant_bindings -> Lparen . pat IN exp Rparen [ Dot Bar ]
quant_bindings -> Lparen . pat MEM exp Rparen [ Dot Bar ]
quant_bindings -> Lparen . pat IN exp Rparen quant_bindings [ Dot Bar ]
quant_bindings -> Lparen . pat MEM exp Rparen quant_bindings [ Dot Bar ]
x -> Lparen . Eq Rparen [ X Lparen Dot Bar ]
x -> Lparen . IN Rparen [ X Lparen Dot Bar ]
x -> Lparen . MEM Rparen [ X Lparen Dot Bar ]
x -> Lparen . MinusMinusGt Rparen [ X Lparen Dot Bar ]
x -> Lparen . AmpAmp Rparen [ X Lparen Dot Bar ]
x -> Lparen . BarBar Rparen [ X Lparen Dot Bar ]
x -> Lparen . ColonColon Rparen [ X Lparen Dot Bar ]
x -> Lparen . Star Rparen [ X Lparen Dot Bar ]
x -> Lparen . Plus Rparen [ X Lparen Dot Bar ]
x -> Lparen . GtEq Rparen [ X Lparen Dot Bar ]
x -> Lparen . PlusX Rparen [ X Lparen Dot Bar ]
x -> Lparen . StarX Rparen [ X Lparen Dot Bar ]
x -> Lparen . GtEqX Rparen [ X Lparen Dot Bar ]
x -> Lparen . EqualX Rparen [ X Lparen Dot Bar ]
x -> Lparen . StarstarX Rparen [ X Lparen Dot Bar ]
x -> Lparen . At Rparen [ X Lparen Dot Bar ]
x -> Lparen . AtX Rparen [ X Lparen Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On IN shift to state 18
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On False shift to state 200
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 205
-- On pat shift to state 281
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 281:
## Known stack suffix:
## Lparen pat
## LR(1) items:
quant_bindings -> Lparen pat . IN exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat . MEM exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat . IN exp Rparen quant_bindings [ Dot Bar ]
quant_bindings -> Lparen pat . MEM exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On MEM shift to state 282
-- On IN shift to state 418
## Reductions:

State 282:
## Known stack suffix:
## Lparen pat MEM
## LR(1) items:
quant_bindings -> Lparen pat MEM . exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat MEM . exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 415
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 283:
## Known stack suffix:
## Exists
## LR(1) items:
right_atomic_exp -> Exists . quant_bindings Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 286
## Reductions:

State 284:
## Known stack suffix:
## x
## LR(1) items:
quant_bindings -> x . [ Dot Bar ]
quant_bindings -> x . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 285
## Reductions:
-- On Dot reduce production quant_bindings -> x
-- On Bar reduce production quant_bindings -> x

State 285:
## Known stack suffix:
## x quant_bindings
## LR(1) items:
quant_bindings -> x quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot reduce production quant_bindings -> x quant_bindings
-- On Bar reduce production quant_bindings -> x quant_bindings

State 286:
## Known stack suffix:
## Exists quant_bindings
## LR(1) items:
right_atomic_exp -> Exists quant_bindings . Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Dot shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## Exists quant_bindings Dot
## LR(1) items:
right_atomic_exp -> Exists quant_bindings Dot . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 414
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 288:
## Known stack suffix:
## Do
## LR(1) items:
atomic_exp -> Do . id do_exps In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## Do id
## LR(1) items:
atomic_exp -> Do id . do_exps In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 290
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On do_exps shift to state 410
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On In reduce production do_exps ->

State 290:
## Known stack suffix:
## pat
## LR(1) items:
do_exps -> pat . LeftArrow exp Semi do_exps [ In ]
## Transitions:
-- On LeftArrow shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## pat LeftArrow
## LR(1) items:
do_exps -> pat LeftArrow . exp Semi do_exps [ In ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 407
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 292:
## Known stack suffix:
## BraceBar
## LR(1) items:
atomic_exp -> BraceBar . semi_exps BarBrace [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 401
-- On semi_exps shift to state 402
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 404
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On BarBrace reduce production semi_exps ->

State 293:
## Known stack suffix:
## Begin_
## LR(1) items:
atomic_exp -> Begin_ . exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 399
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 294:
## Known stack suffix:
## BacktickString
## LR(1) items:
atomic_exp -> BacktickString . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> BacktickString
-- On With reduce production atomic_exp -> BacktickString
-- On Val reduce production atomic_exp -> BacktickString
-- On Type reduce production atomic_exp -> BacktickString
-- On True reduce production atomic_exp -> BacktickString
-- On Theorem reduce production atomic_exp -> BacktickString
-- On Then reduce production atomic_exp -> BacktickString
-- On String reduce production atomic_exp -> BacktickString
-- On StarstarX reduce production atomic_exp -> BacktickString
-- On StarX reduce production atomic_exp -> BacktickString
-- On Star reduce production atomic_exp -> BacktickString
-- On SemiSemi reduce production atomic_exp -> BacktickString
-- On Semi reduce production atomic_exp -> BacktickString
-- On Rsquare reduce production atomic_exp -> BacktickString
-- On Rparen reduce production atomic_exp -> BacktickString
-- On Rcurly reduce production atomic_exp -> BacktickString
-- On PlusX reduce production atomic_exp -> BacktickString
-- On Plus reduce production atomic_exp -> BacktickString
-- On Open_ reduce production atomic_exp -> BacktickString
-- On OctNum reduce production atomic_exp -> BacktickString
-- On Nvar reduce production atomic_exp -> BacktickString
-- On Num reduce production atomic_exp -> BacktickString
-- On Module_ reduce production atomic_exp -> BacktickString
-- On MinusMinusGt reduce production atomic_exp -> BacktickString
-- On Match reduce production atomic_exp -> BacktickString
-- On MEM reduce production atomic_exp -> BacktickString
-- On LtBar reduce production atomic_exp -> BacktickString
-- On Lsquare reduce production atomic_exp -> BacktickString
-- On Lparen reduce production atomic_exp -> BacktickString
-- On Let_ reduce production atomic_exp -> BacktickString
-- On Lemma reduce production atomic_exp -> BacktickString
-- On Lcurly reduce production atomic_exp -> BacktickString
-- On Inst_default reduce production atomic_exp -> BacktickString
-- On Inst reduce production atomic_exp -> BacktickString
-- On Indreln reduce production atomic_exp -> BacktickString
-- On Include_ reduce production atomic_exp -> BacktickString
-- On In reduce production atomic_exp -> BacktickString
-- On Import_ reduce production atomic_exp -> BacktickString
-- On IN reduce production atomic_exp -> BacktickString
-- On HexNum reduce production atomic_exp -> BacktickString
-- On Hex reduce production atomic_exp -> BacktickString
-- On HashZero reduce production atomic_exp -> BacktickString
-- On HashOne reduce production atomic_exp -> BacktickString
-- On GtEqX reduce production atomic_exp -> BacktickString
-- On GtEq reduce production atomic_exp -> BacktickString
-- On Function_ reduce production atomic_exp -> BacktickString
-- On False reduce production atomic_exp -> BacktickString
-- On EqualX reduce production atomic_exp -> BacktickString
-- On EqEqGt reduce production atomic_exp -> BacktickString
-- On Eq reduce production atomic_exp -> BacktickString
-- On Eof reduce production atomic_exp -> BacktickString
-- On End reduce production atomic_exp -> BacktickString
-- On Else reduce production atomic_exp -> BacktickString
-- On DotBrace reduce production atomic_exp -> BacktickString
-- On Dot reduce production atomic_exp -> BacktickString
-- On Do reduce production atomic_exp -> BacktickString
-- On Declare reduce production atomic_exp -> BacktickString
-- On Comma reduce production atomic_exp -> BacktickString
-- On ColonColon reduce production atomic_exp -> BacktickString
-- On Colon reduce production atomic_exp -> BacktickString
-- On Class_ reduce production atomic_exp -> BacktickString
-- On Char reduce production atomic_exp -> BacktickString
-- On BraceBar reduce production atomic_exp -> BacktickString
-- On BinNum reduce production atomic_exp -> BacktickString
-- On Bin reduce production atomic_exp -> BacktickString
-- On Begin_ reduce production atomic_exp -> BacktickString
-- On BarGt reduce production atomic_exp -> BacktickString
-- On BarBrace reduce production atomic_exp -> BacktickString
-- On BarBar reduce production atomic_exp -> BacktickString
-- On Bar reduce production atomic_exp -> BacktickString
-- On BacktickString reduce production atomic_exp -> BacktickString
-- On AtX reduce production atomic_exp -> BacktickString
-- On At reduce production atomic_exp -> BacktickString
-- On Assert reduce production atomic_exp -> BacktickString
-- On And reduce production atomic_exp -> BacktickString
-- On AmpAmp reduce production atomic_exp -> BacktickString

State 295:
## Known stack suffix:
## starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Val reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Type reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Theorem reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Then reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On SemiSemi reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Semi reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Rsquare reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Rparen reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Rcurly reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Open_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Module_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Let_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Lemma reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Inst_default reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Inst reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Indreln reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Include_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On In reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Import_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On EqEqGt reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Eof reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On End reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Else reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Declare reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Comma reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Colon reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Class_ reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On BarGt reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On BarBrace reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Bar reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On Assert reduce production star_right_atomic_exp -> starstar_right_atomic_exp
-- On And reduce production star_right_atomic_exp -> starstar_right_atomic_exp

State 296:
## Known stack suffix:
## starstar_exp
## LR(1) items:
star_exp -> starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production star_exp -> starstar_exp
-- On Val reduce production star_exp -> starstar_exp
-- On Type reduce production star_exp -> starstar_exp
-- On Theorem reduce production star_exp -> starstar_exp
-- On Then reduce production star_exp -> starstar_exp
-- On StarX reduce production star_exp -> starstar_exp
-- On Star reduce production star_exp -> starstar_exp
-- On SemiSemi reduce production star_exp -> starstar_exp
-- On Semi reduce production star_exp -> starstar_exp
-- On Rsquare reduce production star_exp -> starstar_exp
-- On Rparen reduce production star_exp -> starstar_exp
-- On Rcurly reduce production star_exp -> starstar_exp
-- On PlusX reduce production star_exp -> starstar_exp
-- On Plus reduce production star_exp -> starstar_exp
-- On Open_ reduce production star_exp -> starstar_exp
-- On Module_ reduce production star_exp -> starstar_exp
-- On MinusMinusGt reduce production star_exp -> starstar_exp
-- On MEM reduce production star_exp -> starstar_exp
-- On Let_ reduce production star_exp -> starstar_exp
-- On Lemma reduce production star_exp -> starstar_exp
-- On Inst_default reduce production star_exp -> starstar_exp
-- On Inst reduce production star_exp -> starstar_exp
-- On Indreln reduce production star_exp -> starstar_exp
-- On Include_ reduce production star_exp -> starstar_exp
-- On In reduce production star_exp -> starstar_exp
-- On Import_ reduce production star_exp -> starstar_exp
-- On IN reduce production star_exp -> starstar_exp
-- On GtEqX reduce production star_exp -> starstar_exp
-- On GtEq reduce production star_exp -> starstar_exp
-- On EqualX reduce production star_exp -> starstar_exp
-- On EqEqGt reduce production star_exp -> starstar_exp
-- On Eq reduce production star_exp -> starstar_exp
-- On Eof reduce production star_exp -> starstar_exp
-- On End reduce production star_exp -> starstar_exp
-- On Else reduce production star_exp -> starstar_exp
-- On Declare reduce production star_exp -> starstar_exp
-- On Comma reduce production star_exp -> starstar_exp
-- On ColonColon reduce production star_exp -> starstar_exp
-- On Colon reduce production star_exp -> starstar_exp
-- On Class_ reduce production star_exp -> starstar_exp
-- On BarGt reduce production star_exp -> starstar_exp
-- On BarBrace reduce production star_exp -> starstar_exp
-- On BarBar reduce production star_exp -> starstar_exp
-- On Bar reduce production star_exp -> starstar_exp
-- On AtX reduce production star_exp -> starstar_exp
-- On At reduce production star_exp -> starstar_exp
-- On Assert reduce production star_exp -> starstar_exp
-- On And reduce production star_exp -> starstar_exp
-- On AmpAmp reduce production star_exp -> starstar_exp

State 297:
## Known stack suffix:
## star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Val reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Type reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Theorem reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Then reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On SemiSemi reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Semi reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Rsquare reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Rparen reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Rcurly reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Open_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Module_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Let_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Lemma reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Inst_default reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Inst reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Indreln reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Include_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On In reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Import_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On EqEqGt reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Eof reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On End reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Else reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Declare reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Comma reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Colon reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Class_ reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On BarGt reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On BarBrace reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Bar reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On Assert reduce production plus_right_atomic_exp -> star_right_atomic_exp
-- On And reduce production plus_right_atomic_exp -> star_right_atomic_exp

State 298:
## Known stack suffix:
## star_exp
## LR(1) items:
plus_exp -> star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With reduce production plus_exp -> star_exp
-- On Val reduce production plus_exp -> star_exp
-- On Type reduce production plus_exp -> star_exp
-- On Theorem reduce production plus_exp -> star_exp
-- On Then reduce production plus_exp -> star_exp
-- On SemiSemi reduce production plus_exp -> star_exp
-- On Semi reduce production plus_exp -> star_exp
-- On Rsquare reduce production plus_exp -> star_exp
-- On Rparen reduce production plus_exp -> star_exp
-- On Rcurly reduce production plus_exp -> star_exp
-- On PlusX reduce production plus_exp -> star_exp
-- On Plus reduce production plus_exp -> star_exp
-- On Open_ reduce production plus_exp -> star_exp
-- On Module_ reduce production plus_exp -> star_exp
-- On MinusMinusGt reduce production plus_exp -> star_exp
-- On MEM reduce production plus_exp -> star_exp
-- On Let_ reduce production plus_exp -> star_exp
-- On Lemma reduce production plus_exp -> star_exp
-- On Inst_default reduce production plus_exp -> star_exp
-- On Inst reduce production plus_exp -> star_exp
-- On Indreln reduce production plus_exp -> star_exp
-- On Include_ reduce production plus_exp -> star_exp
-- On In reduce production plus_exp -> star_exp
-- On Import_ reduce production plus_exp -> star_exp
-- On IN reduce production plus_exp -> star_exp
-- On GtEqX reduce production plus_exp -> star_exp
-- On GtEq reduce production plus_exp -> star_exp
-- On EqualX reduce production plus_exp -> star_exp
-- On EqEqGt reduce production plus_exp -> star_exp
-- On Eq reduce production plus_exp -> star_exp
-- On Eof reduce production plus_exp -> star_exp
-- On End reduce production plus_exp -> star_exp
-- On Else reduce production plus_exp -> star_exp
-- On Declare reduce production plus_exp -> star_exp
-- On Comma reduce production plus_exp -> star_exp
-- On ColonColon reduce production plus_exp -> star_exp
-- On Colon reduce production plus_exp -> star_exp
-- On Class_ reduce production plus_exp -> star_exp
-- On BarGt reduce production plus_exp -> star_exp
-- On BarBrace reduce production plus_exp -> star_exp
-- On BarBar reduce production plus_exp -> star_exp
-- On Bar reduce production plus_exp -> star_exp
-- On AtX reduce production plus_exp -> star_exp
-- On At reduce production plus_exp -> star_exp
-- On Assert reduce production plus_exp -> star_exp
-- On And reduce production plus_exp -> star_exp
-- On AmpAmp reduce production plus_exp -> star_exp

State 299:
## Known stack suffix:
## star_exp StarX
## LR(1) items:
star_exp -> star_exp StarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp StarX . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 300
-- On starstar_exp shift to state 301
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 300:
## Known stack suffix:
## star_exp StarX starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Val reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Type reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Theorem reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Then reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On SemiSemi reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Semi reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Rsquare reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Rparen reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Rcurly reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Open_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Module_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Let_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Lemma reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Inst_default reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Inst reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Indreln reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Include_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On In reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Import_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On EqEqGt reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Eof reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On End reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Else reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Declare reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Comma reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Colon reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Class_ reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On BarGt reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On BarBrace reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Bar reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On Assert reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp
-- On And reduce production star_right_atomic_exp -> star_exp StarX starstar_right_atomic_exp

State 301:
## Known stack suffix:
## star_exp StarX starstar_exp
## LR(1) items:
star_exp -> star_exp StarX starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production star_exp -> star_exp StarX starstar_exp
-- On Val reduce production star_exp -> star_exp StarX starstar_exp
-- On Type reduce production star_exp -> star_exp StarX starstar_exp
-- On Theorem reduce production star_exp -> star_exp StarX starstar_exp
-- On Then reduce production star_exp -> star_exp StarX starstar_exp
-- On StarX reduce production star_exp -> star_exp StarX starstar_exp
-- On Star reduce production star_exp -> star_exp StarX starstar_exp
-- On SemiSemi reduce production star_exp -> star_exp StarX starstar_exp
-- On Semi reduce production star_exp -> star_exp StarX starstar_exp
-- On Rsquare reduce production star_exp -> star_exp StarX starstar_exp
-- On Rparen reduce production star_exp -> star_exp StarX starstar_exp
-- On Rcurly reduce production star_exp -> star_exp StarX starstar_exp
-- On PlusX reduce production star_exp -> star_exp StarX starstar_exp
-- On Plus reduce production star_exp -> star_exp StarX starstar_exp
-- On Open_ reduce production star_exp -> star_exp StarX starstar_exp
-- On Module_ reduce production star_exp -> star_exp StarX starstar_exp
-- On MinusMinusGt reduce production star_exp -> star_exp StarX starstar_exp
-- On MEM reduce production star_exp -> star_exp StarX starstar_exp
-- On Let_ reduce production star_exp -> star_exp StarX starstar_exp
-- On Lemma reduce production star_exp -> star_exp StarX starstar_exp
-- On Inst_default reduce production star_exp -> star_exp StarX starstar_exp
-- On Inst reduce production star_exp -> star_exp StarX starstar_exp
-- On Indreln reduce production star_exp -> star_exp StarX starstar_exp
-- On Include_ reduce production star_exp -> star_exp StarX starstar_exp
-- On In reduce production star_exp -> star_exp StarX starstar_exp
-- On Import_ reduce production star_exp -> star_exp StarX starstar_exp
-- On IN reduce production star_exp -> star_exp StarX starstar_exp
-- On GtEqX reduce production star_exp -> star_exp StarX starstar_exp
-- On GtEq reduce production star_exp -> star_exp StarX starstar_exp
-- On EqualX reduce production star_exp -> star_exp StarX starstar_exp
-- On EqEqGt reduce production star_exp -> star_exp StarX starstar_exp
-- On Eq reduce production star_exp -> star_exp StarX starstar_exp
-- On Eof reduce production star_exp -> star_exp StarX starstar_exp
-- On End reduce production star_exp -> star_exp StarX starstar_exp
-- On Else reduce production star_exp -> star_exp StarX starstar_exp
-- On Declare reduce production star_exp -> star_exp StarX starstar_exp
-- On Comma reduce production star_exp -> star_exp StarX starstar_exp
-- On ColonColon reduce production star_exp -> star_exp StarX starstar_exp
-- On Colon reduce production star_exp -> star_exp StarX starstar_exp
-- On Class_ reduce production star_exp -> star_exp StarX starstar_exp
-- On BarGt reduce production star_exp -> star_exp StarX starstar_exp
-- On BarBrace reduce production star_exp -> star_exp StarX starstar_exp
-- On BarBar reduce production star_exp -> star_exp StarX starstar_exp
-- On Bar reduce production star_exp -> star_exp StarX starstar_exp
-- On AtX reduce production star_exp -> star_exp StarX starstar_exp
-- On At reduce production star_exp -> star_exp StarX starstar_exp
-- On Assert reduce production star_exp -> star_exp StarX starstar_exp
-- On And reduce production star_exp -> star_exp StarX starstar_exp
-- On AmpAmp reduce production star_exp -> star_exp StarX starstar_exp

State 302:
## Known stack suffix:
## right_atomic_exp
## LR(1) items:
starstar_right_atomic_exp -> right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Val reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Type reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Theorem reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Then reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On SemiSemi reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Semi reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Rsquare reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Rparen reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Rcurly reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Open_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Module_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Let_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Lemma reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Inst_default reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Inst reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Indreln reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Include_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On In reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Import_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On EqEqGt reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Eof reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On End reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Else reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Declare reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Comma reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Colon reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Class_ reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On BarGt reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On BarBrace reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Bar reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On Assert reduce production starstar_right_atomic_exp -> right_atomic_exp
-- On And reduce production starstar_right_atomic_exp -> right_atomic_exp

State 303:
## Known stack suffix:
## lit
## LR(1) items:
atomic_exp -> lit . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> lit
-- On With reduce production atomic_exp -> lit
-- On Val reduce production atomic_exp -> lit
-- On Type reduce production atomic_exp -> lit
-- On True reduce production atomic_exp -> lit
-- On Theorem reduce production atomic_exp -> lit
-- On Then reduce production atomic_exp -> lit
-- On String reduce production atomic_exp -> lit
-- On StarstarX reduce production atomic_exp -> lit
-- On StarX reduce production atomic_exp -> lit
-- On Star reduce production atomic_exp -> lit
-- On SemiSemi reduce production atomic_exp -> lit
-- On Semi reduce production atomic_exp -> lit
-- On Rsquare reduce production atomic_exp -> lit
-- On Rparen reduce production atomic_exp -> lit
-- On Rcurly reduce production atomic_exp -> lit
-- On PlusX reduce production atomic_exp -> lit
-- On Plus reduce production atomic_exp -> lit
-- On Open_ reduce production atomic_exp -> lit
-- On OctNum reduce production atomic_exp -> lit
-- On Nvar reduce production atomic_exp -> lit
-- On Num reduce production atomic_exp -> lit
-- On Module_ reduce production atomic_exp -> lit
-- On MinusMinusGt reduce production atomic_exp -> lit
-- On Match reduce production atomic_exp -> lit
-- On MEM reduce production atomic_exp -> lit
-- On LtBar reduce production atomic_exp -> lit
-- On Lsquare reduce production atomic_exp -> lit
-- On Lparen reduce production atomic_exp -> lit
-- On Let_ reduce production atomic_exp -> lit
-- On Lemma reduce production atomic_exp -> lit
-- On Lcurly reduce production atomic_exp -> lit
-- On Inst_default reduce production atomic_exp -> lit
-- On Inst reduce production atomic_exp -> lit
-- On Indreln reduce production atomic_exp -> lit
-- On Include_ reduce production atomic_exp -> lit
-- On In reduce production atomic_exp -> lit
-- On Import_ reduce production atomic_exp -> lit
-- On IN reduce production atomic_exp -> lit
-- On HexNum reduce production atomic_exp -> lit
-- On Hex reduce production atomic_exp -> lit
-- On HashZero reduce production atomic_exp -> lit
-- On HashOne reduce production atomic_exp -> lit
-- On GtEqX reduce production atomic_exp -> lit
-- On GtEq reduce production atomic_exp -> lit
-- On Function_ reduce production atomic_exp -> lit
-- On False reduce production atomic_exp -> lit
-- On EqualX reduce production atomic_exp -> lit
-- On EqEqGt reduce production atomic_exp -> lit
-- On Eq reduce production atomic_exp -> lit
-- On Eof reduce production atomic_exp -> lit
-- On End reduce production atomic_exp -> lit
-- On Else reduce production atomic_exp -> lit
-- On DotBrace reduce production atomic_exp -> lit
-- On Dot reduce production atomic_exp -> lit
-- On Do reduce production atomic_exp -> lit
-- On Declare reduce production atomic_exp -> lit
-- On Comma reduce production atomic_exp -> lit
-- On ColonColon reduce production atomic_exp -> lit
-- On Colon reduce production atomic_exp -> lit
-- On Class_ reduce production atomic_exp -> lit
-- On Char reduce production atomic_exp -> lit
-- On BraceBar reduce production atomic_exp -> lit
-- On BinNum reduce production atomic_exp -> lit
-- On Bin reduce production atomic_exp -> lit
-- On Begin_ reduce production atomic_exp -> lit
-- On BarGt reduce production atomic_exp -> lit
-- On BarBrace reduce production atomic_exp -> lit
-- On BarBar reduce production atomic_exp -> lit
-- On Bar reduce production atomic_exp -> lit
-- On BacktickString reduce production atomic_exp -> lit
-- On AtX reduce production atomic_exp -> lit
-- On At reduce production atomic_exp -> lit
-- On Assert reduce production atomic_exp -> lit
-- On And reduce production atomic_exp -> lit
-- On AmpAmp reduce production atomic_exp -> lit

State 304:
## Known stack suffix:
## id
## LR(1) items:
field_exp -> id . DotBrace nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id . DotBrace nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On DotBrace shift to state 305
## Reductions:
-- On X reduce production field_exp -> id
-- On With reduce production field_exp -> id
-- On Val reduce production field_exp -> id
-- On Type reduce production field_exp -> id
-- On True reduce production field_exp -> id
-- On Theorem reduce production field_exp -> id
-- On Then reduce production field_exp -> id
-- On String reduce production field_exp -> id
-- On StarstarX reduce production field_exp -> id
-- On StarX reduce production field_exp -> id
-- On Star reduce production field_exp -> id
-- On SemiSemi reduce production field_exp -> id
-- On Semi reduce production field_exp -> id
-- On Rsquare reduce production field_exp -> id
-- On Rparen reduce production field_exp -> id
-- On Rcurly reduce production field_exp -> id
-- On PlusX reduce production field_exp -> id
-- On Plus reduce production field_exp -> id
-- On Open_ reduce production field_exp -> id
-- On OctNum reduce production field_exp -> id
-- On Nvar reduce production field_exp -> id
-- On Num reduce production field_exp -> id
-- On Module_ reduce production field_exp -> id
-- On MinusMinusGt reduce production field_exp -> id
-- On Match reduce production field_exp -> id
-- On MEM reduce production field_exp -> id
-- On LtBar reduce production field_exp -> id
-- On Lsquare reduce production field_exp -> id
-- On Lparen reduce production field_exp -> id
-- On Let_ reduce production field_exp -> id
-- On Lemma reduce production field_exp -> id
-- On Lcurly reduce production field_exp -> id
-- On Inst_default reduce production field_exp -> id
-- On Inst reduce production field_exp -> id
-- On Indreln reduce production field_exp -> id
-- On Include_ reduce production field_exp -> id
-- On In reduce production field_exp -> id
-- On Import_ reduce production field_exp -> id
-- On IN reduce production field_exp -> id
-- On HexNum reduce production field_exp -> id
-- On Hex reduce production field_exp -> id
-- On HashZero reduce production field_exp -> id
-- On HashOne reduce production field_exp -> id
-- On GtEqX reduce production field_exp -> id
-- On GtEq reduce production field_exp -> id
-- On Function_ reduce production field_exp -> id
-- On False reduce production field_exp -> id
-- On EqualX reduce production field_exp -> id
-- On EqEqGt reduce production field_exp -> id
-- On Eq reduce production field_exp -> id
-- On Eof reduce production field_exp -> id
-- On End reduce production field_exp -> id
-- On Else reduce production field_exp -> id
-- On Do reduce production field_exp -> id
-- On Declare reduce production field_exp -> id
-- On Comma reduce production field_exp -> id
-- On ColonColon reduce production field_exp -> id
-- On Colon reduce production field_exp -> id
-- On Class_ reduce production field_exp -> id
-- On Char reduce production field_exp -> id
-- On BraceBar reduce production field_exp -> id
-- On BinNum reduce production field_exp -> id
-- On Bin reduce production field_exp -> id
-- On Begin_ reduce production field_exp -> id
-- On BarGt reduce production field_exp -> id
-- On BarBrace reduce production field_exp -> id
-- On BarBar reduce production field_exp -> id
-- On Bar reduce production field_exp -> id
-- On BacktickString reduce production field_exp -> id
-- On AtX reduce production field_exp -> id
-- On At reduce production field_exp -> id
-- On Assert reduce production field_exp -> id
-- On And reduce production field_exp -> id
-- On AmpAmp reduce production field_exp -> id

State 305:
## Known stack suffix:
## id DotBrace
## LR(1) items:
field_exp -> id DotBrace . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id DotBrace . nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 306
-- On atomic_nexp shift to state 77
## Reductions:

State 306:
## Known stack suffix:
## id DotBrace nexp
## LR(1) items:
field_exp -> id DotBrace nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> id DotBrace nexp . Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 307
-- On Dot shift to state 308
## Reductions:

State 307:
## Known stack suffix:
## id DotBrace nexp Rsquare
## LR(1) items:
field_exp -> id DotBrace nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production field_exp -> id DotBrace nexp Rsquare
-- On With reduce production field_exp -> id DotBrace nexp Rsquare
-- On Val reduce production field_exp -> id DotBrace nexp Rsquare
-- On Type reduce production field_exp -> id DotBrace nexp Rsquare
-- On True reduce production field_exp -> id DotBrace nexp Rsquare
-- On Theorem reduce production field_exp -> id DotBrace nexp Rsquare
-- On Then reduce production field_exp -> id DotBrace nexp Rsquare
-- On String reduce production field_exp -> id DotBrace nexp Rsquare
-- On StarstarX reduce production field_exp -> id DotBrace nexp Rsquare
-- On StarX reduce production field_exp -> id DotBrace nexp Rsquare
-- On Star reduce production field_exp -> id DotBrace nexp Rsquare
-- On SemiSemi reduce production field_exp -> id DotBrace nexp Rsquare
-- On Semi reduce production field_exp -> id DotBrace nexp Rsquare
-- On Rsquare reduce production field_exp -> id DotBrace nexp Rsquare
-- On Rparen reduce production field_exp -> id DotBrace nexp Rsquare
-- On Rcurly reduce production field_exp -> id DotBrace nexp Rsquare
-- On PlusX reduce production field_exp -> id DotBrace nexp Rsquare
-- On Plus reduce production field_exp -> id DotBrace nexp Rsquare
-- On Open_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On OctNum reduce production field_exp -> id DotBrace nexp Rsquare
-- On Nvar reduce production field_exp -> id DotBrace nexp Rsquare
-- On Num reduce production field_exp -> id DotBrace nexp Rsquare
-- On Module_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On MinusMinusGt reduce production field_exp -> id DotBrace nexp Rsquare
-- On Match reduce production field_exp -> id DotBrace nexp Rsquare
-- On MEM reduce production field_exp -> id DotBrace nexp Rsquare
-- On LtBar reduce production field_exp -> id DotBrace nexp Rsquare
-- On Lsquare reduce production field_exp -> id DotBrace nexp Rsquare
-- On Lparen reduce production field_exp -> id DotBrace nexp Rsquare
-- On Let_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On Lemma reduce production field_exp -> id DotBrace nexp Rsquare
-- On Lcurly reduce production field_exp -> id DotBrace nexp Rsquare
-- On Inst_default reduce production field_exp -> id DotBrace nexp Rsquare
-- On Inst reduce production field_exp -> id DotBrace nexp Rsquare
-- On Indreln reduce production field_exp -> id DotBrace nexp Rsquare
-- On Include_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On In reduce production field_exp -> id DotBrace nexp Rsquare
-- On Import_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On IN reduce production field_exp -> id DotBrace nexp Rsquare
-- On HexNum reduce production field_exp -> id DotBrace nexp Rsquare
-- On Hex reduce production field_exp -> id DotBrace nexp Rsquare
-- On HashZero reduce production field_exp -> id DotBrace nexp Rsquare
-- On HashOne reduce production field_exp -> id DotBrace nexp Rsquare
-- On GtEqX reduce production field_exp -> id DotBrace nexp Rsquare
-- On GtEq reduce production field_exp -> id DotBrace nexp Rsquare
-- On Function_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On False reduce production field_exp -> id DotBrace nexp Rsquare
-- On EqualX reduce production field_exp -> id DotBrace nexp Rsquare
-- On EqEqGt reduce production field_exp -> id DotBrace nexp Rsquare
-- On Eq reduce production field_exp -> id DotBrace nexp Rsquare
-- On Eof reduce production field_exp -> id DotBrace nexp Rsquare
-- On End reduce production field_exp -> id DotBrace nexp Rsquare
-- On Else reduce production field_exp -> id DotBrace nexp Rsquare
-- On Do reduce production field_exp -> id DotBrace nexp Rsquare
-- On Declare reduce production field_exp -> id DotBrace nexp Rsquare
-- On Comma reduce production field_exp -> id DotBrace nexp Rsquare
-- On ColonColon reduce production field_exp -> id DotBrace nexp Rsquare
-- On Colon reduce production field_exp -> id DotBrace nexp Rsquare
-- On Class_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On Char reduce production field_exp -> id DotBrace nexp Rsquare
-- On BraceBar reduce production field_exp -> id DotBrace nexp Rsquare
-- On BinNum reduce production field_exp -> id DotBrace nexp Rsquare
-- On Bin reduce production field_exp -> id DotBrace nexp Rsquare
-- On Begin_ reduce production field_exp -> id DotBrace nexp Rsquare
-- On BarGt reduce production field_exp -> id DotBrace nexp Rsquare
-- On BarBrace reduce production field_exp -> id DotBrace nexp Rsquare
-- On BarBar reduce production field_exp -> id DotBrace nexp Rsquare
-- On Bar reduce production field_exp -> id DotBrace nexp Rsquare
-- On BacktickString reduce production field_exp -> id DotBrace nexp Rsquare
-- On AtX reduce production field_exp -> id DotBrace nexp Rsquare
-- On At reduce production field_exp -> id DotBrace nexp Rsquare
-- On Assert reduce production field_exp -> id DotBrace nexp Rsquare
-- On And reduce production field_exp -> id DotBrace nexp Rsquare
-- On AmpAmp reduce production field_exp -> id DotBrace nexp Rsquare

State 308:
## Known stack suffix:
## id DotBrace nexp Dot
## LR(1) items:
field_exp -> id DotBrace nexp Dot . Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Dot shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## id DotBrace nexp Dot Dot
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 310
-- On atomic_nexp shift to state 77
## Reductions:

State 310:
## Known stack suffix:
## id DotBrace nexp Dot Dot nexp
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## id DotBrace nexp Dot Dot nexp Rsquare
## LR(1) items:
field_exp -> id DotBrace nexp Dot Dot nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On With reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Val reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Type reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On True reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Theorem reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Then reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On String reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On StarstarX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On StarX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Star reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On SemiSemi reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Semi reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Rsquare reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Rparen reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Rcurly reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On PlusX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Plus reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Open_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On OctNum reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Nvar reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Num reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Module_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On MinusMinusGt reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Match reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On MEM reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On LtBar reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Lsquare reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Lparen reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Let_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Lemma reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Lcurly reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Inst_default reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Inst reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Indreln reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Include_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On In reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Import_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On IN reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On HexNum reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Hex reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On HashZero reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On HashOne reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On GtEqX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On GtEq reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Function_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On False reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On EqualX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On EqEqGt reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Eq reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Eof reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On End reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Else reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Do reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Declare reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Comma reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On ColonColon reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Colon reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Class_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Char reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BraceBar reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BinNum reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Bin reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Begin_ reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BarGt reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BarBrace reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BarBar reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Bar reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On BacktickString reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On AtX reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On At reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On Assert reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On And reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare
-- On AmpAmp reduce production field_exp -> id DotBrace nexp Dot Dot nexp Rsquare

State 312:
## Known stack suffix:
## field_exp
## LR(1) items:
app_exp -> field_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production app_exp -> field_exp
-- On With reduce production app_exp -> field_exp
-- On Val reduce production app_exp -> field_exp
-- On Type reduce production app_exp -> field_exp
-- On True reduce production app_exp -> field_exp
-- On Theorem reduce production app_exp -> field_exp
-- On Then reduce production app_exp -> field_exp
-- On String reduce production app_exp -> field_exp
-- On StarstarX reduce production app_exp -> field_exp
-- On StarX reduce production app_exp -> field_exp
-- On Star reduce production app_exp -> field_exp
-- On SemiSemi reduce production app_exp -> field_exp
-- On Semi reduce production app_exp -> field_exp
-- On Rsquare reduce production app_exp -> field_exp
-- On Rparen reduce production app_exp -> field_exp
-- On Rcurly reduce production app_exp -> field_exp
-- On PlusX reduce production app_exp -> field_exp
-- On Plus reduce production app_exp -> field_exp
-- On Open_ reduce production app_exp -> field_exp
-- On OctNum reduce production app_exp -> field_exp
-- On Nvar reduce production app_exp -> field_exp
-- On Num reduce production app_exp -> field_exp
-- On Module_ reduce production app_exp -> field_exp
-- On MinusMinusGt reduce production app_exp -> field_exp
-- On Match reduce production app_exp -> field_exp
-- On MEM reduce production app_exp -> field_exp
-- On LtBar reduce production app_exp -> field_exp
-- On Lsquare reduce production app_exp -> field_exp
-- On Lparen reduce production app_exp -> field_exp
-- On Let_ reduce production app_exp -> field_exp
-- On Lemma reduce production app_exp -> field_exp
-- On Lcurly reduce production app_exp -> field_exp
-- On Inst_default reduce production app_exp -> field_exp
-- On Inst reduce production app_exp -> field_exp
-- On Indreln reduce production app_exp -> field_exp
-- On Include_ reduce production app_exp -> field_exp
-- On In reduce production app_exp -> field_exp
-- On Import_ reduce production app_exp -> field_exp
-- On IN reduce production app_exp -> field_exp
-- On HexNum reduce production app_exp -> field_exp
-- On Hex reduce production app_exp -> field_exp
-- On HashZero reduce production app_exp -> field_exp
-- On HashOne reduce production app_exp -> field_exp
-- On GtEqX reduce production app_exp -> field_exp
-- On GtEq reduce production app_exp -> field_exp
-- On Function_ reduce production app_exp -> field_exp
-- On False reduce production app_exp -> field_exp
-- On EqualX reduce production app_exp -> field_exp
-- On EqEqGt reduce production app_exp -> field_exp
-- On Eq reduce production app_exp -> field_exp
-- On Eof reduce production app_exp -> field_exp
-- On End reduce production app_exp -> field_exp
-- On Else reduce production app_exp -> field_exp
-- On Do reduce production app_exp -> field_exp
-- On Declare reduce production app_exp -> field_exp
-- On Comma reduce production app_exp -> field_exp
-- On ColonColon reduce production app_exp -> field_exp
-- On Colon reduce production app_exp -> field_exp
-- On Class_ reduce production app_exp -> field_exp
-- On Char reduce production app_exp -> field_exp
-- On BraceBar reduce production app_exp -> field_exp
-- On BinNum reduce production app_exp -> field_exp
-- On Bin reduce production app_exp -> field_exp
-- On Begin_ reduce production app_exp -> field_exp
-- On BarGt reduce production app_exp -> field_exp
-- On BarBrace reduce production app_exp -> field_exp
-- On BarBar reduce production app_exp -> field_exp
-- On Bar reduce production app_exp -> field_exp
-- On BacktickString reduce production app_exp -> field_exp
-- On AtX reduce production app_exp -> field_exp
-- On At reduce production app_exp -> field_exp
-- On Assert reduce production app_exp -> field_exp
-- On And reduce production app_exp -> field_exp
-- On AmpAmp reduce production app_exp -> field_exp

State 313:
## Known stack suffix:
## atomic_exp
## LR(1) items:
field_exp -> atomic_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . Dot id [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . DotBrace nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp . DotBrace nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On DotBrace shift to state 314
-- On Dot shift to state 321
## Reductions:
-- On X reduce production field_exp -> atomic_exp
-- On With reduce production field_exp -> atomic_exp
-- On Val reduce production field_exp -> atomic_exp
-- On Type reduce production field_exp -> atomic_exp
-- On True reduce production field_exp -> atomic_exp
-- On Theorem reduce production field_exp -> atomic_exp
-- On Then reduce production field_exp -> atomic_exp
-- On String reduce production field_exp -> atomic_exp
-- On StarstarX reduce production field_exp -> atomic_exp
-- On StarX reduce production field_exp -> atomic_exp
-- On Star reduce production field_exp -> atomic_exp
-- On SemiSemi reduce production field_exp -> atomic_exp
-- On Semi reduce production field_exp -> atomic_exp
-- On Rsquare reduce production field_exp -> atomic_exp
-- On Rparen reduce production field_exp -> atomic_exp
-- On Rcurly reduce production field_exp -> atomic_exp
-- On PlusX reduce production field_exp -> atomic_exp
-- On Plus reduce production field_exp -> atomic_exp
-- On Open_ reduce production field_exp -> atomic_exp
-- On OctNum reduce production field_exp -> atomic_exp
-- On Nvar reduce production field_exp -> atomic_exp
-- On Num reduce production field_exp -> atomic_exp
-- On Module_ reduce production field_exp -> atomic_exp
-- On MinusMinusGt reduce production field_exp -> atomic_exp
-- On Match reduce production field_exp -> atomic_exp
-- On MEM reduce production field_exp -> atomic_exp
-- On LtBar reduce production field_exp -> atomic_exp
-- On Lsquare reduce production field_exp -> atomic_exp
-- On Lparen reduce production field_exp -> atomic_exp
-- On Let_ reduce production field_exp -> atomic_exp
-- On Lemma reduce production field_exp -> atomic_exp
-- On Lcurly reduce production field_exp -> atomic_exp
-- On Inst_default reduce production field_exp -> atomic_exp
-- On Inst reduce production field_exp -> atomic_exp
-- On Indreln reduce production field_exp -> atomic_exp
-- On Include_ reduce production field_exp -> atomic_exp
-- On In reduce production field_exp -> atomic_exp
-- On Import_ reduce production field_exp -> atomic_exp
-- On IN reduce production field_exp -> atomic_exp
-- On HexNum reduce production field_exp -> atomic_exp
-- On Hex reduce production field_exp -> atomic_exp
-- On HashZero reduce production field_exp -> atomic_exp
-- On HashOne reduce production field_exp -> atomic_exp
-- On GtEqX reduce production field_exp -> atomic_exp
-- On GtEq reduce production field_exp -> atomic_exp
-- On Function_ reduce production field_exp -> atomic_exp
-- On False reduce production field_exp -> atomic_exp
-- On EqualX reduce production field_exp -> atomic_exp
-- On EqEqGt reduce production field_exp -> atomic_exp
-- On Eq reduce production field_exp -> atomic_exp
-- On Eof reduce production field_exp -> atomic_exp
-- On End reduce production field_exp -> atomic_exp
-- On Else reduce production field_exp -> atomic_exp
-- On Do reduce production field_exp -> atomic_exp
-- On Declare reduce production field_exp -> atomic_exp
-- On Comma reduce production field_exp -> atomic_exp
-- On ColonColon reduce production field_exp -> atomic_exp
-- On Colon reduce production field_exp -> atomic_exp
-- On Class_ reduce production field_exp -> atomic_exp
-- On Char reduce production field_exp -> atomic_exp
-- On BraceBar reduce production field_exp -> atomic_exp
-- On BinNum reduce production field_exp -> atomic_exp
-- On Bin reduce production field_exp -> atomic_exp
-- On Begin_ reduce production field_exp -> atomic_exp
-- On BarGt reduce production field_exp -> atomic_exp
-- On BarBrace reduce production field_exp -> atomic_exp
-- On BarBar reduce production field_exp -> atomic_exp
-- On Bar reduce production field_exp -> atomic_exp
-- On BacktickString reduce production field_exp -> atomic_exp
-- On AtX reduce production field_exp -> atomic_exp
-- On At reduce production field_exp -> atomic_exp
-- On Assert reduce production field_exp -> atomic_exp
-- On And reduce production field_exp -> atomic_exp
-- On AmpAmp reduce production field_exp -> atomic_exp

State 314:
## Known stack suffix:
## atomic_exp DotBrace
## LR(1) items:
field_exp -> atomic_exp DotBrace . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp DotBrace . nexp Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 315
-- On atomic_nexp shift to state 77
## Reductions:

State 315:
## Known stack suffix:
## atomic_exp DotBrace nexp
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
field_exp -> atomic_exp DotBrace nexp . Dot Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 316
-- On Dot shift to state 317
## Reductions:

State 316:
## Known stack suffix:
## atomic_exp DotBrace nexp Rsquare
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On With reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Val reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Type reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On True reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Theorem reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Then reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On String reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On StarstarX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On StarX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Star reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On SemiSemi reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Semi reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Rsquare reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Rparen reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Rcurly reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On PlusX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Plus reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Open_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On OctNum reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Nvar reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Num reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Module_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On MinusMinusGt reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Match reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On MEM reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On LtBar reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Lsquare reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Lparen reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Let_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Lemma reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Lcurly reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Inst_default reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Inst reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Indreln reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Include_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On In reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Import_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On IN reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On HexNum reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Hex reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On HashZero reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On HashOne reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On GtEqX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On GtEq reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Function_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On False reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On EqualX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On EqEqGt reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Eq reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Eof reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On End reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Else reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Do reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Declare reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Comma reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On ColonColon reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Colon reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Class_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Char reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BraceBar reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BinNum reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Bin reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Begin_ reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BarGt reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BarBrace reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BarBar reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Bar reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On BacktickString reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On AtX reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On At reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On Assert reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On And reduce production field_exp -> atomic_exp DotBrace nexp Rsquare
-- On AmpAmp reduce production field_exp -> atomic_exp DotBrace nexp Rsquare

State 317:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot . Dot nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Dot shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot . nexp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 74
-- On star_nexp shift to state 72
-- On nexp shift to state 319
-- On atomic_nexp shift to state 77
## Reductions:

State 319:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot nexp
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot nexp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## atomic_exp DotBrace nexp Dot Dot nexp Rsquare
## LR(1) items:
field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On With reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Val reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Type reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On True reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Theorem reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Then reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On String reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On StarstarX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On StarX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Star reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On SemiSemi reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Semi reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Rsquare reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Rparen reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Rcurly reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On PlusX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Plus reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Open_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On OctNum reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Nvar reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Num reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Module_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On MinusMinusGt reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Match reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On MEM reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On LtBar reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Lsquare reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Lparen reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Let_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Lemma reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Lcurly reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Inst_default reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Inst reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Indreln reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Include_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On In reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Import_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On IN reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On HexNum reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Hex reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On HashZero reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On HashOne reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On GtEqX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On GtEq reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Function_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On False reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On EqualX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On EqEqGt reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Eq reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Eof reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On End reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Else reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Do reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Declare reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Comma reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On ColonColon reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Colon reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Class_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Char reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BraceBar reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BinNum reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Bin reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Begin_ reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BarGt reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BarBrace reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BarBar reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Bar reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On BacktickString reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On AtX reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On At reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On Assert reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On And reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare
-- On AmpAmp reduce production field_exp -> atomic_exp DotBrace nexp Dot Dot nexp Rsquare

State 321:
## Known stack suffix:
## atomic_exp Dot
## LR(1) items:
field_exp -> atomic_exp Dot . id [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## atomic_exp Dot id
## LR(1) items:
field_exp -> atomic_exp Dot id . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production field_exp -> atomic_exp Dot id
-- On With reduce production field_exp -> atomic_exp Dot id
-- On Val reduce production field_exp -> atomic_exp Dot id
-- On Type reduce production field_exp -> atomic_exp Dot id
-- On True reduce production field_exp -> atomic_exp Dot id
-- On Theorem reduce production field_exp -> atomic_exp Dot id
-- On Then reduce production field_exp -> atomic_exp Dot id
-- On String reduce production field_exp -> atomic_exp Dot id
-- On StarstarX reduce production field_exp -> atomic_exp Dot id
-- On StarX reduce production field_exp -> atomic_exp Dot id
-- On Star reduce production field_exp -> atomic_exp Dot id
-- On SemiSemi reduce production field_exp -> atomic_exp Dot id
-- On Semi reduce production field_exp -> atomic_exp Dot id
-- On Rsquare reduce production field_exp -> atomic_exp Dot id
-- On Rparen reduce production field_exp -> atomic_exp Dot id
-- On Rcurly reduce production field_exp -> atomic_exp Dot id
-- On PlusX reduce production field_exp -> atomic_exp Dot id
-- On Plus reduce production field_exp -> atomic_exp Dot id
-- On Open_ reduce production field_exp -> atomic_exp Dot id
-- On OctNum reduce production field_exp -> atomic_exp Dot id
-- On Nvar reduce production field_exp -> atomic_exp Dot id
-- On Num reduce production field_exp -> atomic_exp Dot id
-- On Module_ reduce production field_exp -> atomic_exp Dot id
-- On MinusMinusGt reduce production field_exp -> atomic_exp Dot id
-- On Match reduce production field_exp -> atomic_exp Dot id
-- On MEM reduce production field_exp -> atomic_exp Dot id
-- On LtBar reduce production field_exp -> atomic_exp Dot id
-- On Lsquare reduce production field_exp -> atomic_exp Dot id
-- On Lparen reduce production field_exp -> atomic_exp Dot id
-- On Let_ reduce production field_exp -> atomic_exp Dot id
-- On Lemma reduce production field_exp -> atomic_exp Dot id
-- On Lcurly reduce production field_exp -> atomic_exp Dot id
-- On Inst_default reduce production field_exp -> atomic_exp Dot id
-- On Inst reduce production field_exp -> atomic_exp Dot id
-- On Indreln reduce production field_exp -> atomic_exp Dot id
-- On Include_ reduce production field_exp -> atomic_exp Dot id
-- On In reduce production field_exp -> atomic_exp Dot id
-- On Import_ reduce production field_exp -> atomic_exp Dot id
-- On IN reduce production field_exp -> atomic_exp Dot id
-- On HexNum reduce production field_exp -> atomic_exp Dot id
-- On Hex reduce production field_exp -> atomic_exp Dot id
-- On HashZero reduce production field_exp -> atomic_exp Dot id
-- On HashOne reduce production field_exp -> atomic_exp Dot id
-- On GtEqX reduce production field_exp -> atomic_exp Dot id
-- On GtEq reduce production field_exp -> atomic_exp Dot id
-- On Function_ reduce production field_exp -> atomic_exp Dot id
-- On False reduce production field_exp -> atomic_exp Dot id
-- On EqualX reduce production field_exp -> atomic_exp Dot id
-- On EqEqGt reduce production field_exp -> atomic_exp Dot id
-- On Eq reduce production field_exp -> atomic_exp Dot id
-- On Eof reduce production field_exp -> atomic_exp Dot id
-- On End reduce production field_exp -> atomic_exp Dot id
-- On Else reduce production field_exp -> atomic_exp Dot id
-- On Do reduce production field_exp -> atomic_exp Dot id
-- On Declare reduce production field_exp -> atomic_exp Dot id
-- On Comma reduce production field_exp -> atomic_exp Dot id
-- On ColonColon reduce production field_exp -> atomic_exp Dot id
-- On Colon reduce production field_exp -> atomic_exp Dot id
-- On Class_ reduce production field_exp -> atomic_exp Dot id
-- On Char reduce production field_exp -> atomic_exp Dot id
-- On BraceBar reduce production field_exp -> atomic_exp Dot id
-- On BinNum reduce production field_exp -> atomic_exp Dot id
-- On Bin reduce production field_exp -> atomic_exp Dot id
-- On Begin_ reduce production field_exp -> atomic_exp Dot id
-- On BarGt reduce production field_exp -> atomic_exp Dot id
-- On BarBrace reduce production field_exp -> atomic_exp Dot id
-- On BarBar reduce production field_exp -> atomic_exp Dot id
-- On Bar reduce production field_exp -> atomic_exp Dot id
-- On BacktickString reduce production field_exp -> atomic_exp Dot id
-- On AtX reduce production field_exp -> atomic_exp Dot id
-- On At reduce production field_exp -> atomic_exp Dot id
-- On Assert reduce production field_exp -> atomic_exp Dot id
-- On And reduce production field_exp -> atomic_exp Dot id
-- On AmpAmp reduce production field_exp -> atomic_exp Dot id

State 323:
## Known stack suffix:
## app_exp
## LR(1) items:
app_exp -> app_exp . field_exp [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . StarstarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_right_atomic_exp -> app_exp . StarstarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 324
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 327
-- On atomic_exp shift to state 313
## Reductions:
-- On With reduce production starstar_exp -> app_exp
-- On Val reduce production starstar_exp -> app_exp
-- On Type reduce production starstar_exp -> app_exp
-- On Theorem reduce production starstar_exp -> app_exp
-- On Then reduce production starstar_exp -> app_exp
-- On StarX reduce production starstar_exp -> app_exp
-- On Star reduce production starstar_exp -> app_exp
-- On SemiSemi reduce production starstar_exp -> app_exp
-- On Semi reduce production starstar_exp -> app_exp
-- On Rsquare reduce production starstar_exp -> app_exp
-- On Rparen reduce production starstar_exp -> app_exp
-- On Rcurly reduce production starstar_exp -> app_exp
-- On PlusX reduce production starstar_exp -> app_exp
-- On Plus reduce production starstar_exp -> app_exp
-- On Open_ reduce production starstar_exp -> app_exp
-- On Module_ reduce production starstar_exp -> app_exp
-- On MinusMinusGt reduce production starstar_exp -> app_exp
-- On MEM reduce production starstar_exp -> app_exp
-- On Let_ reduce production starstar_exp -> app_exp
-- On Lemma reduce production starstar_exp -> app_exp
-- On Inst_default reduce production starstar_exp -> app_exp
-- On Inst reduce production starstar_exp -> app_exp
-- On Indreln reduce production starstar_exp -> app_exp
-- On Include_ reduce production starstar_exp -> app_exp
-- On In reduce production starstar_exp -> app_exp
-- On Import_ reduce production starstar_exp -> app_exp
-- On IN reduce production starstar_exp -> app_exp
-- On GtEqX reduce production starstar_exp -> app_exp
-- On GtEq reduce production starstar_exp -> app_exp
-- On EqualX reduce production starstar_exp -> app_exp
-- On EqEqGt reduce production starstar_exp -> app_exp
-- On Eq reduce production starstar_exp -> app_exp
-- On Eof reduce production starstar_exp -> app_exp
-- On End reduce production starstar_exp -> app_exp
-- On Else reduce production starstar_exp -> app_exp
-- On Declare reduce production starstar_exp -> app_exp
-- On Comma reduce production starstar_exp -> app_exp
-- On ColonColon reduce production starstar_exp -> app_exp
-- On Colon reduce production starstar_exp -> app_exp
-- On Class_ reduce production starstar_exp -> app_exp
-- On BarGt reduce production starstar_exp -> app_exp
-- On BarBrace reduce production starstar_exp -> app_exp
-- On BarBar reduce production starstar_exp -> app_exp
-- On Bar reduce production starstar_exp -> app_exp
-- On AtX reduce production starstar_exp -> app_exp
-- On At reduce production starstar_exp -> app_exp
-- On Assert reduce production starstar_exp -> app_exp
-- On And reduce production starstar_exp -> app_exp
-- On AmpAmp reduce production starstar_exp -> app_exp

State 324:
## Known stack suffix:
## app_exp StarstarX
## LR(1) items:
starstar_exp -> app_exp StarstarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_right_atomic_exp -> app_exp StarstarX . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 325
-- On starstar_exp shift to state 326
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 325:
## Known stack suffix:
## app_exp StarstarX starstar_right_atomic_exp
## LR(1) items:
starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Val reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Type reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Theorem reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Then reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On SemiSemi reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Semi reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Rsquare reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Rparen reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Rcurly reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Open_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Module_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Let_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Lemma reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Inst_default reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Inst reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Indreln reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Include_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On In reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Import_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On EqEqGt reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Eof reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On End reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Else reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Declare reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Comma reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Colon reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Class_ reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On BarGt reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On BarBrace reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Bar reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On Assert reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp
-- On And reduce production starstar_right_atomic_exp -> app_exp StarstarX starstar_right_atomic_exp

State 326:
## Known stack suffix:
## app_exp StarstarX starstar_exp
## LR(1) items:
starstar_exp -> app_exp StarstarX starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Val reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Type reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Theorem reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Then reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On StarX reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Star reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On SemiSemi reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Semi reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Rsquare reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Rparen reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Rcurly reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On PlusX reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Plus reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Open_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Module_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On MinusMinusGt reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On MEM reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Let_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Lemma reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Inst_default reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Inst reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Indreln reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Include_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On In reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Import_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On IN reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On GtEqX reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On GtEq reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On EqualX reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On EqEqGt reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Eq reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Eof reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On End reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Else reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Declare reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Comma reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On ColonColon reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Colon reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Class_ reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On BarGt reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On BarBrace reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On BarBar reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Bar reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On AtX reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On At reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On Assert reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On And reduce production starstar_exp -> app_exp StarstarX starstar_exp
-- On AmpAmp reduce production starstar_exp -> app_exp StarstarX starstar_exp

State 327:
## Known stack suffix:
## app_exp field_exp
## LR(1) items:
app_exp -> app_exp field_exp . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production app_exp -> app_exp field_exp
-- On With reduce production app_exp -> app_exp field_exp
-- On Val reduce production app_exp -> app_exp field_exp
-- On Type reduce production app_exp -> app_exp field_exp
-- On True reduce production app_exp -> app_exp field_exp
-- On Theorem reduce production app_exp -> app_exp field_exp
-- On Then reduce production app_exp -> app_exp field_exp
-- On String reduce production app_exp -> app_exp field_exp
-- On StarstarX reduce production app_exp -> app_exp field_exp
-- On StarX reduce production app_exp -> app_exp field_exp
-- On Star reduce production app_exp -> app_exp field_exp
-- On SemiSemi reduce production app_exp -> app_exp field_exp
-- On Semi reduce production app_exp -> app_exp field_exp
-- On Rsquare reduce production app_exp -> app_exp field_exp
-- On Rparen reduce production app_exp -> app_exp field_exp
-- On Rcurly reduce production app_exp -> app_exp field_exp
-- On PlusX reduce production app_exp -> app_exp field_exp
-- On Plus reduce production app_exp -> app_exp field_exp
-- On Open_ reduce production app_exp -> app_exp field_exp
-- On OctNum reduce production app_exp -> app_exp field_exp
-- On Nvar reduce production app_exp -> app_exp field_exp
-- On Num reduce production app_exp -> app_exp field_exp
-- On Module_ reduce production app_exp -> app_exp field_exp
-- On MinusMinusGt reduce production app_exp -> app_exp field_exp
-- On Match reduce production app_exp -> app_exp field_exp
-- On MEM reduce production app_exp -> app_exp field_exp
-- On LtBar reduce production app_exp -> app_exp field_exp
-- On Lsquare reduce production app_exp -> app_exp field_exp
-- On Lparen reduce production app_exp -> app_exp field_exp
-- On Let_ reduce production app_exp -> app_exp field_exp
-- On Lemma reduce production app_exp -> app_exp field_exp
-- On Lcurly reduce production app_exp -> app_exp field_exp
-- On Inst_default reduce production app_exp -> app_exp field_exp
-- On Inst reduce production app_exp -> app_exp field_exp
-- On Indreln reduce production app_exp -> app_exp field_exp
-- On Include_ reduce production app_exp -> app_exp field_exp
-- On In reduce production app_exp -> app_exp field_exp
-- On Import_ reduce production app_exp -> app_exp field_exp
-- On IN reduce production app_exp -> app_exp field_exp
-- On HexNum reduce production app_exp -> app_exp field_exp
-- On Hex reduce production app_exp -> app_exp field_exp
-- On HashZero reduce production app_exp -> app_exp field_exp
-- On HashOne reduce production app_exp -> app_exp field_exp
-- On GtEqX reduce production app_exp -> app_exp field_exp
-- On GtEq reduce production app_exp -> app_exp field_exp
-- On Function_ reduce production app_exp -> app_exp field_exp
-- On False reduce production app_exp -> app_exp field_exp
-- On EqualX reduce production app_exp -> app_exp field_exp
-- On EqEqGt reduce production app_exp -> app_exp field_exp
-- On Eq reduce production app_exp -> app_exp field_exp
-- On Eof reduce production app_exp -> app_exp field_exp
-- On End reduce production app_exp -> app_exp field_exp
-- On Else reduce production app_exp -> app_exp field_exp
-- On Do reduce production app_exp -> app_exp field_exp
-- On Declare reduce production app_exp -> app_exp field_exp
-- On Comma reduce production app_exp -> app_exp field_exp
-- On ColonColon reduce production app_exp -> app_exp field_exp
-- On Colon reduce production app_exp -> app_exp field_exp
-- On Class_ reduce production app_exp -> app_exp field_exp
-- On Char reduce production app_exp -> app_exp field_exp
-- On BraceBar reduce production app_exp -> app_exp field_exp
-- On BinNum reduce production app_exp -> app_exp field_exp
-- On Bin reduce production app_exp -> app_exp field_exp
-- On Begin_ reduce production app_exp -> app_exp field_exp
-- On BarGt reduce production app_exp -> app_exp field_exp
-- On BarBrace reduce production app_exp -> app_exp field_exp
-- On BarBar reduce production app_exp -> app_exp field_exp
-- On Bar reduce production app_exp -> app_exp field_exp
-- On BacktickString reduce production app_exp -> app_exp field_exp
-- On AtX reduce production app_exp -> app_exp field_exp
-- On At reduce production app_exp -> app_exp field_exp
-- On Assert reduce production app_exp -> app_exp field_exp
-- On And reduce production app_exp -> app_exp field_exp
-- On AmpAmp reduce production app_exp -> app_exp field_exp

State 328:
## Known stack suffix:
## star_exp Star
## LR(1) items:
star_exp -> star_exp Star . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp Star . starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 329
-- On starstar_exp shift to state 330
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 329:
## Known stack suffix:
## star_exp Star starstar_right_atomic_exp
## LR(1) items:
star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Val reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Type reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Theorem reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Then reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On SemiSemi reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Semi reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Rsquare reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Rparen reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Rcurly reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Open_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Module_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Let_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Lemma reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Inst_default reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Inst reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Indreln reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Include_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On In reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Import_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On EqEqGt reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Eof reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On End reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Else reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Declare reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Comma reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Colon reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Class_ reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On BarGt reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On BarBrace reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Bar reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On Assert reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp
-- On And reduce production star_right_atomic_exp -> star_exp Star starstar_right_atomic_exp

State 330:
## Known stack suffix:
## star_exp Star starstar_exp
## LR(1) items:
star_exp -> star_exp Star starstar_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production star_exp -> star_exp Star starstar_exp
-- On Val reduce production star_exp -> star_exp Star starstar_exp
-- On Type reduce production star_exp -> star_exp Star starstar_exp
-- On Theorem reduce production star_exp -> star_exp Star starstar_exp
-- On Then reduce production star_exp -> star_exp Star starstar_exp
-- On StarX reduce production star_exp -> star_exp Star starstar_exp
-- On Star reduce production star_exp -> star_exp Star starstar_exp
-- On SemiSemi reduce production star_exp -> star_exp Star starstar_exp
-- On Semi reduce production star_exp -> star_exp Star starstar_exp
-- On Rsquare reduce production star_exp -> star_exp Star starstar_exp
-- On Rparen reduce production star_exp -> star_exp Star starstar_exp
-- On Rcurly reduce production star_exp -> star_exp Star starstar_exp
-- On PlusX reduce production star_exp -> star_exp Star starstar_exp
-- On Plus reduce production star_exp -> star_exp Star starstar_exp
-- On Open_ reduce production star_exp -> star_exp Star starstar_exp
-- On Module_ reduce production star_exp -> star_exp Star starstar_exp
-- On MinusMinusGt reduce production star_exp -> star_exp Star starstar_exp
-- On MEM reduce production star_exp -> star_exp Star starstar_exp
-- On Let_ reduce production star_exp -> star_exp Star starstar_exp
-- On Lemma reduce production star_exp -> star_exp Star starstar_exp
-- On Inst_default reduce production star_exp -> star_exp Star starstar_exp
-- On Inst reduce production star_exp -> star_exp Star starstar_exp
-- On Indreln reduce production star_exp -> star_exp Star starstar_exp
-- On Include_ reduce production star_exp -> star_exp Star starstar_exp
-- On In reduce production star_exp -> star_exp Star starstar_exp
-- On Import_ reduce production star_exp -> star_exp Star starstar_exp
-- On IN reduce production star_exp -> star_exp Star starstar_exp
-- On GtEqX reduce production star_exp -> star_exp Star starstar_exp
-- On GtEq reduce production star_exp -> star_exp Star starstar_exp
-- On EqualX reduce production star_exp -> star_exp Star starstar_exp
-- On EqEqGt reduce production star_exp -> star_exp Star starstar_exp
-- On Eq reduce production star_exp -> star_exp Star starstar_exp
-- On Eof reduce production star_exp -> star_exp Star starstar_exp
-- On End reduce production star_exp -> star_exp Star starstar_exp
-- On Else reduce production star_exp -> star_exp Star starstar_exp
-- On Declare reduce production star_exp -> star_exp Star starstar_exp
-- On Comma reduce production star_exp -> star_exp Star starstar_exp
-- On ColonColon reduce production star_exp -> star_exp Star starstar_exp
-- On Colon reduce production star_exp -> star_exp Star starstar_exp
-- On Class_ reduce production star_exp -> star_exp Star starstar_exp
-- On BarGt reduce production star_exp -> star_exp Star starstar_exp
-- On BarBrace reduce production star_exp -> star_exp Star starstar_exp
-- On BarBar reduce production star_exp -> star_exp Star starstar_exp
-- On Bar reduce production star_exp -> star_exp Star starstar_exp
-- On AtX reduce production star_exp -> star_exp Star starstar_exp
-- On At reduce production star_exp -> star_exp Star starstar_exp
-- On Assert reduce production star_exp -> star_exp Star starstar_exp
-- On And reduce production star_exp -> star_exp Star starstar_exp
-- On AmpAmp reduce production star_exp -> star_exp Star starstar_exp

State 331:
## Known stack suffix:
## plus_right_atomic_exp
## LR(1) items:
cons_right_atomic_exp -> plus_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Val reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Type reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Theorem reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Then reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On SemiSemi reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Semi reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Rsquare reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Rparen reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Rcurly reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Open_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Module_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Let_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Lemma reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Inst_default reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Inst reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Indreln reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Include_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On In reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Import_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On EqEqGt reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Eof reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On End reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Else reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Declare reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Comma reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Colon reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Class_ reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On BarGt reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On BarBrace reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Bar reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On Assert reduce production cons_right_atomic_exp -> plus_right_atomic_exp
-- On And reduce production cons_right_atomic_exp -> plus_right_atomic_exp

State 332:
## Known stack suffix:
## plus_exp
## LR(1) items:
cons_exp -> plus_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_exp -> plus_exp . ColonColon cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_right_atomic_exp -> plus_exp . ColonColon cons_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
plus_exp -> plus_exp . Plus star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . PlusX star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp . Plus star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
plus_right_atomic_exp -> plus_exp . PlusX star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On PlusX shift to state 333
-- On Plus shift to state 336
-- On ColonColon shift to state 339
## Reductions:
-- On With reduce production cons_exp -> plus_exp
-- On Val reduce production cons_exp -> plus_exp
-- On Type reduce production cons_exp -> plus_exp
-- On Theorem reduce production cons_exp -> plus_exp
-- On Then reduce production cons_exp -> plus_exp
-- On SemiSemi reduce production cons_exp -> plus_exp
-- On Semi reduce production cons_exp -> plus_exp
-- On Rsquare reduce production cons_exp -> plus_exp
-- On Rparen reduce production cons_exp -> plus_exp
-- On Rcurly reduce production cons_exp -> plus_exp
-- On Open_ reduce production cons_exp -> plus_exp
-- On Module_ reduce production cons_exp -> plus_exp
-- On MinusMinusGt reduce production cons_exp -> plus_exp
-- On MEM reduce production cons_exp -> plus_exp
-- On Let_ reduce production cons_exp -> plus_exp
-- On Lemma reduce production cons_exp -> plus_exp
-- On Inst_default reduce production cons_exp -> plus_exp
-- On Inst reduce production cons_exp -> plus_exp
-- On Indreln reduce production cons_exp -> plus_exp
-- On Include_ reduce production cons_exp -> plus_exp
-- On In reduce production cons_exp -> plus_exp
-- On Import_ reduce production cons_exp -> plus_exp
-- On IN reduce production cons_exp -> plus_exp
-- On GtEqX reduce production cons_exp -> plus_exp
-- On GtEq reduce production cons_exp -> plus_exp
-- On EqualX reduce production cons_exp -> plus_exp
-- On EqEqGt reduce production cons_exp -> plus_exp
-- On Eq reduce production cons_exp -> plus_exp
-- On Eof reduce production cons_exp -> plus_exp
-- On End reduce production cons_exp -> plus_exp
-- On Else reduce production cons_exp -> plus_exp
-- On Declare reduce production cons_exp -> plus_exp
-- On Comma reduce production cons_exp -> plus_exp
-- On Colon reduce production cons_exp -> plus_exp
-- On Class_ reduce production cons_exp -> plus_exp
-- On BarGt reduce production cons_exp -> plus_exp
-- On BarBrace reduce production cons_exp -> plus_exp
-- On BarBar reduce production cons_exp -> plus_exp
-- On Bar reduce production cons_exp -> plus_exp
-- On AtX reduce production cons_exp -> plus_exp
-- On At reduce production cons_exp -> plus_exp
-- On Assert reduce production cons_exp -> plus_exp
-- On And reduce production cons_exp -> plus_exp
-- On AmpAmp reduce production cons_exp -> plus_exp

State 333:
## Known stack suffix:
## plus_exp PlusX
## LR(1) items:
plus_exp -> plus_exp PlusX . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp PlusX . star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 334
-- On star_exp shift to state 335
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 334:
## Known stack suffix:
## plus_exp PlusX star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Val reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Type reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Theorem reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Then reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On SemiSemi reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Semi reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Rsquare reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Rparen reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Rcurly reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Open_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Module_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Let_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Lemma reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Inst_default reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Inst reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Indreln reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Include_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On In reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Import_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On EqEqGt reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Eof reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On End reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Else reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Declare reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Comma reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Colon reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Class_ reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On BarGt reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On BarBrace reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Bar reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On Assert reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp
-- On And reduce production plus_right_atomic_exp -> plus_exp PlusX star_right_atomic_exp

State 335:
## Known stack suffix:
## plus_exp PlusX star_exp
## LR(1) items:
plus_exp -> plus_exp PlusX star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With reduce production plus_exp -> plus_exp PlusX star_exp
-- On Val reduce production plus_exp -> plus_exp PlusX star_exp
-- On Type reduce production plus_exp -> plus_exp PlusX star_exp
-- On Theorem reduce production plus_exp -> plus_exp PlusX star_exp
-- On Then reduce production plus_exp -> plus_exp PlusX star_exp
-- On SemiSemi reduce production plus_exp -> plus_exp PlusX star_exp
-- On Semi reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rsquare reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rparen reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rcurly reduce production plus_exp -> plus_exp PlusX star_exp
-- On PlusX reduce production plus_exp -> plus_exp PlusX star_exp
-- On Plus reduce production plus_exp -> plus_exp PlusX star_exp
-- On Open_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On Module_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On MinusMinusGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On MEM reduce production plus_exp -> plus_exp PlusX star_exp
-- On Let_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On Lemma reduce production plus_exp -> plus_exp PlusX star_exp
-- On Inst_default reduce production plus_exp -> plus_exp PlusX star_exp
-- On Inst reduce production plus_exp -> plus_exp PlusX star_exp
-- On Indreln reduce production plus_exp -> plus_exp PlusX star_exp
-- On Include_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On In reduce production plus_exp -> plus_exp PlusX star_exp
-- On Import_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On IN reduce production plus_exp -> plus_exp PlusX star_exp
-- On GtEqX reduce production plus_exp -> plus_exp PlusX star_exp
-- On GtEq reduce production plus_exp -> plus_exp PlusX star_exp
-- On EqualX reduce production plus_exp -> plus_exp PlusX star_exp
-- On EqEqGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On Eq reduce production plus_exp -> plus_exp PlusX star_exp
-- On Eof reduce production plus_exp -> plus_exp PlusX star_exp
-- On End reduce production plus_exp -> plus_exp PlusX star_exp
-- On Else reduce production plus_exp -> plus_exp PlusX star_exp
-- On Declare reduce production plus_exp -> plus_exp PlusX star_exp
-- On Comma reduce production plus_exp -> plus_exp PlusX star_exp
-- On ColonColon reduce production plus_exp -> plus_exp PlusX star_exp
-- On Colon reduce production plus_exp -> plus_exp PlusX star_exp
-- On Class_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarBrace reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarBar reduce production plus_exp -> plus_exp PlusX star_exp
-- On Bar reduce production plus_exp -> plus_exp PlusX star_exp
-- On AtX reduce production plus_exp -> plus_exp PlusX star_exp
-- On At reduce production plus_exp -> plus_exp PlusX star_exp
-- On Assert reduce production plus_exp -> plus_exp PlusX star_exp
-- On And reduce production plus_exp -> plus_exp PlusX star_exp
-- On AmpAmp reduce production plus_exp -> plus_exp PlusX star_exp

State 336:
## Known stack suffix:
## plus_exp Plus
## LR(1) items:
plus_exp -> plus_exp Plus . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_right_atomic_exp -> plus_exp Plus . star_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 337
-- On star_exp shift to state 338
-- On right_atomic_exp shift to state 302
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 337:
## Known stack suffix:
## plus_exp Plus star_right_atomic_exp
## LR(1) items:
plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Val reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Type reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Theorem reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Then reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On SemiSemi reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Semi reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Rsquare reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Rparen reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Rcurly reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Open_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Module_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Let_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Lemma reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Inst_default reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Inst reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Indreln reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Include_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On In reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Import_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On EqEqGt reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Eof reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On End reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Else reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Declare reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Comma reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Colon reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Class_ reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On BarGt reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On BarBrace reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Bar reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On Assert reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp
-- On And reduce production plus_right_atomic_exp -> plus_exp Plus star_right_atomic_exp

State 338:
## Known stack suffix:
## plus_exp Plus star_exp
## LR(1) items:
plus_exp -> plus_exp Plus star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_right_atomic_exp -> star_exp . Star starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
star_right_atomic_exp -> star_exp . StarX starstar_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On StarX shift to state 299
-- On Star shift to state 328
## Reductions:
-- On With reduce production plus_exp -> plus_exp Plus star_exp
-- On Val reduce production plus_exp -> plus_exp Plus star_exp
-- On Type reduce production plus_exp -> plus_exp Plus star_exp
-- On Theorem reduce production plus_exp -> plus_exp Plus star_exp
-- On Then reduce production plus_exp -> plus_exp Plus star_exp
-- On SemiSemi reduce production plus_exp -> plus_exp Plus star_exp
-- On Semi reduce production plus_exp -> plus_exp Plus star_exp
-- On Rsquare reduce production plus_exp -> plus_exp Plus star_exp
-- On Rparen reduce production plus_exp -> plus_exp Plus star_exp
-- On Rcurly reduce production plus_exp -> plus_exp Plus star_exp
-- On PlusX reduce production plus_exp -> plus_exp Plus star_exp
-- On Plus reduce production plus_exp -> plus_exp Plus star_exp
-- On Open_ reduce production plus_exp -> plus_exp Plus star_exp
-- On Module_ reduce production plus_exp -> plus_exp Plus star_exp
-- On MinusMinusGt reduce production plus_exp -> plus_exp Plus star_exp
-- On MEM reduce production plus_exp -> plus_exp Plus star_exp
-- On Let_ reduce production plus_exp -> plus_exp Plus star_exp
-- On Lemma reduce production plus_exp -> plus_exp Plus star_exp
-- On Inst_default reduce production plus_exp -> plus_exp Plus star_exp
-- On Inst reduce production plus_exp -> plus_exp Plus star_exp
-- On Indreln reduce production plus_exp -> plus_exp Plus star_exp
-- On Include_ reduce production plus_exp -> plus_exp Plus star_exp
-- On In reduce production plus_exp -> plus_exp Plus star_exp
-- On Import_ reduce production plus_exp -> plus_exp Plus star_exp
-- On IN reduce production plus_exp -> plus_exp Plus star_exp
-- On GtEqX reduce production plus_exp -> plus_exp Plus star_exp
-- On GtEq reduce production plus_exp -> plus_exp Plus star_exp
-- On EqualX reduce production plus_exp -> plus_exp Plus star_exp
-- On EqEqGt reduce production plus_exp -> plus_exp Plus star_exp
-- On Eq reduce production plus_exp -> plus_exp Plus star_exp
-- On Eof reduce production plus_exp -> plus_exp Plus star_exp
-- On End reduce production plus_exp -> plus_exp Plus star_exp
-- On Else reduce production plus_exp -> plus_exp Plus star_exp
-- On Declare reduce production plus_exp -> plus_exp Plus star_exp
-- On Comma reduce production plus_exp -> plus_exp Plus star_exp
-- On ColonColon reduce production plus_exp -> plus_exp Plus star_exp
-- On Colon reduce production plus_exp -> plus_exp Plus star_exp
-- On Class_ reduce production plus_exp -> plus_exp Plus star_exp
-- On BarGt reduce production plus_exp -> plus_exp Plus star_exp
-- On BarBrace reduce production plus_exp -> plus_exp Plus star_exp
-- On BarBar reduce production plus_exp -> plus_exp Plus star_exp
-- On Bar reduce production plus_exp -> plus_exp Plus star_exp
-- On AtX reduce production plus_exp -> plus_exp Plus star_exp
-- On At reduce production plus_exp -> plus_exp Plus star_exp
-- On Assert reduce production plus_exp -> plus_exp Plus star_exp
-- On And reduce production plus_exp -> plus_exp Plus star_exp
-- On AmpAmp reduce production plus_exp -> plus_exp Plus star_exp

State 339:
## Known stack suffix:
## plus_exp ColonColon
## LR(1) items:
cons_exp -> plus_exp ColonColon . cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_right_atomic_exp -> plus_exp ColonColon . cons_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 340
-- On cons_exp shift to state 341
-- On atomic_exp shift to state 313
-- On app_exp shift to state 323
## Reductions:

State 340:
## Known stack suffix:
## plus_exp ColonColon cons_right_atomic_exp
## LR(1) items:
cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Val reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Type reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Theorem reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Then reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On SemiSemi reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Semi reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Rsquare reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Rparen reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Rcurly reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Open_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Module_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Let_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Lemma reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Inst_default reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Inst reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Indreln reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Include_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On In reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Import_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On EqEqGt reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Eof reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On End reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Else reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Declare reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Comma reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Colon reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Class_ reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On BarGt reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On BarBrace reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Bar reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On Assert reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp
-- On And reduce production cons_right_atomic_exp -> plus_exp ColonColon cons_right_atomic_exp

State 341:
## Known stack suffix:
## plus_exp ColonColon cons_exp
## LR(1) items:
cons_exp -> plus_exp ColonColon cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Val reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Type reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Theorem reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Then reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On SemiSemi reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Semi reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Rsquare reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Rparen reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Rcurly reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Open_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Module_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On MinusMinusGt reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On MEM reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Let_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Lemma reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Inst_default reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Inst reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Indreln reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Include_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On In reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Import_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On IN reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On GtEqX reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On GtEq reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On EqualX reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On EqEqGt reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Eq reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Eof reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On End reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Else reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Declare reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Comma reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Colon reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Class_ reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On BarGt reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On BarBrace reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On BarBar reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Bar reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On AtX reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On At reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On Assert reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On And reduce production cons_exp -> plus_exp ColonColon cons_exp
-- On AmpAmp reduce production cons_exp -> plus_exp ColonColon cons_exp

State 342:
## Known stack suffix:
## or_right_atomic_exp
## LR(1) items:
imp_right_atomic_exp -> or_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Val reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Type reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Theorem reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Then reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On SemiSemi reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Semi reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Rsquare reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Rparen reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Rcurly reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Open_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Module_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Let_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Lemma reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Inst_default reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Inst reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Indreln reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Include_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On In reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Import_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On EqEqGt reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Eof reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On End reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Else reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Declare reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Comma reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Colon reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Class_ reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On BarGt reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On BarBrace reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Bar reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On Assert reduce production imp_right_atomic_exp -> or_right_atomic_exp
-- On And reduce production imp_right_atomic_exp -> or_right_atomic_exp

State 343:
## Known stack suffix:
## or_exp
## LR(1) items:
imp_exp -> or_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_exp -> or_exp . MinusMinusGt imp_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_right_atomic_exp -> or_exp . MinusMinusGt imp_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On MinusMinusGt shift to state 344
## Reductions:
-- On With reduce production imp_exp -> or_exp
-- On Val reduce production imp_exp -> or_exp
-- On Type reduce production imp_exp -> or_exp
-- On Theorem reduce production imp_exp -> or_exp
-- On Then reduce production imp_exp -> or_exp
-- On SemiSemi reduce production imp_exp -> or_exp
-- On Semi reduce production imp_exp -> or_exp
-- On Rsquare reduce production imp_exp -> or_exp
-- On Rparen reduce production imp_exp -> or_exp
-- On Rcurly reduce production imp_exp -> or_exp
-- On Open_ reduce production imp_exp -> or_exp
-- On Module_ reduce production imp_exp -> or_exp
-- On Let_ reduce production imp_exp -> or_exp
-- On Lemma reduce production imp_exp -> or_exp
-- On Inst_default reduce production imp_exp -> or_exp
-- On Inst reduce production imp_exp -> or_exp
-- On Indreln reduce production imp_exp -> or_exp
-- On Include_ reduce production imp_exp -> or_exp
-- On In reduce production imp_exp -> or_exp
-- On Import_ reduce production imp_exp -> or_exp
-- On EqEqGt reduce production imp_exp -> or_exp
-- On Eof reduce production imp_exp -> or_exp
-- On End reduce production imp_exp -> or_exp
-- On Else reduce production imp_exp -> or_exp
-- On Declare reduce production imp_exp -> or_exp
-- On Comma reduce production imp_exp -> or_exp
-- On Colon reduce production imp_exp -> or_exp
-- On Class_ reduce production imp_exp -> or_exp
-- On BarGt reduce production imp_exp -> or_exp
-- On BarBrace reduce production imp_exp -> or_exp
-- On Bar reduce production imp_exp -> or_exp
-- On Assert reduce production imp_exp -> or_exp
-- On And reduce production imp_exp -> or_exp

State 344:
## Known stack suffix:
## or_exp MinusMinusGt
## LR(1) items:
imp_exp -> or_exp MinusMinusGt . imp_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
imp_right_atomic_exp -> or_exp MinusMinusGt . imp_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 345
-- On imp_exp shift to state 346
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 345:
## Known stack suffix:
## or_exp MinusMinusGt imp_right_atomic_exp
## LR(1) items:
imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Val reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Type reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Theorem reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Then reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On SemiSemi reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Semi reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Rsquare reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Rparen reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Rcurly reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Open_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Module_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Let_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Lemma reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Inst_default reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Inst reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Indreln reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Include_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On In reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Import_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On EqEqGt reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Eof reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On End reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Else reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Declare reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Comma reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Colon reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Class_ reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On BarGt reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On BarBrace reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Bar reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On Assert reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp
-- On And reduce production imp_right_atomic_exp -> or_exp MinusMinusGt imp_right_atomic_exp

State 346:
## Known stack suffix:
## or_exp MinusMinusGt imp_exp
## LR(1) items:
imp_exp -> or_exp MinusMinusGt imp_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Val reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Type reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Theorem reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Then reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On SemiSemi reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Semi reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Rsquare reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Rparen reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Rcurly reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Open_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Module_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Let_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Lemma reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Inst_default reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Inst reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Indreln reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Include_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On In reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Import_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On EqEqGt reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Eof reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On End reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Else reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Declare reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Comma reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Colon reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Class_ reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On BarGt reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On BarBrace reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Bar reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On Assert reduce production imp_exp -> or_exp MinusMinusGt imp_exp
-- On And reduce production imp_exp -> or_exp MinusMinusGt imp_exp

State 347:
## Known stack suffix:
## eq_right_atomic_exp
## LR(1) items:
and_right_atomic_exp -> eq_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Val reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Type reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Theorem reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Then reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On SemiSemi reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Semi reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Rsquare reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Rparen reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Rcurly reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Open_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Module_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Let_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Lemma reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Inst_default reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Inst reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Indreln reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Include_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On In reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Import_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On EqEqGt reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Eof reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On End reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Else reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Declare reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Comma reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Colon reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Class_ reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On BarGt reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On BarBrace reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Bar reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On Assert reduce production and_right_atomic_exp -> eq_right_atomic_exp
-- On And reduce production and_right_atomic_exp -> eq_right_atomic_exp

State 348:
## Known stack suffix:
## eq_exp
## LR(1) items:
and_exp -> eq_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_exp -> eq_exp . AmpAmp and_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_right_atomic_exp -> eq_exp . AmpAmp and_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_exp -> eq_exp . Eq at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . EqualX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . GtEq at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . GtEqX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . IN at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_exp -> eq_exp . MEM at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp . Eq at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . EqualX at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . IN at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
eq_right_atomic_exp -> eq_exp . MEM at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On MEM shift to state 349
-- On IN shift to state 360
-- On GtEqX shift to state 363
-- On GtEq shift to state 379
-- On EqualX shift to state 381
-- On Eq shift to state 384
-- On AmpAmp shift to state 387
## Reductions:
-- On With reduce production and_exp -> eq_exp
-- On Val reduce production and_exp -> eq_exp
-- On Type reduce production and_exp -> eq_exp
-- On Theorem reduce production and_exp -> eq_exp
-- On Then reduce production and_exp -> eq_exp
-- On SemiSemi reduce production and_exp -> eq_exp
-- On Semi reduce production and_exp -> eq_exp
-- On Rsquare reduce production and_exp -> eq_exp
-- On Rparen reduce production and_exp -> eq_exp
-- On Rcurly reduce production and_exp -> eq_exp
-- On Open_ reduce production and_exp -> eq_exp
-- On Module_ reduce production and_exp -> eq_exp
-- On MinusMinusGt reduce production and_exp -> eq_exp
-- On Let_ reduce production and_exp -> eq_exp
-- On Lemma reduce production and_exp -> eq_exp
-- On Inst_default reduce production and_exp -> eq_exp
-- On Inst reduce production and_exp -> eq_exp
-- On Indreln reduce production and_exp -> eq_exp
-- On Include_ reduce production and_exp -> eq_exp
-- On In reduce production and_exp -> eq_exp
-- On Import_ reduce production and_exp -> eq_exp
-- On EqEqGt reduce production and_exp -> eq_exp
-- On Eof reduce production and_exp -> eq_exp
-- On End reduce production and_exp -> eq_exp
-- On Else reduce production and_exp -> eq_exp
-- On Declare reduce production and_exp -> eq_exp
-- On Comma reduce production and_exp -> eq_exp
-- On Colon reduce production and_exp -> eq_exp
-- On Class_ reduce production and_exp -> eq_exp
-- On BarGt reduce production and_exp -> eq_exp
-- On BarBrace reduce production and_exp -> eq_exp
-- On BarBar reduce production and_exp -> eq_exp
-- On Bar reduce production and_exp -> eq_exp
-- On Assert reduce production and_exp -> eq_exp
-- On And reduce production and_exp -> eq_exp

State 349:
## Known stack suffix:
## eq_exp MEM
## LR(1) items:
eq_exp -> eq_exp MEM . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp MEM . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 358
-- On at_exp shift to state 359
-- On app_exp shift to state 323
## Reductions:

State 350:
## Known stack suffix:
## cons_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Val reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Type reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Theorem reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Then reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On SemiSemi reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Semi reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Rsquare reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Rparen reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Rcurly reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Open_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Module_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Let_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Lemma reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Inst_default reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Inst reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Indreln reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Include_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On In reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Import_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On EqEqGt reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Eof reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On End reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Else reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Declare reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Comma reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Colon reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Class_ reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On BarGt reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On BarBrace reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Bar reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On Assert reduce production at_right_atomic_exp -> cons_right_atomic_exp
-- On And reduce production at_right_atomic_exp -> cons_right_atomic_exp

State 351:
## Known stack suffix:
## cons_exp
## LR(1) items:
at_exp -> cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . At at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . AtX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp . At at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
at_right_atomic_exp -> cons_exp . AtX at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On AtX shift to state 352
-- On At shift to state 355
## Reductions:
-- On With reduce production at_exp -> cons_exp
-- On Val reduce production at_exp -> cons_exp
-- On Type reduce production at_exp -> cons_exp
-- On Theorem reduce production at_exp -> cons_exp
-- On Then reduce production at_exp -> cons_exp
-- On SemiSemi reduce production at_exp -> cons_exp
-- On Semi reduce production at_exp -> cons_exp
-- On Rsquare reduce production at_exp -> cons_exp
-- On Rparen reduce production at_exp -> cons_exp
-- On Rcurly reduce production at_exp -> cons_exp
-- On Open_ reduce production at_exp -> cons_exp
-- On Module_ reduce production at_exp -> cons_exp
-- On MinusMinusGt reduce production at_exp -> cons_exp
-- On MEM reduce production at_exp -> cons_exp
-- On Let_ reduce production at_exp -> cons_exp
-- On Lemma reduce production at_exp -> cons_exp
-- On Inst_default reduce production at_exp -> cons_exp
-- On Inst reduce production at_exp -> cons_exp
-- On Indreln reduce production at_exp -> cons_exp
-- On Include_ reduce production at_exp -> cons_exp
-- On In reduce production at_exp -> cons_exp
-- On Import_ reduce production at_exp -> cons_exp
-- On IN reduce production at_exp -> cons_exp
-- On GtEqX reduce production at_exp -> cons_exp
-- On GtEq reduce production at_exp -> cons_exp
-- On EqualX reduce production at_exp -> cons_exp
-- On EqEqGt reduce production at_exp -> cons_exp
-- On Eq reduce production at_exp -> cons_exp
-- On Eof reduce production at_exp -> cons_exp
-- On End reduce production at_exp -> cons_exp
-- On Else reduce production at_exp -> cons_exp
-- On Declare reduce production at_exp -> cons_exp
-- On Comma reduce production at_exp -> cons_exp
-- On Colon reduce production at_exp -> cons_exp
-- On Class_ reduce production at_exp -> cons_exp
-- On BarGt reduce production at_exp -> cons_exp
-- On BarBrace reduce production at_exp -> cons_exp
-- On BarBar reduce production at_exp -> cons_exp
-- On Bar reduce production at_exp -> cons_exp
-- On Assert reduce production at_exp -> cons_exp
-- On And reduce production at_exp -> cons_exp
-- On AmpAmp reduce production at_exp -> cons_exp

State 352:
## Known stack suffix:
## cons_exp AtX
## LR(1) items:
at_exp -> cons_exp AtX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp AtX . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 353
-- On at_exp shift to state 354
-- On app_exp shift to state 323
## Reductions:

State 353:
## Known stack suffix:
## cons_exp AtX at_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Val reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Type reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Theorem reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Then reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On SemiSemi reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Semi reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Rsquare reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Rparen reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Rcurly reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Open_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Module_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Let_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Lemma reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Inst_default reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Inst reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Indreln reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Include_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On In reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Import_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On EqEqGt reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Eof reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On End reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Else reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Declare reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Comma reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Colon reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Class_ reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On BarGt reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On BarBrace reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Bar reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On Assert reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp
-- On And reduce production at_right_atomic_exp -> cons_exp AtX at_right_atomic_exp

State 354:
## Known stack suffix:
## cons_exp AtX at_exp
## LR(1) items:
at_exp -> cons_exp AtX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production at_exp -> cons_exp AtX at_exp
-- On Val reduce production at_exp -> cons_exp AtX at_exp
-- On Type reduce production at_exp -> cons_exp AtX at_exp
-- On Theorem reduce production at_exp -> cons_exp AtX at_exp
-- On Then reduce production at_exp -> cons_exp AtX at_exp
-- On SemiSemi reduce production at_exp -> cons_exp AtX at_exp
-- On Semi reduce production at_exp -> cons_exp AtX at_exp
-- On Rsquare reduce production at_exp -> cons_exp AtX at_exp
-- On Rparen reduce production at_exp -> cons_exp AtX at_exp
-- On Rcurly reduce production at_exp -> cons_exp AtX at_exp
-- On Open_ reduce production at_exp -> cons_exp AtX at_exp
-- On Module_ reduce production at_exp -> cons_exp AtX at_exp
-- On MinusMinusGt reduce production at_exp -> cons_exp AtX at_exp
-- On MEM reduce production at_exp -> cons_exp AtX at_exp
-- On Let_ reduce production at_exp -> cons_exp AtX at_exp
-- On Lemma reduce production at_exp -> cons_exp AtX at_exp
-- On Inst_default reduce production at_exp -> cons_exp AtX at_exp
-- On Inst reduce production at_exp -> cons_exp AtX at_exp
-- On Indreln reduce production at_exp -> cons_exp AtX at_exp
-- On Include_ reduce production at_exp -> cons_exp AtX at_exp
-- On In reduce production at_exp -> cons_exp AtX at_exp
-- On Import_ reduce production at_exp -> cons_exp AtX at_exp
-- On IN reduce production at_exp -> cons_exp AtX at_exp
-- On GtEqX reduce production at_exp -> cons_exp AtX at_exp
-- On GtEq reduce production at_exp -> cons_exp AtX at_exp
-- On EqualX reduce production at_exp -> cons_exp AtX at_exp
-- On EqEqGt reduce production at_exp -> cons_exp AtX at_exp
-- On Eq reduce production at_exp -> cons_exp AtX at_exp
-- On Eof reduce production at_exp -> cons_exp AtX at_exp
-- On End reduce production at_exp -> cons_exp AtX at_exp
-- On Else reduce production at_exp -> cons_exp AtX at_exp
-- On Declare reduce production at_exp -> cons_exp AtX at_exp
-- On Comma reduce production at_exp -> cons_exp AtX at_exp
-- On Colon reduce production at_exp -> cons_exp AtX at_exp
-- On Class_ reduce production at_exp -> cons_exp AtX at_exp
-- On BarGt reduce production at_exp -> cons_exp AtX at_exp
-- On BarBrace reduce production at_exp -> cons_exp AtX at_exp
-- On BarBar reduce production at_exp -> cons_exp AtX at_exp
-- On Bar reduce production at_exp -> cons_exp AtX at_exp
-- On Assert reduce production at_exp -> cons_exp AtX at_exp
-- On And reduce production at_exp -> cons_exp AtX at_exp
-- On AmpAmp reduce production at_exp -> cons_exp AtX at_exp

State 355:
## Known stack suffix:
## cons_exp At
## LR(1) items:
at_exp -> cons_exp At . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_right_atomic_exp -> cons_exp At . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 356
-- On at_exp shift to state 357
-- On app_exp shift to state 323
## Reductions:

State 356:
## Known stack suffix:
## cons_exp At at_right_atomic_exp
## LR(1) items:
at_right_atomic_exp -> cons_exp At at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Val reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Type reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Theorem reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Then reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On SemiSemi reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Semi reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Rsquare reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Rparen reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Rcurly reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Open_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Module_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Let_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Lemma reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Inst_default reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Inst reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Indreln reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Include_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On In reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Import_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On EqEqGt reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Eof reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On End reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Else reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Declare reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Comma reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Colon reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Class_ reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On BarGt reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On BarBrace reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Bar reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On Assert reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp
-- On And reduce production at_right_atomic_exp -> cons_exp At at_right_atomic_exp

State 357:
## Known stack suffix:
## cons_exp At at_exp
## LR(1) items:
at_exp -> cons_exp At at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production at_exp -> cons_exp At at_exp
-- On Val reduce production at_exp -> cons_exp At at_exp
-- On Type reduce production at_exp -> cons_exp At at_exp
-- On Theorem reduce production at_exp -> cons_exp At at_exp
-- On Then reduce production at_exp -> cons_exp At at_exp
-- On SemiSemi reduce production at_exp -> cons_exp At at_exp
-- On Semi reduce production at_exp -> cons_exp At at_exp
-- On Rsquare reduce production at_exp -> cons_exp At at_exp
-- On Rparen reduce production at_exp -> cons_exp At at_exp
-- On Rcurly reduce production at_exp -> cons_exp At at_exp
-- On Open_ reduce production at_exp -> cons_exp At at_exp
-- On Module_ reduce production at_exp -> cons_exp At at_exp
-- On MinusMinusGt reduce production at_exp -> cons_exp At at_exp
-- On MEM reduce production at_exp -> cons_exp At at_exp
-- On Let_ reduce production at_exp -> cons_exp At at_exp
-- On Lemma reduce production at_exp -> cons_exp At at_exp
-- On Inst_default reduce production at_exp -> cons_exp At at_exp
-- On Inst reduce production at_exp -> cons_exp At at_exp
-- On Indreln reduce production at_exp -> cons_exp At at_exp
-- On Include_ reduce production at_exp -> cons_exp At at_exp
-- On In reduce production at_exp -> cons_exp At at_exp
-- On Import_ reduce production at_exp -> cons_exp At at_exp
-- On IN reduce production at_exp -> cons_exp At at_exp
-- On GtEqX reduce production at_exp -> cons_exp At at_exp
-- On GtEq reduce production at_exp -> cons_exp At at_exp
-- On EqualX reduce production at_exp -> cons_exp At at_exp
-- On EqEqGt reduce production at_exp -> cons_exp At at_exp
-- On Eq reduce production at_exp -> cons_exp At at_exp
-- On Eof reduce production at_exp -> cons_exp At at_exp
-- On End reduce production at_exp -> cons_exp At at_exp
-- On Else reduce production at_exp -> cons_exp At at_exp
-- On Declare reduce production at_exp -> cons_exp At at_exp
-- On Comma reduce production at_exp -> cons_exp At at_exp
-- On Colon reduce production at_exp -> cons_exp At at_exp
-- On Class_ reduce production at_exp -> cons_exp At at_exp
-- On BarGt reduce production at_exp -> cons_exp At at_exp
-- On BarBrace reduce production at_exp -> cons_exp At at_exp
-- On BarBar reduce production at_exp -> cons_exp At at_exp
-- On Bar reduce production at_exp -> cons_exp At at_exp
-- On Assert reduce production at_exp -> cons_exp At at_exp
-- On And reduce production at_exp -> cons_exp At at_exp
-- On AmpAmp reduce production at_exp -> cons_exp At at_exp

State 358:
## Known stack suffix:
## eq_exp MEM at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Val reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Type reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Theorem reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Then reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On SemiSemi reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Semi reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Rsquare reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Rparen reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Rcurly reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Open_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Module_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Let_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Lemma reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Inst_default reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Inst reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Indreln reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Include_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On In reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Import_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On EqEqGt reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Eof reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On End reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Else reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Declare reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Comma reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Colon reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Class_ reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On BarGt reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On BarBrace reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Bar reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On Assert reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp
-- On And reduce production eq_right_atomic_exp -> eq_exp MEM at_right_atomic_exp

State 359:
## Known stack suffix:
## eq_exp MEM at_exp
## LR(1) items:
eq_exp -> eq_exp MEM at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp MEM at_exp
-- On Val reduce production eq_exp -> eq_exp MEM at_exp
-- On Type reduce production eq_exp -> eq_exp MEM at_exp
-- On Theorem reduce production eq_exp -> eq_exp MEM at_exp
-- On Then reduce production eq_exp -> eq_exp MEM at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp MEM at_exp
-- On Semi reduce production eq_exp -> eq_exp MEM at_exp
-- On Rsquare reduce production eq_exp -> eq_exp MEM at_exp
-- On Rparen reduce production eq_exp -> eq_exp MEM at_exp
-- On Rcurly reduce production eq_exp -> eq_exp MEM at_exp
-- On Open_ reduce production eq_exp -> eq_exp MEM at_exp
-- On Module_ reduce production eq_exp -> eq_exp MEM at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp MEM at_exp
-- On MEM reduce production eq_exp -> eq_exp MEM at_exp
-- On Let_ reduce production eq_exp -> eq_exp MEM at_exp
-- On Lemma reduce production eq_exp -> eq_exp MEM at_exp
-- On Inst_default reduce production eq_exp -> eq_exp MEM at_exp
-- On Inst reduce production eq_exp -> eq_exp MEM at_exp
-- On Indreln reduce production eq_exp -> eq_exp MEM at_exp
-- On Include_ reduce production eq_exp -> eq_exp MEM at_exp
-- On In reduce production eq_exp -> eq_exp MEM at_exp
-- On Import_ reduce production eq_exp -> eq_exp MEM at_exp
-- On IN reduce production eq_exp -> eq_exp MEM at_exp
-- On GtEqX reduce production eq_exp -> eq_exp MEM at_exp
-- On GtEq reduce production eq_exp -> eq_exp MEM at_exp
-- On EqualX reduce production eq_exp -> eq_exp MEM at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp MEM at_exp
-- On Eq reduce production eq_exp -> eq_exp MEM at_exp
-- On Eof reduce production eq_exp -> eq_exp MEM at_exp
-- On End reduce production eq_exp -> eq_exp MEM at_exp
-- On Else reduce production eq_exp -> eq_exp MEM at_exp
-- On Declare reduce production eq_exp -> eq_exp MEM at_exp
-- On Comma reduce production eq_exp -> eq_exp MEM at_exp
-- On Colon reduce production eq_exp -> eq_exp MEM at_exp
-- On Class_ reduce production eq_exp -> eq_exp MEM at_exp
-- On BarGt reduce production eq_exp -> eq_exp MEM at_exp
-- On BarBrace reduce production eq_exp -> eq_exp MEM at_exp
-- On BarBar reduce production eq_exp -> eq_exp MEM at_exp
-- On Bar reduce production eq_exp -> eq_exp MEM at_exp
-- On Assert reduce production eq_exp -> eq_exp MEM at_exp
-- On And reduce production eq_exp -> eq_exp MEM at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp MEM at_exp

State 360:
## Known stack suffix:
## eq_exp IN
## LR(1) items:
eq_exp -> eq_exp IN . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp IN . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 361
-- On at_exp shift to state 362
-- On app_exp shift to state 323
## Reductions:

State 361:
## Known stack suffix:
## eq_exp IN at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Val reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Type reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Theorem reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Then reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On SemiSemi reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Semi reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Rsquare reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Rparen reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Rcurly reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Open_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Module_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Let_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Lemma reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Inst_default reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Inst reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Indreln reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Include_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On In reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Import_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On EqEqGt reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Eof reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On End reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Else reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Declare reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Comma reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Colon reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Class_ reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On BarGt reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On BarBrace reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Bar reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On Assert reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp
-- On And reduce production eq_right_atomic_exp -> eq_exp IN at_right_atomic_exp

State 362:
## Known stack suffix:
## eq_exp IN at_exp
## LR(1) items:
eq_exp -> eq_exp IN at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp IN at_exp
-- On Val reduce production eq_exp -> eq_exp IN at_exp
-- On Type reduce production eq_exp -> eq_exp IN at_exp
-- On Theorem reduce production eq_exp -> eq_exp IN at_exp
-- On Then reduce production eq_exp -> eq_exp IN at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp IN at_exp
-- On Semi reduce production eq_exp -> eq_exp IN at_exp
-- On Rsquare reduce production eq_exp -> eq_exp IN at_exp
-- On Rparen reduce production eq_exp -> eq_exp IN at_exp
-- On Rcurly reduce production eq_exp -> eq_exp IN at_exp
-- On Open_ reduce production eq_exp -> eq_exp IN at_exp
-- On Module_ reduce production eq_exp -> eq_exp IN at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp IN at_exp
-- On MEM reduce production eq_exp -> eq_exp IN at_exp
-- On Let_ reduce production eq_exp -> eq_exp IN at_exp
-- On Lemma reduce production eq_exp -> eq_exp IN at_exp
-- On Inst_default reduce production eq_exp -> eq_exp IN at_exp
-- On Inst reduce production eq_exp -> eq_exp IN at_exp
-- On Indreln reduce production eq_exp -> eq_exp IN at_exp
-- On Include_ reduce production eq_exp -> eq_exp IN at_exp
-- On In reduce production eq_exp -> eq_exp IN at_exp
-- On Import_ reduce production eq_exp -> eq_exp IN at_exp
-- On IN reduce production eq_exp -> eq_exp IN at_exp
-- On GtEqX reduce production eq_exp -> eq_exp IN at_exp
-- On GtEq reduce production eq_exp -> eq_exp IN at_exp
-- On EqualX reduce production eq_exp -> eq_exp IN at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp IN at_exp
-- On Eq reduce production eq_exp -> eq_exp IN at_exp
-- On Eof reduce production eq_exp -> eq_exp IN at_exp
-- On End reduce production eq_exp -> eq_exp IN at_exp
-- On Else reduce production eq_exp -> eq_exp IN at_exp
-- On Declare reduce production eq_exp -> eq_exp IN at_exp
-- On Comma reduce production eq_exp -> eq_exp IN at_exp
-- On Colon reduce production eq_exp -> eq_exp IN at_exp
-- On Class_ reduce production eq_exp -> eq_exp IN at_exp
-- On BarGt reduce production eq_exp -> eq_exp IN at_exp
-- On BarBrace reduce production eq_exp -> eq_exp IN at_exp
-- On BarBar reduce production eq_exp -> eq_exp IN at_exp
-- On Bar reduce production eq_exp -> eq_exp IN at_exp
-- On Assert reduce production eq_exp -> eq_exp IN at_exp
-- On And reduce production eq_exp -> eq_exp IN at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp IN at_exp

State 363:
## Known stack suffix:
## eq_exp GtEqX
## LR(1) items:
eq_exp -> eq_exp GtEqX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 378
-- On app_exp shift to state 366
## Reductions:

State 364:
## Known stack suffix:
## star_exp
## LR(1) items:
plus_exp -> star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With reduce production plus_exp -> star_exp
-- On Val reduce production plus_exp -> star_exp
-- On Type reduce production plus_exp -> star_exp
-- On Theorem reduce production plus_exp -> star_exp
-- On Then reduce production plus_exp -> star_exp
-- On SemiSemi reduce production plus_exp -> star_exp
-- On Semi reduce production plus_exp -> star_exp
-- On Rsquare reduce production plus_exp -> star_exp
-- On Rparen reduce production plus_exp -> star_exp
-- On Rcurly reduce production plus_exp -> star_exp
-- On PlusX reduce production plus_exp -> star_exp
-- On Plus reduce production plus_exp -> star_exp
-- On Open_ reduce production plus_exp -> star_exp
-- On Module_ reduce production plus_exp -> star_exp
-- On MinusMinusGt reduce production plus_exp -> star_exp
-- On MEM reduce production plus_exp -> star_exp
-- On Let_ reduce production plus_exp -> star_exp
-- On Lemma reduce production plus_exp -> star_exp
-- On Inst_default reduce production plus_exp -> star_exp
-- On Inst reduce production plus_exp -> star_exp
-- On Indreln reduce production plus_exp -> star_exp
-- On Include_ reduce production plus_exp -> star_exp
-- On In reduce production plus_exp -> star_exp
-- On Import_ reduce production plus_exp -> star_exp
-- On IN reduce production plus_exp -> star_exp
-- On GtEqX reduce production plus_exp -> star_exp
-- On GtEq reduce production plus_exp -> star_exp
-- On EqualX reduce production plus_exp -> star_exp
-- On EqEqGt reduce production plus_exp -> star_exp
-- On Eq reduce production plus_exp -> star_exp
-- On Eof reduce production plus_exp -> star_exp
-- On End reduce production plus_exp -> star_exp
-- On Else reduce production plus_exp -> star_exp
-- On Declare reduce production plus_exp -> star_exp
-- On Comma reduce production plus_exp -> star_exp
-- On ColonColon reduce production plus_exp -> star_exp
-- On Colon reduce production plus_exp -> star_exp
-- On Class_ reduce production plus_exp -> star_exp
-- On BarGt reduce production plus_exp -> star_exp
-- On BarBrace reduce production plus_exp -> star_exp
-- On BarBar reduce production plus_exp -> star_exp
-- On Bar reduce production plus_exp -> star_exp
-- On AtX reduce production plus_exp -> star_exp
-- On At reduce production plus_exp -> star_exp
-- On Assert reduce production plus_exp -> star_exp
-- On And reduce production plus_exp -> star_exp
-- On AmpAmp reduce production plus_exp -> star_exp

State 365:
## Known stack suffix:
## star_exp StarX
## LR(1) items:
star_exp -> star_exp StarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 301
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## app_exp
## LR(1) items:
app_exp -> app_exp . field_exp [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
starstar_exp -> app_exp . StarstarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On StarstarX shift to state 367
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 327
-- On atomic_exp shift to state 313
## Reductions:
-- On With reduce production starstar_exp -> app_exp
-- On Val reduce production starstar_exp -> app_exp
-- On Type reduce production starstar_exp -> app_exp
-- On Theorem reduce production starstar_exp -> app_exp
-- On Then reduce production starstar_exp -> app_exp
-- On StarX reduce production starstar_exp -> app_exp
-- On Star reduce production starstar_exp -> app_exp
-- On SemiSemi reduce production starstar_exp -> app_exp
-- On Semi reduce production starstar_exp -> app_exp
-- On Rsquare reduce production starstar_exp -> app_exp
-- On Rparen reduce production starstar_exp -> app_exp
-- On Rcurly reduce production starstar_exp -> app_exp
-- On PlusX reduce production starstar_exp -> app_exp
-- On Plus reduce production starstar_exp -> app_exp
-- On Open_ reduce production starstar_exp -> app_exp
-- On Module_ reduce production starstar_exp -> app_exp
-- On MinusMinusGt reduce production starstar_exp -> app_exp
-- On MEM reduce production starstar_exp -> app_exp
-- On Let_ reduce production starstar_exp -> app_exp
-- On Lemma reduce production starstar_exp -> app_exp
-- On Inst_default reduce production starstar_exp -> app_exp
-- On Inst reduce production starstar_exp -> app_exp
-- On Indreln reduce production starstar_exp -> app_exp
-- On Include_ reduce production starstar_exp -> app_exp
-- On In reduce production starstar_exp -> app_exp
-- On Import_ reduce production starstar_exp -> app_exp
-- On IN reduce production starstar_exp -> app_exp
-- On GtEqX reduce production starstar_exp -> app_exp
-- On GtEq reduce production starstar_exp -> app_exp
-- On EqualX reduce production starstar_exp -> app_exp
-- On EqEqGt reduce production starstar_exp -> app_exp
-- On Eq reduce production starstar_exp -> app_exp
-- On Eof reduce production starstar_exp -> app_exp
-- On End reduce production starstar_exp -> app_exp
-- On Else reduce production starstar_exp -> app_exp
-- On Declare reduce production starstar_exp -> app_exp
-- On Comma reduce production starstar_exp -> app_exp
-- On ColonColon reduce production starstar_exp -> app_exp
-- On Colon reduce production starstar_exp -> app_exp
-- On Class_ reduce production starstar_exp -> app_exp
-- On BarGt reduce production starstar_exp -> app_exp
-- On BarBrace reduce production starstar_exp -> app_exp
-- On BarBar reduce production starstar_exp -> app_exp
-- On Bar reduce production starstar_exp -> app_exp
-- On AtX reduce production starstar_exp -> app_exp
-- On At reduce production starstar_exp -> app_exp
-- On Assert reduce production starstar_exp -> app_exp
-- On And reduce production starstar_exp -> app_exp
-- On AmpAmp reduce production starstar_exp -> app_exp

State 367:
## Known stack suffix:
## app_exp StarstarX
## LR(1) items:
starstar_exp -> app_exp StarstarX . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 326
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 368:
## Known stack suffix:
## star_exp Star
## LR(1) items:
star_exp -> star_exp Star . starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 330
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 369:
## Known stack suffix:
## plus_exp
## LR(1) items:
cons_exp -> plus_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
cons_exp -> plus_exp . ColonColon cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . Plus star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
plus_exp -> plus_exp . PlusX star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On PlusX shift to state 370
-- On Plus shift to state 372
-- On ColonColon shift to state 374
## Reductions:
-- On With reduce production cons_exp -> plus_exp
-- On Val reduce production cons_exp -> plus_exp
-- On Type reduce production cons_exp -> plus_exp
-- On Theorem reduce production cons_exp -> plus_exp
-- On Then reduce production cons_exp -> plus_exp
-- On SemiSemi reduce production cons_exp -> plus_exp
-- On Semi reduce production cons_exp -> plus_exp
-- On Rsquare reduce production cons_exp -> plus_exp
-- On Rparen reduce production cons_exp -> plus_exp
-- On Rcurly reduce production cons_exp -> plus_exp
-- On Open_ reduce production cons_exp -> plus_exp
-- On Module_ reduce production cons_exp -> plus_exp
-- On MinusMinusGt reduce production cons_exp -> plus_exp
-- On MEM reduce production cons_exp -> plus_exp
-- On Let_ reduce production cons_exp -> plus_exp
-- On Lemma reduce production cons_exp -> plus_exp
-- On Inst_default reduce production cons_exp -> plus_exp
-- On Inst reduce production cons_exp -> plus_exp
-- On Indreln reduce production cons_exp -> plus_exp
-- On Include_ reduce production cons_exp -> plus_exp
-- On In reduce production cons_exp -> plus_exp
-- On Import_ reduce production cons_exp -> plus_exp
-- On IN reduce production cons_exp -> plus_exp
-- On GtEqX reduce production cons_exp -> plus_exp
-- On GtEq reduce production cons_exp -> plus_exp
-- On EqualX reduce production cons_exp -> plus_exp
-- On EqEqGt reduce production cons_exp -> plus_exp
-- On Eq reduce production cons_exp -> plus_exp
-- On Eof reduce production cons_exp -> plus_exp
-- On End reduce production cons_exp -> plus_exp
-- On Else reduce production cons_exp -> plus_exp
-- On Declare reduce production cons_exp -> plus_exp
-- On Comma reduce production cons_exp -> plus_exp
-- On Colon reduce production cons_exp -> plus_exp
-- On Class_ reduce production cons_exp -> plus_exp
-- On BarGt reduce production cons_exp -> plus_exp
-- On BarBrace reduce production cons_exp -> plus_exp
-- On BarBar reduce production cons_exp -> plus_exp
-- On Bar reduce production cons_exp -> plus_exp
-- On AtX reduce production cons_exp -> plus_exp
-- On At reduce production cons_exp -> plus_exp
-- On Assert reduce production cons_exp -> plus_exp
-- On And reduce production cons_exp -> plus_exp
-- On AmpAmp reduce production cons_exp -> plus_exp

State 370:
## Known stack suffix:
## plus_exp PlusX
## LR(1) items:
plus_exp -> plus_exp PlusX . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 371
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 371:
## Known stack suffix:
## plus_exp PlusX star_exp
## LR(1) items:
plus_exp -> plus_exp PlusX star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With reduce production plus_exp -> plus_exp PlusX star_exp
-- On Val reduce production plus_exp -> plus_exp PlusX star_exp
-- On Type reduce production plus_exp -> plus_exp PlusX star_exp
-- On Theorem reduce production plus_exp -> plus_exp PlusX star_exp
-- On Then reduce production plus_exp -> plus_exp PlusX star_exp
-- On SemiSemi reduce production plus_exp -> plus_exp PlusX star_exp
-- On Semi reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rsquare reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rparen reduce production plus_exp -> plus_exp PlusX star_exp
-- On Rcurly reduce production plus_exp -> plus_exp PlusX star_exp
-- On PlusX reduce production plus_exp -> plus_exp PlusX star_exp
-- On Plus reduce production plus_exp -> plus_exp PlusX star_exp
-- On Open_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On Module_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On MinusMinusGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On MEM reduce production plus_exp -> plus_exp PlusX star_exp
-- On Let_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On Lemma reduce production plus_exp -> plus_exp PlusX star_exp
-- On Inst_default reduce production plus_exp -> plus_exp PlusX star_exp
-- On Inst reduce production plus_exp -> plus_exp PlusX star_exp
-- On Indreln reduce production plus_exp -> plus_exp PlusX star_exp
-- On Include_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On In reduce production plus_exp -> plus_exp PlusX star_exp
-- On Import_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On IN reduce production plus_exp -> plus_exp PlusX star_exp
-- On GtEqX reduce production plus_exp -> plus_exp PlusX star_exp
-- On GtEq reduce production plus_exp -> plus_exp PlusX star_exp
-- On EqualX reduce production plus_exp -> plus_exp PlusX star_exp
-- On EqEqGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On Eq reduce production plus_exp -> plus_exp PlusX star_exp
-- On Eof reduce production plus_exp -> plus_exp PlusX star_exp
-- On End reduce production plus_exp -> plus_exp PlusX star_exp
-- On Else reduce production plus_exp -> plus_exp PlusX star_exp
-- On Declare reduce production plus_exp -> plus_exp PlusX star_exp
-- On Comma reduce production plus_exp -> plus_exp PlusX star_exp
-- On ColonColon reduce production plus_exp -> plus_exp PlusX star_exp
-- On Colon reduce production plus_exp -> plus_exp PlusX star_exp
-- On Class_ reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarGt reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarBrace reduce production plus_exp -> plus_exp PlusX star_exp
-- On BarBar reduce production plus_exp -> plus_exp PlusX star_exp
-- On Bar reduce production plus_exp -> plus_exp PlusX star_exp
-- On AtX reduce production plus_exp -> plus_exp PlusX star_exp
-- On At reduce production plus_exp -> plus_exp PlusX star_exp
-- On Assert reduce production plus_exp -> plus_exp PlusX star_exp
-- On And reduce production plus_exp -> plus_exp PlusX star_exp
-- On AmpAmp reduce production plus_exp -> plus_exp PlusX star_exp

State 372:
## Known stack suffix:
## plus_exp Plus
## LR(1) items:
plus_exp -> plus_exp Plus . star_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 373
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 373:
## Known stack suffix:
## plus_exp Plus star_exp
## LR(1) items:
plus_exp -> plus_exp Plus star_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . Star starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
star_exp -> star_exp . StarX starstar_exp [ With Val Type Theorem Then StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma ColonColon Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On StarX shift to state 365
-- On Star shift to state 368
## Reductions:
-- On With reduce production plus_exp -> plus_exp Plus star_exp
-- On Val reduce production plus_exp -> plus_exp Plus star_exp
-- On Type reduce production plus_exp -> plus_exp Plus star_exp
-- On Theorem reduce production plus_exp -> plus_exp Plus star_exp
-- On Then reduce production plus_exp -> plus_exp Plus star_exp
-- On SemiSemi reduce production plus_exp -> plus_exp Plus star_exp
-- On Semi reduce production plus_exp -> plus_exp Plus star_exp
-- On Rsquare reduce production plus_exp -> plus_exp Plus star_exp
-- On Rparen reduce production plus_exp -> plus_exp Plus star_exp
-- On Rcurly reduce production plus_exp -> plus_exp Plus star_exp
-- On PlusX reduce production plus_exp -> plus_exp Plus star_exp
-- On Plus reduce production plus_exp -> plus_exp Plus star_exp
-- On Open_ reduce production plus_exp -> plus_exp Plus star_exp
-- On Module_ reduce production plus_exp -> plus_exp Plus star_exp
-- On MinusMinusGt reduce production plus_exp -> plus_exp Plus star_exp
-- On MEM reduce production plus_exp -> plus_exp Plus star_exp
-- On Let_ reduce production plus_exp -> plus_exp Plus star_exp
-- On Lemma reduce production plus_exp -> plus_exp Plus star_exp
-- On Inst_default reduce production plus_exp -> plus_exp Plus star_exp
-- On Inst reduce production plus_exp -> plus_exp Plus star_exp
-- On Indreln reduce production plus_exp -> plus_exp Plus star_exp
-- On Include_ reduce production plus_exp -> plus_exp Plus star_exp
-- On In reduce production plus_exp -> plus_exp Plus star_exp
-- On Import_ reduce production plus_exp -> plus_exp Plus star_exp
-- On IN reduce production plus_exp -> plus_exp Plus star_exp
-- On GtEqX reduce production plus_exp -> plus_exp Plus star_exp
-- On GtEq reduce production plus_exp -> plus_exp Plus star_exp
-- On EqualX reduce production plus_exp -> plus_exp Plus star_exp
-- On EqEqGt reduce production plus_exp -> plus_exp Plus star_exp
-- On Eq reduce production plus_exp -> plus_exp Plus star_exp
-- On Eof reduce production plus_exp -> plus_exp Plus star_exp
-- On End reduce production plus_exp -> plus_exp Plus star_exp
-- On Else reduce production plus_exp -> plus_exp Plus star_exp
-- On Declare reduce production plus_exp -> plus_exp Plus star_exp
-- On Comma reduce production plus_exp -> plus_exp Plus star_exp
-- On ColonColon reduce production plus_exp -> plus_exp Plus star_exp
-- On Colon reduce production plus_exp -> plus_exp Plus star_exp
-- On Class_ reduce production plus_exp -> plus_exp Plus star_exp
-- On BarGt reduce production plus_exp -> plus_exp Plus star_exp
-- On BarBrace reduce production plus_exp -> plus_exp Plus star_exp
-- On BarBar reduce production plus_exp -> plus_exp Plus star_exp
-- On Bar reduce production plus_exp -> plus_exp Plus star_exp
-- On AtX reduce production plus_exp -> plus_exp Plus star_exp
-- On At reduce production plus_exp -> plus_exp Plus star_exp
-- On Assert reduce production plus_exp -> plus_exp Plus star_exp
-- On And reduce production plus_exp -> plus_exp Plus star_exp
-- On AmpAmp reduce production plus_exp -> plus_exp Plus star_exp

State 374:
## Known stack suffix:
## plus_exp ColonColon
## LR(1) items:
cons_exp -> plus_exp ColonColon . cons_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 341
-- On atomic_exp shift to state 313
-- On app_exp shift to state 366
## Reductions:

State 375:
## Known stack suffix:
## cons_exp
## LR(1) items:
at_exp -> cons_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . At at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
at_exp -> cons_exp . AtX at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On AtX shift to state 376
-- On At shift to state 377
## Reductions:
-- On With reduce production at_exp -> cons_exp
-- On Val reduce production at_exp -> cons_exp
-- On Type reduce production at_exp -> cons_exp
-- On Theorem reduce production at_exp -> cons_exp
-- On Then reduce production at_exp -> cons_exp
-- On SemiSemi reduce production at_exp -> cons_exp
-- On Semi reduce production at_exp -> cons_exp
-- On Rsquare reduce production at_exp -> cons_exp
-- On Rparen reduce production at_exp -> cons_exp
-- On Rcurly reduce production at_exp -> cons_exp
-- On Open_ reduce production at_exp -> cons_exp
-- On Module_ reduce production at_exp -> cons_exp
-- On MinusMinusGt reduce production at_exp -> cons_exp
-- On MEM reduce production at_exp -> cons_exp
-- On Let_ reduce production at_exp -> cons_exp
-- On Lemma reduce production at_exp -> cons_exp
-- On Inst_default reduce production at_exp -> cons_exp
-- On Inst reduce production at_exp -> cons_exp
-- On Indreln reduce production at_exp -> cons_exp
-- On Include_ reduce production at_exp -> cons_exp
-- On In reduce production at_exp -> cons_exp
-- On Import_ reduce production at_exp -> cons_exp
-- On IN reduce production at_exp -> cons_exp
-- On GtEqX reduce production at_exp -> cons_exp
-- On GtEq reduce production at_exp -> cons_exp
-- On EqualX reduce production at_exp -> cons_exp
-- On EqEqGt reduce production at_exp -> cons_exp
-- On Eq reduce production at_exp -> cons_exp
-- On Eof reduce production at_exp -> cons_exp
-- On End reduce production at_exp -> cons_exp
-- On Else reduce production at_exp -> cons_exp
-- On Declare reduce production at_exp -> cons_exp
-- On Comma reduce production at_exp -> cons_exp
-- On Colon reduce production at_exp -> cons_exp
-- On Class_ reduce production at_exp -> cons_exp
-- On BarGt reduce production at_exp -> cons_exp
-- On BarBrace reduce production at_exp -> cons_exp
-- On BarBar reduce production at_exp -> cons_exp
-- On Bar reduce production at_exp -> cons_exp
-- On Assert reduce production at_exp -> cons_exp
-- On And reduce production at_exp -> cons_exp
-- On AmpAmp reduce production at_exp -> cons_exp

State 376:
## Known stack suffix:
## cons_exp AtX
## LR(1) items:
at_exp -> cons_exp AtX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 354
-- On app_exp shift to state 366
## Reductions:

State 377:
## Known stack suffix:
## cons_exp At
## LR(1) items:
at_exp -> cons_exp At . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 357
-- On app_exp shift to state 366
## Reductions:

State 378:
## Known stack suffix:
## eq_exp GtEqX at_exp
## LR(1) items:
eq_exp -> eq_exp GtEqX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Val reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Type reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Theorem reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Then reduce production eq_exp -> eq_exp GtEqX at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Semi reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Rsquare reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Rparen reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Rcurly reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Open_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Module_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp GtEqX at_exp
-- On MEM reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Let_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Lemma reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Inst_default reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Inst reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Indreln reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Include_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On In reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Import_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On IN reduce production eq_exp -> eq_exp GtEqX at_exp
-- On GtEqX reduce production eq_exp -> eq_exp GtEqX at_exp
-- On GtEq reduce production eq_exp -> eq_exp GtEqX at_exp
-- On EqualX reduce production eq_exp -> eq_exp GtEqX at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Eq reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Eof reduce production eq_exp -> eq_exp GtEqX at_exp
-- On End reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Else reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Declare reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Comma reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Colon reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Class_ reduce production eq_exp -> eq_exp GtEqX at_exp
-- On BarGt reduce production eq_exp -> eq_exp GtEqX at_exp
-- On BarBrace reduce production eq_exp -> eq_exp GtEqX at_exp
-- On BarBar reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Bar reduce production eq_exp -> eq_exp GtEqX at_exp
-- On Assert reduce production eq_exp -> eq_exp GtEqX at_exp
-- On And reduce production eq_exp -> eq_exp GtEqX at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp GtEqX at_exp

State 379:
## Known stack suffix:
## eq_exp GtEq
## LR(1) items:
eq_exp -> eq_exp GtEq . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_exp shift to state 296
-- On star_exp shift to state 364
-- On plus_exp shift to state 369
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_exp shift to state 375
-- On atomic_exp shift to state 313
-- On at_exp shift to state 380
-- On app_exp shift to state 366
## Reductions:

State 380:
## Known stack suffix:
## eq_exp GtEq at_exp
## LR(1) items:
eq_exp -> eq_exp GtEq at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp GtEq at_exp
-- On Val reduce production eq_exp -> eq_exp GtEq at_exp
-- On Type reduce production eq_exp -> eq_exp GtEq at_exp
-- On Theorem reduce production eq_exp -> eq_exp GtEq at_exp
-- On Then reduce production eq_exp -> eq_exp GtEq at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp GtEq at_exp
-- On Semi reduce production eq_exp -> eq_exp GtEq at_exp
-- On Rsquare reduce production eq_exp -> eq_exp GtEq at_exp
-- On Rparen reduce production eq_exp -> eq_exp GtEq at_exp
-- On Rcurly reduce production eq_exp -> eq_exp GtEq at_exp
-- On Open_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On Module_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp GtEq at_exp
-- On MEM reduce production eq_exp -> eq_exp GtEq at_exp
-- On Let_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On Lemma reduce production eq_exp -> eq_exp GtEq at_exp
-- On Inst_default reduce production eq_exp -> eq_exp GtEq at_exp
-- On Inst reduce production eq_exp -> eq_exp GtEq at_exp
-- On Indreln reduce production eq_exp -> eq_exp GtEq at_exp
-- On Include_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On In reduce production eq_exp -> eq_exp GtEq at_exp
-- On Import_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On IN reduce production eq_exp -> eq_exp GtEq at_exp
-- On GtEqX reduce production eq_exp -> eq_exp GtEq at_exp
-- On GtEq reduce production eq_exp -> eq_exp GtEq at_exp
-- On EqualX reduce production eq_exp -> eq_exp GtEq at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp GtEq at_exp
-- On Eq reduce production eq_exp -> eq_exp GtEq at_exp
-- On Eof reduce production eq_exp -> eq_exp GtEq at_exp
-- On End reduce production eq_exp -> eq_exp GtEq at_exp
-- On Else reduce production eq_exp -> eq_exp GtEq at_exp
-- On Declare reduce production eq_exp -> eq_exp GtEq at_exp
-- On Comma reduce production eq_exp -> eq_exp GtEq at_exp
-- On Colon reduce production eq_exp -> eq_exp GtEq at_exp
-- On Class_ reduce production eq_exp -> eq_exp GtEq at_exp
-- On BarGt reduce production eq_exp -> eq_exp GtEq at_exp
-- On BarBrace reduce production eq_exp -> eq_exp GtEq at_exp
-- On BarBar reduce production eq_exp -> eq_exp GtEq at_exp
-- On Bar reduce production eq_exp -> eq_exp GtEq at_exp
-- On Assert reduce production eq_exp -> eq_exp GtEq at_exp
-- On And reduce production eq_exp -> eq_exp GtEq at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp GtEq at_exp

State 381:
## Known stack suffix:
## eq_exp EqualX
## LR(1) items:
eq_exp -> eq_exp EqualX . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp EqualX . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 382
-- On at_exp shift to state 383
-- On app_exp shift to state 323
## Reductions:

State 382:
## Known stack suffix:
## eq_exp EqualX at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Val reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Type reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Theorem reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Then reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On SemiSemi reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Semi reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Rsquare reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Rparen reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Rcurly reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Open_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Module_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Let_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Lemma reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Inst_default reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Inst reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Indreln reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Include_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On In reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Import_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On EqEqGt reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Eof reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On End reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Else reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Declare reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Comma reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Colon reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Class_ reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On BarGt reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On BarBrace reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Bar reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On Assert reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp
-- On And reduce production eq_right_atomic_exp -> eq_exp EqualX at_right_atomic_exp

State 383:
## Known stack suffix:
## eq_exp EqualX at_exp
## LR(1) items:
eq_exp -> eq_exp EqualX at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp EqualX at_exp
-- On Val reduce production eq_exp -> eq_exp EqualX at_exp
-- On Type reduce production eq_exp -> eq_exp EqualX at_exp
-- On Theorem reduce production eq_exp -> eq_exp EqualX at_exp
-- On Then reduce production eq_exp -> eq_exp EqualX at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp EqualX at_exp
-- On Semi reduce production eq_exp -> eq_exp EqualX at_exp
-- On Rsquare reduce production eq_exp -> eq_exp EqualX at_exp
-- On Rparen reduce production eq_exp -> eq_exp EqualX at_exp
-- On Rcurly reduce production eq_exp -> eq_exp EqualX at_exp
-- On Open_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On Module_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp EqualX at_exp
-- On MEM reduce production eq_exp -> eq_exp EqualX at_exp
-- On Let_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On Lemma reduce production eq_exp -> eq_exp EqualX at_exp
-- On Inst_default reduce production eq_exp -> eq_exp EqualX at_exp
-- On Inst reduce production eq_exp -> eq_exp EqualX at_exp
-- On Indreln reduce production eq_exp -> eq_exp EqualX at_exp
-- On Include_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On In reduce production eq_exp -> eq_exp EqualX at_exp
-- On Import_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On IN reduce production eq_exp -> eq_exp EqualX at_exp
-- On GtEqX reduce production eq_exp -> eq_exp EqualX at_exp
-- On GtEq reduce production eq_exp -> eq_exp EqualX at_exp
-- On EqualX reduce production eq_exp -> eq_exp EqualX at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp EqualX at_exp
-- On Eq reduce production eq_exp -> eq_exp EqualX at_exp
-- On Eof reduce production eq_exp -> eq_exp EqualX at_exp
-- On End reduce production eq_exp -> eq_exp EqualX at_exp
-- On Else reduce production eq_exp -> eq_exp EqualX at_exp
-- On Declare reduce production eq_exp -> eq_exp EqualX at_exp
-- On Comma reduce production eq_exp -> eq_exp EqualX at_exp
-- On Colon reduce production eq_exp -> eq_exp EqualX at_exp
-- On Class_ reduce production eq_exp -> eq_exp EqualX at_exp
-- On BarGt reduce production eq_exp -> eq_exp EqualX at_exp
-- On BarBrace reduce production eq_exp -> eq_exp EqualX at_exp
-- On BarBar reduce production eq_exp -> eq_exp EqualX at_exp
-- On Bar reduce production eq_exp -> eq_exp EqualX at_exp
-- On Assert reduce production eq_exp -> eq_exp EqualX at_exp
-- On And reduce production eq_exp -> eq_exp EqualX at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp EqualX at_exp

State 384:
## Known stack suffix:
## eq_exp Eq
## LR(1) items:
eq_exp -> eq_exp Eq . at_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
eq_right_atomic_exp -> eq_exp Eq . at_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 385
-- On at_exp shift to state 386
-- On app_exp shift to state 323
## Reductions:

State 385:
## Known stack suffix:
## eq_exp Eq at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Val reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Type reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Theorem reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Then reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On SemiSemi reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Semi reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Rsquare reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Rparen reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Rcurly reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Open_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Module_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Let_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Lemma reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Inst_default reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Inst reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Indreln reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Include_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On In reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Import_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On EqEqGt reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Eof reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On End reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Else reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Declare reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Comma reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Colon reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Class_ reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On BarGt reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On BarBrace reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Bar reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On Assert reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp
-- On And reduce production eq_right_atomic_exp -> eq_exp Eq at_right_atomic_exp

State 386:
## Known stack suffix:
## eq_exp Eq at_exp
## LR(1) items:
eq_exp -> eq_exp Eq at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> eq_exp Eq at_exp
-- On Val reduce production eq_exp -> eq_exp Eq at_exp
-- On Type reduce production eq_exp -> eq_exp Eq at_exp
-- On Theorem reduce production eq_exp -> eq_exp Eq at_exp
-- On Then reduce production eq_exp -> eq_exp Eq at_exp
-- On SemiSemi reduce production eq_exp -> eq_exp Eq at_exp
-- On Semi reduce production eq_exp -> eq_exp Eq at_exp
-- On Rsquare reduce production eq_exp -> eq_exp Eq at_exp
-- On Rparen reduce production eq_exp -> eq_exp Eq at_exp
-- On Rcurly reduce production eq_exp -> eq_exp Eq at_exp
-- On Open_ reduce production eq_exp -> eq_exp Eq at_exp
-- On Module_ reduce production eq_exp -> eq_exp Eq at_exp
-- On MinusMinusGt reduce production eq_exp -> eq_exp Eq at_exp
-- On MEM reduce production eq_exp -> eq_exp Eq at_exp
-- On Let_ reduce production eq_exp -> eq_exp Eq at_exp
-- On Lemma reduce production eq_exp -> eq_exp Eq at_exp
-- On Inst_default reduce production eq_exp -> eq_exp Eq at_exp
-- On Inst reduce production eq_exp -> eq_exp Eq at_exp
-- On Indreln reduce production eq_exp -> eq_exp Eq at_exp
-- On Include_ reduce production eq_exp -> eq_exp Eq at_exp
-- On In reduce production eq_exp -> eq_exp Eq at_exp
-- On Import_ reduce production eq_exp -> eq_exp Eq at_exp
-- On IN reduce production eq_exp -> eq_exp Eq at_exp
-- On GtEqX reduce production eq_exp -> eq_exp Eq at_exp
-- On GtEq reduce production eq_exp -> eq_exp Eq at_exp
-- On EqualX reduce production eq_exp -> eq_exp Eq at_exp
-- On EqEqGt reduce production eq_exp -> eq_exp Eq at_exp
-- On Eq reduce production eq_exp -> eq_exp Eq at_exp
-- On Eof reduce production eq_exp -> eq_exp Eq at_exp
-- On End reduce production eq_exp -> eq_exp Eq at_exp
-- On Else reduce production eq_exp -> eq_exp Eq at_exp
-- On Declare reduce production eq_exp -> eq_exp Eq at_exp
-- On Comma reduce production eq_exp -> eq_exp Eq at_exp
-- On Colon reduce production eq_exp -> eq_exp Eq at_exp
-- On Class_ reduce production eq_exp -> eq_exp Eq at_exp
-- On BarGt reduce production eq_exp -> eq_exp Eq at_exp
-- On BarBrace reduce production eq_exp -> eq_exp Eq at_exp
-- On BarBar reduce production eq_exp -> eq_exp Eq at_exp
-- On Bar reduce production eq_exp -> eq_exp Eq at_exp
-- On Assert reduce production eq_exp -> eq_exp Eq at_exp
-- On And reduce production eq_exp -> eq_exp Eq at_exp
-- On AmpAmp reduce production eq_exp -> eq_exp Eq at_exp

State 387:
## Known stack suffix:
## eq_exp AmpAmp
## LR(1) items:
and_exp -> eq_exp AmpAmp . and_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
and_right_atomic_exp -> eq_exp AmpAmp . and_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 390
-- On and_exp shift to state 391
## Reductions:

State 388:
## Known stack suffix:
## at_right_atomic_exp
## LR(1) items:
eq_right_atomic_exp -> at_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Val reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Type reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Theorem reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Then reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On SemiSemi reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Semi reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Rsquare reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Rparen reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Rcurly reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Open_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Module_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Let_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Lemma reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Inst_default reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Inst reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Indreln reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Include_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On In reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Import_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On EqEqGt reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Eof reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On End reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Else reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Declare reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Comma reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Colon reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Class_ reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On BarGt reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On BarBrace reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Bar reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On Assert reduce production eq_right_atomic_exp -> at_right_atomic_exp
-- On And reduce production eq_right_atomic_exp -> at_right_atomic_exp

State 389:
## Known stack suffix:
## at_exp
## LR(1) items:
eq_exp -> at_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt MEM Let_ Lemma Inst_default Inst Indreln Include_ In Import_ IN GtEqX GtEq EqualX EqEqGt Eq Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On With reduce production eq_exp -> at_exp
-- On Val reduce production eq_exp -> at_exp
-- On Type reduce production eq_exp -> at_exp
-- On Theorem reduce production eq_exp -> at_exp
-- On Then reduce production eq_exp -> at_exp
-- On SemiSemi reduce production eq_exp -> at_exp
-- On Semi reduce production eq_exp -> at_exp
-- On Rsquare reduce production eq_exp -> at_exp
-- On Rparen reduce production eq_exp -> at_exp
-- On Rcurly reduce production eq_exp -> at_exp
-- On Open_ reduce production eq_exp -> at_exp
-- On Module_ reduce production eq_exp -> at_exp
-- On MinusMinusGt reduce production eq_exp -> at_exp
-- On MEM reduce production eq_exp -> at_exp
-- On Let_ reduce production eq_exp -> at_exp
-- On Lemma reduce production eq_exp -> at_exp
-- On Inst_default reduce production eq_exp -> at_exp
-- On Inst reduce production eq_exp -> at_exp
-- On Indreln reduce production eq_exp -> at_exp
-- On Include_ reduce production eq_exp -> at_exp
-- On In reduce production eq_exp -> at_exp
-- On Import_ reduce production eq_exp -> at_exp
-- On IN reduce production eq_exp -> at_exp
-- On GtEqX reduce production eq_exp -> at_exp
-- On GtEq reduce production eq_exp -> at_exp
-- On EqualX reduce production eq_exp -> at_exp
-- On EqEqGt reduce production eq_exp -> at_exp
-- On Eq reduce production eq_exp -> at_exp
-- On Eof reduce production eq_exp -> at_exp
-- On End reduce production eq_exp -> at_exp
-- On Else reduce production eq_exp -> at_exp
-- On Declare reduce production eq_exp -> at_exp
-- On Comma reduce production eq_exp -> at_exp
-- On Colon reduce production eq_exp -> at_exp
-- On Class_ reduce production eq_exp -> at_exp
-- On BarGt reduce production eq_exp -> at_exp
-- On BarBrace reduce production eq_exp -> at_exp
-- On BarBar reduce production eq_exp -> at_exp
-- On Bar reduce production eq_exp -> at_exp
-- On Assert reduce production eq_exp -> at_exp
-- On And reduce production eq_exp -> at_exp
-- On AmpAmp reduce production eq_exp -> at_exp

State 390:
## Known stack suffix:
## eq_exp AmpAmp and_right_atomic_exp
## LR(1) items:
and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Val reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Type reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Theorem reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Then reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On SemiSemi reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Semi reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Rsquare reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Rparen reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Rcurly reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Open_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Module_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Let_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Lemma reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Inst_default reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Inst reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Indreln reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Include_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On In reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Import_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On EqEqGt reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Eof reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On End reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Else reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Declare reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Comma reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Colon reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Class_ reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On BarGt reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On BarBrace reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Bar reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On Assert reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp
-- On And reduce production and_right_atomic_exp -> eq_exp AmpAmp and_right_atomic_exp

State 391:
## Known stack suffix:
## eq_exp AmpAmp and_exp
## LR(1) items:
and_exp -> eq_exp AmpAmp and_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace BarBar Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Val reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Type reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Theorem reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Then reduce production and_exp -> eq_exp AmpAmp and_exp
-- On SemiSemi reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Semi reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Rsquare reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Rparen reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Rcurly reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Open_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Module_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On MinusMinusGt reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Let_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Lemma reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Inst_default reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Inst reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Indreln reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Include_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On In reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Import_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On EqEqGt reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Eof reduce production and_exp -> eq_exp AmpAmp and_exp
-- On End reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Else reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Declare reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Comma reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Colon reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Class_ reduce production and_exp -> eq_exp AmpAmp and_exp
-- On BarGt reduce production and_exp -> eq_exp AmpAmp and_exp
-- On BarBrace reduce production and_exp -> eq_exp AmpAmp and_exp
-- On BarBar reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Bar reduce production and_exp -> eq_exp AmpAmp and_exp
-- On Assert reduce production and_exp -> eq_exp AmpAmp and_exp
-- On And reduce production and_exp -> eq_exp AmpAmp and_exp

State 392:
## Known stack suffix:
## and_right_atomic_exp
## LR(1) items:
or_right_atomic_exp -> and_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Val reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Type reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Theorem reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Then reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On SemiSemi reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Semi reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Rsquare reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Rparen reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Rcurly reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Open_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Module_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Let_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Lemma reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Inst_default reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Inst reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Indreln reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Include_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On In reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Import_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On EqEqGt reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Eof reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On End reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Else reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Declare reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Comma reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Colon reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Class_ reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On BarGt reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On BarBrace reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Bar reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On Assert reduce production or_right_atomic_exp -> and_right_atomic_exp
-- On And reduce production or_right_atomic_exp -> and_right_atomic_exp

State 393:
## Known stack suffix:
## and_exp
## LR(1) items:
or_exp -> and_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_exp -> and_exp . BarBar or_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_right_atomic_exp -> and_exp . BarBar or_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On BarBar shift to state 394
## Reductions:
-- On With reduce production or_exp -> and_exp
-- On Val reduce production or_exp -> and_exp
-- On Type reduce production or_exp -> and_exp
-- On Theorem reduce production or_exp -> and_exp
-- On Then reduce production or_exp -> and_exp
-- On SemiSemi reduce production or_exp -> and_exp
-- On Semi reduce production or_exp -> and_exp
-- On Rsquare reduce production or_exp -> and_exp
-- On Rparen reduce production or_exp -> and_exp
-- On Rcurly reduce production or_exp -> and_exp
-- On Open_ reduce production or_exp -> and_exp
-- On Module_ reduce production or_exp -> and_exp
-- On MinusMinusGt reduce production or_exp -> and_exp
-- On Let_ reduce production or_exp -> and_exp
-- On Lemma reduce production or_exp -> and_exp
-- On Inst_default reduce production or_exp -> and_exp
-- On Inst reduce production or_exp -> and_exp
-- On Indreln reduce production or_exp -> and_exp
-- On Include_ reduce production or_exp -> and_exp
-- On In reduce production or_exp -> and_exp
-- On Import_ reduce production or_exp -> and_exp
-- On EqEqGt reduce production or_exp -> and_exp
-- On Eof reduce production or_exp -> and_exp
-- On End reduce production or_exp -> and_exp
-- On Else reduce production or_exp -> and_exp
-- On Declare reduce production or_exp -> and_exp
-- On Comma reduce production or_exp -> and_exp
-- On Colon reduce production or_exp -> and_exp
-- On Class_ reduce production or_exp -> and_exp
-- On BarGt reduce production or_exp -> and_exp
-- On BarBrace reduce production or_exp -> and_exp
-- On Bar reduce production or_exp -> and_exp
-- On Assert reduce production or_exp -> and_exp
-- On And reduce production or_exp -> and_exp

State 394:
## Known stack suffix:
## and_exp BarBar
## LR(1) items:
or_exp -> and_exp BarBar . or_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
or_right_atomic_exp -> and_exp BarBar . or_right_atomic_exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 395
-- On or_exp shift to state 396
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 395:
## Known stack suffix:
## and_exp BarBar or_right_atomic_exp
## LR(1) items:
or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Val reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Type reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Theorem reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Then reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On SemiSemi reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Semi reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Rsquare reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Rparen reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Rcurly reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Open_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Module_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Let_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Lemma reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Inst_default reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Inst reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Indreln reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Include_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On In reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Import_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On EqEqGt reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Eof reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On End reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Else reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Declare reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Comma reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Colon reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Class_ reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On BarGt reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On BarBrace reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Bar reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On Assert reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp
-- On And reduce production or_right_atomic_exp -> and_exp BarBar or_right_atomic_exp

State 396:
## Known stack suffix:
## and_exp BarBar or_exp
## LR(1) items:
or_exp -> and_exp BarBar or_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ MinusMinusGt Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production or_exp -> and_exp BarBar or_exp
-- On Val reduce production or_exp -> and_exp BarBar or_exp
-- On Type reduce production or_exp -> and_exp BarBar or_exp
-- On Theorem reduce production or_exp -> and_exp BarBar or_exp
-- On Then reduce production or_exp -> and_exp BarBar or_exp
-- On SemiSemi reduce production or_exp -> and_exp BarBar or_exp
-- On Semi reduce production or_exp -> and_exp BarBar or_exp
-- On Rsquare reduce production or_exp -> and_exp BarBar or_exp
-- On Rparen reduce production or_exp -> and_exp BarBar or_exp
-- On Rcurly reduce production or_exp -> and_exp BarBar or_exp
-- On Open_ reduce production or_exp -> and_exp BarBar or_exp
-- On Module_ reduce production or_exp -> and_exp BarBar or_exp
-- On MinusMinusGt reduce production or_exp -> and_exp BarBar or_exp
-- On Let_ reduce production or_exp -> and_exp BarBar or_exp
-- On Lemma reduce production or_exp -> and_exp BarBar or_exp
-- On Inst_default reduce production or_exp -> and_exp BarBar or_exp
-- On Inst reduce production or_exp -> and_exp BarBar or_exp
-- On Indreln reduce production or_exp -> and_exp BarBar or_exp
-- On Include_ reduce production or_exp -> and_exp BarBar or_exp
-- On In reduce production or_exp -> and_exp BarBar or_exp
-- On Import_ reduce production or_exp -> and_exp BarBar or_exp
-- On EqEqGt reduce production or_exp -> and_exp BarBar or_exp
-- On Eof reduce production or_exp -> and_exp BarBar or_exp
-- On End reduce production or_exp -> and_exp BarBar or_exp
-- On Else reduce production or_exp -> and_exp BarBar or_exp
-- On Declare reduce production or_exp -> and_exp BarBar or_exp
-- On Comma reduce production or_exp -> and_exp BarBar or_exp
-- On Colon reduce production or_exp -> and_exp BarBar or_exp
-- On Class_ reduce production or_exp -> and_exp BarBar or_exp
-- On BarGt reduce production or_exp -> and_exp BarBar or_exp
-- On BarBrace reduce production or_exp -> and_exp BarBar or_exp
-- On Bar reduce production or_exp -> and_exp BarBar or_exp
-- On Assert reduce production or_exp -> and_exp BarBar or_exp
-- On And reduce production or_exp -> and_exp BarBar or_exp

State 397:
## Known stack suffix:
## imp_right_atomic_exp
## LR(1) items:
exp -> imp_right_atomic_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production exp -> imp_right_atomic_exp
-- On Val reduce production exp -> imp_right_atomic_exp
-- On Type reduce production exp -> imp_right_atomic_exp
-- On Theorem reduce production exp -> imp_right_atomic_exp
-- On Then reduce production exp -> imp_right_atomic_exp
-- On SemiSemi reduce production exp -> imp_right_atomic_exp
-- On Semi reduce production exp -> imp_right_atomic_exp
-- On Rsquare reduce production exp -> imp_right_atomic_exp
-- On Rparen reduce production exp -> imp_right_atomic_exp
-- On Rcurly reduce production exp -> imp_right_atomic_exp
-- On Open_ reduce production exp -> imp_right_atomic_exp
-- On Module_ reduce production exp -> imp_right_atomic_exp
-- On Let_ reduce production exp -> imp_right_atomic_exp
-- On Lemma reduce production exp -> imp_right_atomic_exp
-- On Inst_default reduce production exp -> imp_right_atomic_exp
-- On Inst reduce production exp -> imp_right_atomic_exp
-- On Indreln reduce production exp -> imp_right_atomic_exp
-- On Include_ reduce production exp -> imp_right_atomic_exp
-- On In reduce production exp -> imp_right_atomic_exp
-- On Import_ reduce production exp -> imp_right_atomic_exp
-- On EqEqGt reduce production exp -> imp_right_atomic_exp
-- On Eof reduce production exp -> imp_right_atomic_exp
-- On End reduce production exp -> imp_right_atomic_exp
-- On Else reduce production exp -> imp_right_atomic_exp
-- On Declare reduce production exp -> imp_right_atomic_exp
-- On Comma reduce production exp -> imp_right_atomic_exp
-- On Colon reduce production exp -> imp_right_atomic_exp
-- On Class_ reduce production exp -> imp_right_atomic_exp
-- On BarGt reduce production exp -> imp_right_atomic_exp
-- On BarBrace reduce production exp -> imp_right_atomic_exp
-- On Bar reduce production exp -> imp_right_atomic_exp
-- On Assert reduce production exp -> imp_right_atomic_exp
-- On And reduce production exp -> imp_right_atomic_exp

State 398:
## Known stack suffix:
## imp_exp
## LR(1) items:
exp -> imp_exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production exp -> imp_exp
-- On Val reduce production exp -> imp_exp
-- On Type reduce production exp -> imp_exp
-- On Theorem reduce production exp -> imp_exp
-- On Then reduce production exp -> imp_exp
-- On SemiSemi reduce production exp -> imp_exp
-- On Semi reduce production exp -> imp_exp
-- On Rsquare reduce production exp -> imp_exp
-- On Rparen reduce production exp -> imp_exp
-- On Rcurly reduce production exp -> imp_exp
-- On Open_ reduce production exp -> imp_exp
-- On Module_ reduce production exp -> imp_exp
-- On Let_ reduce production exp -> imp_exp
-- On Lemma reduce production exp -> imp_exp
-- On Inst_default reduce production exp -> imp_exp
-- On Inst reduce production exp -> imp_exp
-- On Indreln reduce production exp -> imp_exp
-- On Include_ reduce production exp -> imp_exp
-- On In reduce production exp -> imp_exp
-- On Import_ reduce production exp -> imp_exp
-- On EqEqGt reduce production exp -> imp_exp
-- On Eof reduce production exp -> imp_exp
-- On End reduce production exp -> imp_exp
-- On Else reduce production exp -> imp_exp
-- On Declare reduce production exp -> imp_exp
-- On Comma reduce production exp -> imp_exp
-- On Colon reduce production exp -> imp_exp
-- On Class_ reduce production exp -> imp_exp
-- On BarGt reduce production exp -> imp_exp
-- On BarBrace reduce production exp -> imp_exp
-- On Bar reduce production exp -> imp_exp
-- On Assert reduce production exp -> imp_exp
-- On And reduce production exp -> imp_exp

State 399:
## Known stack suffix:
## Begin_ exp
## LR(1) items:
atomic_exp -> Begin_ exp . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## Begin_ exp End
## LR(1) items:
atomic_exp -> Begin_ exp End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Begin_ exp End
-- On With reduce production atomic_exp -> Begin_ exp End
-- On Val reduce production atomic_exp -> Begin_ exp End
-- On Type reduce production atomic_exp -> Begin_ exp End
-- On True reduce production atomic_exp -> Begin_ exp End
-- On Theorem reduce production atomic_exp -> Begin_ exp End
-- On Then reduce production atomic_exp -> Begin_ exp End
-- On String reduce production atomic_exp -> Begin_ exp End
-- On StarstarX reduce production atomic_exp -> Begin_ exp End
-- On StarX reduce production atomic_exp -> Begin_ exp End
-- On Star reduce production atomic_exp -> Begin_ exp End
-- On SemiSemi reduce production atomic_exp -> Begin_ exp End
-- On Semi reduce production atomic_exp -> Begin_ exp End
-- On Rsquare reduce production atomic_exp -> Begin_ exp End
-- On Rparen reduce production atomic_exp -> Begin_ exp End
-- On Rcurly reduce production atomic_exp -> Begin_ exp End
-- On PlusX reduce production atomic_exp -> Begin_ exp End
-- On Plus reduce production atomic_exp -> Begin_ exp End
-- On Open_ reduce production atomic_exp -> Begin_ exp End
-- On OctNum reduce production atomic_exp -> Begin_ exp End
-- On Nvar reduce production atomic_exp -> Begin_ exp End
-- On Num reduce production atomic_exp -> Begin_ exp End
-- On Module_ reduce production atomic_exp -> Begin_ exp End
-- On MinusMinusGt reduce production atomic_exp -> Begin_ exp End
-- On Match reduce production atomic_exp -> Begin_ exp End
-- On MEM reduce production atomic_exp -> Begin_ exp End
-- On LtBar reduce production atomic_exp -> Begin_ exp End
-- On Lsquare reduce production atomic_exp -> Begin_ exp End
-- On Lparen reduce production atomic_exp -> Begin_ exp End
-- On Let_ reduce production atomic_exp -> Begin_ exp End
-- On Lemma reduce production atomic_exp -> Begin_ exp End
-- On Lcurly reduce production atomic_exp -> Begin_ exp End
-- On Inst_default reduce production atomic_exp -> Begin_ exp End
-- On Inst reduce production atomic_exp -> Begin_ exp End
-- On Indreln reduce production atomic_exp -> Begin_ exp End
-- On Include_ reduce production atomic_exp -> Begin_ exp End
-- On In reduce production atomic_exp -> Begin_ exp End
-- On Import_ reduce production atomic_exp -> Begin_ exp End
-- On IN reduce production atomic_exp -> Begin_ exp End
-- On HexNum reduce production atomic_exp -> Begin_ exp End
-- On Hex reduce production atomic_exp -> Begin_ exp End
-- On HashZero reduce production atomic_exp -> Begin_ exp End
-- On HashOne reduce production atomic_exp -> Begin_ exp End
-- On GtEqX reduce production atomic_exp -> Begin_ exp End
-- On GtEq reduce production atomic_exp -> Begin_ exp End
-- On Function_ reduce production atomic_exp -> Begin_ exp End
-- On False reduce production atomic_exp -> Begin_ exp End
-- On EqualX reduce production atomic_exp -> Begin_ exp End
-- On EqEqGt reduce production atomic_exp -> Begin_ exp End
-- On Eq reduce production atomic_exp -> Begin_ exp End
-- On Eof reduce production atomic_exp -> Begin_ exp End
-- On End reduce production atomic_exp -> Begin_ exp End
-- On Else reduce production atomic_exp -> Begin_ exp End
-- On DotBrace reduce production atomic_exp -> Begin_ exp End
-- On Dot reduce production atomic_exp -> Begin_ exp End
-- On Do reduce production atomic_exp -> Begin_ exp End
-- On Declare reduce production atomic_exp -> Begin_ exp End
-- On Comma reduce production atomic_exp -> Begin_ exp End
-- On ColonColon reduce production atomic_exp -> Begin_ exp End
-- On Colon reduce production atomic_exp -> Begin_ exp End
-- On Class_ reduce production atomic_exp -> Begin_ exp End
-- On Char reduce production atomic_exp -> Begin_ exp End
-- On BraceBar reduce production atomic_exp -> Begin_ exp End
-- On BinNum reduce production atomic_exp -> Begin_ exp End
-- On Bin reduce production atomic_exp -> Begin_ exp End
-- On Begin_ reduce production atomic_exp -> Begin_ exp End
-- On BarGt reduce production atomic_exp -> Begin_ exp End
-- On BarBrace reduce production atomic_exp -> Begin_ exp End
-- On BarBar reduce production atomic_exp -> Begin_ exp End
-- On Bar reduce production atomic_exp -> Begin_ exp End
-- On BacktickString reduce production atomic_exp -> Begin_ exp End
-- On AtX reduce production atomic_exp -> Begin_ exp End
-- On At reduce production atomic_exp -> Begin_ exp End
-- On Assert reduce production atomic_exp -> Begin_ exp End
-- On And reduce production atomic_exp -> Begin_ exp End
-- On AmpAmp reduce production atomic_exp -> Begin_ exp End

State 401:
## Known stack suffix:
## semi_exps_help
## LR(1) items:
semi_exps -> semi_exps_help . [ Rsquare Rcurly BarBrace ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_exps -> semi_exps_help
-- On Rcurly reduce production semi_exps -> semi_exps_help
-- On BarBrace reduce production semi_exps -> semi_exps_help

State 402:
## Known stack suffix:
## BraceBar semi_exps
## LR(1) items:
atomic_exp -> BraceBar semi_exps . BarBrace [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarBrace shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## BraceBar semi_exps BarBrace
## LR(1) items:
atomic_exp -> BraceBar semi_exps BarBrace . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On With reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Val reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Type reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On True reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Theorem reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Then reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On String reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On StarstarX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On StarX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Star reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On SemiSemi reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Semi reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Rsquare reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Rparen reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Rcurly reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On PlusX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Plus reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Open_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On OctNum reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Nvar reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Num reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Module_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On MinusMinusGt reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Match reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On MEM reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On LtBar reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Lsquare reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Lparen reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Let_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Lemma reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Lcurly reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Inst_default reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Inst reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Indreln reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Include_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On In reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Import_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On IN reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On HexNum reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Hex reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On HashZero reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On HashOne reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On GtEqX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On GtEq reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Function_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On False reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On EqualX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On EqEqGt reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Eq reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Eof reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On End reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Else reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On DotBrace reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Dot reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Do reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Declare reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Comma reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On ColonColon reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Colon reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Class_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Char reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BraceBar reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BinNum reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Bin reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Begin_ reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BarGt reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BarBrace reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BarBar reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Bar reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On BacktickString reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On AtX reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On At reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On Assert reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On And reduce production atomic_exp -> BraceBar semi_exps BarBrace
-- On AmpAmp reduce production atomic_exp -> BraceBar semi_exps BarBrace

State 404:
## Known stack suffix:
## exp
## LR(1) items:
semi_exps_help -> exp . [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp . Semi [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp . Semi semi_exps_help [ Rsquare Rcurly BarBrace ]
## Transitions:
-- On Semi shift to state 405
## Reductions:
-- On Rsquare reduce production semi_exps_help -> exp
-- On Rcurly reduce production semi_exps_help -> exp
-- On BarBrace reduce production semi_exps_help -> exp

State 405:
## Known stack suffix:
## exp Semi
## LR(1) items:
semi_exps_help -> exp Semi . [ Rsquare Rcurly BarBrace ]
semi_exps_help -> exp Semi . semi_exps_help [ Rsquare Rcurly BarBrace ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On semi_exps_help shift to state 406
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 404
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Rsquare reduce production semi_exps_help -> exp Semi
-- On Rcurly reduce production semi_exps_help -> exp Semi
-- On BarBrace reduce production semi_exps_help -> exp Semi

State 406:
## Known stack suffix:
## exp Semi semi_exps_help
## LR(1) items:
semi_exps_help -> exp Semi semi_exps_help . [ Rsquare Rcurly BarBrace ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_exps_help -> exp Semi semi_exps_help
-- On Rcurly reduce production semi_exps_help -> exp Semi semi_exps_help
-- On BarBrace reduce production semi_exps_help -> exp Semi semi_exps_help

State 407:
## Known stack suffix:
## pat LeftArrow exp
## LR(1) items:
do_exps -> pat LeftArrow exp . Semi do_exps [ In ]
## Transitions:
-- On Semi shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## pat LeftArrow exp Semi
## LR(1) items:
do_exps -> pat LeftArrow exp Semi . do_exps [ In ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 290
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On do_exps shift to state 409
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:
-- On In reduce production do_exps ->

State 409:
## Known stack suffix:
## pat LeftArrow exp Semi do_exps
## LR(1) items:
do_exps -> pat LeftArrow exp Semi do_exps . [ In ]
## Transitions:
## Reductions:
-- On In reduce production do_exps -> pat LeftArrow exp Semi do_exps

State 410:
## Known stack suffix:
## Do id do_exps
## LR(1) items:
atomic_exp -> Do id do_exps . In exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On In shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## Do id do_exps In
## LR(1) items:
atomic_exp -> Do id do_exps In . exp End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 412
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 412:
## Known stack suffix:
## Do id do_exps In exp
## LR(1) items:
atomic_exp -> Do id do_exps In exp . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## Do id do_exps In exp End
## LR(1) items:
atomic_exp -> Do id do_exps In exp End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Do id do_exps In exp End
-- On With reduce production atomic_exp -> Do id do_exps In exp End
-- On Val reduce production atomic_exp -> Do id do_exps In exp End
-- On Type reduce production atomic_exp -> Do id do_exps In exp End
-- On True reduce production atomic_exp -> Do id do_exps In exp End
-- On Theorem reduce production atomic_exp -> Do id do_exps In exp End
-- On Then reduce production atomic_exp -> Do id do_exps In exp End
-- On String reduce production atomic_exp -> Do id do_exps In exp End
-- On StarstarX reduce production atomic_exp -> Do id do_exps In exp End
-- On StarX reduce production atomic_exp -> Do id do_exps In exp End
-- On Star reduce production atomic_exp -> Do id do_exps In exp End
-- On SemiSemi reduce production atomic_exp -> Do id do_exps In exp End
-- On Semi reduce production atomic_exp -> Do id do_exps In exp End
-- On Rsquare reduce production atomic_exp -> Do id do_exps In exp End
-- On Rparen reduce production atomic_exp -> Do id do_exps In exp End
-- On Rcurly reduce production atomic_exp -> Do id do_exps In exp End
-- On PlusX reduce production atomic_exp -> Do id do_exps In exp End
-- On Plus reduce production atomic_exp -> Do id do_exps In exp End
-- On Open_ reduce production atomic_exp -> Do id do_exps In exp End
-- On OctNum reduce production atomic_exp -> Do id do_exps In exp End
-- On Nvar reduce production atomic_exp -> Do id do_exps In exp End
-- On Num reduce production atomic_exp -> Do id do_exps In exp End
-- On Module_ reduce production atomic_exp -> Do id do_exps In exp End
-- On MinusMinusGt reduce production atomic_exp -> Do id do_exps In exp End
-- On Match reduce production atomic_exp -> Do id do_exps In exp End
-- On MEM reduce production atomic_exp -> Do id do_exps In exp End
-- On LtBar reduce production atomic_exp -> Do id do_exps In exp End
-- On Lsquare reduce production atomic_exp -> Do id do_exps In exp End
-- On Lparen reduce production atomic_exp -> Do id do_exps In exp End
-- On Let_ reduce production atomic_exp -> Do id do_exps In exp End
-- On Lemma reduce production atomic_exp -> Do id do_exps In exp End
-- On Lcurly reduce production atomic_exp -> Do id do_exps In exp End
-- On Inst_default reduce production atomic_exp -> Do id do_exps In exp End
-- On Inst reduce production atomic_exp -> Do id do_exps In exp End
-- On Indreln reduce production atomic_exp -> Do id do_exps In exp End
-- On Include_ reduce production atomic_exp -> Do id do_exps In exp End
-- On In reduce production atomic_exp -> Do id do_exps In exp End
-- On Import_ reduce production atomic_exp -> Do id do_exps In exp End
-- On IN reduce production atomic_exp -> Do id do_exps In exp End
-- On HexNum reduce production atomic_exp -> Do id do_exps In exp End
-- On Hex reduce production atomic_exp -> Do id do_exps In exp End
-- On HashZero reduce production atomic_exp -> Do id do_exps In exp End
-- On HashOne reduce production atomic_exp -> Do id do_exps In exp End
-- On GtEqX reduce production atomic_exp -> Do id do_exps In exp End
-- On GtEq reduce production atomic_exp -> Do id do_exps In exp End
-- On Function_ reduce production atomic_exp -> Do id do_exps In exp End
-- On False reduce production atomic_exp -> Do id do_exps In exp End
-- On EqualX reduce production atomic_exp -> Do id do_exps In exp End
-- On EqEqGt reduce production atomic_exp -> Do id do_exps In exp End
-- On Eq reduce production atomic_exp -> Do id do_exps In exp End
-- On Eof reduce production atomic_exp -> Do id do_exps In exp End
-- On End reduce production atomic_exp -> Do id do_exps In exp End
-- On Else reduce production atomic_exp -> Do id do_exps In exp End
-- On DotBrace reduce production atomic_exp -> Do id do_exps In exp End
-- On Dot reduce production atomic_exp -> Do id do_exps In exp End
-- On Do reduce production atomic_exp -> Do id do_exps In exp End
-- On Declare reduce production atomic_exp -> Do id do_exps In exp End
-- On Comma reduce production atomic_exp -> Do id do_exps In exp End
-- On ColonColon reduce production atomic_exp -> Do id do_exps In exp End
-- On Colon reduce production atomic_exp -> Do id do_exps In exp End
-- On Class_ reduce production atomic_exp -> Do id do_exps In exp End
-- On Char reduce production atomic_exp -> Do id do_exps In exp End
-- On BraceBar reduce production atomic_exp -> Do id do_exps In exp End
-- On BinNum reduce production atomic_exp -> Do id do_exps In exp End
-- On Bin reduce production atomic_exp -> Do id do_exps In exp End
-- On Begin_ reduce production atomic_exp -> Do id do_exps In exp End
-- On BarGt reduce production atomic_exp -> Do id do_exps In exp End
-- On BarBrace reduce production atomic_exp -> Do id do_exps In exp End
-- On BarBar reduce production atomic_exp -> Do id do_exps In exp End
-- On Bar reduce production atomic_exp -> Do id do_exps In exp End
-- On BacktickString reduce production atomic_exp -> Do id do_exps In exp End
-- On AtX reduce production atomic_exp -> Do id do_exps In exp End
-- On At reduce production atomic_exp -> Do id do_exps In exp End
-- On Assert reduce production atomic_exp -> Do id do_exps In exp End
-- On And reduce production atomic_exp -> Do id do_exps In exp End
-- On AmpAmp reduce production atomic_exp -> Do id do_exps In exp End

State 414:
## Known stack suffix:
## Exists quant_bindings Dot exp
## LR(1) items:
right_atomic_exp -> Exists quant_bindings Dot exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Val reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Type reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Theorem reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Then reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On SemiSemi reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Semi reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Rsquare reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Rparen reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Rcurly reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Open_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Module_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Let_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Lemma reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Inst_default reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Inst reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Indreln reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Include_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On In reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Import_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On EqEqGt reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Eof reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On End reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Else reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Declare reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Comma reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Colon reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Class_ reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On BarGt reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On BarBrace reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Bar reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On Assert reduce production right_atomic_exp -> Exists quant_bindings Dot exp
-- On And reduce production right_atomic_exp -> Exists quant_bindings Dot exp

State 415:
## Known stack suffix:
## Lparen pat MEM exp
## LR(1) items:
quant_bindings -> Lparen pat MEM exp . Rparen [ Dot Bar ]
quant_bindings -> Lparen pat MEM exp . Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On Rparen shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## Lparen pat MEM exp Rparen
## LR(1) items:
quant_bindings -> Lparen pat MEM exp Rparen . [ Dot Bar ]
quant_bindings -> Lparen pat MEM exp Rparen . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 417
## Reductions:
-- On Dot reduce production quant_bindings -> Lparen pat MEM exp Rparen
-- On Bar reduce production quant_bindings -> Lparen pat MEM exp Rparen

State 417:
## Known stack suffix:
## Lparen pat MEM exp Rparen quant_bindings
## LR(1) items:
quant_bindings -> Lparen pat MEM exp Rparen quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot reduce production quant_bindings -> Lparen pat MEM exp Rparen quant_bindings
-- On Bar reduce production quant_bindings -> Lparen pat MEM exp Rparen quant_bindings

State 418:
## Known stack suffix:
## Lparen pat IN
## LR(1) items:
quant_bindings -> Lparen pat IN . exp Rparen [ Dot Bar ]
quant_bindings -> Lparen pat IN . exp Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 419
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 419:
## Known stack suffix:
## Lparen pat IN exp
## LR(1) items:
quant_bindings -> Lparen pat IN exp . Rparen [ Dot Bar ]
quant_bindings -> Lparen pat IN exp . Rparen quant_bindings [ Dot Bar ]
## Transitions:
-- On Rparen shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## Lparen pat IN exp Rparen
## LR(1) items:
quant_bindings -> Lparen pat IN exp Rparen . [ Dot Bar ]
quant_bindings -> Lparen pat IN exp Rparen . quant_bindings [ Dot Bar ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 421
## Reductions:
-- On Dot reduce production quant_bindings -> Lparen pat IN exp Rparen
-- On Bar reduce production quant_bindings -> Lparen pat IN exp Rparen

State 421:
## Known stack suffix:
## Lparen pat IN exp Rparen quant_bindings
## LR(1) items:
quant_bindings -> Lparen pat IN exp Rparen quant_bindings . [ Dot Bar ]
## Transitions:
## Reductions:
-- On Dot reduce production quant_bindings -> Lparen pat IN exp Rparen quant_bindings
-- On Bar reduce production quant_bindings -> Lparen pat IN exp Rparen quant_bindings

State 422:
## Known stack suffix:
## Forall quant_bindings
## LR(1) items:
right_atomic_exp -> Forall quant_bindings . Dot exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Dot shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## Forall quant_bindings Dot
## LR(1) items:
right_atomic_exp -> Forall quant_bindings Dot . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 424
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 424:
## Known stack suffix:
## Forall quant_bindings Dot exp
## LR(1) items:
right_atomic_exp -> Forall quant_bindings Dot exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Val reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Type reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Theorem reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Then reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On SemiSemi reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Semi reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Rsquare reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Rparen reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Rcurly reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Open_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Module_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Let_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Lemma reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Inst_default reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Inst reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Indreln reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Include_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On In reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Import_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On EqEqGt reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Eof reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On End reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Else reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Declare reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Comma reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Colon reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Class_ reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On BarGt reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On BarBrace reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Bar reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On Assert reduce production right_atomic_exp -> Forall quant_bindings Dot exp
-- On And reduce production right_atomic_exp -> Forall quant_bindings Dot exp

State 425:
## Known stack suffix:
## atomic_pats1 Arrow exp
## LR(1) items:
patsexp -> atomic_pats1 Arrow exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production patsexp -> atomic_pats1 Arrow exp
-- On Val reduce production patsexp -> atomic_pats1 Arrow exp
-- On Type reduce production patsexp -> atomic_pats1 Arrow exp
-- On Theorem reduce production patsexp -> atomic_pats1 Arrow exp
-- On Then reduce production patsexp -> atomic_pats1 Arrow exp
-- On SemiSemi reduce production patsexp -> atomic_pats1 Arrow exp
-- On Semi reduce production patsexp -> atomic_pats1 Arrow exp
-- On Rsquare reduce production patsexp -> atomic_pats1 Arrow exp
-- On Rparen reduce production patsexp -> atomic_pats1 Arrow exp
-- On Rcurly reduce production patsexp -> atomic_pats1 Arrow exp
-- On Open_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On Module_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On Let_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On Lemma reduce production patsexp -> atomic_pats1 Arrow exp
-- On Inst_default reduce production patsexp -> atomic_pats1 Arrow exp
-- On Inst reduce production patsexp -> atomic_pats1 Arrow exp
-- On Indreln reduce production patsexp -> atomic_pats1 Arrow exp
-- On Include_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On In reduce production patsexp -> atomic_pats1 Arrow exp
-- On Import_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On EqEqGt reduce production patsexp -> atomic_pats1 Arrow exp
-- On Eof reduce production patsexp -> atomic_pats1 Arrow exp
-- On End reduce production patsexp -> atomic_pats1 Arrow exp
-- On Else reduce production patsexp -> atomic_pats1 Arrow exp
-- On Declare reduce production patsexp -> atomic_pats1 Arrow exp
-- On Comma reduce production patsexp -> atomic_pats1 Arrow exp
-- On Colon reduce production patsexp -> atomic_pats1 Arrow exp
-- On Class_ reduce production patsexp -> atomic_pats1 Arrow exp
-- On BarGt reduce production patsexp -> atomic_pats1 Arrow exp
-- On BarBrace reduce production patsexp -> atomic_pats1 Arrow exp
-- On Bar reduce production patsexp -> atomic_pats1 Arrow exp
-- On Assert reduce production patsexp -> atomic_pats1 Arrow exp
-- On And reduce production patsexp -> atomic_pats1 Arrow exp

State 426:
## Known stack suffix:
## atomic_pat
## LR(1) items:
atomic_pats1 -> atomic_pat . [ Eq Colon Arrow ]
atomic_pats1 -> atomic_pat . atomic_pats1 [ Eq Colon Arrow ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 211
-- On atomic_pats1 shift to state 427
-- On atomic_pat shift to state 426
## Reductions:
-- On Eq reduce production atomic_pats1 -> atomic_pat
-- On Colon reduce production atomic_pats1 -> atomic_pat
-- On Arrow reduce production atomic_pats1 -> atomic_pat

State 427:
## Known stack suffix:
## atomic_pat atomic_pats1
## LR(1) items:
atomic_pats1 -> atomic_pat atomic_pats1 . [ Eq Colon Arrow ]
## Transitions:
## Reductions:
-- On Eq reduce production atomic_pats1 -> atomic_pat atomic_pats1
-- On Colon reduce production atomic_pats1 -> atomic_pat atomic_pats1
-- On Arrow reduce production atomic_pats1 -> atomic_pat atomic_pats1

State 428:
## Known stack suffix:
## pat Arrow exp
## LR(1) items:
patexps -> pat Arrow exp . [ End ]
patexps -> pat Arrow exp . Bar patexps [ End ]
## Transitions:
-- On Bar shift to state 429
## Reductions:
-- On End reduce production patexps -> pat Arrow exp

State 429:
## Known stack suffix:
## pat Arrow exp Bar
## LR(1) items:
patexps -> pat Arrow exp Bar . patexps [ End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 430
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 430:
## Known stack suffix:
## pat Arrow exp Bar patexps
## LR(1) items:
patexps -> pat Arrow exp Bar patexps . [ End ]
## Transitions:
## Reductions:
-- On End reduce production patexps -> pat Arrow exp Bar patexps

State 431:
## Known stack suffix:
## Function_ patexps
## LR(1) items:
atomic_exp -> Function_ patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## Function_ patexps End
## LR(1) items:
atomic_exp -> Function_ patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Function_ patexps End
-- On With reduce production atomic_exp -> Function_ patexps End
-- On Val reduce production atomic_exp -> Function_ patexps End
-- On Type reduce production atomic_exp -> Function_ patexps End
-- On True reduce production atomic_exp -> Function_ patexps End
-- On Theorem reduce production atomic_exp -> Function_ patexps End
-- On Then reduce production atomic_exp -> Function_ patexps End
-- On String reduce production atomic_exp -> Function_ patexps End
-- On StarstarX reduce production atomic_exp -> Function_ patexps End
-- On StarX reduce production atomic_exp -> Function_ patexps End
-- On Star reduce production atomic_exp -> Function_ patexps End
-- On SemiSemi reduce production atomic_exp -> Function_ patexps End
-- On Semi reduce production atomic_exp -> Function_ patexps End
-- On Rsquare reduce production atomic_exp -> Function_ patexps End
-- On Rparen reduce production atomic_exp -> Function_ patexps End
-- On Rcurly reduce production atomic_exp -> Function_ patexps End
-- On PlusX reduce production atomic_exp -> Function_ patexps End
-- On Plus reduce production atomic_exp -> Function_ patexps End
-- On Open_ reduce production atomic_exp -> Function_ patexps End
-- On OctNum reduce production atomic_exp -> Function_ patexps End
-- On Nvar reduce production atomic_exp -> Function_ patexps End
-- On Num reduce production atomic_exp -> Function_ patexps End
-- On Module_ reduce production atomic_exp -> Function_ patexps End
-- On MinusMinusGt reduce production atomic_exp -> Function_ patexps End
-- On Match reduce production atomic_exp -> Function_ patexps End
-- On MEM reduce production atomic_exp -> Function_ patexps End
-- On LtBar reduce production atomic_exp -> Function_ patexps End
-- On Lsquare reduce production atomic_exp -> Function_ patexps End
-- On Lparen reduce production atomic_exp -> Function_ patexps End
-- On Let_ reduce production atomic_exp -> Function_ patexps End
-- On Lemma reduce production atomic_exp -> Function_ patexps End
-- On Lcurly reduce production atomic_exp -> Function_ patexps End
-- On Inst_default reduce production atomic_exp -> Function_ patexps End
-- On Inst reduce production atomic_exp -> Function_ patexps End
-- On Indreln reduce production atomic_exp -> Function_ patexps End
-- On Include_ reduce production atomic_exp -> Function_ patexps End
-- On In reduce production atomic_exp -> Function_ patexps End
-- On Import_ reduce production atomic_exp -> Function_ patexps End
-- On IN reduce production atomic_exp -> Function_ patexps End
-- On HexNum reduce production atomic_exp -> Function_ patexps End
-- On Hex reduce production atomic_exp -> Function_ patexps End
-- On HashZero reduce production atomic_exp -> Function_ patexps End
-- On HashOne reduce production atomic_exp -> Function_ patexps End
-- On GtEqX reduce production atomic_exp -> Function_ patexps End
-- On GtEq reduce production atomic_exp -> Function_ patexps End
-- On Function_ reduce production atomic_exp -> Function_ patexps End
-- On False reduce production atomic_exp -> Function_ patexps End
-- On EqualX reduce production atomic_exp -> Function_ patexps End
-- On EqEqGt reduce production atomic_exp -> Function_ patexps End
-- On Eq reduce production atomic_exp -> Function_ patexps End
-- On Eof reduce production atomic_exp -> Function_ patexps End
-- On End reduce production atomic_exp -> Function_ patexps End
-- On Else reduce production atomic_exp -> Function_ patexps End
-- On DotBrace reduce production atomic_exp -> Function_ patexps End
-- On Dot reduce production atomic_exp -> Function_ patexps End
-- On Do reduce production atomic_exp -> Function_ patexps End
-- On Declare reduce production atomic_exp -> Function_ patexps End
-- On Comma reduce production atomic_exp -> Function_ patexps End
-- On ColonColon reduce production atomic_exp -> Function_ patexps End
-- On Colon reduce production atomic_exp -> Function_ patexps End
-- On Class_ reduce production atomic_exp -> Function_ patexps End
-- On Char reduce production atomic_exp -> Function_ patexps End
-- On BraceBar reduce production atomic_exp -> Function_ patexps End
-- On BinNum reduce production atomic_exp -> Function_ patexps End
-- On Bin reduce production atomic_exp -> Function_ patexps End
-- On Begin_ reduce production atomic_exp -> Function_ patexps End
-- On BarGt reduce production atomic_exp -> Function_ patexps End
-- On BarBrace reduce production atomic_exp -> Function_ patexps End
-- On BarBar reduce production atomic_exp -> Function_ patexps End
-- On Bar reduce production atomic_exp -> Function_ patexps End
-- On BacktickString reduce production atomic_exp -> Function_ patexps End
-- On AtX reduce production atomic_exp -> Function_ patexps End
-- On At reduce production atomic_exp -> Function_ patexps End
-- On Assert reduce production atomic_exp -> Function_ patexps End
-- On And reduce production atomic_exp -> Function_ patexps End
-- On AmpAmp reduce production atomic_exp -> Function_ patexps End

State 433:
## Known stack suffix:
## If_ exp
## LR(1) items:
right_atomic_exp -> If_ exp . Then exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Then shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## If_ exp Then
## LR(1) items:
right_atomic_exp -> If_ exp Then . exp Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 435
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 435:
## Known stack suffix:
## If_ exp Then exp
## LR(1) items:
right_atomic_exp -> If_ exp Then exp . Else exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On Else shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## If_ exp Then exp Else
## LR(1) items:
right_atomic_exp -> If_ exp Then exp Else . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 437
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 437:
## Known stack suffix:
## If_ exp Then exp Else exp
## LR(1) items:
right_atomic_exp -> If_ exp Then exp Else exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Val reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Type reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Theorem reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Then reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On SemiSemi reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Semi reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Rsquare reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Rparen reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Rcurly reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Open_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Module_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Let_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Lemma reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Inst_default reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Inst reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Indreln reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Include_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On In reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Import_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On EqEqGt reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Eof reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On End reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Else reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Declare reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Comma reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Colon reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Class_ reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On BarGt reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On BarBrace reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Bar reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On Assert reduce production right_atomic_exp -> If_ exp Then exp Else exp
-- On And reduce production right_atomic_exp -> If_ exp Then exp Else exp

State 438:
## Known stack suffix:
## Lcurly semi_exps
## LR(1) items:
atomic_exp -> Lcurly semi_exps . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## Lcurly semi_exps Rcurly
## LR(1) items:
atomic_exp -> Lcurly semi_exps Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On With reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Val reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Type reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On True reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Theorem reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Then reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On String reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On StarstarX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On StarX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Star reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On SemiSemi reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Semi reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Rsquare reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Rparen reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Rcurly reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On PlusX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Plus reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Open_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On OctNum reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Nvar reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Num reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Module_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On MinusMinusGt reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Match reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On MEM reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On LtBar reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Lsquare reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Lparen reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Let_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Lemma reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Lcurly reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Inst_default reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Inst reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Indreln reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Include_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On In reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Import_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On IN reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On HexNum reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Hex reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On HashZero reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On HashOne reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On GtEqX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On GtEq reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Function_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On False reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On EqualX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On EqEqGt reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Eq reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Eof reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On End reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Else reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On DotBrace reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Dot reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Do reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Declare reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Comma reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On ColonColon reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Colon reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Class_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Char reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BraceBar reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BinNum reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Bin reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Begin_ reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BarGt reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BarBrace reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BarBar reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Bar reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On BacktickString reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On AtX reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On At reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On Assert reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On And reduce production atomic_exp -> Lcurly semi_exps Rcurly
-- On AmpAmp reduce production atomic_exp -> Lcurly semi_exps Rcurly

State 440:
## Known stack suffix:
## Lcurly exp
## LR(1) items:
atomic_exp -> Lcurly exp . Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly exp . Bar Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
semi_exps_help -> exp . [ Rcurly ]
semi_exps_help -> exp . Semi [ Rcurly ]
semi_exps_help -> exp . Semi semi_exps_help [ Rcurly ]
## Transitions:
-- On Semi shift to state 405
-- On Bar shift to state 441
## Reductions:
-- On Rcurly reduce production semi_exps_help -> exp

State 441:
## Known stack suffix:
## Lcurly exp Bar
## LR(1) items:
atomic_exp -> Lcurly exp Bar . exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lcurly exp Bar . Forall quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 442
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 447
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 442:
## Known stack suffix:
## Lcurly exp Bar Forall
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall . quant_bindings Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
right_atomic_exp -> Forall . quant_bindings Dot exp [ Rcurly ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings . Bar exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
right_atomic_exp -> Forall quant_bindings . Dot exp [ Rcurly ]
## Transitions:
-- On Dot shift to state 423
-- On Bar shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar . exp Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 445
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 445:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar exp
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
## LR(1) items:
atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On With reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Val reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Type reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On True reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Theorem reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Then reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On String reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On StarstarX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On StarX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Star reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On SemiSemi reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Semi reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Rsquare reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Rparen reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Rcurly reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On PlusX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Plus reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Open_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On OctNum reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Nvar reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Num reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Module_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On MinusMinusGt reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Match reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On MEM reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On LtBar reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Lsquare reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Lparen reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Let_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Lemma reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Lcurly reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Inst_default reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Inst reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Indreln reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Include_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On In reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Import_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On IN reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On HexNum reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Hex reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On HashZero reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On HashOne reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On GtEqX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On GtEq reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Function_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On False reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On EqualX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On EqEqGt reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Eq reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Eof reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On End reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Else reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On DotBrace reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Dot reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Do reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Declare reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Comma reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On ColonColon reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Colon reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Class_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Char reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BraceBar reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BinNum reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Bin reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Begin_ reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BarGt reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BarBrace reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BarBar reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Bar reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On BacktickString reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On AtX reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On At reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On Assert reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On And reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly
-- On AmpAmp reduce production atomic_exp -> Lcurly exp Bar Forall quant_bindings Bar exp Rcurly

State 447:
## Known stack suffix:
## Lcurly exp Bar exp
## LR(1) items:
atomic_exp -> Lcurly exp Bar exp . Rcurly [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rcurly shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## Lcurly exp Bar exp Rcurly
## LR(1) items:
atomic_exp -> Lcurly exp Bar exp Rcurly . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On With reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Val reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Type reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On True reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Theorem reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Then reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On String reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On StarstarX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On StarX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Star reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On SemiSemi reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Semi reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Rsquare reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Rparen reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Rcurly reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On PlusX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Plus reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Open_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On OctNum reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Nvar reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Num reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Module_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On MinusMinusGt reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Match reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On MEM reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On LtBar reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Lsquare reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Lparen reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Let_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Lemma reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Lcurly reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Inst_default reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Inst reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Indreln reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Include_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On In reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Import_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On IN reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On HexNum reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Hex reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On HashZero reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On HashOne reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On GtEqX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On GtEq reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Function_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On False reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On EqualX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On EqEqGt reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Eq reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Eof reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On End reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Else reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On DotBrace reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Dot reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Do reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Declare reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Comma reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On ColonColon reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Colon reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Class_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Char reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BraceBar reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BinNum reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Bin reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Begin_ reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BarGt reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BarBrace reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BarBar reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Bar reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On BacktickString reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On AtX reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On At reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On Assert reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On And reduce production atomic_exp -> Lcurly exp Bar exp Rcurly
-- On AmpAmp reduce production atomic_exp -> Lcurly exp Bar exp Rcurly

State 449:
## Known stack suffix:
## pat opt_typ_annot Eq exp
## LR(1) items:
letbind -> pat opt_typ_annot Eq exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production letbind -> pat opt_typ_annot Eq exp
-- On Type reduce production letbind -> pat opt_typ_annot Eq exp
-- On Theorem reduce production letbind -> pat opt_typ_annot Eq exp
-- On SemiSemi reduce production letbind -> pat opt_typ_annot Eq exp
-- On Open_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On Module_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On Let_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On Lemma reduce production letbind -> pat opt_typ_annot Eq exp
-- On Inst_default reduce production letbind -> pat opt_typ_annot Eq exp
-- On Inst reduce production letbind -> pat opt_typ_annot Eq exp
-- On Indreln reduce production letbind -> pat opt_typ_annot Eq exp
-- On Include_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On In reduce production letbind -> pat opt_typ_annot Eq exp
-- On Import_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On Eof reduce production letbind -> pat opt_typ_annot Eq exp
-- On End reduce production letbind -> pat opt_typ_annot Eq exp
-- On Declare reduce production letbind -> pat opt_typ_annot Eq exp
-- On Class_ reduce production letbind -> pat opt_typ_annot Eq exp
-- On Assert reduce production letbind -> pat opt_typ_annot Eq exp

State 450:
## Known stack suffix:
## Let_ letbind
## LR(1) items:
right_atomic_exp -> Let_ letbind . In exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On In shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## Let_ letbind In
## LR(1) items:
right_atomic_exp -> Let_ letbind In . exp [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 452
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 452:
## Known stack suffix:
## Let_ letbind In exp
## LR(1) items:
right_atomic_exp -> Let_ letbind In exp . [ With Val Type Theorem Then SemiSemi Semi Rsquare Rparen Rcurly Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ In Import_ EqEqGt Eof End Else Declare Comma Colon Class_ BarGt BarBrace Bar Assert And ]
## Transitions:
## Reductions:
-- On With reduce production right_atomic_exp -> Let_ letbind In exp
-- On Val reduce production right_atomic_exp -> Let_ letbind In exp
-- On Type reduce production right_atomic_exp -> Let_ letbind In exp
-- On Theorem reduce production right_atomic_exp -> Let_ letbind In exp
-- On Then reduce production right_atomic_exp -> Let_ letbind In exp
-- On SemiSemi reduce production right_atomic_exp -> Let_ letbind In exp
-- On Semi reduce production right_atomic_exp -> Let_ letbind In exp
-- On Rsquare reduce production right_atomic_exp -> Let_ letbind In exp
-- On Rparen reduce production right_atomic_exp -> Let_ letbind In exp
-- On Rcurly reduce production right_atomic_exp -> Let_ letbind In exp
-- On Open_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On Module_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On Let_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On Lemma reduce production right_atomic_exp -> Let_ letbind In exp
-- On Inst_default reduce production right_atomic_exp -> Let_ letbind In exp
-- On Inst reduce production right_atomic_exp -> Let_ letbind In exp
-- On Indreln reduce production right_atomic_exp -> Let_ letbind In exp
-- On Include_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On In reduce production right_atomic_exp -> Let_ letbind In exp
-- On Import_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On EqEqGt reduce production right_atomic_exp -> Let_ letbind In exp
-- On Eof reduce production right_atomic_exp -> Let_ letbind In exp
-- On End reduce production right_atomic_exp -> Let_ letbind In exp
-- On Else reduce production right_atomic_exp -> Let_ letbind In exp
-- On Declare reduce production right_atomic_exp -> Let_ letbind In exp
-- On Comma reduce production right_atomic_exp -> Let_ letbind In exp
-- On Colon reduce production right_atomic_exp -> Let_ letbind In exp
-- On Class_ reduce production right_atomic_exp -> Let_ letbind In exp
-- On BarGt reduce production right_atomic_exp -> Let_ letbind In exp
-- On BarBrace reduce production right_atomic_exp -> Let_ letbind In exp
-- On Bar reduce production right_atomic_exp -> Let_ letbind In exp
-- On Assert reduce production right_atomic_exp -> Let_ letbind In exp
-- On And reduce production right_atomic_exp -> Let_ letbind In exp

State 453:
## Known stack suffix:
## Lparen exp
## LR(1) items:
atomic_exp -> Lparen exp . Colon typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Lparen exp . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
comma_exps -> exp . Comma exp [ Rparen ]
comma_exps -> exp . Comma comma_exps [ Rparen ]
## Transitions:
-- On Rparen shift to state 454
-- On Comma shift to state 455
-- On Colon shift to state 458
## Reductions:

State 454:
## Known stack suffix:
## Lparen exp Rparen
## LR(1) items:
atomic_exp -> Lparen exp Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lparen exp Rparen
-- On With reduce production atomic_exp -> Lparen exp Rparen
-- On Val reduce production atomic_exp -> Lparen exp Rparen
-- On Type reduce production atomic_exp -> Lparen exp Rparen
-- On True reduce production atomic_exp -> Lparen exp Rparen
-- On Theorem reduce production atomic_exp -> Lparen exp Rparen
-- On Then reduce production atomic_exp -> Lparen exp Rparen
-- On String reduce production atomic_exp -> Lparen exp Rparen
-- On StarstarX reduce production atomic_exp -> Lparen exp Rparen
-- On StarX reduce production atomic_exp -> Lparen exp Rparen
-- On Star reduce production atomic_exp -> Lparen exp Rparen
-- On SemiSemi reduce production atomic_exp -> Lparen exp Rparen
-- On Semi reduce production atomic_exp -> Lparen exp Rparen
-- On Rsquare reduce production atomic_exp -> Lparen exp Rparen
-- On Rparen reduce production atomic_exp -> Lparen exp Rparen
-- On Rcurly reduce production atomic_exp -> Lparen exp Rparen
-- On PlusX reduce production atomic_exp -> Lparen exp Rparen
-- On Plus reduce production atomic_exp -> Lparen exp Rparen
-- On Open_ reduce production atomic_exp -> Lparen exp Rparen
-- On OctNum reduce production atomic_exp -> Lparen exp Rparen
-- On Nvar reduce production atomic_exp -> Lparen exp Rparen
-- On Num reduce production atomic_exp -> Lparen exp Rparen
-- On Module_ reduce production atomic_exp -> Lparen exp Rparen
-- On MinusMinusGt reduce production atomic_exp -> Lparen exp Rparen
-- On Match reduce production atomic_exp -> Lparen exp Rparen
-- On MEM reduce production atomic_exp -> Lparen exp Rparen
-- On LtBar reduce production atomic_exp -> Lparen exp Rparen
-- On Lsquare reduce production atomic_exp -> Lparen exp Rparen
-- On Lparen reduce production atomic_exp -> Lparen exp Rparen
-- On Let_ reduce production atomic_exp -> Lparen exp Rparen
-- On Lemma reduce production atomic_exp -> Lparen exp Rparen
-- On Lcurly reduce production atomic_exp -> Lparen exp Rparen
-- On Inst_default reduce production atomic_exp -> Lparen exp Rparen
-- On Inst reduce production atomic_exp -> Lparen exp Rparen
-- On Indreln reduce production atomic_exp -> Lparen exp Rparen
-- On Include_ reduce production atomic_exp -> Lparen exp Rparen
-- On In reduce production atomic_exp -> Lparen exp Rparen
-- On Import_ reduce production atomic_exp -> Lparen exp Rparen
-- On IN reduce production atomic_exp -> Lparen exp Rparen
-- On HexNum reduce production atomic_exp -> Lparen exp Rparen
-- On Hex reduce production atomic_exp -> Lparen exp Rparen
-- On HashZero reduce production atomic_exp -> Lparen exp Rparen
-- On HashOne reduce production atomic_exp -> Lparen exp Rparen
-- On GtEqX reduce production atomic_exp -> Lparen exp Rparen
-- On GtEq reduce production atomic_exp -> Lparen exp Rparen
-- On Function_ reduce production atomic_exp -> Lparen exp Rparen
-- On False reduce production atomic_exp -> Lparen exp Rparen
-- On EqualX reduce production atomic_exp -> Lparen exp Rparen
-- On EqEqGt reduce production atomic_exp -> Lparen exp Rparen
-- On Eq reduce production atomic_exp -> Lparen exp Rparen
-- On Eof reduce production atomic_exp -> Lparen exp Rparen
-- On End reduce production atomic_exp -> Lparen exp Rparen
-- On Else reduce production atomic_exp -> Lparen exp Rparen
-- On DotBrace reduce production atomic_exp -> Lparen exp Rparen
-- On Dot reduce production atomic_exp -> Lparen exp Rparen
-- On Do reduce production atomic_exp -> Lparen exp Rparen
-- On Declare reduce production atomic_exp -> Lparen exp Rparen
-- On Comma reduce production atomic_exp -> Lparen exp Rparen
-- On ColonColon reduce production atomic_exp -> Lparen exp Rparen
-- On Colon reduce production atomic_exp -> Lparen exp Rparen
-- On Class_ reduce production atomic_exp -> Lparen exp Rparen
-- On Char reduce production atomic_exp -> Lparen exp Rparen
-- On BraceBar reduce production atomic_exp -> Lparen exp Rparen
-- On BinNum reduce production atomic_exp -> Lparen exp Rparen
-- On Bin reduce production atomic_exp -> Lparen exp Rparen
-- On Begin_ reduce production atomic_exp -> Lparen exp Rparen
-- On BarGt reduce production atomic_exp -> Lparen exp Rparen
-- On BarBrace reduce production atomic_exp -> Lparen exp Rparen
-- On BarBar reduce production atomic_exp -> Lparen exp Rparen
-- On Bar reduce production atomic_exp -> Lparen exp Rparen
-- On BacktickString reduce production atomic_exp -> Lparen exp Rparen
-- On AtX reduce production atomic_exp -> Lparen exp Rparen
-- On At reduce production atomic_exp -> Lparen exp Rparen
-- On Assert reduce production atomic_exp -> Lparen exp Rparen
-- On And reduce production atomic_exp -> Lparen exp Rparen
-- On AmpAmp reduce production atomic_exp -> Lparen exp Rparen

State 455:
## Known stack suffix:
## exp Comma
## LR(1) items:
comma_exps -> exp Comma . exp [ Rparen ]
comma_exps -> exp Comma . comma_exps [ Rparen ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 456
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On comma_exps shift to state 457
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 456:
## Known stack suffix:
## exp Comma exp
## LR(1) items:
comma_exps -> exp . Comma exp [ Rparen ]
comma_exps -> exp Comma exp . [ Rparen ]
comma_exps -> exp . Comma comma_exps [ Rparen ]
## Transitions:
-- On Comma shift to state 455
## Reductions:
-- On Rparen reduce production comma_exps -> exp Comma exp

State 457:
## Known stack suffix:
## exp Comma comma_exps
## LR(1) items:
comma_exps -> exp Comma comma_exps . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen reduce production comma_exps -> exp Comma comma_exps

State 458:
## Known stack suffix:
## Lparen exp Colon
## LR(1) items:
atomic_exp -> Lparen exp Colon . typ Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 459
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 459:
## Known stack suffix:
## Lparen exp Colon typ
## LR(1) items:
atomic_exp -> Lparen exp Colon typ . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rparen shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## Lparen exp Colon typ Rparen
## LR(1) items:
atomic_exp -> Lparen exp Colon typ Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On With reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Val reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Type reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On True reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Theorem reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Then reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On String reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On StarstarX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On StarX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Star reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On SemiSemi reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Semi reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Rsquare reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Rparen reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Rcurly reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On PlusX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Plus reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Open_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On OctNum reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Nvar reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Num reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Module_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On MinusMinusGt reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Match reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On MEM reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On LtBar reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Lsquare reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Lparen reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Let_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Lemma reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Lcurly reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Inst_default reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Inst reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Indreln reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Include_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On In reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Import_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On IN reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On HexNum reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Hex reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On HashZero reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On HashOne reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On GtEqX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On GtEq reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Function_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On False reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On EqualX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On EqEqGt reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Eq reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Eof reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On End reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Else reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On DotBrace reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Dot reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Do reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Declare reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Comma reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On ColonColon reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Colon reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Class_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Char reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BraceBar reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BinNum reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Bin reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Begin_ reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BarGt reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BarBrace reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BarBar reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Bar reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On BacktickString reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On AtX reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On At reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On Assert reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On And reduce production atomic_exp -> Lparen exp Colon typ Rparen
-- On AmpAmp reduce production atomic_exp -> Lparen exp Colon typ Rparen

State 461:
## Known stack suffix:
## Lparen comma_exps
## LR(1) items:
atomic_exp -> Lparen comma_exps . Rparen [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rparen shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## Lparen comma_exps Rparen
## LR(1) items:
atomic_exp -> Lparen comma_exps Rparen . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lparen comma_exps Rparen
-- On With reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Val reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Type reduce production atomic_exp -> Lparen comma_exps Rparen
-- On True reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Theorem reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Then reduce production atomic_exp -> Lparen comma_exps Rparen
-- On String reduce production atomic_exp -> Lparen comma_exps Rparen
-- On StarstarX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On StarX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Star reduce production atomic_exp -> Lparen comma_exps Rparen
-- On SemiSemi reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Semi reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Rsquare reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Rparen reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Rcurly reduce production atomic_exp -> Lparen comma_exps Rparen
-- On PlusX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Plus reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Open_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On OctNum reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Nvar reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Num reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Module_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On MinusMinusGt reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Match reduce production atomic_exp -> Lparen comma_exps Rparen
-- On MEM reduce production atomic_exp -> Lparen comma_exps Rparen
-- On LtBar reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Lsquare reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Lparen reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Let_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Lemma reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Lcurly reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Inst_default reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Inst reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Indreln reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Include_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On In reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Import_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On IN reduce production atomic_exp -> Lparen comma_exps Rparen
-- On HexNum reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Hex reduce production atomic_exp -> Lparen comma_exps Rparen
-- On HashZero reduce production atomic_exp -> Lparen comma_exps Rparen
-- On HashOne reduce production atomic_exp -> Lparen comma_exps Rparen
-- On GtEqX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On GtEq reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Function_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On False reduce production atomic_exp -> Lparen comma_exps Rparen
-- On EqualX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On EqEqGt reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Eq reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Eof reduce production atomic_exp -> Lparen comma_exps Rparen
-- On End reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Else reduce production atomic_exp -> Lparen comma_exps Rparen
-- On DotBrace reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Dot reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Do reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Declare reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Comma reduce production atomic_exp -> Lparen comma_exps Rparen
-- On ColonColon reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Colon reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Class_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Char reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BraceBar reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BinNum reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Bin reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Begin_ reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BarGt reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BarBrace reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BarBar reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Bar reduce production atomic_exp -> Lparen comma_exps Rparen
-- On BacktickString reduce production atomic_exp -> Lparen comma_exps Rparen
-- On AtX reduce production atomic_exp -> Lparen comma_exps Rparen
-- On At reduce production atomic_exp -> Lparen comma_exps Rparen
-- On Assert reduce production atomic_exp -> Lparen comma_exps Rparen
-- On And reduce production atomic_exp -> Lparen comma_exps Rparen
-- On AmpAmp reduce production atomic_exp -> Lparen comma_exps Rparen

State 463:
## Known stack suffix:
## Lsquare semi_exps
## LR(1) items:
atomic_exp -> Lsquare semi_exps . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## Lsquare semi_exps Rsquare
## LR(1) items:
atomic_exp -> Lsquare semi_exps Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On With reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Val reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Type reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On True reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Theorem reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Then reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On String reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On StarstarX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On StarX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Star reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On SemiSemi reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Semi reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Rsquare reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Rparen reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Rcurly reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On PlusX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Plus reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Open_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On OctNum reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Nvar reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Num reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Module_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On MinusMinusGt reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Match reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On MEM reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On LtBar reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Lsquare reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Lparen reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Let_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Lemma reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Lcurly reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Inst_default reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Inst reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Indreln reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Include_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On In reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Import_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On IN reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On HexNum reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Hex reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On HashZero reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On HashOne reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On GtEqX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On GtEq reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Function_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On False reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On EqualX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On EqEqGt reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Eq reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Eof reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On End reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Else reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On DotBrace reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Dot reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Do reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Declare reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Comma reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On ColonColon reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Colon reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Class_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Char reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BraceBar reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BinNum reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Bin reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Begin_ reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BarGt reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BarBrace reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BarBar reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Bar reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On BacktickString reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On AtX reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On At reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On Assert reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On And reduce production atomic_exp -> Lsquare semi_exps Rsquare
-- On AmpAmp reduce production atomic_exp -> Lsquare semi_exps Rsquare

State 465:
## Known stack suffix:
## Lsquare exp
## LR(1) items:
atomic_exp -> Lsquare exp . Bar Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
semi_exps_help -> exp . [ Rsquare ]
semi_exps_help -> exp . Semi [ Rsquare ]
semi_exps_help -> exp . Semi semi_exps_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 405
-- On Bar shift to state 466
## Reductions:
-- On Rsquare reduce production semi_exps_help -> exp

State 466:
## Known stack suffix:
## Lsquare exp Bar
## LR(1) items:
atomic_exp -> Lsquare exp Bar . Forall quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Forall shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## Lsquare exp Bar Forall
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall . quant_bindings Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 280
-- On x shift to state 284
-- On quant_bindings shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings . Bar exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Bar shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar . exp Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 470
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 470:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar exp
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp . Rsquare [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On Rsquare shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
## LR(1) items:
atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On With reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Val reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Type reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On True reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Theorem reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Then reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On String reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On StarstarX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On StarX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Star reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On SemiSemi reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Semi reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Rsquare reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Rparen reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Rcurly reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On PlusX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Plus reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Open_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On OctNum reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Nvar reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Num reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Module_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On MinusMinusGt reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Match reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On MEM reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On LtBar reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Lsquare reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Lparen reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Let_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Lemma reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Lcurly reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Inst_default reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Inst reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Indreln reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Include_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On In reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Import_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On IN reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On HexNum reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Hex reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On HashZero reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On HashOne reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On GtEqX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On GtEq reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Function_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On False reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On EqualX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On EqEqGt reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Eq reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Eof reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On End reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Else reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On DotBrace reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Dot reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Do reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Declare reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Comma reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On ColonColon reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Colon reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Class_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Char reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BraceBar reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BinNum reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Bin reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Begin_ reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BarGt reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BarBrace reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BarBar reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Bar reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On BacktickString reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On AtX reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On At reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On Assert reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On And reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare
-- On AmpAmp reduce production atomic_exp -> Lsquare exp Bar Forall quant_bindings Bar exp Rsquare

State 472:
## Known stack suffix:
## id
## LR(1) items:
fexp -> id . Eq exp [ Semi BarGt ]
field_exp -> id . DotBrace nexp Rsquare [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
field_exp -> id . DotBrace nexp Dot Dot nexp Rsquare [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
field_exp -> id . [ X With True String StarstarX StarX Star PlusX Plus OctNum Nvar Num Match LtBar Lsquare Lparen Lcurly HexNum Hex HashZero HashOne Function_ False Do ColonColon Char BraceBar BinNum Bin Begin_ BacktickString AtX At ]
## Transitions:
-- On Eq shift to state 473
-- On DotBrace shift to state 305
## Reductions:
-- On X reduce production field_exp -> id
-- On With reduce production field_exp -> id
-- On True reduce production field_exp -> id
-- On String reduce production field_exp -> id
-- On StarstarX reduce production field_exp -> id
-- On StarX reduce production field_exp -> id
-- On Star reduce production field_exp -> id
-- On PlusX reduce production field_exp -> id
-- On Plus reduce production field_exp -> id
-- On OctNum reduce production field_exp -> id
-- On Nvar reduce production field_exp -> id
-- On Num reduce production field_exp -> id
-- On Match reduce production field_exp -> id
-- On LtBar reduce production field_exp -> id
-- On Lsquare reduce production field_exp -> id
-- On Lparen reduce production field_exp -> id
-- On Lcurly reduce production field_exp -> id
-- On HexNum reduce production field_exp -> id
-- On Hex reduce production field_exp -> id
-- On HashZero reduce production field_exp -> id
-- On HashOne reduce production field_exp -> id
-- On Function_ reduce production field_exp -> id
-- On False reduce production field_exp -> id
-- On Do reduce production field_exp -> id
-- On ColonColon reduce production field_exp -> id
-- On Char reduce production field_exp -> id
-- On BraceBar reduce production field_exp -> id
-- On BinNum reduce production field_exp -> id
-- On Bin reduce production field_exp -> id
-- On Begin_ reduce production field_exp -> id
-- On BacktickString reduce production field_exp -> id
-- On AtX reduce production field_exp -> id
-- On At reduce production field_exp -> id

State 473:
## Known stack suffix:
## id Eq
## LR(1) items:
fexp -> id Eq . exp [ Semi BarGt ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 474
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 474:
## Known stack suffix:
## id Eq exp
## LR(1) items:
fexp -> id Eq exp . [ Semi BarGt ]
## Transitions:
## Reductions:
-- On Semi reduce production fexp -> id Eq exp
-- On BarGt reduce production fexp -> id Eq exp

State 475:
## Known stack suffix:
## fexps_help
## LR(1) items:
fexps -> fexps_help . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt reduce production fexps -> fexps_help

State 476:
## Known stack suffix:
## LtBar fexps
## LR(1) items:
atomic_exp -> LtBar fexps . BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarGt shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## LtBar fexps BarGt
## LR(1) items:
atomic_exp -> LtBar fexps BarGt . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> LtBar fexps BarGt
-- On With reduce production atomic_exp -> LtBar fexps BarGt
-- On Val reduce production atomic_exp -> LtBar fexps BarGt
-- On Type reduce production atomic_exp -> LtBar fexps BarGt
-- On True reduce production atomic_exp -> LtBar fexps BarGt
-- On Theorem reduce production atomic_exp -> LtBar fexps BarGt
-- On Then reduce production atomic_exp -> LtBar fexps BarGt
-- On String reduce production atomic_exp -> LtBar fexps BarGt
-- On StarstarX reduce production atomic_exp -> LtBar fexps BarGt
-- On StarX reduce production atomic_exp -> LtBar fexps BarGt
-- On Star reduce production atomic_exp -> LtBar fexps BarGt
-- On SemiSemi reduce production atomic_exp -> LtBar fexps BarGt
-- On Semi reduce production atomic_exp -> LtBar fexps BarGt
-- On Rsquare reduce production atomic_exp -> LtBar fexps BarGt
-- On Rparen reduce production atomic_exp -> LtBar fexps BarGt
-- On Rcurly reduce production atomic_exp -> LtBar fexps BarGt
-- On PlusX reduce production atomic_exp -> LtBar fexps BarGt
-- On Plus reduce production atomic_exp -> LtBar fexps BarGt
-- On Open_ reduce production atomic_exp -> LtBar fexps BarGt
-- On OctNum reduce production atomic_exp -> LtBar fexps BarGt
-- On Nvar reduce production atomic_exp -> LtBar fexps BarGt
-- On Num reduce production atomic_exp -> LtBar fexps BarGt
-- On Module_ reduce production atomic_exp -> LtBar fexps BarGt
-- On MinusMinusGt reduce production atomic_exp -> LtBar fexps BarGt
-- On Match reduce production atomic_exp -> LtBar fexps BarGt
-- On MEM reduce production atomic_exp -> LtBar fexps BarGt
-- On LtBar reduce production atomic_exp -> LtBar fexps BarGt
-- On Lsquare reduce production atomic_exp -> LtBar fexps BarGt
-- On Lparen reduce production atomic_exp -> LtBar fexps BarGt
-- On Let_ reduce production atomic_exp -> LtBar fexps BarGt
-- On Lemma reduce production atomic_exp -> LtBar fexps BarGt
-- On Lcurly reduce production atomic_exp -> LtBar fexps BarGt
-- On Inst_default reduce production atomic_exp -> LtBar fexps BarGt
-- On Inst reduce production atomic_exp -> LtBar fexps BarGt
-- On Indreln reduce production atomic_exp -> LtBar fexps BarGt
-- On Include_ reduce production atomic_exp -> LtBar fexps BarGt
-- On In reduce production atomic_exp -> LtBar fexps BarGt
-- On Import_ reduce production atomic_exp -> LtBar fexps BarGt
-- On IN reduce production atomic_exp -> LtBar fexps BarGt
-- On HexNum reduce production atomic_exp -> LtBar fexps BarGt
-- On Hex reduce production atomic_exp -> LtBar fexps BarGt
-- On HashZero reduce production atomic_exp -> LtBar fexps BarGt
-- On HashOne reduce production atomic_exp -> LtBar fexps BarGt
-- On GtEqX reduce production atomic_exp -> LtBar fexps BarGt
-- On GtEq reduce production atomic_exp -> LtBar fexps BarGt
-- On Function_ reduce production atomic_exp -> LtBar fexps BarGt
-- On False reduce production atomic_exp -> LtBar fexps BarGt
-- On EqualX reduce production atomic_exp -> LtBar fexps BarGt
-- On EqEqGt reduce production atomic_exp -> LtBar fexps BarGt
-- On Eq reduce production atomic_exp -> LtBar fexps BarGt
-- On Eof reduce production atomic_exp -> LtBar fexps BarGt
-- On End reduce production atomic_exp -> LtBar fexps BarGt
-- On Else reduce production atomic_exp -> LtBar fexps BarGt
-- On DotBrace reduce production atomic_exp -> LtBar fexps BarGt
-- On Dot reduce production atomic_exp -> LtBar fexps BarGt
-- On Do reduce production atomic_exp -> LtBar fexps BarGt
-- On Declare reduce production atomic_exp -> LtBar fexps BarGt
-- On Comma reduce production atomic_exp -> LtBar fexps BarGt
-- On ColonColon reduce production atomic_exp -> LtBar fexps BarGt
-- On Colon reduce production atomic_exp -> LtBar fexps BarGt
-- On Class_ reduce production atomic_exp -> LtBar fexps BarGt
-- On Char reduce production atomic_exp -> LtBar fexps BarGt
-- On BraceBar reduce production atomic_exp -> LtBar fexps BarGt
-- On BinNum reduce production atomic_exp -> LtBar fexps BarGt
-- On Bin reduce production atomic_exp -> LtBar fexps BarGt
-- On Begin_ reduce production atomic_exp -> LtBar fexps BarGt
-- On BarGt reduce production atomic_exp -> LtBar fexps BarGt
-- On BarBrace reduce production atomic_exp -> LtBar fexps BarGt
-- On BarBar reduce production atomic_exp -> LtBar fexps BarGt
-- On Bar reduce production atomic_exp -> LtBar fexps BarGt
-- On BacktickString reduce production atomic_exp -> LtBar fexps BarGt
-- On AtX reduce production atomic_exp -> LtBar fexps BarGt
-- On At reduce production atomic_exp -> LtBar fexps BarGt
-- On Assert reduce production atomic_exp -> LtBar fexps BarGt
-- On And reduce production atomic_exp -> LtBar fexps BarGt
-- On AmpAmp reduce production atomic_exp -> LtBar fexps BarGt

State 478:
## Known stack suffix:
## fexp
## LR(1) items:
fexps_help -> fexp . [ BarGt ]
fexps_help -> fexp . Semi [ BarGt ]
fexps_help -> fexp . Semi fexps_help [ BarGt ]
## Transitions:
-- On Semi shift to state 479
## Reductions:
-- On BarGt reduce production fexps_help -> fexp

State 479:
## Known stack suffix:
## fexp Semi
## LR(1) items:
fexps_help -> fexp Semi . [ BarGt ]
fexps_help -> fexp Semi . fexps_help [ BarGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 480
-- On fexps_help shift to state 481
-- On fexp shift to state 478
## Reductions:
-- On BarGt reduce production fexps_help -> fexp Semi

State 480:
## Known stack suffix:
## id
## LR(1) items:
fexp -> id . Eq exp [ Semi BarGt ]
## Transitions:
-- On Eq shift to state 473
## Reductions:

State 481:
## Known stack suffix:
## fexp Semi fexps_help
## LR(1) items:
fexps_help -> fexp Semi fexps_help . [ BarGt ]
## Transitions:
## Reductions:
-- On BarGt reduce production fexps_help -> fexp Semi fexps_help

State 482:
## Known stack suffix:
## LtBar at_exp
## LR(1) items:
atomic_exp -> LtBar at_exp . With fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On With shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## LtBar at_exp With
## LR(1) items:
atomic_exp -> LtBar at_exp With . fexps BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 480
-- On fexps_help shift to state 475
-- On fexps shift to state 484
-- On fexp shift to state 478
## Reductions:

State 484:
## Known stack suffix:
## LtBar at_exp With fexps
## LR(1) items:
atomic_exp -> LtBar at_exp With fexps . BarGt [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On BarGt shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## LtBar at_exp With fexps BarGt
## LR(1) items:
atomic_exp -> LtBar at_exp With fexps BarGt . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On With reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Val reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Type reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On True reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Theorem reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Then reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On String reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On StarstarX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On StarX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Star reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On SemiSemi reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Semi reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Rsquare reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Rparen reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Rcurly reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On PlusX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Plus reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Open_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On OctNum reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Nvar reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Num reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Module_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On MinusMinusGt reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Match reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On MEM reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On LtBar reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Lsquare reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Lparen reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Let_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Lemma reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Lcurly reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Inst_default reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Inst reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Indreln reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Include_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On In reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Import_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On IN reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On HexNum reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Hex reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On HashZero reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On HashOne reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On GtEqX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On GtEq reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Function_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On False reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On EqualX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On EqEqGt reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Eq reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Eof reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On End reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Else reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On DotBrace reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Dot reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Do reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Declare reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Comma reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On ColonColon reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Colon reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Class_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Char reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BraceBar reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BinNum reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Bin reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Begin_ reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BarGt reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BarBrace reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BarBar reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Bar reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On BacktickString reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On AtX reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On At reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On Assert reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On And reduce production atomic_exp -> LtBar at_exp With fexps BarGt
-- On AmpAmp reduce production atomic_exp -> LtBar at_exp With fexps BarGt

State 486:
## Known stack suffix:
## Match exp
## LR(1) items:
atomic_exp -> Match exp . With patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match exp . With Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On With shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## Match exp With
## LR(1) items:
atomic_exp -> Match exp With . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
atomic_exp -> Match exp With . Bar patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Bar shift to state 488
-- On x shift to state 205
-- On patexps shift to state 491
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 488:
## Known stack suffix:
## Match exp With Bar
## LR(1) items:
atomic_exp -> Match exp With Bar . patexps End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On patexps shift to state 489
-- On pat shift to state 273
-- On lit shift to state 210
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 489:
## Known stack suffix:
## Match exp With Bar patexps
## LR(1) items:
atomic_exp -> Match exp With Bar patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## Match exp With Bar patexps End
## LR(1) items:
atomic_exp -> Match exp With Bar patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Match exp With Bar patexps End
-- On With reduce production atomic_exp -> Match exp With Bar patexps End
-- On Val reduce production atomic_exp -> Match exp With Bar patexps End
-- On Type reduce production atomic_exp -> Match exp With Bar patexps End
-- On True reduce production atomic_exp -> Match exp With Bar patexps End
-- On Theorem reduce production atomic_exp -> Match exp With Bar patexps End
-- On Then reduce production atomic_exp -> Match exp With Bar patexps End
-- On String reduce production atomic_exp -> Match exp With Bar patexps End
-- On StarstarX reduce production atomic_exp -> Match exp With Bar patexps End
-- On StarX reduce production atomic_exp -> Match exp With Bar patexps End
-- On Star reduce production atomic_exp -> Match exp With Bar patexps End
-- On SemiSemi reduce production atomic_exp -> Match exp With Bar patexps End
-- On Semi reduce production atomic_exp -> Match exp With Bar patexps End
-- On Rsquare reduce production atomic_exp -> Match exp With Bar patexps End
-- On Rparen reduce production atomic_exp -> Match exp With Bar patexps End
-- On Rcurly reduce production atomic_exp -> Match exp With Bar patexps End
-- On PlusX reduce production atomic_exp -> Match exp With Bar patexps End
-- On Plus reduce production atomic_exp -> Match exp With Bar patexps End
-- On Open_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On OctNum reduce production atomic_exp -> Match exp With Bar patexps End
-- On Nvar reduce production atomic_exp -> Match exp With Bar patexps End
-- On Num reduce production atomic_exp -> Match exp With Bar patexps End
-- On Module_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On MinusMinusGt reduce production atomic_exp -> Match exp With Bar patexps End
-- On Match reduce production atomic_exp -> Match exp With Bar patexps End
-- On MEM reduce production atomic_exp -> Match exp With Bar patexps End
-- On LtBar reduce production atomic_exp -> Match exp With Bar patexps End
-- On Lsquare reduce production atomic_exp -> Match exp With Bar patexps End
-- On Lparen reduce production atomic_exp -> Match exp With Bar patexps End
-- On Let_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On Lemma reduce production atomic_exp -> Match exp With Bar patexps End
-- On Lcurly reduce production atomic_exp -> Match exp With Bar patexps End
-- On Inst_default reduce production atomic_exp -> Match exp With Bar patexps End
-- On Inst reduce production atomic_exp -> Match exp With Bar patexps End
-- On Indreln reduce production atomic_exp -> Match exp With Bar patexps End
-- On Include_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On In reduce production atomic_exp -> Match exp With Bar patexps End
-- On Import_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On IN reduce production atomic_exp -> Match exp With Bar patexps End
-- On HexNum reduce production atomic_exp -> Match exp With Bar patexps End
-- On Hex reduce production atomic_exp -> Match exp With Bar patexps End
-- On HashZero reduce production atomic_exp -> Match exp With Bar patexps End
-- On HashOne reduce production atomic_exp -> Match exp With Bar patexps End
-- On GtEqX reduce production atomic_exp -> Match exp With Bar patexps End
-- On GtEq reduce production atomic_exp -> Match exp With Bar patexps End
-- On Function_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On False reduce production atomic_exp -> Match exp With Bar patexps End
-- On EqualX reduce production atomic_exp -> Match exp With Bar patexps End
-- On EqEqGt reduce production atomic_exp -> Match exp With Bar patexps End
-- On Eq reduce production atomic_exp -> Match exp With Bar patexps End
-- On Eof reduce production atomic_exp -> Match exp With Bar patexps End
-- On End reduce production atomic_exp -> Match exp With Bar patexps End
-- On Else reduce production atomic_exp -> Match exp With Bar patexps End
-- On DotBrace reduce production atomic_exp -> Match exp With Bar patexps End
-- On Dot reduce production atomic_exp -> Match exp With Bar patexps End
-- On Do reduce production atomic_exp -> Match exp With Bar patexps End
-- On Declare reduce production atomic_exp -> Match exp With Bar patexps End
-- On Comma reduce production atomic_exp -> Match exp With Bar patexps End
-- On ColonColon reduce production atomic_exp -> Match exp With Bar patexps End
-- On Colon reduce production atomic_exp -> Match exp With Bar patexps End
-- On Class_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On Char reduce production atomic_exp -> Match exp With Bar patexps End
-- On BraceBar reduce production atomic_exp -> Match exp With Bar patexps End
-- On BinNum reduce production atomic_exp -> Match exp With Bar patexps End
-- On Bin reduce production atomic_exp -> Match exp With Bar patexps End
-- On Begin_ reduce production atomic_exp -> Match exp With Bar patexps End
-- On BarGt reduce production atomic_exp -> Match exp With Bar patexps End
-- On BarBrace reduce production atomic_exp -> Match exp With Bar patexps End
-- On BarBar reduce production atomic_exp -> Match exp With Bar patexps End
-- On Bar reduce production atomic_exp -> Match exp With Bar patexps End
-- On BacktickString reduce production atomic_exp -> Match exp With Bar patexps End
-- On AtX reduce production atomic_exp -> Match exp With Bar patexps End
-- On At reduce production atomic_exp -> Match exp With Bar patexps End
-- On Assert reduce production atomic_exp -> Match exp With Bar patexps End
-- On And reduce production atomic_exp -> Match exp With Bar patexps End
-- On AmpAmp reduce production atomic_exp -> Match exp With Bar patexps End

State 491:
## Known stack suffix:
## Match exp With patexps
## LR(1) items:
atomic_exp -> Match exp With patexps . End [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
-- On End shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## Match exp With patexps End
## LR(1) items:
atomic_exp -> Match exp With patexps End . [ X With Val Type True Theorem Then String StarstarX StarX Star SemiSemi Semi Rsquare Rparen Rcurly PlusX Plus Open_ OctNum Nvar Num Module_ MinusMinusGt Match MEM LtBar Lsquare Lparen Let_ Lemma Lcurly Inst_default Inst Indreln Include_ In Import_ IN HexNum Hex HashZero HashOne GtEqX GtEq Function_ False EqualX EqEqGt Eq Eof End Else DotBrace Dot Do Declare Comma ColonColon Colon Class_ Char BraceBar BinNum Bin Begin_ BarGt BarBrace BarBar Bar BacktickString AtX At Assert And AmpAmp ]
## Transitions:
## Reductions:
-- On X reduce production atomic_exp -> Match exp With patexps End
-- On With reduce production atomic_exp -> Match exp With patexps End
-- On Val reduce production atomic_exp -> Match exp With patexps End
-- On Type reduce production atomic_exp -> Match exp With patexps End
-- On True reduce production atomic_exp -> Match exp With patexps End
-- On Theorem reduce production atomic_exp -> Match exp With patexps End
-- On Then reduce production atomic_exp -> Match exp With patexps End
-- On String reduce production atomic_exp -> Match exp With patexps End
-- On StarstarX reduce production atomic_exp -> Match exp With patexps End
-- On StarX reduce production atomic_exp -> Match exp With patexps End
-- On Star reduce production atomic_exp -> Match exp With patexps End
-- On SemiSemi reduce production atomic_exp -> Match exp With patexps End
-- On Semi reduce production atomic_exp -> Match exp With patexps End
-- On Rsquare reduce production atomic_exp -> Match exp With patexps End
-- On Rparen reduce production atomic_exp -> Match exp With patexps End
-- On Rcurly reduce production atomic_exp -> Match exp With patexps End
-- On PlusX reduce production atomic_exp -> Match exp With patexps End
-- On Plus reduce production atomic_exp -> Match exp With patexps End
-- On Open_ reduce production atomic_exp -> Match exp With patexps End
-- On OctNum reduce production atomic_exp -> Match exp With patexps End
-- On Nvar reduce production atomic_exp -> Match exp With patexps End
-- On Num reduce production atomic_exp -> Match exp With patexps End
-- On Module_ reduce production atomic_exp -> Match exp With patexps End
-- On MinusMinusGt reduce production atomic_exp -> Match exp With patexps End
-- On Match reduce production atomic_exp -> Match exp With patexps End
-- On MEM reduce production atomic_exp -> Match exp With patexps End
-- On LtBar reduce production atomic_exp -> Match exp With patexps End
-- On Lsquare reduce production atomic_exp -> Match exp With patexps End
-- On Lparen reduce production atomic_exp -> Match exp With patexps End
-- On Let_ reduce production atomic_exp -> Match exp With patexps End
-- On Lemma reduce production atomic_exp -> Match exp With patexps End
-- On Lcurly reduce production atomic_exp -> Match exp With patexps End
-- On Inst_default reduce production atomic_exp -> Match exp With patexps End
-- On Inst reduce production atomic_exp -> Match exp With patexps End
-- On Indreln reduce production atomic_exp -> Match exp With patexps End
-- On Include_ reduce production atomic_exp -> Match exp With patexps End
-- On In reduce production atomic_exp -> Match exp With patexps End
-- On Import_ reduce production atomic_exp -> Match exp With patexps End
-- On IN reduce production atomic_exp -> Match exp With patexps End
-- On HexNum reduce production atomic_exp -> Match exp With patexps End
-- On Hex reduce production atomic_exp -> Match exp With patexps End
-- On HashZero reduce production atomic_exp -> Match exp With patexps End
-- On HashOne reduce production atomic_exp -> Match exp With patexps End
-- On GtEqX reduce production atomic_exp -> Match exp With patexps End
-- On GtEq reduce production atomic_exp -> Match exp With patexps End
-- On Function_ reduce production atomic_exp -> Match exp With patexps End
-- On False reduce production atomic_exp -> Match exp With patexps End
-- On EqualX reduce production atomic_exp -> Match exp With patexps End
-- On EqEqGt reduce production atomic_exp -> Match exp With patexps End
-- On Eq reduce production atomic_exp -> Match exp With patexps End
-- On Eof reduce production atomic_exp -> Match exp With patexps End
-- On End reduce production atomic_exp -> Match exp With patexps End
-- On Else reduce production atomic_exp -> Match exp With patexps End
-- On DotBrace reduce production atomic_exp -> Match exp With patexps End
-- On Dot reduce production atomic_exp -> Match exp With patexps End
-- On Do reduce production atomic_exp -> Match exp With patexps End
-- On Declare reduce production atomic_exp -> Match exp With patexps End
-- On Comma reduce production atomic_exp -> Match exp With patexps End
-- On ColonColon reduce production atomic_exp -> Match exp With patexps End
-- On Colon reduce production atomic_exp -> Match exp With patexps End
-- On Class_ reduce production atomic_exp -> Match exp With patexps End
-- On Char reduce production atomic_exp -> Match exp With patexps End
-- On BraceBar reduce production atomic_exp -> Match exp With patexps End
-- On BinNum reduce production atomic_exp -> Match exp With patexps End
-- On Bin reduce production atomic_exp -> Match exp With patexps End
-- On Begin_ reduce production atomic_exp -> Match exp With patexps End
-- On BarGt reduce production atomic_exp -> Match exp With patexps End
-- On BarBrace reduce production atomic_exp -> Match exp With patexps End
-- On BarBar reduce production atomic_exp -> Match exp With patexps End
-- On Bar reduce production atomic_exp -> Match exp With patexps End
-- On BacktickString reduce production atomic_exp -> Match exp With patexps End
-- On AtX reduce production atomic_exp -> Match exp With patexps End
-- On At reduce production atomic_exp -> Match exp With patexps End
-- On Assert reduce production atomic_exp -> Match exp With patexps End
-- On And reduce production atomic_exp -> Match exp With patexps End
-- On AmpAmp reduce production atomic_exp -> Match exp With patexps End

State 493:
## Known stack suffix:
## x atomic_pats1 opt_typ_annot Eq exp
## LR(1) items:
funcl -> x atomic_pats1 opt_typ_annot Eq exp . [ And ]
funcls -> x atomic_pats1 opt_typ_annot Eq exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Type reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Theorem reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On SemiSemi reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Open_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Module_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Let_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Lemma reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Inst_default reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Inst reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Indreln reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Include_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Import_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Eof reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On End reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Declare reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Class_ reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On Assert reduce production funcls -> x atomic_pats1 opt_typ_annot Eq exp
-- On And reduce production funcl -> x atomic_pats1 opt_typ_annot Eq exp

State 494:
## Known stack suffix:
## Let_ Rec targets_opt funcls
## LR(1) items:
val_def -> Let_ Rec targets_opt funcls . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_def -> Let_ Rec targets_opt funcls
-- On Type reduce production val_def -> Let_ Rec targets_opt funcls
-- On Theorem reduce production val_def -> Let_ Rec targets_opt funcls
-- On SemiSemi reduce production val_def -> Let_ Rec targets_opt funcls
-- On Open_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Module_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Let_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Lemma reduce production val_def -> Let_ Rec targets_opt funcls
-- On Inst_default reduce production val_def -> Let_ Rec targets_opt funcls
-- On Inst reduce production val_def -> Let_ Rec targets_opt funcls
-- On Indreln reduce production val_def -> Let_ Rec targets_opt funcls
-- On Include_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Import_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Eof reduce production val_def -> Let_ Rec targets_opt funcls
-- On End reduce production val_def -> Let_ Rec targets_opt funcls
-- On Declare reduce production val_def -> Let_ Rec targets_opt funcls
-- On Class_ reduce production val_def -> Let_ Rec targets_opt funcls
-- On Assert reduce production val_def -> Let_ Rec targets_opt funcls

State 495:
## Known stack suffix:
## funcl
## LR(1) items:
funcls -> funcl . And funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## funcl And
## LR(1) items:
funcls -> funcl And . funcls [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 184
-- On funcls shift to state 497
-- On funcl shift to state 495
## Reductions:

State 497:
## Known stack suffix:
## funcl And funcls
## LR(1) items:
funcls -> funcl And funcls . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production funcls -> funcl And funcls
-- On Type reduce production funcls -> funcl And funcls
-- On Theorem reduce production funcls -> funcl And funcls
-- On SemiSemi reduce production funcls -> funcl And funcls
-- On Open_ reduce production funcls -> funcl And funcls
-- On Module_ reduce production funcls -> funcl And funcls
-- On Let_ reduce production funcls -> funcl And funcls
-- On Lemma reduce production funcls -> funcl And funcls
-- On Inst_default reduce production funcls -> funcl And funcls
-- On Inst reduce production funcls -> funcl And funcls
-- On Indreln reduce production funcls -> funcl And funcls
-- On Include_ reduce production funcls -> funcl And funcls
-- On Import_ reduce production funcls -> funcl And funcls
-- On Eof reduce production funcls -> funcl And funcls
-- On End reduce production funcls -> funcl And funcls
-- On Declare reduce production funcls -> funcl And funcls
-- On Class_ reduce production funcls -> funcl And funcls
-- On Assert reduce production funcls -> funcl And funcls

State 498:
## Known stack suffix:
## Let_ Lem_transform
## LR(1) items:
val_def -> Let_ Lem_transform . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 499
## Reductions:
-- On X reduce production targets_opt ->
-- On Under reduce production targets_opt ->
-- On True reduce production targets_opt ->
-- On String reduce production targets_opt ->
-- On OctNum reduce production targets_opt ->
-- On Num reduce production targets_opt ->
-- On LtBar reduce production targets_opt ->
-- On Lsquare reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->
-- On HexNum reduce production targets_opt ->
-- On Hex reduce production targets_opt ->
-- On HashZero reduce production targets_opt ->
-- On HashOne reduce production targets_opt ->
-- On False reduce production targets_opt ->
-- On Char reduce production targets_opt ->
-- On BraceBar reduce production targets_opt ->
-- On BinNum reduce production targets_opt ->
-- On Bin reduce production targets_opt ->

State 499:
## Known stack suffix:
## Let_ Lem_transform targets_opt
## LR(1) items:
val_def -> Let_ Lem_transform targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 500
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 500:
## Known stack suffix:
## Let_ Lem_transform targets_opt letbind
## LR(1) items:
val_def -> Let_ Lem_transform targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Type reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Theorem reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On SemiSemi reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Open_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Module_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Let_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Lemma reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Inst_default reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Inst reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Indreln reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Include_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Import_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Eof reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On End reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Declare reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Class_ reduce production val_def -> Let_ Lem_transform targets_opt letbind
-- On Assert reduce production val_def -> Let_ Lem_transform targets_opt letbind

State 501:
## Known stack suffix:
## Let_ Inline
## LR(1) items:
val_def -> Let_ Inline . targets_opt letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 502
## Reductions:
-- On X reduce production targets_opt ->
-- On Under reduce production targets_opt ->
-- On True reduce production targets_opt ->
-- On String reduce production targets_opt ->
-- On OctNum reduce production targets_opt ->
-- On Num reduce production targets_opt ->
-- On LtBar reduce production targets_opt ->
-- On Lsquare reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->
-- On HexNum reduce production targets_opt ->
-- On Hex reduce production targets_opt ->
-- On HashZero reduce production targets_opt ->
-- On HashOne reduce production targets_opt ->
-- On False reduce production targets_opt ->
-- On Char reduce production targets_opt ->
-- On BraceBar reduce production targets_opt ->
-- On BinNum reduce production targets_opt ->
-- On Bin reduce production targets_opt ->

State 502:
## Known stack suffix:
## Let_ Inline targets_opt
## LR(1) items:
val_def -> Let_ Inline targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 503
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 503:
## Known stack suffix:
## Let_ Inline targets_opt letbind
## LR(1) items:
val_def -> Let_ Inline targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_def -> Let_ Inline targets_opt letbind
-- On Type reduce production val_def -> Let_ Inline targets_opt letbind
-- On Theorem reduce production val_def -> Let_ Inline targets_opt letbind
-- On SemiSemi reduce production val_def -> Let_ Inline targets_opt letbind
-- On Open_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Module_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Let_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Lemma reduce production val_def -> Let_ Inline targets_opt letbind
-- On Inst_default reduce production val_def -> Let_ Inline targets_opt letbind
-- On Inst reduce production val_def -> Let_ Inline targets_opt letbind
-- On Indreln reduce production val_def -> Let_ Inline targets_opt letbind
-- On Include_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Import_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Eof reduce production val_def -> Let_ Inline targets_opt letbind
-- On End reduce production val_def -> Let_ Inline targets_opt letbind
-- On Declare reduce production val_def -> Let_ Inline targets_opt letbind
-- On Class_ reduce production val_def -> Let_ Inline targets_opt letbind
-- On Assert reduce production val_def -> Let_ Inline targets_opt letbind

State 504:
## Known stack suffix:
## Let_ targets_opt
## LR(1) items:
val_def -> Let_ targets_opt . letbind [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 185
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Num shift to state 189
-- On LtBar shift to state 190
-- On Lsquare shift to state 193
-- On Lparen shift to state 194
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On False shift to state 200
-- On Char shift to state 201
-- On BraceBar shift to state 202
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On x shift to state 205
-- On pat shift to state 264
-- On lit shift to state 210
-- On letbind shift to state 505
-- On id_help shift to state 59
-- On id shift to state 224
-- On atomic_pat shift to state 229
-- On app_pat shift to state 230
## Reductions:

State 505:
## Known stack suffix:
## Let_ targets_opt letbind
## LR(1) items:
val_def -> Let_ targets_opt letbind . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production val_def -> Let_ targets_opt letbind
-- On Type reduce production val_def -> Let_ targets_opt letbind
-- On Theorem reduce production val_def -> Let_ targets_opt letbind
-- On SemiSemi reduce production val_def -> Let_ targets_opt letbind
-- On Open_ reduce production val_def -> Let_ targets_opt letbind
-- On Module_ reduce production val_def -> Let_ targets_opt letbind
-- On Let_ reduce production val_def -> Let_ targets_opt letbind
-- On Lemma reduce production val_def -> Let_ targets_opt letbind
-- On Inst_default reduce production val_def -> Let_ targets_opt letbind
-- On Inst reduce production val_def -> Let_ targets_opt letbind
-- On Indreln reduce production val_def -> Let_ targets_opt letbind
-- On Include_ reduce production val_def -> Let_ targets_opt letbind
-- On Import_ reduce production val_def -> Let_ targets_opt letbind
-- On Eof reduce production val_def -> Let_ targets_opt letbind
-- On End reduce production val_def -> Let_ targets_opt letbind
-- On Declare reduce production val_def -> Let_ targets_opt letbind
-- On Class_ reduce production val_def -> Let_ targets_opt letbind
-- On Assert reduce production val_def -> Let_ targets_opt letbind

State 506:
## Known stack suffix:
## Lemma
## LR(1) items:
lemma_typ -> Lemma . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X reduce production lemma_typ -> Lemma
-- On NonExec reduce production lemma_typ -> Lemma
-- On NegLcurly reduce production lemma_typ -> Lemma
-- On Lparen reduce production lemma_typ -> Lemma
-- On Lcurly reduce production lemma_typ -> Lemma

State 507:
## Known stack suffix:
## Inst_default
## LR(1) items:
def -> Inst_default . instschm val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 508
-- On Forall shift to state 514
-- On instschm shift to state 532
## Reductions:

State 508:
## Known stack suffix:
## Lparen
## LR(1) items:
instschm -> Lparen . id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 509
## Reductions:

State 509:
## Known stack suffix:
## Lparen id
## LR(1) items:
instschm -> Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 512
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 510:
## Known stack suffix:
## typ
## LR(1) items:
insttyp -> typ . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen reduce production insttyp -> typ

State 511:
## Known stack suffix:
## nexp
## LR(1) items:
insttyp -> nexp . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen reduce production insttyp -> nexp

State 512:
## Known stack suffix:
## Lparen id insttyp
## LR(1) items:
instschm -> Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 513
## Reductions:

State 513:
## Known stack suffix:
## Lparen id insttyp Rparen
## LR(1) items:
instschm -> Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_ reduce production instschm -> Lparen id insttyp Rparen

State 514:
## Known stack suffix:
## Forall
## LR(1) items:
instschm -> Forall . tnvs Dot Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall . tnvs Dot cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 515
-- On tnvar shift to state 114
## Reductions:
-- On Dot reduce production tnvs ->

State 515:
## Known stack suffix:
## Forall tnvs
## LR(1) items:
instschm -> Forall tnvs . Dot Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall tnvs . Dot cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Dot shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## Forall tnvs Dot
## LR(1) items:
instschm -> Forall tnvs Dot . Lparen id insttyp Rparen [ Let_ ]
instschm -> Forall tnvs Dot . cs2 EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 517
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 521
-- On cs2 shift to state 523
-- On c2 shift to state 529
## Reductions:

State 517:
## Known stack suffix:
## Forall tnvs Dot Lparen
## LR(1) items:
instschm -> Forall tnvs Dot Lparen . id insttyp Rparen [ Let_ ]
x -> Lparen . Eq Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . IN Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . MEM Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . MinusMinusGt Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . AmpAmp Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . BarBar Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . ColonColon Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . Star Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . Plus Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . GtEq Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . PlusX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . StarX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . GtEqX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . EqualX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . StarstarX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . At Rparen [ X Under Tyvar Lparen Dot BacktickString ]
x -> Lparen . AtX Rparen [ X Under Tyvar Lparen Dot BacktickString ]
## Transitions:
-- On X shift to state 2
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 3
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 518
## Reductions:

State 518:
## Known stack suffix:
## Forall tnvs Dot Lparen id
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 519
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 519:
## Known stack suffix:
## Forall tnvs Dot Lparen id insttyp
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## Forall tnvs Dot Lparen id insttyp Rparen
## LR(1) items:
instschm -> Forall tnvs Dot Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_ reduce production instschm -> Forall tnvs Dot Lparen id insttyp Rparen

State 521:
## Known stack suffix:
## id
## LR(1) items:
c2 -> id . typ [ EqGt Comma ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 522
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 522:
## Known stack suffix:
## id typ
## LR(1) items:
c2 -> id typ . [ EqGt Comma ]
## Transitions:
## Reductions:
-- On EqGt reduce production c2 -> id typ
-- On Comma reduce production c2 -> id typ

State 523:
## Known stack suffix:
## Forall tnvs Dot cs2
## LR(1) items:
instschm -> Forall tnvs Dot cs2 . EqGt Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On EqGt shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt . Lparen id insttyp Rparen [ Let_ ]
## Transitions:
-- On Lparen shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen . id insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id . insttyp Rparen [ Let_ ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Nvar shift to state 47
-- On Num shift to state 48
-- On Lparen shift to state 49
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 510
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On star_nexp shift to state 72
-- On nexp shift to state 511
-- On insttyp shift to state 527
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On atomic_nexp shift to state 77
-- On app_typ shift to state 69
## Reductions:

State 527:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id insttyp
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp . Rparen [ Let_ ]
## Transitions:
-- On Rparen shift to state 528
## Reductions:

State 528:
## Known stack suffix:
## Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen
## LR(1) items:
instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen . [ Let_ ]
## Transitions:
## Reductions:
-- On Let_ reduce production instschm -> Forall tnvs Dot cs2 EqGt Lparen id insttyp Rparen

State 529:
## Known stack suffix:
## c2
## LR(1) items:
cs2 -> c2 . [ EqGt ]
cs2 -> c2 . Comma cs2 [ EqGt ]
## Transitions:
-- On Comma shift to state 530
## Reductions:
-- On EqGt reduce production cs2 -> c2

State 530:
## Known stack suffix:
## c2 Comma
## LR(1) items:
cs2 -> c2 Comma . cs2 [ EqGt ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 521
-- On cs2 shift to state 531
-- On c2 shift to state 529
## Reductions:

State 531:
## Known stack suffix:
## c2 Comma cs2
## LR(1) items:
cs2 -> c2 Comma cs2 . [ EqGt ]
## Transitions:
## Reductions:
-- On EqGt reduce production cs2 -> c2 Comma cs2

State 532:
## Known stack suffix:
## Inst_default instschm
## LR(1) items:
def -> Inst_default instschm . val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 533
-- On val_def shift to state 535
## Reductions:

State 533:
## Known stack suffix:
## Inst_default instschm val_defs
## LR(1) items:
def -> Inst_default instschm val_defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## Inst_default instschm val_defs End
## LR(1) items:
def -> Inst_default instschm val_defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Inst_default instschm val_defs End
-- On Type reduce production def -> Inst_default instschm val_defs End
-- On Theorem reduce production def -> Inst_default instschm val_defs End
-- On SemiSemi reduce production def -> Inst_default instschm val_defs End
-- On Open_ reduce production def -> Inst_default instschm val_defs End
-- On Module_ reduce production def -> Inst_default instschm val_defs End
-- On Let_ reduce production def -> Inst_default instschm val_defs End
-- On Lemma reduce production def -> Inst_default instschm val_defs End
-- On Inst_default reduce production def -> Inst_default instschm val_defs End
-- On Inst reduce production def -> Inst_default instschm val_defs End
-- On Indreln reduce production def -> Inst_default instschm val_defs End
-- On Include_ reduce production def -> Inst_default instschm val_defs End
-- On Import_ reduce production def -> Inst_default instschm val_defs End
-- On Eof reduce production def -> Inst_default instschm val_defs End
-- On End reduce production def -> Inst_default instschm val_defs End
-- On Declare reduce production def -> Inst_default instschm val_defs End
-- On Class_ reduce production def -> Inst_default instschm val_defs End
-- On Assert reduce production def -> Inst_default instschm val_defs End

State 535:
## Known stack suffix:
## val_def
## LR(1) items:
val_defs -> val_def . [ End ]
val_defs -> val_def . val_defs [ End ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 536
-- On val_def shift to state 535
## Reductions:
-- On End reduce production val_defs -> val_def

State 536:
## Known stack suffix:
## val_def val_defs
## LR(1) items:
val_defs -> val_def val_defs . [ End ]
## Transitions:
## Reductions:
-- On End reduce production val_defs -> val_def val_defs

State 537:
## Known stack suffix:
## Inst
## LR(1) items:
def -> Inst . instschm val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 508
-- On Forall shift to state 514
-- On instschm shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## Inst instschm
## LR(1) items:
def -> Inst instschm . val_defs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Let_ shift to state 169
-- On val_defs shift to state 539
-- On val_def shift to state 535
## Reductions:

State 539:
## Known stack suffix:
## Inst instschm val_defs
## LR(1) items:
def -> Inst instschm val_defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 540
## Reductions:

State 540:
## Known stack suffix:
## Inst instschm val_defs End
## LR(1) items:
def -> Inst instschm val_defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Inst instschm val_defs End
-- On Type reduce production def -> Inst instschm val_defs End
-- On Theorem reduce production def -> Inst instschm val_defs End
-- On SemiSemi reduce production def -> Inst instschm val_defs End
-- On Open_ reduce production def -> Inst instschm val_defs End
-- On Module_ reduce production def -> Inst instschm val_defs End
-- On Let_ reduce production def -> Inst instschm val_defs End
-- On Lemma reduce production def -> Inst instschm val_defs End
-- On Inst_default reduce production def -> Inst instschm val_defs End
-- On Inst reduce production def -> Inst instschm val_defs End
-- On Indreln reduce production def -> Inst instschm val_defs End
-- On Include_ reduce production def -> Inst instschm val_defs End
-- On Import_ reduce production def -> Inst instschm val_defs End
-- On Eof reduce production def -> Inst instschm val_defs End
-- On End reduce production def -> Inst instschm val_defs End
-- On Declare reduce production def -> Inst instschm val_defs End
-- On Class_ reduce production def -> Inst instschm val_defs End
-- On Assert reduce production def -> Inst instschm val_defs End

State 541:
## Known stack suffix:
## Indreln
## LR(1) items:
def -> Indreln . targets_opt and_indreln_names and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 542
## Reductions:
-- On Lsquare reduce production targets_opt ->

State 542:
## Known stack suffix:
## Indreln targets_opt
## LR(1) items:
def -> Indreln targets_opt . and_indreln_names and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 543
-- On indreln_name shift to state 567
-- On and_indreln_names shift to state 570
## Reductions:

State 543:
## Known stack suffix:
## Lsquare
## LR(1) items:
indreln_name -> Lsquare . x Colon typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare . x Colon typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## Lsquare x
## LR(1) items:
indreln_name -> Lsquare x . Colon typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x . Colon typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Colon shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## Lsquare x Colon
## LR(1) items:
indreln_name -> Lsquare x Colon . typschm Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon . typschm witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On Forall shift to state 82
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typschm shift to state 546
-- On typ shift to state 117
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 546:
## Known stack suffix:
## Lsquare x Colon typschm
## LR(1) items:
indreln_name -> Lsquare x Colon typschm . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm . witness_clause check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Witness shift to state 547
-- On Semi shift to state 551
-- On Rsquare shift to state 552
-- On witness_clause shift to state 553
## Reductions:

State 547:
## Known stack suffix:
## Witness
## LR(1) items:
witness_clause -> Witness . Type x Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On Type shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## Witness Type
## LR(1) items:
witness_clause -> Witness Type . x Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## Witness Type x
## LR(1) items:
witness_clause -> Witness Type x . Semi [ X Rsquare Lparen Check ]
## Transitions:
-- On Semi shift to state 550
## Reductions:

State 550:
## Known stack suffix:
## Witness Type x Semi
## LR(1) items:
witness_clause -> Witness Type x Semi . [ X Rsquare Lparen Check ]
## Transitions:
## Reductions:
-- On X reduce production witness_clause -> Witness Type x Semi
-- On Rsquare reduce production witness_clause -> Witness Type x Semi
-- On Lparen reduce production witness_clause -> Witness Type x Semi
-- On Check reduce production witness_clause -> Witness Type x Semi

State 551:
## Known stack suffix:
## Semi
## LR(1) items:
witness_clause -> Semi . [ X Rsquare Lparen Check ]
## Transitions:
## Reductions:
-- On X reduce production witness_clause -> Semi
-- On Rsquare reduce production witness_clause -> Semi
-- On Lparen reduce production witness_clause -> Semi
-- On Check reduce production witness_clause -> Semi

State 552:
## Known stack suffix:
## Lsquare x Colon typschm Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X reduce production indreln_name -> Lsquare x Colon typschm Rsquare
-- On Lparen reduce production indreln_name -> Lsquare x Colon typschm Rsquare
-- On And reduce production indreln_name -> Lsquare x Colon typschm Rsquare

State 553:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause . check_clause Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause . check_clause functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On Rsquare shift to state 554
-- On Check shift to state 555
-- On check_clause shift to state 558
## Reductions:
-- On X reduce production check_clause ->
-- On Rsquare reduce production check_clause ->
-- On Lparen reduce production check_clause ->
** Conflict on Rsquare

State 554:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X reduce production indreln_name -> Lsquare x Colon typschm witness_clause Rsquare
-- On Lparen reduce production indreln_name -> Lsquare x Colon typschm witness_clause Rsquare
-- On And reduce production indreln_name -> Lsquare x Colon typschm witness_clause Rsquare

State 555:
## Known stack suffix:
## Check
## LR(1) items:
check_clause -> Check . x Semi [ X Rsquare Lparen ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## Check x
## LR(1) items:
check_clause -> Check x . Semi [ X Rsquare Lparen ]
## Transitions:
-- On Semi shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## Check x Semi
## LR(1) items:
check_clause -> Check x Semi . [ X Rsquare Lparen ]
## Transitions:
## Reductions:
-- On X reduce production check_clause -> Check x Semi
-- On Rsquare reduce production check_clause -> Check x Semi
-- On Lparen reduce production check_clause -> Check x Semi

State 558:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause . Rsquare [ X Lparen And ]
indreln_name -> Lsquare x Colon typschm witness_clause check_clause . functions_clause Rsquare [ X Lparen And ]
## Transitions:
-- On X shift to state 2
-- On Rsquare shift to state 559
-- On Lparen shift to state 3
-- On x shift to state 560
-- On functions_clause shift to state 565
## Reductions:

State 559:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare
-- On Lparen reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare
-- On And reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause Rsquare

State 560:
## Known stack suffix:
## x
## LR(1) items:
functions_clause -> x . Colon typ [ Rsquare ]
functions_clause -> x . Colon typ Semi functions_clause [ Rsquare ]
## Transitions:
-- On Colon shift to state 561
## Reductions:

State 561:
## Known stack suffix:
## x Colon
## LR(1) items:
functions_clause -> x Colon . typ [ Rsquare ]
functions_clause -> x Colon . typ Semi functions_clause [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 562
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 562:
## Known stack suffix:
## x Colon typ
## LR(1) items:
functions_clause -> x Colon typ . [ Rsquare ]
functions_clause -> x Colon typ . Semi functions_clause [ Rsquare ]
## Transitions:
-- On Semi shift to state 563
## Reductions:
-- On Rsquare reduce production functions_clause -> x Colon typ

State 563:
## Known stack suffix:
## x Colon typ Semi
## LR(1) items:
functions_clause -> x Colon typ Semi . functions_clause [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 560
-- On functions_clause shift to state 564
## Reductions:

State 564:
## Known stack suffix:
## x Colon typ Semi functions_clause
## LR(1) items:
functions_clause -> x Colon typ Semi functions_clause . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare reduce production functions_clause -> x Colon typ Semi functions_clause

State 565:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause functions_clause
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause . Rsquare [ X Lparen And ]
## Transitions:
-- On Rsquare shift to state 566
## Reductions:

State 566:
## Known stack suffix:
## Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare
## LR(1) items:
indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare . [ X Lparen And ]
## Transitions:
## Reductions:
-- On X reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare
-- On Lparen reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare
-- On And reduce production indreln_name -> Lsquare x Colon typschm witness_clause check_clause functions_clause Rsquare

State 567:
## Known stack suffix:
## indreln_name
## LR(1) items:
and_indreln_names -> indreln_name . [ X Lparen ]
and_indreln_names -> indreln_name . And and_indreln_names [ X Lparen ]
## Transitions:
-- On And shift to state 568
## Reductions:
-- On X reduce production and_indreln_names -> indreln_name
-- On Lparen reduce production and_indreln_names -> indreln_name

State 568:
## Known stack suffix:
## indreln_name And
## LR(1) items:
and_indreln_names -> indreln_name And . and_indreln_names [ X Lparen ]
## Transitions:
-- On Lsquare shift to state 543
-- On indreln_name shift to state 567
-- On and_indreln_names shift to state 569
## Reductions:

State 569:
## Known stack suffix:
## indreln_name And and_indreln_names
## LR(1) items:
and_indreln_names -> indreln_name And and_indreln_names . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production and_indreln_names -> indreln_name And and_indreln_names
-- On Lparen reduce production and_indreln_names -> indreln_name And and_indreln_names

State 570:
## Known stack suffix:
## Indreln targets_opt and_indreln_names
## LR(1) items:
def -> Indreln targets_opt and_indreln_names . and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 571
-- On indreln_clause shift to state 590
-- On and_indreln_clauses shift to state 593
## Reductions:

State 571:
## Known stack suffix:
## x
## LR(1) items:
indreln_clause -> x . Colon Forall name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Colon shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## x Colon
## LR(1) items:
indreln_clause -> x Colon . Forall name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Forall shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## x Colon Forall
## LR(1) items:
indreln_clause -> x Colon Forall . name_ts Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 582
## Reductions:
-- On Dot reduce production name_ts ->

State 574:
## Known stack suffix:
## Lparen
## LR(1) items:
name_ts -> Lparen . x Colon typ Rparen name_ts [ Dot ]
x -> Lparen . Eq Rparen [ X Lparen Dot ]
x -> Lparen . IN Rparen [ X Lparen Dot ]
x -> Lparen . MEM Rparen [ X Lparen Dot ]
x -> Lparen . MinusMinusGt Rparen [ X Lparen Dot ]
x -> Lparen . AmpAmp Rparen [ X Lparen Dot ]
x -> Lparen . BarBar Rparen [ X Lparen Dot ]
x -> Lparen . ColonColon Rparen [ X Lparen Dot ]
x -> Lparen . Star Rparen [ X Lparen Dot ]
x -> Lparen . Plus Rparen [ X Lparen Dot ]
x -> Lparen . GtEq Rparen [ X Lparen Dot ]
x -> Lparen . PlusX Rparen [ X Lparen Dot ]
x -> Lparen . StarX Rparen [ X Lparen Dot ]
x -> Lparen . GtEqX Rparen [ X Lparen Dot ]
x -> Lparen . EqualX Rparen [ X Lparen Dot ]
x -> Lparen . StarstarX Rparen [ X Lparen Dot ]
x -> Lparen . At Rparen [ X Lparen Dot ]
x -> Lparen . AtX Rparen [ X Lparen Dot ]
## Transitions:
-- On X shift to state 2
-- On StarstarX shift to state 4
-- On StarX shift to state 6
-- On Star shift to state 8
-- On PlusX shift to state 10
-- On Plus shift to state 12
-- On MinusMinusGt shift to state 14
-- On MEM shift to state 16
-- On Lparen shift to state 3
-- On IN shift to state 18
-- On GtEqX shift to state 20
-- On GtEq shift to state 22
-- On EqualX shift to state 24
-- On Eq shift to state 26
-- On ColonColon shift to state 28
-- On BarBar shift to state 30
-- On AtX shift to state 32
-- On At shift to state 34
-- On AmpAmp shift to state 36
-- On x shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## Lparen x
## LR(1) items:
name_ts -> Lparen x . Colon typ Rparen name_ts [ Dot ]
## Transitions:
-- On Colon shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## Lparen x Colon
## LR(1) items:
name_ts -> Lparen x Colon . typ Rparen name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 577
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 577:
## Known stack suffix:
## Lparen x Colon typ
## LR(1) items:
name_ts -> Lparen x Colon typ . Rparen name_ts [ Dot ]
## Transitions:
-- On Rparen shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## Lparen x Colon typ Rparen
## LR(1) items:
name_ts -> Lparen x Colon typ Rparen . name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 581
## Reductions:
-- On Dot reduce production name_ts ->

State 579:
## Known stack suffix:
## x
## LR(1) items:
name_ts -> x . name_ts [ Dot ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 574
-- On x shift to state 579
-- On name_ts shift to state 580
## Reductions:
-- On Dot reduce production name_ts ->

State 580:
## Known stack suffix:
## x name_ts
## LR(1) items:
name_ts -> x name_ts . [ Dot ]
## Transitions:
## Reductions:
-- On Dot reduce production name_ts -> x name_ts

State 581:
## Known stack suffix:
## Lparen x Colon typ Rparen name_ts
## LR(1) items:
name_ts -> Lparen x Colon typ Rparen name_ts . [ Dot ]
## Transitions:
## Reductions:
-- On Dot reduce production name_ts -> Lparen x Colon typ Rparen name_ts

State 582:
## Known stack suffix:
## x Colon Forall name_ts
## LR(1) items:
indreln_clause -> x Colon Forall name_ts . Dot exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On Dot shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## x Colon Forall name_ts Dot
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot . exp EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 584
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 584:
## Known stack suffix:
## x Colon Forall name_ts Dot exp
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp . EqEqGt x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On EqEqGt shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt . x exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt x
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 589
-- On atomic_exp shift to state 313
## Reductions:
-- On Val reduce production exps ->
-- On Type reduce production exps ->
-- On Theorem reduce production exps ->
-- On SemiSemi reduce production exps ->
-- On Open_ reduce production exps ->
-- On Module_ reduce production exps ->
-- On Let_ reduce production exps ->
-- On Lemma reduce production exps ->
-- On Inst_default reduce production exps ->
-- On Inst reduce production exps ->
-- On Indreln reduce production exps ->
-- On Include_ reduce production exps ->
-- On Import_ reduce production exps ->
-- On Eof reduce production exps ->
-- On End reduce production exps ->
-- On Declare reduce production exps ->
-- On Class_ reduce production exps ->
-- On Assert reduce production exps ->
-- On And reduce production exps ->

State 587:
## Known stack suffix:
## field_exp
## LR(1) items:
exps -> field_exp . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 588
-- On atomic_exp shift to state 313
## Reductions:
-- On Val reduce production exps ->
-- On Type reduce production exps ->
-- On Theorem reduce production exps ->
-- On SemiSemi reduce production exps ->
-- On Open_ reduce production exps ->
-- On Module_ reduce production exps ->
-- On Let_ reduce production exps ->
-- On Lemma reduce production exps ->
-- On Inst_default reduce production exps ->
-- On Inst reduce production exps ->
-- On Indreln reduce production exps ->
-- On Include_ reduce production exps ->
-- On Import_ reduce production exps ->
-- On Eof reduce production exps ->
-- On End reduce production exps ->
-- On Declare reduce production exps ->
-- On Class_ reduce production exps ->
-- On Assert reduce production exps ->
-- On And reduce production exps ->

State 588:
## Known stack suffix:
## field_exp exps
## LR(1) items:
exps -> field_exp exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production exps -> field_exp exps
-- On Type reduce production exps -> field_exp exps
-- On Theorem reduce production exps -> field_exp exps
-- On SemiSemi reduce production exps -> field_exp exps
-- On Open_ reduce production exps -> field_exp exps
-- On Module_ reduce production exps -> field_exp exps
-- On Let_ reduce production exps -> field_exp exps
-- On Lemma reduce production exps -> field_exp exps
-- On Inst_default reduce production exps -> field_exp exps
-- On Inst reduce production exps -> field_exp exps
-- On Indreln reduce production exps -> field_exp exps
-- On Include_ reduce production exps -> field_exp exps
-- On Import_ reduce production exps -> field_exp exps
-- On Eof reduce production exps -> field_exp exps
-- On End reduce production exps -> field_exp exps
-- On Declare reduce production exps -> field_exp exps
-- On Class_ reduce production exps -> field_exp exps
-- On Assert reduce production exps -> field_exp exps
-- On And reduce production exps -> field_exp exps

State 589:
## Known stack suffix:
## x Colon Forall name_ts Dot exp EqEqGt x exps
## LR(1) items:
indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert And ]
## Transitions:
## Reductions:
-- On Val reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Type reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Theorem reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On SemiSemi reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Open_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Module_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Let_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Lemma reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Inst_default reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Inst reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Indreln reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Include_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Import_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Eof reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On End reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Declare reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Class_ reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On Assert reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps
-- On And reduce production indreln_clause -> x Colon Forall name_ts Dot exp EqEqGt x exps

State 590:
## Known stack suffix:
## indreln_clause
## LR(1) items:
and_indreln_clauses -> indreln_clause . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
and_indreln_clauses -> indreln_clause . And and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On And shift to state 591
## Reductions:
-- On Val reduce production and_indreln_clauses -> indreln_clause
-- On Type reduce production and_indreln_clauses -> indreln_clause
-- On Theorem reduce production and_indreln_clauses -> indreln_clause
-- On SemiSemi reduce production and_indreln_clauses -> indreln_clause
-- On Open_ reduce production and_indreln_clauses -> indreln_clause
-- On Module_ reduce production and_indreln_clauses -> indreln_clause
-- On Let_ reduce production and_indreln_clauses -> indreln_clause
-- On Lemma reduce production and_indreln_clauses -> indreln_clause
-- On Inst_default reduce production and_indreln_clauses -> indreln_clause
-- On Inst reduce production and_indreln_clauses -> indreln_clause
-- On Indreln reduce production and_indreln_clauses -> indreln_clause
-- On Include_ reduce production and_indreln_clauses -> indreln_clause
-- On Import_ reduce production and_indreln_clauses -> indreln_clause
-- On Eof reduce production and_indreln_clauses -> indreln_clause
-- On End reduce production and_indreln_clauses -> indreln_clause
-- On Declare reduce production and_indreln_clauses -> indreln_clause
-- On Class_ reduce production and_indreln_clauses -> indreln_clause
-- On Assert reduce production and_indreln_clauses -> indreln_clause

State 591:
## Known stack suffix:
## indreln_clause And
## LR(1) items:
and_indreln_clauses -> indreln_clause And . and_indreln_clauses [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 571
-- On indreln_clause shift to state 590
-- On and_indreln_clauses shift to state 592
## Reductions:

State 592:
## Known stack suffix:
## indreln_clause And and_indreln_clauses
## LR(1) items:
and_indreln_clauses -> indreln_clause And and_indreln_clauses . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Type reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Theorem reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On SemiSemi reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Open_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Module_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Let_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Lemma reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Inst_default reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Inst reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Indreln reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Include_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Import_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Eof reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On End reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Declare reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Class_ reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses
-- On Assert reduce production and_indreln_clauses -> indreln_clause And and_indreln_clauses

State 593:
## Known stack suffix:
## Indreln targets_opt and_indreln_names and_indreln_clauses
## LR(1) items:
def -> Indreln targets_opt and_indreln_names and_indreln_clauses . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Type reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Theorem reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On SemiSemi reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Open_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Module_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Let_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Lemma reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Inst_default reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Inst reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Indreln reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Include_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Import_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Eof reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On End reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Declare reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Class_ reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses
-- On Assert reduce production def -> Indreln targets_opt and_indreln_names and_indreln_clauses

State 594:
## Known stack suffix:
## Include_
## LR(1) items:
open_import -> Include_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
open_import -> Include_ . Import_ [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
-- On Import_ shift to state 595
## Reductions:
-- On X reduce production open_import -> Include_
-- On NonExec reduce production open_import -> Include_
-- On NegLcurly reduce production open_import -> Include_
-- On Lparen reduce production open_import -> Include_
-- On Lcurly reduce production open_import -> Include_
-- On BacktickString reduce production open_import -> Include_

State 595:
## Known stack suffix:
## Include_ Import_
## LR(1) items:
open_import -> Include_ Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X reduce production open_import -> Include_ Import_
-- On NonExec reduce production open_import -> Include_ Import_
-- On NegLcurly reduce production open_import -> Include_ Import_
-- On Lparen reduce production open_import -> Include_ Import_
-- On Lcurly reduce production open_import -> Include_ Import_
-- On BacktickString reduce production open_import -> Include_ Import_

State 596:
## Known stack suffix:
## Import_
## LR(1) items:
open_import -> Import_ . [ X NonExec NegLcurly Lparen Lcurly BacktickString ]
## Transitions:
## Reductions:
-- On X reduce production open_import -> Import_
-- On NonExec reduce production open_import -> Import_
-- On NegLcurly reduce production open_import -> Import_
-- On Lparen reduce production open_import -> Import_
-- On Lcurly reduce production open_import -> Import_
-- On BacktickString reduce production open_import -> Import_

State 597:
## Known stack suffix:
## Declare
## LR(1) items:
declaration -> Declare . targets_opt CompileMessage id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt Rename Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt Rename component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt AsciiRep component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . target TargetRep component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . target TargetRep component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . SetFlag x Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt TerminationArgument id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare . targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 173
-- On SetFlag shift to state 598
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 602
-- On target shift to state 650
## Reductions:
-- On TerminationArgument reduce production targets_opt ->
-- On Rename reduce production targets_opt ->
-- On PatternMatch reduce production targets_opt ->
-- On CompileMessage reduce production targets_opt ->
-- On AsciiRep reduce production targets_opt ->

State 598:
## Known stack suffix:
## Declare SetFlag
## LR(1) items:
declaration -> Declare SetFlag . x Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## Declare SetFlag x
## LR(1) items:
declaration -> Declare SetFlag x . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## Declare SetFlag x Eq
## LR(1) items:
declaration -> Declare SetFlag x Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 601
## Reductions:

State 601:
## Known stack suffix:
## Declare SetFlag x Eq x
## LR(1) items:
declaration -> Declare SetFlag x Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare SetFlag x Eq x
-- On Type reduce production declaration -> Declare SetFlag x Eq x
-- On Theorem reduce production declaration -> Declare SetFlag x Eq x
-- On SemiSemi reduce production declaration -> Declare SetFlag x Eq x
-- On Open_ reduce production declaration -> Declare SetFlag x Eq x
-- On Module_ reduce production declaration -> Declare SetFlag x Eq x
-- On Let_ reduce production declaration -> Declare SetFlag x Eq x
-- On Lemma reduce production declaration -> Declare SetFlag x Eq x
-- On Inst_default reduce production declaration -> Declare SetFlag x Eq x
-- On Inst reduce production declaration -> Declare SetFlag x Eq x
-- On Indreln reduce production declaration -> Declare SetFlag x Eq x
-- On Include_ reduce production declaration -> Declare SetFlag x Eq x
-- On Import_ reduce production declaration -> Declare SetFlag x Eq x
-- On Eof reduce production declaration -> Declare SetFlag x Eq x
-- On End reduce production declaration -> Declare SetFlag x Eq x
-- On Declare reduce production declaration -> Declare SetFlag x Eq x
-- On Class_ reduce production declaration -> Declare SetFlag x Eq x
-- On Assert reduce production declaration -> Declare SetFlag x Eq x

State 602:
## Known stack suffix:
## Declare targets_opt
## LR(1) items:
declaration -> Declare targets_opt . CompileMessage id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . Rename Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . Rename component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . AsciiRep component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . TerminationArgument id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt . PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On TerminationArgument shift to state 603
-- On Rename shift to state 609
-- On PatternMatch shift to state 622
-- On CompileMessage shift to state 640
-- On AsciiRep shift to state 644
## Reductions:

State 603:
## Known stack suffix:
## Declare targets_opt TerminationArgument
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument . id Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## Declare targets_opt TerminationArgument id
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id . Eq termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 605
## Reductions:

State 605:
## Known stack suffix:
## Declare targets_opt TerminationArgument id Eq
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id Eq . termination_setting [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Manual shift to state 606
-- On Automatic shift to state 607
-- On termination_setting shift to state 608
## Reductions:

State 606:
## Known stack suffix:
## Manual
## LR(1) items:
termination_setting -> Manual . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production termination_setting -> Manual
-- On Type reduce production termination_setting -> Manual
-- On Theorem reduce production termination_setting -> Manual
-- On SemiSemi reduce production termination_setting -> Manual
-- On Open_ reduce production termination_setting -> Manual
-- On Module_ reduce production termination_setting -> Manual
-- On Let_ reduce production termination_setting -> Manual
-- On Lemma reduce production termination_setting -> Manual
-- On Inst_default reduce production termination_setting -> Manual
-- On Inst reduce production termination_setting -> Manual
-- On Indreln reduce production termination_setting -> Manual
-- On Include_ reduce production termination_setting -> Manual
-- On Import_ reduce production termination_setting -> Manual
-- On Eof reduce production termination_setting -> Manual
-- On End reduce production termination_setting -> Manual
-- On Declare reduce production termination_setting -> Manual
-- On Class_ reduce production termination_setting -> Manual
-- On Assert reduce production termination_setting -> Manual

State 607:
## Known stack suffix:
## Automatic
## LR(1) items:
termination_setting -> Automatic . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production termination_setting -> Automatic
-- On Type reduce production termination_setting -> Automatic
-- On Theorem reduce production termination_setting -> Automatic
-- On SemiSemi reduce production termination_setting -> Automatic
-- On Open_ reduce production termination_setting -> Automatic
-- On Module_ reduce production termination_setting -> Automatic
-- On Let_ reduce production termination_setting -> Automatic
-- On Lemma reduce production termination_setting -> Automatic
-- On Inst_default reduce production termination_setting -> Automatic
-- On Inst reduce production termination_setting -> Automatic
-- On Indreln reduce production termination_setting -> Automatic
-- On Include_ reduce production termination_setting -> Automatic
-- On Import_ reduce production termination_setting -> Automatic
-- On Eof reduce production termination_setting -> Automatic
-- On End reduce production termination_setting -> Automatic
-- On Declare reduce production termination_setting -> Automatic
-- On Class_ reduce production termination_setting -> Automatic
-- On Assert reduce production termination_setting -> Automatic

State 608:
## Known stack suffix:
## Declare targets_opt TerminationArgument id Eq termination_setting
## LR(1) items:
declaration -> Declare targets_opt TerminationArgument id Eq termination_setting . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Type reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Theorem reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On SemiSemi reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Open_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Module_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Let_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Lemma reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Inst_default reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Inst reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Indreln reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Include_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Import_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Eof reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On End reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Declare reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Class_ reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting
-- On Assert reduce production declaration -> Declare targets_opt TerminationArgument id Eq termination_setting

State 609:
## Known stack suffix:
## Declare targets_opt Rename
## LR(1) items:
declaration -> Declare targets_opt Rename . Module_ Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare targets_opt Rename . component id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Module_ shift to state 611
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 616
-- On component_term shift to state 617
-- On component shift to state 618
## Reductions:

State 610:
## Known stack suffix:
## Type
## LR(1) items:
component_type -> Type . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component_type -> Type
-- On Lparen reduce production component_type -> Type

State 611:
## Known stack suffix:
## Declare targets_opt Rename Module_
## LR(1) items:
component -> Module_ . [ X Lparen ]
declaration -> Declare targets_opt Rename Module_ . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 612
## Reductions:
-- On X reduce production component -> Module_
-- On Lparen reduce production component -> Module_

State 612:
## Known stack suffix:
## Declare targets_opt Rename Module_ Eq
## LR(1) items:
declaration -> Declare targets_opt Rename Module_ Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## Declare targets_opt Rename Module_ Eq x
## LR(1) items:
declaration -> Declare targets_opt Rename Module_ Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Type reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Theorem reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On SemiSemi reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Open_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Module_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Let_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Lemma reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Inst_default reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Inst reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Indreln reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Include_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Import_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Eof reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On End reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Declare reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Class_ reduce production declaration -> Declare targets_opt Rename Module_ Eq x
-- On Assert reduce production declaration -> Declare targets_opt Rename Module_ Eq x

State 614:
## Known stack suffix:
## Function_
## LR(1) items:
component_term -> Function_ . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component_term -> Function_
-- On Lparen reduce production component_term -> Function_

State 615:
## Known stack suffix:
## Field
## LR(1) items:
component_term -> Field . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component_term -> Field
-- On Lparen reduce production component_term -> Field

State 616:
## Known stack suffix:
## component_type
## LR(1) items:
component -> component_type . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component -> component_type
-- On Lparen reduce production component -> component_type

State 617:
## Known stack suffix:
## component_term
## LR(1) items:
component -> component_term . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component -> component_term
-- On Lparen reduce production component -> component_term

State 618:
## Known stack suffix:
## Declare targets_opt Rename component
## LR(1) items:
declaration -> Declare targets_opt Rename component . id Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## Declare targets_opt Rename component id
## LR(1) items:
declaration -> Declare targets_opt Rename component id . Eq x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 620
## Reductions:

State 620:
## Known stack suffix:
## Declare targets_opt Rename component id Eq
## LR(1) items:
declaration -> Declare targets_opt Rename component id Eq . x [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 621
## Reductions:

State 621:
## Known stack suffix:
## Declare targets_opt Rename component id Eq x
## LR(1) items:
declaration -> Declare targets_opt Rename component id Eq x . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Type reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Theorem reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On SemiSemi reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Open_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Module_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Let_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Lemma reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Inst_default reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Inst reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Indreln reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Include_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Import_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Eof reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On End reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Declare reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Class_ reduce production declaration -> Declare targets_opt Rename component id Eq x
-- On Assert reduce production declaration -> Declare targets_opt Rename component id Eq x

State 622:
## Known stack suffix:
## Declare targets_opt PatternMatch
## LR(1) items:
declaration -> Declare targets_opt PatternMatch . exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Inexhaustive shift to state 623
-- On Exhaustive shift to state 624
-- On exhaustivity_setting shift to state 625
## Reductions:

State 623:
## Known stack suffix:
## Inexhaustive
## LR(1) items:
exhaustivity_setting -> Inexhaustive . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production exhaustivity_setting -> Inexhaustive
-- On Lparen reduce production exhaustivity_setting -> Inexhaustive

State 624:
## Known stack suffix:
## Exhaustive
## LR(1) items:
exhaustivity_setting -> Exhaustive . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production exhaustivity_setting -> Exhaustive
-- On Lparen reduce production exhaustivity_setting -> Exhaustive

State 625:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting . id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 626
## Reductions:

State 626:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id . tnvar_list Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar_list shift to state 627
-- On tnvar shift to state 638
## Reductions:
-- On Eq reduce production tnvar_list ->

State 627:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list . Eq Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq . Lsquare semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lsquare shift to state 629
## Reductions:

State 629:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare . semi_ids Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On semi_ids_help shift to state 630
-- On semi_ids shift to state 631
-- On id_help shift to state 59
-- On id shift to state 635
## Reductions:
-- On Rsquare reduce production semi_ids ->

State 630:
## Known stack suffix:
## semi_ids_help
## LR(1) items:
semi_ids -> semi_ids_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_ids -> semi_ids_help

State 631:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids . Rsquare elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rsquare shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare . elim_opt [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 633
-- On elim_opt shift to state 634
## Reductions:
-- On Val reduce production elim_opt ->
-- On Type reduce production elim_opt ->
-- On Theorem reduce production elim_opt ->
-- On SemiSemi reduce production elim_opt ->
-- On Open_ reduce production elim_opt ->
-- On Module_ reduce production elim_opt ->
-- On Let_ reduce production elim_opt ->
-- On Lemma reduce production elim_opt ->
-- On Inst_default reduce production elim_opt ->
-- On Inst reduce production elim_opt ->
-- On Indreln reduce production elim_opt ->
-- On Include_ reduce production elim_opt ->
-- On Import_ reduce production elim_opt ->
-- On Eof reduce production elim_opt ->
-- On End reduce production elim_opt ->
-- On Declare reduce production elim_opt ->
-- On Class_ reduce production elim_opt ->
-- On Assert reduce production elim_opt ->

State 633:
## Known stack suffix:
## id
## LR(1) items:
elim_opt -> id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production elim_opt -> id
-- On Type reduce production elim_opt -> id
-- On Theorem reduce production elim_opt -> id
-- On SemiSemi reduce production elim_opt -> id
-- On Open_ reduce production elim_opt -> id
-- On Module_ reduce production elim_opt -> id
-- On Let_ reduce production elim_opt -> id
-- On Lemma reduce production elim_opt -> id
-- On Inst_default reduce production elim_opt -> id
-- On Inst reduce production elim_opt -> id
-- On Indreln reduce production elim_opt -> id
-- On Include_ reduce production elim_opt -> id
-- On Import_ reduce production elim_opt -> id
-- On Eof reduce production elim_opt -> id
-- On End reduce production elim_opt -> id
-- On Declare reduce production elim_opt -> id
-- On Class_ reduce production elim_opt -> id
-- On Assert reduce production elim_opt -> id

State 634:
## Known stack suffix:
## Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
## LR(1) items:
declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Type reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Theorem reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On SemiSemi reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Open_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Module_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Let_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Lemma reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Inst_default reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Inst reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Indreln reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Include_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Import_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Eof reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On End reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Declare reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Class_ reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt
-- On Assert reduce production declaration -> Declare targets_opt PatternMatch exhaustivity_setting id tnvar_list Eq Lsquare semi_ids Rsquare elim_opt

State 635:
## Known stack suffix:
## id
## LR(1) items:
semi_ids_help -> id . [ Rsquare ]
semi_ids_help -> id . Semi [ Rsquare ]
semi_ids_help -> id . Semi semi_ids_help [ Rsquare ]
## Transitions:
-- On Semi shift to state 636
## Reductions:
-- On Rsquare reduce production semi_ids_help -> id

State 636:
## Known stack suffix:
## id Semi
## LR(1) items:
semi_ids_help -> id Semi . [ Rsquare ]
semi_ids_help -> id Semi . semi_ids_help [ Rsquare ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On semi_ids_help shift to state 637
-- On id_help shift to state 59
-- On id shift to state 635
## Reductions:
-- On Rsquare reduce production semi_ids_help -> id Semi

State 637:
## Known stack suffix:
## id Semi semi_ids_help
## LR(1) items:
semi_ids_help -> id Semi semi_ids_help . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare reduce production semi_ids_help -> id Semi semi_ids_help

State 638:
## Known stack suffix:
## tnvar
## LR(1) items:
tnvar_list -> tnvar . tnvar_list [ Eq ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar_list shift to state 639
-- On tnvar shift to state 638
## Reductions:
-- On Eq reduce production tnvar_list ->

State 639:
## Known stack suffix:
## tnvar tnvar_list
## LR(1) items:
tnvar_list -> tnvar tnvar_list . [ Eq ]
## Transitions:
## Reductions:
-- On Eq reduce production tnvar_list -> tnvar tnvar_list

State 640:
## Known stack suffix:
## Declare targets_opt CompileMessage
## LR(1) items:
declaration -> Declare targets_opt CompileMessage . id Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## Declare targets_opt CompileMessage id
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id . Eq String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 642
## Reductions:

State 642:
## Known stack suffix:
## Declare targets_opt CompileMessage id Eq
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id Eq . String [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On String shift to state 643
## Reductions:

State 643:
## Known stack suffix:
## Declare targets_opt CompileMessage id Eq String
## LR(1) items:
declaration -> Declare targets_opt CompileMessage id Eq String . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Type reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Theorem reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On SemiSemi reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Open_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Module_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Let_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Lemma reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Inst_default reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Inst reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Indreln reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Include_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Import_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Eof reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On End reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Declare reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Class_ reduce production declaration -> Declare targets_opt CompileMessage id Eq String
-- On Assert reduce production declaration -> Declare targets_opt CompileMessage id Eq String

State 644:
## Known stack suffix:
## Declare targets_opt AsciiRep
## LR(1) items:
declaration -> Declare targets_opt AsciiRep . component id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Module_ shift to state 645
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 616
-- On component_term shift to state 617
-- On component shift to state 646
## Reductions:

State 645:
## Known stack suffix:
## Module_
## LR(1) items:
component -> Module_ . [ X Lparen ]
## Transitions:
## Reductions:
-- On X reduce production component -> Module_
-- On Lparen reduce production component -> Module_

State 646:
## Known stack suffix:
## Declare targets_opt AsciiRep component
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component . id Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 647
## Reductions:

State 647:
## Known stack suffix:
## Declare targets_opt AsciiRep component id
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id . Eq BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 648
## Reductions:

State 648:
## Known stack suffix:
## Declare targets_opt AsciiRep component id Eq
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id Eq . BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## Declare targets_opt AsciiRep component id Eq BacktickString
## LR(1) items:
declaration -> Declare targets_opt AsciiRep component id Eq BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Type reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Theorem reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On SemiSemi reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Open_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Module_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Let_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Lemma reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Inst_default reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Inst reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Indreln reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Include_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Import_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Eof reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On End reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Declare reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Class_ reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString
-- On Assert reduce production declaration -> Declare targets_opt AsciiRep component id Eq BacktickString

State 650:
## Known stack suffix:
## Declare target
## LR(1) items:
declaration -> Declare target . TargetRep component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare target . TargetRep component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On TargetRep shift to state 651
## Reductions:

State 651:
## Known stack suffix:
## Declare target TargetRep
## LR(1) items:
declaration -> Declare target TargetRep . component_term id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
declaration -> Declare target TargetRep . component_type id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Type shift to state 610
-- On Function_ shift to state 614
-- On Field shift to state 615
-- On component_type shift to state 652
-- On component_term shift to state 658
## Reductions:

State 652:
## Known stack suffix:
## Declare target TargetRep component_type
## LR(1) items:
declaration -> Declare target TargetRep component_type . id tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## Declare target TargetRep component_type id
## LR(1) items:
declaration -> Declare target TargetRep component_type id . tnvs Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvs shift to state 654
-- On tnvar shift to state 114
## Reductions:
-- On Eq reduce production tnvs ->

State 654:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs . Eq target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs Eq
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs Eq . target_rep_rhs_type [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 656
-- On target_rep_rhs_type shift to state 657
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 656:
## Known stack suffix:
## typ
## LR(1) items:
target_rep_rhs_type -> typ . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production target_rep_rhs_type -> typ
-- On Type reduce production target_rep_rhs_type -> typ
-- On Theorem reduce production target_rep_rhs_type -> typ
-- On SemiSemi reduce production target_rep_rhs_type -> typ
-- On Open_ reduce production target_rep_rhs_type -> typ
-- On Module_ reduce production target_rep_rhs_type -> typ
-- On Let_ reduce production target_rep_rhs_type -> typ
-- On Lemma reduce production target_rep_rhs_type -> typ
-- On Inst_default reduce production target_rep_rhs_type -> typ
-- On Inst reduce production target_rep_rhs_type -> typ
-- On Indreln reduce production target_rep_rhs_type -> typ
-- On Include_ reduce production target_rep_rhs_type -> typ
-- On Import_ reduce production target_rep_rhs_type -> typ
-- On Eof reduce production target_rep_rhs_type -> typ
-- On End reduce production target_rep_rhs_type -> typ
-- On Declare reduce production target_rep_rhs_type -> typ
-- On Class_ reduce production target_rep_rhs_type -> typ
-- On Assert reduce production target_rep_rhs_type -> typ

State 657:
## Known stack suffix:
## Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
## LR(1) items:
declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Type reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Theorem reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On SemiSemi reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Open_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Module_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Let_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Lemma reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Inst_default reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Inst reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Indreln reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Include_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Import_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Eof reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On End reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Declare reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Class_ reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type
-- On Assert reduce production declaration -> Declare target TargetRep component_type id tnvs Eq target_rep_rhs_type

State 658:
## Known stack suffix:
## Declare target TargetRep component_term
## LR(1) items:
declaration -> Declare target TargetRep component_term . id x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On id_help shift to state 59
-- On id shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## Declare target TargetRep component_term id
## LR(1) items:
declaration -> Declare target TargetRep component_term id . x_ls Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 660
-- On x_ls shift to state 662
## Reductions:
-- On Eq reduce production x_ls ->

State 660:
## Known stack suffix:
## X
## LR(1) items:
x_ls -> X . x_ls [ Eq ]
## Transitions:
-- On X shift to state 660
-- On x_ls shift to state 661
## Reductions:
-- On Eq reduce production x_ls ->

State 661:
## Known stack suffix:
## X x_ls
## LR(1) items:
x_ls -> X x_ls . [ Eq ]
## Transitions:
## Reductions:
-- On Eq reduce production x_ls -> X x_ls

State 662:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls . Eq target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Eq shift to state 663
## Reductions:

State 663:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls Eq
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls Eq . target_rep_rhs_term [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On Special shift to state 664
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On Infix shift to state 667
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On target_rep_rhs_term shift to state 676
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 677
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:
-- On Val reduce production target_rep_rhs_term ->
-- On Type reduce production target_rep_rhs_term ->
-- On Theorem reduce production target_rep_rhs_term ->
-- On SemiSemi reduce production target_rep_rhs_term ->
-- On Open_ reduce production target_rep_rhs_term ->
-- On Module_ reduce production target_rep_rhs_term ->
-- On Let_ reduce production target_rep_rhs_term ->
-- On Lemma reduce production target_rep_rhs_term ->
-- On Inst_default reduce production target_rep_rhs_term ->
-- On Inst reduce production target_rep_rhs_term ->
-- On Indreln reduce production target_rep_rhs_term ->
-- On Include_ reduce production target_rep_rhs_term ->
-- On Import_ reduce production target_rep_rhs_term ->
-- On Eof reduce production target_rep_rhs_term ->
-- On End reduce production target_rep_rhs_term ->
-- On Declare reduce production target_rep_rhs_term ->
-- On Class_ reduce production target_rep_rhs_term ->
-- On Assert reduce production target_rep_rhs_term ->
** Conflict on Let_

State 664:
## Known stack suffix:
## Special
## LR(1) items:
target_rep_rhs_term -> Special . String exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On String shift to state 665
## Reductions:

State 665:
## Known stack suffix:
## Special String
## LR(1) items:
target_rep_rhs_term -> Special String . exps [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Lcurly shift to state 267
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On False shift to state 200
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On lit shift to state 303
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 587
-- On exps shift to state 666
-- On atomic_exp shift to state 313
## Reductions:
-- On Val reduce production exps ->
-- On Type reduce production exps ->
-- On Theorem reduce production exps ->
-- On SemiSemi reduce production exps ->
-- On Open_ reduce production exps ->
-- On Module_ reduce production exps ->
-- On Let_ reduce production exps ->
-- On Lemma reduce production exps ->
-- On Inst_default reduce production exps ->
-- On Inst reduce production exps ->
-- On Indreln reduce production exps ->
-- On Include_ reduce production exps ->
-- On Import_ reduce production exps ->
-- On Eof reduce production exps ->
-- On End reduce production exps ->
-- On Declare reduce production exps ->
-- On Class_ reduce production exps ->
-- On Assert reduce production exps ->

State 666:
## Known stack suffix:
## Special String exps
## LR(1) items:
target_rep_rhs_term -> Special String exps . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production target_rep_rhs_term -> Special String exps
-- On Type reduce production target_rep_rhs_term -> Special String exps
-- On Theorem reduce production target_rep_rhs_term -> Special String exps
-- On SemiSemi reduce production target_rep_rhs_term -> Special String exps
-- On Open_ reduce production target_rep_rhs_term -> Special String exps
-- On Module_ reduce production target_rep_rhs_term -> Special String exps
-- On Let_ reduce production target_rep_rhs_term -> Special String exps
-- On Lemma reduce production target_rep_rhs_term -> Special String exps
-- On Inst_default reduce production target_rep_rhs_term -> Special String exps
-- On Inst reduce production target_rep_rhs_term -> Special String exps
-- On Indreln reduce production target_rep_rhs_term -> Special String exps
-- On Include_ reduce production target_rep_rhs_term -> Special String exps
-- On Import_ reduce production target_rep_rhs_term -> Special String exps
-- On Eof reduce production target_rep_rhs_term -> Special String exps
-- On End reduce production target_rep_rhs_term -> Special String exps
-- On Declare reduce production target_rep_rhs_term -> Special String exps
-- On Class_ reduce production target_rep_rhs_term -> Special String exps
-- On Assert reduce production target_rep_rhs_term -> Special String exps

State 667:
## Known stack suffix:
## Infix
## LR(1) items:
target_rep_rhs_term -> Infix . fixity_decl BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On RightAssoc shift to state 668
-- On NonAssoc shift to state 670
-- On LeftAssoc shift to state 672
-- On fixity_decl shift to state 674
## Reductions:
-- On BacktickString reduce production fixity_decl ->

State 668:
## Known stack suffix:
## RightAssoc
## LR(1) items:
fixity_decl -> RightAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 669
## Reductions:

State 669:
## Known stack suffix:
## RightAssoc Num
## LR(1) items:
fixity_decl -> RightAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString reduce production fixity_decl -> RightAssoc Num

State 670:
## Known stack suffix:
## NonAssoc
## LR(1) items:
fixity_decl -> NonAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 671
## Reductions:

State 671:
## Known stack suffix:
## NonAssoc Num
## LR(1) items:
fixity_decl -> NonAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString reduce production fixity_decl -> NonAssoc Num

State 672:
## Known stack suffix:
## LeftAssoc
## LR(1) items:
fixity_decl -> LeftAssoc . Num [ BacktickString ]
## Transitions:
-- On Num shift to state 673
## Reductions:

State 673:
## Known stack suffix:
## LeftAssoc Num
## LR(1) items:
fixity_decl -> LeftAssoc Num . [ BacktickString ]
## Transitions:
## Reductions:
-- On BacktickString reduce production fixity_decl -> LeftAssoc Num

State 674:
## Known stack suffix:
## Infix fixity_decl
## LR(1) items:
target_rep_rhs_term -> Infix fixity_decl . BacktickString [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 675
## Reductions:

State 675:
## Known stack suffix:
## Infix fixity_decl BacktickString
## LR(1) items:
target_rep_rhs_term -> Infix fixity_decl BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Type reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Theorem reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On SemiSemi reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Open_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Module_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Let_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Lemma reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Inst_default reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Inst reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Indreln reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Include_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Import_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Eof reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On End reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Declare reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Class_ reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString
-- On Assert reduce production target_rep_rhs_term -> Infix fixity_decl BacktickString

State 676:
## Known stack suffix:
## Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
## LR(1) items:
declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Type reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Theorem reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On SemiSemi reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Open_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Module_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Let_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Lemma reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Inst_default reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Inst reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Indreln reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Include_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Import_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Eof reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On End reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Declare reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Class_ reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term
-- On Assert reduce production declaration -> Declare target TargetRep component_term id x_ls Eq target_rep_rhs_term

State 677:
## Known stack suffix:
## exp
## LR(1) items:
target_rep_rhs_term -> exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production target_rep_rhs_term -> exp
-- On Type reduce production target_rep_rhs_term -> exp
-- On Theorem reduce production target_rep_rhs_term -> exp
-- On SemiSemi reduce production target_rep_rhs_term -> exp
-- On Open_ reduce production target_rep_rhs_term -> exp
-- On Module_ reduce production target_rep_rhs_term -> exp
-- On Let_ reduce production target_rep_rhs_term -> exp
-- On Lemma reduce production target_rep_rhs_term -> exp
-- On Inst_default reduce production target_rep_rhs_term -> exp
-- On Inst reduce production target_rep_rhs_term -> exp
-- On Indreln reduce production target_rep_rhs_term -> exp
-- On Include_ reduce production target_rep_rhs_term -> exp
-- On Import_ reduce production target_rep_rhs_term -> exp
-- On Eof reduce production target_rep_rhs_term -> exp
-- On End reduce production target_rep_rhs_term -> exp
-- On Declare reduce production target_rep_rhs_term -> exp
-- On Class_ reduce production target_rep_rhs_term -> exp
-- On Assert reduce production target_rep_rhs_term -> exp

State 678:
## Known stack suffix:
## Class_
## LR(1) items:
def -> Class_ . Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> Class_ . Inline Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 679
-- On Inline shift to state 697
## Reductions:

State 679:
## Known stack suffix:
## Class_ Lparen
## LR(1) items:
def -> Class_ Lparen . x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 680
## Reductions:

State 680:
## Known stack suffix:
## Class_ Lparen x
## LR(1) items:
def -> Class_ Lparen x . tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 681
## Reductions:

State 681:
## Known stack suffix:
## Class_ Lparen x tnvar
## LR(1) items:
def -> Class_ Lparen x tnvar . Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rparen shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen . class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 693
-- On class_val_spec shift to state 695
## Reductions:

State 683:
## Known stack suffix:
## Val
## LR(1) items:
class_val_spec -> Val . targets_opt x Colon typ [ Val End ]
class_val_spec -> Val . targets_opt x Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 684
## Reductions:
-- On X reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->

State 684:
## Known stack suffix:
## Val targets_opt
## LR(1) items:
class_val_spec -> Val targets_opt . x Colon typ [ Val End ]
class_val_spec -> Val targets_opt . x Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 685
## Reductions:

State 685:
## Known stack suffix:
## Val targets_opt x
## LR(1) items:
class_val_spec -> Val targets_opt x . Colon typ [ Val End ]
class_val_spec -> Val targets_opt x . Lsquare BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On Lsquare shift to state 686
-- On Colon shift to state 691
## Reductions:

State 686:
## Known stack suffix:
## Val targets_opt x Lsquare
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare . BacktickString Rsquare Colon typ [ Val End ]
## Transitions:
-- On BacktickString shift to state 687
## Reductions:

State 687:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString . Rsquare Colon typ [ Val End ]
## Transitions:
-- On Rsquare shift to state 688
## Reductions:

State 688:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare . Colon typ [ Val End ]
## Transitions:
-- On Colon shift to state 689
## Reductions:

State 689:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare Colon
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon . typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 690
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 690:
## Known stack suffix:
## Val targets_opt x Lsquare BacktickString Rsquare Colon typ
## LR(1) items:
class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon typ . [ Val End ]
## Transitions:
## Reductions:
-- On Val reduce production class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon typ
-- On End reduce production class_val_spec -> Val targets_opt x Lsquare BacktickString Rsquare Colon typ

State 691:
## Known stack suffix:
## Val targets_opt x Colon
## LR(1) items:
class_val_spec -> Val targets_opt x Colon . typ [ Val End ]
## Transitions:
-- On X shift to state 2
-- On Under shift to state 43
-- On Tyvar shift to state 44
-- On Lparen shift to state 45
-- On BacktickString shift to state 46
-- On x shift to state 50
-- On typ shift to state 692
-- On star_typ_list shift to state 55
-- On star_typ shift to state 56
-- On id_help shift to state 59
-- On id shift to state 60
-- On atomic_typ shift to state 68
-- On app_typ shift to state 69
## Reductions:

State 692:
## Known stack suffix:
## Val targets_opt x Colon typ
## LR(1) items:
class_val_spec -> Val targets_opt x Colon typ . [ Val End ]
## Transitions:
## Reductions:
-- On Val reduce production class_val_spec -> Val targets_opt x Colon typ
-- On End reduce production class_val_spec -> Val targets_opt x Colon typ

State 693:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen class_val_specs
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen class_val_specs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## Class_ Lparen x tnvar Rparen class_val_specs End
## LR(1) items:
def -> Class_ Lparen x tnvar Rparen class_val_specs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Type reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Theorem reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On SemiSemi reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Open_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Module_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Let_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Lemma reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Inst_default reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Inst reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Indreln reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Include_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Import_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Eof reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On End reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Declare reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Class_ reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End
-- On Assert reduce production def -> Class_ Lparen x tnvar Rparen class_val_specs End

State 695:
## Known stack suffix:
## class_val_spec
## LR(1) items:
class_val_specs -> class_val_spec . [ End ]
class_val_specs -> class_val_spec . class_val_specs [ End ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 696
-- On class_val_spec shift to state 695
## Reductions:
-- On End reduce production class_val_specs -> class_val_spec

State 696:
## Known stack suffix:
## class_val_spec class_val_specs
## LR(1) items:
class_val_specs -> class_val_spec class_val_specs . [ End ]
## Transitions:
## Reductions:
-- On End reduce production class_val_specs -> class_val_spec class_val_specs

State 697:
## Known stack suffix:
## Class_ Inline
## LR(1) items:
def -> Class_ Inline . Lparen x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Lparen shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## Class_ Inline Lparen
## LR(1) items:
def -> Class_ Inline Lparen . x tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## Class_ Inline Lparen x
## LR(1) items:
def -> Class_ Inline Lparen x . tnvar Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Tyvar shift to state 83
-- On Nvar shift to state 84
-- On tnvar shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## Class_ Inline Lparen x tnvar
## LR(1) items:
def -> Class_ Inline Lparen x tnvar . Rparen class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Rparen shift to state 701
## Reductions:

State 701:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen . class_val_specs End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Val shift to state 683
-- On class_val_specs shift to state 702
-- On class_val_spec shift to state 695
## Reductions:

State 702:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen class_val_specs
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen class_val_specs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 703
## Reductions:

State 703:
## Known stack suffix:
## Class_ Inline Lparen x tnvar Rparen class_val_specs End
## LR(1) items:
def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Type reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Theorem reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On SemiSemi reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Open_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Module_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Let_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Lemma reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Inst_default reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Inst reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Indreln reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Include_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Import_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Eof reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On End reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Declare reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Class_ reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End
-- On Assert reduce production def -> Class_ Inline Lparen x tnvar Rparen class_val_specs End

State 704:
## Known stack suffix:
## Assert
## LR(1) items:
lemma_typ -> Assert . [ X NonExec NegLcurly Lparen Lcurly ]
## Transitions:
## Reductions:
-- On X reduce production lemma_typ -> Assert
-- On NonExec reduce production lemma_typ -> Assert
-- On NegLcurly reduce production lemma_typ -> Assert
-- On Lparen reduce production lemma_typ -> Assert
-- On Lcurly reduce production lemma_typ -> Assert

State 705:
## Known stack suffix:
## val_spec
## LR(1) items:
def -> val_spec . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> val_spec
-- On Type reduce production def -> val_spec
-- On Theorem reduce production def -> val_spec
-- On SemiSemi reduce production def -> val_spec
-- On Open_ reduce production def -> val_spec
-- On Module_ reduce production def -> val_spec
-- On Let_ reduce production def -> val_spec
-- On Lemma reduce production def -> val_spec
-- On Inst_default reduce production def -> val_spec
-- On Inst reduce production def -> val_spec
-- On Indreln reduce production def -> val_spec
-- On Include_ reduce production def -> val_spec
-- On Import_ reduce production def -> val_spec
-- On Eof reduce production def -> val_spec
-- On End reduce production def -> val_spec
-- On Declare reduce production def -> val_spec
-- On Class_ reduce production def -> val_spec
-- On Assert reduce production def -> val_spec

State 706:
## Known stack suffix:
## val_def
## LR(1) items:
def -> val_def . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> val_def
-- On Type reduce production def -> val_def
-- On Theorem reduce production def -> val_def
-- On SemiSemi reduce production def -> val_def
-- On Open_ reduce production def -> val_def
-- On Module_ reduce production def -> val_def
-- On Let_ reduce production def -> val_def
-- On Lemma reduce production def -> val_def
-- On Inst_default reduce production def -> val_def
-- On Inst reduce production def -> val_def
-- On Indreln reduce production def -> val_def
-- On Include_ reduce production def -> val_def
-- On Import_ reduce production def -> val_def
-- On Eof reduce production def -> val_def
-- On End reduce production def -> val_def
-- On Declare reduce production def -> val_def
-- On Class_ reduce production def -> val_def
-- On Assert reduce production def -> val_def

State 707:
## Known stack suffix:
## open_import
## LR(1) items:
def -> open_import . targets_opt backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
def -> open_import . ids [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lparen shift to state 3
-- On Lcurly shift to state 179
-- On x shift to state 50
-- On targets_opt shift to state 708
-- On ids shift to state 712
-- On id_help shift to state 59
-- On id shift to state 713
## Reductions:
-- On BacktickString reduce production targets_opt ->

State 708:
## Known stack suffix:
## open_import targets_opt
## LR(1) items:
def -> open_import targets_opt . backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 709
-- On backtickstrings shift to state 711
## Reductions:

State 709:
## Known stack suffix:
## BacktickString
## LR(1) items:
backtickstrings -> BacktickString . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
backtickstrings -> BacktickString . backtickstrings [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On BacktickString shift to state 709
-- On backtickstrings shift to state 710
## Reductions:
-- On Val reduce production backtickstrings -> BacktickString
-- On Type reduce production backtickstrings -> BacktickString
-- On Theorem reduce production backtickstrings -> BacktickString
-- On SemiSemi reduce production backtickstrings -> BacktickString
-- On Open_ reduce production backtickstrings -> BacktickString
-- On Module_ reduce production backtickstrings -> BacktickString
-- On Let_ reduce production backtickstrings -> BacktickString
-- On Lemma reduce production backtickstrings -> BacktickString
-- On Inst_default reduce production backtickstrings -> BacktickString
-- On Inst reduce production backtickstrings -> BacktickString
-- On Indreln reduce production backtickstrings -> BacktickString
-- On Include_ reduce production backtickstrings -> BacktickString
-- On Import_ reduce production backtickstrings -> BacktickString
-- On Eof reduce production backtickstrings -> BacktickString
-- On End reduce production backtickstrings -> BacktickString
-- On Declare reduce production backtickstrings -> BacktickString
-- On Class_ reduce production backtickstrings -> BacktickString
-- On Assert reduce production backtickstrings -> BacktickString

State 710:
## Known stack suffix:
## BacktickString backtickstrings
## LR(1) items:
backtickstrings -> BacktickString backtickstrings . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production backtickstrings -> BacktickString backtickstrings
-- On Type reduce production backtickstrings -> BacktickString backtickstrings
-- On Theorem reduce production backtickstrings -> BacktickString backtickstrings
-- On SemiSemi reduce production backtickstrings -> BacktickString backtickstrings
-- On Open_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Module_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Let_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Lemma reduce production backtickstrings -> BacktickString backtickstrings
-- On Inst_default reduce production backtickstrings -> BacktickString backtickstrings
-- On Inst reduce production backtickstrings -> BacktickString backtickstrings
-- On Indreln reduce production backtickstrings -> BacktickString backtickstrings
-- On Include_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Import_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Eof reduce production backtickstrings -> BacktickString backtickstrings
-- On End reduce production backtickstrings -> BacktickString backtickstrings
-- On Declare reduce production backtickstrings -> BacktickString backtickstrings
-- On Class_ reduce production backtickstrings -> BacktickString backtickstrings
-- On Assert reduce production backtickstrings -> BacktickString backtickstrings

State 711:
## Known stack suffix:
## open_import targets_opt backtickstrings
## LR(1) items:
def -> open_import targets_opt backtickstrings . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> open_import targets_opt backtickstrings
-- On Type reduce production def -> open_import targets_opt backtickstrings
-- On Theorem reduce production def -> open_import targets_opt backtickstrings
-- On SemiSemi reduce production def -> open_import targets_opt backtickstrings
-- On Open_ reduce production def -> open_import targets_opt backtickstrings
-- On Module_ reduce production def -> open_import targets_opt backtickstrings
-- On Let_ reduce production def -> open_import targets_opt backtickstrings
-- On Lemma reduce production def -> open_import targets_opt backtickstrings
-- On Inst_default reduce production def -> open_import targets_opt backtickstrings
-- On Inst reduce production def -> open_import targets_opt backtickstrings
-- On Indreln reduce production def -> open_import targets_opt backtickstrings
-- On Include_ reduce production def -> open_import targets_opt backtickstrings
-- On Import_ reduce production def -> open_import targets_opt backtickstrings
-- On Eof reduce production def -> open_import targets_opt backtickstrings
-- On End reduce production def -> open_import targets_opt backtickstrings
-- On Declare reduce production def -> open_import targets_opt backtickstrings
-- On Class_ reduce production def -> open_import targets_opt backtickstrings
-- On Assert reduce production def -> open_import targets_opt backtickstrings

State 712:
## Known stack suffix:
## open_import ids
## LR(1) items:
def -> open_import ids . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> open_import ids
-- On Type reduce production def -> open_import ids
-- On Theorem reduce production def -> open_import ids
-- On SemiSemi reduce production def -> open_import ids
-- On Open_ reduce production def -> open_import ids
-- On Module_ reduce production def -> open_import ids
-- On Let_ reduce production def -> open_import ids
-- On Lemma reduce production def -> open_import ids
-- On Inst_default reduce production def -> open_import ids
-- On Inst reduce production def -> open_import ids
-- On Indreln reduce production def -> open_import ids
-- On Include_ reduce production def -> open_import ids
-- On Import_ reduce production def -> open_import ids
-- On Eof reduce production def -> open_import ids
-- On End reduce production def -> open_import ids
-- On Declare reduce production def -> open_import ids
-- On Class_ reduce production def -> open_import ids
-- On Assert reduce production def -> open_import ids

State 713:
## Known stack suffix:
## id
## LR(1) items:
ids -> id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
ids -> id . ids [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 50
-- On ids shift to state 714
-- On id_help shift to state 59
-- On id shift to state 713
## Reductions:
-- On Val reduce production ids -> id
-- On Type reduce production ids -> id
-- On Theorem reduce production ids -> id
-- On SemiSemi reduce production ids -> id
-- On Open_ reduce production ids -> id
-- On Module_ reduce production ids -> id
-- On Let_ reduce production ids -> id
-- On Lemma reduce production ids -> id
-- On Inst_default reduce production ids -> id
-- On Inst reduce production ids -> id
-- On Indreln reduce production ids -> id
-- On Include_ reduce production ids -> id
-- On Import_ reduce production ids -> id
-- On Eof reduce production ids -> id
-- On End reduce production ids -> id
-- On Declare reduce production ids -> id
-- On Class_ reduce production ids -> id
-- On Assert reduce production ids -> id

State 714:
## Known stack suffix:
## id ids
## LR(1) items:
ids -> id ids . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production ids -> id ids
-- On Type reduce production ids -> id ids
-- On Theorem reduce production ids -> id ids
-- On SemiSemi reduce production ids -> id ids
-- On Open_ reduce production ids -> id ids
-- On Module_ reduce production ids -> id ids
-- On Let_ reduce production ids -> id ids
-- On Lemma reduce production ids -> id ids
-- On Inst_default reduce production ids -> id ids
-- On Inst reduce production ids -> id ids
-- On Indreln reduce production ids -> id ids
-- On Include_ reduce production ids -> id ids
-- On Import_ reduce production ids -> id ids
-- On Eof reduce production ids -> id ids
-- On End reduce production ids -> id ids
-- On Declare reduce production ids -> id ids
-- On Class_ reduce production ids -> id ids
-- On Assert reduce production ids -> id ids

State 715:
## Known stack suffix:
## lemma_typ
## LR(1) items:
lemma -> lemma_typ . targets_opt x Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On NonExec shift to state 171
-- On NegLcurly shift to state 172
-- On Lcurly shift to state 179
-- On targets_opt shift to state 716
## Reductions:
-- On X reduce production targets_opt ->
-- On Lparen reduce production targets_opt ->

State 716:
## Known stack suffix:
## lemma_typ targets_opt
## LR(1) items:
lemma -> lemma_typ targets_opt . x Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On Lparen shift to state 3
-- On x shift to state 717
## Reductions:

State 717:
## Known stack suffix:
## lemma_typ targets_opt x
## LR(1) items:
lemma -> lemma_typ targets_opt x . Colon exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On Colon shift to state 718
## Reductions:

State 718:
## Known stack suffix:
## lemma_typ targets_opt x Colon
## LR(1) items:
lemma -> lemma_typ targets_opt x Colon . exp [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On X shift to state 2
-- On True shift to state 186
-- On String shift to state 187
-- On OctNum shift to state 188
-- On Nvar shift to state 258
-- On Num shift to state 189
-- On Match shift to state 259
-- On LtBar shift to state 260
-- On Lsquare shift to state 261
-- On Lparen shift to state 262
-- On Let_ shift to state 263
-- On Lcurly shift to state 267
-- On If_ shift to state 268
-- On HexNum shift to state 196
-- On Hex shift to state 197
-- On HashZero shift to state 198
-- On HashOne shift to state 199
-- On Function_ shift to state 269
-- On Fun_ shift to state 275
-- On Forall shift to state 279
-- On False shift to state 200
-- On Exists shift to state 283
-- On Do shift to state 288
-- On Char shift to state 201
-- On BraceBar shift to state 292
-- On BinNum shift to state 203
-- On Bin shift to state 204
-- On Begin_ shift to state 293
-- On BacktickString shift to state 294
-- On x shift to state 50
-- On starstar_right_atomic_exp shift to state 295
-- On starstar_exp shift to state 296
-- On star_right_atomic_exp shift to state 297
-- On star_exp shift to state 298
-- On right_atomic_exp shift to state 302
-- On plus_right_atomic_exp shift to state 331
-- On plus_exp shift to state 332
-- On or_right_atomic_exp shift to state 342
-- On or_exp shift to state 343
-- On lit shift to state 303
-- On imp_right_atomic_exp shift to state 397
-- On imp_exp shift to state 398
-- On id_help shift to state 59
-- On id shift to state 304
-- On field_exp shift to state 312
-- On exp shift to state 719
-- On eq_right_atomic_exp shift to state 347
-- On eq_exp shift to state 348
-- On cons_right_atomic_exp shift to state 350
-- On cons_exp shift to state 351
-- On atomic_exp shift to state 313
-- On at_right_atomic_exp shift to state 388
-- On at_exp shift to state 389
-- On app_exp shift to state 323
-- On and_right_atomic_exp shift to state 392
-- On and_exp shift to state 393
## Reductions:

State 719:
## Known stack suffix:
## lemma_typ targets_opt x Colon exp
## LR(1) items:
lemma -> lemma_typ targets_opt x Colon exp . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Type reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Theorem reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On SemiSemi reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Open_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Module_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Let_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Lemma reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Inst_default reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Inst reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Indreln reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Include_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Import_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Eof reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On End reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Declare reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Class_ reduce production lemma -> lemma_typ targets_opt x Colon exp
-- On Assert reduce production lemma -> lemma_typ targets_opt x Colon exp

State 720:
## Known stack suffix:
## lemma
## LR(1) items:
def -> lemma . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> lemma
-- On Type reduce production def -> lemma
-- On Theorem reduce production def -> lemma
-- On SemiSemi reduce production def -> lemma
-- On Open_ reduce production def -> lemma
-- On Module_ reduce production def -> lemma
-- On Let_ reduce production def -> lemma
-- On Lemma reduce production def -> lemma
-- On Inst_default reduce production def -> lemma
-- On Inst reduce production def -> lemma
-- On Indreln reduce production def -> lemma
-- On Include_ reduce production def -> lemma
-- On Import_ reduce production def -> lemma
-- On Eof reduce production def -> lemma
-- On End reduce production def -> lemma
-- On Declare reduce production def -> lemma
-- On Class_ reduce production def -> lemma
-- On Assert reduce production def -> lemma

State 721:
## Known stack suffix:
## defs_help
## LR(1) items:
defs -> defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof reduce production defs -> defs_help
-- On End reduce production defs -> defs_help

State 722:
## Known stack suffix:
## Module_ x Eq Struct defs
## LR(1) items:
def -> Module_ x Eq Struct defs . End [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
-- On End shift to state 723
## Reductions:

State 723:
## Known stack suffix:
## Module_ x Eq Struct defs End
## LR(1) items:
def -> Module_ x Eq Struct defs End . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Module_ x Eq Struct defs End
-- On Type reduce production def -> Module_ x Eq Struct defs End
-- On Theorem reduce production def -> Module_ x Eq Struct defs End
-- On SemiSemi reduce production def -> Module_ x Eq Struct defs End
-- On Open_ reduce production def -> Module_ x Eq Struct defs End
-- On Module_ reduce production def -> Module_ x Eq Struct defs End
-- On Let_ reduce production def -> Module_ x Eq Struct defs End
-- On Lemma reduce production def -> Module_ x Eq Struct defs End
-- On Inst_default reduce production def -> Module_ x Eq Struct defs End
-- On Inst reduce production def -> Module_ x Eq Struct defs End
-- On Indreln reduce production def -> Module_ x Eq Struct defs End
-- On Include_ reduce production def -> Module_ x Eq Struct defs End
-- On Import_ reduce production def -> Module_ x Eq Struct defs End
-- On Eof reduce production def -> Module_ x Eq Struct defs End
-- On End reduce production def -> Module_ x Eq Struct defs End
-- On Declare reduce production def -> Module_ x Eq Struct defs End
-- On Class_ reduce production def -> Module_ x Eq Struct defs End
-- On Assert reduce production def -> Module_ x Eq Struct defs End

State 724:
## Known stack suffix:
## def
## LR(1) items:
defs_help -> def . [ Eof End ]
defs_help -> def . SemiSemi [ Eof End ]
defs_help -> def . defs_help [ Eof End ]
defs_help -> def . SemiSemi defs_help [ Eof End ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On SemiSemi shift to state 725
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 728
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:
-- On Eof reduce production defs_help -> def
-- On End reduce production defs_help -> def

State 725:
## Known stack suffix:
## def SemiSemi
## LR(1) items:
defs_help -> def SemiSemi . [ Eof End ]
defs_help -> def SemiSemi . defs_help [ Eof End ]
## Transitions:
-- On Val shift to state 1
-- On Type shift to state 120
-- On Theorem shift to state 162
-- On Open_ shift to state 163
-- On Module_ shift to state 165
-- On Let_ shift to state 169
-- On Lemma shift to state 506
-- On Inst_default shift to state 507
-- On Inst shift to state 537
-- On Indreln shift to state 541
-- On Include_ shift to state 594
-- On Import_ shift to state 596
-- On Declare shift to state 597
-- On Class_ shift to state 678
-- On Assert shift to state 704
-- On val_spec shift to state 705
-- On val_def shift to state 706
-- On open_import shift to state 707
-- On lemma_typ shift to state 715
-- On lemma shift to state 720
-- On defs_help shift to state 726
-- On def shift to state 724
-- On declaration shift to state 727
## Reductions:
-- On Eof reduce production defs_help -> def SemiSemi
-- On End reduce production defs_help -> def SemiSemi

State 726:
## Known stack suffix:
## def SemiSemi defs_help
## LR(1) items:
defs_help -> def SemiSemi defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof reduce production defs_help -> def SemiSemi defs_help
-- On End reduce production defs_help -> def SemiSemi defs_help

State 727:
## Known stack suffix:
## declaration
## LR(1) items:
def -> declaration . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> declaration
-- On Type reduce production def -> declaration
-- On Theorem reduce production def -> declaration
-- On SemiSemi reduce production def -> declaration
-- On Open_ reduce production def -> declaration
-- On Module_ reduce production def -> declaration
-- On Let_ reduce production def -> declaration
-- On Lemma reduce production def -> declaration
-- On Inst_default reduce production def -> declaration
-- On Inst reduce production def -> declaration
-- On Indreln reduce production def -> declaration
-- On Include_ reduce production def -> declaration
-- On Import_ reduce production def -> declaration
-- On Eof reduce production def -> declaration
-- On End reduce production def -> declaration
-- On Declare reduce production def -> declaration
-- On Class_ reduce production def -> declaration
-- On Assert reduce production def -> declaration

State 728:
## Known stack suffix:
## def defs_help
## LR(1) items:
defs_help -> def defs_help . [ Eof End ]
## Transitions:
## Reductions:
-- On Eof reduce production defs_help -> def defs_help
-- On End reduce production defs_help -> def defs_help

State 729:
## Known stack suffix:
## Module_ x Eq id
## LR(1) items:
def -> Module_ x Eq id . [ Val Type Theorem SemiSemi Open_ Module_ Let_ Lemma Inst_default Inst Indreln Include_ Import_ Eof End Declare Class_ Assert ]
## Transitions:
## Reductions:
-- On Val reduce production def -> Module_ x Eq id
-- On Type reduce production def -> Module_ x Eq id
-- On Theorem reduce production def -> Module_ x Eq id
-- On SemiSemi reduce production def -> Module_ x Eq id
-- On Open_ reduce production def -> Module_ x Eq id
-- On Module_ reduce production def -> Module_ x Eq id
-- On Let_ reduce production def -> Module_ x Eq id
-- On Lemma reduce production def -> Module_ x Eq id
-- On Inst_default reduce production def -> Module_ x Eq id
-- On Inst reduce production def -> Module_ x Eq id
-- On Indreln reduce production def -> Module_ x Eq id
-- On Include_ reduce production def -> Module_ x Eq id
-- On Import_ reduce production def -> Module_ x Eq id
-- On Eof reduce production def -> Module_ x Eq id
-- On End reduce production def -> Module_ x Eq id
-- On Declare reduce production def -> Module_ x Eq id
-- On Class_ reduce production def -> Module_ x Eq id
-- On Assert reduce production def -> Module_ x Eq id

State 730:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On # accept file

State 731:
## Known stack suffix:
## defs
## LR(1) items:
file -> defs . Eof [ # ]
## Transitions:
-- On Eof shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## defs Eof
## LR(1) items:
file -> defs Eof . [ # ]
## Transitions:
## Reductions:
-- On # reduce production file -> defs Eof

