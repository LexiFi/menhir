File "lem.mly", line 165, characters 22-28:
Warning: the token Module is unused.
File "lem.mly", line 157, characters 66-69:
Warning: the token Oct is unused.
File "lem.mly", line 161, characters 41-52:
Warning: the token TargetConst is unused.
File "lem.mly", line 161, characters 30-40:
Warning: the token TargetType is unused.
File "lem.mly", line 1149, characters 0-20:
Warning: symbol semi_backtickstrings is unreachable from any of the start symbol(s).
File "lem.mly", line 1141, characters 0-25:
Warning: symbol semi_backtickstrings_help is unreachable from any of the start symbol(s).
%{
(*
  There are 3 ambiguities that OCaml solves with the first letter case
  distinction for identifiers:
   - In a long identifier a.b.c.d.e, which dots are record projections and
     which are module projections
   - In type t = u, whether u should refer to an existing type constructor, or
     be defined as a nullary data constructor
   - In let x y = exp, whether a function x of 1 argument is declared, or if
     x y is taken to be a constructor pattern, so a value is bound for y.

   In the first case, I assume all module projections and let the type system
   disambiguate

   In the other two cases I default to type constructor, and function respectively.
   I believe these should be the common case.  In the latter, parens allow the other
   meaning, as in let (x y) = exp.  In the former, a bar allows the other
   meaning, as in type t = | u .


   TODO KG: In VAccessR, Dot Dot either needs both dots in the data structure, which is difficult from ott, or DotDot with no space

   *)
let r = Ulib.Text.of_latin1

open Ast

let loc () = Range(Parsing.symbol_start_pos(),Parsing.symbol_end_pos())
let locn m n = Range(Parsing.rhs_start_pos m,Parsing.rhs_end_pos n)

let tloc t = Typ_l(t,loc ())
let nloc n = Length_l(n,loc ())
let lloc l = Lit_l(l,loc ())
let ploc p = Pat_l(p,loc ())
let eloc e = Expr_l(e,loc ())
let lbloc lb = Letbind(lb,loc ())
let dloc d = Def_l(d,loc ())
let irloc ir = Rule_l(ir,loc())
let reclloc fcl = Rec_l(fcl,loc())

let pat_dest_id_app p =
  match p with
    | Pat_l(P_app(Id([],v,_),a),_) ->
        Some((v,a))
    | _ ->
        None

let pat_to_letfun p =
  match p with
    | Pat_l(P_app(Id([],v,_),(arg::args as a)),_) ->
        (v,a)
    | Pat_l(_,l) ->
        raise (Parse_error_locn(l,"Bad pattern for let binding of a function"))

let get_target (s1,n) =
  if Ulib.Text.compare n (r"hol") = 0 then
    Target_hol(s1)
  else if Ulib.Text.compare n (r"ocaml") = 0 then
    Target_ocaml(s1)
  else if Ulib.Text.compare n (r"coq") = 0 then
    Target_coq(s1)
  else if Ulib.Text.compare n (r"isabelle") = 0 then
    Target_isa(s1)
  else if Ulib.Text.compare n (r"tex") = 0 then
    Target_tex(s1)
  else if Ulib.Text.compare n (r"html") = 0 then
    Target_html(s1)
  else if Ulib.Text.compare n (r"lem") = 0 then
    Target_lem(s1)
  else
    raise (Parse_error_locn(loc (),"Expected substitution target in {hol; isabelle; ocaml; coq; tex; html}, given " ^ Ulib.Text.to_string n))

let build_fexp (Expr_l(e,_)) l =
  match e with
    | Infix(Expr_l(Ident(i), l'),SymX_l((stx,op),l''),e2) when Ulib.Text.compare op (r"=") = 0 ->
        Fexp(i, stx, e2, l)
    | _ ->
        raise (Parse_error_locn(l,"Invalid record field assignment (should be id = exp)"))

let mod_cap n =
  if not (Name.starts_with_upper_letter (Name.strip_lskip (Name.from_x n))) then
    raise (Parse_error_locn(Ast.xl_to_l n, "Module name must begin with an upper-case letter"))
  else
    ()

let space = Ulib.Text.of_latin1 " "
let star = Ulib.Text.of_latin1 "*"

let mk_pre_x_l sk1 (sk2,id) sk3 l =
  if (sk2 = None || sk2 = Some []) && (sk3 = None || sk3 = Some []) then
    PreX_l(sk1,(None,id),None,l)
  else if (sk2 = Some [Ws space] &&
           sk3 = Some [Ws space] &&
           (Ulib.Text.left id 1 = star ||
            Ulib.Text.right id 1 = star)) then
    PreX_l(sk1,(None,id),None,l)
  else
    raise (Parse_error_locn(l, "illegal whitespace in parenthesised infix name"))


%}
%start file
%token <Ast.terminal * Ulib.Text.t> AmpAmp
%token <Ast.terminal> And
%token <Ast.terminal> Arrow
%token <Ast.terminal> As
%token <Ast.terminal> AsciiRep
%token <Ast.terminal> Assert
%token <Ast.terminal * Ulib.Text.t> At
%token <Ast.terminal * Ulib.Text.t> AtX
%token <Ast.terminal> Automatic
%token <Ast.terminal * string> BacktickString
%token <Ast.terminal> Bar
%token <Ast.terminal * Ulib.Text.t> BarBar
%token <Ast.terminal> BarBrace
%token <Ast.terminal> BarGt
%token <Ast.terminal> Begin_
%token <Ast.terminal * string> Bin
%token <Ast.terminal * (int * string)> BinNum
%token <Ast.terminal> BraceBar
%token <Ast.terminal * string> Char
%token <Ast.terminal> Check
%token <Ast.terminal> Class_
%token <Ast.terminal> Colon
%token <Ast.terminal * Ulib.Text.t> ColonColon
%token <Ast.terminal> Comma
%token <Ast.terminal> CompileMessage
%token <Ast.terminal> Declare
%token <Ast.terminal> Do
%token <Ast.terminal> Dot
%token <Ast.terminal> DotBrace
%token <Ast.terminal> Else
%token <Ast.terminal> End
%token <Ast.terminal> Eof
%token <Ast.terminal * Ulib.Text.t> Eq
%token <Ast.terminal> EqEqGt
%token <Ast.terminal> EqGt
%token <Ast.terminal * Ulib.Text.t> EqualX
%token <Ast.terminal> Exhaustive
%token <Ast.terminal> Exists
%token <Ast.terminal> False
%token <Ast.terminal> Field
%token <Ast.terminal> Forall
%token <Ast.terminal> Fun_
%token <Ast.terminal> Function_
%token <Ast.terminal * Ulib.Text.t> GtEq
%token <Ast.terminal * Ulib.Text.t> GtEqX
%token <Ast.terminal> HashOne
%token <Ast.terminal> HashZero
%token <Ast.terminal * string> Hex
%token <Ast.terminal * (int * string)> HexNum
%token <Ast.terminal * Ulib.Text.t> IN
%token <Ast.terminal> If_
%token <Ast.terminal> Import_
%token <Ast.terminal> In
%token <Ast.terminal> Include_
%token <Ast.terminal> Indreln
%token <Ast.terminal> Inexhaustive
%token <Ast.terminal> Infix
%token <Ast.terminal> Inline
%token <Ast.terminal> Inst
%token <Ast.terminal> Inst_default
%token <Ast.terminal> Lcurly
%token <Ast.terminal> LeftArrow
%token <Ast.terminal> LeftAssoc
%token <Ast.terminal> Lem_transform
%token <Ast.terminal> Lemma
%token <Ast.terminal> Let_
%token <Ast.terminal> Lparen
%token <Ast.terminal> Lsquare
%token <Ast.terminal> LtBar
%token <Ast.terminal * Ulib.Text.t> MEM
%token <Ast.terminal> Manual
%token <Ast.terminal> Match
%token <Ast.terminal * Ulib.Text.t> MinusMinusGt
%token <Ast.terminal> Module
%token <Ast.terminal> Module_
%token <Ast.terminal> NegLcurly
%token <Ast.terminal> NonAssoc
%token <Ast.terminal> NonExec
%token <Ast.terminal * (int * string)> Num
%token <Ast.terminal * Ulib.Text.t> Nvar
%token <Ast.terminal * string> Oct
%token <Ast.terminal * (int * string)> OctNum
%token <Ast.terminal> Of
%token <Ast.terminal> Open_
%token <Ast.terminal> PatternMatch
%token <Ast.terminal * Ulib.Text.t> Plus
%token <Ast.terminal * Ulib.Text.t> PlusX
%token <Ast.terminal> Rcurly
%token <Ast.terminal> Rec
%token <Ast.terminal> Rename
%token <Ast.terminal> RightAssoc
%token <Ast.terminal> Rparen
%token <Ast.terminal> Rsquare
%token <Ast.terminal> Semi
%token <Ast.terminal> SemiSemi
%token <Ast.terminal> SetFlag
%token <Ast.terminal> Special
%token <Ast.terminal * Ulib.Text.t> Star
%token <Ast.terminal * Ulib.Text.t> StarX
%token <Ast.terminal * Ulib.Text.t> StarstarX
%token <Ast.terminal * string> String
%token <Ast.terminal> Struct
%token <Ast.terminal> TargetConst
%token <Ast.terminal> TargetRep
%token <Ast.terminal> TargetType
%token <Ast.terminal> TerminationArgument
%token <Ast.terminal> Then
%token <Ast.terminal> Theorem
%token <Ast.terminal> True
%token <Ast.terminal> Type
%token <Ast.terminal * Ulib.Text.t> Tyvar
%token <Ast.terminal> Under
%token <Ast.terminal> Val
%token <Ast.terminal> With
%token <Ast.terminal> Witness
%token <Ast.terminal * Ulib.Text.t> X
%type <Ast.defs> defs
%type <Ast.exp> exp
%type <Ast.defs * Ast.terminal> file
%type <Ast.pat> pat
%type <Ast.typ> typ
%%

x:
  _1 = X
    {    ( X_l(_1, loc ()) )}
| _1 = Lparen _2 = Eq _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = IN _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = MEM _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = MinusMinusGt _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = AmpAmp _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = BarBar _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = ColonColon _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = Star _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = Plus _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = GtEq _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = PlusX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = StarX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = GtEqX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = EqualX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = StarstarX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = At _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}
| _1 = Lparen _2 = AtX _3 = Rparen
    {    ( mk_pre_x_l _1 _2 _3 (loc ()) )}

id:
  _1 = id_help
    {    ( Id(fst _1, snd _1, loc ()) )}

id_help:
  _1 = x
    {    ( ([],_1) )}
| _1 = x _2 = Dot _3 = id_help
    {    ( let (l,last) = _3 in
        ((_1,_2)::l, last) )}

tnvar:
  _1 = Tyvar
    {    ( Avl(A_l((fst _1, snd _1), loc ())) )}
| _1 = Nvar
    {    ( Nvl(N_l((fst _1, snd _1), loc ())) )}

atomic_typ:
  _1 = Under
    {    ( tloc (Typ_wild(_1)) )}
| _1 = Tyvar
    {    ( tloc (Typ_var(A_l((fst _1, snd _1), loc()))) )}
| _1 = id
    {    ( tloc (Typ_app(_1,[])) )}
| _1 = BacktickString
    {    ( tloc (Typ_backend(fst _1,snd _1, [])) )}
| _1 = Lparen _2 = typ _3 = Rparen
    {    ( tloc (Typ_paren(_1,_2,_3)) )}

appt_typ:
  _1 = atomic_typ
    {    ( _1 )}
| _1 = atomic_nexp
    {    ( tloc (Typ_Nexps(_1)) )}

atomic_typs:
  _1 = appt_typ
    {    ( [_1] )}
| _1 = appt_typ _2 = atomic_typs
    {    ( _1::_2 )}

app_typ:
  _1 = atomic_typ
    {    ( _1 )}
| _1 = id _2 = atomic_typs
    {    ( tloc (Typ_app(_1,_2)) )}
| _1 = BacktickString _2 = atomic_typs
    {    ( tloc (Typ_backend(fst _1,snd _1, _2)) )}

star_typ_list:
  _1 = app_typ
    {    ( [(_1,None)] )}
| _1 = app_typ _2 = Star _3 = star_typ_list
    {    ( (_1,fst _2)::_3 )}

star_typ:
  _1 = star_typ_list
    {    ( match _1 with
        | [] -> assert false
        | [(t,None)] -> t
        | [(t,Some _)] -> assert false
        | ts -> tloc (Typ_tup(ts)) )}

typ:
  _1 = star_typ
    {    ( _1 )}
| _1 = star_typ _2 = Arrow _3 = typ
    {    ( tloc (Typ_fn(_1,_2,_3)) )}

atomic_nexp:
  _1 = Nvar
    {     ( nloc (Nexp_var (fst _1, snd _1)) )}
| _1 = Num
    {     ( nloc (Nexp_constant(fst _1, fst (snd _1))) )}
| _1 = Lparen _2 = nexp _3 = Rparen
    {     ( nloc (Nexp_paren(_1,_2,_3)) )}

star_nexp:
  _1 = atomic_nexp
    {     ( _1 )}
| _1 = atomic_nexp _2 = Star _3 = star_nexp
    {     ( nloc (Nexp_times(_1, fst _2, _3)) )}

nexp:
  _1 = star_nexp
    {     ( _1 )}
| _1 = star_nexp _2 = Plus _3 = nexp
    {     ( nloc (Nexp_sum(_1,fst _2,_3)) )}

lit:
  _1 = True
    {    ( lloc (L_true(_1)) )}
| _1 = False
    {    ( lloc (L_false(_1)) )}
| _1 = Num
    {    ( lloc (L_num(fst _1, (snd (snd _1)))) )}
| _1 = BinNum
    {    ( lloc (L_num(fst _1, (snd (snd _1)))) )}
| _1 = OctNum
    {    ( lloc (L_num(fst _1, (snd (snd _1)))) )}
| _1 = HexNum
    {    ( lloc (L_num(fst _1, (snd (snd _1)))) )}
| _1 = String
    {    ( lloc (L_string(fst _1, snd _1)) )}
| _1 = Char
    {    ( lloc (L_char(fst _1, snd _1)) )}
| _1 = Lparen _2 = Rparen
    {    ( lloc (L_unit(_1,_2)) )}
| _1 = HashZero
    {    ( lloc (L_zero(_1)) )}
| _1 = HashOne
    {    ( lloc (L_one(_1)) )}
| _1 = Bin
    {    ( lloc (L_bin(fst _1, snd _1)) )}
| _1 = Hex
    {    ( lloc (L_hex(fst _1, snd _1)) )}

atomic_pat:
  _1 = Under
    {    ( ploc (P_wild(_1)) )}
| _1 = id
    {    ( ploc (P_app(_1,[])) )}
| _1 = Lparen _2 = pat _3 = Colon _4 = typ _5 = Rparen
    {    ( ploc (P_typ(_1,_2,_3,_4,_5)) )}
| _1 = LtBar _2 = fpats _3 = BarGt
    {    ( ploc (P_record(_1,fst _2,fst (snd _2),snd (snd _2),_3)) )}
| _1 = BraceBar _2 = semi_pats_atomic _3 = BarBrace
    {    ( ploc (P_vector(_1,fst _2,fst (snd _2),snd (snd _2),_3)) )}
| _1 = BraceBar _2 = atomic_pats_two _3 = BarBrace
    {    ( ploc (P_vectorC(_1, _2, _3)) )}
| _1 = Lparen _2 = comma_pats _3 = Rparen
    {    ( ploc (P_tup(_1,_2,_3)) )}
| _1 = Lparen _2 = pat _3 = Rparen
    {    ( ploc (P_paren(_1,_2,_3)) )}
| _1 = Lsquare _2 = semi_pats _3 = Rsquare
    {    ( ploc (P_list(_1,fst _2,fst (snd _2),snd (snd _2),_3)) )}
| _1 = lit
    {    ( ploc (P_lit(_1)) )}
| _1 = Lparen _2 = pat _3 = As _4 = x _5 = Rparen
    {    ( ploc (P_as(_1,_2,_3,_4,_5)) )}
| _1 = x _2 = Plus _3 = Num
    {    ( ploc (P_num_add(_1,fst _2,fst _3, fst (snd _3))) )}

atomic_pats:
  _1 = atomic_pat
    {    ( [_1] )}
| _1 = atomic_pat _2 = atomic_pats
    {    ( _1::_2 )}

atomic_pats_two:
  _1 = atomic_pat _2 = atomic_pat
    {    ( [_1;_2] )}
| _1 = atomic_pat _2 = atomic_pats_two
    {    ( _1::_2 )}

app_pat:
  _1 = atomic_pat
    {    ( _1 )}
| _1 = id _2 = atomic_pats
    {    ( ploc (P_app(_1,_2)) )}

pat:
  _1 = app_pat
    {    ( _1 )}
| _1 = app_pat _2 = ColonColon _3 = pat
    {    ( ploc (P_cons(_1,fst _2,_3)) )}

semi_pats_atomic:
  _1 = atomic_pat
    {    ( ([(_1,None)], (None,false)))}
| _1 = atomic_pat _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = atomic_pat _2 = Semi _3 = semi_pats_atomic
    {    ( ((_1,_2)::fst _3, snd _3) )}

semi_pats_help:
  _1 = pat
    {    ( ([(_1,None)], (None,false)) )}
| _1 = pat _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = pat _2 = Semi _3 = semi_pats_help
    {    ( ((_1,_2)::fst _3, snd _3) )}

semi_pats:
  
    {    ( ([], (None, false)) )}
| _1 = semi_pats_help
    {    ( _1 )}

comma_pats:
  _1 = pat _2 = Comma _3 = pat
    {    ( [(_1,_2);(_3,None)] )}
| _1 = pat _2 = Comma _3 = comma_pats
    {    ( (_1,_2)::_3 )}

fpat:
  _1 = id _2 = Eq _3 = pat
    {    ( Fpat(_1,fst _2,_3,loc ()) )}

fpats:
  _1 = fpat
    {    ( ([(_1,None)], (None,false)) )}
| _1 = fpat _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = fpat _2 = Semi _3 = fpats
    {    ( ((_1,_2)::fst _3, snd _3) )}

atomic_exp:
  _1 = LtBar _2 = fexps _3 = BarGt
    {    ( eloc (Record(_1,_2,_3)) )}
| _1 = LtBar _2 = at_exp _3 = With _4 = fexps _5 = BarGt
    {    ( eloc (Recup(_1,_2,_3,_4,_5)) )}
| _1 = Lparen _2 = exp _3 = Colon _4 = typ _5 = Rparen
    {    ( eloc (Typed(_1,_2,_3,_4,_5)) )}
| _1 = BraceBar _2 = semi_exps _3 = BarBrace
    {    ( eloc (Vector(_1,fst _2, fst (snd _2), snd (snd _2), _3)) )}
| _1 = Lsquare _2 = semi_exps _3 = Rsquare
    {    ( eloc (Elist(_1,fst _2,fst (snd _2), snd (snd _2), _3)) )}
| _1 = Lparen _2 = comma_exps _3 = Rparen
    {    ( eloc (Tup(_1,_2,_3)) )}
| _1 = Lparen _2 = exp _3 = Rparen
    {    ( eloc (Paren(_1,_2,_3)) )}
| _1 = Begin_ _2 = exp _3 = End
    {    ( eloc (Begin(_1,_2,_3)) )}
| _1 = lit
    {    ( eloc (Lit(_1)) )}
| _1 = BacktickString
    {    ( eloc (Backend (fst _1, snd _1)) )}
| _1 = Nvar
    {    ( eloc (Nvar(_1)) )}
| _1 = Lcurly _2 = exp _3 = Bar _4 = exp _5 = Rcurly
    {    ( eloc (Setcomp(_1,_2,_3,_4,_5)) )}
| _1 = Lcurly _2 = exp _3 = Bar _4 = Forall _5 = quant_bindings _6 = Bar _7 = exp _8 = Rcurly
    {    ( eloc (Setcomp_binding(_1,_2,_3,_4,_5,_6,_7,_8)) )}
| _1 = Lcurly _2 = semi_exps _3 = Rcurly
    {    ( eloc (Set(_1,fst _2,fst (snd _2), snd (snd _2),_3)) )}
| _1 = Lsquare _2 = exp _3 = Bar _4 = Forall _5 = quant_bindings _6 = Bar _7 = exp _8 = Rsquare
    {    ( eloc (Listcomp(_1,_2,_3,_4,_5,_6,_7,_8)) )}
| _1 = Function_ _2 = patexps _3 = End
    {    ( eloc (Function(_1,None,false,_2,_3)) )}
| _1 = Function_ _2 = Bar _3 = patexps _4 = End
    {    ( eloc (Function(_1,_2,true,_3,_4)) )}
| _1 = Match _2 = exp _3 = With _4 = patexps _5 = End
    {    ( eloc (Case(_1,_2,_3,None,false,_4,locn 4 4,_5)) )}
| _1 = Match _2 = exp _3 = With _4 = Bar _5 = patexps _6 = End
    {    ( eloc (Case(_1,_2,_3,_4,true,_5,locn 5 5,_6)) )}
| _1 = Do _2 = id _3 = do_exps _4 = In _5 = exp _6 = End
    {    ( eloc (Do(_1,_2,_3,_4,_5,_6)) )}

field_exp:
  _1 = atomic_exp
    {    ( _1 )}
| _1 = atomic_exp _2 = Dot _3 = id
    {    ( eloc (Field(_1,_2,_3)) )}
| _1 = atomic_exp _2 = DotBrace _3 = nexp _4 = Rsquare
    {    ( eloc (VAccess(_1,_2,_3,_4)) )}
| _1 = atomic_exp _2 = DotBrace _3 = nexp _4 = Dot _5 = Dot _6 = nexp _7 = Rsquare
    {    ( eloc (VAccessR(_1,_2,_3,_4,_6,_7)) )}
| _1 = id _2 = DotBrace _3 = nexp _4 = Rsquare
    {    ( eloc (VAccess((eloc (Ident (_1))),_2,_3,_4)) )}
| _1 = id _2 = DotBrace _3 = nexp _4 = Dot _5 = Dot _6 = nexp _7 = Rsquare
    {    ( eloc (VAccessR((eloc (Ident (_1))),_2,_3,_4,_6,_7)) )}
| _1 = id
    {    ( eloc (Ident(_1)) )}

app_exp:
  _1 = field_exp
    {    ( _1 )}
| _1 = app_exp _2 = field_exp
    {    ( eloc (App(_1,_2)) )}

right_atomic_exp:
  _1 = Forall _2 = quant_bindings _3 = Dot _4 = exp
    {    ( eloc (Quant(Q_forall(_1), _2,_3,_4)) )}
| _1 = Exists _2 = quant_bindings _3 = Dot _4 = exp
    {    ( eloc (Quant(Q_exists(_1), _2,_3,_4)) )}
| _1 = If_ _2 = exp _3 = Then _4 = exp _5 = Else _6 = exp
    {    ( eloc (If(_1,_2,_3,_4,_5,_6)) )}
| _1 = Fun_ _2 = patsexp
    {    ( eloc (Fun(_1,_2)) )}
| _1 = Let_ _2 = letbind _3 = In _4 = exp
    {    ( eloc (Let(_1,_2,_3,_4)) )}

starstar_exp:
  _1 = app_exp
    {    ( _1 )}
| _1 = app_exp _2 = StarstarX _3 = starstar_exp
    {    ( eloc (Infix(_1, SymX_l(_2, locn 2 2), _3)) )}

starstar_right_atomic_exp:
  _1 = right_atomic_exp
    {    ( _1 )}
| _1 = app_exp _2 = StarstarX _3 = starstar_right_atomic_exp
    {    ( eloc (Infix(_1, SymX_l(_2, locn 2 2), _3)) )}

star_exp:
  _1 = starstar_exp
    {    ( _1 )}
| _1 = star_exp _2 = Star _3 = starstar_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = star_exp _2 = StarX _3 = starstar_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

star_right_atomic_exp:
  _1 = starstar_right_atomic_exp
    {    ( _1 )}
| _1 = star_exp _2 = Star _3 = starstar_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = star_exp _2 = StarX _3 = starstar_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

plus_exp:
  _1 = star_exp
    {    ( _1 )}
| _1 = plus_exp _2 = Plus _3 = star_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = plus_exp _2 = PlusX _3 = star_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

plus_right_atomic_exp:
  _1 = star_right_atomic_exp
    {    ( _1 )}
| _1 = plus_exp _2 = Plus _3 = star_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = plus_exp _2 = PlusX _3 = star_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

cons_exp:
  _1 = plus_exp
    {    ( _1 )}
| _1 = plus_exp _2 = ColonColon _3 = cons_exp
    {    ( eloc (Cons(_1,fst _2,_3)) )}

cons_right_atomic_exp:
  _1 = plus_right_atomic_exp
    {    ( _1 )}
| _1 = plus_exp _2 = ColonColon _3 = cons_right_atomic_exp
    {    ( eloc (Cons(_1,fst _2,_3)) )}

at_exp:
  _1 = cons_exp
    {    ( _1 )}
| _1 = cons_exp _2 = At _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = cons_exp _2 = AtX _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

at_right_atomic_exp:
  _1 = cons_right_atomic_exp
    {    ( _1 )}
| _1 = cons_exp _2 = At _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = cons_exp _2 = AtX _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

eq_exp:
  _1 = at_exp
    {    ( _1 )}
| _1 = eq_exp _2 = Eq _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = EqualX _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = GtEq _3 = at_exp
    {    ( eloc (Infix (_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = GtEqX _3 = at_exp
    {    ( eloc (Infix (_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = IN _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = MEM _3 = at_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

eq_right_atomic_exp:
  _1 = at_right_atomic_exp
    {    ( _1 )}
| _1 = eq_exp _2 = Eq _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = EqualX _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = IN _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}
| _1 = eq_exp _2 = MEM _3 = at_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

and_exp:
  _1 = eq_exp
    {    ( _1 )}
| _1 = eq_exp _2 = AmpAmp _3 = and_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

and_right_atomic_exp:
  _1 = eq_right_atomic_exp
    {    ( _1 )}
| _1 = eq_exp _2 = AmpAmp _3 = and_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

or_exp:
  _1 = and_exp
    {    ( _1 )}
| _1 = and_exp _2 = BarBar _3 = or_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

or_right_atomic_exp:
  _1 = and_right_atomic_exp
    {    ( _1 )}
| _1 = and_exp _2 = BarBar _3 = or_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

imp_exp:
  _1 = or_exp
    {    ( _1 )}
| _1 = or_exp _2 = MinusMinusGt _3 = imp_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

imp_right_atomic_exp:
  _1 = or_right_atomic_exp
    {    ( _1 )}
| _1 = or_exp _2 = MinusMinusGt _3 = imp_right_atomic_exp
    {    ( eloc (Infix(_1,SymX_l(_2, locn 2 2), _3)) )}

exp:
  _1 = imp_right_atomic_exp
    {    ( _1 )}
| _1 = imp_exp
    {    ( _1 )}

comma_exps:
  _1 = exp _2 = Comma _3 = exp
    {    ( [(_1,_2);(_3,None)] )}
| _1 = exp _2 = Comma _3 = comma_exps
    {    ( (_1,_2)::_3 )}

semi_exps_help:
  _1 = exp
    {    ( ([(_1,None)], (None,false)) )}
| _1 = exp _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = exp _2 = Semi _3 = semi_exps_help
    {    ( ((_1,_2)::fst _3, snd _3) )}

semi_exps:
  
    {    ( ([], (None, false)) )}
| _1 = semi_exps_help
    {    ( _1 )}

quant_bindings:
  _1 = x
    {    ( [Qb_var(_1)] )}
| _1 = Lparen _2 = pat _3 = IN _4 = exp _5 = Rparen
    {    ( [Qb_restr(_1,_2,fst _3,_4,_5)] )}
| _1 = Lparen _2 = pat _3 = MEM _4 = exp _5 = Rparen
    {    ( [Qb_list_restr(_1,_2,fst _3,_4,_5)] )}
| _1 = x _2 = quant_bindings
    {    ( Qb_var(_1)::_2 )}
| _1 = Lparen _2 = pat _3 = IN _4 = exp _5 = Rparen _6 = quant_bindings
    {    ( Qb_restr(_1,_2,fst _3,_4,_5)::_6 )}
| _1 = Lparen _2 = pat _3 = MEM _4 = exp _5 = Rparen _6 = quant_bindings
    {    ( Qb_list_restr(_1,_2,fst _3,_4,_5)::_6 )}

patsexp:
  _1 = atomic_pats1 _2 = Arrow _3 = exp
    {    ( Patsexp(_1,_2,_3,loc ()) )}

opt_typ_annot:
  
    {    ( Typ_annot_none )}
| _1 = Colon _2 = typ
    {    ( Typ_annot_some(_1,_2) )}

atomic_pats1:
  _1 = atomic_pat
    {    ( [_1] )}
| _1 = atomic_pat _2 = atomic_pats1
    {    ( _1::_2 )}

patexps:
  _1 = pat _2 = Arrow _3 = exp
    {    ( [(Patexp(_1,_2,_3,loc ()),None)] )}
| _1 = pat _2 = Arrow _3 = exp _4 = Bar _5 = patexps
    {    ( (Patexp(_1,_2,_3,locn 1 3),_4)::_5 )}

fexp:
  _1 = id _2 = Eq _3 = exp
    {    ( Fexp(_1,fst _2,_3,loc()) )}

fexps:
  _1 = fexps_help
    {    ( Fexps(fst _1, fst (snd _1), snd (snd _1), loc ()) )}

fexps_help:
  _1 = fexp
    {    ( ([(_1,None)], (None,false)) )}
| _1 = fexp _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = fexp _2 = Semi _3 = fexps_help
    {    ( ((_1,_2)::fst _3, snd _3) )}

letbind:
  _1 = pat _2 = opt_typ_annot _3 = Eq _4 = exp
    {    ( match pat_dest_id_app _1 with
        | Some((v,pats)) when pats <> [] ->
            lbloc (Let_fun(Funcl(v,pats,_2,fst _3,_4)))
        | _ -> lbloc (Let_val(_1,_2,fst _3,_4)) )}

do_exps:
  
    {    ( [] )}
| _1 = pat _2 = LeftArrow _3 = exp _4 = Semi _5 = do_exps
    {    ( (_1,_2,_3,_4)::_5 )}

funcl:
  _1 = x _2 = atomic_pats1 _3 = opt_typ_annot _4 = Eq _5 = exp
    {    ( reclloc (Funcl(_1,_2,_3,fst _4,_5)) )}

funcls:
  _1 = x _2 = atomic_pats1 _3 = opt_typ_annot _4 = Eq _5 = exp
    {    ( [(reclloc (Funcl(_1,_2,_3,fst _4,_5)),None)] )}
| _1 = funcl _2 = And _3 = funcls
    {    ( (_1,_2)::_3 )}

name_ts:
  
    {    ( [] )}
| _1 = x _2 = name_ts
    {    ( (Name_t_name _1)::_2 )}
| _1 = Lparen _2 = x _3 = Colon _4 = typ _5 = Rparen _6 = name_ts
    {    ( (Name_t_nt(_1,_2,_3,_4,_5))::_6 )}

exps:
  
    {    ( [] )}
| _1 = field_exp _2 = exps
    {    ( _1::_2 )}

indreln_clause:
  _1 = x _2 = Colon _3 = Forall _4 = name_ts _5 = Dot _6 = exp _7 = EqEqGt _8 = x _9 = exps
    {    ( irloc (Rule(_1,_2,_3,_4,_5,_6,_7,_8,_9)) )}

and_indreln_clauses:
  _1 = indreln_clause
    {    ( [(_1,None)] )}
| _1 = indreln_clause _2 = And _3 = and_indreln_clauses
    {    ( (_1,_2)::_3 )}

witness_clause:
  _1 = Witness _2 = Type _3 = x _4 = Semi
    {    ( Witness_some(_1,_2,_3,_4) )}
| _1 = Semi
    {         ( Witness_none )}

check_clause:
  _1 = Check _2 = x _3 = Semi
    {    ( Check_some(_1,_2,_3) )}
| 
    {    ( Check_none )}

functions_clause:
  _1 = x _2 = Colon _3 = typ
    {  ( Functions_one(_1,_2,_3) )}
| _1 = x _2 = Colon _3 = typ _4 = Semi _5 = functions_clause
    {  ( Functions_some(_1,_2,_3,_4,_5) )}

indreln_name:
  _1 = Lsquare _2 = x _3 = Colon _4 = typschm _5 = Rsquare
    {    ( Name_l ( Inderln_name_Name (_1,_2,_3,_4,Witness_none,Check_none,Functions_none,_5) ,loc ()) )}
| _1 = Lsquare _2 = x _3 = Colon _4 = typschm _5 = witness_clause _6 = Rsquare
    {    ( Name_l ( Inderln_name_Name (_1,_2,_3,_4,_5,Check_none,Functions_none,_6) ,loc ()) )}
| _1 = Lsquare _2 = x _3 = Colon _4 = typschm _5 = witness_clause _6 = check_clause _7 = Rsquare
    {    ( Name_l ( Inderln_name_Name (_1,_2,_3,_4,_5,_6,Functions_none,_7) ,loc ()) )}
| _1 = Lsquare _2 = x _3 = Colon _4 = typschm _5 = witness_clause _6 = check_clause _7 = functions_clause _8 = Rsquare
    {    ( Name_l ( Inderln_name_Name (_1,_2,_3,_4,_5,_6,_7,_8) ,loc ()) )}

and_indreln_names:
  _1 = indreln_name
    {    ( [(_1,None)] )}
| _1 = indreln_name _2 = And _3 = and_indreln_names
    {    ( (_1,_2)::_3 )}

tnvs:
  
    {    ( [] )}
| _1 = tnvar _2 = tnvs
    {    ( _1::_2 )}

c:
  _1 = id _2 = tnvar
    {    ( C(_1,_2) )}

cs:
  _1 = c
    {    ( [(_1,None)] )}
| _1 = c _2 = Comma _3 = cs
    {    ( (_1,_2)::_3 )}

c2:
  _1 = id _2 = typ
    {    (
      match _2 with
        | Typ_l(Typ_var(a_l),_) ->
            C(_1,Avl(a_l))
        | _ ->
          raise (Parse_error_locn(loc (),"Invalid class constraint"))
    )}

cs2:
  _1 = c2
    {    ( [(_1, None)] )}
| _1 = c2 _2 = Comma _3 = cs2
    {    ( (_1,_2)::_3 )}

range:
  _1 = nexp _2 = Eq _3 = nexp
    {    ( Range_l(Fixed(_1,(fst _2),_3), loc () ) )}
| _1 = nexp _2 = GtEq _3 = nexp
    {    ( Range_l(Bounded(_1,(fst _2),_3), loc () ) )}

ranges:
  _1 = range
    {    ( [(_1,None)] )}
| _1 = range _2 = Comma _3 = ranges
    {    ( (_1,_2)::_3 )}

typschm:
  _1 = typ
    {    ( Ts(C_pre_empty, _1) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = typ
    {    ( Ts(C_pre_forall(_1,_2,_3,Cs_empty),_4) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = cs _5 = EqGt _6 = typ
    {    ( Ts(C_pre_forall(_1,_2,_3,Cs_classes(_4,_5)), _6) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = ranges _5 = EqGt _6 = typ
    {    ( Ts(C_pre_forall(_1,_2,_3,Cs_lengths(_4,_5)), _6) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = cs _5 = Semi _6 = ranges _7 = EqGt _8 = typ
    {    ( Ts(C_pre_forall(_1,_2,_3,Cs_both(_4,_5,_6,_7)),_8) )}

insttyp:
  _1 = typ
    {    ( _1 )}
| _1 = nexp
    {    ( tloc (Typ_Nexps(_1)) )}

instschm:
  _1 = Lparen _2 = id _3 = insttyp _4 = Rparen
    {    ( Is(C_pre_empty, _1,_2,_3,_4) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = Lparen _5 = id _6 = insttyp _7 = Rparen
    {    ( Is(C_pre_forall(_1,_2,_3,Cs_empty),_4,_5,_6,_7) )}
| _1 = Forall _2 = tnvs _3 = Dot _4 = cs2 _5 = EqGt _6 = Lparen _7 = id _8 = insttyp _9 = Rparen
    {    ( Is(C_pre_forall(_1,_2,_3,Cs_classes(_4,_5)),_6,_7,_8,_9) )}

val_spec:
  _1 = Val _2 = x _3 = Colon _4 = typschm
    {    ( Val_spec(_1,_2,Ascii_opt_none,_3,_4) )}
| _1 = Val _2 = x _3 = Lsquare _4 = BacktickString _5 = Rsquare _6 = Colon _7 = typschm
    {    ( Val_spec(_1,_2,Ascii_opt_some(_3,fst _4, snd _4,_5),_6,_7) )}

class_val_spec:
  _1 = Val _2 = targets_opt _3 = x _4 = Colon _5 = typ
    {    ( (_1,_2,_3,Ascii_opt_none,_4,_5) )}
| _1 = Val _2 = targets_opt _3 = x _4 = Lsquare _5 = BacktickString _6 = Rsquare _7 = Colon _8 = typ
    {    ( (_1,_2,_3,Ascii_opt_some(_4,fst _5, snd _5,_6),_7,_8) )}

class_val_specs:
  _1 = class_val_spec
    {    ( [(fun (a,b,c,d,e,f) -> (a,b,c,d,e,f,loc())) _1] )}
| _1 = class_val_spec _2 = class_val_specs
    {    ( ((fun (a,b,c,d,e,f) -> (a,b,c,d,e,f,loc())) _1)::_2 )}

target:
  _1 = X
    {    ( get_target _1, None )}

targets:
  _1 = target
    {    ( [ _1 ] )}
| _1 = target _2 = Semi _3 = targets
    {    ( _1::_3 )}

targets_opt:
  
    {    ( None )}
| _1 = Lcurly _2 = Rcurly
    {    ( Some(Targets_concrete(_1,[],_2)) )}
| _1 = Lcurly _2 = targets _3 = Rcurly
    {    ( Some(Targets_concrete(_1,_2,_3)) )}
| _1 = NegLcurly _2 = targets _3 = Rcurly
    {    ( Some(Targets_neg_concrete(_1,_2,_3)) )}
| _1 = NonExec
    {    ( Some(Targets_non_exec(_1)) )}

component_term:
  _1 = Function_
    {    ( Component_function _1 )}
| _1 = Field
    {    ( Component_field _1 )}

component_type:
  _1 = Type
    {    ( Component_type _1 )}

component:
  _1 = component_term
    {    ( _1 )}
| _1 = component_type
    {    ( _1 )}
| _1 = Module_
    {    ( Component_module _1 )}

termination_setting:
  _1 = Automatic
    {    ( Termination_setting_automatic _1 )}
| _1 = Manual
    {    ( Termination_setting_manual _1 )}

exhaustivity_setting:
  _1 = Exhaustive
    {    ( Exhaustivity_setting_exhaustive _1 )}
| _1 = Inexhaustive
    {    ( Exhaustivity_setting_inexhaustive _1 )}

elim_opt:
  
    {    ( Elim_opt_none )}
| _1 = id
    {    ( Elim_opt_some(_1) )}

tnvar_list:
  
    {    ( [] )}
| _1 = tnvar _2 = tnvar_list
    {    ( _1::_2 )}

fixity_decl:
  _1 = RightAssoc _2 = Num
    {    ( Fixity_right_assoc(_1, fst (snd _2)) )}
| _1 = LeftAssoc _2 = Num
    {    ( Fixity_left_assoc(_1, fst (snd _2)) )}
| _1 = NonAssoc _2 = Num
    {    ( Fixity_non_assoc(_1, fst (snd _2)) )}
| 
    {    ( Fixity_default_assoc )}

target_rep_rhs_term:
  
    {    ( Target_rep_rhs_undefined )}
| _1 = Infix _2 = fixity_decl _3 = BacktickString
    {    ( Target_rep_rhs_infix(_1, _2, fst _3, snd _3) )}
| _1 = exp
    {    ( Target_rep_rhs_term_replacement(_1) )}
| _1 = Special _2 = String _3 = exps
    {    ( Target_rep_rhs_special(_1, fst _2, snd _2, _3) )}

target_rep_rhs_type:
  _1 = typ
    {    ( _1 )}

x_ls:
  
    {    ( [] )}
| _1 = X _2 = x_ls
    {    ( (Ast.X_l (_1, loc()))::_2 )}

declaration:
  _1 = Declare _2 = targets_opt _3 = CompileMessage _4 = id _5 = Eq _6 = String
    {    ( Decl_compile_message_decl(_1, _2, _3, _4, fst _5, fst _6, snd _6) )}
| _1 = Declare _2 = targets_opt _3 = Rename _4 = Module_ _5 = Eq _6 = x
    {    ( Decl_rename_current_module_decl(_1, _2, _3, _4, fst _5, _6) )}
| _1 = Declare _2 = targets_opt _3 = Rename _4 = component _5 = id _6 = Eq _7 = x
    {    ( Decl_rename_decl(_1, _2, _3, _4, _5, fst _6, _7) )}
| _1 = Declare _2 = targets_opt _3 = AsciiRep _4 = component _5 = id _6 = Eq _7 = BacktickString
    {    ( Decl_ascii_rep_decl(_1, _2, _3, _4, _5, fst _6, fst _7, snd _7) )}
| _1 = Declare _2 = target _3 = TargetRep _4 = component_term _5 = id _6 = x_ls _7 = Eq _8 = target_rep_rhs_term
    {    ( Decl_target_rep_decl(_1, fst _2, snd _2, Target_rep_lhs_term (_3, _4, _5, _6), fst _7, _8) )}
| _1 = Declare _2 = target _3 = TargetRep _4 = component_type _5 = id _6 = tnvs _7 = Eq _8 = target_rep_rhs_type
    {    ( Decl_target_rep_decl(_1, fst _2, snd _2, Target_rep_lhs_type(_3, _4, _5, _6), fst _7, Target_rep_rhs_type_replacement _8) )}
| _1 = Declare _2 = SetFlag _3 = x _4 = Eq _5 = x
    {    ( Decl_set_flag_decl(_1, _2, _3, fst _4, _5) )}
| _1 = Declare _2 = targets_opt _3 = TerminationArgument _4 = id _5 = Eq _6 = termination_setting
    {    ( Decl_termination_argument_decl(_1, _2, _3, _4, fst _5, _6) )}
| _1 = Declare _2 = targets_opt _3 = PatternMatch _4 = exhaustivity_setting _5 = id _6 = tnvar_list _7 = Eq _8 = Lsquare _9 = semi_ids _10 = Rsquare _11 = elim_opt
    {    ( Decl_pattern_match_decl(_1, _2, _3, _4, _5, _6, fst _7, _8, fst _9, fst (snd _9),snd (snd _9), _10, _11) )}

lemma_typ:
  _1 = Lemma
    {    ( Lemma_lemma _1 )}
| _1 = Theorem
    {    ( Lemma_theorem _1 )}
| _1 = Assert
    {    ( Lemma_assert _1 )}

lemma:
  _1 = lemma_typ _2 = targets_opt _3 = x _4 = Colon _5 = exp
    {    ( Lemma_named (_1, _2, _3, _4, _5) )}

val_def:
  _1 = Let_ _2 = targets_opt _3 = letbind
    {    ( Let_def(_1,_2,_3) )}
| _1 = Let_ _2 = Rec _3 = targets_opt _4 = funcls
    {    ( Let_rec(_1,_2,_3,_4) )}
| _1 = Let_ _2 = Inline _3 = targets_opt _4 = letbind
    {    ( Let_inline(_1,_2,_3,_4) )}
| _1 = Let_ _2 = Lem_transform _3 = targets_opt _4 = letbind
    {    ( Let_transform(_1,_2,_3,_4) )}

val_defs:
  _1 = val_def
    {    ( [(_1,loc())] )}
| _1 = val_def _2 = val_defs
    {    ( (_1,loc ())::_2 )}

open_import:
  _1 = Open_
    {    ( OI_open(_1) )}
| _1 = Include_
    {    ( OI_include(_1) )}
| _1 = Import_
    {    ( OI_import(_1) )}
| _1 = Open_ _2 = Import_
    {    ( OI_open_import(_1, _2) )}
| _1 = Include_ _2 = Import_
    {    ( OI_include_import(_1, _2) )}

def:
  _1 = Type _2 = tds
    {    ( dloc (Type_def(_1,_2)) )}
| _1 = val_def
    {    ( dloc (Val_def(_1)) )}
| _1 = Module_ _2 = x _3 = Eq _4 = Struct _5 = defs _6 = End
    {    ( mod_cap _2; dloc (Module(_1,_2,fst _3,_4,_5,_6)) )}
| _1 = Module_ _2 = x _3 = Eq _4 = id
    {    ( mod_cap _2; dloc (Rename(_1,_2,fst _3,_4)) )}
| _1 = open_import _2 = targets_opt _3 = backtickstrings
    {    ( dloc (Open_import_target(_1,_2,_3)) )}
| _1 = open_import _2 = ids
    {    ( dloc (Open_import(_1,_2)) )}
| _1 = Indreln _2 = targets_opt _3 = and_indreln_names _4 = and_indreln_clauses
    {    ( dloc (Indreln(_1,_2,_3,_4)) )}
| _1 = val_spec
    {    ( dloc (Spec_def(_1)) )}
| _1 = Class_ _2 = Lparen _3 = x _4 = tnvar _5 = Rparen _6 = class_val_specs _7 = End
    {    ( dloc (Class(Class_decl _1,_2,_3,_4,_5,_6,_7)) )}
| _1 = Class_ _2 = Inline _3 = Lparen _4 = x _5 = tnvar _6 = Rparen _7 = class_val_specs _8 = End
    {    ( dloc (Class(Class_inline_decl (_1,_2),_3,_4,_5,_6,_7,_8)) )}
| _1 = Inst _2 = instschm _3 = val_defs _4 = End
    {    ( dloc (Instance(Inst_decl _1,_2,_3,_4)) )}
| _1 = Inst_default _2 = instschm _3 = val_defs _4 = End
    {    ( dloc (Instance(Inst_default _1,_2,_3,_4)) )}
| _1 = lemma
    {    ( dloc (Lemma _1) )}
| _1 = declaration
    {    ( dloc (Declaration _1) )}

xtyp:
  _1 = x _2 = Colon _3 = typ
    {    ( (_1,_2,_3) )}

xtyps:
  _1 = xtyp
    {    ( ([(_1,None)], (None, false)) )}
| _1 = xtyp _2 = Semi
    {    ( ([(_1,None)], (_2, true)) )}
| _1 = xtyp _2 = Semi _3 = xtyps
    {    ( ((_1,_2)::fst _3, snd _3) )}

ctor_texp:
  _1 = x _2 = Of _3 = star_typ_list
    {    ( Cte(_1,_2,_3) )}
| _1 = x
    {    ( Cte(_1,None,[]) )}

ctor_single_texp:
  _1 = x _2 = Of _3 = star_typ_list
    {    ( Cte(_1,_2,_3) )}

ctor_texps:
  _1 = ctor_texp
    {    ( [(_1,None)] )}
| _1 = ctor_texp _2 = Bar _3 = ctor_texps
    {    ( (_1,_2)::_3 )}

texp:
  _1 = typ
    {    ( Te_abbrev(_1) )}
| _1 = LtBar _2 = xtyps _3 = BarGt
    {    ( Te_record(_1,fst _2, fst (snd _2), snd (snd _2), _3) )}
| _1 = Bar _2 = ctor_texps
    {    ( Te_variant(_1,true,_2) )}
| _1 = ctor_texp _2 = Bar _3 = ctor_texps
    {    ( Te_variant(None,false,(_1,_2)::_3) )}
| _1 = ctor_single_texp
    {    ( Te_variant(None,false,[(_1,None)]) )}

name_sect:
  _1 = Lsquare _2 = x _3 = Eq _4 = String _5 = Rsquare
    {    ( Name_sect_name(_1,_2,fst _3,(fst _4),(snd _4),_5) )}

td:
  _1 = x _2 = tnvs
    {    ( Td_opaque(_1,_2,Name_sect_none) )}
| _1 = x _2 = tnvs _3 = name_sect
    {    ( Td_opaque(_1,_2,_3) )}
| _1 = x _2 = tnvs _3 = Eq _4 = texp
    {    ( Td(_1,_2,Name_sect_none,fst _3,_4) )}
| _1 = x _2 = tnvs _3 = name_sect _4 = Eq _5 = texp
    {    ( Td(_1,_2,_3,fst _4,_5) )}

tds:
  _1 = td
    {    ( [(_1,None)] )}
| _1 = td _2 = And _3 = tds
    {    ( (_1,_2)::_3 )}

semi_ids_help:
  _1 = id
    {    ( ([(_1,None)], (None,false)) )}
| _1 = id _2 = Semi
    {    ( ([(_1,None)], (_2,true)) )}
| _1 = id _2 = Semi _3 = semi_ids_help
    {    ( ((_1,_2)::fst _3, snd _3) )}

semi_ids:
  
    {    ( ([], (None, false)) )}
| _1 = semi_ids_help
    {    ( _1 )}

ids:
  _1 = id
    {    ( [_1] )}
| _1 = id _2 = ids
    {    ( _1 :: _2 )}

backtickstrings:
  _1 = BacktickString
    {    ( [_1] )}
| _1 = BacktickString _2 = backtickstrings
    {    ( _1 :: _2 )}

defs_help:
  _1 = def
    {    ( [(_1,None,false)] )}
| _1 = def _2 = SemiSemi
    {    ( [(_1,_2,true)] )}
| _1 = def _2 = defs_help
    {    ( (_1,None,false)::_2 )}
| _1 = def _2 = SemiSemi _3 = defs_help
    {    ( (_1,_2,true)::_3 )}

defs:
  _1 = defs_help
    {    ( Defs(_1) )}

file:
  _1 = defs _2 = Eof
    {    ( (_1,_2) )}

%%
