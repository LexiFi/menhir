State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On VDASH shift to state 1
-- On VAR shift to state 2
-- On OP shift to state 3
-- On DIRECTIVE shift to state 22
-- On sequent shift to state 24
-- On main shift to state 26
-- On formimp shift to state 27
## Reductions:

State 1:
## Known stack suffix:
## VDASH
## LR(1) items:
sequent -> VDASH . formimp [ END ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 21
## Reductions:

State 2:
## Known stack suffix:
## VAR
## LR(1) items:
formimp -> VAR . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formimp -> VAR

State 3:
## Known stack suffix:
## OP
## LR(1) items:
formimp -> OP . formimp CP [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## OP formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . TIMES formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . NEXT formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . SEQ formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . IMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . RIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> formimp . LIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
formimp -> OP formimp . CP [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP CP ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
-- On CP shift to state 20
## Reductions:

State 5:
## Known stack suffix:
## formimp TIMES
## LR(1) items:
formimp -> formimp TIMES . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## formimp TIMES formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp TIMES formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On RIMP shift to state 7
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp TIMES formimp
-- On TIMES reduce production formimp -> formimp TIMES formimp
-- On SEQ reduce production formimp -> formimp TIMES formimp
-- On PAR reduce production formimp -> formimp TIMES formimp
-- On NEXT reduce production formimp -> formimp TIMES formimp
-- On END reduce production formimp -> formimp TIMES formimp
-- On CP reduce production formimp -> formimp TIMES formimp

State 7:
## Known stack suffix:
## formimp RIMP
## LR(1) items:
formimp -> formimp RIMP . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## formimp RIMP formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp RIMP formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp RIMP formimp
-- On END reduce production formimp -> formimp RIMP formimp
-- On CP reduce production formimp -> formimp RIMP formimp

State 9:
## Known stack suffix:
## formimp SEQ
## LR(1) items:
formimp -> formimp SEQ . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## formimp SEQ formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp SEQ formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On TIMES shift to state 5
-- On RIMP shift to state 7
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp SEQ formimp
-- On SEQ reduce production formimp -> formimp SEQ formimp
-- On PAR reduce production formimp -> formimp SEQ formimp
-- On END reduce production formimp -> formimp SEQ formimp
-- On CP reduce production formimp -> formimp SEQ formimp

State 11:
## Known stack suffix:
## formimp NEXT
## LR(1) items:
formimp -> formimp NEXT . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## formimp NEXT formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp NEXT formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On RIMP shift to state 7
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp NEXT formimp
-- On TIMES reduce production formimp -> formimp NEXT formimp
-- On SEQ reduce production formimp -> formimp NEXT formimp
-- On PAR reduce production formimp -> formimp NEXT formimp
-- On NEXT reduce production formimp -> formimp NEXT formimp
-- On END reduce production formimp -> formimp NEXT formimp
-- On CP reduce production formimp -> formimp NEXT formimp

State 13:
## Known stack suffix:
## formimp NEG
## LR(1) items:
formimp -> formimp NEG . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formimp -> formimp NEG

State 14:
## Known stack suffix:
## formimp LIMP
## LR(1) items:
formimp -> formimp LIMP . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## formimp LIMP formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp LIMP formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp LIMP formimp
-- On END reduce production formimp -> formimp LIMP formimp
-- On CP reduce production formimp -> formimp LIMP formimp

State 16:
## Known stack suffix:
## formimp PAR
## LR(1) items:
formimp -> formimp PAR . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## formimp PAR formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp PAR formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On TIMES shift to state 5
-- On RIMP shift to state 7
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp PAR formimp
-- On SEQ reduce production formimp -> formimp PAR formimp
-- On PAR reduce production formimp -> formimp PAR formimp
-- On END reduce production formimp -> formimp PAR formimp
-- On CP reduce production formimp -> formimp PAR formimp

State 18:
## Known stack suffix:
## formimp IMP
## LR(1) items:
formimp -> formimp IMP . formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## formimp IMP formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp IMP formimp . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On VDASH reduce production formimp -> formimp IMP formimp
-- On END reduce production formimp -> formimp IMP formimp
-- On CP reduce production formimp -> formimp IMP formimp

State 20:
## Known stack suffix:
## OP formimp CP
## LR(1) items:
formimp -> OP formimp CP . [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END CP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formimp -> OP formimp CP

State 21:
## Known stack suffix:
## VDASH formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . TIMES formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEXT formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . SEQ formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . IMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . RIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . LIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEG [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
sequent -> VDASH formimp . [ END ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On END reduce production sequent -> VDASH formimp

State 22:
## Known stack suffix:
## DIRECTIVE
## LR(1) items:
main -> DIRECTIVE . VAR [ # ]
## Transitions:
-- On VAR shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## DIRECTIVE VAR
## LR(1) items:
main -> DIRECTIVE VAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> DIRECTIVE VAR

State 24:
## Known stack suffix:
## sequent
## LR(1) items:
main -> sequent . END [ # ]
## Transitions:
-- On END shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## sequent END
## LR(1) items:
main -> sequent END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> sequent END

State 26:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 27:
## Known stack suffix:
## formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . TIMES formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEXT formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . SEQ formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . IMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . RIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . LIMP formimp [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEG [ VDASH TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
sequent -> formimp . VDASH formimp [ END ]
sequent -> formimp . [ END ]
## Transitions:
-- On VDASH shift to state 28
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On END reduce production sequent -> formimp

State 28:
## Known stack suffix:
## formimp VDASH
## LR(1) items:
sequent -> formimp VDASH . formimp [ END ]
## Transitions:
-- On VAR shift to state 2
-- On OP shift to state 3
-- On formimp shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## formimp VDASH formimp
## LR(1) items:
formimp -> formimp . PAR formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . TIMES formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEXT formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . SEQ formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . IMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . RIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . LIMP formimp [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
formimp -> formimp . NEG [ TIMES SEQ RIMP PAR NEXT NEG LIMP IMP END ]
sequent -> formimp VDASH formimp . [ END ]
## Transitions:
-- On TIMES shift to state 5
-- On SEQ shift to state 9
-- On RIMP shift to state 7
-- On PAR shift to state 16
-- On NEXT shift to state 11
-- On NEG shift to state 13
-- On LIMP shift to state 14
-- On IMP shift to state 18
## Reductions:
-- On END reduce production sequent -> formimp VDASH formimp

