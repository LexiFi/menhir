State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On preamble shift to state 1
-- On file shift to state 1087
## Default reduction:
-- After reading the next token, reduce production preamble ->

State 1:
## Known stack suffix:
## preamble
## LR(1) items:
file -> preamble . declarations exp END [ # ]
file -> preamble . exp END [ # ]
file -> preamble . declarations END [ # ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 3
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 1079
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 1080
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 467
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On typed_expression shift to state 614
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 489
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On nofun_declaration shift to state 509
-- On logical_expression shift to state 621
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On fun_declaration shift to state 512
-- On formlet_expression shift to state 746
-- On fixity shift to state 513
-- On exp shift to state 1081
-- On escape_expression shift to state 748
-- On declarations shift to state 1083
-- On declaration shift to state 522
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
-- On alien_block shift to state 521
## Reductions:

State 2:
## Known stack suffix:
## VARIABLE
## LR(1) items:
atomic_expression -> VARIABLE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> VARIABLE

State 3:
## Known stack suffix:
## VAR
## LR(1) items:
tlvarbinding -> VAR . var perhaps_location EQ exp [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## VARIABLE
## LR(1) items:
var -> VARIABLE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> VARIABLE

State 5:
## Known stack suffix:
## VAR var
## LR(1) items:
tlvarbinding -> VAR var . perhaps_location EQ exp [ SEMICOLON ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 9
## Reductions:
-- On EQ
--   reduce production perhaps_location ->

State 6:
## Known stack suffix:
## SERVER
## LR(1) items:
perhaps_location -> SERVER . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> SERVER

State 7:
## Known stack suffix:
## NATIVE
## LR(1) items:
perhaps_location -> NATIVE . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> NATIVE

State 8:
## Known stack suffix:
## CLIENT
## LR(1) items:
perhaps_location -> CLIENT . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> CLIENT

State 9:
## Known stack suffix:
## VAR var perhaps_location
## LR(1) items:
tlvarbinding -> VAR var perhaps_location . EQ exp [ SEMICOLON ]
## Transitions:
-- On EQ shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## VAR var perhaps_location EQ
## LR(1) items:
tlvarbinding -> VAR var perhaps_location EQ . exp [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1078
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 11:
## Known stack suffix:
## UPDATE
## LR(1) items:
db_expression -> UPDATE . LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## UPDATE LPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN . table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On table_generator shift to state 306
-- On primary_pattern shift to state 275
-- On pattern shift to state 587
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 13:
## Known stack suffix:
## VARIABLE
## LR(1) items:
primary_pattern -> VARIABLE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> VARIABLE

State 14:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
primary_pattern -> UNDERSCORE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> UNDERSCORE

State 15:
## Known stack suffix:
## UINTEGER
## LR(1) items:
constant -> UINTEGER . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINTEGER

State 16:
## Known stack suffix:
## UFLOAT
## LR(1) items:
constant -> UFLOAT . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UFLOAT

State 17:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TRUE

State 18:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 19:
## Known stack suffix:
## MINUS
## LR(1) items:
negative_pattern -> MINUS . CONSTRUCTOR [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
negative_pattern -> MINUS . LPAREN constructors RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On LPAREN shift to state 20
-- On CONSTRUCTOR shift to state 26
## Reductions:

State 20:
## Known stack suffix:
## MINUS LPAREN
## LR(1) items:
negative_pattern -> MINUS LPAREN . constructors RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On CONSTRUCTOR shift to state 21
-- On constructors shift to state 24
## Reductions:

State 21:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructors -> CONSTRUCTOR . [ RPAREN ]
constructors -> CONSTRUCTOR . COMMA constructors [ RPAREN ]
## Transitions:
-- On COMMA shift to state 22
## Reductions:
-- On RPAREN
--   reduce production constructors -> CONSTRUCTOR

State 22:
## Known stack suffix:
## CONSTRUCTOR COMMA
## LR(1) items:
constructors -> CONSTRUCTOR COMMA . constructors [ RPAREN ]
## Transitions:
-- On CONSTRUCTOR shift to state 21
-- On constructors shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## CONSTRUCTOR COMMA constructors
## LR(1) items:
constructors -> CONSTRUCTOR COMMA constructors . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructors -> CONSTRUCTOR COMMA constructors

State 24:
## Known stack suffix:
## MINUS LPAREN constructors
## LR(1) items:
negative_pattern -> MINUS LPAREN constructors . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## MINUS LPAREN constructors RPAREN
## LR(1) items:
negative_pattern -> MINUS LPAREN constructors RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> MINUS LPAREN constructors RPAREN

State 26:
## Known stack suffix:
## MINUS CONSTRUCTOR
## LR(1) items:
negative_pattern -> MINUS CONSTRUCTOR . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> MINUS CONSTRUCTOR

State 27:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . pattern COMMA patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . labeled_patterns VBAR pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . labeled_patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 28
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 29
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 30
-- On RPAREN shift to state 31
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 290
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On record_label shift to state 291
-- On primary_pattern shift to state 275
-- On pattern shift to state 296
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On labeled_patterns shift to state 301
-- On field_label shift to state 254
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 28:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ EQ ]
primary_pattern -> VARIABLE . [ RPAREN COMMA COLONCOLON COLON AS ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production field_label -> VARIABLE
-- On RPAREN COMMA COLONCOLON COLON AS
--   reduce production primary_pattern -> VARIABLE

State 29:
## Known stack suffix:
## UINTEGER
## LR(1) items:
constant -> UINTEGER . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AS AMPAMP ]
field_label -> UINTEGER . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AS AMPAMP
--   reduce production constant -> UINTEGER
-- On EQ
--   reduce production field_label -> UINTEGER

State 30:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AS AMPAMP ]
field_label -> STRING . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AS AMPAMP
--   reduce production constant -> STRING
-- On EQ
--   reduce production field_label -> STRING

State 31:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN RPAREN

State 32:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_pattern -> LBRACKET . RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
primary_pattern -> LBRACKET . patterns RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On RBRACKET shift to state 33
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On patterns shift to state 276
-- On pattern shift to state 278
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 33:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
primary_pattern -> LBRACKET RBRACKET . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> LBRACKET RBRACKET

State 34:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FALSE

State 35:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_pattern -> CONSTRUCTOR . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
constructor_pattern -> CONSTRUCTOR . parenthesized_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On LPAREN shift to state 27
-- On parenthesized_pattern shift to state 36
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS
--   reduce production constructor_pattern -> CONSTRUCTOR

State 36:
## Known stack suffix:
## CONSTRUCTOR parenthesized_pattern
## LR(1) items:
constructor_pattern -> CONSTRUCTOR parenthesized_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_pattern -> CONSTRUCTOR parenthesized_pattern

State 37:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SERVER SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN FROM FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CLIENT CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 38:
## Known stack suffix:
## typed_pattern
## LR(1) items:
pattern -> typed_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA CLIENT ]
pattern -> typed_pattern . COLON primary_datatype [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA CLIENT ]
## Transitions:
-- On COLON shift to state 39
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA CLIENT
--   reduce production pattern -> typed_pattern

State 39:
## Known stack suffix:
## typed_pattern COLON
## LR(1) items:
pattern -> typed_pattern COLON . primary_datatype [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA CLIENT ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TABLEHANDLE shift to state 42
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On LPAREN shift to state 51
-- On LBRACKETBAR shift to state 97
-- On LBRACKET shift to state 115
-- On CONSTRUCTOR shift to state 129
-- On type_var shift to state 134
-- On primary_datatype shift to state 274
-- On parenthesized_datatypes shift to state 262
-- On kinded_type_var shift to state 147
## Reductions:

State 40:
## Known stack suffix:
## VARIABLE
## LR(1) items:
type_var -> VARIABLE . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> VARIABLE

State 41:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
type_var -> UNDERSCORE . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> UNDERSCORE

State 42:
## Known stack suffix:
## TABLEHANDLE
## LR(1) items:
primary_datatype -> TABLEHANDLE . LPAREN datatype COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## TABLEHANDLE LPAREN
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN . datatype COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 268
## Reductions:

State 44:
## Known stack suffix:
## TILDE
## LR(1) items:
session_datatype -> TILDE . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 267
## Reductions:

State 45:
## Known stack suffix:
## QUESTION
## LR(1) items:
session_datatype -> QUESTION . datatype DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 264
## Reductions:

State 46:
## Known stack suffix:
## PERCENTVAR
## LR(1) items:
type_var -> PERCENTVAR . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> PERCENTVAR

State 47:
## Known stack suffix:
## PERCENT
## LR(1) items:
type_var -> PERCENT . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> PERCENT

State 48:
## Known stack suffix:
## MU
## LR(1) items:
mu_datatype -> MU . VARIABLE DOT mu_datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## MU VARIABLE
## LR(1) items:
mu_datatype -> MU VARIABLE . DOT mu_datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On DOT shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## MU VARIABLE DOT
## LR(1) items:
mu_datatype -> MU VARIABLE DOT . mu_datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 262
-- On mu_datatype shift to state 263
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
## Reductions:

State 51:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN . RPAREN [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
parenthesized_datatypes -> LPAREN . qualified_type_name RPAREN [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
parenthesized_datatypes -> LPAREN . datatypes RPAREN [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
primary_datatype -> LPAREN . rfields RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VBAR shift to state 52
-- On VARIABLE shift to state 236
-- On UNDERSCORE shift to state 41
-- On UINTEGER shift to state 89
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On STRING shift to state 90
-- On RPAREN shift to state 237
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 238
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On rfields shift to state 244
-- On rfield shift to state 246
-- On record_label shift to state 252
-- On qualified_type_name shift to state 255
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On field_label shift to state 254
-- On datatypes shift to state 257
-- On datatype shift to state 259
## Reductions:

State 52:
## Known stack suffix:
## VBAR
## LR(1) items:
rfields -> VBAR . row_var [ RPAREN ]
rfields -> VBAR . kinded_row_var [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On row_var shift to state 234
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 235
## Reductions:

State 53:
## Known stack suffix:
## VARIABLE
## LR(1) items:
nonrec_row_var -> VARIABLE . [ SQUIGRARROW SQUIGLOLLI RPAREN RBRACE RARROW LOLLI COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> VARIABLE

State 54:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
nonrec_row_var -> UNDERSCORE . [ SQUIGRARROW SQUIGLOLLI RPAREN RBRACE RARROW LOLLI COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> UNDERSCORE

State 55:
## Known stack suffix:
## PERCENTVAR
## LR(1) items:
nonrec_row_var -> PERCENTVAR . [ SQUIGRARROW SQUIGLOLLI RPAREN RBRACE RARROW LOLLI COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> PERCENTVAR

State 56:
## Known stack suffix:
## PERCENT
## LR(1) items:
nonrec_row_var -> PERCENT . [ SQUIGRARROW SQUIGLOLLI RPAREN RBRACE RARROW LOLLI COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> PERCENT

State 57:
## Known stack suffix:
## LPAREN
## LR(1) items:
row_var -> LPAREN . MU VARIABLE DOT vfields RPAREN [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On MU shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LPAREN MU
## LR(1) items:
row_var -> LPAREN MU . VARIABLE DOT vfields RPAREN [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## LPAREN MU VARIABLE
## LR(1) items:
row_var -> LPAREN MU VARIABLE . DOT vfields RPAREN [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On DOT shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LPAREN MU VARIABLE DOT
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT . vfields RPAREN [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On CONSTRUCTOR shift to state 61
-- On vfields shift to state 232
-- On vfield shift to state 101
-- On row_var shift to state 104
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 105
## Reductions:

State 61:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
vfield -> CONSTRUCTOR . [ VBAR RPAREN BARRBRACKET ]
vfield -> CONSTRUCTOR . fieldspec [ VBAR RPAREN BARRBRACKET ]
## Transitions:
-- On MINUS shift to state 62
-- On LBRACE shift to state 63
-- On COLON shift to state 96
-- On fieldspec shift to state 231
## Reductions:
-- On VBAR RPAREN BARRBRACKET
--   reduce production vfield -> CONSTRUCTOR

State 62:
## Known stack suffix:
## MINUS
## LR(1) items:
fieldspec -> MINUS . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> MINUS

State 63:
## Known stack suffix:
## LBRACE
## LR(1) items:
fieldspec -> LBRACE . COLON datatype RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
fieldspec -> LBRACE . MINUS RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
fieldspec -> LBRACE . VARIABLE RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
fieldspec -> LBRACE . PERCENTVAR RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
fieldspec -> LBRACE . UNDERSCORE RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
fieldspec -> LBRACE . PERCENT RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 64
-- On UNDERSCORE shift to state 66
-- On PERCENTVAR shift to state 68
-- On PERCENT shift to state 70
-- On MINUS shift to state 72
-- On COLON shift to state 74
## Reductions:

State 64:
## Known stack suffix:
## LBRACE VARIABLE
## LR(1) items:
fieldspec -> LBRACE VARIABLE . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LBRACE VARIABLE RBRACE
## LR(1) items:
fieldspec -> LBRACE VARIABLE RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE VARIABLE RBRACE

State 66:
## Known stack suffix:
## LBRACE UNDERSCORE
## LR(1) items:
fieldspec -> LBRACE UNDERSCORE . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LBRACE UNDERSCORE RBRACE
## LR(1) items:
fieldspec -> LBRACE UNDERSCORE RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE UNDERSCORE RBRACE

State 68:
## Known stack suffix:
## LBRACE PERCENTVAR
## LR(1) items:
fieldspec -> LBRACE PERCENTVAR . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LBRACE PERCENTVAR RBRACE
## LR(1) items:
fieldspec -> LBRACE PERCENTVAR RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE PERCENTVAR RBRACE

State 70:
## Known stack suffix:
## LBRACE PERCENT
## LR(1) items:
fieldspec -> LBRACE PERCENT . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LBRACE PERCENT RBRACE
## LR(1) items:
fieldspec -> LBRACE PERCENT RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE PERCENT RBRACE

State 72:
## Known stack suffix:
## LBRACE MINUS
## LR(1) items:
fieldspec -> LBRACE MINUS . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LBRACE MINUS RBRACE
## LR(1) items:
fieldspec -> LBRACE MINUS RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE MINUS RBRACE

State 74:
## Known stack suffix:
## LBRACE COLON
## LR(1) items:
fieldspec -> LBRACE COLON . datatype RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 229
## Reductions:

State 75:
## Known stack suffix:
## LBRACKETPLUSBAR
## LR(1) items:
session_datatype -> LBRACKETPLUSBAR . row BARPLUSRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VBAR shift to state 76
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On row shift to state 92
-- On fields shift to state 94
-- On field_label shift to state 95
-- On field shift to state 109
## Reductions:
-- On BARPLUSRBRACKET
--   reduce production row ->

State 76:
## Known stack suffix:
## VBAR
## LR(1) items:
fields -> VBAR . row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
fields -> VBAR . kinded_row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On row_var shift to state 77
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 87
## Reductions:

State 77:
## Known stack suffix:
## VBAR row_var
## LR(1) items:
fields -> VBAR row_var . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
kinded_row_var -> row_var . subkind [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 85
## Reductions:
-- On RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET
--   reduce production fields -> VBAR row_var

State 78:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
subkind -> COLONCOLON . LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
subkind -> COLONCOLON . CONSTRUCTOR [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On LPAREN shift to state 79
-- On CONSTRUCTOR shift to state 84
## Reductions:

State 79:
## Known stack suffix:
## COLONCOLON LPAREN
## LR(1) items:
subkind -> COLONCOLON LPAREN . CONSTRUCTOR COMMA CONSTRUCTOR RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On CONSTRUCTOR shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## COLONCOLON LPAREN CONSTRUCTOR
## LR(1) items:
subkind -> COLONCOLON LPAREN CONSTRUCTOR . COMMA CONSTRUCTOR RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On COMMA shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## COLONCOLON LPAREN CONSTRUCTOR COMMA
## LR(1) items:
subkind -> COLONCOLON LPAREN CONSTRUCTOR COMMA . CONSTRUCTOR RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On CONSTRUCTOR shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## COLONCOLON LPAREN CONSTRUCTOR COMMA CONSTRUCTOR
## LR(1) items:
subkind -> COLONCOLON LPAREN CONSTRUCTOR COMMA CONSTRUCTOR . RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## COLONCOLON LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN
## LR(1) items:
subkind -> COLONCOLON LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subkind -> COLONCOLON LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN

State 84:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR
## LR(1) items:
subkind -> COLONCOLON CONSTRUCTOR . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subkind -> COLONCOLON CONSTRUCTOR

State 85:
## Known stack suffix:
## row_var subkind
## LR(1) items:
kinded_row_var -> row_var subkind . [ RPAREN RBRACE BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_row_var -> row_var subkind

State 86:
## Known stack suffix:
## nonrec_row_var
## LR(1) items:
row_var -> nonrec_row_var . [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_var -> nonrec_row_var

State 87:
## Known stack suffix:
## VBAR kinded_row_var
## LR(1) items:
fields -> VBAR kinded_row_var . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> VBAR kinded_row_var

State 88:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE READONLY RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PAGE OTHERWISE ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE EQ END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARPLUSRBRACKET BARBAR BARAMPRBRACKET BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> VARIABLE

State 89:
## Known stack suffix:
## UINTEGER
## LR(1) items:
field_label -> UINTEGER . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE READONLY RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PAGE OTHERWISE ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE EQ END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARPLUSRBRACKET BARBAR BARAMPRBRACKET BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> UINTEGER

State 90:
## Known stack suffix:
## STRING
## LR(1) items:
field_label -> STRING . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE READONLY RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PAGE OTHERWISE ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE EQ END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARPLUSRBRACKET BARBAR BARAMPRBRACKET BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> STRING

State 91:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
field_label -> CONSTRUCTOR . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE READONLY RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PAGE OTHERWISE ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE EQ END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARPLUSRBRACKET BARBAR BARAMPRBRACKET BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> CONSTRUCTOR

State 92:
## Known stack suffix:
## LBRACKETPLUSBAR row
## LR(1) items:
session_datatype -> LBRACKETPLUSBAR row . BARPLUSRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On BARPLUSRBRACKET shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## LBRACKETPLUSBAR row BARPLUSRBRACKET
## LR(1) items:
session_datatype -> LBRACKETPLUSBAR row BARPLUSRBRACKET . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> LBRACKETPLUSBAR row BARPLUSRBRACKET

State 94:
## Known stack suffix:
## fields
## LR(1) items:
row -> fields . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row -> fields

State 95:
## Known stack suffix:
## field_label
## LR(1) items:
field -> field_label . [ VBAR RPAREN RBRACE COMMA BARPLUSRBRACKET BARAMPRBRACKET ]
field -> field_label . fieldspec [ VBAR RPAREN RBRACE COMMA BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On MINUS shift to state 62
-- On LBRACE shift to state 63
-- On COLON shift to state 96
-- On fieldspec shift to state 228
## Reductions:
-- On VBAR RPAREN RBRACE COMMA BARPLUSRBRACKET BARAMPRBRACKET
--   reduce production field -> field_label

State 96:
## Known stack suffix:
## COLON
## LR(1) items:
fieldspec -> COLON . datatype [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 227
## Reductions:

State 97:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
primary_datatype -> LBRACKETBAR . vrow BARRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On CONSTRUCTOR shift to state 61
-- On vrow shift to state 98
-- On vfields shift to state 100
-- On vfield shift to state 101
-- On row_var shift to state 104
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 105
## Reductions:
-- On BARRBRACKET
--   reduce production vrow ->

State 98:
## Known stack suffix:
## LBRACKETBAR vrow
## LR(1) items:
primary_datatype -> LBRACKETBAR vrow . BARRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On BARRBRACKET shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## LBRACKETBAR vrow BARRBRACKET
## LR(1) items:
primary_datatype -> LBRACKETBAR vrow BARRBRACKET . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LBRACKETBAR vrow BARRBRACKET

State 100:
## Known stack suffix:
## vfields
## LR(1) items:
vrow -> vfields . [ BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vrow -> vfields

State 101:
## Known stack suffix:
## vfield
## LR(1) items:
vfields -> vfield . [ RPAREN BARRBRACKET ]
vfields -> vfield . VBAR vfields [ RPAREN BARRBRACKET ]
## Transitions:
-- On VBAR shift to state 102
## Reductions:
-- On RPAREN BARRBRACKET
--   reduce production vfields -> vfield

State 102:
## Known stack suffix:
## vfield VBAR
## LR(1) items:
vfields -> vfield VBAR . vfields [ RPAREN BARRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On CONSTRUCTOR shift to state 61
-- On vfields shift to state 103
-- On vfield shift to state 101
-- On row_var shift to state 104
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 105
## Reductions:

State 103:
## Known stack suffix:
## vfield VBAR vfields
## LR(1) items:
vfields -> vfield VBAR vfields . [ RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfields -> vfield VBAR vfields

State 104:
## Known stack suffix:
## row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN BARRBRACKET ]
vfields -> row_var . [ RPAREN BARRBRACKET ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 85
## Reductions:
-- On RPAREN BARRBRACKET
--   reduce production vfields -> row_var

State 105:
## Known stack suffix:
## kinded_row_var
## LR(1) items:
vfields -> kinded_row_var . [ RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfields -> kinded_row_var

State 106:
## Known stack suffix:
## LBRACKETAMPBAR
## LR(1) items:
session_datatype -> LBRACKETAMPBAR . row BARAMPRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VBAR shift to state 76
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On row shift to state 107
-- On fields shift to state 94
-- On field_label shift to state 95
-- On field shift to state 109
## Reductions:
-- On BARAMPRBRACKET
--   reduce production row ->

State 107:
## Known stack suffix:
## LBRACKETAMPBAR row
## LR(1) items:
session_datatype -> LBRACKETAMPBAR row . BARAMPRBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On BARAMPRBRACKET shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LBRACKETAMPBAR row BARAMPRBRACKET
## LR(1) items:
session_datatype -> LBRACKETAMPBAR row BARAMPRBRACKET . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> LBRACKETAMPBAR row BARAMPRBRACKET

State 109:
## Known stack suffix:
## field
## LR(1) items:
fields -> field . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
fields -> field . VBAR row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
fields -> field . VBAR kinded_row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
fields -> field . COMMA fields [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VBAR shift to state 110
-- On COMMA shift to state 113
## Reductions:
-- On RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET
--   reduce production fields -> field

State 110:
## Known stack suffix:
## field VBAR
## LR(1) items:
fields -> field VBAR . row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
fields -> field VBAR . kinded_row_var [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On row_var shift to state 111
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 112
## Reductions:

State 111:
## Known stack suffix:
## field VBAR row_var
## LR(1) items:
fields -> field VBAR row_var . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
kinded_row_var -> row_var . subkind [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 85
## Reductions:
-- On RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET
--   reduce production fields -> field VBAR row_var

State 112:
## Known stack suffix:
## field VBAR kinded_row_var
## LR(1) items:
fields -> field VBAR kinded_row_var . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> field VBAR kinded_row_var

State 113:
## Known stack suffix:
## field COMMA
## LR(1) items:
fields -> field COMMA . fields [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On VBAR shift to state 76
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On fields shift to state 114
-- On field_label shift to state 95
-- On field shift to state 109
## Reductions:

State 114:
## Known stack suffix:
## field COMMA fields
## LR(1) items:
fields -> field COMMA fields . [ RPAREN RBRACE BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> field COMMA fields

State 115:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_datatype -> LBRACKET . datatype RBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 225
## Reductions:

State 116:
## Known stack suffix:
## FORALL
## LR(1) items:
forall_datatype -> FORALL . varlist DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 117
-- On varlist shift to state 126
-- On typearg shift to state 222
## Reductions:

State 117:
## Known stack suffix:
## VARIABLE
## LR(1) items:
typearg -> VARIABLE . [ RPAREN DOT COMMA ]
typearg -> VARIABLE . kind [ RPAREN DOT COMMA ]
## Transitions:
-- On COLONCOLON shift to state 118
-- On kind shift to state 125
## Reductions:
-- On RPAREN DOT COMMA
--   reduce production typearg -> VARIABLE

State 118:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
kind -> COLONCOLON . CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN [ RPAREN DOT COMMA ]
kind -> COLONCOLON . CONSTRUCTOR [ RPAREN DOT COMMA ]
## Transitions:
-- On CONSTRUCTOR shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR . LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN [ RPAREN DOT COMMA ]
kind -> COLONCOLON CONSTRUCTOR . [ RPAREN DOT COMMA ]
## Transitions:
-- On LPAREN shift to state 120
## Reductions:
-- On RPAREN DOT COMMA
--   reduce production kind -> COLONCOLON CONSTRUCTOR

State 120:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR LPAREN
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR LPAREN . CONSTRUCTOR COMMA CONSTRUCTOR RPAREN [ RPAREN DOT COMMA ]
## Transitions:
-- On CONSTRUCTOR shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR . COMMA CONSTRUCTOR RPAREN [ RPAREN DOT COMMA ]
## Transitions:
-- On COMMA shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA . CONSTRUCTOR RPAREN [ RPAREN DOT COMMA ]
## Transitions:
-- On CONSTRUCTOR shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR . RPAREN [ RPAREN DOT COMMA ]
## Transitions:
-- On RPAREN shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN
## LR(1) items:
kind -> COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> COLONCOLON CONSTRUCTOR LPAREN CONSTRUCTOR COMMA CONSTRUCTOR RPAREN

State 125:
## Known stack suffix:
## VARIABLE kind
## LR(1) items:
typearg -> VARIABLE kind . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typearg -> VARIABLE kind

State 126:
## Known stack suffix:
## FORALL varlist
## LR(1) items:
forall_datatype -> FORALL varlist . DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On DOT shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## FORALL varlist DOT
## LR(1) items:
forall_datatype -> FORALL varlist DOT . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 221
## Reductions:

State 128:
## Known stack suffix:
## END
## LR(1) items:
session_datatype -> END . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> END

State 129:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
primary_datatype -> CONSTRUCTOR . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
primary_datatype -> CONSTRUCTOR . LPAREN type_arg_list RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On LPAREN shift to state 130
## Reductions:
-- On WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS
--   reduce production primary_datatype -> CONSTRUCTOR

State 130:
## Known stack suffix:
## CONSTRUCTOR LPAREN
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN . type_arg_list RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TYPE shift to state 131
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On ROW shift to state 204
-- On QUESTION shift to state 45
-- On PRESENCE shift to state 208
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On LBRACE shift to state 212
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On type_arg_list shift to state 215
-- On type_arg shift to state 217
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 220
## Reductions:

State 131:
## Known stack suffix:
## TYPE
## LR(1) items:
type_arg -> TYPE . LPAREN datatype RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## TYPE LPAREN
## LR(1) items:
type_arg -> TYPE LPAREN . datatype RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 202
## Reductions:

State 133:
## Known stack suffix:
## BANG
## LR(1) items:
session_datatype -> BANG . datatype DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 199
## Reductions:

State 134:
## Known stack suffix:
## type_var
## LR(1) items:
kinded_type_var -> type_var . subkind [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
primary_datatype -> type_var . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 135
## Reductions:
-- On WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS
--   reduce production primary_datatype -> type_var

State 135:
## Known stack suffix:
## type_var subkind
## LR(1) items:
kinded_type_var -> type_var subkind . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_type_var -> type_var subkind

State 136:
## Known stack suffix:
## straight_arrow
## LR(1) items:
datatype -> straight_arrow . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> straight_arrow

State 137:
## Known stack suffix:
## squiggly_arrow
## LR(1) items:
datatype -> squiggly_arrow . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> squiggly_arrow

State 138:
## Known stack suffix:
## session_datatype
## LR(1) items:
forall_datatype -> session_datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall_datatype -> session_datatype

State 139:
## Known stack suffix:
## primary_datatype
## LR(1) items:
session_datatype -> primary_datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> primary_datatype

State 140:
## Known stack suffix:
## parenthesized_datatypes
## LR(1) items:
primary_datatype -> parenthesized_datatypes . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
squiggly_arrow -> parenthesized_datatypes . squig_arrow_prefix SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
squiggly_arrow -> parenthesized_datatypes . squig_arrow_prefix SQUIGLOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
squiggly_arrow -> parenthesized_datatypes . SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
squiggly_arrow -> parenthesized_datatypes . SQUIGLOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
straight_arrow -> parenthesized_datatypes . straight_arrow_prefix RARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
straight_arrow -> parenthesized_datatypes . straight_arrow_prefix LOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
straight_arrow -> parenthesized_datatypes . RARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
straight_arrow -> parenthesized_datatypes . LOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On TILDE shift to state 141
-- On SQUIGRARROW shift to state 145
-- On SQUIGLOLLI shift to state 150
-- On RARROW shift to state 152
-- On MINUS shift to state 154
-- On LOLLI shift to state 157
-- On LBRACE shift to state 159
-- On straight_arrow_prefix shift to state 187
-- On squig_arrow_prefix shift to state 192
-- On hear_arrow_prefix shift to state 197
-- On arrow_prefix shift to state 198
## Reductions:
-- On WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS
--   reduce production primary_datatype -> parenthesized_datatypes

State 141:
## Known stack suffix:
## TILDE
## LR(1) items:
squig_arrow_prefix -> TILDE . nonrec_row_var [ SQUIGRARROW SQUIGLOLLI ]
squig_arrow_prefix -> TILDE . kinded_nonrec_row_var [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On nonrec_row_var shift to state 142
-- On kinded_nonrec_row_var shift to state 144
## Reductions:

State 142:
## Known stack suffix:
## TILDE nonrec_row_var
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var . subkind [ SQUIGRARROW SQUIGLOLLI ]
squig_arrow_prefix -> TILDE nonrec_row_var . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 143
## Reductions:
-- On SQUIGRARROW SQUIGLOLLI
--   reduce production squig_arrow_prefix -> TILDE nonrec_row_var

State 143:
## Known stack suffix:
## nonrec_row_var subkind
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var subkind . [ SQUIGRARROW SQUIGLOLLI RBRACE RARROW LOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_nonrec_row_var -> nonrec_row_var subkind

State 144:
## Known stack suffix:
## TILDE kinded_nonrec_row_var
## LR(1) items:
squig_arrow_prefix -> TILDE kinded_nonrec_row_var . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squig_arrow_prefix -> TILDE kinded_nonrec_row_var

State 145:
## Known stack suffix:
## parenthesized_datatypes SQUIGRARROW
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGRARROW . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 149
## Reductions:

State 146:
## Known stack suffix:
## mu_datatype
## LR(1) items:
datatype -> mu_datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> mu_datatype

State 147:
## Known stack suffix:
## kinded_type_var
## LR(1) items:
primary_datatype -> kinded_type_var . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> kinded_type_var

State 148:
## Known stack suffix:
## forall_datatype
## LR(1) items:
mu_datatype -> forall_datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mu_datatype -> forall_datatype

State 149:
## Known stack suffix:
## parenthesized_datatypes SQUIGRARROW datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGRARROW datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes SQUIGRARROW datatype

State 150:
## Known stack suffix:
## parenthesized_datatypes SQUIGLOLLI
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGLOLLI . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## parenthesized_datatypes SQUIGLOLLI datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGLOLLI datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes SQUIGLOLLI datatype

State 152:
## Known stack suffix:
## parenthesized_datatypes RARROW
## LR(1) items:
straight_arrow -> parenthesized_datatypes RARROW . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## parenthesized_datatypes RARROW datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes RARROW datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes RARROW datatype

State 154:
## Known stack suffix:
## MINUS
## LR(1) items:
straight_arrow_prefix -> MINUS . nonrec_row_var [ RARROW LOLLI ]
straight_arrow_prefix -> MINUS . kinded_nonrec_row_var [ RARROW LOLLI ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On nonrec_row_var shift to state 155
-- On kinded_nonrec_row_var shift to state 156
## Reductions:

State 155:
## Known stack suffix:
## MINUS nonrec_row_var
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RARROW LOLLI ]
straight_arrow_prefix -> MINUS nonrec_row_var . [ RARROW LOLLI ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 143
## Reductions:
-- On RARROW LOLLI
--   reduce production straight_arrow_prefix -> MINUS nonrec_row_var

State 156:
## Known stack suffix:
## MINUS kinded_nonrec_row_var
## LR(1) items:
straight_arrow_prefix -> MINUS kinded_nonrec_row_var . [ RARROW LOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow_prefix -> MINUS kinded_nonrec_row_var

State 157:
## Known stack suffix:
## parenthesized_datatypes LOLLI
## LR(1) items:
straight_arrow -> parenthesized_datatypes LOLLI . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## parenthesized_datatypes LOLLI datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes LOLLI datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes LOLLI datatype

State 159:
## Known stack suffix:
## LBRACE
## LR(1) items:
arrow_prefix -> LBRACE . RBRACE [ SQUIGRARROW SQUIGLOLLI RARROW LOLLI ]
arrow_prefix -> LBRACE . efields RBRACE [ SQUIGRARROW SQUIGLOLLI RARROW LOLLI ]
hear_arrow_prefix -> LBRACE . COLON datatype COMMA efields RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE . COLON datatype RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE . COLON datatype VBAR nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE . COLON datatype VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VBAR shift to state 160
-- On VARIABLE shift to state 163
-- On RBRACE shift to state 164
-- On CONSTRUCTOR shift to state 165
-- On COLON shift to state 166
-- On efields shift to state 185
-- On efield shift to state 177
-- On effect_label shift to state 183
## Reductions:

State 160:
## Known stack suffix:
## VBAR
## LR(1) items:
efields -> VBAR . nonrec_row_var [ RBRACE ]
efields -> VBAR . kinded_nonrec_row_var [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On nonrec_row_var shift to state 161
-- On kinded_nonrec_row_var shift to state 162
## Reductions:

State 161:
## Known stack suffix:
## VBAR nonrec_row_var
## LR(1) items:
efields -> VBAR nonrec_row_var . [ RBRACE ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 143
## Reductions:
-- On RBRACE
--   reduce production efields -> VBAR nonrec_row_var

State 162:
## Known stack suffix:
## VBAR kinded_nonrec_row_var
## LR(1) items:
efields -> VBAR kinded_nonrec_row_var . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> VBAR kinded_nonrec_row_var

State 163:
## Known stack suffix:
## VARIABLE
## LR(1) items:
effect_label -> VARIABLE . [ VBAR RBRACE MINUS LBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_label -> VARIABLE

State 164:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
arrow_prefix -> LBRACE RBRACE . [ SQUIGRARROW SQUIGLOLLI RARROW LOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_prefix -> LBRACE RBRACE

State 165:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
effect_label -> CONSTRUCTOR . [ VBAR RBRACE MINUS LBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_label -> CONSTRUCTOR

State 166:
## Known stack suffix:
## LBRACE COLON
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON . datatype COMMA efields RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON . datatype RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON . datatype VBAR nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON . datatype VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## LBRACE COLON datatype
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype . COMMA efields RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON datatype . RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON datatype . VBAR nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON datatype . VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VBAR shift to state 168
-- On RBRACE shift to state 173
-- On COMMA shift to state 174
## Reductions:

State 168:
## Known stack suffix:
## LBRACE COLON datatype VBAR
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR . nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
hear_arrow_prefix -> LBRACE COLON datatype VBAR . kinded_nonrec_row_var RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On nonrec_row_var shift to state 169
-- On kinded_nonrec_row_var shift to state 171
## Reductions:

State 169:
## Known stack suffix:
## LBRACE COLON datatype VBAR nonrec_row_var
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var . RBRACE [ SQUIGRARROW SQUIGLOLLI ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 170
-- On COLONCOLON shift to state 78
-- On subkind shift to state 143
## Reductions:

State 170:
## Known stack suffix:
## LBRACE COLON datatype VBAR nonrec_row_var RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var RBRACE . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var RBRACE

State 171:
## Known stack suffix:
## LBRACE COLON datatype VBAR kinded_nonrec_row_var
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var . RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On RBRACE shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE

State 173:
## Known stack suffix:
## LBRACE COLON datatype RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype RBRACE . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype RBRACE

State 174:
## Known stack suffix:
## LBRACE COLON datatype COMMA
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA . efields RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On VBAR shift to state 160
-- On VARIABLE shift to state 163
-- On CONSTRUCTOR shift to state 165
-- On efields shift to state 175
-- On efield shift to state 177
-- On effect_label shift to state 183
## Reductions:

State 175:
## Known stack suffix:
## LBRACE COLON datatype COMMA efields
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA efields . RBRACE [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
-- On RBRACE shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## LBRACE COLON datatype COMMA efields RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA efields RBRACE . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype COMMA efields RBRACE

State 177:
## Known stack suffix:
## efield
## LR(1) items:
efields -> efield . [ RBRACE ]
efields -> efield . VBAR nonrec_row_var [ RBRACE ]
efields -> efield . VBAR kinded_nonrec_row_var [ RBRACE ]
efields -> efield . COMMA efields [ RBRACE ]
## Transitions:
-- On VBAR shift to state 178
-- On COMMA shift to state 181
## Reductions:
-- On RBRACE
--   reduce production efields -> efield

State 178:
## Known stack suffix:
## efield VBAR
## LR(1) items:
efields -> efield VBAR . nonrec_row_var [ RBRACE ]
efields -> efield VBAR . kinded_nonrec_row_var [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On nonrec_row_var shift to state 179
-- On kinded_nonrec_row_var shift to state 180
## Reductions:

State 179:
## Known stack suffix:
## efield VBAR nonrec_row_var
## LR(1) items:
efields -> efield VBAR nonrec_row_var . [ RBRACE ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 143
## Reductions:
-- On RBRACE
--   reduce production efields -> efield VBAR nonrec_row_var

State 180:
## Known stack suffix:
## efield VBAR kinded_nonrec_row_var
## LR(1) items:
efields -> efield VBAR kinded_nonrec_row_var . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> efield VBAR kinded_nonrec_row_var

State 181:
## Known stack suffix:
## efield COMMA
## LR(1) items:
efields -> efield COMMA . efields [ RBRACE ]
## Transitions:
-- On VBAR shift to state 160
-- On VARIABLE shift to state 163
-- On CONSTRUCTOR shift to state 165
-- On efields shift to state 182
-- On efield shift to state 177
-- On effect_label shift to state 183
## Reductions:

State 182:
## Known stack suffix:
## efield COMMA efields
## LR(1) items:
efields -> efield COMMA efields . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> efield COMMA efields

State 183:
## Known stack suffix:
## effect_label
## LR(1) items:
efield -> effect_label . [ VBAR RBRACE COMMA ]
efield -> effect_label . fieldspec [ VBAR RBRACE COMMA ]
## Transitions:
-- On MINUS shift to state 62
-- On LBRACE shift to state 63
-- On COLON shift to state 96
-- On fieldspec shift to state 184
## Reductions:
-- On VBAR RBRACE COMMA
--   reduce production efield -> effect_label

State 184:
## Known stack suffix:
## effect_label fieldspec
## LR(1) items:
efield -> effect_label fieldspec . [ VBAR RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efield -> effect_label fieldspec

State 185:
## Known stack suffix:
## LBRACE efields
## LR(1) items:
arrow_prefix -> LBRACE efields . RBRACE [ SQUIGRARROW SQUIGLOLLI RARROW LOLLI ]
## Transitions:
-- On RBRACE shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## LBRACE efields RBRACE
## LR(1) items:
arrow_prefix -> LBRACE efields RBRACE . [ SQUIGRARROW SQUIGLOLLI RARROW LOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_prefix -> LBRACE efields RBRACE

State 187:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix . RARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
straight_arrow -> parenthesized_datatypes straight_arrow_prefix . LOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RARROW shift to state 188
-- On LOLLI shift to state 190
## Reductions:

State 188:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix RARROW
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix RARROW datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW datatype

State 190:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix LOLLI
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix LOLLI . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix LOLLI datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix LOLLI datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes straight_arrow_prefix LOLLI datatype

State 192:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix . SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix . SQUIGLOLLI datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On SQUIGRARROW shift to state 193
-- On SQUIGLOLLI shift to state 195
## Reductions:

State 193:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGRARROW
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype

State 195:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGLOLLI
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGLOLLI . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGLOLLI datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGLOLLI datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGLOLLI datatype

State 197:
## Known stack suffix:
## hear_arrow_prefix
## LR(1) items:
squig_arrow_prefix -> hear_arrow_prefix . [ SQUIGRARROW SQUIGLOLLI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squig_arrow_prefix -> hear_arrow_prefix

State 198:
## Known stack suffix:
## arrow_prefix
## LR(1) items:
squig_arrow_prefix -> arrow_prefix . [ SQUIGRARROW SQUIGLOLLI ]
straight_arrow_prefix -> arrow_prefix . [ RARROW LOLLI ]
## Transitions:
## Reductions:
-- On SQUIGRARROW SQUIGLOLLI
--   reduce production squig_arrow_prefix -> arrow_prefix
-- On RARROW LOLLI
--   reduce production straight_arrow_prefix -> arrow_prefix

State 199:
## Known stack suffix:
## BANG datatype
## LR(1) items:
session_datatype -> BANG datatype . DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On DOT shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## BANG datatype DOT
## LR(1) items:
session_datatype -> BANG datatype DOT . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## BANG datatype DOT datatype
## LR(1) items:
session_datatype -> BANG datatype DOT datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> BANG datatype DOT datatype

State 202:
## Known stack suffix:
## TYPE LPAREN datatype
## LR(1) items:
type_arg -> TYPE LPAREN datatype . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## TYPE LPAREN datatype RPAREN
## LR(1) items:
type_arg -> TYPE LPAREN datatype RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> TYPE LPAREN datatype RPAREN

State 204:
## Known stack suffix:
## ROW
## LR(1) items:
type_arg -> ROW . LPAREN row RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## ROW LPAREN
## LR(1) items:
type_arg -> ROW LPAREN . row RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VBAR shift to state 76
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On row shift to state 206
-- On fields shift to state 94
-- On field_label shift to state 95
-- On field shift to state 109
## Reductions:
-- On RPAREN
--   reduce production row ->

State 206:
## Known stack suffix:
## ROW LPAREN row
## LR(1) items:
type_arg -> ROW LPAREN row . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## ROW LPAREN row RPAREN
## LR(1) items:
type_arg -> ROW LPAREN row RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> ROW LPAREN row RPAREN

State 208:
## Known stack suffix:
## PRESENCE
## LR(1) items:
type_arg -> PRESENCE . LPAREN fieldspec RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## PRESENCE LPAREN
## LR(1) items:
type_arg -> PRESENCE LPAREN . fieldspec RPAREN [ RPAREN COMMA ]
## Transitions:
-- On MINUS shift to state 62
-- On LBRACE shift to state 63
-- On COLON shift to state 96
-- On fieldspec shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## PRESENCE LPAREN fieldspec
## LR(1) items:
type_arg -> PRESENCE LPAREN fieldspec . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## PRESENCE LPAREN fieldspec RPAREN
## LR(1) items:
type_arg -> PRESENCE LPAREN fieldspec RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> PRESENCE LPAREN fieldspec RPAREN

State 212:
## Known stack suffix:
## LBRACE
## LR(1) items:
type_arg -> LBRACE . row RBRACE [ RPAREN COMMA ]
## Transitions:
-- On VBAR shift to state 76
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On row shift to state 213
-- On fields shift to state 94
-- On field_label shift to state 95
-- On field shift to state 109
## Reductions:
-- On RBRACE
--   reduce production row ->

State 213:
## Known stack suffix:
## LBRACE row
## LR(1) items:
type_arg -> LBRACE row . RBRACE [ RPAREN COMMA ]
## Transitions:
-- On RBRACE shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## LBRACE row RBRACE
## LR(1) items:
type_arg -> LBRACE row RBRACE . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> LBRACE row RBRACE

State 215:
## Known stack suffix:
## CONSTRUCTOR LPAREN type_arg_list
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN type_arg_list . RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## CONSTRUCTOR LPAREN type_arg_list RPAREN
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN type_arg_list RPAREN . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> CONSTRUCTOR LPAREN type_arg_list RPAREN

State 217:
## Known stack suffix:
## type_arg
## LR(1) items:
type_arg_list -> type_arg . [ RPAREN ]
type_arg_list -> type_arg . COMMA type_arg_list [ RPAREN ]
## Transitions:
-- On COMMA shift to state 218
## Reductions:
-- On RPAREN
--   reduce production type_arg_list -> type_arg

State 218:
## Known stack suffix:
## type_arg COMMA
## LR(1) items:
type_arg_list -> type_arg COMMA . type_arg_list [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TYPE shift to state 131
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On ROW shift to state 204
-- On QUESTION shift to state 45
-- On PRESENCE shift to state 208
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On LBRACE shift to state 212
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On type_arg_list shift to state 219
-- On type_arg shift to state 217
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 220
## Reductions:

State 219:
## Known stack suffix:
## type_arg COMMA type_arg_list
## LR(1) items:
type_arg_list -> type_arg COMMA type_arg_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg_list -> type_arg COMMA type_arg_list

State 220:
## Known stack suffix:
## datatype
## LR(1) items:
type_arg -> datatype . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> datatype

State 221:
## Known stack suffix:
## FORALL varlist DOT datatype
## LR(1) items:
forall_datatype -> FORALL varlist DOT datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall_datatype -> FORALL varlist DOT datatype

State 222:
## Known stack suffix:
## typearg
## LR(1) items:
varlist -> typearg . [ RPAREN DOT ]
varlist -> typearg . COMMA varlist [ RPAREN DOT ]
## Transitions:
-- On COMMA shift to state 223
## Reductions:
-- On RPAREN DOT
--   reduce production varlist -> typearg

State 223:
## Known stack suffix:
## typearg COMMA
## LR(1) items:
varlist -> typearg COMMA . varlist [ RPAREN DOT ]
## Transitions:
-- On VARIABLE shift to state 117
-- On varlist shift to state 224
-- On typearg shift to state 222
## Reductions:

State 224:
## Known stack suffix:
## typearg COMMA varlist
## LR(1) items:
varlist -> typearg COMMA varlist . [ RPAREN DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production varlist -> typearg COMMA varlist

State 225:
## Known stack suffix:
## LBRACKET datatype
## LR(1) items:
primary_datatype -> LBRACKET datatype . RBRACKET [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RBRACKET shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LBRACKET datatype RBRACKET
## LR(1) items:
primary_datatype -> LBRACKET datatype RBRACKET . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LBRACKET datatype RBRACKET

State 227:
## Known stack suffix:
## COLON datatype
## LR(1) items:
fieldspec -> COLON datatype . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> COLON datatype

State 228:
## Known stack suffix:
## field_label fieldspec
## LR(1) items:
field -> field_label fieldspec . [ VBAR RPAREN RBRACE COMMA BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field -> field_label fieldspec

State 229:
## Known stack suffix:
## LBRACE COLON datatype
## LR(1) items:
fieldspec -> LBRACE COLON datatype . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RBRACE shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LBRACE COLON datatype RBRACE
## LR(1) items:
fieldspec -> LBRACE COLON datatype RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE COLON datatype RBRACE

State 231:
## Known stack suffix:
## CONSTRUCTOR fieldspec
## LR(1) items:
vfield -> CONSTRUCTOR fieldspec . [ VBAR RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfield -> CONSTRUCTOR fieldspec

State 232:
## Known stack suffix:
## LPAREN MU VARIABLE DOT vfields
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT vfields . RPAREN [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
-- On RPAREN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## LPAREN MU VARIABLE DOT vfields RPAREN
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT vfields RPAREN . [ RPAREN RBRACE COLONCOLON BARRBRACKET BARPLUSRBRACKET BARAMPRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_var -> LPAREN MU VARIABLE DOT vfields RPAREN

State 234:
## Known stack suffix:
## VBAR row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN ]
rfields -> VBAR row_var . [ RPAREN ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 85
## Reductions:
-- On RPAREN
--   reduce production rfields -> VBAR row_var

State 235:
## Known stack suffix:
## VBAR kinded_row_var
## LR(1) items:
rfields -> VBAR kinded_row_var . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> VBAR kinded_row_var

State 236:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ MINUS LBRACE COLON ]
type_var -> VARIABLE . [ RPAREN COMMA COLONCOLON ]
## Transitions:
## Reductions:
-- On MINUS LBRACE COLON
--   reduce production field_label -> VARIABLE
-- On RPAREN COMMA COLONCOLON
--   reduce production type_var -> VARIABLE

State 237:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN RPAREN . [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_datatypes -> LPAREN RPAREN

State 238:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
field_label -> CONSTRUCTOR . [ MINUS LBRACE COLON ]
primary_datatype -> CONSTRUCTOR . [ RPAREN COMMA ]
primary_datatype -> CONSTRUCTOR . LPAREN type_arg_list RPAREN [ RPAREN COMMA ]
qualified_type_name -> CONSTRUCTOR . DOT qualified_type_name_inner [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 130
-- On DOT shift to state 239
## Reductions:
-- On MINUS LBRACE COLON
--   reduce production field_label -> CONSTRUCTOR
-- On RPAREN COMMA
--   reduce production primary_datatype -> CONSTRUCTOR

State 239:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_type_name -> CONSTRUCTOR DOT . qualified_type_name_inner [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On CONSTRUCTOR shift to state 240
-- On qualified_type_name_inner shift to state 243
## Reductions:

State 240:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR . DOT qualified_type_name_inner [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
qualified_type_name_inner -> CONSTRUCTOR . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On DOT shift to state 241
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production qualified_type_name_inner -> CONSTRUCTOR

State 241:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR DOT . qualified_type_name_inner [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On CONSTRUCTOR shift to state 240
-- On qualified_type_name_inner shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_type_name_inner
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR DOT qualified_type_name_inner . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_type_name_inner -> CONSTRUCTOR DOT qualified_type_name_inner

State 243:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_type_name_inner
## LR(1) items:
qualified_type_name -> CONSTRUCTOR DOT qualified_type_name_inner . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RPAREN RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_type_name -> CONSTRUCTOR DOT qualified_type_name_inner

State 244:
## Known stack suffix:
## LPAREN rfields
## LR(1) items:
primary_datatype -> LPAREN rfields . RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## LPAREN rfields RPAREN
## LR(1) items:
primary_datatype -> LPAREN rfields RPAREN . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LPAREN rfields RPAREN

State 246:
## Known stack suffix:
## rfield
## LR(1) items:
rfields -> rfield . [ RPAREN ]
rfields -> rfield . VBAR row_var [ RPAREN ]
rfields -> rfield . VBAR kinded_row_var [ RPAREN ]
rfields -> rfield . COMMA rfields [ RPAREN ]
## Transitions:
-- On VBAR shift to state 247
-- On COMMA shift to state 250
## Reductions:
-- On RPAREN
--   reduce production rfields -> rfield

State 247:
## Known stack suffix:
## rfield VBAR
## LR(1) items:
rfields -> rfield VBAR . row_var [ RPAREN ]
rfields -> rfield VBAR . kinded_row_var [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 53
-- On UNDERSCORE shift to state 54
-- On PERCENTVAR shift to state 55
-- On PERCENT shift to state 56
-- On LPAREN shift to state 57
-- On row_var shift to state 248
-- On nonrec_row_var shift to state 86
-- On kinded_row_var shift to state 249
## Reductions:

State 248:
## Known stack suffix:
## rfield VBAR row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN ]
rfields -> rfield VBAR row_var . [ RPAREN ]
## Transitions:
-- On COLONCOLON shift to state 78
-- On subkind shift to state 85
## Reductions:
-- On RPAREN
--   reduce production rfields -> rfield VBAR row_var

State 249:
## Known stack suffix:
## rfield VBAR kinded_row_var
## LR(1) items:
rfields -> rfield VBAR kinded_row_var . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> rfield VBAR kinded_row_var

State 250:
## Known stack suffix:
## rfield COMMA
## LR(1) items:
rfields -> rfield COMMA . rfields [ RPAREN ]
## Transitions:
-- On VBAR shift to state 52
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On rfields shift to state 251
-- On rfield shift to state 246
-- On record_label shift to state 252
-- On field_label shift to state 254
## Reductions:

State 251:
## Known stack suffix:
## rfield COMMA rfields
## LR(1) items:
rfields -> rfield COMMA rfields . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> rfield COMMA rfields

State 252:
## Known stack suffix:
## record_label
## LR(1) items:
rfield -> record_label . fieldspec [ VBAR RPAREN COMMA ]
## Transitions:
-- On MINUS shift to state 62
-- On LBRACE shift to state 63
-- On COLON shift to state 96
-- On fieldspec shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## record_label fieldspec
## LR(1) items:
rfield -> record_label fieldspec . [ VBAR RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfield -> record_label fieldspec

State 254:
## Known stack suffix:
## field_label
## LR(1) items:
record_label -> field_label . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_label -> field_label

State 255:
## Known stack suffix:
## LPAREN qualified_type_name
## LR(1) items:
parenthesized_datatypes -> LPAREN qualified_type_name . RPAREN [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## LPAREN qualified_type_name RPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN qualified_type_name RPAREN . [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_datatypes -> LPAREN qualified_type_name RPAREN

State 257:
## Known stack suffix:
## LPAREN datatypes
## LR(1) items:
parenthesized_datatypes -> LPAREN datatypes . RPAREN [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## LPAREN datatypes RPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN datatypes RPAREN . [ WITH WHERE VBAR VAR VALUES TILDE TABLEKEYS SQUIGRARROW SQUIGLOLLI SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE MINUS LOLLI LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_datatypes -> LPAREN datatypes RPAREN

State 259:
## Known stack suffix:
## datatype
## LR(1) items:
datatypes -> datatype . [ RPAREN ]
datatypes -> datatype . COMMA datatypes [ RPAREN ]
## Transitions:
-- On COMMA shift to state 260
## Reductions:
-- On RPAREN
--   reduce production datatypes -> datatype

State 260:
## Known stack suffix:
## datatype COMMA
## LR(1) items:
datatypes -> datatype COMMA . datatypes [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatypes shift to state 261
-- On datatype shift to state 259
## Reductions:

State 261:
## Known stack suffix:
## datatype COMMA datatypes
## LR(1) items:
datatypes -> datatype COMMA datatypes . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatypes -> datatype COMMA datatypes

State 262:
## Known stack suffix:
## parenthesized_datatypes
## LR(1) items:
primary_datatype -> parenthesized_datatypes . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> parenthesized_datatypes

State 263:
## Known stack suffix:
## MU VARIABLE DOT mu_datatype
## LR(1) items:
mu_datatype -> MU VARIABLE DOT mu_datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mu_datatype -> MU VARIABLE DOT mu_datatype

State 264:
## Known stack suffix:
## QUESTION datatype
## LR(1) items:
session_datatype -> QUESTION datatype . DOT datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On DOT shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## QUESTION datatype DOT
## LR(1) items:
session_datatype -> QUESTION datatype DOT . datatype [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## QUESTION datatype DOT datatype
## LR(1) items:
session_datatype -> QUESTION datatype DOT datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> QUESTION datatype DOT datatype

State 267:
## Known stack suffix:
## TILDE datatype
## LR(1) items:
session_datatype -> TILDE datatype . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE OP ON LINFUN LARROW HANDLER FUN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_datatype -> TILDE datatype

State 268:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype . COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On COMMA shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA . datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype . COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On COMMA shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA . datatype RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype . RPAREN [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
-- On RPAREN shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN . [ WITH WHERE VBAR VAR VALUES TABLEKEYS SHALLOWHANDLER SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE OP ON NATIVE LLARROW LINFUN LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN HANDLER FUN FROM EQ END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLON CLIENT CASE BY BARRBRACKET BARRBRACE BARPLUSRBRACKET BARAMPRBRACKET AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN

State 274:
## Known stack suffix:
## typed_pattern COLON primary_datatype
## LR(1) items:
pattern -> typed_pattern COLON primary_datatype . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> typed_pattern COLON primary_datatype

State 275:
## Known stack suffix:
## primary_pattern
## LR(1) items:
negative_pattern -> primary_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> primary_pattern

State 276:
## Known stack suffix:
## LBRACKET patterns
## LR(1) items:
primary_pattern -> LBRACKET patterns . RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RBRACKET shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LBRACKET patterns RBRACKET
## LR(1) items:
primary_pattern -> LBRACKET patterns RBRACKET . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> LBRACKET patterns RBRACKET

State 278:
## Known stack suffix:
## pattern
## LR(1) items:
patterns -> pattern . [ RPAREN RBRACKET ]
patterns -> pattern . COMMA patterns [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 279
## Reductions:
-- On RPAREN RBRACKET
--   reduce production patterns -> pattern

State 279:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
patterns -> pattern COMMA . patterns [ RPAREN RBRACKET ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On patterns shift to state 280
-- On pattern shift to state 278
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 280:
## Known stack suffix:
## pattern COMMA patterns
## LR(1) items:
patterns -> pattern COMMA patterns . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patterns -> pattern COMMA patterns

State 281:
## Known stack suffix:
## parenthesized_pattern
## LR(1) items:
primary_pattern -> parenthesized_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> parenthesized_pattern

State 282:
## Known stack suffix:
## negative_pattern
## LR(1) items:
constructor_pattern -> negative_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_pattern -> negative_pattern

State 283:
## Known stack suffix:
## constructor_pattern
## LR(1) items:
cons_pattern -> constructor_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT AS ]
cons_pattern -> constructor_pattern . COLONCOLON cons_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT AS ]
## Transitions:
-- On COLONCOLON shift to state 284
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT AS
--   reduce production cons_pattern -> constructor_pattern

State 284:
## Known stack suffix:
## constructor_pattern COLONCOLON
## LR(1) items:
cons_pattern -> constructor_pattern COLONCOLON . cons_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On primary_pattern shift to state 275
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 286
## Reductions:

State 285:
## Known stack suffix:
## constant
## LR(1) items:
primary_pattern -> constant . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> constant

State 286:
## Known stack suffix:
## constructor_pattern COLONCOLON cons_pattern
## LR(1) items:
cons_pattern -> constructor_pattern COLONCOLON cons_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cons_pattern -> constructor_pattern COLONCOLON cons_pattern

State 287:
## Known stack suffix:
## cons_pattern
## LR(1) items:
typed_pattern -> cons_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
typed_pattern -> cons_pattern . AS var [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
## Transitions:
-- On AS shift to state 288
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT
--   reduce production typed_pattern -> cons_pattern

State 288:
## Known stack suffix:
## cons_pattern AS
## LR(1) items:
typed_pattern -> cons_pattern AS . var [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## cons_pattern AS var
## LR(1) items:
typed_pattern -> cons_pattern AS var . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_pattern -> cons_pattern AS var

State 290:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_pattern -> CONSTRUCTOR . [ RPAREN COMMA COLONCOLON COLON AS ]
constructor_pattern -> CONSTRUCTOR . parenthesized_pattern [ RPAREN COMMA COLONCOLON COLON AS ]
field_label -> CONSTRUCTOR . [ EQ ]
## Transitions:
-- On LPAREN shift to state 27
-- On parenthesized_pattern shift to state 36
## Reductions:
-- On RPAREN COMMA COLONCOLON COLON AS
--   reduce production constructor_pattern -> CONSTRUCTOR
-- On EQ
--   reduce production field_label -> CONSTRUCTOR

State 291:
## Known stack suffix:
## record_label
## LR(1) items:
labeled_patterns -> record_label . EQ pattern [ VBAR RPAREN ]
labeled_patterns -> record_label . EQ pattern COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On EQ shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## record_label EQ
## LR(1) items:
labeled_patterns -> record_label EQ . pattern [ VBAR RPAREN ]
labeled_patterns -> record_label EQ . pattern COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 293
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 293:
## Known stack suffix:
## record_label EQ pattern
## LR(1) items:
labeled_patterns -> record_label EQ pattern . [ VBAR RPAREN ]
labeled_patterns -> record_label EQ pattern . COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On COMMA shift to state 294
## Reductions:
-- On VBAR RPAREN
--   reduce production labeled_patterns -> record_label EQ pattern

State 294:
## Known stack suffix:
## record_label EQ pattern COMMA
## LR(1) items:
labeled_patterns -> record_label EQ pattern COMMA . labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 291
-- On labeled_patterns shift to state 295
-- On field_label shift to state 254
## Reductions:

State 295:
## Known stack suffix:
## record_label EQ pattern COMMA labeled_patterns
## LR(1) items:
labeled_patterns -> record_label EQ pattern COMMA labeled_patterns . [ VBAR RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_patterns -> record_label EQ pattern COMMA labeled_patterns

State 296:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
parenthesized_pattern -> LPAREN pattern . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN pattern . COMMA patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 297
-- On COMMA shift to state 298
## Reductions:

State 297:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN pattern RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN pattern RPAREN

State 298:
## Known stack suffix:
## LPAREN pattern COMMA
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA . patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On patterns shift to state 299
-- On pattern shift to state 278
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 299:
## Known stack suffix:
## LPAREN pattern COMMA patterns
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA patterns . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## LPAREN pattern COMMA patterns RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA patterns RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN pattern COMMA patterns RPAREN

State 301:
## Known stack suffix:
## LPAREN labeled_patterns
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns . VBAR pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN labeled_patterns . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VBAR shift to state 302
-- On RPAREN shift to state 305
## Reductions:

State 302:
## Known stack suffix:
## LPAREN labeled_patterns VBAR
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR . pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 303
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 303:
## Known stack suffix:
## LPAREN labeled_patterns VBAR pattern
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## LPAREN labeled_patterns VBAR pattern RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern RPAREN

State 305:
## Known stack suffix:
## LPAREN labeled_patterns RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN labeled_patterns RPAREN

State 306:
## Known stack suffix:
## UPDATE LPAREN table_generator
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator . RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN . perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WHERE shift to state 308
-- On perhaps_where shift to state 1073
## Reductions:
-- On SET
--   reduce production perhaps_where ->

State 308:
## Known stack suffix:
## WHERE
## LR(1) items:
perhaps_where -> WHERE . LPAREN exp RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SET SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RAISE QUERY PREFIXOP PAGE OTHERWISE ORDERBY ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FROM FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA CHAR CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## WHERE LPAREN
## LR(1) items:
perhaps_where -> WHERE LPAREN . exp RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SET SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RAISE QUERY PREFIXOP PAGE OTHERWISE ORDERBY ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FROM FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA CHAR CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1071
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 310:
## Known stack suffix:
## TRY
## LR(1) items:
case_expression -> TRY . exp AS pattern IN exp OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1064
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 311:
## Known stack suffix:
## TABLE
## LR(1) items:
table_expression -> TABLE . exp WITH datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
table_expression -> TABLE . exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1044
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 312:
## Known stack suffix:
## SWITCH
## LR(1) items:
case_expression -> SWITCH . LPAREN exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
case_expression -> SWITCH LPAREN . exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1039
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 314:
## Known stack suffix:
## SPAWNWAIT
## LR(1) items:
spawn_expression -> SPAWNWAIT . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 1038
## Reductions:

State 315:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . block_contents RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING STAR SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SLASHRXML SLASHFLAGS SLASH SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE RAISE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DOLLAR DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE CARET BY BARRBRACE BARBAR BANG AS AMPAMP ALTERNATE ALIEN ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 316
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SEMICOLON shift to state 384
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 524
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 872
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 876
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 879
-- On typed_handler_binding shift to state 881
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 882
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On perhaps_semi shift to state 891
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On links_open shift to state 892
-- On links_module shift to state 893
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On formlet_expression shift to state 746
-- On exp shift to state 896
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block_contents shift to state 976
-- On block shift to state 610
-- On bindings shift to state 900
-- On binding shift to state 905
-- On atomic_expression shift to state 611
-- On alien_block shift to state 904
## Reductions:
-- On RBRACE
--   reduce production perhaps_semi ->

State 316:
## Known stack suffix:
## VAR
## LR(1) items:
binding -> VAR . pattern EQ exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 317
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 317:
## Known stack suffix:
## VAR pattern
## LR(1) items:
binding -> VAR pattern . EQ exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On EQ shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## VAR pattern EQ
## LR(1) items:
binding -> VAR pattern EQ . exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1036
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 319:
## Known stack suffix:
## SPAWNCLIENT
## LR(1) items:
spawn_expression -> SPAWNCLIENT . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## SPAWNCLIENT block
## LR(1) items:
spawn_expression -> SPAWNCLIENT block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWNCLIENT block

State 321:
## Known stack suffix:
## SPAWNAT
## LR(1) items:
spawn_expression -> SPAWNAT . LPAREN exp COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## SPAWNAT LPAREN
## LR(1) items:
spawn_expression -> SPAWNAT LPAREN . exp COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1032
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 323:
## Known stack suffix:
## SPAWNANGELAT
## LR(1) items:
spawn_expression -> SPAWNANGELAT . LPAREN exp COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## SPAWNANGELAT LPAREN
## LR(1) items:
spawn_expression -> SPAWNANGELAT LPAREN . exp COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1028
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 325:
## Known stack suffix:
## SPAWNANGEL
## LR(1) items:
spawn_expression -> SPAWNANGEL . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## SPAWNANGEL block
## LR(1) items:
spawn_expression -> SPAWNANGEL block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWNANGEL block

State 327:
## Known stack suffix:
## SPAWN
## LR(1) items:
spawn_expression -> SPAWN . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## SPAWN block
## LR(1) items:
spawn_expression -> SPAWN block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWN block

State 329:
## Known stack suffix:
## SHALLOWHANDLER
## LR(1) items:
handler_depth -> SHALLOWHANDLER . [ VARIABLE LPAREN LBRACKET LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_depth -> SHALLOWHANDLER

State 330:
## Known stack suffix:
## SHALLOWHANDLE
## LR(1) items:
case_expression -> SHALLOWHANDLE . LPAREN exp RPAREN LBRACE cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## SHALLOWHANDLE LPAREN
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN . exp RPAREN LBRACE cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1023
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 332:
## Known stack suffix:
## SELECT
## LR(1) items:
session_expression -> SELECT . field_label exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On field_label shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## SELECT field_label
## LR(1) items:
session_expression -> SELECT field_label . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1022
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 334:
## Known stack suffix:
## RECEIVE
## LR(1) items:
atomic_expression -> RECEIVE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
case_expression -> RECEIVE . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 335
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production atomic_expression -> RECEIVE

State 335:
## Known stack suffix:
## RECEIVE LBRACE
## LR(1) items:
case_expression -> RECEIVE LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On perhaps_cases shift to state 1020
-- On cases shift to state 782
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 336:
## Known stack suffix:
## CASE
## LR(1) items:
case -> CASE . pattern RARROW block_contents [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 337
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 337:
## Known stack suffix:
## CASE pattern
## LR(1) items:
case -> CASE pattern . RARROW block_contents [ RBRACE CASE ]
## Transitions:
-- On RARROW shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## CASE pattern RARROW
## LR(1) items:
case -> CASE pattern RARROW . block_contents [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 316
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SEMICOLON shift to state 384
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 524
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 872
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 876
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 879
-- On typed_handler_binding shift to state 881
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 882
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On perhaps_semi shift to state 891
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On links_open shift to state 892
-- On links_module shift to state 893
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On formlet_expression shift to state 746
-- On exp shift to state 896
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block_contents shift to state 1019
-- On block shift to state 610
-- On bindings shift to state 900
-- On binding shift to state 905
-- On atomic_expression shift to state 611
-- On alien_block shift to state 904
## Reductions:
-- On RBRACE CASE
--   reduce production perhaps_semi ->

State 339:
## Known stack suffix:
## TYPENAME
## LR(1) items:
typedecl -> TYPENAME . CONSTRUCTOR typeargs_opt EQ datatype [ SEMICOLON ]
## Transitions:
-- On CONSTRUCTOR shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## TYPENAME CONSTRUCTOR
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR . typeargs_opt EQ datatype [ SEMICOLON ]
## Transitions:
-- On LPAREN shift to state 341
-- On typeargs_opt shift to state 344
## Reductions:
-- On EQ
--   reduce production typeargs_opt ->

State 341:
## Known stack suffix:
## LPAREN
## LR(1) items:
typeargs_opt -> LPAREN . varlist RPAREN [ EQ ]
## Transitions:
-- On VARIABLE shift to state 117
-- On varlist shift to state 342
-- On typearg shift to state 222
## Reductions:

State 342:
## Known stack suffix:
## LPAREN varlist
## LR(1) items:
typeargs_opt -> LPAREN varlist . RPAREN [ EQ ]
## Transitions:
-- On RPAREN shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## LPAREN varlist RPAREN
## LR(1) items:
typeargs_opt -> LPAREN varlist RPAREN . [ EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeargs_opt -> LPAREN varlist RPAREN

State 344:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt . EQ datatype [ SEMICOLON ]
## Transitions:
-- On EQ shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt EQ
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ . datatype [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt EQ datatype
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ datatype . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ datatype

State 347:
## Known stack suffix:
## SIG
## LR(1) items:
signature -> SIG . var COLON datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
signature -> SIG . op COLON datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On INFIXR9 shift to state 348
-- On INFIXR8 shift to state 349
-- On INFIXR7 shift to state 350
-- On INFIXR6 shift to state 351
-- On INFIXR5 shift to state 352
-- On INFIXR4 shift to state 353
-- On INFIXR3 shift to state 354
-- On INFIXR2 shift to state 355
-- On INFIXR1 shift to state 356
-- On INFIXR0 shift to state 357
-- On INFIXL9 shift to state 358
-- On INFIXL8 shift to state 359
-- On INFIXL7 shift to state 360
-- On INFIXL6 shift to state 361
-- On INFIXL5 shift to state 362
-- On INFIXL4 shift to state 363
-- On INFIXL3 shift to state 364
-- On INFIXL2 shift to state 365
-- On INFIXL1 shift to state 366
-- On INFIXL0 shift to state 367
-- On INFIX9 shift to state 368
-- On INFIX8 shift to state 369
-- On INFIX7 shift to state 370
-- On INFIX6 shift to state 371
-- On INFIX5 shift to state 372
-- On INFIX4 shift to state 373
-- On INFIX3 shift to state 374
-- On INFIX2 shift to state 375
-- On INFIX1 shift to state 376
-- On INFIX0 shift to state 377
-- On var shift to state 378
-- On op shift to state 381
## Reductions:

State 348:
## Known stack suffix:
## INFIXR9
## LR(1) items:
op -> INFIXR9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR9

State 349:
## Known stack suffix:
## INFIXR8
## LR(1) items:
op -> INFIXR8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR8

State 350:
## Known stack suffix:
## INFIXR7
## LR(1) items:
op -> INFIXR7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR7

State 351:
## Known stack suffix:
## INFIXR6
## LR(1) items:
op -> INFIXR6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR6

State 352:
## Known stack suffix:
## INFIXR5
## LR(1) items:
op -> INFIXR5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR5

State 353:
## Known stack suffix:
## INFIXR4
## LR(1) items:
op -> INFIXR4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR4

State 354:
## Known stack suffix:
## INFIXR3
## LR(1) items:
op -> INFIXR3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR3

State 355:
## Known stack suffix:
## INFIXR2
## LR(1) items:
op -> INFIXR2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR2

State 356:
## Known stack suffix:
## INFIXR1
## LR(1) items:
op -> INFIXR1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR1

State 357:
## Known stack suffix:
## INFIXR0
## LR(1) items:
op -> INFIXR0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR0

State 358:
## Known stack suffix:
## INFIXL9
## LR(1) items:
op -> INFIXL9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL9

State 359:
## Known stack suffix:
## INFIXL8
## LR(1) items:
op -> INFIXL8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL8

State 360:
## Known stack suffix:
## INFIXL7
## LR(1) items:
op -> INFIXL7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL7

State 361:
## Known stack suffix:
## INFIXL6
## LR(1) items:
op -> INFIXL6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL6

State 362:
## Known stack suffix:
## INFIXL5
## LR(1) items:
op -> INFIXL5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL5

State 363:
## Known stack suffix:
## INFIXL4
## LR(1) items:
op -> INFIXL4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL4

State 364:
## Known stack suffix:
## INFIXL3
## LR(1) items:
op -> INFIXL3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL3

State 365:
## Known stack suffix:
## INFIXL2
## LR(1) items:
op -> INFIXL2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL2

State 366:
## Known stack suffix:
## INFIXL1
## LR(1) items:
op -> INFIXL1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL1

State 367:
## Known stack suffix:
## INFIXL0
## LR(1) items:
op -> INFIXL0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL0

State 368:
## Known stack suffix:
## INFIX9
## LR(1) items:
op -> INFIX9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX9

State 369:
## Known stack suffix:
## INFIX8
## LR(1) items:
op -> INFIX8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX8

State 370:
## Known stack suffix:
## INFIX7
## LR(1) items:
op -> INFIX7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX7

State 371:
## Known stack suffix:
## INFIX6
## LR(1) items:
op -> INFIX6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX6

State 372:
## Known stack suffix:
## INFIX5
## LR(1) items:
op -> INFIX5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX5

State 373:
## Known stack suffix:
## INFIX4
## LR(1) items:
op -> INFIX4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX4

State 374:
## Known stack suffix:
## INFIX3
## LR(1) items:
op -> INFIX3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX3

State 375:
## Known stack suffix:
## INFIX2
## LR(1) items:
op -> INFIX2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX2

State 376:
## Known stack suffix:
## INFIX1
## LR(1) items:
op -> INFIX1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX1

State 377:
## Known stack suffix:
## INFIX0
## LR(1) items:
op -> INFIX0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX0

State 378:
## Known stack suffix:
## SIG var
## LR(1) items:
signature -> SIG var . COLON datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
-- On COLON shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## SIG var COLON
## LR(1) items:
signature -> SIG var COLON . datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## SIG var COLON datatype
## LR(1) items:
signature -> SIG var COLON datatype . [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> SIG var COLON datatype

State 381:
## Known stack suffix:
## SIG op
## LR(1) items:
signature -> SIG op . COLON datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
-- On COLON shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## SIG op COLON
## LR(1) items:
signature -> SIG op COLON . datatype [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## SIG op COLON datatype
## LR(1) items:
signature -> SIG op COLON datatype . [ VAR SHALLOWHANDLER OP LINFUN HANDLER FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> SIG op COLON datatype

State 384:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
perhaps_semi -> SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_semi -> SEMICOLON

State 385:
## Known stack suffix:
## RAISE
## LR(1) items:
case_expression -> RAISE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> RAISE

State 386:
## Known stack suffix:
## QUERY
## LR(1) items:
postfix_expression -> QUERY . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> QUERY . LBRACKET exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> QUERY . LBRACKET exp COMMA exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACKET shift to state 387
-- On LBRACE shift to state 315
-- On block shift to state 1018
## Reductions:

State 387:
## Known stack suffix:
## QUERY LBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET . exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> QUERY LBRACKET . exp COMMA exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1011
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 388:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
unary_expression -> PREFIXOP . unary_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 1010
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 389:
## Known stack suffix:
## RECEIVE
## LR(1) items:
atomic_expression -> RECEIVE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> RECEIVE

State 390:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
unary_expression -> MINUSDOT . unary_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 937
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 391:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_expression -> MINUS . unary_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 939
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 392:
## Known stack suffix:
## LXML
## LR(1) items:
xml_tree -> LXML . SLASHRXML [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML . RXML ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML . RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML . attrs RXML ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML . attrs SLASHRXML [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML . attrs RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 393
-- On SLASHRXML shift to state 394
-- On RXML shift to state 395
-- On LBRACE shift to state 315
-- On xmlid shift to state 989
-- On block shift to state 999
-- On attrs shift to state 1000
-- On attr_list shift to state 1006
-- On attr shift to state 1009
## Reductions:

State 393:
## Known stack suffix:
## VARIABLE
## LR(1) items:
xmlid -> VARIABLE . [ EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xmlid -> VARIABLE

State 394:
## Known stack suffix:
## LXML SLASHRXML
## LR(1) items:
xml_tree -> LXML SLASHRXML . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML SLASHRXML

State 395:
## Known stack suffix:
## LXML RXML
## LR(1) items:
xml_tree -> LXML RXML . ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML RXML . xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LXML shift to state 392
-- On LBRACEBAR shift to state 396
-- On LBRACE shift to state 965
-- On ENDTAG shift to state 978
-- On CDATA shift to state 979
-- On xml_tree shift to state 980
-- On xml_contents_list shift to state 981
-- On xml_contents shift to state 983
-- On page_placement shift to state 985
-- On formlet_placement shift to state 986
-- On formlet_binding shift to state 987
-- On block shift to state 988
## Reductions:

State 396:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
page_placement -> LBRACEBAR . exp BARRBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 963
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 397:
## Known stack suffix:
## PAGE
## LR(1) items:
formlet_expression -> PAGE . xml [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LXML shift to state 392
-- On xml_tree shift to state 398
-- On xml shift to state 399
## Reductions:

State 398:
## Known stack suffix:
## xml_tree
## LR(1) items:
xml -> xml_tree . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml -> xml_tree

State 399:
## Known stack suffix:
## PAGE xml
## LR(1) items:
formlet_expression -> PAGE xml . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> PAGE xml

State 400:
## Known stack suffix:
## OFFER
## LR(1) items:
session_expression -> OFFER . LPAREN exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 401
## Reductions:

State 401:
## Known stack suffix:
## OFFER LPAREN
## LR(1) items:
session_expression -> OFFER LPAREN . exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 958
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 402:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_thing -> LPAREN . binop RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . DOT record_label RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . labeled_exps VBAR exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN . exp WITH labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 403
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 29
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 30
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RPAREN shift to state 404
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 405
-- On MINUS shift to state 938
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On INFIXR9 shift to state 348
-- On INFIXR8 shift to state 349
-- On INFIXR7 shift to state 350
-- On INFIXR6 shift to state 351
-- On INFIXR5 shift to state 352
-- On INFIXR4 shift to state 353
-- On INFIXR3 shift to state 354
-- On INFIXR2 shift to state 355
-- On INFIXR1 shift to state 356
-- On INFIXR0 shift to state 357
-- On INFIXL9 shift to state 358
-- On INFIXL8 shift to state 359
-- On INFIXL7 shift to state 360
-- On INFIXL6 shift to state 361
-- On INFIXL5 shift to state 362
-- On INFIXL4 shift to state 363
-- On INFIXL3 shift to state 364
-- On INFIXL2 shift to state 365
-- On INFIXL1 shift to state 366
-- On INFIXL0 shift to state 367
-- On INFIX9 shift to state 368
-- On INFIX8 shift to state 369
-- On INFIX7 shift to state 370
-- On INFIX6 shift to state 371
-- On INFIX5 shift to state 372
-- On INFIX4 shift to state 373
-- On INFIX3 shift to state 374
-- On INFIX2 shift to state 375
-- On INFIX1 shift to state 376
-- On INFIX0 shift to state 377
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOT shift to state 940
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 943
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On record_label shift to state 818
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On op shift to state 944
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On labeled_exps shift to state 945
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On field_label shift to state 254
-- On exps shift to state 950
-- On exp shift to state 952
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On binop shift to state 956
-- On atomic_expression shift to state 611
## Reductions:

State 403:
## Known stack suffix:
## VARIABLE
## LR(1) items:
atomic_expression -> VARIABLE . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
field_label -> VARIABLE . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AMPAMP
--   reduce production atomic_expression -> VARIABLE
-- On EQ
--   reduce production field_label -> VARIABLE

State 404:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN RPAREN

State 405:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
binop -> MINUSDOT . [ RPAREN ]
unary_expression -> MINUSDOT . unary_expression [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 937
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:
-- On RPAREN
--   reduce production binop -> MINUSDOT

State 406:
## Known stack suffix:
## LINFUN
## LR(1) items:
primary_expression -> LINFUN . arg_lists block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 413
## Reductions:

State 407:
## Known stack suffix:
## LPAREN
## LR(1) items:
multi_args -> LPAREN . patterns RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
multi_args -> LPAREN . RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On RPAREN shift to state 408
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On patterns shift to state 409
-- On pattern shift to state 278
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 408:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
multi_args -> LPAREN RPAREN . [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multi_args -> LPAREN RPAREN

State 409:
## Known stack suffix:
## LPAREN patterns
## LR(1) items:
multi_args -> LPAREN patterns . RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
-- On RPAREN shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## LPAREN patterns RPAREN
## LR(1) items:
multi_args -> LPAREN patterns RPAREN . [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multi_args -> LPAREN patterns RPAREN

State 411:
## Known stack suffix:
## multi_args
## LR(1) items:
arg_lists -> multi_args . [ SERVER NATIVE LBRACE CLIENT ]
arg_lists -> multi_args . arg_lists [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 412
## Reductions:
-- On SERVER NATIVE LBRACE CLIENT
--   reduce production arg_lists -> multi_args

State 412:
## Known stack suffix:
## multi_args arg_lists
## LR(1) items:
arg_lists -> multi_args arg_lists . [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_lists -> multi_args arg_lists

State 413:
## Known stack suffix:
## LINFUN arg_lists
## LR(1) items:
primary_expression -> LINFUN arg_lists . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## LINFUN arg_lists block
## LR(1) items:
primary_expression -> LINFUN arg_lists block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LINFUN arg_lists block

State 415:
## Known stack suffix:
## LEFTTRIANGLE
## LR(1) items:
primary_expression -> LEFTTRIANGLE . cp_expression RIGHTTRIANGLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 935
## Reductions:

State 416:
## Known stack suffix:
## VARIABLE
## LR(1) items:
cp_name -> VARIABLE . [ VBAR RPAREN RIGHTTRIANGLE RBRACE LRARROW LPAREN LBRACKET LBRACE DOT CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_name -> VARIABLE

State 417:
## Known stack suffix:
## OFFER
## LR(1) items:
cp_expression -> OFFER . cp_name LBRACE perhaps_cp_cases RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On cp_name shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## OFFER cp_name
## LR(1) items:
cp_expression -> OFFER cp_name . LBRACE perhaps_cp_cases RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On LBRACE shift to state 419
## Reductions:

State 419:
## Known stack suffix:
## OFFER cp_name LBRACE
## LR(1) items:
cp_expression -> OFFER cp_name LBRACE . perhaps_cp_cases RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On CASE shift to state 420
-- On perhaps_cp_cases shift to state 930
-- On cp_cases shift to state 932
-- On cp_case shift to state 933
## Reductions:
-- On RBRACE
--   reduce production perhaps_cp_cases ->

State 420:
## Known stack suffix:
## CASE
## LR(1) items:
cp_case -> CASE . cp_label RARROW cp_expression [ RBRACE CASE ]
## Transitions:
-- On CONSTRUCTOR shift to state 421
-- On cp_label shift to state 422
## Reductions:

State 421:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
cp_label -> CONSTRUCTOR . [ VARIABLE RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_label -> CONSTRUCTOR

State 422:
## Known stack suffix:
## CASE cp_label
## LR(1) items:
cp_case -> CASE cp_label . RARROW cp_expression [ RBRACE CASE ]
## Transitions:
-- On RARROW shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## CASE cp_label RARROW
## LR(1) items:
cp_case -> CASE cp_label RARROW . cp_expression [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 929
## Reductions:

State 424:
## Known stack suffix:
## NU
## LR(1) items:
cp_expression -> NU . cp_name DOT LPAREN cp_expression VBAR cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On cp_name shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## NU cp_name
## LR(1) items:
cp_expression -> NU cp_name . DOT LPAREN cp_expression VBAR cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On DOT shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## NU cp_name DOT
## LR(1) items:
cp_expression -> NU cp_name DOT . LPAREN cp_expression VBAR cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On LPAREN shift to state 427
## Reductions:

State 427:
## Known stack suffix:
## NU cp_name DOT LPAREN
## LR(1) items:
cp_expression -> NU cp_name DOT LPAREN . cp_expression VBAR cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 925
## Reductions:

State 428:
## Known stack suffix:
## LBRACE
## LR(1) items:
cp_expression -> LBRACE . block_contents RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 316
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SEMICOLON shift to state 384
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 524
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 872
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 876
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 879
-- On typed_handler_binding shift to state 881
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 882
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On perhaps_semi shift to state 891
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On links_open shift to state 892
-- On links_module shift to state 893
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On formlet_expression shift to state 746
-- On exp shift to state 896
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block_contents shift to state 898
-- On block shift to state 610
-- On bindings shift to state 900
-- On binding shift to state 905
-- On atomic_expression shift to state 611
-- On alien_block shift to state 904
## Reductions:
-- On RBRACE
--   reduce production perhaps_semi ->

State 429:
## Known stack suffix:
## OPEN
## LR(1) items:
links_open -> OPEN . qualified_type_name [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
links_open -> OPEN . CONSTRUCTOR [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On CONSTRUCTOR shift to state 430
-- On qualified_type_name shift to state 431
## Reductions:

State 430:
## Known stack suffix:
## OPEN CONSTRUCTOR
## LR(1) items:
links_open -> OPEN CONSTRUCTOR . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
qualified_type_name -> CONSTRUCTOR . DOT qualified_type_name_inner [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On DOT shift to state 239
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production links_open -> OPEN CONSTRUCTOR

State 431:
## Known stack suffix:
## OPEN qualified_type_name
## LR(1) items:
links_open -> OPEN qualified_type_name . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production links_open -> OPEN qualified_type_name

State 432:
## Known stack suffix:
## MODULE
## LR(1) items:
links_module -> MODULE . module_name moduleblock [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On CONSTRUCTOR shift to state 433
-- On module_name shift to state 434
## Reductions:

State 433:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
module_name -> CONSTRUCTOR . [ LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_name -> CONSTRUCTOR

State 434:
## Known stack suffix:
## MODULE module_name
## LR(1) items:
links_module -> MODULE module_name . moduleblock [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 435
-- On moduleblock shift to state 523
## Reductions:

State 435:
## Known stack suffix:
## LBRACE
## LR(1) items:
moduleblock -> LBRACE . declarations RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VAR shift to state 3
-- On TYPENAME shift to state 339
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On MODULE shift to state 432
-- On LINFUN shift to state 453
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On ALIEN shift to state 467
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On signature shift to state 489
-- On nofun_declaration shift to state 509
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On handler_depth shift to state 494
-- On fun_declaration shift to state 512
-- On fixity shift to state 513
-- On declarations shift to state 518
-- On declaration shift to state 522
-- On alien_block shift to state 521
## Reductions:

State 436:
## Known stack suffix:
## PREFIX
## LR(1) items:
fixity -> PREFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> PREFIX

State 437:
## Known stack suffix:
## POSTFIX
## LR(1) items:
fixity -> POSTFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> POSTFIX

State 438:
## Known stack suffix:
## OP
## LR(1) items:
tlfunbinding -> OP . pattern op pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP . prefixop pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP . pattern postfixop perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On PREFIXOP shift to state 439
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On prefixop shift to state 440
-- On pattern shift to state 444
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 439:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
prefixop -> PREFIXOP . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefixop -> PREFIXOP

State 440:
## Known stack suffix:
## OP prefixop
## LR(1) items:
tlfunbinding -> OP prefixop . pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 441
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 441:
## Known stack suffix:
## OP prefixop pattern
## LR(1) items:
tlfunbinding -> OP prefixop pattern . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 442
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 442:
## Known stack suffix:
## OP prefixop pattern perhaps_location
## LR(1) items:
tlfunbinding -> OP prefixop pattern perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 443
## Reductions:

State 443:
## Known stack suffix:
## OP prefixop pattern perhaps_location block
## LR(1) items:
tlfunbinding -> OP prefixop pattern perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP prefixop pattern perhaps_location block

State 444:
## Known stack suffix:
## OP pattern
## LR(1) items:
tlfunbinding -> OP pattern . op pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP pattern . postfixop perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On POSTFIXOP shift to state 445
-- On INFIXR9 shift to state 348
-- On INFIXR8 shift to state 349
-- On INFIXR7 shift to state 350
-- On INFIXR6 shift to state 351
-- On INFIXR5 shift to state 352
-- On INFIXR4 shift to state 353
-- On INFIXR3 shift to state 354
-- On INFIXR2 shift to state 355
-- On INFIXR1 shift to state 356
-- On INFIXR0 shift to state 357
-- On INFIXL9 shift to state 358
-- On INFIXL8 shift to state 359
-- On INFIXL7 shift to state 360
-- On INFIXL6 shift to state 361
-- On INFIXL5 shift to state 362
-- On INFIXL4 shift to state 363
-- On INFIXL3 shift to state 364
-- On INFIXL2 shift to state 365
-- On INFIXL1 shift to state 366
-- On INFIXL0 shift to state 367
-- On INFIX9 shift to state 368
-- On INFIX8 shift to state 369
-- On INFIX7 shift to state 370
-- On INFIX6 shift to state 371
-- On INFIX5 shift to state 372
-- On INFIX4 shift to state 373
-- On INFIX3 shift to state 374
-- On INFIX2 shift to state 375
-- On INFIX1 shift to state 376
-- On INFIX0 shift to state 377
-- On postfixop shift to state 446
-- On op shift to state 449
## Reductions:

State 445:
## Known stack suffix:
## POSTFIXOP
## LR(1) items:
postfixop -> POSTFIXOP . [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfixop -> POSTFIXOP

State 446:
## Known stack suffix:
## OP pattern postfixop
## LR(1) items:
tlfunbinding -> OP pattern postfixop . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 447
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 447:
## Known stack suffix:
## OP pattern postfixop perhaps_location
## LR(1) items:
tlfunbinding -> OP pattern postfixop perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## OP pattern postfixop perhaps_location block
## LR(1) items:
tlfunbinding -> OP pattern postfixop perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP pattern postfixop perhaps_location block

State 449:
## Known stack suffix:
## OP pattern op
## LR(1) items:
tlfunbinding -> OP pattern op . pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 450
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 450:
## Known stack suffix:
## OP pattern op pattern
## LR(1) items:
tlfunbinding -> OP pattern op pattern . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 451
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 451:
## Known stack suffix:
## OP pattern op pattern perhaps_location
## LR(1) items:
tlfunbinding -> OP pattern op pattern perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## OP pattern op pattern perhaps_location block
## LR(1) items:
tlfunbinding -> OP pattern op pattern perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP pattern op pattern perhaps_location block

State 453:
## Known stack suffix:
## LINFUN
## LR(1) items:
tlfunbinding -> LINFUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## LINFUN var
## LR(1) items:
tlfunbinding -> LINFUN var . arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## LINFUN var arg_lists
## LR(1) items:
tlfunbinding -> LINFUN var arg_lists . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 456
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 456:
## Known stack suffix:
## LINFUN var arg_lists perhaps_location
## LR(1) items:
tlfunbinding -> LINFUN var arg_lists perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## LINFUN var arg_lists perhaps_location block
## LR(1) items:
tlfunbinding -> LINFUN var arg_lists perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> LINFUN var arg_lists perhaps_location block

State 458:
## Known stack suffix:
## INFIXR
## LR(1) items:
fixity -> INFIXR . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIXR

State 459:
## Known stack suffix:
## INFIXL
## LR(1) items:
fixity -> INFIXL . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIXL

State 460:
## Known stack suffix:
## INFIX
## LR(1) items:
fixity -> INFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIX

State 461:
## Known stack suffix:
## HANDLER
## LR(1) items:
handler_depth -> HANDLER . [ VARIABLE LPAREN LBRACKET LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_depth -> HANDLER

State 462:
## Known stack suffix:
## FUN
## LR(1) items:
tlfunbinding -> FUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## FUN var
## LR(1) items:
tlfunbinding -> FUN var . arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## FUN var arg_lists
## LR(1) items:
tlfunbinding -> FUN var arg_lists . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 6
-- On NATIVE shift to state 7
-- On CLIENT shift to state 8
-- On perhaps_location shift to state 465
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 465:
## Known stack suffix:
## FUN var arg_lists perhaps_location
## LR(1) items:
tlfunbinding -> FUN var arg_lists perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## FUN var arg_lists perhaps_location block
## LR(1) items:
tlfunbinding -> FUN var arg_lists perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> FUN var arg_lists perhaps_location block

State 467:
## Known stack suffix:
## ALIEN
## LR(1) items:
alien_block -> ALIEN . VARIABLE STRING LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
nofun_declaration -> ALIEN . VARIABLE STRING var COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## ALIEN VARIABLE
## LR(1) items:
alien_block -> ALIEN VARIABLE . STRING LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
nofun_declaration -> ALIEN VARIABLE . STRING var COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On STRING shift to state 469
## Reductions:

State 469:
## Known stack suffix:
## ALIEN VARIABLE STRING
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING . LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
nofun_declaration -> ALIEN VARIABLE STRING . var COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LBRACE shift to state 470
-- On var shift to state 479
## Reductions:

State 470:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE . alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 471
-- On alien_datatypes shift to state 475
-- On alien_datatype shift to state 477
## Reductions:

State 471:
## Known stack suffix:
## var
## LR(1) items:
alien_datatype -> var . COLON datatype SEMICOLON [ VARIABLE RBRACE ]
## Transitions:
-- On COLON shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## var COLON
## LR(1) items:
alien_datatype -> var COLON . datatype SEMICOLON [ VARIABLE RBRACE ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 473
## Reductions:

State 473:
## Known stack suffix:
## var COLON datatype
## LR(1) items:
alien_datatype -> var COLON datatype . SEMICOLON [ VARIABLE RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## var COLON datatype SEMICOLON
## LR(1) items:
alien_datatype -> var COLON datatype SEMICOLON . [ VARIABLE RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alien_datatype -> var COLON datatype SEMICOLON

State 475:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE alien_datatypes
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes . RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On RBRACE shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE

State 477:
## Known stack suffix:
## alien_datatype
## LR(1) items:
alien_datatypes -> alien_datatype . [ RBRACE ]
alien_datatypes -> alien_datatype . alien_datatypes [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 471
-- On alien_datatypes shift to state 478
-- On alien_datatype shift to state 477
## Reductions:
-- On RBRACE
--   reduce production alien_datatypes -> alien_datatype

State 478:
## Known stack suffix:
## alien_datatype alien_datatypes
## LR(1) items:
alien_datatypes -> alien_datatype alien_datatypes . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production alien_datatypes -> alien_datatype alien_datatypes

State 479:
## Known stack suffix:
## ALIEN VARIABLE STRING var
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var . COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On COLON shift to state 480
## Reductions:

State 480:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON . datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 481
## Reductions:

State 481:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON datatype
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON datatype SEMICOLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype SEMICOLON

State 483:
## Known stack suffix:
## typedecl
## LR(1) items:
nofun_declaration -> typedecl . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
nofun_declaration -> typedecl SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> typedecl SEMICOLON

State 485:
## Known stack suffix:
## typed_handler_binding
## LR(1) items:
fun_declaration -> typed_handler_binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> typed_handler_binding

State 486:
## Known stack suffix:
## tlvarbinding
## LR(1) items:
nofun_declaration -> tlvarbinding . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> tlvarbinding SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> tlvarbinding SEMICOLON

State 488:
## Known stack suffix:
## tlfunbinding
## LR(1) items:
fun_declaration -> tlfunbinding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> tlfunbinding

State 489:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
fun_declaration -> signature . typed_handler_binding [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
nofun_declaration -> signature . tlvarbinding SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VAR shift to state 3
-- On SHALLOWHANDLER shift to state 329
-- On OP shift to state 438
-- On LINFUN shift to state 453
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On typed_handler_binding shift to state 490
-- On tlvarbinding shift to state 491
-- On tlfunbinding shift to state 493
-- On handler_depth shift to state 494
## Reductions:

State 490:
## Known stack suffix:
## signature typed_handler_binding
## LR(1) items:
fun_declaration -> signature typed_handler_binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> signature typed_handler_binding

State 491:
## Known stack suffix:
## signature tlvarbinding
## LR(1) items:
nofun_declaration -> signature tlvarbinding . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## signature tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> signature tlvarbinding SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> signature tlvarbinding SEMICOLON

State 493:
## Known stack suffix:
## signature tlfunbinding
## LR(1) items:
fun_declaration -> signature tlfunbinding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> signature tlfunbinding

State 494:
## Known stack suffix:
## handler_depth
## LR(1) items:
typed_handler_binding -> handler_depth . optional_computation_parameter var handler_parameterization [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACKET shift to state 495
-- On optional_computation_parameter shift to state 498
## Reductions:
-- On VARIABLE
--   reduce production optional_computation_parameter ->

State 495:
## Known stack suffix:
## LBRACKET
## LR(1) items:
optional_computation_parameter -> LBRACKET . pattern RBRACKET [ VARIABLE LPAREN LBRACE ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 496
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 496:
## Known stack suffix:
## LBRACKET pattern
## LR(1) items:
optional_computation_parameter -> LBRACKET pattern . RBRACKET [ VARIABLE LPAREN LBRACE ]
## Transitions:
-- On RBRACKET shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## LBRACKET pattern RBRACKET
## LR(1) items:
optional_computation_parameter -> LBRACKET pattern RBRACKET . [ VARIABLE LPAREN LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_computation_parameter -> LBRACKET pattern RBRACKET

State 498:
## Known stack suffix:
## handler_depth optional_computation_parameter
## LR(1) items:
typed_handler_binding -> handler_depth optional_computation_parameter . var handler_parameterization [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## handler_depth optional_computation_parameter var
## LR(1) items:
typed_handler_binding -> handler_depth optional_computation_parameter var . handler_parameterization [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On LBRACE shift to state 500
-- On multi_args shift to state 411
-- On handler_parameterization shift to state 505
-- On handler_body shift to state 506
-- On arg_lists shift to state 507
## Reductions:

State 500:
## Known stack suffix:
## LBRACE
## LR(1) items:
handler_body -> LBRACE . cases RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
-- On CASE shift to state 336
-- On cases shift to state 501
-- On case shift to state 503
## Reductions:

State 501:
## Known stack suffix:
## LBRACE cases
## LR(1) items:
handler_body -> LBRACE cases . RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
-- On RBRACE shift to state 502
## Reductions:

State 502:
## Known stack suffix:
## LBRACE cases RBRACE
## LR(1) items:
handler_body -> LBRACE cases RBRACE . [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_body -> LBRACE cases RBRACE

State 503:
## Known stack suffix:
## case
## LR(1) items:
cases -> case . [ RBRACE ]
cases -> case . cases [ RBRACE ]
## Transitions:
-- On CASE shift to state 336
-- On cases shift to state 504
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production cases -> case

State 504:
## Known stack suffix:
## case cases
## LR(1) items:
cases -> case cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> case cases

State 505:
## Known stack suffix:
## handler_depth optional_computation_parameter var handler_parameterization
## LR(1) items:
typed_handler_binding -> handler_depth optional_computation_parameter var handler_parameterization . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_handler_binding -> handler_depth optional_computation_parameter var handler_parameterization

State 506:
## Known stack suffix:
## handler_body
## LR(1) items:
handler_parameterization -> handler_body . [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_parameterization -> handler_body

State 507:
## Known stack suffix:
## arg_lists
## LR(1) items:
handler_parameterization -> arg_lists . handler_body [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
-- On LBRACE shift to state 500
-- On handler_body shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## arg_lists handler_body
## LR(1) items:
handler_parameterization -> arg_lists handler_body . [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RAISE QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handler_parameterization -> arg_lists handler_body

State 509:
## Known stack suffix:
## nofun_declaration
## LR(1) items:
declaration -> nofun_declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> nofun_declaration

State 510:
## Known stack suffix:
## links_open
## LR(1) items:
nofun_declaration -> links_open . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> links_open

State 511:
## Known stack suffix:
## links_module
## LR(1) items:
nofun_declaration -> links_module . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> links_module

State 512:
## Known stack suffix:
## fun_declaration
## LR(1) items:
declaration -> fun_declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> fun_declaration

State 513:
## Known stack suffix:
## fixity
## LR(1) items:
nofun_declaration -> fixity . perhaps_uinteger op SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On UINTEGER shift to state 514
-- On perhaps_uinteger shift to state 515
## Reductions:
-- On INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
--   reduce production perhaps_uinteger ->

State 514:
## Known stack suffix:
## UINTEGER
## LR(1) items:
perhaps_uinteger -> UINTEGER . [ INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_uinteger -> UINTEGER

State 515:
## Known stack suffix:
## fixity perhaps_uinteger
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger . op SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On INFIXR9 shift to state 348
-- On INFIXR8 shift to state 349
-- On INFIXR7 shift to state 350
-- On INFIXR6 shift to state 351
-- On INFIXR5 shift to state 352
-- On INFIXR4 shift to state 353
-- On INFIXR3 shift to state 354
-- On INFIXR2 shift to state 355
-- On INFIXR1 shift to state 356
-- On INFIXR0 shift to state 357
-- On INFIXL9 shift to state 358
-- On INFIXL8 shift to state 359
-- On INFIXL7 shift to state 360
-- On INFIXL6 shift to state 361
-- On INFIXL5 shift to state 362
-- On INFIXL4 shift to state 363
-- On INFIXL3 shift to state 364
-- On INFIXL2 shift to state 365
-- On INFIXL1 shift to state 366
-- On INFIXL0 shift to state 367
-- On INFIX9 shift to state 368
-- On INFIX8 shift to state 369
-- On INFIX7 shift to state 370
-- On INFIX6 shift to state 371
-- On INFIX5 shift to state 372
-- On INFIX4 shift to state 373
-- On INFIX3 shift to state 374
-- On INFIX2 shift to state 375
-- On INFIX1 shift to state 376
-- On INFIX0 shift to state 377
-- On op shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## fixity perhaps_uinteger op
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 517
## Reductions:

State 517:
## Known stack suffix:
## fixity perhaps_uinteger op SEMICOLON
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> fixity perhaps_uinteger op SEMICOLON

State 518:
## Known stack suffix:
## LBRACE declarations
## LR(1) items:
declarations -> declarations . declaration [ VAR TYPENAME SIG SHALLOWHANDLER RBRACE PREFIX POSTFIX OPEN OP MODULE LINFUN INFIXR INFIXL INFIX HANDLER FUN ALIEN ]
moduleblock -> LBRACE declarations . RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VAR shift to state 3
-- On TYPENAME shift to state 339
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On RBRACE shift to state 519
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On MODULE shift to state 432
-- On LINFUN shift to state 453
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On ALIEN shift to state 467
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On signature shift to state 489
-- On nofun_declaration shift to state 509
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On handler_depth shift to state 494
-- On fun_declaration shift to state 512
-- On fixity shift to state 513
-- On declaration shift to state 520
-- On alien_block shift to state 521
## Reductions:

State 519:
## Known stack suffix:
## LBRACE declarations RBRACE
## LR(1) items:
moduleblock -> LBRACE declarations RBRACE . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production moduleblock -> LBRACE declarations RBRACE

State 520:
## Known stack suffix:
## declarations declaration
## LR(1) items:
declarations -> declarations declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declarations declaration

State 521:
## Known stack suffix:
## alien_block
## LR(1) items:
nofun_declaration -> alien_block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> alien_block

State 522:
## Known stack suffix:
## declaration
## LR(1) items:
declarations -> declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declaration

State 523:
## Known stack suffix:
## MODULE module_name moduleblock
## LR(1) items:
links_module -> MODULE module_name moduleblock . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RBRACE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production links_module -> MODULE module_name moduleblock

State 524:
## Known stack suffix:
## LINFUN
## LR(1) items:
binding -> LINFUN . var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
primary_expression -> LINFUN . arg_lists block [ SEMICOLON RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE DOT COLONCOLON COLON CASE BARBAR BANG AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LPAREN shift to state 407
-- On var shift to state 525
-- On multi_args shift to state 411
-- On arg_lists shift to state 413
## Reductions:

State 525:
## Known stack suffix:
## LINFUN var
## LR(1) items:
binding -> LINFUN var . arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## LINFUN var arg_lists
## LR(1) items:
binding -> LINFUN var arg_lists . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 527
## Reductions:

State 527:
## Known stack suffix:
## LINFUN var arg_lists block
## LR(1) items:
binding -> LINFUN var arg_lists block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> LINFUN var arg_lists block

State 528:
## Known stack suffix:
## LENSSELECT
## LR(1) items:
lens_expression -> LENSSELECT . FROM exp BY exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On FROM shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## LENSSELECT FROM
## LR(1) items:
lens_expression -> LENSSELECT FROM . exp BY exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 869
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 530:
## Known stack suffix:
## LENSPUT
## LR(1) items:
lens_expression -> LENSPUT . exp WITH exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 866
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 531:
## Known stack suffix:
## LENSJOIN
## LR(1) items:
lens_expression -> LENSJOIN . exp WITH exp ON exp DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN . exp WITH exp ON exp DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 854
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 532:
## Known stack suffix:
## LENSGET
## LR(1) items:
lens_expression -> LENSGET . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 853
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 533:
## Known stack suffix:
## LENSDROP
## LR(1) items:
lens_expression -> LENSDROP . VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## LENSDROP VARIABLE
## LR(1) items:
lens_expression -> LENSDROP VARIABLE . DETERMINED BY VARIABLE DEFAULT exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On DETERMINED shift to state 535
## Reductions:

State 535:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED . BY VARIABLE DEFAULT exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On BY shift to state 536
## Reductions:

State 536:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY . VARIABLE DEFAULT exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY VARIABLE
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE . DEFAULT exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On DEFAULT shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT . exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 850
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 539:
## Known stack suffix:
## LENS
## LR(1) items:
lens_expression -> LENS . exp DEFAULT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENS . exp TABLEKEYS exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENS . exp WITH LBRACE fn_deps RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 834
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 540:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_expression -> LBRACKET . RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
primary_expression -> LBRACKET . exps RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
primary_expression -> LBRACKET . exp DOTDOT exp RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RBRACKET shift to state 541
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exps shift to state 828
-- On exp shift to state 830
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 541:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
primary_expression -> LBRACKET RBRACKET . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET RBRACKET

State 542:
## Known stack suffix:
## INSERT
## LR(1) items:
database_expression -> INSERT . exp VALUES LPAREN RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LPAREN record_labels RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 795
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 543:
## Known stack suffix:
## IF
## LR(1) items:
conditional_expression -> IF . LPAREN exp RPAREN exp ELSE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 544
## Reductions:

State 544:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
conditional_expression -> IF LPAREN . exp RPAREN exp ELSE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 790
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 545:
## Known stack suffix:
## HANDLE
## LR(1) items:
case_expression -> HANDLE . LPAREN exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
case_expression -> HANDLE . LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## HANDLE LPAREN
## LR(1) items:
case_expression -> HANDLE LPAREN . exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
case_expression -> HANDLE LPAREN . exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 771
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 547:
## Known stack suffix:
## FUN
## LR(1) items:
primary_expression -> FUN . arg_lists block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## FUN arg_lists
## LR(1) items:
primary_expression -> FUN arg_lists . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## FUN arg_lists block
## LR(1) items:
primary_expression -> FUN arg_lists block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> FUN arg_lists block

State 550:
## Known stack suffix:
## FORMLET
## LR(1) items:
formlet_expression -> FORMLET . xml YIELDS exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LXML shift to state 392
-- On xml_tree shift to state 398
-- On xml shift to state 551
## Reductions:

State 551:
## Known stack suffix:
## FORMLET xml
## LR(1) items:
formlet_expression -> FORMLET xml . YIELDS exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On YIELDS shift to state 552
## Reductions:

State 552:
## Known stack suffix:
## FORMLET xml YIELDS
## LR(1) items:
formlet_expression -> FORMLET xml YIELDS . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 770
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 553:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_expression -> FOR . LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_expression -> FOR LPAREN . perhaps_generators RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On table_generator shift to state 555
-- On primary_pattern shift to state 275
-- On perhaps_generators shift to state 556
-- On pattern shift to state 762
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On list_generator shift to state 765
-- On generators shift to state 766
-- On generator shift to state 767
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:
-- On RPAREN
--   reduce production perhaps_generators ->

State 555:
## Known stack suffix:
## table_generator
## LR(1) items:
generator -> table_generator . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator -> table_generator

State 556:
## Known stack suffix:
## FOR LPAREN perhaps_generators
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators . RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN . perhaps_where perhaps_orderby exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WHERE shift to state 308
-- On perhaps_where shift to state 558
## Reductions:
-- On VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE ORDERBY OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production perhaps_where ->

State 558:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where . perhaps_orderby exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On ORDERBY shift to state 559
-- On perhaps_orderby shift to state 760
## Reductions:
-- On VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production perhaps_orderby ->

State 559:
## Known stack suffix:
## ORDERBY
## LR(1) items:
perhaps_orderby -> ORDERBY . LPAREN exps RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On LPAREN shift to state 560
## Reductions:

State 560:
## Known stack suffix:
## ORDERBY LPAREN
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN . exps RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exps shift to state 758
-- On exp shift to state 755
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 561:
## Known stack suffix:
## ESCAPE
## LR(1) items:
escape_expression -> ESCAPE . var IN postfix_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 562
## Reductions:

State 562:
## Known stack suffix:
## ESCAPE var
## LR(1) items:
escape_expression -> ESCAPE var . IN postfix_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On IN shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## ESCAPE var IN
## LR(1) items:
escape_expression -> ESCAPE var IN . postfix_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 564
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 576
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 564:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
qualified_name -> CONSTRUCTOR . DOT qualified_name_inner [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RECEIVE RBRACKET RBRACE POSTFIXOP OTHERWISE ON LPAREN FROM FALSE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA CHAR CASE BY BARRBRACE AS ]
## Transitions:
-- On DOT shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_name -> CONSTRUCTOR DOT . qualified_name_inner [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 566
-- On CONSTRUCTOR shift to state 567
-- On qualified_name_inner shift to state 570
## Reductions:

State 566:
## Known stack suffix:
## VARIABLE
## LR(1) items:
qualified_name_inner -> VARIABLE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_name_inner -> VARIABLE

State 567:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
qualified_name_inner -> CONSTRUCTOR . DOT qualified_name_inner [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On DOT shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_name_inner -> CONSTRUCTOR DOT . qualified_name_inner [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 566
-- On CONSTRUCTOR shift to state 567
-- On qualified_name_inner shift to state 569
## Reductions:

State 569:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_name_inner
## LR(1) items:
qualified_name_inner -> CONSTRUCTOR DOT qualified_name_inner . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_name_inner -> CONSTRUCTOR DOT qualified_name_inner

State 570:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_name_inner
## LR(1) items:
qualified_name -> CONSTRUCTOR DOT qualified_name_inner . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified_name -> CONSTRUCTOR DOT qualified_name_inner

State 571:
## Known stack suffix:
## xml
## LR(1) items:
primary_expression -> xml . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> xml

State 572:
## Known stack suffix:
## spawn_expression
## LR(1) items:
postfix_expression -> spawn_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> spawn_expression

State 573:
## Known stack suffix:
## qualified_name
## LR(1) items:
atomic_expression -> qualified_name . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> qualified_name

State 574:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> primary_expression . POSTFIXOP [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On POSTFIXOP shift to state 575
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production postfix_expression -> primary_expression

State 575:
## Known stack suffix:
## primary_expression POSTFIXOP
## LR(1) items:
postfix_expression -> primary_expression POSTFIXOP . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> primary_expression POSTFIXOP

State 576:
## Known stack suffix:
## ESCAPE var IN postfix_expression
## LR(1) items:
escape_expression -> ESCAPE var IN postfix_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
postfix_expression -> postfix_expression . arg_spec [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON LPAREN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
postfix_expression -> postfix_expression . DOT record_label [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON LPAREN FROM END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 577
-- On DOT shift to state 602
-- On arg_spec shift to state 604
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production escape_expression -> ESCAPE var IN postfix_expression

State 577:
## Known stack suffix:
## LPAREN
## LR(1) items:
arg_spec -> LPAREN . RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
arg_spec -> LPAREN . exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RPAREN shift to state 578
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exps shift to state 753
-- On exp shift to state 755
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 578:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
arg_spec -> LPAREN RPAREN . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_spec -> LPAREN RPAREN

State 579:
## Known stack suffix:
## DOOP
## LR(1) items:
unary_expression -> DOOP . CONSTRUCTOR arg_spec [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
unary_expression -> DOOP . CONSTRUCTOR [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On CONSTRUCTOR shift to state 580
## Reductions:

State 580:
## Known stack suffix:
## DOOP CONSTRUCTOR
## LR(1) items:
unary_expression -> DOOP CONSTRUCTOR . arg_spec [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
unary_expression -> DOOP CONSTRUCTOR . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 577
-- On arg_spec shift to state 581
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production unary_expression -> DOOP CONSTRUCTOR

State 581:
## Known stack suffix:
## DOOP CONSTRUCTOR arg_spec
## LR(1) items:
unary_expression -> DOOP CONSTRUCTOR arg_spec . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> DOOP CONSTRUCTOR arg_spec

State 582:
## Known stack suffix:
## DELETE
## LR(1) items:
db_expression -> DELETE . LPAREN table_generator RPAREN perhaps_where [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 583
## Reductions:

State 583:
## Known stack suffix:
## DELETE LPAREN
## LR(1) items:
db_expression -> DELETE LPAREN . table_generator RPAREN perhaps_where [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On table_generator shift to state 584
-- On primary_pattern shift to state 275
-- On pattern shift to state 587
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 584:
## Known stack suffix:
## DELETE LPAREN table_generator
## LR(1) items:
db_expression -> DELETE LPAREN table_generator . RPAREN perhaps_where [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## DELETE LPAREN table_generator RPAREN
## LR(1) items:
db_expression -> DELETE LPAREN table_generator RPAREN . perhaps_where [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WHERE shift to state 308
-- On perhaps_where shift to state 586
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production perhaps_where ->

State 586:
## Known stack suffix:
## DELETE LPAREN table_generator RPAREN perhaps_where
## LR(1) items:
db_expression -> DELETE LPAREN table_generator RPAREN perhaps_where . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production db_expression -> DELETE LPAREN table_generator RPAREN perhaps_where

State 587:
## Known stack suffix:
## pattern
## LR(1) items:
table_generator -> pattern . LLARROW exp [ RPAREN ]
## Transitions:
-- On LLARROW shift to state 588
## Reductions:

State 588:
## Known stack suffix:
## pattern LLARROW
## LR(1) items:
table_generator -> pattern LLARROW . exp [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 747
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 589:
## Known stack suffix:
## DATABASE
## LR(1) items:
database_expression -> DATABASE . atomic_expression perhaps_db_driver [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On RECEIVE shift to state 389
-- On LPAREN shift to state 402
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 564
-- On CHAR shift to state 37
-- On qualified_name shift to state 573
-- On parenthesized_thing shift to state 590
-- On constant shift to state 591
-- On atomic_expression shift to state 592
## Reductions:

State 590:
## Known stack suffix:
## parenthesized_thing
## LR(1) items:
atomic_expression -> parenthesized_thing . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> parenthesized_thing

State 591:
## Known stack suffix:
## constant
## LR(1) items:
atomic_expression -> constant . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> constant

State 592:
## Known stack suffix:
## DATABASE atomic_expression
## LR(1) items:
database_expression -> DATABASE atomic_expression . perhaps_db_driver [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On RECEIVE shift to state 389
-- On LPAREN shift to state 402
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 564
-- On CHAR shift to state 37
-- On qualified_name shift to state 573
-- On perhaps_db_driver shift to state 593
-- On parenthesized_thing shift to state 590
-- On constant shift to state 591
-- On atomic_expression shift to state 594
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production perhaps_db_driver ->

State 593:
## Known stack suffix:
## DATABASE atomic_expression perhaps_db_driver
## LR(1) items:
database_expression -> DATABASE atomic_expression perhaps_db_driver . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> DATABASE atomic_expression perhaps_db_driver

State 594:
## Known stack suffix:
## atomic_expression
## LR(1) items:
perhaps_db_driver -> atomic_expression . perhaps_db_args [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On RECEIVE shift to state 389
-- On LPAREN shift to state 402
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 564
-- On CHAR shift to state 37
-- On qualified_name shift to state 573
-- On perhaps_db_args shift to state 595
-- On parenthesized_thing shift to state 590
-- On constant shift to state 591
-- On atomic_expression shift to state 596
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production perhaps_db_args ->

State 595:
## Known stack suffix:
## atomic_expression perhaps_db_args
## LR(1) items:
perhaps_db_driver -> atomic_expression perhaps_db_args . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_db_driver -> atomic_expression perhaps_db_args

State 596:
## Known stack suffix:
## atomic_expression
## LR(1) items:
perhaps_db_args -> atomic_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_db_args -> atomic_expression

State 597:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_expression -> CONSTRUCTOR . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
constructor_expression -> CONSTRUCTOR . parenthesized_thing [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
qualified_name -> CONSTRUCTOR . DOT qualified_name_inner [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 402
-- On DOT shift to state 565
-- On parenthesized_thing shift to state 598
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production constructor_expression -> CONSTRUCTOR

State 598:
## Known stack suffix:
## CONSTRUCTOR parenthesized_thing
## LR(1) items:
constructor_expression -> CONSTRUCTOR parenthesized_thing . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_expression -> CONSTRUCTOR parenthesized_thing

State 599:
## Known stack suffix:
## unary_expression
## LR(1) items:
infixr_9 -> unary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_9 -> unary_expression . INFIX9 unary_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_9 -> unary_expression . INFIXR9 infixr_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXR9 shift to state 600
-- On INFIX9 shift to state 612
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_9 -> unary_expression

State 600:
## Known stack suffix:
## unary_expression INFIXR9
## LR(1) items:
infixr_9 -> unary_expression INFIXR9 . infixr_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 605
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 601:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . arg_spec [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> postfix_expression . DOT record_label [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
unary_expression -> postfix_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 577
-- On DOT shift to state 602
-- On arg_spec shift to state 604
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production unary_expression -> postfix_expression

State 602:
## Known stack suffix:
## postfix_expression DOT
## LR(1) items:
postfix_expression -> postfix_expression DOT . record_label [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 603
-- On field_label shift to state 254
## Reductions:

State 603:
## Known stack suffix:
## postfix_expression DOT record_label
## LR(1) items:
postfix_expression -> postfix_expression DOT record_label . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression DOT record_label

State 604:
## Known stack suffix:
## postfix_expression arg_spec
## LR(1) items:
postfix_expression -> postfix_expression arg_spec . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression arg_spec

State 605:
## Known stack suffix:
## unary_expression INFIXR9 infixr_9
## LR(1) items:
infixr_9 -> unary_expression INFIXR9 infixr_9 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_9 -> unary_expression INFIXR9 infixr_9

State 606:
## Known stack suffix:
## handler_depth
## LR(1) items:
primary_expression -> handler_depth . optional_computation_parameter handler_parameterization [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACKET shift to state 495
-- On optional_computation_parameter shift to state 607
## Reductions:
-- On LPAREN LBRACE
--   reduce production optional_computation_parameter ->

State 607:
## Known stack suffix:
## handler_depth optional_computation_parameter
## LR(1) items:
primary_expression -> handler_depth optional_computation_parameter . handler_parameterization [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LPAREN shift to state 407
-- On LBRACE shift to state 500
-- On multi_args shift to state 411
-- On handler_parameterization shift to state 608
-- On handler_body shift to state 506
-- On arg_lists shift to state 507
## Reductions:

State 608:
## Known stack suffix:
## handler_depth optional_computation_parameter handler_parameterization
## LR(1) items:
primary_expression -> handler_depth optional_computation_parameter handler_parameterization . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> handler_depth optional_computation_parameter handler_parameterization

State 609:
## Known stack suffix:
## constructor_expression
## LR(1) items:
unary_expression -> constructor_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> constructor_expression

State 610:
## Known stack suffix:
## block
## LR(1) items:
postfix_expression -> block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> block

State 611:
## Known stack suffix:
## atomic_expression
## LR(1) items:
primary_expression -> atomic_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> atomic_expression

State 612:
## Known stack suffix:
## unary_expression INFIX9
## LR(1) items:
infixr_9 -> unary_expression INFIX9 . unary_expression [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 613
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 613:
## Known stack suffix:
## unary_expression INFIX9 unary_expression
## LR(1) items:
infixr_9 -> unary_expression INFIX9 unary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_9 -> unary_expression INFIX9 unary_expression

State 614:
## Known stack suffix:
## typed_expression
## LR(1) items:
db_expression -> typed_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
typed_expression -> typed_expression . COLON datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
typed_expression -> typed_expression . COLON datatype LARROW datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
-- On COLON shift to state 615
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production db_expression -> typed_expression

State 615:
## Known stack suffix:
## typed_expression COLON
## LR(1) items:
typed_expression -> typed_expression COLON . datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
typed_expression -> typed_expression COLON . datatype LARROW datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## typed_expression COLON datatype
## LR(1) items:
typed_expression -> typed_expression COLON datatype . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
typed_expression -> typed_expression COLON datatype . LARROW datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
-- On LARROW shift to state 617
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS
--   reduce production typed_expression -> typed_expression COLON datatype

State 617:
## Known stack suffix:
## typed_expression COLON datatype LARROW
## LR(1) items:
typed_expression -> typed_expression COLON datatype LARROW . datatype [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 618
## Reductions:

State 618:
## Known stack suffix:
## typed_expression COLON datatype LARROW datatype
## LR(1) items:
typed_expression -> typed_expression COLON datatype LARROW datatype . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_expression -> typed_expression COLON datatype LARROW datatype

State 619:
## Known stack suffix:
## table_expression
## LR(1) items:
database_expression -> table_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> table_expression

State 620:
## Known stack suffix:
## session_expression
## LR(1) items:
conditional_expression -> session_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> session_expression

State 621:
## Known stack suffix:
## logical_expression
## LR(1) items:
logical_expression -> logical_expression . BARBAR infixl_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
typed_expression -> logical_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS ]
## Transitions:
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE AS
--   reduce production typed_expression -> logical_expression

State 622:
## Known stack suffix:
## logical_expression BARBAR
## LR(1) items:
logical_expression -> logical_expression BARBAR . infixl_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 738
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 623:
## Known stack suffix:
## infixr_9
## LR(1) items:
infixl_9 -> infixr_9 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_9 -> infixr_9

State 624:
## Known stack suffix:
## infixr_8
## LR(1) items:
infixl_8 -> infixr_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_8 -> infixr_8

State 625:
## Known stack suffix:
## infixr_7
## LR(1) items:
infixl_7 -> infixr_7 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_7 -> infixr_7

State 626:
## Known stack suffix:
## infixr_6
## LR(1) items:
infixl_6 -> infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixr_6

State 627:
## Known stack suffix:
## infixr_5
## LR(1) items:
infixl_5 -> infixr_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_4 -> infixr_5 . EQUALSTILDE regex [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On EQUALSTILDE shift to state 628
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixl_5 -> infixr_5

State 628:
## Known stack suffix:
## infixr_5 EQUALSTILDE
## LR(1) items:
infixr_4 -> infixr_5 EQUALSTILDE . regex [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On SSLASH shift to state 629
-- On SLASH shift to state 656
-- On regex shift to state 660
## Reductions:

State 629:
## Known stack suffix:
## SSLASH
## LR(1) items:
regex -> SSLASH . regex_pattern_alternate SLASH regex_replace regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On STRING shift to state 630
-- On RANGE shift to state 631
-- On QUOTEDMETA shift to state 632
-- On LPAREN shift to state 633
-- On LBRACE shift to state 315
-- On DOT shift to state 634
-- On DOLLAR shift to state 635
-- On CARET shift to state 636
-- On regex_pattern_sequence shift to state 637
-- On regex_pattern_alternate shift to state 648
-- On regex_pattern shift to state 640
-- On block shift to state 645
## Reductions:

State 630:
## Known stack suffix:
## STRING
## LR(1) items:
regex_pattern -> STRING . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> STRING

State 631:
## Known stack suffix:
## RANGE
## LR(1) items:
regex_pattern -> RANGE . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> RANGE

State 632:
## Known stack suffix:
## QUOTEDMETA
## LR(1) items:
regex_pattern -> QUOTEDMETA . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> QUOTEDMETA

State 633:
## Known stack suffix:
## LPAREN
## LR(1) items:
regex_pattern -> LPAREN . regex_pattern_alternate RPAREN [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
-- On STRING shift to state 630
-- On RANGE shift to state 631
-- On QUOTEDMETA shift to state 632
-- On LPAREN shift to state 633
-- On LBRACE shift to state 315
-- On DOT shift to state 634
-- On DOLLAR shift to state 635
-- On CARET shift to state 636
-- On regex_pattern_sequence shift to state 637
-- On regex_pattern_alternate shift to state 646
-- On regex_pattern shift to state 640
-- On block shift to state 645
## Reductions:

State 634:
## Known stack suffix:
## DOT
## LR(1) items:
regex_pattern -> DOT . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> DOT

State 635:
## Known stack suffix:
## DOLLAR
## LR(1) items:
regex_pattern -> DOLLAR . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> DOLLAR

State 636:
## Known stack suffix:
## CARET
## LR(1) items:
regex_pattern -> CARET . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> CARET

State 637:
## Known stack suffix:
## regex_pattern_sequence
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence . [ SLASHFLAGS SLASH RPAREN ]
regex_pattern_alternate -> regex_pattern_sequence . ALTERNATE regex_pattern_alternate [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
-- On ALTERNATE shift to state 638
## Reductions:
-- On SLASHFLAGS SLASH RPAREN
--   reduce production regex_pattern_alternate -> regex_pattern_sequence

State 638:
## Known stack suffix:
## regex_pattern_sequence ALTERNATE
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence ALTERNATE . regex_pattern_alternate [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
-- On STRING shift to state 630
-- On RANGE shift to state 631
-- On QUOTEDMETA shift to state 632
-- On LPAREN shift to state 633
-- On LBRACE shift to state 315
-- On DOT shift to state 634
-- On DOLLAR shift to state 635
-- On CARET shift to state 636
-- On regex_pattern_sequence shift to state 637
-- On regex_pattern_alternate shift to state 639
-- On regex_pattern shift to state 640
-- On block shift to state 645
## Reductions:

State 639:
## Known stack suffix:
## regex_pattern_sequence ALTERNATE regex_pattern_alternate
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence ALTERNATE regex_pattern_alternate . [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern_alternate -> regex_pattern_sequence ALTERNATE regex_pattern_alternate

State 640:
## Known stack suffix:
## regex_pattern
## LR(1) items:
regex_pattern -> regex_pattern . STAR [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern -> regex_pattern . PLUS [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern -> regex_pattern . QUESTION [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern_sequence -> regex_pattern . [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
regex_pattern_sequence -> regex_pattern . regex_pattern_sequence [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
## Transitions:
-- On STRING shift to state 630
-- On STAR shift to state 641
-- On RANGE shift to state 631
-- On QUOTEDMETA shift to state 632
-- On QUESTION shift to state 642
-- On PLUS shift to state 643
-- On LPAREN shift to state 633
-- On LBRACE shift to state 315
-- On DOT shift to state 634
-- On DOLLAR shift to state 635
-- On CARET shift to state 636
-- On regex_pattern_sequence shift to state 644
-- On regex_pattern shift to state 640
-- On block shift to state 645
## Reductions:
-- On SLASHFLAGS SLASH RPAREN ALTERNATE
--   reduce production regex_pattern_sequence -> regex_pattern

State 641:
## Known stack suffix:
## regex_pattern STAR
## LR(1) items:
regex_pattern -> regex_pattern STAR . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern STAR

State 642:
## Known stack suffix:
## regex_pattern QUESTION
## LR(1) items:
regex_pattern -> regex_pattern QUESTION . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern QUESTION

State 643:
## Known stack suffix:
## regex_pattern PLUS
## LR(1) items:
regex_pattern -> regex_pattern PLUS . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern PLUS

State 644:
## Known stack suffix:
## regex_pattern regex_pattern_sequence
## LR(1) items:
regex_pattern_sequence -> regex_pattern regex_pattern_sequence . [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern_sequence -> regex_pattern regex_pattern_sequence

State 645:
## Known stack suffix:
## block
## LR(1) items:
regex_pattern -> block . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> block

State 646:
## Known stack suffix:
## LPAREN regex_pattern_alternate
## LR(1) items:
regex_pattern -> LPAREN regex_pattern_alternate . RPAREN [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
-- On RPAREN shift to state 647
## Reductions:

State 647:
## Known stack suffix:
## LPAREN regex_pattern_alternate RPAREN
## LR(1) items:
regex_pattern -> LPAREN regex_pattern_alternate RPAREN . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> LPAREN regex_pattern_alternate RPAREN

State 648:
## Known stack suffix:
## SSLASH regex_pattern_alternate
## LR(1) items:
regex -> SSLASH regex_pattern_alternate . SLASH regex_replace regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On SLASH shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH . regex_replace regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On REGEXREPL shift to state 650
-- On LBRACE shift to state 315
-- On regex_replace shift to state 651
-- On block shift to state 655
## Reductions:
-- On SLASHFLAGS SLASH
--   reduce production regex_replace ->

State 650:
## Known stack suffix:
## REGEXREPL
## LR(1) items:
regex_replace -> REGEXREPL . [ SLASHFLAGS SLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_replace -> REGEXREPL

State 651:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH regex_replace
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH regex_replace . regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On SLASHFLAGS shift to state 652
-- On SLASH shift to state 653
-- On regex_flags_opt shift to state 654
## Reductions:

State 652:
## Known stack suffix:
## SLASHFLAGS
## LR(1) items:
regex_flags_opt -> SLASHFLAGS . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_flags_opt -> SLASHFLAGS

State 653:
## Known stack suffix:
## SLASH
## LR(1) items:
regex_flags_opt -> SLASH . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_flags_opt -> SLASH

State 654:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt

State 655:
## Known stack suffix:
## block
## LR(1) items:
regex_replace -> block . [ SLASHFLAGS SLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_replace -> block

State 656:
## Known stack suffix:
## SLASH
## LR(1) items:
regex -> SLASH . regex_pattern_alternate regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
regex -> SLASH . regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On STRING shift to state 630
-- On SLASHFLAGS shift to state 652
-- On SLASH shift to state 653
-- On RANGE shift to state 631
-- On QUOTEDMETA shift to state 632
-- On LPAREN shift to state 633
-- On LBRACE shift to state 315
-- On DOT shift to state 634
-- On DOLLAR shift to state 635
-- On CARET shift to state 636
-- On regex_pattern_sequence shift to state 637
-- On regex_pattern_alternate shift to state 657
-- On regex_pattern shift to state 640
-- On regex_flags_opt shift to state 659
-- On block shift to state 645
## Reductions:

State 657:
## Known stack suffix:
## SLASH regex_pattern_alternate
## LR(1) items:
regex -> SLASH regex_pattern_alternate . regex_flags_opt [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On SLASHFLAGS shift to state 652
-- On SLASH shift to state 653
-- On regex_flags_opt shift to state 658
## Reductions:

State 658:
## Known stack suffix:
## SLASH regex_pattern_alternate regex_flags_opt
## LR(1) items:
regex -> SLASH regex_pattern_alternate regex_flags_opt . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SLASH regex_pattern_alternate regex_flags_opt

State 659:
## Known stack suffix:
## SLASH regex_flags_opt
## LR(1) items:
regex -> SLASH regex_flags_opt . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SLASH regex_flags_opt

State 660:
## Known stack suffix:
## infixr_5 EQUALSTILDE regex
## LR(1) items:
infixr_4 -> infixr_5 EQUALSTILDE regex . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_4 -> infixr_5 EQUALSTILDE regex

State 661:
## Known stack suffix:
## infixr_4
## LR(1) items:
infixl_4 -> infixr_4 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_4 -> infixr_4

State 662:
## Known stack suffix:
## infixr_3
## LR(1) items:
infixl_3 -> infixr_3 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_3 -> infixr_3

State 663:
## Known stack suffix:
## infixr_2
## LR(1) items:
infixl_2 -> infixr_2 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_2 -> infixr_2

State 664:
## Known stack suffix:
## infixr_1
## LR(1) items:
infixl_1 -> infixr_1 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_1 -> infixr_1

State 665:
## Known stack suffix:
## infixr_0
## LR(1) items:
infixl_0 -> infixr_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_0 -> infixr_0

State 666:
## Known stack suffix:
## infixl_9
## LR(1) items:
infixl_9 -> infixl_9 . INFIXL9 infixr_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_8 -> infixl_9 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_8 -> infixl_9 . INFIX8 infixl_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_8 -> infixl_9 . INFIXR8 infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_8 -> infixl_9 . COLONCOLON infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXR8 shift to state 667
-- On INFIXL9 shift to state 669
-- On INFIX8 shift to state 671
-- On COLONCOLON shift to state 673
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_8 -> infixl_9

State 667:
## Known stack suffix:
## infixl_9 INFIXR8
## LR(1) items:
infixr_8 -> infixl_9 INFIXR8 . infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 668
-- On infixl_9 shift to state 666
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 668:
## Known stack suffix:
## infixl_9 INFIXR8 infixr_8
## LR(1) items:
infixr_8 -> infixl_9 INFIXR8 infixr_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_8 -> infixl_9 INFIXR8 infixr_8

State 669:
## Known stack suffix:
## infixl_9 INFIXL9
## LR(1) items:
infixl_9 -> infixl_9 INFIXL9 . infixr_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 670
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 670:
## Known stack suffix:
## infixl_9 INFIXL9 infixr_9
## LR(1) items:
infixl_9 -> infixl_9 INFIXL9 infixr_9 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_9 -> infixl_9 INFIXL9 infixr_9

State 671:
## Known stack suffix:
## infixl_9 INFIX8
## LR(1) items:
infixr_8 -> infixl_9 INFIX8 . infixl_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixl_9 shift to state 672
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 672:
## Known stack suffix:
## infixl_9 INFIX8 infixl_9
## LR(1) items:
infixl_9 -> infixl_9 . INFIXL9 infixr_9 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_8 -> infixl_9 INFIX8 infixl_9 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXL9 shift to state 669
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_8 -> infixl_9 INFIX8 infixl_9

State 673:
## Known stack suffix:
## infixl_9 COLONCOLON
## LR(1) items:
infixr_8 -> infixl_9 COLONCOLON . infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 674
-- On infixl_9 shift to state 666
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 674:
## Known stack suffix:
## infixl_9 COLONCOLON infixr_8
## LR(1) items:
infixr_8 -> infixl_9 COLONCOLON infixr_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_8 -> infixl_9 COLONCOLON infixr_8

State 675:
## Known stack suffix:
## infixl_8
## LR(1) items:
infixl_8 -> infixl_8 . INFIXL8 infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_7 -> infixl_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_7 -> infixl_8 . INFIX7 infixl_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_7 -> infixl_8 . INFIXR7 infixr_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXR7 shift to state 676
-- On INFIXL8 shift to state 678
-- On INFIX7 shift to state 680
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_7 -> infixl_8

State 676:
## Known stack suffix:
## infixl_8 INFIXR7
## LR(1) items:
infixr_7 -> infixl_8 INFIXR7 . infixr_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 677
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 677:
## Known stack suffix:
## infixl_8 INFIXR7 infixr_7
## LR(1) items:
infixr_7 -> infixl_8 INFIXR7 infixr_7 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_7 -> infixl_8 INFIXR7 infixr_7

State 678:
## Known stack suffix:
## infixl_8 INFIXL8
## LR(1) items:
infixl_8 -> infixl_8 INFIXL8 . infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 679
-- On infixl_9 shift to state 666
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 679:
## Known stack suffix:
## infixl_8 INFIXL8 infixr_8
## LR(1) items:
infixl_8 -> infixl_8 INFIXL8 infixr_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_8 -> infixl_8 INFIXL8 infixr_8

State 680:
## Known stack suffix:
## infixl_8 INFIX7
## LR(1) items:
infixr_7 -> infixl_8 INFIX7 . infixl_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 681
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 681:
## Known stack suffix:
## infixl_8 INFIX7 infixl_8
## LR(1) items:
infixl_8 -> infixl_8 . INFIXL8 infixr_8 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_7 -> infixl_8 INFIX7 infixl_8 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXL8 shift to state 678
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_7 -> infixl_8 INFIX7 infixl_8

State 682:
## Known stack suffix:
## infixl_7
## LR(1) items:
infixl_7 -> infixl_7 . INFIXL7 infixr_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_6 -> infixl_7 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_6 -> infixl_7 . INFIX6 infixl_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_6 -> infixl_7 . INFIXR6 infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXR6 shift to state 683
-- On INFIXL7 shift to state 685
-- On INFIX6 shift to state 687
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_6 -> infixl_7

State 683:
## Known stack suffix:
## infixl_7 INFIXR6
## LR(1) items:
infixr_6 -> infixl_7 INFIXR6 . infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 684
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 684:
## Known stack suffix:
## infixl_7 INFIXR6 infixr_6
## LR(1) items:
infixr_6 -> infixl_7 INFIXR6 infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_6 -> infixl_7 INFIXR6 infixr_6

State 685:
## Known stack suffix:
## infixl_7 INFIXL7
## LR(1) items:
infixl_7 -> infixl_7 INFIXL7 . infixr_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 686
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 686:
## Known stack suffix:
## infixl_7 INFIXL7 infixr_7
## LR(1) items:
infixl_7 -> infixl_7 INFIXL7 infixr_7 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_7 -> infixl_7 INFIXL7 infixr_7

State 687:
## Known stack suffix:
## infixl_7 INFIX6
## LR(1) items:
infixr_6 -> infixl_7 INFIX6 . infixl_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 688
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 688:
## Known stack suffix:
## infixl_7 INFIX6 infixl_7
## LR(1) items:
infixl_7 -> infixl_7 . INFIXL7 infixr_7 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_6 -> infixl_7 INFIX6 infixl_7 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On INFIXL7 shift to state 685
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP
--   reduce production infixr_6 -> infixl_7 INFIX6 infixl_7

State 689:
## Known stack suffix:
## infixl_6
## LR(1) items:
infixl_6 -> infixl_6 . INFIXL6 infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . MINUS infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . MINUSDOT infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . BANG infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_5 -> infixl_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_5 -> infixl_6 . INFIX5 infixl_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_5 -> infixl_6 . INFIXR5 infixr_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On MINUSDOT shift to state 690
-- On MINUS shift to state 692
-- On INFIXR5 shift to state 694
-- On INFIXL6 shift to state 696
-- On INFIX5 shift to state 698
-- On BANG shift to state 700
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_5 -> infixl_6

State 690:
## Known stack suffix:
## infixl_6 MINUSDOT
## LR(1) items:
infixl_6 -> infixl_6 MINUSDOT . infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 691
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 691:
## Known stack suffix:
## infixl_6 MINUSDOT infixr_6
## LR(1) items:
infixl_6 -> infixl_6 MINUSDOT infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 MINUSDOT infixr_6

State 692:
## Known stack suffix:
## infixl_6 MINUS
## LR(1) items:
infixl_6 -> infixl_6 MINUS . infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 693
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 693:
## Known stack suffix:
## infixl_6 MINUS infixr_6
## LR(1) items:
infixl_6 -> infixl_6 MINUS infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 MINUS infixr_6

State 694:
## Known stack suffix:
## infixl_6 INFIXR5
## LR(1) items:
infixr_5 -> infixl_6 INFIXR5 . infixr_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 695
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 695:
## Known stack suffix:
## infixl_6 INFIXR5 infixr_5
## LR(1) items:
infixr_5 -> infixl_6 INFIXR5 infixr_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_5 -> infixl_6 INFIXR5 infixr_5

State 696:
## Known stack suffix:
## infixl_6 INFIXL6
## LR(1) items:
infixl_6 -> infixl_6 INFIXL6 . infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 697
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 697:
## Known stack suffix:
## infixl_6 INFIXL6 infixr_6
## LR(1) items:
infixl_6 -> infixl_6 INFIXL6 infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 INFIXL6 infixr_6

State 698:
## Known stack suffix:
## infixl_6 INFIX5
## LR(1) items:
infixr_5 -> infixl_6 INFIX5 . infixl_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 699
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 699:
## Known stack suffix:
## infixl_6 INFIX5 infixl_6
## LR(1) items:
infixl_6 -> infixl_6 . INFIXL6 infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . MINUS infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . MINUSDOT infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixl_6 -> infixl_6 . BANG infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
infixr_5 -> infixl_6 INFIX5 infixl_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On MINUSDOT shift to state 690
-- On MINUS shift to state 692
-- On INFIXL6 shift to state 696
-- On BANG shift to state 700
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_5 -> infixl_6 INFIX5 infixl_6

State 700:
## Known stack suffix:
## infixl_6 BANG
## LR(1) items:
infixl_6 -> infixl_6 BANG . infixr_6 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 701
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 701:
## Known stack suffix:
## infixl_6 BANG infixr_6
## LR(1) items:
infixl_6 -> infixl_6 BANG infixr_6 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 BANG infixr_6

State 702:
## Known stack suffix:
## infixl_5
## LR(1) items:
infixl_5 -> infixl_5 . INFIXL5 infixr_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_4 -> infixl_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_4 -> infixl_5 . INFIX4 infixl_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_4 -> infixl_5 . INFIXR4 infixr_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXR4 shift to state 703
-- On INFIXL5 shift to state 705
-- On INFIX4 shift to state 707
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_4 -> infixl_5

State 703:
## Known stack suffix:
## infixl_5 INFIXR4
## LR(1) items:
infixr_4 -> infixl_5 INFIXR4 . infixr_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 704
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 704:
## Known stack suffix:
## infixl_5 INFIXR4 infixr_4
## LR(1) items:
infixr_4 -> infixl_5 INFIXR4 infixr_4 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_4 -> infixl_5 INFIXR4 infixr_4

State 705:
## Known stack suffix:
## infixl_5 INFIXL5
## LR(1) items:
infixl_5 -> infixl_5 INFIXL5 . infixr_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 706
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 706:
## Known stack suffix:
## infixl_5 INFIXL5 infixr_5
## LR(1) items:
infixl_5 -> infixl_5 INFIXL5 infixr_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_5 -> infixl_5 INFIXL5 infixr_5

State 707:
## Known stack suffix:
## infixl_5 INFIX4
## LR(1) items:
infixr_4 -> infixl_5 INFIX4 . infixl_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 708
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 709
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 708:
## Known stack suffix:
## infixr_5
## LR(1) items:
infixl_5 -> infixr_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_5 -> infixr_5

State 709:
## Known stack suffix:
## infixl_5 INFIX4 infixl_5
## LR(1) items:
infixl_5 -> infixl_5 . INFIXL5 infixr_5 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_4 -> infixl_5 INFIX4 infixl_5 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL5 shift to state 705
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_4 -> infixl_5 INFIX4 infixl_5

State 710:
## Known stack suffix:
## infixl_4
## LR(1) items:
infixl_4 -> infixl_4 . INFIXL4 infixr_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_3 -> infixl_4 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_3 -> infixl_4 . INFIX3 infixl_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_3 -> infixl_4 . INFIXR3 infixr_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXR3 shift to state 711
-- On INFIXL4 shift to state 713
-- On INFIX3 shift to state 715
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_3 -> infixl_4

State 711:
## Known stack suffix:
## infixl_4 INFIXR3
## LR(1) items:
infixr_3 -> infixl_4 INFIXR3 . infixr_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 712
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 712:
## Known stack suffix:
## infixl_4 INFIXR3 infixr_3
## LR(1) items:
infixr_3 -> infixl_4 INFIXR3 infixr_3 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_3 -> infixl_4 INFIXR3 infixr_3

State 713:
## Known stack suffix:
## infixl_4 INFIXL4
## LR(1) items:
infixl_4 -> infixl_4 INFIXL4 . infixr_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 714
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 714:
## Known stack suffix:
## infixl_4 INFIXL4 infixr_4
## LR(1) items:
infixl_4 -> infixl_4 INFIXL4 infixr_4 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_4 -> infixl_4 INFIXL4 infixr_4

State 715:
## Known stack suffix:
## infixl_4 INFIX3
## LR(1) items:
infixr_3 -> infixl_4 INFIX3 . infixl_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 716
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 716:
## Known stack suffix:
## infixl_4 INFIX3 infixl_4
## LR(1) items:
infixl_4 -> infixl_4 . INFIXL4 infixr_4 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_3 -> infixl_4 INFIX3 infixl_4 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL4 shift to state 713
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_3 -> infixl_4 INFIX3 infixl_4

State 717:
## Known stack suffix:
## infixl_3
## LR(1) items:
infixl_3 -> infixl_3 . INFIXL3 infixr_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_2 -> infixl_3 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_2 -> infixl_3 . INFIX2 infixl_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_2 -> infixl_3 . INFIXR2 infixr_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXR2 shift to state 718
-- On INFIXL3 shift to state 720
-- On INFIX2 shift to state 722
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_2 -> infixl_3

State 718:
## Known stack suffix:
## infixl_3 INFIXR2
## LR(1) items:
infixr_2 -> infixl_3 INFIXR2 . infixr_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 719
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 719:
## Known stack suffix:
## infixl_3 INFIXR2 infixr_2
## LR(1) items:
infixr_2 -> infixl_3 INFIXR2 infixr_2 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_2 -> infixl_3 INFIXR2 infixr_2

State 720:
## Known stack suffix:
## infixl_3 INFIXL3
## LR(1) items:
infixl_3 -> infixl_3 INFIXL3 . infixr_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 721
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 721:
## Known stack suffix:
## infixl_3 INFIXL3 infixr_3
## LR(1) items:
infixl_3 -> infixl_3 INFIXL3 infixr_3 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_3 -> infixl_3 INFIXL3 infixr_3

State 722:
## Known stack suffix:
## infixl_3 INFIX2
## LR(1) items:
infixr_2 -> infixl_3 INFIX2 . infixl_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 723
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 723:
## Known stack suffix:
## infixl_3 INFIX2 infixl_3
## LR(1) items:
infixl_3 -> infixl_3 . INFIXL3 infixr_3 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_2 -> infixl_3 INFIX2 infixl_3 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL3 shift to state 720
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_2 -> infixl_3 INFIX2 infixl_3

State 724:
## Known stack suffix:
## infixl_2
## LR(1) items:
infixl_2 -> infixl_2 . INFIXL2 infixr_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_1 -> infixl_2 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_1 -> infixl_2 . INFIX1 infixl_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_1 -> infixl_2 . INFIXR1 infixr_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXR1 shift to state 725
-- On INFIXL2 shift to state 727
-- On INFIX1 shift to state 729
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_1 -> infixl_2

State 725:
## Known stack suffix:
## infixl_2 INFIXR1
## LR(1) items:
infixr_1 -> infixl_2 INFIXR1 . infixr_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 726
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 726:
## Known stack suffix:
## infixl_2 INFIXR1 infixr_1
## LR(1) items:
infixr_1 -> infixl_2 INFIXR1 infixr_1 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_1 -> infixl_2 INFIXR1 infixr_1

State 727:
## Known stack suffix:
## infixl_2 INFIXL2
## LR(1) items:
infixl_2 -> infixl_2 INFIXL2 . infixr_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 728
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 728:
## Known stack suffix:
## infixl_2 INFIXL2 infixr_2
## LR(1) items:
infixl_2 -> infixl_2 INFIXL2 infixr_2 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_2 -> infixl_2 INFIXL2 infixr_2

State 729:
## Known stack suffix:
## infixl_2 INFIX1
## LR(1) items:
infixr_1 -> infixl_2 INFIX1 . infixl_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 730
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 730:
## Known stack suffix:
## infixl_2 INFIX1 infixl_2
## LR(1) items:
infixl_2 -> infixl_2 . INFIXL2 infixr_2 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_1 -> infixl_2 INFIX1 infixl_2 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL2 shift to state 727
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_1 -> infixl_2 INFIX1 infixl_2

State 731:
## Known stack suffix:
## infixl_1
## LR(1) items:
infixl_1 -> infixl_1 . INFIXL1 infixr_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_0 -> infixl_1 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_0 -> infixl_1 . INFIX0 infixl_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_0 -> infixl_1 . INFIXR0 infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXR0 shift to state 732
-- On INFIXL1 shift to state 734
-- On INFIX0 shift to state 736
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_0 -> infixl_1

State 732:
## Known stack suffix:
## infixl_1 INFIXR0
## LR(1) items:
infixr_0 -> infixl_1 INFIXR0 . infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 733
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 733:
## Known stack suffix:
## infixl_1 INFIXR0 infixr_0
## LR(1) items:
infixr_0 -> infixl_1 INFIXR0 infixr_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_0 -> infixl_1 INFIXR0 infixr_0

State 734:
## Known stack suffix:
## infixl_1 INFIXL1
## LR(1) items:
infixl_1 -> infixl_1 INFIXL1 . infixr_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 735
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 735:
## Known stack suffix:
## infixl_1 INFIXL1 infixr_1
## LR(1) items:
infixl_1 -> infixl_1 INFIXL1 infixr_1 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXR0 INFIXL1 INFIXL0 INFIX0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_1 -> infixl_1 INFIXL1 infixr_1

State 736:
## Known stack suffix:
## infixl_1 INFIX0
## LR(1) items:
infixr_0 -> infixl_1 INFIX0 . infixl_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 737
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 737:
## Known stack suffix:
## infixl_1 INFIX0 infixl_1
## LR(1) items:
infixl_1 -> infixl_1 . INFIXL1 infixr_1 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL1 INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
infixr_0 -> infixl_1 INFIX0 infixl_1 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL1 shift to state 734
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production infixr_0 -> infixl_1 INFIX0 infixl_1

State 738:
## Known stack suffix:
## logical_expression BARBAR infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
logical_expression -> logical_expression BARBAR infixl_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 739
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production logical_expression -> logical_expression BARBAR infixl_0

State 739:
## Known stack suffix:
## infixl_0 INFIXL0
## LR(1) items:
infixl_0 -> infixl_0 INFIXL0 . infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 740
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 740:
## Known stack suffix:
## infixl_0 INFIXL0 infixr_0
## LR(1) items:
infixl_0 -> infixl_0 INFIXL0 infixr_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_0 -> infixl_0 INFIXL0 infixr_0

State 741:
## Known stack suffix:
## logical_expression AMPAMP
## LR(1) items:
logical_expression -> logical_expression AMPAMP . infixl_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 742
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 742:
## Known stack suffix:
## logical_expression AMPAMP infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
logical_expression -> logical_expression AMPAMP infixl_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 739
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production logical_expression -> logical_expression AMPAMP infixl_0

State 743:
## Known stack suffix:
## lens_expression
## LR(1) items:
exp -> lens_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> lens_expression

State 744:
## Known stack suffix:
## iteration_expression
## LR(1) items:
escape_expression -> iteration_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escape_expression -> iteration_expression

State 745:
## Known stack suffix:
## infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON INFIXL0 FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
logical_expression -> infixl_0 . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 739
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON FROM FATRARROW END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLON CASE BY BARRBRACE BARBAR AS AMPAMP
--   reduce production logical_expression -> infixl_0

State 746:
## Known stack suffix:
## formlet_expression
## LR(1) items:
table_expression -> formlet_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_expression -> formlet_expression

State 747:
## Known stack suffix:
## pattern LLARROW exp
## LR(1) items:
table_generator -> pattern LLARROW exp . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_generator -> pattern LLARROW exp

State 748:
## Known stack suffix:
## escape_expression
## LR(1) items:
formlet_expression -> escape_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> escape_expression

State 749:
## Known stack suffix:
## db_expression
## LR(1) items:
session_expression -> db_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_expression -> db_expression

State 750:
## Known stack suffix:
## database_expression
## LR(1) items:
lens_expression -> database_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> database_expression

State 751:
## Known stack suffix:
## conditional_expression
## LR(1) items:
case_expression -> conditional_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> conditional_expression

State 752:
## Known stack suffix:
## case_expression
## LR(1) items:
iteration_expression -> case_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_expression -> case_expression

State 753:
## Known stack suffix:
## LPAREN exps
## LR(1) items:
arg_spec -> LPAREN exps . RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 754
## Reductions:

State 754:
## Known stack suffix:
## LPAREN exps RPAREN
## LR(1) items:
arg_spec -> LPAREN exps RPAREN . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_spec -> LPAREN exps RPAREN

State 755:
## Known stack suffix:
## exp
## LR(1) items:
exps -> exp . COMMA exps [ RPAREN RBRACKET ]
exps -> exp . [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 756
## Reductions:
-- On RPAREN RBRACKET
--   reduce production exps -> exp

State 756:
## Known stack suffix:
## exp COMMA
## LR(1) items:
exps -> exp COMMA . exps [ RPAREN RBRACKET ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exps shift to state 757
-- On exp shift to state 755
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 757:
## Known stack suffix:
## exp COMMA exps
## LR(1) items:
exps -> exp COMMA exps . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exps -> exp COMMA exps

State 758:
## Known stack suffix:
## ORDERBY LPAREN exps
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN exps . RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On RPAREN shift to state 759
## Reductions:

State 759:
## Known stack suffix:
## ORDERBY LPAREN exps RPAREN
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN exps RPAREN . [ VARIABLE UPDATE UINTEGER UFLOAT TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_orderby -> ORDERBY LPAREN exps RPAREN

State 760:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 761
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 761:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp

State 762:
## Known stack suffix:
## pattern
## LR(1) items:
list_generator -> pattern . LARROW exp [ RPAREN COMMA ]
table_generator -> pattern . LLARROW exp [ RPAREN COMMA ]
## Transitions:
-- On LLARROW shift to state 588
-- On LARROW shift to state 763
## Reductions:

State 763:
## Known stack suffix:
## pattern LARROW
## LR(1) items:
list_generator -> pattern LARROW . exp [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 764
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 764:
## Known stack suffix:
## pattern LARROW exp
## LR(1) items:
list_generator -> pattern LARROW exp . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_generator -> pattern LARROW exp

State 765:
## Known stack suffix:
## list_generator
## LR(1) items:
generator -> list_generator . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator -> list_generator

State 766:
## Known stack suffix:
## generators
## LR(1) items:
perhaps_generators -> generators . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_generators -> generators

State 767:
## Known stack suffix:
## generator
## LR(1) items:
generators -> generator . [ RPAREN ]
generators -> generator . COMMA generators [ RPAREN ]
## Transitions:
-- On COMMA shift to state 768
## Reductions:
-- On RPAREN
--   reduce production generators -> generator

State 768:
## Known stack suffix:
## generator COMMA
## LR(1) items:
generators -> generator COMMA . generators [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On table_generator shift to state 555
-- On primary_pattern shift to state 275
-- On pattern shift to state 762
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On list_generator shift to state 765
-- On generators shift to state 769
-- On generator shift to state 767
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 769:
## Known stack suffix:
## generator COMMA generators
## LR(1) items:
generators -> generator COMMA generators . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generators -> generator COMMA generators

State 770:
## Known stack suffix:
## FORMLET xml YIELDS exp
## LR(1) items:
formlet_expression -> FORMLET xml YIELDS exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> FORMLET xml YIELDS exp

State 771:
## Known stack suffix:
## HANDLE LPAREN exp
## LR(1) items:
case_expression -> HANDLE LPAREN exp . RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
case_expression -> HANDLE LPAREN exp . RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 772
## Reductions:

State 772:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
case_expression -> HANDLE LPAREN exp RPAREN . LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 773
-- On LBRACE shift to state 787
## Reductions:

State 773:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN . handle_params RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 774
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On handle_params shift to state 777
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 774:
## Known stack suffix:
## logical_expression
## LR(1) items:
handle_params -> logical_expression . RARROW pattern [ RPAREN COMMA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ RARROW BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ RARROW BARBAR AMPAMP ]
## Transitions:
-- On RARROW shift to state 775
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:

State 775:
## Known stack suffix:
## logical_expression RARROW
## LR(1) items:
handle_params -> logical_expression RARROW . pattern [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 776
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 776:
## Known stack suffix:
## logical_expression RARROW pattern
## LR(1) items:
handle_params -> logical_expression RARROW pattern . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handle_params -> logical_expression RARROW pattern

State 777:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN handle_params
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params . RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
handle_params -> handle_params . COMMA logical_expression RARROW pattern [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 778
-- On COMMA shift to state 783
## Reductions:

State 778:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 779
## Reductions:

State 779:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On perhaps_cases shift to state 780
-- On cases shift to state 782
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 780:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 781
## Reductions:

State 781:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> HANDLE LPAREN exp RPAREN LPAREN handle_params RPAREN LBRACE perhaps_cases RBRACE

State 782:
## Known stack suffix:
## cases
## LR(1) items:
perhaps_cases -> cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_cases -> cases

State 783:
## Known stack suffix:
## handle_params COMMA
## LR(1) items:
handle_params -> handle_params COMMA . logical_expression RARROW pattern [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 784
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 784:
## Known stack suffix:
## handle_params COMMA logical_expression
## LR(1) items:
handle_params -> handle_params COMMA logical_expression . RARROW pattern [ RPAREN COMMA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ RARROW BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ RARROW BARBAR AMPAMP ]
## Transitions:
-- On RARROW shift to state 785
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:

State 785:
## Known stack suffix:
## handle_params COMMA logical_expression RARROW
## LR(1) items:
handle_params -> handle_params COMMA logical_expression RARROW . pattern [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 786
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 786:
## Known stack suffix:
## handle_params COMMA logical_expression RARROW pattern
## LR(1) items:
handle_params -> handle_params COMMA logical_expression RARROW pattern . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production handle_params -> handle_params COMMA logical_expression RARROW pattern

State 787:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LBRACE
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On perhaps_cases shift to state 788
-- On cases shift to state 782
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 788:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LBRACE perhaps_cases
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 789
## Reductions:

State 789:
## Known stack suffix:
## HANDLE LPAREN exp RPAREN LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> HANDLE LPAREN exp RPAREN LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> HANDLE LPAREN exp RPAREN LBRACE perhaps_cases RBRACE

State 790:
## Known stack suffix:
## IF LPAREN exp
## LR(1) items:
conditional_expression -> IF LPAREN exp . RPAREN exp ELSE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 791
## Reductions:

State 791:
## Known stack suffix:
## IF LPAREN exp RPAREN
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN . exp ELSE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 792
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 792:
## Known stack suffix:
## IF LPAREN exp RPAREN exp
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp . ELSE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On ELSE shift to state 793
## Reductions:

State 793:
## Known stack suffix:
## IF LPAREN exp RPAREN exp ELSE
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp ELSE . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 794
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 794:
## Known stack suffix:
## IF LPAREN exp RPAREN exp ELSE exp
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp ELSE exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> IF LPAREN exp RPAREN exp ELSE exp

State 795:
## Known stack suffix:
## INSERT exp
## LR(1) items:
database_expression -> INSERT exp . VALUES LPAREN RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LPAREN record_labels RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VALUES shift to state 796
## Reductions:

State 796:
## Known stack suffix:
## INSERT exp VALUES
## LR(1) items:
database_expression -> INSERT exp VALUES . LPAREN RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LPAREN record_labels RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 797
-- On LBRACKET shift to state 812
## Reductions:

State 797:
## Known stack suffix:
## INSERT exp VALUES LPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN . RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN . record_labels RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN . RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN . record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On RPAREN shift to state 798
-- On CONSTRUCTOR shift to state 91
-- On record_labels shift to state 803
-- On record_label shift to state 809
-- On field_label shift to state 254
## Reductions:

State 798:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN RPAREN . db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 799
-- On escape_expression shift to state 748
-- On db_expression shift to state 800
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 799:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN exp
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN RPAREN exp

State 800:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression . RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
session_expression -> db_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RETURNING shift to state 801
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production session_expression -> db_expression

State 801:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING . VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE

State 803:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels . RPAREN exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN record_labels . RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 804
## Reductions:

State 804:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN . db_expression RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 805
-- On escape_expression shift to state 748
-- On db_expression shift to state 806
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 805:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN exp
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN exp

State 806:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression . RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
session_expression -> db_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RETURNING shift to state 807
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production session_expression -> db_expression

State 807:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING . VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 808
## Reductions:

State 808:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE

State 809:
## Known stack suffix:
## record_label
## LR(1) items:
record_labels -> record_label . COMMA record_labels [ RPAREN ]
record_labels -> record_label . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 810
## Reductions:
-- On RPAREN
--   reduce production record_labels -> record_label

State 810:
## Known stack suffix:
## record_label COMMA
## LR(1) items:
record_labels -> record_label COMMA . record_labels [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_labels shift to state 811
-- On record_label shift to state 809
-- On field_label shift to state 254
## Reductions:

State 811:
## Known stack suffix:
## record_label COMMA record_labels
## LR(1) items:
record_labels -> record_label COMMA record_labels . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_labels -> record_label COMMA record_labels

State 812:
## Known stack suffix:
## INSERT exp VALUES LBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET . LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET . LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET . LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 813
## Reductions:

State 813:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN . labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN . RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN . labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On RPAREN shift to state 814
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 818
-- On labeled_exps shift to state 823
-- On field_label shift to state 254
## Reductions:

State 814:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN . RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACKET shift to state 815
## Reductions:

State 815:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET . RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RETURNING shift to state 816
## Reductions:

State 816:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING . VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE

State 818:
## Known stack suffix:
## record_label
## LR(1) items:
labeled_exps -> record_label . EQ exp [ VBAR RPAREN ]
labeled_exps -> record_label . EQ exp COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On EQ shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## record_label EQ
## LR(1) items:
labeled_exps -> record_label EQ . exp [ VBAR RPAREN ]
labeled_exps -> record_label EQ . exp COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 820
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 820:
## Known stack suffix:
## record_label EQ exp
## LR(1) items:
labeled_exps -> record_label EQ exp . [ VBAR RPAREN ]
labeled_exps -> record_label EQ exp . COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On COMMA shift to state 821
## Reductions:
-- On VBAR RPAREN
--   reduce production labeled_exps -> record_label EQ exp

State 821:
## Known stack suffix:
## record_label EQ exp COMMA
## LR(1) items:
labeled_exps -> record_label EQ exp COMMA . labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 818
-- On labeled_exps shift to state 822
-- On field_label shift to state 254
## Reductions:

State 822:
## Known stack suffix:
## record_label EQ exp COMMA labeled_exps
## LR(1) items:
labeled_exps -> record_label EQ exp COMMA labeled_exps . [ VBAR RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_exps -> record_label EQ exp COMMA labeled_exps

State 823:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps . RPAREN RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps . RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN . RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN . RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACKET shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET . RETURNING VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RETURNING shift to state 826
## Reductions:
-- On WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS
--   reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET

State 826:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING . VARIABLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 827
## Reductions:

State 827:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE

State 828:
## Known stack suffix:
## LBRACKET exps
## LR(1) items:
primary_expression -> LBRACKET exps . RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 829
## Reductions:

State 829:
## Known stack suffix:
## LBRACKET exps RBRACKET
## LR(1) items:
primary_expression -> LBRACKET exps RBRACKET . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET exps RBRACKET

State 830:
## Known stack suffix:
## LBRACKET exp
## LR(1) items:
exps -> exp . COMMA exps [ RBRACKET ]
exps -> exp . [ RBRACKET ]
primary_expression -> LBRACKET exp . DOTDOT exp RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On DOTDOT shift to state 831
-- On COMMA shift to state 756
## Reductions:
-- On RBRACKET
--   reduce production exps -> exp

State 831:
## Known stack suffix:
## LBRACKET exp DOTDOT
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT . exp RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 832
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 832:
## Known stack suffix:
## LBRACKET exp DOTDOT exp
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT exp . RBRACKET [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 833
## Reductions:

State 833:
## Known stack suffix:
## LBRACKET exp DOTDOT exp RBRACKET
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT exp RBRACKET . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET exp DOTDOT exp RBRACKET

State 834:
## Known stack suffix:
## LENS exp
## LR(1) items:
lens_expression -> LENS exp . DEFAULT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENS exp . TABLEKEYS exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENS exp . WITH LBRACE fn_deps RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WITH shift to state 835
-- On TABLEKEYS shift to state 847
-- On DEFAULT shift to state 849
## Reductions:

State 835:
## Known stack suffix:
## LENS exp WITH
## LR(1) items:
lens_expression -> LENS exp WITH . LBRACE fn_deps RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 836
## Reductions:

State 836:
## Known stack suffix:
## LENS exp WITH LBRACE
## LR(1) items:
lens_expression -> LENS exp WITH LBRACE . fn_deps RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 837
-- On fn_deps shift to state 839
-- On fn_dep_cols shift to state 841
-- On fn_dep shift to state 844
## Reductions:

State 837:
## Known stack suffix:
## VARIABLE
## LR(1) items:
fn_dep_cols -> VARIABLE . [ RBRACE RARROW COMMA ]
fn_dep_cols -> VARIABLE . fn_dep_cols [ RBRACE RARROW COMMA ]
## Transitions:
-- On VARIABLE shift to state 837
-- On fn_dep_cols shift to state 838
## Reductions:
-- On RBRACE RARROW COMMA
--   reduce production fn_dep_cols -> VARIABLE

State 838:
## Known stack suffix:
## VARIABLE fn_dep_cols
## LR(1) items:
fn_dep_cols -> VARIABLE fn_dep_cols . [ RBRACE RARROW COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fn_dep_cols -> VARIABLE fn_dep_cols

State 839:
## Known stack suffix:
## LENS exp WITH LBRACE fn_deps
## LR(1) items:
lens_expression -> LENS exp WITH LBRACE fn_deps . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 840
## Reductions:

State 840:
## Known stack suffix:
## LENS exp WITH LBRACE fn_deps RBRACE
## LR(1) items:
lens_expression -> LENS exp WITH LBRACE fn_deps RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENS exp WITH LBRACE fn_deps RBRACE

State 841:
## Known stack suffix:
## fn_dep_cols
## LR(1) items:
fn_dep -> fn_dep_cols . RARROW fn_dep_cols [ RBRACE COMMA ]
## Transitions:
-- On RARROW shift to state 842
## Reductions:

State 842:
## Known stack suffix:
## fn_dep_cols RARROW
## LR(1) items:
fn_dep -> fn_dep_cols RARROW . fn_dep_cols [ RBRACE COMMA ]
## Transitions:
-- On VARIABLE shift to state 837
-- On fn_dep_cols shift to state 843
## Reductions:

State 843:
## Known stack suffix:
## fn_dep_cols RARROW fn_dep_cols
## LR(1) items:
fn_dep -> fn_dep_cols RARROW fn_dep_cols . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fn_dep -> fn_dep_cols RARROW fn_dep_cols

State 844:
## Known stack suffix:
## fn_dep
## LR(1) items:
fn_deps -> fn_dep . [ RBRACE ]
fn_deps -> fn_dep . COMMA fn_deps [ RBRACE ]
## Transitions:
-- On COMMA shift to state 845
## Reductions:
-- On RBRACE
--   reduce production fn_deps -> fn_dep

State 845:
## Known stack suffix:
## fn_dep COMMA
## LR(1) items:
fn_deps -> fn_dep COMMA . fn_deps [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 837
-- On fn_deps shift to state 846
-- On fn_dep_cols shift to state 841
-- On fn_dep shift to state 844
## Reductions:

State 846:
## Known stack suffix:
## fn_dep COMMA fn_deps
## LR(1) items:
fn_deps -> fn_dep COMMA fn_deps . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fn_deps -> fn_dep COMMA fn_deps

State 847:
## Known stack suffix:
## LENS exp TABLEKEYS
## LR(1) items:
lens_expression -> LENS exp TABLEKEYS . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 848
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 848:
## Known stack suffix:
## LENS exp TABLEKEYS exp
## LR(1) items:
lens_expression -> LENS exp TABLEKEYS exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENS exp TABLEKEYS exp

State 849:
## Known stack suffix:
## LENS exp DEFAULT
## LR(1) items:
lens_expression -> LENS exp DEFAULT . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENS exp DEFAULT

State 850:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp . FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On FROM shift to state 851
## Reductions:

State 851:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 852
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 852:
## Known stack suffix:
## LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM exp
## LR(1) items:
lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSDROP VARIABLE DETERMINED BY VARIABLE DEFAULT exp FROM exp

State 853:
## Known stack suffix:
## LENSGET exp
## LR(1) items:
lens_expression -> LENSGET exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSGET exp

State 854:
## Known stack suffix:
## LENSJOIN exp
## LR(1) items:
lens_expression -> LENSJOIN exp . WITH exp ON exp DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN exp . WITH exp ON exp DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WITH shift to state 855
## Reductions:

State 855:
## Known stack suffix:
## LENSJOIN exp WITH
## LR(1) items:
lens_expression -> LENSJOIN exp WITH . exp ON exp DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN exp WITH . exp ON exp DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 856
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 856:
## Known stack suffix:
## LENSJOIN exp WITH exp
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp . ON exp DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN exp WITH exp . ON exp DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On ON shift to state 857
## Reductions:

State 857:
## Known stack suffix:
## LENSJOIN exp WITH exp ON
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON . exp DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN exp WITH exp ON . exp DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 858
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 858:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp . DELETE LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
lens_expression -> LENSJOIN exp WITH exp ON exp . DELETE_LEFT [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On DELETE_LEFT shift to state 859
-- On DELETE shift to state 860
## Reductions:

State 859:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE_LEFT
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE_LEFT . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSJOIN exp WITH exp ON exp DELETE_LEFT

State 860:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE . LBRACE exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 861
## Reductions:

State 861:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE LBRACE
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE . exp COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 862
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 862:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE LBRACE exp
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE exp . COMMA exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On COMMA shift to state 863
## Reductions:

State 863:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA . exp RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 864
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 864:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA exp
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA exp . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA exp RBRACE
## LR(1) items:
lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA exp RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSJOIN exp WITH exp ON exp DELETE LBRACE exp COMMA exp RBRACE

State 866:
## Known stack suffix:
## LENSPUT exp
## LR(1) items:
lens_expression -> LENSPUT exp . WITH exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WITH shift to state 867
## Reductions:

State 867:
## Known stack suffix:
## LENSPUT exp WITH
## LR(1) items:
lens_expression -> LENSPUT exp WITH . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 868
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 868:
## Known stack suffix:
## LENSPUT exp WITH exp
## LR(1) items:
lens_expression -> LENSPUT exp WITH exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSPUT exp WITH exp

State 869:
## Known stack suffix:
## LENSSELECT FROM exp
## LR(1) items:
lens_expression -> LENSSELECT FROM exp . BY exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On BY shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## LENSSELECT FROM exp BY
## LR(1) items:
lens_expression -> LENSSELECT FROM exp BY . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 871
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 871:
## Known stack suffix:
## LENSSELECT FROM exp BY exp
## LR(1) items:
lens_expression -> LENSSELECT FROM exp BY exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lens_expression -> LENSSELECT FROM exp BY exp

State 872:
## Known stack suffix:
## FUN
## LR(1) items:
binding -> FUN . var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
primary_expression -> FUN . arg_lists block [ SEMICOLON RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE DOT COLONCOLON COLON CASE BARBAR BANG AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LPAREN shift to state 407
-- On var shift to state 873
-- On multi_args shift to state 411
-- On arg_lists shift to state 548
## Reductions:

State 873:
## Known stack suffix:
## FUN var
## LR(1) items:
binding -> FUN var . arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 874
## Reductions:

State 874:
## Known stack suffix:
## FUN var arg_lists
## LR(1) items:
binding -> FUN var arg_lists . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 875
## Reductions:

State 875:
## Known stack suffix:
## FUN var arg_lists block
## LR(1) items:
binding -> FUN var arg_lists block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> FUN var arg_lists block

State 876:
## Known stack suffix:
## ALIEN
## LR(1) items:
alien_block -> ALIEN . VARIABLE STRING LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 877
## Reductions:

State 877:
## Known stack suffix:
## ALIEN VARIABLE
## LR(1) items:
alien_block -> ALIEN VARIABLE . STRING LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On STRING shift to state 878
## Reductions:

State 878:
## Known stack suffix:
## ALIEN VARIABLE STRING
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING . LBRACE alien_datatypes RBRACE [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 470
## Reductions:

State 879:
## Known stack suffix:
## typedecl
## LR(1) items:
binding -> typedecl . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 880
## Reductions:

State 880:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
binding -> typedecl SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> typedecl SEMICOLON

State 881:
## Known stack suffix:
## typed_handler_binding
## LR(1) items:
binding -> typed_handler_binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> typed_handler_binding

State 882:
## Known stack suffix:
## signature
## LR(1) items:
binding -> signature . FUN var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
binding -> signature . LINFUN var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LINFUN shift to state 883
-- On FUN shift to state 887
## Reductions:

State 883:
## Known stack suffix:
## signature LINFUN
## LR(1) items:
binding -> signature LINFUN . var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 884
## Reductions:

State 884:
## Known stack suffix:
## signature LINFUN var
## LR(1) items:
binding -> signature LINFUN var . arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 885
## Reductions:

State 885:
## Known stack suffix:
## signature LINFUN var arg_lists
## LR(1) items:
binding -> signature LINFUN var arg_lists . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 886
## Reductions:

State 886:
## Known stack suffix:
## signature LINFUN var arg_lists block
## LR(1) items:
binding -> signature LINFUN var arg_lists block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> signature LINFUN var arg_lists block

State 887:
## Known stack suffix:
## signature FUN
## LR(1) items:
binding -> signature FUN . var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 888
## Reductions:

State 888:
## Known stack suffix:
## signature FUN var
## LR(1) items:
binding -> signature FUN var . arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 407
-- On multi_args shift to state 411
-- On arg_lists shift to state 889
## Reductions:

State 889:
## Known stack suffix:
## signature FUN var arg_lists
## LR(1) items:
binding -> signature FUN var arg_lists . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 890
## Reductions:

State 890:
## Known stack suffix:
## signature FUN var arg_lists block
## LR(1) items:
binding -> signature FUN var arg_lists block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> signature FUN var arg_lists block

State 891:
## Known stack suffix:
## perhaps_semi
## LR(1) items:
block_contents -> perhaps_semi . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_contents -> perhaps_semi

State 892:
## Known stack suffix:
## links_open
## LR(1) items:
binding -> links_open . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> links_open

State 893:
## Known stack suffix:
## links_module
## LR(1) items:
binding -> links_module . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> links_module

State 894:
## Known stack suffix:
## handler_depth
## LR(1) items:
primary_expression -> handler_depth . optional_computation_parameter handler_parameterization [ SEMICOLON RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END DOT COLONCOLON COLON CASE BARBAR BANG AMPAMP ]
typed_handler_binding -> handler_depth . optional_computation_parameter var handler_parameterization [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACKET shift to state 495
-- On optional_computation_parameter shift to state 895
## Reductions:
-- On VARIABLE LPAREN LBRACE
--   reduce production optional_computation_parameter ->

State 895:
## Known stack suffix:
## handler_depth optional_computation_parameter
## LR(1) items:
primary_expression -> handler_depth optional_computation_parameter . handler_parameterization [ SEMICOLON RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END DOT COLONCOLON COLON CASE BARBAR BANG AMPAMP ]
typed_handler_binding -> handler_depth optional_computation_parameter . var handler_parameterization [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LPAREN shift to state 407
-- On LBRACE shift to state 500
-- On var shift to state 499
-- On multi_args shift to state 411
-- On handler_parameterization shift to state 608
-- On handler_body shift to state 506
-- On arg_lists shift to state 507
## Reductions:

State 896:
## Known stack suffix:
## exp
## LR(1) items:
binding -> exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
block_contents -> exp . SEMICOLON [ RBRACE CASE ]
block_contents -> exp . [ RBRACE CASE ]
## Transitions:
-- On SEMICOLON shift to state 897
## Reductions:
-- On RBRACE CASE
--   reduce production block_contents -> exp

State 897:
## Known stack suffix:
## exp SEMICOLON
## LR(1) items:
binding -> exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
block_contents -> exp SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production binding -> exp SEMICOLON
-- On RBRACE CASE
--   reduce production block_contents -> exp SEMICOLON

State 898:
## Known stack suffix:
## LBRACE block_contents
## LR(1) items:
cp_expression -> LBRACE block_contents . RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On RBRACE shift to state 899
## Reductions:

State 899:
## Known stack suffix:
## LBRACE block_contents RBRACE
## LR(1) items:
cp_expression -> LBRACE block_contents RBRACE . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> LBRACE block_contents RBRACE

State 900:
## Known stack suffix:
## bindings
## LR(1) items:
bindings -> bindings . binding [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
block_contents -> bindings . exp SEMICOLON [ RBRACE CASE ]
block_contents -> bindings . exp [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 316
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 524
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 872
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 876
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 879
-- On typed_handler_binding shift to state 881
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 882
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On links_open shift to state 892
-- On links_module shift to state 893
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On formlet_expression shift to state 746
-- On exp shift to state 901
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On binding shift to state 903
-- On atomic_expression shift to state 611
-- On alien_block shift to state 904
## Reductions:

State 901:
## Known stack suffix:
## bindings exp
## LR(1) items:
binding -> exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
block_contents -> bindings exp . SEMICOLON [ RBRACE CASE ]
block_contents -> bindings exp . [ RBRACE CASE ]
## Transitions:
-- On SEMICOLON shift to state 902
## Reductions:
-- On RBRACE CASE
--   reduce production block_contents -> bindings exp

State 902:
## Known stack suffix:
## bindings exp SEMICOLON
## LR(1) items:
binding -> exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
block_contents -> bindings exp SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production binding -> exp SEMICOLON
-- On RBRACE CASE
--   reduce production block_contents -> bindings exp SEMICOLON

State 903:
## Known stack suffix:
## bindings binding
## LR(1) items:
bindings -> bindings binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> bindings binding

State 904:
## Known stack suffix:
## alien_block
## LR(1) items:
binding -> alien_block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> alien_block

State 905:
## Known stack suffix:
## binding
## LR(1) items:
bindings -> binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> binding

State 906:
## Known stack suffix:
## cp_name
## LR(1) items:
cp_expression -> cp_name . LPAREN perhaps_name RPAREN DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name . LPAREN perhaps_name RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name . LBRACKET exp RBRACKET DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name . LBRACKET exp RBRACKET [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name . LBRACKET RBRACKET [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name . LRARROW cp_name [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On LRARROW shift to state 907
-- On LPAREN shift to state 909
-- On LBRACKET shift to state 919
## Reductions:

State 907:
## Known stack suffix:
## cp_name LRARROW
## LR(1) items:
cp_expression -> cp_name LRARROW . cp_name [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On cp_name shift to state 908
## Reductions:

State 908:
## Known stack suffix:
## cp_name LRARROW cp_name
## LR(1) items:
cp_expression -> cp_name LRARROW cp_name . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> cp_name LRARROW cp_name

State 909:
## Known stack suffix:
## cp_name LPAREN
## LR(1) items:
cp_expression -> cp_name LPAREN . perhaps_name RPAREN DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LPAREN . perhaps_name RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On perhaps_name shift to state 910
-- On cp_name shift to state 918
## Reductions:
-- On RPAREN
--   reduce production perhaps_name ->

State 910:
## Known stack suffix:
## cp_name LPAREN perhaps_name
## LR(1) items:
cp_expression -> cp_name LPAREN perhaps_name . RPAREN DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LPAREN perhaps_name . RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On RPAREN shift to state 911
## Reductions:

State 911:
## Known stack suffix:
## cp_name LPAREN perhaps_name RPAREN
## LR(1) items:
cp_expression -> cp_name LPAREN perhaps_name RPAREN . DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LPAREN perhaps_name RPAREN . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On DOT shift to state 912
## Reductions:
-- On VBAR RPAREN RIGHTTRIANGLE RBRACE CASE
--   reduce production cp_expression -> cp_name LPAREN perhaps_name RPAREN

State 912:
## Known stack suffix:
## cp_name LPAREN perhaps_name RPAREN DOT
## LR(1) items:
cp_expression -> cp_name LPAREN perhaps_name RPAREN DOT . cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 917
## Reductions:

State 913:
## Known stack suffix:
## cp_label
## LR(1) items:
cp_expression -> cp_label . cp_name DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_label . cp_name [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On cp_name shift to state 914
## Reductions:

State 914:
## Known stack suffix:
## cp_label cp_name
## LR(1) items:
cp_expression -> cp_label cp_name . DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_label cp_name . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On DOT shift to state 915
## Reductions:
-- On VBAR RPAREN RIGHTTRIANGLE RBRACE CASE
--   reduce production cp_expression -> cp_label cp_name

State 915:
## Known stack suffix:
## cp_label cp_name DOT
## LR(1) items:
cp_expression -> cp_label cp_name DOT . cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 916
## Reductions:

State 916:
## Known stack suffix:
## cp_label cp_name DOT cp_expression
## LR(1) items:
cp_expression -> cp_label cp_name DOT cp_expression . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> cp_label cp_name DOT cp_expression

State 917:
## Known stack suffix:
## cp_name LPAREN perhaps_name RPAREN DOT cp_expression
## LR(1) items:
cp_expression -> cp_name LPAREN perhaps_name RPAREN DOT cp_expression . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> cp_name LPAREN perhaps_name RPAREN DOT cp_expression

State 918:
## Known stack suffix:
## cp_name
## LR(1) items:
perhaps_name -> cp_name . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_name -> cp_name

State 919:
## Known stack suffix:
## cp_name LBRACKET
## LR(1) items:
cp_expression -> cp_name LBRACKET . exp RBRACKET DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LBRACKET . exp RBRACKET [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LBRACKET . RBRACKET [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RBRACKET shift to state 920
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 921
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 920:
## Known stack suffix:
## cp_name LBRACKET RBRACKET
## LR(1) items:
cp_expression -> cp_name LBRACKET RBRACKET . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> cp_name LBRACKET RBRACKET

State 921:
## Known stack suffix:
## cp_name LBRACKET exp
## LR(1) items:
cp_expression -> cp_name LBRACKET exp . RBRACKET DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LBRACKET exp . RBRACKET [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On RBRACKET shift to state 922
## Reductions:

State 922:
## Known stack suffix:
## cp_name LBRACKET exp RBRACKET
## LR(1) items:
cp_expression -> cp_name LBRACKET exp RBRACKET . DOT cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
cp_expression -> cp_name LBRACKET exp RBRACKET . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On DOT shift to state 923
## Reductions:
-- On VBAR RPAREN RIGHTTRIANGLE RBRACE CASE
--   reduce production cp_expression -> cp_name LBRACKET exp RBRACKET

State 923:
## Known stack suffix:
## cp_name LBRACKET exp RBRACKET DOT
## LR(1) items:
cp_expression -> cp_name LBRACKET exp RBRACKET DOT . cp_expression [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 924
## Reductions:

State 924:
## Known stack suffix:
## cp_name LBRACKET exp RBRACKET DOT cp_expression
## LR(1) items:
cp_expression -> cp_name LBRACKET exp RBRACKET DOT cp_expression . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> cp_name LBRACKET exp RBRACKET DOT cp_expression

State 925:
## Known stack suffix:
## NU cp_name DOT LPAREN cp_expression
## LR(1) items:
cp_expression -> NU cp_name DOT LPAREN cp_expression . VBAR cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VBAR shift to state 926
## Reductions:

State 926:
## Known stack suffix:
## NU cp_name DOT LPAREN cp_expression VBAR
## LR(1) items:
cp_expression -> NU cp_name DOT LPAREN cp_expression VBAR . cp_expression RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 416
-- On OFFER shift to state 417
-- On NU shift to state 424
-- On LBRACE shift to state 428
-- On CONSTRUCTOR shift to state 421
-- On cp_name shift to state 906
-- On cp_label shift to state 913
-- On cp_expression shift to state 927
## Reductions:

State 927:
## Known stack suffix:
## NU cp_name DOT LPAREN cp_expression VBAR cp_expression
## LR(1) items:
cp_expression -> NU cp_name DOT LPAREN cp_expression VBAR cp_expression . RPAREN [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On RPAREN shift to state 928
## Reductions:

State 928:
## Known stack suffix:
## NU cp_name DOT LPAREN cp_expression VBAR cp_expression RPAREN
## LR(1) items:
cp_expression -> NU cp_name DOT LPAREN cp_expression VBAR cp_expression RPAREN . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> NU cp_name DOT LPAREN cp_expression VBAR cp_expression RPAREN

State 929:
## Known stack suffix:
## CASE cp_label RARROW cp_expression
## LR(1) items:
cp_case -> CASE cp_label RARROW cp_expression . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_case -> CASE cp_label RARROW cp_expression

State 930:
## Known stack suffix:
## OFFER cp_name LBRACE perhaps_cp_cases
## LR(1) items:
cp_expression -> OFFER cp_name LBRACE perhaps_cp_cases . RBRACE [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
-- On RBRACE shift to state 931
## Reductions:

State 931:
## Known stack suffix:
## OFFER cp_name LBRACE perhaps_cp_cases RBRACE
## LR(1) items:
cp_expression -> OFFER cp_name LBRACE perhaps_cp_cases RBRACE . [ VBAR RPAREN RIGHTTRIANGLE RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_expression -> OFFER cp_name LBRACE perhaps_cp_cases RBRACE

State 932:
## Known stack suffix:
## cp_cases
## LR(1) items:
perhaps_cp_cases -> cp_cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_cp_cases -> cp_cases

State 933:
## Known stack suffix:
## cp_case
## LR(1) items:
cp_cases -> cp_case . [ RBRACE ]
cp_cases -> cp_case . cp_cases [ RBRACE ]
## Transitions:
-- On CASE shift to state 420
-- On cp_cases shift to state 934
-- On cp_case shift to state 933
## Reductions:
-- On RBRACE
--   reduce production cp_cases -> cp_case

State 934:
## Known stack suffix:
## cp_case cp_cases
## LR(1) items:
cp_cases -> cp_case cp_cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cp_cases -> cp_case cp_cases

State 935:
## Known stack suffix:
## LEFTTRIANGLE cp_expression
## LR(1) items:
primary_expression -> LEFTTRIANGLE cp_expression . RIGHTTRIANGLE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RIGHTTRIANGLE shift to state 936
## Reductions:

State 936:
## Known stack suffix:
## LEFTTRIANGLE cp_expression RIGHTTRIANGLE
## LR(1) items:
primary_expression -> LEFTTRIANGLE cp_expression RIGHTTRIANGLE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LEFTTRIANGLE cp_expression RIGHTTRIANGLE

State 937:
## Known stack suffix:
## MINUSDOT unary_expression
## LR(1) items:
unary_expression -> MINUSDOT unary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> MINUSDOT unary_expression

State 938:
## Known stack suffix:
## MINUS
## LR(1) items:
binop -> MINUS . [ RPAREN ]
unary_expression -> MINUS . unary_expression [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 939
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:
-- On RPAREN
--   reduce production binop -> MINUS

State 939:
## Known stack suffix:
## MINUS unary_expression
## LR(1) items:
unary_expression -> MINUS unary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> MINUS unary_expression

State 940:
## Known stack suffix:
## LPAREN DOT
## LR(1) items:
parenthesized_thing -> LPAREN DOT . record_label RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 941
-- On field_label shift to state 254
## Reductions:

State 941:
## Known stack suffix:
## LPAREN DOT record_label
## LR(1) items:
parenthesized_thing -> LPAREN DOT record_label . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 942
## Reductions:

State 942:
## Known stack suffix:
## LPAREN DOT record_label RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN DOT record_label RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN DOT record_label RPAREN

State 943:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_expression -> CONSTRUCTOR . [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
constructor_expression -> CONSTRUCTOR . parenthesized_thing [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
field_label -> CONSTRUCTOR . [ EQ ]
qualified_name -> CONSTRUCTOR . DOT qualified_name_inner [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR BANG AMPAMP ]
## Transitions:
-- On LPAREN shift to state 402
-- On DOT shift to state 565
-- On parenthesized_thing shift to state 598
## Reductions:
-- On WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR BANG AMPAMP
--   reduce production constructor_expression -> CONSTRUCTOR
-- On EQ
--   reduce production field_label -> CONSTRUCTOR

State 944:
## Known stack suffix:
## op
## LR(1) items:
binop -> op . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> op

State 945:
## Known stack suffix:
## LPAREN labeled_exps
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps . VBAR exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
parenthesized_thing -> LPAREN labeled_exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VBAR shift to state 946
-- On RPAREN shift to state 949
## Reductions:

State 946:
## Known stack suffix:
## LPAREN labeled_exps VBAR
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR . exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 947
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 947:
## Known stack suffix:
## LPAREN labeled_exps VBAR exp
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR exp . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 948
## Reductions:

State 948:
## Known stack suffix:
## LPAREN labeled_exps VBAR exp RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR exp RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN labeled_exps VBAR exp RPAREN

State 949:
## Known stack suffix:
## LPAREN labeled_exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN labeled_exps RPAREN

State 950:
## Known stack suffix:
## LPAREN exps
## LR(1) items:
parenthesized_thing -> LPAREN exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 951
## Reductions:

State 951:
## Known stack suffix:
## LPAREN exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN exps RPAREN

State 952:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
exps -> exp . COMMA exps [ RPAREN ]
exps -> exp . [ RPAREN ]
parenthesized_thing -> LPAREN exp . WITH labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On WITH shift to state 953
-- On COMMA shift to state 756
## Reductions:
-- On RPAREN
--   reduce production exps -> exp

State 953:
## Known stack suffix:
## LPAREN exp WITH
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH . labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 818
-- On labeled_exps shift to state 954
-- On field_label shift to state 254
## Reductions:

State 954:
## Known stack suffix:
## LPAREN exp WITH labeled_exps
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH labeled_exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 955
## Reductions:

State 955:
## Known stack suffix:
## LPAREN exp WITH labeled_exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH labeled_exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN exp WITH labeled_exps RPAREN

State 956:
## Known stack suffix:
## LPAREN binop
## LR(1) items:
parenthesized_thing -> LPAREN binop . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 957
## Reductions:

State 957:
## Known stack suffix:
## LPAREN binop RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN binop RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE TABLEKEYS STRING SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN binop RPAREN

State 958:
## Known stack suffix:
## OFFER LPAREN exp
## LR(1) items:
session_expression -> OFFER LPAREN exp . RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 959
## Reductions:

State 959:
## Known stack suffix:
## OFFER LPAREN exp RPAREN
## LR(1) items:
session_expression -> OFFER LPAREN exp RPAREN . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 960
## Reductions:

State 960:
## Known stack suffix:
## OFFER LPAREN exp RPAREN LBRACE
## LR(1) items:
session_expression -> OFFER LPAREN exp RPAREN LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On perhaps_cases shift to state 961
-- On cases shift to state 782
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 961:
## Known stack suffix:
## OFFER LPAREN exp RPAREN LBRACE perhaps_cases
## LR(1) items:
session_expression -> OFFER LPAREN exp RPAREN LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 962
## Reductions:

State 962:
## Known stack suffix:
## OFFER LPAREN exp RPAREN LBRACE perhaps_cases RBRACE
## LR(1) items:
session_expression -> OFFER LPAREN exp RPAREN LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_expression -> OFFER LPAREN exp RPAREN LBRACE perhaps_cases RBRACE

State 963:
## Known stack suffix:
## LBRACEBAR exp
## LR(1) items:
page_placement -> LBRACEBAR exp . BARRBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On BARRBRACE shift to state 964
## Reductions:

State 964:
## Known stack suffix:
## LBRACEBAR exp BARRBRACE
## LR(1) items:
page_placement -> LBRACEBAR exp BARRBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production page_placement -> LBRACEBAR exp BARRBRACE

State 965:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . block_contents RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_binding -> LBRACE . logical_expression RARROW pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE . logical_expression FATRARROW logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE . logical_expression FATRARROW logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 316
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SEMICOLON shift to state 384
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 524
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 872
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 876
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 879
-- On typed_handler_binding shift to state 881
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 882
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On perhaps_semi shift to state 891
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 966
-- On links_open shift to state 892
-- On links_module shift to state 893
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On formlet_expression shift to state 746
-- On exp shift to state 896
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block_contents shift to state 976
-- On block shift to state 610
-- On bindings shift to state 900
-- On binding shift to state 905
-- On atomic_expression shift to state 611
-- On alien_block shift to state 904
## Reductions:
-- On RBRACE
--   reduce production perhaps_semi ->

State 966:
## Known stack suffix:
## LBRACE logical_expression
## LR(1) items:
formlet_binding -> LBRACE logical_expression . RARROW pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression . FATRARROW logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression . FATRARROW logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ SEMICOLON RBRACE RARROW FATRARROW COLON BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ SEMICOLON RBRACE RARROW FATRARROW COLON BARBAR AMPAMP ]
typed_expression -> logical_expression . [ SEMICOLON RBRACE COLON ]
## Transitions:
-- On RARROW shift to state 967
-- On FATRARROW shift to state 970
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:
-- On SEMICOLON RBRACE COLON
--   reduce production typed_expression -> logical_expression

State 967:
## Known stack suffix:
## LBRACE logical_expression RARROW
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW . pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 968
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 968:
## Known stack suffix:
## LBRACE logical_expression RARROW pattern
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW pattern . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On RBRACE shift to state 969
## Reductions:

State 969:
## Known stack suffix:
## LBRACE logical_expression RARROW pattern RBRACE
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW pattern RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_binding -> LBRACE logical_expression RARROW pattern RBRACE

State 970:
## Known stack suffix:
## LBRACE logical_expression FATRARROW
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW . logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression FATRARROW . logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 971
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 971:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression . WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ WITH RBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ WITH RBRACE BARBAR AMPAMP ]
## Transitions:
-- On WITH shift to state 972
-- On RBRACE shift to state 975
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:

State 972:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH . logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On RECEIVE shift to state 389
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On HANDLER shift to state 461
-- On FUN shift to state 547
-- On FALSE shift to state 34
-- On DOOP shift to state 579
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On spawn_expression shift to state 572
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 973
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 973:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH logical_expression
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ RBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ RBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACE shift to state 974
-- On BARBAR shift to state 622
-- On AMPAMP shift to state 741
## Reductions:

State 974:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE

State 975:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression RBRACE
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_placement -> LBRACE logical_expression FATRARROW logical_expression RBRACE

State 976:
## Known stack suffix:
## LBRACE block_contents
## LR(1) items:
block -> LBRACE block_contents . RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING STAR SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SLASHRXML SLASHFLAGS SLASH SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE RAISE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACEBAR LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DOOP DOLLAR DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CDATA CASE CARET BY BARRBRACE BARBAR BANG AS AMPAMP ALTERNATE ALIEN ]
## Transitions:
-- On RBRACE shift to state 977
## Reductions:

State 977:
## Known stack suffix:
## LBRACE block_contents RBRACE
## LR(1) items:
block -> LBRACE block_contents RBRACE . [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLEKEYS TABLE SWITCH STRING STAR SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SLASHRXML SLASHFLAGS SLASH SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE RAISE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OTHERWISE OPEN OP ON OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACEBAR LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF HANDLER HANDLE FUN FROM FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DOOP DOLLAR DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CDATA CASE CARET BY BARRBRACE BARBAR BANG AS AMPAMP ALTERNATE ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> LBRACE block_contents RBRACE

State 978:
## Known stack suffix:
## LXML RXML ENDTAG
## LR(1) items:
xml_tree -> LXML RXML ENDTAG . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML RXML ENDTAG

State 979:
## Known stack suffix:
## CDATA
## LR(1) items:
xml_contents -> CDATA . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> CDATA

State 980:
## Known stack suffix:
## xml_tree
## LR(1) items:
xml_contents -> xml_tree . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> xml_tree

State 981:
## Known stack suffix:
## LXML RXML xml_contents_list
## LR(1) items:
xml_tree -> LXML RXML xml_contents_list . ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On ENDTAG shift to state 982
## Reductions:

State 982:
## Known stack suffix:
## LXML RXML xml_contents_list ENDTAG
## LR(1) items:
xml_tree -> LXML RXML xml_contents_list ENDTAG . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML RXML xml_contents_list ENDTAG

State 983:
## Known stack suffix:
## xml_contents
## LR(1) items:
xml_contents_list -> xml_contents . [ ENDTAG ]
xml_contents_list -> xml_contents . xml_contents_list [ ENDTAG ]
## Transitions:
-- On LXML shift to state 392
-- On LBRACEBAR shift to state 396
-- On LBRACE shift to state 965
-- On CDATA shift to state 979
-- On xml_tree shift to state 980
-- On xml_contents_list shift to state 984
-- On xml_contents shift to state 983
-- On page_placement shift to state 985
-- On formlet_placement shift to state 986
-- On formlet_binding shift to state 987
-- On block shift to state 988
## Reductions:
-- On ENDTAG
--   reduce production xml_contents_list -> xml_contents

State 984:
## Known stack suffix:
## xml_contents xml_contents_list
## LR(1) items:
xml_contents_list -> xml_contents xml_contents_list . [ ENDTAG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents_list -> xml_contents xml_contents_list

State 985:
## Known stack suffix:
## page_placement
## LR(1) items:
xml_contents -> page_placement . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> page_placement

State 986:
## Known stack suffix:
## formlet_placement
## LR(1) items:
xml_contents -> formlet_placement . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> formlet_placement

State 987:
## Known stack suffix:
## formlet_binding
## LR(1) items:
xml_contents -> formlet_binding . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> formlet_binding

State 988:
## Known stack suffix:
## block
## LR(1) items:
xml_contents -> block . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> block

State 989:
## Known stack suffix:
## xmlid
## LR(1) items:
attr -> xmlid . EQ LQUOTE attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid . EQ LQUOTE RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On EQ shift to state 990
## Reductions:

State 990:
## Known stack suffix:
## xmlid EQ
## LR(1) items:
attr -> xmlid EQ . LQUOTE attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid EQ . LQUOTE RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On LQUOTE shift to state 991
## Reductions:

State 991:
## Known stack suffix:
## xmlid EQ LQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE . attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid EQ LQUOTE . RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On STRING shift to state 992
-- On RQUOTE shift to state 996
-- On LBRACE shift to state 315
-- On block shift to state 993
-- On attr_val shift to state 997
## Reductions:

State 992:
## Known stack suffix:
## STRING
## LR(1) items:
attr_val -> STRING . [ RQUOTE ]
attr_val -> STRING . attr_val [ RQUOTE ]
## Transitions:
-- On STRING shift to state 992
-- On LBRACE shift to state 315
-- On block shift to state 993
-- On attr_val shift to state 995
## Reductions:
-- On RQUOTE
--   reduce production attr_val -> STRING

State 993:
## Known stack suffix:
## block
## LR(1) items:
attr_val -> block . [ RQUOTE ]
attr_val -> block . attr_val [ RQUOTE ]
## Transitions:
-- On STRING shift to state 992
-- On LBRACE shift to state 315
-- On block shift to state 993
-- On attr_val shift to state 994
## Reductions:
-- On RQUOTE
--   reduce production attr_val -> block

State 994:
## Known stack suffix:
## block attr_val
## LR(1) items:
attr_val -> block attr_val . [ RQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_val -> block attr_val

State 995:
## Known stack suffix:
## STRING attr_val
## LR(1) items:
attr_val -> STRING attr_val . [ RQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_val -> STRING attr_val

State 996:
## Known stack suffix:
## xmlid EQ LQUOTE RQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE RQUOTE . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr -> xmlid EQ LQUOTE RQUOTE

State 997:
## Known stack suffix:
## xmlid EQ LQUOTE attr_val
## LR(1) items:
attr -> xmlid EQ LQUOTE attr_val . RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On RQUOTE shift to state 998
## Reductions:

State 998:
## Known stack suffix:
## xmlid EQ LQUOTE attr_val RQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE attr_val RQUOTE . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr -> xmlid EQ LQUOTE attr_val RQUOTE

State 999:
## Known stack suffix:
## block
## LR(1) items:
attrs -> block . [ SLASHRXML RXML ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrs -> block

State 1000:
## Known stack suffix:
## LXML attrs
## LR(1) items:
xml_tree -> LXML attrs . RXML ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML attrs . SLASHRXML [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML attrs . RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On SLASHRXML shift to state 1001
-- On RXML shift to state 1002
## Reductions:

State 1001:
## Known stack suffix:
## LXML attrs SLASHRXML
## LR(1) items:
xml_tree -> LXML attrs SLASHRXML . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs SLASHRXML

State 1002:
## Known stack suffix:
## LXML attrs RXML
## LR(1) items:
xml_tree -> LXML attrs RXML . ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
xml_tree -> LXML attrs RXML . xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LXML shift to state 392
-- On LBRACEBAR shift to state 396
-- On LBRACE shift to state 965
-- On ENDTAG shift to state 1003
-- On CDATA shift to state 979
-- On xml_tree shift to state 980
-- On xml_contents_list shift to state 1004
-- On xml_contents shift to state 983
-- On page_placement shift to state 985
-- On formlet_placement shift to state 986
-- On formlet_binding shift to state 987
-- On block shift to state 988
## Reductions:

State 1003:
## Known stack suffix:
## LXML attrs RXML ENDTAG
## LR(1) items:
xml_tree -> LXML attrs RXML ENDTAG . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs RXML ENDTAG

State 1004:
## Known stack suffix:
## LXML attrs RXML xml_contents_list
## LR(1) items:
xml_tree -> LXML attrs RXML xml_contents_list . ENDTAG [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On ENDTAG shift to state 1005
## Reductions:

State 1005:
## Known stack suffix:
## LXML attrs RXML xml_contents_list ENDTAG
## LR(1) items:
xml_tree -> LXML attrs RXML xml_contents_list ENDTAG . [ YIELDS WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OTHERWISE ON MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CDATA CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs RXML xml_contents_list ENDTAG

State 1006:
## Known stack suffix:
## attr_list
## LR(1) items:
attr_list -> attr_list . attr [ VARIABLE SLASHRXML RXML LBRACE ]
attrs -> attr_list . [ SLASHRXML RXML ]
attrs -> attr_list . block [ SLASHRXML RXML ]
## Transitions:
-- On VARIABLE shift to state 393
-- On LBRACE shift to state 315
-- On xmlid shift to state 989
-- On block shift to state 1007
-- On attr shift to state 1008
## Reductions:
-- On SLASHRXML RXML
--   reduce production attrs -> attr_list

State 1007:
## Known stack suffix:
## attr_list block
## LR(1) items:
attrs -> attr_list block . [ SLASHRXML RXML ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrs -> attr_list block

State 1008:
## Known stack suffix:
## attr_list attr
## LR(1) items:
attr_list -> attr_list attr . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_list -> attr_list attr

State 1009:
## Known stack suffix:
## attr
## LR(1) items:
attr_list -> attr . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_list -> attr

State 1010:
## Known stack suffix:
## PREFIXOP unary_expression
## LR(1) items:
unary_expression -> PREFIXOP unary_expression . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> PREFIXOP unary_expression

State 1011:
## Known stack suffix:
## QUERY LBRACKET exp
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp . RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
postfix_expression -> QUERY LBRACKET exp . COMMA exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 1012
-- On COMMA shift to state 1014
## Reductions:

State 1012:
## Known stack suffix:
## QUERY LBRACKET exp RBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp RBRACKET . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 1013
## Reductions:

State 1013:
## Known stack suffix:
## QUERY LBRACKET exp RBRACKET block
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp RBRACKET block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY LBRACKET exp RBRACKET block

State 1014:
## Known stack suffix:
## QUERY LBRACKET exp COMMA
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA . exp RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1015
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1015:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp . RBRACKET block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 1016
## Reductions:

State 1016:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp RBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET . block [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 1017
## Reductions:

State 1017:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp RBRACKET block
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET block

State 1018:
## Known stack suffix:
## QUERY block
## LR(1) items:
postfix_expression -> QUERY block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY block

State 1019:
## Known stack suffix:
## CASE pattern RARROW block_contents
## LR(1) items:
case -> CASE pattern RARROW block_contents . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> CASE pattern RARROW block_contents

State 1020:
## Known stack suffix:
## RECEIVE LBRACE perhaps_cases
## LR(1) items:
case_expression -> RECEIVE LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 1021
## Reductions:

State 1021:
## Known stack suffix:
## RECEIVE LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> RECEIVE LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> RECEIVE LBRACE perhaps_cases RBRACE

State 1022:
## Known stack suffix:
## SELECT field_label exp
## LR(1) items:
session_expression -> SELECT field_label exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production session_expression -> SELECT field_label exp

State 1023:
## Known stack suffix:
## SHALLOWHANDLE LPAREN exp
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN exp . RPAREN LBRACE cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 1024
## Reductions:

State 1024:
## Known stack suffix:
## SHALLOWHANDLE LPAREN exp RPAREN
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN exp RPAREN . LBRACE cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 1025
## Reductions:

State 1025:
## Known stack suffix:
## SHALLOWHANDLE LPAREN exp RPAREN LBRACE
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN exp RPAREN LBRACE . cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On cases shift to state 1026
-- On case shift to state 503
## Reductions:

State 1026:
## Known stack suffix:
## SHALLOWHANDLE LPAREN exp RPAREN LBRACE cases
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN exp RPAREN LBRACE cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 1027
## Reductions:

State 1027:
## Known stack suffix:
## SHALLOWHANDLE LPAREN exp RPAREN LBRACE cases RBRACE
## LR(1) items:
case_expression -> SHALLOWHANDLE LPAREN exp RPAREN LBRACE cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> SHALLOWHANDLE LPAREN exp RPAREN LBRACE cases RBRACE

State 1028:
## Known stack suffix:
## SPAWNANGELAT LPAREN exp
## LR(1) items:
spawn_expression -> SPAWNANGELAT LPAREN exp . COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On COMMA shift to state 1029
## Reductions:

State 1029:
## Known stack suffix:
## SPAWNANGELAT LPAREN exp COMMA
## LR(1) items:
spawn_expression -> SPAWNANGELAT LPAREN exp COMMA . block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 1030
## Reductions:

State 1030:
## Known stack suffix:
## SPAWNANGELAT LPAREN exp COMMA block
## LR(1) items:
spawn_expression -> SPAWNANGELAT LPAREN exp COMMA block . RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 1031
## Reductions:

State 1031:
## Known stack suffix:
## SPAWNANGELAT LPAREN exp COMMA block RPAREN
## LR(1) items:
spawn_expression -> SPAWNANGELAT LPAREN exp COMMA block RPAREN . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWNANGELAT LPAREN exp COMMA block RPAREN

State 1032:
## Known stack suffix:
## SPAWNAT LPAREN exp
## LR(1) items:
spawn_expression -> SPAWNAT LPAREN exp . COMMA block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On COMMA shift to state 1033
## Reductions:

State 1033:
## Known stack suffix:
## SPAWNAT LPAREN exp COMMA
## LR(1) items:
spawn_expression -> SPAWNAT LPAREN exp COMMA . block RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On LBRACE shift to state 315
-- On block shift to state 1034
## Reductions:

State 1034:
## Known stack suffix:
## SPAWNAT LPAREN exp COMMA block
## LR(1) items:
spawn_expression -> SPAWNAT LPAREN exp COMMA block . RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
-- On RPAREN shift to state 1035
## Reductions:

State 1035:
## Known stack suffix:
## SPAWNAT LPAREN exp COMMA block RPAREN
## LR(1) items:
spawn_expression -> SPAWNAT LPAREN exp COMMA block RPAREN . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWNAT LPAREN exp COMMA block RPAREN

State 1036:
## Known stack suffix:
## VAR pattern EQ exp
## LR(1) items:
binding -> VAR pattern EQ exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 1037
## Reductions:

State 1037:
## Known stack suffix:
## VAR pattern EQ exp SEMICOLON
## LR(1) items:
binding -> VAR pattern EQ exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PAGE OPEN OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> VAR pattern EQ exp SEMICOLON

State 1038:
## Known stack suffix:
## SPAWNWAIT block
## LR(1) items:
spawn_expression -> SPAWNWAIT block . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW OTHERWISE ON MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FROM FATRARROW EQUALSTILDE END ELSE DOTDOT DOT DELETE_LEFT DELETE DEFAULT COMMA COLONCOLON COLON CASE BY BARRBRACE BARBAR BANG AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spawn_expression -> SPAWNWAIT block

State 1039:
## Known stack suffix:
## SWITCH LPAREN exp
## LR(1) items:
case_expression -> SWITCH LPAREN exp . RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 1040
## Reductions:

State 1040:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LBRACE shift to state 1041
## Reductions:

State 1041:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On CASE shift to state 336
-- On perhaps_cases shift to state 1042
-- On cases shift to state 782
-- On case shift to state 503
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 1042:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE perhaps_cases
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RBRACE shift to state 1043
## Reductions:

State 1043:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE

State 1044:
## Known stack suffix:
## TABLE exp
## LR(1) items:
table_expression -> TABLE exp . WITH datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
table_expression -> TABLE exp . WITH datatype perhaps_table_constraints TABLEKEYS exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WITH shift to state 1045
## Reductions:

State 1045:
## Known stack suffix:
## TABLE exp WITH
## LR(1) items:
table_expression -> TABLE exp WITH . datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
table_expression -> TABLE exp WITH . datatype perhaps_table_constraints TABLEKEYS exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 1046
## Reductions:

State 1046:
## Known stack suffix:
## TABLE exp WITH datatype
## LR(1) items:
table_expression -> TABLE exp WITH datatype . perhaps_table_constraints FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
table_expression -> TABLE exp WITH datatype . perhaps_table_constraints TABLEKEYS exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On WHERE shift to state 1047
-- On perhaps_table_constraints shift to state 1057
## Reductions:
-- On TABLEKEYS FROM
--   reduce production perhaps_table_constraints ->

State 1047:
## Known stack suffix:
## WHERE
## LR(1) items:
perhaps_table_constraints -> WHERE . table_constraints [ TABLEKEYS FROM ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On table_constraints shift to state 1048
-- On record_label shift to state 1049
-- On field_label shift to state 254
## Reductions:

State 1048:
## Known stack suffix:
## WHERE table_constraints
## LR(1) items:
perhaps_table_constraints -> WHERE table_constraints . [ TABLEKEYS FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_table_constraints -> WHERE table_constraints

State 1049:
## Known stack suffix:
## record_label
## LR(1) items:
table_constraints -> record_label . field_constraints [ TABLEKEYS FROM ]
table_constraints -> record_label . field_constraints COMMA table_constraints [ TABLEKEYS FROM ]
## Transitions:
-- On READONLY shift to state 1050
-- On DEFAULT shift to state 1051
-- On field_constraints shift to state 1052
-- On field_constraint shift to state 1055
## Reductions:

State 1050:
## Known stack suffix:
## READONLY
## LR(1) items:
field_constraint -> READONLY . [ TABLEKEYS READONLY FROM DEFAULT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraint -> READONLY

State 1051:
## Known stack suffix:
## DEFAULT
## LR(1) items:
field_constraint -> DEFAULT . [ TABLEKEYS READONLY FROM DEFAULT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraint -> DEFAULT

State 1052:
## Known stack suffix:
## record_label field_constraints
## LR(1) items:
table_constraints -> record_label field_constraints . [ TABLEKEYS FROM ]
table_constraints -> record_label field_constraints . COMMA table_constraints [ TABLEKEYS FROM ]
## Transitions:
-- On COMMA shift to state 1053
## Reductions:
-- On TABLEKEYS FROM
--   reduce production table_constraints -> record_label field_constraints

State 1053:
## Known stack suffix:
## record_label field_constraints COMMA
## LR(1) items:
table_constraints -> record_label field_constraints COMMA . table_constraints [ TABLEKEYS FROM ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On table_constraints shift to state 1054
-- On record_label shift to state 1049
-- On field_label shift to state 254
## Reductions:

State 1054:
## Known stack suffix:
## record_label field_constraints COMMA table_constraints
## LR(1) items:
table_constraints -> record_label field_constraints COMMA table_constraints . [ TABLEKEYS FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_constraints -> record_label field_constraints COMMA table_constraints

State 1055:
## Known stack suffix:
## field_constraint
## LR(1) items:
field_constraints -> field_constraint . [ TABLEKEYS FROM COMMA ]
field_constraints -> field_constraint . field_constraints [ TABLEKEYS FROM COMMA ]
## Transitions:
-- On READONLY shift to state 1050
-- On DEFAULT shift to state 1051
-- On field_constraints shift to state 1056
-- On field_constraint shift to state 1055
## Reductions:
-- On TABLEKEYS FROM COMMA
--   reduce production field_constraints -> field_constraint

State 1056:
## Known stack suffix:
## field_constraint field_constraints
## LR(1) items:
field_constraints -> field_constraint field_constraints . [ TABLEKEYS FROM COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraints -> field_constraint field_constraints

State 1057:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints . FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
table_expression -> TABLE exp WITH datatype perhaps_table_constraints . TABLEKEYS exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On TABLEKEYS shift to state 1058
-- On FROM shift to state 1062
## Reductions:

State 1058:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS . exp FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1059
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1059:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp . FROM exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On FROM shift to state 1060
## Reductions:

State 1060:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1061
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1061:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM exp
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_expression -> TABLE exp WITH datatype perhaps_table_constraints TABLEKEYS exp FROM exp

State 1062:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints FROM
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1063
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1063:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints FROM exp
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM exp

State 1064:
## Known stack suffix:
## TRY exp
## LR(1) items:
case_expression -> TRY exp . AS pattern IN exp OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On AS shift to state 1065
## Reductions:

State 1065:
## Known stack suffix:
## TRY exp AS
## LR(1) items:
case_expression -> TRY exp AS . pattern IN exp OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 13
-- On UNDERSCORE shift to state 14
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRUE shift to state 17
-- On STRING shift to state 18
-- On MINUS shift to state 19
-- On LPAREN shift to state 27
-- On LBRACKET shift to state 32
-- On FALSE shift to state 34
-- On CONSTRUCTOR shift to state 35
-- On CHAR shift to state 37
-- On typed_pattern shift to state 38
-- On primary_pattern shift to state 275
-- On pattern shift to state 1066
-- On parenthesized_pattern shift to state 281
-- On negative_pattern shift to state 282
-- On constructor_pattern shift to state 283
-- On constant shift to state 285
-- On cons_pattern shift to state 287
## Reductions:

State 1066:
## Known stack suffix:
## TRY exp AS pattern
## LR(1) items:
case_expression -> TRY exp AS pattern . IN exp OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On IN shift to state 1067
## Reductions:

State 1067:
## Known stack suffix:
## TRY exp AS pattern IN
## LR(1) items:
case_expression -> TRY exp AS pattern IN . exp OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1068
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1068:
## Known stack suffix:
## TRY exp AS pattern IN exp
## LR(1) items:
case_expression -> TRY exp AS pattern IN exp . OTHERWISE exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On OTHERWISE shift to state 1069
## Reductions:

State 1069:
## Known stack suffix:
## TRY exp AS pattern IN exp OTHERWISE
## LR(1) items:
case_expression -> TRY exp AS pattern IN exp OTHERWISE . exp [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 2
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PAGE shift to state 397
-- On OFFER shift to state 400
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 406
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 547
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typed_expression shift to state 614
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On logical_expression shift to state 621
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 606
-- On formlet_expression shift to state 746
-- On exp shift to state 1070
-- On escape_expression shift to state 748
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
## Reductions:

State 1070:
## Known stack suffix:
## TRY exp AS pattern IN exp OTHERWISE exp
## LR(1) items:
case_expression -> TRY exp AS pattern IN exp OTHERWISE exp . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> TRY exp AS pattern IN exp OTHERWISE exp

State 1071:
## Known stack suffix:
## WHERE LPAREN exp
## LR(1) items:
perhaps_where -> WHERE LPAREN exp . RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SET SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RAISE QUERY PREFIXOP PAGE OTHERWISE ORDERBY ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FROM FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA CHAR CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 1072
## Reductions:

State 1072:
## Known stack suffix:
## WHERE LPAREN exp RPAREN
## LR(1) items:
perhaps_where -> WHERE LPAREN exp RPAREN . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRY TRUE TABLEKEYS TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SHALLOWHANDLER SHALLOWHANDLE SET SEMICOLON SELECT RPAREN RETURNING RECEIVE RBRACKET RBRACE RAISE QUERY PREFIXOP PAGE OTHERWISE ORDERBY ON OFFER MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT IF HANDLER HANDLE FUN FROM FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DOOP DELETE_LEFT DELETE DEFAULT DATABASE CONSTRUCTOR COMMA CHAR CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_where -> WHERE LPAREN exp RPAREN

State 1073:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where . SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On SET shift to state 1074
## Reductions:

State 1074:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET . LPAREN labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On LPAREN shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN . labeled_exps RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On VARIABLE shift to state 88
-- On UINTEGER shift to state 89
-- On STRING shift to state 90
-- On CONSTRUCTOR shift to state 91
-- On record_label shift to state 818
-- On labeled_exps shift to state 1076
-- On field_label shift to state 254
## Reductions:

State 1076:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps . RPAREN [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
-- On RPAREN shift to state 1077
## Reductions:

State 1077:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN . [ WITH VBAR VALUES TABLEKEYS SEMICOLON RPAREN RETURNING RBRACKET RBRACE OTHERWISE ON FROM END ELSE DOTDOT DELETE_LEFT DELETE DEFAULT COMMA CASE BY BARRBRACE AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN

State 1078:
## Known stack suffix:
## VAR var perhaps_location EQ exp
## LR(1) items:
tlvarbinding -> VAR var perhaps_location EQ exp . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlvarbinding -> VAR var perhaps_location EQ exp

State 1079:
## Known stack suffix:
## LINFUN
## LR(1) items:
primary_expression -> LINFUN . arg_lists block [ SEMICOLON POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE END DOT COLONCOLON COLON BARBAR BANG AMPAMP ]
tlfunbinding -> LINFUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LPAREN shift to state 407
-- On var shift to state 454
-- On multi_args shift to state 411
-- On arg_lists shift to state 413
## Reductions:

State 1080:
## Known stack suffix:
## FUN
## LR(1) items:
primary_expression -> FUN . arg_lists block [ SEMICOLON POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE END DOT COLONCOLON COLON BARBAR BANG AMPAMP ]
tlfunbinding -> FUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SEMICOLON SELECT RECEIVE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LPAREN shift to state 407
-- On var shift to state 463
-- On multi_args shift to state 411
-- On arg_lists shift to state 548
## Reductions:

State 1081:
## Known stack suffix:
## preamble exp
## LR(1) items:
file -> preamble exp . END [ # ]
## Transitions:
-- On END shift to state 1082
## Reductions:

State 1082:
## Known stack suffix:
## preamble exp END
## LR(1) items:
file -> preamble exp END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble exp END

State 1083:
## Known stack suffix:
## preamble declarations
## LR(1) items:
declarations -> declarations . declaration [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRY TRUE TABLE SWITCH STRING SPAWNWAIT SPAWNCLIENT SPAWNAT SPAWNANGELAT SPAWNANGEL SPAWN SIG SHALLOWHANDLER SHALLOWHANDLE SELECT RECEIVE RAISE QUERY PREFIXOP PREFIX POSTFIX PAGE OPEN OP OFFER MODULE MINUSDOT MINUS LXML LPAREN LINFUN LENSSELECT LENSPUT LENSJOIN LENSGET LENSDROP LENS LEFTTRIANGLE LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF HANDLER HANDLE FUN FORMLET FOR FALSE ESCAPE END DOOP DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
file -> preamble declarations . exp END [ # ]
file -> preamble declarations . END [ # ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 3
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On PAGE shift to state 397
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On OFFER shift to state 400
-- On MODULE shift to state 432
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 1079
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On INSERT shift to state 542
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 1080
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On END shift to state 1084
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 467
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On typed_expression shift to state 614
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 489
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On nofun_declaration shift to state 509
-- On logical_expression shift to state 621
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On fun_declaration shift to state 512
-- On formlet_expression shift to state 746
-- On fixity shift to state 513
-- On exp shift to state 1085
-- On escape_expression shift to state 748
-- On declaration shift to state 520
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
-- On alien_block shift to state 521
## Reductions:

State 1084:
## Known stack suffix:
## preamble declarations END
## LR(1) items:
file -> preamble declarations END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble declarations END

State 1085:
## Known stack suffix:
## preamble declarations exp
## LR(1) items:
file -> preamble declarations exp . END [ # ]
## Transitions:
-- On END shift to state 1086
## Reductions:

State 1086:
## Known stack suffix:
## preamble declarations exp END
## LR(1) items:
file -> preamble declarations exp END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble declarations exp END

State 1087:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 1088:
## Known stack suffix:
##
## LR(1) items:
interactive' -> . interactive [ # ]
## Transitions:
-- On VARIABLE shift to state 2
-- On VAR shift to state 3
-- On UPDATE shift to state 11
-- On UINTEGER shift to state 15
-- On UFLOAT shift to state 16
-- On TYPENAME shift to state 339
-- On TRY shift to state 310
-- On TRUE shift to state 17
-- On TABLE shift to state 311
-- On SWITCH shift to state 312
-- On STRING shift to state 18
-- On SPAWNWAIT shift to state 314
-- On SPAWNCLIENT shift to state 319
-- On SPAWNAT shift to state 321
-- On SPAWNANGELAT shift to state 323
-- On SPAWNANGEL shift to state 325
-- On SPAWN shift to state 327
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SHALLOWHANDLE shift to state 330
-- On SEMICOLON shift to state 1089
-- On SELECT shift to state 332
-- On RECEIVE shift to state 334
-- On RAISE shift to state 385
-- On QUERY shift to state 386
-- On PREFIXOP shift to state 388
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On PAGE shift to state 397
-- On OPEN shift to state 1090
-- On OP shift to state 438
-- On OFFER shift to state 400
-- On MODULE shift to state 1098
-- On MINUSDOT shift to state 390
-- On MINUS shift to state 391
-- On LXML shift to state 392
-- On LPAREN shift to state 402
-- On LINFUN shift to state 1079
-- On LENSSELECT shift to state 528
-- On LENSPUT shift to state 530
-- On LENSJOIN shift to state 531
-- On LENSGET shift to state 532
-- On LENSDROP shift to state 533
-- On LENS shift to state 539
-- On LEFTTRIANGLE shift to state 415
-- On LBRACKET shift to state 540
-- On LBRACE shift to state 315
-- On KEYWORD shift to state 1104
-- On INSERT shift to state 542
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On IF shift to state 543
-- On HANDLER shift to state 461
-- On HANDLE shift to state 545
-- On FUN shift to state 1080
-- On FORMLET shift to state 550
-- On FOR shift to state 553
-- On FALSE shift to state 34
-- On ESCAPE shift to state 561
-- On END shift to state 1116
-- On DOOP shift to state 579
-- On DELETE shift to state 582
-- On DATABASE shift to state 589
-- On CONSTRUCTOR shift to state 597
-- On CHAR shift to state 37
-- On ALIEN shift to state 1117
-- On xml_tree shift to state 398
-- On xml shift to state 571
-- On unary_expression shift to state 599
-- On typedecl shift to state 1127
-- On typed_handler_binding shift to state 485
-- On typed_expression shift to state 614
-- On tlvarbinding shift to state 1129
-- On tlfunbinding shift to state 488
-- On table_expression shift to state 619
-- On spawn_expression shift to state 572
-- On signature shift to state 1131
-- On session_expression shift to state 620
-- On qualified_name shift to state 573
-- On primary_expression shift to state 574
-- On postfix_expression shift to state 601
-- On parenthesized_thing shift to state 590
-- On nofun_declaration shift to state 1134
-- On logical_expression shift to state 621
-- On links_open shift to state 1135
-- On links_module shift to state 1136
-- On lens_expression shift to state 743
-- On iteration_expression shift to state 744
-- On interactive shift to state 1137
-- On infixr_9 shift to state 623
-- On infixr_8 shift to state 624
-- On infixr_7 shift to state 625
-- On infixr_6 shift to state 626
-- On infixr_5 shift to state 627
-- On infixr_4 shift to state 661
-- On infixr_3 shift to state 662
-- On infixr_2 shift to state 663
-- On infixr_1 shift to state 664
-- On infixr_0 shift to state 665
-- On infixl_9 shift to state 666
-- On infixl_8 shift to state 675
-- On infixl_7 shift to state 682
-- On infixl_6 shift to state 689
-- On infixl_5 shift to state 702
-- On infixl_4 shift to state 710
-- On infixl_3 shift to state 717
-- On infixl_2 shift to state 724
-- On infixl_1 shift to state 731
-- On infixl_0 shift to state 745
-- On handler_depth shift to state 894
-- On fun_declarations shift to state 1138
-- On fun_declaration shift to state 1142
-- On formlet_expression shift to state 746
-- On fixity shift to state 1143
-- On exp shift to state 1147
-- On escape_expression shift to state 748
-- On directive shift to state 1149
-- On db_expression shift to state 749
-- On database_expression shift to state 750
-- On constructor_expression shift to state 609
-- On constant shift to state 591
-- On conditional_expression shift to state 751
-- On case_expression shift to state 752
-- On block shift to state 610
-- On atomic_expression shift to state 611
-- On alien_block shift to state 1150
## Reductions:

State 1089:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
interactive -> SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> SEMICOLON

State 1090:
## Known stack suffix:
## OPEN
## LR(1) items:
links_open -> OPEN . qualified_type_name [ # ]
links_open -> OPEN . CONSTRUCTOR [ # ]
## Transitions:
-- On CONSTRUCTOR shift to state 1091
-- On qualified_type_name shift to state 1097
## Reductions:

State 1091:
## Known stack suffix:
## OPEN CONSTRUCTOR
## LR(1) items:
links_open -> OPEN CONSTRUCTOR . [ # ]
qualified_type_name -> CONSTRUCTOR . DOT qualified_type_name_inner [ # ]
## Transitions:
-- On DOT shift to state 1092
## Reductions:

State 1092:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_type_name -> CONSTRUCTOR DOT . qualified_type_name_inner [ # ]
## Transitions:
-- On CONSTRUCTOR shift to state 1093
-- On qualified_type_name_inner shift to state 1096
## Reductions:

State 1093:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR . DOT qualified_type_name_inner [ # ]
qualified_type_name_inner -> CONSTRUCTOR . [ # ]
## Transitions:
-- On DOT shift to state 1094
## Reductions:

State 1094:
## Known stack suffix:
## CONSTRUCTOR DOT
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR DOT . qualified_type_name_inner [ # ]
## Transitions:
-- On CONSTRUCTOR shift to state 1093
-- On qualified_type_name_inner shift to state 1095
## Reductions:

State 1095:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_type_name_inner
## LR(1) items:
qualified_type_name_inner -> CONSTRUCTOR DOT qualified_type_name_inner . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qualified_type_name_inner -> CONSTRUCTOR DOT qualified_type_name_inner

State 1096:
## Known stack suffix:
## CONSTRUCTOR DOT qualified_type_name_inner
## LR(1) items:
qualified_type_name -> CONSTRUCTOR DOT qualified_type_name_inner . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qualified_type_name -> CONSTRUCTOR DOT qualified_type_name_inner

State 1097:
## Known stack suffix:
## OPEN qualified_type_name
## LR(1) items:
links_open -> OPEN qualified_type_name . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production links_open -> OPEN qualified_type_name

State 1098:
## Known stack suffix:
## MODULE
## LR(1) items:
links_module -> MODULE . module_name moduleblock [ # ]
## Transitions:
-- On CONSTRUCTOR shift to state 433
-- On module_name shift to state 1099
## Reductions:

State 1099:
## Known stack suffix:
## MODULE module_name
## LR(1) items:
links_module -> MODULE module_name . moduleblock [ # ]
## Transitions:
-- On LBRACE shift to state 1100
-- On moduleblock shift to state 1103
## Reductions:

State 1100:
## Known stack suffix:
## LBRACE
## LR(1) items:
moduleblock -> LBRACE . declarations RBRACE [ # ]
## Transitions:
-- On VAR shift to state 3
-- On TYPENAME shift to state 339
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On MODULE shift to state 432
-- On LINFUN shift to state 453
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On ALIEN shift to state 467
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On signature shift to state 489
-- On nofun_declaration shift to state 509
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On handler_depth shift to state 494
-- On fun_declaration shift to state 512
-- On fixity shift to state 513
-- On declarations shift to state 1101
-- On declaration shift to state 522
-- On alien_block shift to state 521
## Reductions:

State 1101:
## Known stack suffix:
## LBRACE declarations
## LR(1) items:
declarations -> declarations . declaration [ VAR TYPENAME SIG SHALLOWHANDLER RBRACE PREFIX POSTFIX OPEN OP MODULE LINFUN INFIXR INFIXL INFIX HANDLER FUN ALIEN ]
moduleblock -> LBRACE declarations . RBRACE [ # ]
## Transitions:
-- On VAR shift to state 3
-- On TYPENAME shift to state 339
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On RBRACE shift to state 1102
-- On PREFIX shift to state 436
-- On POSTFIX shift to state 437
-- On OPEN shift to state 429
-- On OP shift to state 438
-- On MODULE shift to state 432
-- On LINFUN shift to state 453
-- On INFIXR shift to state 458
-- On INFIXL shift to state 459
-- On INFIX shift to state 460
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On ALIEN shift to state 467
-- On typedecl shift to state 483
-- On typed_handler_binding shift to state 485
-- On tlvarbinding shift to state 486
-- On tlfunbinding shift to state 488
-- On signature shift to state 489
-- On nofun_declaration shift to state 509
-- On links_open shift to state 510
-- On links_module shift to state 511
-- On handler_depth shift to state 494
-- On fun_declaration shift to state 512
-- On fixity shift to state 513
-- On declaration shift to state 520
-- On alien_block shift to state 521
## Reductions:

State 1102:
## Known stack suffix:
## LBRACE declarations RBRACE
## LR(1) items:
moduleblock -> LBRACE declarations RBRACE . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production moduleblock -> LBRACE declarations RBRACE

State 1103:
## Known stack suffix:
## MODULE module_name moduleblock
## LR(1) items:
links_module -> MODULE module_name moduleblock . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production links_module -> MODULE module_name moduleblock

State 1104:
## Known stack suffix:
## KEYWORD
## LR(1) items:
directive -> KEYWORD . args SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 1105
-- On UINTEGER shift to state 1106
-- On UFLOAT shift to state 1107
-- On TRUE shift to state 1108
-- On STRING shift to state 1109
-- On FALSE shift to state 1110
-- On CONSTRUCTOR shift to state 1111
-- On args shift to state 1112
-- On arg shift to state 1114
## Reductions:
-- On SEMICOLON
--   reduce production args ->

State 1105:
## Known stack suffix:
## VARIABLE
## LR(1) items:
arg -> VARIABLE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> VARIABLE

State 1106:
## Known stack suffix:
## UINTEGER
## LR(1) items:
arg -> UINTEGER . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UINTEGER

State 1107:
## Known stack suffix:
## UFLOAT
## LR(1) items:
arg -> UFLOAT . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UFLOAT

State 1108:
## Known stack suffix:
## TRUE
## LR(1) items:
arg -> TRUE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> TRUE

State 1109:
## Known stack suffix:
## STRING
## LR(1) items:
arg -> STRING . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> STRING

State 1110:
## Known stack suffix:
## FALSE
## LR(1) items:
arg -> FALSE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> FALSE

State 1111:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
arg -> CONSTRUCTOR . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> CONSTRUCTOR

State 1112:
## Known stack suffix:
## KEYWORD args
## LR(1) items:
directive -> KEYWORD args . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1113
## Reductions:

State 1113:
## Known stack suffix:
## KEYWORD args SEMICOLON
## LR(1) items:
directive -> KEYWORD args SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production directive -> KEYWORD args SEMICOLON

State 1114:
## Known stack suffix:
## arg
## LR(1) items:
args -> arg . args [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 1105
-- On UINTEGER shift to state 1106
-- On UFLOAT shift to state 1107
-- On TRUE shift to state 1108
-- On STRING shift to state 1109
-- On FALSE shift to state 1110
-- On CONSTRUCTOR shift to state 1111
-- On args shift to state 1115
-- On arg shift to state 1114
## Reductions:
-- On SEMICOLON
--   reduce production args ->

State 1115:
## Known stack suffix:
## arg args
## LR(1) items:
args -> arg args . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> arg args

State 1116:
## Known stack suffix:
## END
## LR(1) items:
interactive -> END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> END

State 1117:
## Known stack suffix:
## ALIEN
## LR(1) items:
alien_block -> ALIEN . VARIABLE STRING LBRACE alien_datatypes RBRACE [ # ]
nofun_declaration -> ALIEN . VARIABLE STRING var COLON datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 1118
## Reductions:

State 1118:
## Known stack suffix:
## ALIEN VARIABLE
## LR(1) items:
alien_block -> ALIEN VARIABLE . STRING LBRACE alien_datatypes RBRACE [ # ]
nofun_declaration -> ALIEN VARIABLE . STRING var COLON datatype SEMICOLON [ # ]
## Transitions:
-- On STRING shift to state 1119
## Reductions:

State 1119:
## Known stack suffix:
## ALIEN VARIABLE STRING
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING . LBRACE alien_datatypes RBRACE [ # ]
nofun_declaration -> ALIEN VARIABLE STRING . var COLON datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 4
-- On LBRACE shift to state 1120
-- On var shift to state 1123
## Reductions:

State 1120:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE . alien_datatypes RBRACE [ # ]
## Transitions:
-- On VARIABLE shift to state 4
-- On var shift to state 471
-- On alien_datatypes shift to state 1121
-- On alien_datatype shift to state 477
## Reductions:

State 1121:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE alien_datatypes
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes . RBRACE [ # ]
## Transitions:
-- On RBRACE shift to state 1122
## Reductions:

State 1122:
## Known stack suffix:
## ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE
## LR(1) items:
alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production alien_block -> ALIEN VARIABLE STRING LBRACE alien_datatypes RBRACE

State 1123:
## Known stack suffix:
## ALIEN VARIABLE STRING var
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var . COLON datatype SEMICOLON [ # ]
## Transitions:
-- On COLON shift to state 1124
## Reductions:

State 1124:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON . datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On forall_datatype shift to state 148
-- On datatype shift to state 1125
## Reductions:

State 1125:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON datatype
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1126
## Reductions:

State 1126:
## Known stack suffix:
## ALIEN VARIABLE STRING var COLON datatype SEMICOLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> ALIEN VARIABLE STRING var COLON datatype SEMICOLON

State 1127:
## Known stack suffix:
## typedecl
## LR(1) items:
nofun_declaration -> typedecl . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1128
## Reductions:

State 1128:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
nofun_declaration -> typedecl SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> typedecl SEMICOLON

State 1129:
## Known stack suffix:
## tlvarbinding
## LR(1) items:
nofun_declaration -> tlvarbinding . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1130
## Reductions:

State 1130:
## Known stack suffix:
## tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> tlvarbinding SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> tlvarbinding SEMICOLON

State 1131:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
fun_declaration -> signature . typed_handler_binding [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
nofun_declaration -> signature . tlvarbinding SEMICOLON [ # ]
## Transitions:
-- On VAR shift to state 3
-- On SHALLOWHANDLER shift to state 329
-- On OP shift to state 438
-- On LINFUN shift to state 453
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On typed_handler_binding shift to state 490
-- On tlvarbinding shift to state 1132
-- On tlfunbinding shift to state 493
-- On handler_depth shift to state 494
## Reductions:

State 1132:
## Known stack suffix:
## signature tlvarbinding
## LR(1) items:
nofun_declaration -> signature tlvarbinding . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1133
## Reductions:

State 1133:
## Known stack suffix:
## signature tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> signature tlvarbinding SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> signature tlvarbinding SEMICOLON

State 1134:
## Known stack suffix:
## nofun_declaration
## LR(1) items:
interactive -> nofun_declaration . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> nofun_declaration

State 1135:
## Known stack suffix:
## links_open
## LR(1) items:
nofun_declaration -> links_open . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> links_open

State 1136:
## Known stack suffix:
## links_module
## LR(1) items:
nofun_declaration -> links_module . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> links_module

State 1137:
## Known stack suffix:
## interactive
## LR(1) items:
interactive' -> interactive . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interactive

State 1138:
## Known stack suffix:
## fun_declarations
## LR(1) items:
fun_declarations -> fun_declarations . fun_declaration [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
interactive -> fun_declarations . SEMICOLON [ # ]
## Transitions:
-- On SIG shift to state 347
-- On SHALLOWHANDLER shift to state 329
-- On SEMICOLON shift to state 1139
-- On OP shift to state 438
-- On LINFUN shift to state 453
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On typed_handler_binding shift to state 485
-- On tlfunbinding shift to state 488
-- On signature shift to state 1140
-- On handler_depth shift to state 494
-- On fun_declaration shift to state 1141
## Reductions:

State 1139:
## Known stack suffix:
## fun_declarations SEMICOLON
## LR(1) items:
interactive -> fun_declarations SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> fun_declarations SEMICOLON

State 1140:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
fun_declaration -> signature . typed_handler_binding [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
## Transitions:
-- On SHALLOWHANDLER shift to state 329
-- On OP shift to state 438
-- On LINFUN shift to state 453
-- On HANDLER shift to state 461
-- On FUN shift to state 462
-- On typed_handler_binding shift to state 490
-- On tlfunbinding shift to state 493
-- On handler_depth shift to state 494
## Reductions:

State 1141:
## Known stack suffix:
## fun_declarations fun_declaration
## LR(1) items:
fun_declarations -> fun_declarations fun_declaration . [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declarations -> fun_declarations fun_declaration

State 1142:
## Known stack suffix:
## fun_declaration
## LR(1) items:
fun_declarations -> fun_declaration . [ SIG SHALLOWHANDLER SEMICOLON OP LINFUN HANDLER FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declarations -> fun_declaration

State 1143:
## Known stack suffix:
## fixity
## LR(1) items:
nofun_declaration -> fixity . perhaps_uinteger op SEMICOLON [ # ]
## Transitions:
-- On UINTEGER shift to state 514
-- On perhaps_uinteger shift to state 1144
## Reductions:
-- On INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
--   reduce production perhaps_uinteger ->

State 1144:
## Known stack suffix:
## fixity perhaps_uinteger
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger . op SEMICOLON [ # ]
## Transitions:
-- On INFIXR9 shift to state 348
-- On INFIXR8 shift to state 349
-- On INFIXR7 shift to state 350
-- On INFIXR6 shift to state 351
-- On INFIXR5 shift to state 352
-- On INFIXR4 shift to state 353
-- On INFIXR3 shift to state 354
-- On INFIXR2 shift to state 355
-- On INFIXR1 shift to state 356
-- On INFIXR0 shift to state 357
-- On INFIXL9 shift to state 358
-- On INFIXL8 shift to state 359
-- On INFIXL7 shift to state 360
-- On INFIXL6 shift to state 361
-- On INFIXL5 shift to state 362
-- On INFIXL4 shift to state 363
-- On INFIXL3 shift to state 364
-- On INFIXL2 shift to state 365
-- On INFIXL1 shift to state 366
-- On INFIXL0 shift to state 367
-- On INFIX9 shift to state 368
-- On INFIX8 shift to state 369
-- On INFIX7 shift to state 370
-- On INFIX6 shift to state 371
-- On INFIX5 shift to state 372
-- On INFIX4 shift to state 373
-- On INFIX3 shift to state 374
-- On INFIX2 shift to state 375
-- On INFIX1 shift to state 376
-- On INFIX0 shift to state 377
-- On op shift to state 1145
## Reductions:

State 1145:
## Known stack suffix:
## fixity perhaps_uinteger op
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1146
## Reductions:

State 1146:
## Known stack suffix:
## fixity perhaps_uinteger op SEMICOLON
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> fixity perhaps_uinteger op SEMICOLON

State 1147:
## Known stack suffix:
## exp
## LR(1) items:
interactive -> exp . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 1148
## Reductions:

State 1148:
## Known stack suffix:
## exp SEMICOLON
## LR(1) items:
interactive -> exp SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> exp SEMICOLON

State 1149:
## Known stack suffix:
## directive
## LR(1) items:
interactive -> directive . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> directive

State 1150:
## Known stack suffix:
## alien_block
## LR(1) items:
nofun_declaration -> alien_block . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> alien_block

State 1151:
## Known stack suffix:
##
## LR(1) items:
just_datatype' -> . just_datatype [ # ]
## Transitions:
-- On VARIABLE shift to state 40
-- On UNDERSCORE shift to state 41
-- On TILDE shift to state 44
-- On TABLEHANDLE shift to state 42
-- On QUESTION shift to state 45
-- On PERCENTVAR shift to state 46
-- On PERCENT shift to state 47
-- On MU shift to state 48
-- On LPAREN shift to state 51
-- On LBRACKETPLUSBAR shift to state 75
-- On LBRACKETBAR shift to state 97
-- On LBRACKETAMPBAR shift to state 106
-- On LBRACKET shift to state 115
-- On FORALL shift to state 116
-- On END shift to state 128
-- On CONSTRUCTOR shift to state 129
-- On BANG shift to state 133
-- On type_var shift to state 134
-- On straight_arrow shift to state 136
-- On squiggly_arrow shift to state 137
-- On session_datatype shift to state 138
-- On primary_datatype shift to state 139
-- On parenthesized_datatypes shift to state 140
-- On mu_datatype shift to state 146
-- On kinded_type_var shift to state 147
-- On just_datatype shift to state 1152
-- On forall_datatype shift to state 148
-- On datatype shift to state 1153
## Reductions:

State 1152:
## Known stack suffix:
## just_datatype
## LR(1) items:
just_datatype' -> just_datatype . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept just_datatype

State 1153:
## Known stack suffix:
## datatype
## LR(1) items:
just_datatype -> datatype . END [ # ]
## Transitions:
-- On END shift to state 1154
## Reductions:

State 1154:
## Known stack suffix:
## datatype END
## LR(1) items:
just_datatype -> datatype END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production just_datatype -> datatype END

