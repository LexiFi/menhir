File "links.0.8-xmlParser.mly", line 15, characters 14-17:
Warning: the token END is unused.
%{
open Utility
open Value

let ensure_match (start, finish, _) (opening : string) (closing : string) = function
  | result when opening = closing -> result
  | _ -> raise (Sugartypes.ConcreteSyntaxError ("Closing tag '" ^ closing ^ "' does not match start tag '" ^ opening ^ "'.",
                                     (start, finish, None)))

let pos () : Sugartypes.position = Parsing.symbol_start_pos (), Parsing.symbol_end_pos (), None

%}
%start xml
%token <string> CDATA
%token <char> CHAR
%token END
%token <string> ENDTAG
%token EQ
%token IGNORE
%token LCDATA
%token LQUOTE
%token <string> LXML
%token RCDATA
%token RQUOTE
%token RXML
%token SLASHRXML
%token <string> STRING
%token <string> VARIABLE
%type <Value.xmlitem> xml
%%

xml:
  _1 = IGNORE _2 = xml
    {                                                               ( _2 )}
| _1 = xml_tree
    {                                                               ( _1 )}

xmlid:
  _1 = VARIABLE
    {                                                               ( _1 )}

attrs:
  _1 = attr_list
    {                                                               ( _1 )}

attr_list:
  _1 = attr
    {                                                               ( [_1] )}
| _1 = attr_list _2 = attr
    {                                                               ( _2 :: _1 )}

attr:
  _1 = xmlid _2 = EQ _3 = LQUOTE _4 = attr_val _5 = RQUOTE
    {                                                               ( Attr (_1, _4) )}
| _1 = xmlid _2 = EQ _3 = LQUOTE _4 = RQUOTE
    {                                                               ( Attr (_1, "") )}

attr_val:
  _1 = STRING
    {                                                               ( _1 )}

xml_tree:
  _1 = LXML _2 = SLASHRXML
    {                                                               ( Node (_1, []) )}
| _1 = LXML _2 = RXML _3 = ENDTAG
    {                                                               ( ensure_match (pos()) _1 _3 (Node (_1, [])) )}
| _1 = LXML _2 = RXML _3 = xml_contents_list _4 = ENDTAG
    {                                                               ( ensure_match (pos()) _1 _4 (Node (_1, _3)) )}
| _1 = LXML _2 = attrs _3 = RXML _4 = ENDTAG
    {                                                               ( ensure_match (pos()) _1 _4 (Node (_1, _2)) )}
| _1 = LXML _2 = attrs _3 = SLASHRXML
    {                                                               ( Node (_1, _2) )}
| _1 = LXML _2 = attrs _3 = RXML _4 = xml_contents_list _5 = ENDTAG
    {                                                               ( ensure_match (pos()) _1 _5 (Node (_1, _2 @ _4)) )}

xml_contents_list:
  _1 = IGNORE
    {                                                               ( [] )}
| _1 = IGNORE _2 = xml_contents_list
    {                                                               ( _2 )}
| _1 = xml_contents
    {                                                               ( [_1] )}
| _1 = xml_contents _2 = xml_contents_list
    {                                                               ( _1 :: _2 )}

xml_contents:
  _1 = xml_tree
    {                                                               ( _1 )}
| _1 = cdata
    {                                                               ( Text _1 )}

cdata:
  _1 = CDATA
    {                                                               ( _1 )}
| _1 = LCDATA _2 = chars _3 = RCDATA
    {                                                               ( implode _2 )}

chars:
  
    {                                                               ( [] )}
| _1 = CHAR _2 = chars
    {                                                               ( _1 :: _2 )}

%%
