State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On INCLUDE shift to state 1
-- On preamble_declaration shift to state 3
-- On preamble shift to state 5
-- On file shift to state 797
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production preamble ->

State 1:
## Known stack suffix:
## INCLUDE
## LR(1) items:
preamble_declaration -> INCLUDE . STRING [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX INCLUDE IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On STRING shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## INCLUDE STRING
## LR(1) items:
preamble_declaration -> INCLUDE STRING . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX INCLUDE IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production preamble_declaration -> INCLUDE STRING

State 3:
## Known stack suffix:
## preamble_declaration
## LR(1) items:
preamble -> preamble_declaration . preamble [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On INCLUDE shift to state 1
-- On preamble_declaration shift to state 3
-- On preamble shift to state 4
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN
--   reduce production preamble ->

State 4:
## Known stack suffix:
## preamble_declaration preamble
## LR(1) items:
preamble -> preamble_declaration preamble . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production preamble -> preamble_declaration preamble

State 5:
## Known stack suffix:
## preamble
## LR(1) items:
file -> preamble . declarations exp END [ # ]
file -> preamble . exp END [ # ]
file -> preamble . declarations END [ # ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 7
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SIG shift to state 734
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PREFIX shift to state 741
-- On POSTFIX shift to state 742
-- On PAGE shift to state 308
-- On OP shift to state 743
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On INFIXR shift to state 758
-- On INFIXL shift to state 759
-- On INFIX shift to state 760
-- On IF shift to state 318
-- On FUN shift to state 761
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On ALIEN shift to state 766
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 772
-- On typed_expression shift to state 378
-- On tlvarbinding shift to state 774
-- On tlfunbinding shift to state 776
-- On table_expression shift to state 383
-- On signature shift to state 777
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On nofun_declaration shift to state 782
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On fun_declaration shift to state 783
-- On formlet_expression shift to state 506
-- On fixity shift to state 784
-- On exp shift to state 789
-- On escape_expression shift to state 508
-- On declarations shift to state 791
-- On declaration shift to state 796
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 6:
## Known stack suffix:
## VARIABLE
## LR(1) items:
atomic_expression -> VARIABLE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> VARIABLE

State 7:
## Known stack suffix:
## VAR
## LR(1) items:
tlvarbinding -> VAR . var perhaps_location EQ exp [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 9
## Reductions:

State 8:
## Known stack suffix:
## VARIABLE
## LR(1) items:
var -> VARIABLE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> VARIABLE

State 9:
## Known stack suffix:
## VAR var
## LR(1) items:
tlvarbinding -> VAR var . perhaps_location EQ exp [ SEMICOLON ]
## Transitions:
-- On SERVER shift to state 10
-- On NATIVE shift to state 11
-- On CLIENT shift to state 12
-- On perhaps_location shift to state 13
## Reductions:
-- On EQ
--   reduce production perhaps_location ->

State 10:
## Known stack suffix:
## SERVER
## LR(1) items:
perhaps_location -> SERVER . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> SERVER

State 11:
## Known stack suffix:
## NATIVE
## LR(1) items:
perhaps_location -> NATIVE . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> NATIVE

State 12:
## Known stack suffix:
## CLIENT
## LR(1) items:
perhaps_location -> CLIENT . [ LBRACE EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_location -> CLIENT

State 13:
## Known stack suffix:
## VAR var perhaps_location
## LR(1) items:
tlvarbinding -> VAR var perhaps_location . EQ exp [ SEMICOLON ]
## Transitions:
-- On EQ shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## VAR var perhaps_location EQ
## LR(1) items:
tlvarbinding -> VAR var perhaps_location EQ . exp [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 733
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 15:
## Known stack suffix:
## UPDATE
## LR(1) items:
db_expression -> UPDATE . LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## UPDATE LPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN . table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On table_generator shift to state 270
-- On primary_pattern shift to state 239
-- On pattern shift to state 354
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 17:
## Known stack suffix:
## VARIABLE
## LR(1) items:
primary_pattern -> VARIABLE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> VARIABLE

State 18:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
primary_pattern -> UNDERSCORE . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> UNDERSCORE

State 19:
## Known stack suffix:
## UINTEGER
## LR(1) items:
constant -> UINTEGER . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UINTEGER

State 20:
## Known stack suffix:
## UFLOAT
## LR(1) items:
constant -> UFLOAT . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> UFLOAT

State 21:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TRUE

State 22:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 23:
## Known stack suffix:
## MINUS
## LR(1) items:
negative_pattern -> MINUS . CONSTRUCTOR [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
negative_pattern -> MINUS . LPAREN constructors RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On LPAREN shift to state 24
-- On CONSTRUCTOR shift to state 30
## Reductions:

State 24:
## Known stack suffix:
## MINUS LPAREN
## LR(1) items:
negative_pattern -> MINUS LPAREN . constructors RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On CONSTRUCTOR shift to state 25
-- On constructors shift to state 28
## Reductions:

State 25:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructors -> CONSTRUCTOR . [ RPAREN ]
constructors -> CONSTRUCTOR . COMMA constructors [ RPAREN ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:
-- On RPAREN
--   reduce production constructors -> CONSTRUCTOR

State 26:
## Known stack suffix:
## CONSTRUCTOR COMMA
## LR(1) items:
constructors -> CONSTRUCTOR COMMA . constructors [ RPAREN ]
## Transitions:
-- On CONSTRUCTOR shift to state 25
-- On constructors shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## CONSTRUCTOR COMMA constructors
## LR(1) items:
constructors -> CONSTRUCTOR COMMA constructors . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructors -> CONSTRUCTOR COMMA constructors

State 28:
## Known stack suffix:
## MINUS LPAREN constructors
## LR(1) items:
negative_pattern -> MINUS LPAREN constructors . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## MINUS LPAREN constructors RPAREN
## LR(1) items:
negative_pattern -> MINUS LPAREN constructors RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> MINUS LPAREN constructors RPAREN

State 30:
## Known stack suffix:
## MINUS CONSTRUCTOR
## LR(1) items:
negative_pattern -> MINUS CONSTRUCTOR . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> MINUS CONSTRUCTOR

State 31:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . pattern COMMA patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . labeled_patterns VBAR pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN . labeled_patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 32
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 33
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 34
-- On RPAREN shift to state 35
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 254
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On record_label shift to state 255
-- On primary_pattern shift to state 239
-- On pattern shift to state 260
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On labeled_patterns shift to state 265
-- On field_label shift to state 224
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 32:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ EQ ]
primary_pattern -> VARIABLE . [ RPAREN COMMA COLONCOLON COLON AS ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production field_label -> VARIABLE
-- On RPAREN COMMA COLONCOLON COLON AS
--   reduce production primary_pattern -> VARIABLE

State 33:
## Known stack suffix:
## UINTEGER
## LR(1) items:
constant -> UINTEGER . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AS AMPAMP ]
field_label -> UINTEGER . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AS AMPAMP
--   reduce production constant -> UINTEGER
-- On EQ
--   reduce production field_label -> UINTEGER

State 34:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AS AMPAMP ]
field_label -> STRING . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AS AMPAMP
--   reduce production constant -> STRING
-- On EQ
--   reduce production field_label -> STRING

State 35:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN RPAREN

State 36:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_pattern -> LBRACKET . RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
primary_pattern -> LBRACKET . patterns RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On RBRACKET shift to state 37
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On patterns shift to state 240
-- On pattern shift to state 242
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 37:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
primary_pattern -> LBRACKET RBRACKET . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> LBRACKET RBRACKET

State 38:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FALSE

State 39:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_pattern -> CONSTRUCTOR . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
constructor_pattern -> CONSTRUCTOR . parenthesized_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On LPAREN shift to state 31
-- On parenthesized_pattern shift to state 40
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS
--   reduce production constructor_pattern -> CONSTRUCTOR

State 40:
## Known stack suffix:
## CONSTRUCTOR parenthesized_pattern
## LR(1) items:
constructor_pattern -> CONSTRUCTOR parenthesized_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_pattern -> CONSTRUCTOR parenthesized_pattern

State 41:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 42:
## Known stack suffix:
## typed_pattern
## LR(1) items:
pattern -> typed_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT ]
pattern -> typed_pattern . COLON primary_datatype [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT ]
## Transitions:
-- On COLON shift to state 43
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT
--   reduce production pattern -> typed_pattern

State 43:
## Known stack suffix:
## typed_pattern COLON
## LR(1) items:
pattern -> typed_pattern COLON . primary_datatype [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On primary_datatype shift to state 238
-- On parenthesized_datatypes shift to state 230
-- On kinded_type_var shift to state 117
## Reductions:

State 44:
## Known stack suffix:
## VARIABLE
## LR(1) items:
type_var -> VARIABLE . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BASE BARRBRACKET BARRBRACE ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> VARIABLE

State 45:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
type_var -> UNDERSCORE . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BASE BARRBRACKET BARRBRACE ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> UNDERSCORE

State 46:
## Known stack suffix:
## TABLEHANDLE
## LR(1) items:
primary_datatype -> TABLEHANDLE . LPAREN datatype COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## TABLEHANDLE LPAREN
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN . datatype COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 232
## Reductions:

State 48:
## Known stack suffix:
## QUESTIONVAR
## LR(1) items:
type_var -> QUESTIONVAR . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BASE BARRBRACKET BARRBRACE ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> QUESTIONVAR

State 49:
## Known stack suffix:
## QUESTION
## LR(1) items:
type_var -> QUESTION . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BASE BARRBRACKET BARRBRACE ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_var -> QUESTION

State 50:
## Known stack suffix:
## MU
## LR(1) items:
mu_datatype -> MU . VARIABLE DOT mu_datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## MU VARIABLE
## LR(1) items:
mu_datatype -> MU VARIABLE . DOT mu_datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On DOT shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## MU VARIABLE DOT
## LR(1) items:
mu_datatype -> MU VARIABLE DOT . mu_datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 230
-- On mu_datatype shift to state 231
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
## Reductions:

State 53:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN . RPAREN [ WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
parenthesized_datatypes -> LPAREN . datatypes RPAREN [ WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
primary_datatype -> LPAREN . rfields RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VBAR shift to state 54
-- On VARIABLE shift to state 211
-- On UNDERSCORE shift to state 45
-- On UINTEGER shift to state 171
-- On TABLEHANDLE shift to state 46
-- On STRING shift to state 172
-- On RPAREN shift to state 212
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 213
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On rfields shift to state 214
-- On rfield shift to state 216
-- On record_label shift to state 222
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On field_label shift to state 224
-- On datatypes shift to state 225
-- On datatype shift to state 227
## Reductions:

State 54:
## Known stack suffix:
## VBAR
## LR(1) items:
rfields -> VBAR . row_var [ RPAREN ]
rfields -> VBAR . kinded_row_var [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On row_var shift to state 209
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 210
## Reductions:

State 55:
## Known stack suffix:
## VARIABLE
## LR(1) items:
nonrec_row_var -> VARIABLE . [ SQUIGRARROW RPAREN RBRACE RARROW BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> VARIABLE

State 56:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
nonrec_row_var -> UNDERSCORE . [ SQUIGRARROW RPAREN RBRACE RARROW BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> UNDERSCORE

State 57:
## Known stack suffix:
## QUESTIONVAR
## LR(1) items:
nonrec_row_var -> QUESTIONVAR . [ SQUIGRARROW RPAREN RBRACE RARROW BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> QUESTIONVAR

State 58:
## Known stack suffix:
## QUESTION
## LR(1) items:
nonrec_row_var -> QUESTION . [ SQUIGRARROW RPAREN RBRACE RARROW BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonrec_row_var -> QUESTION

State 59:
## Known stack suffix:
## LPAREN
## LR(1) items:
row_var -> LPAREN . MU VARIABLE DOT vfields RPAREN [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
-- On MU shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LPAREN MU
## LR(1) items:
row_var -> LPAREN MU . VARIABLE DOT vfields RPAREN [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
-- On VARIABLE shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## LPAREN MU VARIABLE
## LR(1) items:
row_var -> LPAREN MU VARIABLE . DOT vfields RPAREN [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
-- On DOT shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## LPAREN MU VARIABLE DOT
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT . vfields RPAREN [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On CONSTRUCTOR shift to state 63
-- On vfields shift to state 207
-- On vfield shift to state 81
-- On row_var shift to state 84
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 89
## Reductions:

State 63:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
vfield -> CONSTRUCTOR . [ VBAR RPAREN BARRBRACKET ]
vfield -> CONSTRUCTOR . fieldspec [ VBAR RPAREN BARRBRACKET ]
## Transitions:
-- On MINUS shift to state 64
-- On LBRACE shift to state 65
-- On COLON shift to state 150
-- On fieldspec shift to state 206
## Reductions:
-- On VBAR RPAREN BARRBRACKET
--   reduce production vfield -> CONSTRUCTOR

State 64:
## Known stack suffix:
## MINUS
## LR(1) items:
fieldspec -> MINUS . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> MINUS

State 65:
## Known stack suffix:
## LBRACE
## LR(1) items:
fieldspec -> LBRACE . COLON datatype RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
fieldspec -> LBRACE . MINUS RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
fieldspec -> LBRACE . VARIABLE RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
fieldspec -> LBRACE . QUESTIONVAR RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
fieldspec -> LBRACE . UNDERSCORE RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
fieldspec -> LBRACE . QUESTION RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 66
-- On UNDERSCORE shift to state 68
-- On QUESTIONVAR shift to state 70
-- On QUESTION shift to state 72
-- On MINUS shift to state 74
-- On COLON shift to state 76
## Reductions:

State 66:
## Known stack suffix:
## LBRACE VARIABLE
## LR(1) items:
fieldspec -> LBRACE VARIABLE . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LBRACE VARIABLE RBRACE
## LR(1) items:
fieldspec -> LBRACE VARIABLE RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE VARIABLE RBRACE

State 68:
## Known stack suffix:
## LBRACE UNDERSCORE
## LR(1) items:
fieldspec -> LBRACE UNDERSCORE . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LBRACE UNDERSCORE RBRACE
## LR(1) items:
fieldspec -> LBRACE UNDERSCORE RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE UNDERSCORE RBRACE

State 70:
## Known stack suffix:
## LBRACE QUESTIONVAR
## LR(1) items:
fieldspec -> LBRACE QUESTIONVAR . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LBRACE QUESTIONVAR RBRACE
## LR(1) items:
fieldspec -> LBRACE QUESTIONVAR RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE QUESTIONVAR RBRACE

State 72:
## Known stack suffix:
## LBRACE QUESTION
## LR(1) items:
fieldspec -> LBRACE QUESTION . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LBRACE QUESTION RBRACE
## LR(1) items:
fieldspec -> LBRACE QUESTION RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE QUESTION RBRACE

State 74:
## Known stack suffix:
## LBRACE MINUS
## LR(1) items:
fieldspec -> LBRACE MINUS . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LBRACE MINUS RBRACE
## LR(1) items:
fieldspec -> LBRACE MINUS RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE MINUS RBRACE

State 76:
## Known stack suffix:
## LBRACE COLON
## LR(1) items:
fieldspec -> LBRACE COLON . datatype RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 204
## Reductions:

State 77:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
primary_datatype -> LBRACKETBAR . vrow BARRBRACKET [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On CONSTRUCTOR shift to state 63
-- On vrow shift to state 78
-- On vfields shift to state 80
-- On vfield shift to state 81
-- On row_var shift to state 84
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 89
## Reductions:
-- On BARRBRACKET
--   reduce production vrow ->

State 78:
## Known stack suffix:
## LBRACKETBAR vrow
## LR(1) items:
primary_datatype -> LBRACKETBAR vrow . BARRBRACKET [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On BARRBRACKET shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LBRACKETBAR vrow BARRBRACKET
## LR(1) items:
primary_datatype -> LBRACKETBAR vrow BARRBRACKET . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LBRACKETBAR vrow BARRBRACKET

State 80:
## Known stack suffix:
## vfields
## LR(1) items:
vrow -> vfields . [ BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vrow -> vfields

State 81:
## Known stack suffix:
## vfield
## LR(1) items:
vfields -> vfield . [ RPAREN BARRBRACKET ]
vfields -> vfield . VBAR vfields [ RPAREN BARRBRACKET ]
## Transitions:
-- On VBAR shift to state 82
## Reductions:
-- On RPAREN BARRBRACKET
--   reduce production vfields -> vfield

State 82:
## Known stack suffix:
## vfield VBAR
## LR(1) items:
vfields -> vfield VBAR . vfields [ RPAREN BARRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On CONSTRUCTOR shift to state 63
-- On vfields shift to state 83
-- On vfield shift to state 81
-- On row_var shift to state 84
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 89
## Reductions:

State 83:
## Known stack suffix:
## vfield VBAR vfields
## LR(1) items:
vfields -> vfield VBAR vfields . [ RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfields -> vfield VBAR vfields

State 84:
## Known stack suffix:
## row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN BARRBRACKET ]
vfields -> row_var . [ RPAREN BARRBRACKET ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 87
## Reductions:
-- On RPAREN BARRBRACKET
--   reduce production vfields -> row_var

State 85:
## Known stack suffix:
## BASE
## LR(1) items:
subkind -> BASE . [ WITH WHERE VBAR VAR VALUES SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subkind -> BASE

State 86:
## Known stack suffix:
## ANY
## LR(1) items:
subkind -> ANY . [ WITH WHERE VBAR VAR VALUES SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subkind -> ANY

State 87:
## Known stack suffix:
## row_var subkind
## LR(1) items:
kinded_row_var -> row_var subkind . [ RPAREN RBRACE BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_row_var -> row_var subkind

State 88:
## Known stack suffix:
## nonrec_row_var
## LR(1) items:
row_var -> nonrec_row_var . [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_var -> nonrec_row_var

State 89:
## Known stack suffix:
## kinded_row_var
## LR(1) items:
vfields -> kinded_row_var . [ RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfields -> kinded_row_var

State 90:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_datatype -> LBRACKET . datatype RBRACKET [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 202
## Reductions:

State 91:
## Known stack suffix:
## FORALL
## LR(1) items:
forall_datatype -> FORALL . varlist DOT datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 92
-- On varlist shift to state 99
-- On typearg shift to state 199
## Reductions:

State 92:
## Known stack suffix:
## VARIABLE
## LR(1) items:
typearg -> VARIABLE . [ RPAREN DOT COMMA ]
typearg -> VARIABLE . kind [ RPAREN DOT COMMA ]
## Transitions:
-- On TYPE shift to state 93
-- On ROW shift to state 94
-- On PRESENCE shift to state 95
-- On BASETYPE shift to state 96
-- On BASEROW shift to state 97
-- On kind shift to state 98
## Reductions:
-- On RPAREN DOT COMMA
--   reduce production typearg -> VARIABLE

State 93:
## Known stack suffix:
## TYPE
## LR(1) items:
kind -> TYPE . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> TYPE

State 94:
## Known stack suffix:
## ROW
## LR(1) items:
kind -> ROW . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> ROW

State 95:
## Known stack suffix:
## PRESENCE
## LR(1) items:
kind -> PRESENCE . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> PRESENCE

State 96:
## Known stack suffix:
## BASETYPE
## LR(1) items:
kind -> BASETYPE . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> BASETYPE

State 97:
## Known stack suffix:
## BASEROW
## LR(1) items:
kind -> BASEROW . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> BASEROW

State 98:
## Known stack suffix:
## VARIABLE kind
## LR(1) items:
typearg -> VARIABLE kind . [ RPAREN DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typearg -> VARIABLE kind

State 99:
## Known stack suffix:
## FORALL varlist
## LR(1) items:
forall_datatype -> FORALL varlist . DOT datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On DOT shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## FORALL varlist DOT
## LR(1) items:
forall_datatype -> FORALL varlist DOT . datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 198
## Reductions:

State 101:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
primary_datatype -> CONSTRUCTOR . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
primary_datatype -> CONSTRUCTOR . LPAREN type_arg_list RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 102
## Reductions:
-- On WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
--   reduce production primary_datatype -> CONSTRUCTOR

State 102:
## Known stack suffix:
## CONSTRUCTOR LPAREN
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN . type_arg_list RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TYPE shift to state 103
-- On TABLEHANDLE shift to state 46
-- On ROW shift to state 165
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On PRESENCE shift to state 185
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On LBRACE shift to state 189
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On type_arg_list shift to state 192
-- On type_arg shift to state 194
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 197
## Reductions:

State 103:
## Known stack suffix:
## TYPE
## LR(1) items:
type_arg -> TYPE . LPAREN datatype RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## TYPE LPAREN
## LR(1) items:
type_arg -> TYPE LPAREN . datatype RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 163
## Reductions:

State 105:
## Known stack suffix:
## type_var
## LR(1) items:
kinded_type_var -> type_var . subkind [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
primary_datatype -> type_var . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 106
## Reductions:
-- On WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
--   reduce production primary_datatype -> type_var

State 106:
## Known stack suffix:
## type_var subkind
## LR(1) items:
kinded_type_var -> type_var subkind . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_type_var -> type_var subkind

State 107:
## Known stack suffix:
## straight_arrow
## LR(1) items:
datatype -> straight_arrow . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> straight_arrow

State 108:
## Known stack suffix:
## squiggly_arrow
## LR(1) items:
datatype -> squiggly_arrow . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> squiggly_arrow

State 109:
## Known stack suffix:
## primary_datatype
## LR(1) items:
forall_datatype -> primary_datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall_datatype -> primary_datatype

State 110:
## Known stack suffix:
## parenthesized_datatypes
## LR(1) items:
primary_datatype -> parenthesized_datatypes . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
squiggly_arrow -> parenthesized_datatypes . squig_arrow_prefix SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
squiggly_arrow -> parenthesized_datatypes . SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
straight_arrow -> parenthesized_datatypes . straight_arrow_prefix RARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
straight_arrow -> parenthesized_datatypes . RARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On TILDE shift to state 111
-- On SQUIGRARROW shift to state 115
-- On RARROW shift to state 120
-- On MINUS shift to state 122
-- On LBRACE shift to state 125
-- On straight_arrow_prefix shift to state 155
-- On squig_arrow_prefix shift to state 158
-- On hear_arrow_prefix shift to state 161
-- On arrow_prefix shift to state 162
## Reductions:
-- On WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
--   reduce production primary_datatype -> parenthesized_datatypes

State 111:
## Known stack suffix:
## TILDE
## LR(1) items:
squig_arrow_prefix -> TILDE . nonrec_row_var [ SQUIGRARROW ]
squig_arrow_prefix -> TILDE . kinded_nonrec_row_var [ SQUIGRARROW ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On nonrec_row_var shift to state 112
-- On kinded_nonrec_row_var shift to state 114
## Reductions:

State 112:
## Known stack suffix:
## TILDE nonrec_row_var
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var . subkind [ SQUIGRARROW ]
squig_arrow_prefix -> TILDE nonrec_row_var . [ SQUIGRARROW ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 113
## Reductions:
-- On SQUIGRARROW
--   reduce production squig_arrow_prefix -> TILDE nonrec_row_var

State 113:
## Known stack suffix:
## nonrec_row_var subkind
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var subkind . [ SQUIGRARROW RBRACE RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kinded_nonrec_row_var -> nonrec_row_var subkind

State 114:
## Known stack suffix:
## TILDE kinded_nonrec_row_var
## LR(1) items:
squig_arrow_prefix -> TILDE kinded_nonrec_row_var . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squig_arrow_prefix -> TILDE kinded_nonrec_row_var

State 115:
## Known stack suffix:
## parenthesized_datatypes SQUIGRARROW
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGRARROW . datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 119
## Reductions:

State 116:
## Known stack suffix:
## mu_datatype
## LR(1) items:
datatype -> mu_datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatype -> mu_datatype

State 117:
## Known stack suffix:
## kinded_type_var
## LR(1) items:
primary_datatype -> kinded_type_var . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> kinded_type_var

State 118:
## Known stack suffix:
## forall_datatype
## LR(1) items:
mu_datatype -> forall_datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mu_datatype -> forall_datatype

State 119:
## Known stack suffix:
## parenthesized_datatypes SQUIGRARROW datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes SQUIGRARROW datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes SQUIGRARROW datatype

State 120:
## Known stack suffix:
## parenthesized_datatypes RARROW
## LR(1) items:
straight_arrow -> parenthesized_datatypes RARROW . datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## parenthesized_datatypes RARROW datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes RARROW datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes RARROW datatype

State 122:
## Known stack suffix:
## MINUS
## LR(1) items:
straight_arrow_prefix -> MINUS . nonrec_row_var [ RARROW ]
straight_arrow_prefix -> MINUS . kinded_nonrec_row_var [ RARROW ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On nonrec_row_var shift to state 123
-- On kinded_nonrec_row_var shift to state 124
## Reductions:

State 123:
## Known stack suffix:
## MINUS nonrec_row_var
## LR(1) items:
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RARROW ]
straight_arrow_prefix -> MINUS nonrec_row_var . [ RARROW ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 113
## Reductions:
-- On RARROW
--   reduce production straight_arrow_prefix -> MINUS nonrec_row_var

State 124:
## Known stack suffix:
## MINUS kinded_nonrec_row_var
## LR(1) items:
straight_arrow_prefix -> MINUS kinded_nonrec_row_var . [ RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow_prefix -> MINUS kinded_nonrec_row_var

State 125:
## Known stack suffix:
## LBRACE
## LR(1) items:
arrow_prefix -> LBRACE . RBRACE [ SQUIGRARROW RARROW ]
arrow_prefix -> LBRACE . efields RBRACE [ SQUIGRARROW RARROW ]
hear_arrow_prefix -> LBRACE . COLON datatype COMMA efields RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE . COLON datatype RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE . COLON datatype VBAR nonrec_row_var RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE . COLON datatype VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW ]
## Transitions:
-- On VBAR shift to state 126
-- On VARIABLE shift to state 129
-- On RBRACE shift to state 130
-- On CONSTRUCTOR shift to state 131
-- On COLON shift to state 132
-- On efields shift to state 153
-- On efield shift to state 143
-- On effect_label shift to state 149
## Reductions:

State 126:
## Known stack suffix:
## VBAR
## LR(1) items:
efields -> VBAR . nonrec_row_var [ RBRACE ]
efields -> VBAR . kinded_nonrec_row_var [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On nonrec_row_var shift to state 127
-- On kinded_nonrec_row_var shift to state 128
## Reductions:

State 127:
## Known stack suffix:
## VBAR nonrec_row_var
## LR(1) items:
efields -> VBAR nonrec_row_var . [ RBRACE ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 113
## Reductions:
-- On RBRACE
--   reduce production efields -> VBAR nonrec_row_var

State 128:
## Known stack suffix:
## VBAR kinded_nonrec_row_var
## LR(1) items:
efields -> VBAR kinded_nonrec_row_var . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> VBAR kinded_nonrec_row_var

State 129:
## Known stack suffix:
## VARIABLE
## LR(1) items:
effect_label -> VARIABLE . [ VBAR RBRACE MINUS LBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_label -> VARIABLE

State 130:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
arrow_prefix -> LBRACE RBRACE . [ SQUIGRARROW RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_prefix -> LBRACE RBRACE

State 131:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
effect_label -> CONSTRUCTOR . [ VBAR RBRACE MINUS LBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production effect_label -> CONSTRUCTOR

State 132:
## Known stack suffix:
## LBRACE COLON
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON . datatype COMMA efields RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON . datatype RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON . datatype VBAR nonrec_row_var RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON . datatype VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## LBRACE COLON datatype
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype . COMMA efields RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON datatype . RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON datatype . VBAR nonrec_row_var RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON datatype . VBAR kinded_nonrec_row_var RBRACE [ SQUIGRARROW ]
## Transitions:
-- On VBAR shift to state 134
-- On RBRACE shift to state 139
-- On COMMA shift to state 140
## Reductions:

State 134:
## Known stack suffix:
## LBRACE COLON datatype VBAR
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR . nonrec_row_var RBRACE [ SQUIGRARROW ]
hear_arrow_prefix -> LBRACE COLON datatype VBAR . kinded_nonrec_row_var RBRACE [ SQUIGRARROW ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On nonrec_row_var shift to state 135
-- On kinded_nonrec_row_var shift to state 137
## Reductions:

State 135:
## Known stack suffix:
## LBRACE COLON datatype VBAR nonrec_row_var
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var . RBRACE [ SQUIGRARROW ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On RBRACE shift to state 136
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 113
## Reductions:

State 136:
## Known stack suffix:
## LBRACE COLON datatype VBAR nonrec_row_var RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var RBRACE . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype VBAR nonrec_row_var RBRACE

State 137:
## Known stack suffix:
## LBRACE COLON datatype VBAR kinded_nonrec_row_var
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var . RBRACE [ SQUIGRARROW ]
## Transitions:
-- On RBRACE shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype VBAR kinded_nonrec_row_var RBRACE

State 139:
## Known stack suffix:
## LBRACE COLON datatype RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype RBRACE . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype RBRACE

State 140:
## Known stack suffix:
## LBRACE COLON datatype COMMA
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA . efields RBRACE [ SQUIGRARROW ]
## Transitions:
-- On VBAR shift to state 126
-- On VARIABLE shift to state 129
-- On CONSTRUCTOR shift to state 131
-- On efields shift to state 141
-- On efield shift to state 143
-- On effect_label shift to state 149
## Reductions:

State 141:
## Known stack suffix:
## LBRACE COLON datatype COMMA efields
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA efields . RBRACE [ SQUIGRARROW ]
## Transitions:
-- On RBRACE shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## LBRACE COLON datatype COMMA efields RBRACE
## LR(1) items:
hear_arrow_prefix -> LBRACE COLON datatype COMMA efields RBRACE . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hear_arrow_prefix -> LBRACE COLON datatype COMMA efields RBRACE

State 143:
## Known stack suffix:
## efield
## LR(1) items:
efields -> efield . [ RBRACE ]
efields -> efield . VBAR nonrec_row_var [ RBRACE ]
efields -> efield . VBAR kinded_nonrec_row_var [ RBRACE ]
efields -> efield . COMMA efields [ RBRACE ]
## Transitions:
-- On VBAR shift to state 144
-- On COMMA shift to state 147
## Reductions:
-- On RBRACE
--   reduce production efields -> efield

State 144:
## Known stack suffix:
## efield VBAR
## LR(1) items:
efields -> efield VBAR . nonrec_row_var [ RBRACE ]
efields -> efield VBAR . kinded_nonrec_row_var [ RBRACE ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On nonrec_row_var shift to state 145
-- On kinded_nonrec_row_var shift to state 146
## Reductions:

State 145:
## Known stack suffix:
## efield VBAR nonrec_row_var
## LR(1) items:
efields -> efield VBAR nonrec_row_var . [ RBRACE ]
kinded_nonrec_row_var -> nonrec_row_var . subkind [ RBRACE ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 113
## Reductions:
-- On RBRACE
--   reduce production efields -> efield VBAR nonrec_row_var

State 146:
## Known stack suffix:
## efield VBAR kinded_nonrec_row_var
## LR(1) items:
efields -> efield VBAR kinded_nonrec_row_var . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> efield VBAR kinded_nonrec_row_var

State 147:
## Known stack suffix:
## efield COMMA
## LR(1) items:
efields -> efield COMMA . efields [ RBRACE ]
## Transitions:
-- On VBAR shift to state 126
-- On VARIABLE shift to state 129
-- On CONSTRUCTOR shift to state 131
-- On efields shift to state 148
-- On efield shift to state 143
-- On effect_label shift to state 149
## Reductions:

State 148:
## Known stack suffix:
## efield COMMA efields
## LR(1) items:
efields -> efield COMMA efields . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efields -> efield COMMA efields

State 149:
## Known stack suffix:
## effect_label
## LR(1) items:
efield -> effect_label . [ VBAR RBRACE COMMA ]
efield -> effect_label . fieldspec [ VBAR RBRACE COMMA ]
## Transitions:
-- On MINUS shift to state 64
-- On LBRACE shift to state 65
-- On COLON shift to state 150
-- On fieldspec shift to state 152
## Reductions:
-- On VBAR RBRACE COMMA
--   reduce production efield -> effect_label

State 150:
## Known stack suffix:
## COLON
## LR(1) items:
fieldspec -> COLON . datatype [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## COLON datatype
## LR(1) items:
fieldspec -> COLON datatype . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> COLON datatype

State 152:
## Known stack suffix:
## effect_label fieldspec
## LR(1) items:
efield -> effect_label fieldspec . [ VBAR RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production efield -> effect_label fieldspec

State 153:
## Known stack suffix:
## LBRACE efields
## LR(1) items:
arrow_prefix -> LBRACE efields . RBRACE [ SQUIGRARROW RARROW ]
## Transitions:
-- On RBRACE shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## LBRACE efields RBRACE
## LR(1) items:
arrow_prefix -> LBRACE efields RBRACE . [ SQUIGRARROW RARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arrow_prefix -> LBRACE efields RBRACE

State 155:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix . RARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RARROW shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix RARROW
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW . datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## parenthesized_datatypes straight_arrow_prefix RARROW datatype
## LR(1) items:
straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production straight_arrow -> parenthesized_datatypes straight_arrow_prefix RARROW datatype

State 158:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix . SQUIGRARROW datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On SQUIGRARROW shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGRARROW
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW . datatype [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype
## LR(1) items:
squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squiggly_arrow -> parenthesized_datatypes squig_arrow_prefix SQUIGRARROW datatype

State 161:
## Known stack suffix:
## hear_arrow_prefix
## LR(1) items:
squig_arrow_prefix -> hear_arrow_prefix . [ SQUIGRARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production squig_arrow_prefix -> hear_arrow_prefix

State 162:
## Known stack suffix:
## arrow_prefix
## LR(1) items:
squig_arrow_prefix -> arrow_prefix . [ SQUIGRARROW ]
straight_arrow_prefix -> arrow_prefix . [ RARROW ]
## Transitions:
## Reductions:
-- On SQUIGRARROW
--   reduce production squig_arrow_prefix -> arrow_prefix
-- On RARROW
--   reduce production straight_arrow_prefix -> arrow_prefix

State 163:
## Known stack suffix:
## TYPE LPAREN datatype
## LR(1) items:
type_arg -> TYPE LPAREN datatype . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## TYPE LPAREN datatype RPAREN
## LR(1) items:
type_arg -> TYPE LPAREN datatype RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> TYPE LPAREN datatype RPAREN

State 165:
## Known stack suffix:
## ROW
## LR(1) items:
type_arg -> ROW . LPAREN row RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## ROW LPAREN
## LR(1) items:
type_arg -> ROW LPAREN . row RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VBAR shift to state 167
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On row shift to state 174
-- On fields shift to state 176
-- On field_label shift to state 177
-- On field shift to state 179
## Reductions:
-- On RPAREN
--   reduce production row ->

State 167:
## Known stack suffix:
## VBAR
## LR(1) items:
fields -> VBAR . row_var [ RPAREN RBRACE ]
fields -> VBAR . kinded_row_var [ RPAREN RBRACE ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On row_var shift to state 168
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 169
## Reductions:

State 168:
## Known stack suffix:
## VBAR row_var
## LR(1) items:
fields -> VBAR row_var . [ RPAREN RBRACE ]
kinded_row_var -> row_var . subkind [ RPAREN RBRACE ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 87
## Reductions:
-- On RPAREN RBRACE
--   reduce production fields -> VBAR row_var

State 169:
## Known stack suffix:
## VBAR kinded_row_var
## LR(1) items:
fields -> VBAR kinded_row_var . [ RPAREN RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> VBAR kinded_row_var

State 170:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> VARIABLE

State 171:
## Known stack suffix:
## UINTEGER
## LR(1) items:
field_label -> UINTEGER . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> UINTEGER

State 172:
## Known stack suffix:
## STRING
## LR(1) items:
field_label -> STRING . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> STRING

State 173:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
field_label -> CONSTRUCTOR . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_label -> CONSTRUCTOR

State 174:
## Known stack suffix:
## ROW LPAREN row
## LR(1) items:
type_arg -> ROW LPAREN row . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## ROW LPAREN row RPAREN
## LR(1) items:
type_arg -> ROW LPAREN row RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> ROW LPAREN row RPAREN

State 176:
## Known stack suffix:
## fields
## LR(1) items:
row -> fields . [ RPAREN RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row -> fields

State 177:
## Known stack suffix:
## field_label
## LR(1) items:
field -> field_label . [ VBAR RPAREN RBRACE COMMA ]
field -> field_label . fieldspec [ VBAR RPAREN RBRACE COMMA ]
## Transitions:
-- On MINUS shift to state 64
-- On LBRACE shift to state 65
-- On COLON shift to state 150
-- On fieldspec shift to state 178
## Reductions:
-- On VBAR RPAREN RBRACE COMMA
--   reduce production field -> field_label

State 178:
## Known stack suffix:
## field_label fieldspec
## LR(1) items:
field -> field_label fieldspec . [ VBAR RPAREN RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field -> field_label fieldspec

State 179:
## Known stack suffix:
## field
## LR(1) items:
fields -> field . [ RPAREN RBRACE ]
fields -> field . VBAR row_var [ RPAREN RBRACE ]
fields -> field . VBAR kinded_row_var [ RPAREN RBRACE ]
fields -> field . COMMA fields [ RPAREN RBRACE ]
## Transitions:
-- On VBAR shift to state 180
-- On COMMA shift to state 183
## Reductions:
-- On RPAREN RBRACE
--   reduce production fields -> field

State 180:
## Known stack suffix:
## field VBAR
## LR(1) items:
fields -> field VBAR . row_var [ RPAREN RBRACE ]
fields -> field VBAR . kinded_row_var [ RPAREN RBRACE ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On row_var shift to state 181
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 182
## Reductions:

State 181:
## Known stack suffix:
## field VBAR row_var
## LR(1) items:
fields -> field VBAR row_var . [ RPAREN RBRACE ]
kinded_row_var -> row_var . subkind [ RPAREN RBRACE ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 87
## Reductions:
-- On RPAREN RBRACE
--   reduce production fields -> field VBAR row_var

State 182:
## Known stack suffix:
## field VBAR kinded_row_var
## LR(1) items:
fields -> field VBAR kinded_row_var . [ RPAREN RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> field VBAR kinded_row_var

State 183:
## Known stack suffix:
## field COMMA
## LR(1) items:
fields -> field COMMA . fields [ RPAREN RBRACE ]
## Transitions:
-- On VBAR shift to state 167
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On fields shift to state 184
-- On field_label shift to state 177
-- On field shift to state 179
## Reductions:

State 184:
## Known stack suffix:
## field COMMA fields
## LR(1) items:
fields -> field COMMA fields . [ RPAREN RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fields -> field COMMA fields

State 185:
## Known stack suffix:
## PRESENCE
## LR(1) items:
type_arg -> PRESENCE . LPAREN fieldspec RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## PRESENCE LPAREN
## LR(1) items:
type_arg -> PRESENCE LPAREN . fieldspec RPAREN [ RPAREN COMMA ]
## Transitions:
-- On MINUS shift to state 64
-- On LBRACE shift to state 65
-- On COLON shift to state 150
-- On fieldspec shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## PRESENCE LPAREN fieldspec
## LR(1) items:
type_arg -> PRESENCE LPAREN fieldspec . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## PRESENCE LPAREN fieldspec RPAREN
## LR(1) items:
type_arg -> PRESENCE LPAREN fieldspec RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> PRESENCE LPAREN fieldspec RPAREN

State 189:
## Known stack suffix:
## LBRACE
## LR(1) items:
type_arg -> LBRACE . row RBRACE [ RPAREN COMMA ]
## Transitions:
-- On VBAR shift to state 167
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On row shift to state 190
-- On fields shift to state 176
-- On field_label shift to state 177
-- On field shift to state 179
## Reductions:
-- On RBRACE
--   reduce production row ->

State 190:
## Known stack suffix:
## LBRACE row
## LR(1) items:
type_arg -> LBRACE row . RBRACE [ RPAREN COMMA ]
## Transitions:
-- On RBRACE shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## LBRACE row RBRACE
## LR(1) items:
type_arg -> LBRACE row RBRACE . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> LBRACE row RBRACE

State 192:
## Known stack suffix:
## CONSTRUCTOR LPAREN type_arg_list
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN type_arg_list . RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## CONSTRUCTOR LPAREN type_arg_list RPAREN
## LR(1) items:
primary_datatype -> CONSTRUCTOR LPAREN type_arg_list RPAREN . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> CONSTRUCTOR LPAREN type_arg_list RPAREN

State 194:
## Known stack suffix:
## type_arg
## LR(1) items:
type_arg_list -> type_arg . [ RPAREN ]
type_arg_list -> type_arg . COMMA type_arg_list [ RPAREN ]
## Transitions:
-- On COMMA shift to state 195
## Reductions:
-- On RPAREN
--   reduce production type_arg_list -> type_arg

State 195:
## Known stack suffix:
## type_arg COMMA
## LR(1) items:
type_arg_list -> type_arg COMMA . type_arg_list [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TYPE shift to state 103
-- On TABLEHANDLE shift to state 46
-- On ROW shift to state 165
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On PRESENCE shift to state 185
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On LBRACE shift to state 189
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On type_arg_list shift to state 196
-- On type_arg shift to state 194
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 197
## Reductions:

State 196:
## Known stack suffix:
## type_arg COMMA type_arg_list
## LR(1) items:
type_arg_list -> type_arg COMMA type_arg_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg_list -> type_arg COMMA type_arg_list

State 197:
## Known stack suffix:
## datatype
## LR(1) items:
type_arg -> datatype . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_arg -> datatype

State 198:
## Known stack suffix:
## FORALL varlist DOT datatype
## LR(1) items:
forall_datatype -> FORALL varlist DOT datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall_datatype -> FORALL varlist DOT datatype

State 199:
## Known stack suffix:
## typearg
## LR(1) items:
varlist -> typearg . [ RPAREN DOT ]
varlist -> typearg . COMMA varlist [ RPAREN DOT ]
## Transitions:
-- On COMMA shift to state 200
## Reductions:
-- On RPAREN DOT
--   reduce production varlist -> typearg

State 200:
## Known stack suffix:
## typearg COMMA
## LR(1) items:
varlist -> typearg COMMA . varlist [ RPAREN DOT ]
## Transitions:
-- On VARIABLE shift to state 92
-- On varlist shift to state 201
-- On typearg shift to state 199
## Reductions:

State 201:
## Known stack suffix:
## typearg COMMA varlist
## LR(1) items:
varlist -> typearg COMMA varlist . [ RPAREN DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production varlist -> typearg COMMA varlist

State 202:
## Known stack suffix:
## LBRACKET datatype
## LR(1) items:
primary_datatype -> LBRACKET datatype . RBRACKET [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RBRACKET shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## LBRACKET datatype RBRACKET
## LR(1) items:
primary_datatype -> LBRACKET datatype RBRACKET . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LBRACKET datatype RBRACKET

State 204:
## Known stack suffix:
## LBRACE COLON datatype
## LR(1) items:
fieldspec -> LBRACE COLON datatype . RBRACE [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
-- On RBRACE shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## LBRACE COLON datatype RBRACE
## LR(1) items:
fieldspec -> LBRACE COLON datatype RBRACE . [ VBAR RPAREN RBRACE COMMA BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fieldspec -> LBRACE COLON datatype RBRACE

State 206:
## Known stack suffix:
## CONSTRUCTOR fieldspec
## LR(1) items:
vfield -> CONSTRUCTOR fieldspec . [ VBAR RPAREN BARRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vfield -> CONSTRUCTOR fieldspec

State 207:
## Known stack suffix:
## LPAREN MU VARIABLE DOT vfields
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT vfields . RPAREN [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
-- On RPAREN shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## LPAREN MU VARIABLE DOT vfields RPAREN
## LR(1) items:
row_var -> LPAREN MU VARIABLE DOT vfields RPAREN . [ RPAREN RBRACE BASE BARRBRACKET ANY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_var -> LPAREN MU VARIABLE DOT vfields RPAREN

State 209:
## Known stack suffix:
## VBAR row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN ]
rfields -> VBAR row_var . [ RPAREN ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 87
## Reductions:
-- On RPAREN
--   reduce production rfields -> VBAR row_var

State 210:
## Known stack suffix:
## VBAR kinded_row_var
## LR(1) items:
rfields -> VBAR kinded_row_var . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> VBAR kinded_row_var

State 211:
## Known stack suffix:
## VARIABLE
## LR(1) items:
field_label -> VARIABLE . [ VBAR RPAREN MINUS LBRACE COMMA COLON ]
type_var -> VARIABLE . [ RPAREN COMMA BASE ANY ]
## Transitions:
## Reductions:
-- On VBAR MINUS LBRACE COLON
--   reduce production field_label -> VARIABLE
-- On RPAREN COMMA BASE ANY
--   reduce production type_var -> VARIABLE

State 212:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN RPAREN . [ WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_datatypes -> LPAREN RPAREN

State 213:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
field_label -> CONSTRUCTOR . [ VBAR RPAREN MINUS LBRACE COMMA COLON ]
primary_datatype -> CONSTRUCTOR . [ RPAREN COMMA ]
primary_datatype -> CONSTRUCTOR . LPAREN type_arg_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 102
## Reductions:
-- On VBAR MINUS LBRACE COLON
--   reduce production field_label -> CONSTRUCTOR
-- On RPAREN COMMA
--   reduce production primary_datatype -> CONSTRUCTOR

State 214:
## Known stack suffix:
## LPAREN rfields
## LR(1) items:
primary_datatype -> LPAREN rfields . RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## LPAREN rfields RPAREN
## LR(1) items:
primary_datatype -> LPAREN rfields RPAREN . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> LPAREN rfields RPAREN

State 216:
## Known stack suffix:
## rfield
## LR(1) items:
rfields -> rfield . [ RPAREN ]
rfields -> rfield . VBAR row_var [ RPAREN ]
rfields -> rfield . VBAR kinded_row_var [ RPAREN ]
rfields -> rfield . COMMA rfields [ RPAREN ]
## Transitions:
-- On VBAR shift to state 217
-- On COMMA shift to state 220
## Reductions:
-- On RPAREN
--   reduce production rfields -> rfield

State 217:
## Known stack suffix:
## rfield VBAR
## LR(1) items:
rfields -> rfield VBAR . row_var [ RPAREN ]
rfields -> rfield VBAR . kinded_row_var [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 55
-- On UNDERSCORE shift to state 56
-- On QUESTIONVAR shift to state 57
-- On QUESTION shift to state 58
-- On LPAREN shift to state 59
-- On row_var shift to state 218
-- On nonrec_row_var shift to state 88
-- On kinded_row_var shift to state 219
## Reductions:

State 218:
## Known stack suffix:
## rfield VBAR row_var
## LR(1) items:
kinded_row_var -> row_var . subkind [ RPAREN ]
rfields -> rfield VBAR row_var . [ RPAREN ]
## Transitions:
-- On BASE shift to state 85
-- On ANY shift to state 86
-- On subkind shift to state 87
## Reductions:
-- On RPAREN
--   reduce production rfields -> rfield VBAR row_var

State 219:
## Known stack suffix:
## rfield VBAR kinded_row_var
## LR(1) items:
rfields -> rfield VBAR kinded_row_var . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> rfield VBAR kinded_row_var

State 220:
## Known stack suffix:
## rfield COMMA
## LR(1) items:
rfields -> rfield COMMA . rfields [ RPAREN ]
## Transitions:
-- On VBAR shift to state 54
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On rfields shift to state 221
-- On rfield shift to state 216
-- On record_label shift to state 222
-- On field_label shift to state 224
## Reductions:

State 221:
## Known stack suffix:
## rfield COMMA rfields
## LR(1) items:
rfields -> rfield COMMA rfields . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfields -> rfield COMMA rfields

State 222:
## Known stack suffix:
## record_label
## LR(1) items:
rfield -> record_label . [ VBAR RPAREN COMMA ]
rfield -> record_label . fieldspec [ VBAR RPAREN COMMA ]
## Transitions:
-- On MINUS shift to state 64
-- On LBRACE shift to state 65
-- On COLON shift to state 150
-- On fieldspec shift to state 223
## Reductions:
-- On VBAR RPAREN COMMA
--   reduce production rfield -> record_label

State 223:
## Known stack suffix:
## record_label fieldspec
## LR(1) items:
rfield -> record_label fieldspec . [ VBAR RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rfield -> record_label fieldspec

State 224:
## Known stack suffix:
## field_label
## LR(1) items:
record_label -> field_label . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_label -> field_label

State 225:
## Known stack suffix:
## LPAREN datatypes
## LR(1) items:
parenthesized_datatypes -> LPAREN datatypes . RPAREN [ WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LPAREN datatypes RPAREN
## LR(1) items:
parenthesized_datatypes -> LPAREN datatypes RPAREN . [ WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_datatypes -> LPAREN datatypes RPAREN

State 227:
## Known stack suffix:
## datatype
## LR(1) items:
datatypes -> datatype . [ RPAREN ]
datatypes -> datatype . COMMA datatypes [ RPAREN ]
## Transitions:
-- On COMMA shift to state 228
## Reductions:
-- On RPAREN
--   reduce production datatypes -> datatype

State 228:
## Known stack suffix:
## datatype COMMA
## LR(1) items:
datatypes -> datatype COMMA . datatypes [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatypes shift to state 229
-- On datatype shift to state 227
## Reductions:

State 229:
## Known stack suffix:
## datatype COMMA datatypes
## LR(1) items:
datatypes -> datatype COMMA datatypes . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production datatypes -> datatype COMMA datatypes

State 230:
## Known stack suffix:
## parenthesized_datatypes
## LR(1) items:
primary_datatype -> parenthesized_datatypes . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> parenthesized_datatypes

State 231:
## Known stack suffix:
## MU VARIABLE DOT mu_datatype
## LR(1) items:
mu_datatype -> MU VARIABLE DOT mu_datatype . [ WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mu_datatype -> MU VARIABLE DOT mu_datatype

State 232:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype . COMMA datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On COMMA shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA . datatype COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype . COMMA datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On COMMA shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA . datatype RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype . RPAREN [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN
## LR(1) items:
primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN . [ WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_datatype -> TABLEHANDLE LPAREN datatype COMMA datatype COMMA datatype RPAREN

State 238:
## Known stack suffix:
## typed_pattern COLON primary_datatype
## LR(1) items:
pattern -> typed_pattern COLON primary_datatype . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> typed_pattern COLON primary_datatype

State 239:
## Known stack suffix:
## primary_pattern
## LR(1) items:
negative_pattern -> primary_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production negative_pattern -> primary_pattern

State 240:
## Known stack suffix:
## LBRACKET patterns
## LR(1) items:
primary_pattern -> LBRACKET patterns . RBRACKET [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RBRACKET shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LBRACKET patterns RBRACKET
## LR(1) items:
primary_pattern -> LBRACKET patterns RBRACKET . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> LBRACKET patterns RBRACKET

State 242:
## Known stack suffix:
## pattern
## LR(1) items:
patterns -> pattern . [ RPAREN RBRACKET ]
patterns -> pattern . COMMA patterns [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 243
## Reductions:
-- On RPAREN RBRACKET
--   reduce production patterns -> pattern

State 243:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
patterns -> pattern COMMA . patterns [ RPAREN RBRACKET ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On patterns shift to state 244
-- On pattern shift to state 242
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 244:
## Known stack suffix:
## pattern COMMA patterns
## LR(1) items:
patterns -> pattern COMMA patterns . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patterns -> pattern COMMA patterns

State 245:
## Known stack suffix:
## parenthesized_pattern
## LR(1) items:
primary_pattern -> parenthesized_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> parenthesized_pattern

State 246:
## Known stack suffix:
## negative_pattern
## LR(1) items:
constructor_pattern -> negative_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_pattern -> negative_pattern

State 247:
## Known stack suffix:
## constructor_pattern
## LR(1) items:
cons_pattern -> constructor_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS ]
cons_pattern -> constructor_pattern . COLONCOLON cons_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS ]
## Transitions:
-- On COLONCOLON shift to state 248
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS
--   reduce production cons_pattern -> constructor_pattern

State 248:
## Known stack suffix:
## constructor_pattern COLONCOLON
## LR(1) items:
cons_pattern -> constructor_pattern COLONCOLON . cons_pattern [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On primary_pattern shift to state 239
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 250
## Reductions:

State 249:
## Known stack suffix:
## constant
## LR(1) items:
primary_pattern -> constant . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_pattern -> constant

State 250:
## Known stack suffix:
## constructor_pattern COLONCOLON cons_pattern
## LR(1) items:
cons_pattern -> constructor_pattern COLONCOLON cons_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cons_pattern -> constructor_pattern COLONCOLON cons_pattern

State 251:
## Known stack suffix:
## cons_pattern
## LR(1) items:
typed_pattern -> cons_pattern . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT ]
typed_pattern -> cons_pattern . AS var [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT ]
## Transitions:
-- On AS shift to state 252
## Reductions:
-- On VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT
--   reduce production typed_pattern -> cons_pattern

State 252:
## Known stack suffix:
## cons_pattern AS
## LR(1) items:
typed_pattern -> cons_pattern AS . var [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## cons_pattern AS var
## LR(1) items:
typed_pattern -> cons_pattern AS var . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_pattern -> cons_pattern AS var

State 254:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_pattern -> CONSTRUCTOR . [ RPAREN COMMA COLONCOLON COLON AS ]
constructor_pattern -> CONSTRUCTOR . parenthesized_pattern [ RPAREN COMMA COLONCOLON COLON AS ]
field_label -> CONSTRUCTOR . [ EQ ]
## Transitions:
-- On LPAREN shift to state 31
-- On parenthesized_pattern shift to state 40
## Reductions:
-- On RPAREN COMMA COLONCOLON COLON AS
--   reduce production constructor_pattern -> CONSTRUCTOR
-- On EQ
--   reduce production field_label -> CONSTRUCTOR

State 255:
## Known stack suffix:
## record_label
## LR(1) items:
labeled_patterns -> record_label . EQ pattern [ VBAR RPAREN ]
labeled_patterns -> record_label . EQ pattern COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On EQ shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## record_label EQ
## LR(1) items:
labeled_patterns -> record_label EQ . pattern [ VBAR RPAREN ]
labeled_patterns -> record_label EQ . pattern COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 257
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 257:
## Known stack suffix:
## record_label EQ pattern
## LR(1) items:
labeled_patterns -> record_label EQ pattern . [ VBAR RPAREN ]
labeled_patterns -> record_label EQ pattern . COMMA labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On COMMA shift to state 258
## Reductions:
-- On VBAR RPAREN
--   reduce production labeled_patterns -> record_label EQ pattern

State 258:
## Known stack suffix:
## record_label EQ pattern COMMA
## LR(1) items:
labeled_patterns -> record_label EQ pattern COMMA . labeled_patterns [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 255
-- On labeled_patterns shift to state 259
-- On field_label shift to state 224
## Reductions:

State 259:
## Known stack suffix:
## record_label EQ pattern COMMA labeled_patterns
## LR(1) items:
labeled_patterns -> record_label EQ pattern COMMA labeled_patterns . [ VBAR RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_patterns -> record_label EQ pattern COMMA labeled_patterns

State 260:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
parenthesized_pattern -> LPAREN pattern . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN pattern . COMMA patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 261
-- On COMMA shift to state 262
## Reductions:

State 261:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN pattern RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN pattern RPAREN

State 262:
## Known stack suffix:
## LPAREN pattern COMMA
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA . patterns RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On patterns shift to state 263
-- On pattern shift to state 242
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 263:
## Known stack suffix:
## LPAREN pattern COMMA patterns
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA patterns . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## LPAREN pattern COMMA patterns RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN pattern COMMA patterns RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN pattern COMMA patterns RPAREN

State 265:
## Known stack suffix:
## LPAREN labeled_patterns
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns . VBAR pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
parenthesized_pattern -> LPAREN labeled_patterns . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VBAR shift to state 266
-- On RPAREN shift to state 269
## Reductions:

State 266:
## Known stack suffix:
## LPAREN labeled_patterns VBAR
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR . pattern RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 267
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 267:
## Known stack suffix:
## LPAREN labeled_patterns VBAR pattern
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern . RPAREN [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
-- On RPAREN shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## LPAREN labeled_patterns VBAR pattern RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN labeled_patterns VBAR pattern RPAREN

State 269:
## Known stack suffix:
## LPAREN labeled_patterns RPAREN
## LR(1) items:
parenthesized_pattern -> LPAREN labeled_patterns RPAREN . [ VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_pattern -> LPAREN labeled_patterns RPAREN

State 270:
## Known stack suffix:
## UPDATE LPAREN table_generator
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator . RPAREN perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN . perhaps_where SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On WHERE shift to state 272
-- On perhaps_where shift to state 728
## Reductions:
-- On SET
--   reduce production perhaps_where ->

State 272:
## Known stack suffix:
## WHERE
## LR(1) items:
perhaps_where -> WHERE . LPAREN exp RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SET SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DELETE DATABASE CONSTRUCTOR COMMA CHAR CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## WHERE LPAREN
## LR(1) items:
perhaps_where -> WHERE LPAREN . exp RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SET SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DELETE DATABASE CONSTRUCTOR COMMA CHAR CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 726
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 274:
## Known stack suffix:
## TABLE
## LR(1) items:
table_expression -> TABLE . exp WITH datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 710
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 275:
## Known stack suffix:
## SWITCH
## LR(1) items:
case_expression -> SWITCH . LPAREN exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
case_expression -> SWITCH LPAREN . exp RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 705
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 277:
## Known stack suffix:
## SPAWNWAIT
## LR(1) items:
postfix_expression -> SPAWNWAIT . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 704
## Reductions:

State 278:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . block_contents RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING STAR SPAWNWAIT SPAWN SLASHRXML SLASHFLAGS SLASH SIG SEMICOLON RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF FUN FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE END ELSE DOTDOT DOT DOLLAR DELETE DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CASE CARET BARRBRACE BARBAR AMPAMP ALTERNATE ALIEN ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 279
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SEMICOLON shift to state 297
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 629
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 633
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On perhaps_semi shift to state 635
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 646
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block_contents shift to state 648
-- On block shift to state 374
-- On bindings shift to state 650
-- On binding shift to state 654
-- On atomic_expression shift to state 375
## Reductions:
-- On RBRACE
--   reduce production perhaps_semi ->

State 279:
## Known stack suffix:
## VAR
## LR(1) items:
binding -> VAR . pattern EQ exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 280
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 280:
## Known stack suffix:
## VAR pattern
## LR(1) items:
binding -> VAR pattern . EQ exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On EQ shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## VAR pattern EQ
## LR(1) items:
binding -> VAR pattern EQ . exp SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 702
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 282:
## Known stack suffix:
## SPAWN
## LR(1) items:
postfix_expression -> SPAWN . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## SPAWN block
## LR(1) items:
postfix_expression -> SPAWN block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> SPAWN block

State 284:
## Known stack suffix:
## RECEIVE
## LR(1) items:
case_expression -> RECEIVE . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LBRACE shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## RECEIVE LBRACE
## LR(1) items:
case_expression -> RECEIVE LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On CASE shift to state 286
-- On perhaps_cases shift to state 697
-- On cases shift to state 699
-- On case shift to state 700
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 286:
## Known stack suffix:
## CASE
## LR(1) items:
case -> CASE . pattern RARROW block_contents [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 287
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 287:
## Known stack suffix:
## CASE pattern
## LR(1) items:
case -> CASE pattern . RARROW block_contents [ RBRACE CASE ]
## Transitions:
-- On RARROW shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## CASE pattern RARROW
## LR(1) items:
case -> CASE pattern RARROW . block_contents [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 279
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SEMICOLON shift to state 297
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 629
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 633
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On perhaps_semi shift to state 635
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 646
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block_contents shift to state 696
-- On block shift to state 374
-- On bindings shift to state 650
-- On binding shift to state 654
-- On atomic_expression shift to state 375
## Reductions:
-- On RBRACE CASE
--   reduce production perhaps_semi ->

State 289:
## Known stack suffix:
## TYPENAME
## LR(1) items:
typedecl -> TYPENAME . CONSTRUCTOR typeargs_opt EQ datatype [ SEMICOLON ]
## Transitions:
-- On CONSTRUCTOR shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## TYPENAME CONSTRUCTOR
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR . typeargs_opt EQ datatype [ SEMICOLON ]
## Transitions:
-- On LPAREN shift to state 291
-- On typeargs_opt shift to state 294
## Reductions:
-- On EQ
--   reduce production typeargs_opt ->

State 291:
## Known stack suffix:
## LPAREN
## LR(1) items:
typeargs_opt -> LPAREN . varlist RPAREN [ EQ ]
## Transitions:
-- On VARIABLE shift to state 92
-- On varlist shift to state 292
-- On typearg shift to state 199
## Reductions:

State 292:
## Known stack suffix:
## LPAREN varlist
## LR(1) items:
typeargs_opt -> LPAREN varlist . RPAREN [ EQ ]
## Transitions:
-- On RPAREN shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## LPAREN varlist RPAREN
## LR(1) items:
typeargs_opt -> LPAREN varlist RPAREN . [ EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typeargs_opt -> LPAREN varlist RPAREN

State 294:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt . EQ datatype [ SEMICOLON ]
## Transitions:
-- On EQ shift to state 295
## Reductions:

State 295:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt EQ
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ . datatype [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## TYPENAME CONSTRUCTOR typeargs_opt EQ datatype
## LR(1) items:
typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ datatype . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedecl -> TYPENAME CONSTRUCTOR typeargs_opt EQ datatype

State 297:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
perhaps_semi -> SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_semi -> SEMICOLON

State 298:
## Known stack suffix:
## QUERY
## LR(1) items:
postfix_expression -> QUERY . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> QUERY . LBRACKET exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> QUERY . LBRACKET exp COMMA exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACKET shift to state 299
-- On LBRACE shift to state 278
-- On block shift to state 695
## Reductions:

State 299:
## Known stack suffix:
## QUERY LBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET . exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> QUERY LBRACKET . exp COMMA exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 688
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 300:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
unary_expression -> PREFIXOP . unary_expression [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 687
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 301:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
unary_expression -> MINUSDOT . unary_expression [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 575
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 302:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_expression -> MINUS . unary_expression [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 577
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 303:
## Known stack suffix:
## LXML
## LR(1) items:
xml_tree -> LXML . SLASHRXML [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML . RXML ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML . RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML . attrs RXML ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML . attrs SLASHRXML [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML . attrs RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 304
-- On SLASHRXML shift to state 305
-- On RXML shift to state 306
-- On LBRACE shift to state 278
-- On xmlid shift to state 666
-- On block shift to state 676
-- On attrs shift to state 677
-- On attr_list shift to state 683
-- On attr shift to state 686
## Reductions:

State 304:
## Known stack suffix:
## VARIABLE
## LR(1) items:
xmlid -> VARIABLE . [ EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xmlid -> VARIABLE

State 305:
## Known stack suffix:
## LXML SLASHRXML
## LR(1) items:
xml_tree -> LXML SLASHRXML . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML SLASHRXML

State 306:
## Known stack suffix:
## LXML RXML
## LR(1) items:
xml_tree -> LXML RXML . ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML RXML . xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LXML shift to state 303
-- On LBRACEBAR shift to state 307
-- On LBRACE shift to state 628
-- On ENDTAG shift to state 655
-- On CDATA shift to state 656
-- On xml_tree shift to state 657
-- On xml_contents_list shift to state 658
-- On xml_contents shift to state 660
-- On page_placement shift to state 662
-- On formlet_placement shift to state 663
-- On formlet_binding shift to state 664
-- On block shift to state 665
## Reductions:

State 307:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
page_placement -> LBRACEBAR . exp BARRBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 626
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 308:
## Known stack suffix:
## PAGE
## LR(1) items:
formlet_expression -> PAGE . xml [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LXML shift to state 303
-- On xml_tree shift to state 309
-- On xml shift to state 310
## Reductions:

State 309:
## Known stack suffix:
## xml_tree
## LR(1) items:
xml -> xml_tree . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml -> xml_tree

State 310:
## Known stack suffix:
## PAGE xml
## LR(1) items:
formlet_expression -> PAGE xml . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> PAGE xml

State 311:
## Known stack suffix:
## LPAREN
## LR(1) items:
parenthesized_thing -> LPAREN . binop RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . DOT record_label RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . labeled_exps VBAR exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN . exp WITH labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 312
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 33
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 34
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RPAREN shift to state 313
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 314
-- On MINUS shift to state 576
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On INFIXR9 shift to state 578
-- On INFIXR8 shift to state 579
-- On INFIXR7 shift to state 580
-- On INFIXR6 shift to state 581
-- On INFIXR5 shift to state 582
-- On INFIXR4 shift to state 583
-- On INFIXR3 shift to state 584
-- On INFIXR2 shift to state 585
-- On INFIXR1 shift to state 586
-- On INFIXR0 shift to state 587
-- On INFIXL9 shift to state 588
-- On INFIXL8 shift to state 589
-- On INFIXL7 shift to state 590
-- On INFIXL6 shift to state 591
-- On INFIXL5 shift to state 592
-- On INFIXL4 shift to state 593
-- On INFIXL3 shift to state 594
-- On INFIXL2 shift to state 595
-- On INFIXL1 shift to state 596
-- On INFIXL0 shift to state 597
-- On INFIX9 shift to state 598
-- On INFIX8 shift to state 599
-- On INFIX7 shift to state 600
-- On INFIX6 shift to state 601
-- On INFIX5 shift to state 602
-- On INFIX4 shift to state 603
-- On INFIX3 shift to state 604
-- On INFIX2 shift to state 605
-- On INFIX1 shift to state 606
-- On INFIX0 shift to state 607
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DOT shift to state 608
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 611
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On record_label shift to state 559
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On op shift to state 612
-- On logical_expression shift to state 384
-- On labeled_exps shift to state 613
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On field_label shift to state 224
-- On exps shift to state 618
-- On exp shift to state 620
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On binop shift to state 624
-- On atomic_expression shift to state 375
## Reductions:

State 312:
## Known stack suffix:
## VARIABLE
## LR(1) items:
atomic_expression -> VARIABLE . [ WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AMPAMP ]
field_label -> VARIABLE . [ EQ ]
## Transitions:
## Reductions:
-- On WITH RPAREN POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE DOT COMMA COLONCOLON COLON BARBAR AMPAMP
--   reduce production atomic_expression -> VARIABLE
-- On EQ
--   reduce production field_label -> VARIABLE

State 313:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN RPAREN

State 314:
## Known stack suffix:
## MINUSDOT
## LR(1) items:
binop -> MINUSDOT . [ RPAREN ]
unary_expression -> MINUSDOT . unary_expression [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 575
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:
-- On RPAREN
--   reduce production binop -> MINUSDOT

State 315:
## Known stack suffix:
## LBRACKET
## LR(1) items:
primary_expression -> LBRACKET . RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
primary_expression -> LBRACKET . exps RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
primary_expression -> LBRACKET . exp DOTDOT exp RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On RBRACKET shift to state 316
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exps shift to state 569
-- On exp shift to state 571
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 316:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
primary_expression -> LBRACKET RBRACKET . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET RBRACKET

State 317:
## Known stack suffix:
## INSERT
## LR(1) items:
database_expression -> INSERT . exp VALUES LPAREN RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LPAREN record_labels RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT . exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 536
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 318:
## Known stack suffix:
## IF
## LR(1) items:
conditional_expression -> IF . LPAREN exp RPAREN exp ELSE exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
conditional_expression -> IF LPAREN . exp RPAREN exp ELSE exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 531
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 320:
## Known stack suffix:
## FUN
## LR(1) items:
primary_expression -> FUN . arg_lists block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LPAREN shift to state 321
-- On multi_args shift to state 325
-- On arg_lists shift to state 327
## Reductions:

State 321:
## Known stack suffix:
## LPAREN
## LR(1) items:
multi_args -> LPAREN . patterns RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
multi_args -> LPAREN . RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On RPAREN shift to state 322
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On patterns shift to state 323
-- On pattern shift to state 242
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 322:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
multi_args -> LPAREN RPAREN . [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multi_args -> LPAREN RPAREN

State 323:
## Known stack suffix:
## LPAREN patterns
## LR(1) items:
multi_args -> LPAREN patterns . RPAREN [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
-- On RPAREN shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## LPAREN patterns RPAREN
## LR(1) items:
multi_args -> LPAREN patterns RPAREN . [ SERVER NATIVE LPAREN LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multi_args -> LPAREN patterns RPAREN

State 325:
## Known stack suffix:
## multi_args
## LR(1) items:
arg_lists -> multi_args . [ SERVER NATIVE LBRACE CLIENT ]
arg_lists -> multi_args . arg_lists [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
-- On LPAREN shift to state 321
-- On multi_args shift to state 325
-- On arg_lists shift to state 326
## Reductions:
-- On SERVER NATIVE LBRACE CLIENT
--   reduce production arg_lists -> multi_args

State 326:
## Known stack suffix:
## multi_args arg_lists
## LR(1) items:
arg_lists -> multi_args arg_lists . [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_lists -> multi_args arg_lists

State 327:
## Known stack suffix:
## FUN arg_lists
## LR(1) items:
primary_expression -> FUN arg_lists . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## FUN arg_lists block
## LR(1) items:
primary_expression -> FUN arg_lists block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> FUN arg_lists block

State 329:
## Known stack suffix:
## FORMLET
## LR(1) items:
formlet_expression -> FORMLET . xml YIELDS exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LXML shift to state 303
-- On xml_tree shift to state 309
-- On xml shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## FORMLET xml
## LR(1) items:
formlet_expression -> FORMLET xml . YIELDS exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On YIELDS shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## FORMLET xml YIELDS
## LR(1) items:
formlet_expression -> FORMLET xml YIELDS . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 530
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 332:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_expression -> FOR . LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_expression -> FOR LPAREN . perhaps_generators RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On table_generator shift to state 334
-- On primary_pattern shift to state 239
-- On perhaps_generators shift to state 335
-- On pattern shift to state 522
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On list_generator shift to state 525
-- On generators shift to state 526
-- On generator shift to state 527
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:
-- On RPAREN
--   reduce production perhaps_generators ->

State 334:
## Known stack suffix:
## table_generator
## LR(1) items:
generator -> table_generator . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator -> table_generator

State 335:
## Known stack suffix:
## FOR LPAREN perhaps_generators
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators . RPAREN perhaps_where perhaps_orderby exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN . perhaps_where perhaps_orderby exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On WHERE shift to state 272
-- On perhaps_where shift to state 337
## Reductions:
-- On VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production perhaps_where ->

State 337:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where . perhaps_orderby exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On ORDERBY shift to state 338
-- On perhaps_orderby shift to state 520
## Reductions:
-- On VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production perhaps_orderby ->

State 338:
## Known stack suffix:
## ORDERBY
## LR(1) items:
perhaps_orderby -> ORDERBY . LPAREN exps RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On LPAREN shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## ORDERBY LPAREN
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN . exps RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exps shift to state 518
-- On exp shift to state 515
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 340:
## Known stack suffix:
## ESCAPE
## LR(1) items:
escape_expression -> ESCAPE . var IN postfix_expression [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## ESCAPE var
## LR(1) items:
escape_expression -> ESCAPE var . IN postfix_expression [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On IN shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## ESCAPE var IN
## LR(1) items:
escape_expression -> ESCAPE var IN . postfix_expression [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 346
-- On parenthesized_thing shift to state 357
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 343:
## Known stack suffix:
## xml
## LR(1) items:
primary_expression -> xml . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> xml

State 344:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> primary_expression . POSTFIXOP [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On POSTFIXOP shift to state 345
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production postfix_expression -> primary_expression

State 345:
## Known stack suffix:
## primary_expression POSTFIXOP
## LR(1) items:
postfix_expression -> primary_expression POSTFIXOP . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> primary_expression POSTFIXOP

State 346:
## Known stack suffix:
## ESCAPE var IN postfix_expression
## LR(1) items:
escape_expression -> ESCAPE var IN postfix_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
postfix_expression -> postfix_expression . arg_spec [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE LPAREN END ELSE DOTDOT DOT COMMA CASE BARRBRACE ]
postfix_expression -> postfix_expression . DOT record_label [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE LPAREN END ELSE DOTDOT DOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 347
-- On DOT shift to state 369
-- On arg_spec shift to state 371
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production escape_expression -> ESCAPE var IN postfix_expression

State 347:
## Known stack suffix:
## LPAREN
## LR(1) items:
arg_spec -> LPAREN . RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
arg_spec -> LPAREN . exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RPAREN shift to state 348
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exps shift to state 513
-- On exp shift to state 515
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 348:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
arg_spec -> LPAREN RPAREN . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_spec -> LPAREN RPAREN

State 349:
## Known stack suffix:
## DELETE
## LR(1) items:
db_expression -> DELETE . LPAREN table_generator RPAREN perhaps_where [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## DELETE LPAREN
## LR(1) items:
db_expression -> DELETE LPAREN . table_generator RPAREN perhaps_where [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On table_generator shift to state 351
-- On primary_pattern shift to state 239
-- On pattern shift to state 354
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 351:
## Known stack suffix:
## DELETE LPAREN table_generator
## LR(1) items:
db_expression -> DELETE LPAREN table_generator . RPAREN perhaps_where [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## DELETE LPAREN table_generator RPAREN
## LR(1) items:
db_expression -> DELETE LPAREN table_generator RPAREN . perhaps_where [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On WHERE shift to state 272
-- On perhaps_where shift to state 353
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production perhaps_where ->

State 353:
## Known stack suffix:
## DELETE LPAREN table_generator RPAREN perhaps_where
## LR(1) items:
db_expression -> DELETE LPAREN table_generator RPAREN perhaps_where . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production db_expression -> DELETE LPAREN table_generator RPAREN perhaps_where

State 354:
## Known stack suffix:
## pattern
## LR(1) items:
table_generator -> pattern . LLARROW exp [ RPAREN ]
## Transitions:
-- On LLARROW shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## pattern LLARROW
## LR(1) items:
table_generator -> pattern LLARROW . exp [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 507
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 356:
## Known stack suffix:
## DATABASE
## LR(1) items:
database_expression -> DATABASE . atomic_expression perhaps_db_driver [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On LPAREN shift to state 311
-- On FALSE shift to state 38
-- On CHAR shift to state 41
-- On parenthesized_thing shift to state 357
-- On constant shift to state 358
-- On atomic_expression shift to state 359
## Reductions:

State 357:
## Known stack suffix:
## parenthesized_thing
## LR(1) items:
atomic_expression -> parenthesized_thing . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> parenthesized_thing

State 358:
## Known stack suffix:
## constant
## LR(1) items:
atomic_expression -> constant . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_expression -> constant

State 359:
## Known stack suffix:
## DATABASE atomic_expression
## LR(1) items:
database_expression -> DATABASE atomic_expression . perhaps_db_driver [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On LPAREN shift to state 311
-- On FALSE shift to state 38
-- On CHAR shift to state 41
-- On perhaps_db_driver shift to state 360
-- On parenthesized_thing shift to state 357
-- On constant shift to state 358
-- On atomic_expression shift to state 361
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production perhaps_db_driver ->

State 360:
## Known stack suffix:
## DATABASE atomic_expression perhaps_db_driver
## LR(1) items:
database_expression -> DATABASE atomic_expression perhaps_db_driver . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> DATABASE atomic_expression perhaps_db_driver

State 361:
## Known stack suffix:
## atomic_expression
## LR(1) items:
perhaps_db_driver -> atomic_expression . perhaps_db_args [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On LPAREN shift to state 311
-- On FALSE shift to state 38
-- On CHAR shift to state 41
-- On perhaps_db_args shift to state 362
-- On parenthesized_thing shift to state 357
-- On constant shift to state 358
-- On atomic_expression shift to state 363
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production perhaps_db_args ->

State 362:
## Known stack suffix:
## atomic_expression perhaps_db_args
## LR(1) items:
perhaps_db_driver -> atomic_expression perhaps_db_args . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_db_driver -> atomic_expression perhaps_db_args

State 363:
## Known stack suffix:
## atomic_expression
## LR(1) items:
perhaps_db_args -> atomic_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_db_args -> atomic_expression

State 364:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_expression -> CONSTRUCTOR . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
constructor_expression -> CONSTRUCTOR . parenthesized_thing [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LPAREN shift to state 311
-- On parenthesized_thing shift to state 365
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production constructor_expression -> CONSTRUCTOR

State 365:
## Known stack suffix:
## CONSTRUCTOR parenthesized_thing
## LR(1) items:
constructor_expression -> CONSTRUCTOR parenthesized_thing . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_expression -> CONSTRUCTOR parenthesized_thing

State 366:
## Known stack suffix:
## unary_expression
## LR(1) items:
infixr_9 -> unary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_9 -> unary_expression . INFIX9 unary_expression [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_9 -> unary_expression . INFIXR9 infixr_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR9 shift to state 367
-- On INFIX9 shift to state 376
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_9 -> unary_expression

State 367:
## Known stack suffix:
## unary_expression INFIXR9
## LR(1) items:
infixr_9 -> unary_expression INFIXR9 . infixr_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 372
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 368:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . arg_spec [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> postfix_expression . DOT record_label [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
unary_expression -> postfix_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LPAREN shift to state 347
-- On DOT shift to state 369
-- On arg_spec shift to state 371
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production unary_expression -> postfix_expression

State 369:
## Known stack suffix:
## postfix_expression DOT
## LR(1) items:
postfix_expression -> postfix_expression DOT . record_label [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 370
-- On field_label shift to state 224
## Reductions:

State 370:
## Known stack suffix:
## postfix_expression DOT record_label
## LR(1) items:
postfix_expression -> postfix_expression DOT record_label . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression DOT record_label

State 371:
## Known stack suffix:
## postfix_expression arg_spec
## LR(1) items:
postfix_expression -> postfix_expression arg_spec . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression arg_spec

State 372:
## Known stack suffix:
## unary_expression INFIXR9 infixr_9
## LR(1) items:
infixr_9 -> unary_expression INFIXR9 infixr_9 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_9 -> unary_expression INFIXR9 infixr_9

State 373:
## Known stack suffix:
## constructor_expression
## LR(1) items:
unary_expression -> constructor_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> constructor_expression

State 374:
## Known stack suffix:
## block
## LR(1) items:
postfix_expression -> block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> block

State 375:
## Known stack suffix:
## atomic_expression
## LR(1) items:
primary_expression -> atomic_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> atomic_expression

State 376:
## Known stack suffix:
## unary_expression INFIX9
## LR(1) items:
infixr_9 -> unary_expression INFIX9 . unary_expression [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 377
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 377:
## Known stack suffix:
## unary_expression INFIX9 unary_expression
## LR(1) items:
infixr_9 -> unary_expression INFIX9 unary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_9 -> unary_expression INFIX9 unary_expression

State 378:
## Known stack suffix:
## typed_expression
## LR(1) items:
db_expression -> typed_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
typed_expression -> typed_expression . COLON datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
typed_expression -> typed_expression . COLON datatype LARROW datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
-- On COLON shift to state 379
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production db_expression -> typed_expression

State 379:
## Known stack suffix:
## typed_expression COLON
## LR(1) items:
typed_expression -> typed_expression COLON . datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
typed_expression -> typed_expression COLON . datatype LARROW datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## typed_expression COLON datatype
## LR(1) items:
typed_expression -> typed_expression COLON datatype . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
typed_expression -> typed_expression COLON datatype . LARROW datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
-- On LARROW shift to state 381
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE
--   reduce production typed_expression -> typed_expression COLON datatype

State 381:
## Known stack suffix:
## typed_expression COLON datatype LARROW
## LR(1) items:
typed_expression -> typed_expression COLON datatype LARROW . datatype [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## typed_expression COLON datatype LARROW datatype
## LR(1) items:
typed_expression -> typed_expression COLON datatype LARROW datatype . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_expression -> typed_expression COLON datatype LARROW datatype

State 383:
## Known stack suffix:
## table_expression
## LR(1) items:
database_expression -> table_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> table_expression

State 384:
## Known stack suffix:
## logical_expression
## LR(1) items:
logical_expression -> logical_expression . BARBAR infixl_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
typed_expression -> logical_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE ]
## Transitions:
-- On BARBAR shift to state 385
-- On AMPAMP shift to state 502
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE
--   reduce production typed_expression -> logical_expression

State 385:
## Known stack suffix:
## logical_expression BARBAR
## LR(1) items:
logical_expression -> logical_expression BARBAR . infixl_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 499
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 386:
## Known stack suffix:
## infixr_9
## LR(1) items:
infixl_9 -> infixr_9 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_9 -> infixr_9

State 387:
## Known stack suffix:
## infixr_8
## LR(1) items:
infixl_8 -> infixr_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_8 -> infixr_8

State 388:
## Known stack suffix:
## infixr_7
## LR(1) items:
infixl_7 -> infixr_7 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_7 -> infixr_7

State 389:
## Known stack suffix:
## infixr_6
## LR(1) items:
infixl_6 -> infixr_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixr_6

State 390:
## Known stack suffix:
## infixr_5
## LR(1) items:
infixl_5 -> infixr_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_4 -> infixr_5 . EQUALSTILDE regex [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On EQUALSTILDE shift to state 391
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixl_5 -> infixr_5

State 391:
## Known stack suffix:
## infixr_5 EQUALSTILDE
## LR(1) items:
infixr_4 -> infixr_5 EQUALSTILDE . regex [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On SSLASH shift to state 392
-- On SLASH shift to state 419
-- On regex shift to state 423
## Reductions:

State 392:
## Known stack suffix:
## SSLASH
## LR(1) items:
regex -> SSLASH . regex_pattern_alternate SLASH regex_replace regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On STRING shift to state 393
-- On RANGE shift to state 394
-- On QUOTEDMETA shift to state 395
-- On LPAREN shift to state 396
-- On LBRACE shift to state 278
-- On DOT shift to state 397
-- On DOLLAR shift to state 398
-- On CARET shift to state 399
-- On regex_pattern_sequence shift to state 400
-- On regex_pattern_alternate shift to state 411
-- On regex_pattern shift to state 403
-- On block shift to state 408
## Reductions:

State 393:
## Known stack suffix:
## STRING
## LR(1) items:
regex_pattern -> STRING . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> STRING

State 394:
## Known stack suffix:
## RANGE
## LR(1) items:
regex_pattern -> RANGE . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> RANGE

State 395:
## Known stack suffix:
## QUOTEDMETA
## LR(1) items:
regex_pattern -> QUOTEDMETA . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> QUOTEDMETA

State 396:
## Known stack suffix:
## LPAREN
## LR(1) items:
regex_pattern -> LPAREN . regex_pattern_alternate RPAREN [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
-- On STRING shift to state 393
-- On RANGE shift to state 394
-- On QUOTEDMETA shift to state 395
-- On LPAREN shift to state 396
-- On LBRACE shift to state 278
-- On DOT shift to state 397
-- On DOLLAR shift to state 398
-- On CARET shift to state 399
-- On regex_pattern_sequence shift to state 400
-- On regex_pattern_alternate shift to state 409
-- On regex_pattern shift to state 403
-- On block shift to state 408
## Reductions:

State 397:
## Known stack suffix:
## DOT
## LR(1) items:
regex_pattern -> DOT . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> DOT

State 398:
## Known stack suffix:
## DOLLAR
## LR(1) items:
regex_pattern -> DOLLAR . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> DOLLAR

State 399:
## Known stack suffix:
## CARET
## LR(1) items:
regex_pattern -> CARET . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> CARET

State 400:
## Known stack suffix:
## regex_pattern_sequence
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence . [ SLASHFLAGS SLASH RPAREN ]
regex_pattern_alternate -> regex_pattern_sequence . ALTERNATE regex_pattern_alternate [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
-- On ALTERNATE shift to state 401
## Reductions:
-- On SLASHFLAGS SLASH RPAREN
--   reduce production regex_pattern_alternate -> regex_pattern_sequence

State 401:
## Known stack suffix:
## regex_pattern_sequence ALTERNATE
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence ALTERNATE . regex_pattern_alternate [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
-- On STRING shift to state 393
-- On RANGE shift to state 394
-- On QUOTEDMETA shift to state 395
-- On LPAREN shift to state 396
-- On LBRACE shift to state 278
-- On DOT shift to state 397
-- On DOLLAR shift to state 398
-- On CARET shift to state 399
-- On regex_pattern_sequence shift to state 400
-- On regex_pattern_alternate shift to state 402
-- On regex_pattern shift to state 403
-- On block shift to state 408
## Reductions:

State 402:
## Known stack suffix:
## regex_pattern_sequence ALTERNATE regex_pattern_alternate
## LR(1) items:
regex_pattern_alternate -> regex_pattern_sequence ALTERNATE regex_pattern_alternate . [ SLASHFLAGS SLASH RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern_alternate -> regex_pattern_sequence ALTERNATE regex_pattern_alternate

State 403:
## Known stack suffix:
## regex_pattern
## LR(1) items:
regex_pattern -> regex_pattern . STAR [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern -> regex_pattern . PLUS [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern -> regex_pattern . QUESTION [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
regex_pattern_sequence -> regex_pattern . [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
regex_pattern_sequence -> regex_pattern . regex_pattern_sequence [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
## Transitions:
-- On STRING shift to state 393
-- On STAR shift to state 404
-- On RANGE shift to state 394
-- On QUOTEDMETA shift to state 395
-- On QUESTION shift to state 405
-- On PLUS shift to state 406
-- On LPAREN shift to state 396
-- On LBRACE shift to state 278
-- On DOT shift to state 397
-- On DOLLAR shift to state 398
-- On CARET shift to state 399
-- On regex_pattern_sequence shift to state 407
-- On regex_pattern shift to state 403
-- On block shift to state 408
## Reductions:
-- On SLASHFLAGS SLASH RPAREN ALTERNATE
--   reduce production regex_pattern_sequence -> regex_pattern

State 404:
## Known stack suffix:
## regex_pattern STAR
## LR(1) items:
regex_pattern -> regex_pattern STAR . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern STAR

State 405:
## Known stack suffix:
## regex_pattern QUESTION
## LR(1) items:
regex_pattern -> regex_pattern QUESTION . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern QUESTION

State 406:
## Known stack suffix:
## regex_pattern PLUS
## LR(1) items:
regex_pattern -> regex_pattern PLUS . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> regex_pattern PLUS

State 407:
## Known stack suffix:
## regex_pattern regex_pattern_sequence
## LR(1) items:
regex_pattern_sequence -> regex_pattern regex_pattern_sequence . [ SLASHFLAGS SLASH RPAREN ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern_sequence -> regex_pattern regex_pattern_sequence

State 408:
## Known stack suffix:
## block
## LR(1) items:
regex_pattern -> block . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> block

State 409:
## Known stack suffix:
## LPAREN regex_pattern_alternate
## LR(1) items:
regex_pattern -> LPAREN regex_pattern_alternate . RPAREN [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
-- On RPAREN shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## LPAREN regex_pattern_alternate RPAREN
## LR(1) items:
regex_pattern -> LPAREN regex_pattern_alternate RPAREN . [ STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_pattern -> LPAREN regex_pattern_alternate RPAREN

State 411:
## Known stack suffix:
## SSLASH regex_pattern_alternate
## LR(1) items:
regex -> SSLASH regex_pattern_alternate . SLASH regex_replace regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On SLASH shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH . regex_replace regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On REGEXREPL shift to state 413
-- On LBRACE shift to state 278
-- On regex_replace shift to state 414
-- On block shift to state 418
## Reductions:
-- On SLASHFLAGS SLASH
--   reduce production regex_replace ->

State 413:
## Known stack suffix:
## REGEXREPL
## LR(1) items:
regex_replace -> REGEXREPL . [ SLASHFLAGS SLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_replace -> REGEXREPL

State 414:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH regex_replace
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH regex_replace . regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On SLASHFLAGS shift to state 415
-- On SLASH shift to state 416
-- On regex_flags_opt shift to state 417
## Reductions:

State 415:
## Known stack suffix:
## SLASHFLAGS
## LR(1) items:
regex_flags_opt -> SLASHFLAGS . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_flags_opt -> SLASHFLAGS

State 416:
## Known stack suffix:
## SLASH
## LR(1) items:
regex_flags_opt -> SLASH . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_flags_opt -> SLASH

State 417:
## Known stack suffix:
## SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt
## LR(1) items:
regex -> SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SSLASH regex_pattern_alternate SLASH regex_replace regex_flags_opt

State 418:
## Known stack suffix:
## block
## LR(1) items:
regex_replace -> block . [ SLASHFLAGS SLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex_replace -> block

State 419:
## Known stack suffix:
## SLASH
## LR(1) items:
regex -> SLASH . regex_pattern_alternate regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
regex -> SLASH . regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On STRING shift to state 393
-- On SLASHFLAGS shift to state 415
-- On SLASH shift to state 416
-- On RANGE shift to state 394
-- On QUOTEDMETA shift to state 395
-- On LPAREN shift to state 396
-- On LBRACE shift to state 278
-- On DOT shift to state 397
-- On DOLLAR shift to state 398
-- On CARET shift to state 399
-- On regex_pattern_sequence shift to state 400
-- On regex_pattern_alternate shift to state 420
-- On regex_pattern shift to state 403
-- On regex_flags_opt shift to state 422
-- On block shift to state 408
## Reductions:

State 420:
## Known stack suffix:
## SLASH regex_pattern_alternate
## LR(1) items:
regex -> SLASH regex_pattern_alternate . regex_flags_opt [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On SLASHFLAGS shift to state 415
-- On SLASH shift to state 416
-- On regex_flags_opt shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## SLASH regex_pattern_alternate regex_flags_opt
## LR(1) items:
regex -> SLASH regex_pattern_alternate regex_flags_opt . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SLASH regex_pattern_alternate regex_flags_opt

State 422:
## Known stack suffix:
## SLASH regex_flags_opt
## LR(1) items:
regex -> SLASH regex_flags_opt . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production regex -> SLASH regex_flags_opt

State 423:
## Known stack suffix:
## infixr_5 EQUALSTILDE regex
## LR(1) items:
infixr_4 -> infixr_5 EQUALSTILDE regex . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_4 -> infixr_5 EQUALSTILDE regex

State 424:
## Known stack suffix:
## infixr_4
## LR(1) items:
infixl_4 -> infixr_4 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_4 -> infixr_4

State 425:
## Known stack suffix:
## infixr_3
## LR(1) items:
infixl_3 -> infixr_3 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_3 -> infixr_3

State 426:
## Known stack suffix:
## infixr_2
## LR(1) items:
infixl_2 -> infixr_2 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_2 -> infixr_2

State 427:
## Known stack suffix:
## infixr_1
## LR(1) items:
infixl_1 -> infixr_1 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_1 -> infixr_1

State 428:
## Known stack suffix:
## infixr_0
## LR(1) items:
infixl_0 -> infixr_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_0 -> infixr_0

State 429:
## Known stack suffix:
## infixl_9
## LR(1) items:
infixl_9 -> infixl_9 . INFIXL9 infixr_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_8 -> infixl_9 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_8 -> infixl_9 . INFIX8 infixl_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_8 -> infixl_9 . INFIXR8 infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_8 -> infixl_9 . COLONCOLON infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR8 shift to state 430
-- On INFIXL9 shift to state 432
-- On INFIX8 shift to state 434
-- On COLONCOLON shift to state 436
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_8 -> infixl_9

State 430:
## Known stack suffix:
## infixl_9 INFIXR8
## LR(1) items:
infixr_8 -> infixl_9 INFIXR8 . infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 431
-- On infixl_9 shift to state 429
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 431:
## Known stack suffix:
## infixl_9 INFIXR8 infixr_8
## LR(1) items:
infixr_8 -> infixl_9 INFIXR8 infixr_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_8 -> infixl_9 INFIXR8 infixr_8

State 432:
## Known stack suffix:
## infixl_9 INFIXL9
## LR(1) items:
infixl_9 -> infixl_9 INFIXL9 . infixr_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 433
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 433:
## Known stack suffix:
## infixl_9 INFIXL9 infixr_9
## LR(1) items:
infixl_9 -> infixl_9 INFIXL9 infixr_9 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_9 -> infixl_9 INFIXL9 infixr_9

State 434:
## Known stack suffix:
## infixl_9 INFIX8
## LR(1) items:
infixr_8 -> infixl_9 INFIX8 . infixl_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixl_9 shift to state 435
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 435:
## Known stack suffix:
## infixl_9 INFIX8 infixl_9
## LR(1) items:
infixl_9 -> infixl_9 . INFIXL9 infixr_9 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_8 -> infixl_9 INFIX8 infixl_9 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL9 shift to state 432
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_8 -> infixl_9 INFIX8 infixl_9

State 436:
## Known stack suffix:
## infixl_9 COLONCOLON
## LR(1) items:
infixr_8 -> infixl_9 COLONCOLON . infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 437
-- On infixl_9 shift to state 429
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 437:
## Known stack suffix:
## infixl_9 COLONCOLON infixr_8
## LR(1) items:
infixr_8 -> infixl_9 COLONCOLON infixr_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_8 -> infixl_9 COLONCOLON infixr_8

State 438:
## Known stack suffix:
## infixl_8
## LR(1) items:
infixl_8 -> infixl_8 . INFIXL8 infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_7 -> infixl_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_7 -> infixl_8 . INFIX7 infixl_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_7 -> infixl_8 . INFIXR7 infixr_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR7 shift to state 439
-- On INFIXL8 shift to state 441
-- On INFIX7 shift to state 443
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_7 -> infixl_8

State 439:
## Known stack suffix:
## infixl_8 INFIXR7
## LR(1) items:
infixr_7 -> infixl_8 INFIXR7 . infixr_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 440
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 440:
## Known stack suffix:
## infixl_8 INFIXR7 infixr_7
## LR(1) items:
infixr_7 -> infixl_8 INFIXR7 infixr_7 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_7 -> infixl_8 INFIXR7 infixr_7

State 441:
## Known stack suffix:
## infixl_8 INFIXL8
## LR(1) items:
infixl_8 -> infixl_8 INFIXL8 . infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 442
-- On infixl_9 shift to state 429
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 442:
## Known stack suffix:
## infixl_8 INFIXL8 infixr_8
## LR(1) items:
infixl_8 -> infixl_8 INFIXL8 infixr_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_8 -> infixl_8 INFIXL8 infixr_8

State 443:
## Known stack suffix:
## infixl_8 INFIX7
## LR(1) items:
infixr_7 -> infixl_8 INFIX7 . infixl_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 444
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 444:
## Known stack suffix:
## infixl_8 INFIX7 infixl_8
## LR(1) items:
infixl_8 -> infixl_8 . INFIXL8 infixr_8 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_7 -> infixl_8 INFIX7 infixl_8 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL8 shift to state 441
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_7 -> infixl_8 INFIX7 infixl_8

State 445:
## Known stack suffix:
## infixl_7
## LR(1) items:
infixl_7 -> infixl_7 . INFIXL7 infixr_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_6 -> infixl_7 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_6 -> infixl_7 . INFIX6 infixl_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_6 -> infixl_7 . INFIXR6 infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR6 shift to state 446
-- On INFIXL7 shift to state 448
-- On INFIX6 shift to state 450
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_6 -> infixl_7

State 446:
## Known stack suffix:
## infixl_7 INFIXR6
## LR(1) items:
infixr_6 -> infixl_7 INFIXR6 . infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 447
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 447:
## Known stack suffix:
## infixl_7 INFIXR6 infixr_6
## LR(1) items:
infixr_6 -> infixl_7 INFIXR6 infixr_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_6 -> infixl_7 INFIXR6 infixr_6

State 448:
## Known stack suffix:
## infixl_7 INFIXL7
## LR(1) items:
infixl_7 -> infixl_7 INFIXL7 . infixr_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 449
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 449:
## Known stack suffix:
## infixl_7 INFIXL7 infixr_7
## LR(1) items:
infixl_7 -> infixl_7 INFIXL7 infixr_7 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_7 -> infixl_7 INFIXL7 infixr_7

State 450:
## Known stack suffix:
## infixl_7 INFIX6
## LR(1) items:
infixr_6 -> infixl_7 INFIX6 . infixl_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 451
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 451:
## Known stack suffix:
## infixl_7 INFIX6 infixl_7
## LR(1) items:
infixl_7 -> infixl_7 . INFIXL7 infixr_7 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_6 -> infixl_7 INFIX6 infixl_7 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL7 shift to state 448
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_6 -> infixl_7 INFIX6 infixl_7

State 452:
## Known stack suffix:
## infixl_6
## LR(1) items:
infixl_6 -> infixl_6 . INFIXL6 infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixl_6 -> infixl_6 . MINUS infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixl_6 -> infixl_6 . MINUSDOT infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_5 -> infixl_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_5 -> infixl_6 . INFIX5 infixl_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_5 -> infixl_6 . INFIXR5 infixr_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On MINUSDOT shift to state 453
-- On MINUS shift to state 455
-- On INFIXR5 shift to state 457
-- On INFIXL6 shift to state 459
-- On INFIX5 shift to state 461
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_5 -> infixl_6

State 453:
## Known stack suffix:
## infixl_6 MINUSDOT
## LR(1) items:
infixl_6 -> infixl_6 MINUSDOT . infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 454
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 454:
## Known stack suffix:
## infixl_6 MINUSDOT infixr_6
## LR(1) items:
infixl_6 -> infixl_6 MINUSDOT infixr_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 MINUSDOT infixr_6

State 455:
## Known stack suffix:
## infixl_6 MINUS
## LR(1) items:
infixl_6 -> infixl_6 MINUS . infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 456
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 456:
## Known stack suffix:
## infixl_6 MINUS infixr_6
## LR(1) items:
infixl_6 -> infixl_6 MINUS infixr_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 MINUS infixr_6

State 457:
## Known stack suffix:
## infixl_6 INFIXR5
## LR(1) items:
infixr_5 -> infixl_6 INFIXR5 . infixr_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 458
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 458:
## Known stack suffix:
## infixl_6 INFIXR5 infixr_5
## LR(1) items:
infixr_5 -> infixl_6 INFIXR5 infixr_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_5 -> infixl_6 INFIXR5 infixr_5

State 459:
## Known stack suffix:
## infixl_6 INFIXL6
## LR(1) items:
infixl_6 -> infixl_6 INFIXL6 . infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 460
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 460:
## Known stack suffix:
## infixl_6 INFIXL6 infixr_6
## LR(1) items:
infixl_6 -> infixl_6 INFIXL6 infixr_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_6 -> infixl_6 INFIXL6 infixr_6

State 461:
## Known stack suffix:
## infixl_6 INFIX5
## LR(1) items:
infixr_5 -> infixl_6 INFIX5 . infixl_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 462
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 462:
## Known stack suffix:
## infixl_6 INFIX5 infixl_6
## LR(1) items:
infixl_6 -> infixl_6 . INFIXL6 infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixl_6 -> infixl_6 . MINUS infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixl_6 -> infixl_6 . MINUSDOT infixr_6 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_5 -> infixl_6 INFIX5 infixl_6 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On MINUSDOT shift to state 453
-- On MINUS shift to state 455
-- On INFIXL6 shift to state 459
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_5 -> infixl_6 INFIX5 infixl_6

State 463:
## Known stack suffix:
## infixl_5
## LR(1) items:
infixl_5 -> infixl_5 . INFIXL5 infixr_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_4 -> infixl_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_4 -> infixl_5 . INFIX4 infixl_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_4 -> infixl_5 . INFIXR4 infixr_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR4 shift to state 464
-- On INFIXL5 shift to state 466
-- On INFIX4 shift to state 468
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_4 -> infixl_5

State 464:
## Known stack suffix:
## infixl_5 INFIXR4
## LR(1) items:
infixr_4 -> infixl_5 INFIXR4 . infixr_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 465
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 465:
## Known stack suffix:
## infixl_5 INFIXR4 infixr_4
## LR(1) items:
infixr_4 -> infixl_5 INFIXR4 infixr_4 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_4 -> infixl_5 INFIXR4 infixr_4

State 466:
## Known stack suffix:
## infixl_5 INFIXL5
## LR(1) items:
infixl_5 -> infixl_5 INFIXL5 . infixr_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 467
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 467:
## Known stack suffix:
## infixl_5 INFIXL5 infixr_5
## LR(1) items:
infixl_5 -> infixl_5 INFIXL5 infixr_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_5 -> infixl_5 INFIXL5 infixr_5

State 468:
## Known stack suffix:
## infixl_5 INFIX4
## LR(1) items:
infixr_4 -> infixl_5 INFIX4 . infixl_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 469
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 470
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 469:
## Known stack suffix:
## infixr_5
## LR(1) items:
infixl_5 -> infixr_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_5 -> infixr_5

State 470:
## Known stack suffix:
## infixl_5 INFIX4 infixl_5
## LR(1) items:
infixl_5 -> infixl_5 . INFIXL5 infixr_5 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_4 -> infixl_5 INFIX4 infixl_5 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL5 shift to state 466
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_4 -> infixl_5 INFIX4 infixl_5

State 471:
## Known stack suffix:
## infixl_4
## LR(1) items:
infixl_4 -> infixl_4 . INFIXL4 infixr_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_3 -> infixl_4 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_3 -> infixl_4 . INFIX3 infixl_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_3 -> infixl_4 . INFIXR3 infixr_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR3 shift to state 472
-- On INFIXL4 shift to state 474
-- On INFIX3 shift to state 476
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_3 -> infixl_4

State 472:
## Known stack suffix:
## infixl_4 INFIXR3
## LR(1) items:
infixr_3 -> infixl_4 INFIXR3 . infixr_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 473
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 473:
## Known stack suffix:
## infixl_4 INFIXR3 infixr_3
## LR(1) items:
infixr_3 -> infixl_4 INFIXR3 infixr_3 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_3 -> infixl_4 INFIXR3 infixr_3

State 474:
## Known stack suffix:
## infixl_4 INFIXL4
## LR(1) items:
infixl_4 -> infixl_4 INFIXL4 . infixr_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 475
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 475:
## Known stack suffix:
## infixl_4 INFIXL4 infixr_4
## LR(1) items:
infixl_4 -> infixl_4 INFIXL4 infixr_4 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_4 -> infixl_4 INFIXL4 infixr_4

State 476:
## Known stack suffix:
## infixl_4 INFIX3
## LR(1) items:
infixr_3 -> infixl_4 INFIX3 . infixl_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 477
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 477:
## Known stack suffix:
## infixl_4 INFIX3 infixl_4
## LR(1) items:
infixl_4 -> infixl_4 . INFIXL4 infixr_4 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_3 -> infixl_4 INFIX3 infixl_4 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL4 shift to state 474
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_3 -> infixl_4 INFIX3 infixl_4

State 478:
## Known stack suffix:
## infixl_3
## LR(1) items:
infixl_3 -> infixl_3 . INFIXL3 infixr_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_2 -> infixl_3 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_2 -> infixl_3 . INFIX2 infixl_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_2 -> infixl_3 . INFIXR2 infixr_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR2 shift to state 479
-- On INFIXL3 shift to state 481
-- On INFIX2 shift to state 483
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_2 -> infixl_3

State 479:
## Known stack suffix:
## infixl_3 INFIXR2
## LR(1) items:
infixr_2 -> infixl_3 INFIXR2 . infixr_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 480
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 480:
## Known stack suffix:
## infixl_3 INFIXR2 infixr_2
## LR(1) items:
infixr_2 -> infixl_3 INFIXR2 infixr_2 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_2 -> infixl_3 INFIXR2 infixr_2

State 481:
## Known stack suffix:
## infixl_3 INFIXL3
## LR(1) items:
infixl_3 -> infixl_3 INFIXL3 . infixr_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 482
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 482:
## Known stack suffix:
## infixl_3 INFIXL3 infixr_3
## LR(1) items:
infixl_3 -> infixl_3 INFIXL3 infixr_3 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_3 -> infixl_3 INFIXL3 infixr_3

State 483:
## Known stack suffix:
## infixl_3 INFIX2
## LR(1) items:
infixr_2 -> infixl_3 INFIX2 . infixl_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 484
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 484:
## Known stack suffix:
## infixl_3 INFIX2 infixl_3
## LR(1) items:
infixl_3 -> infixl_3 . INFIXL3 infixr_3 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_2 -> infixl_3 INFIX2 infixl_3 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL3 shift to state 481
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_2 -> infixl_3 INFIX2 infixl_3

State 485:
## Known stack suffix:
## infixl_2
## LR(1) items:
infixl_2 -> infixl_2 . INFIXL2 infixr_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_1 -> infixl_2 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_1 -> infixl_2 . INFIX1 infixl_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_1 -> infixl_2 . INFIXR1 infixr_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR1 shift to state 486
-- On INFIXL2 shift to state 488
-- On INFIX1 shift to state 490
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_1 -> infixl_2

State 486:
## Known stack suffix:
## infixl_2 INFIXR1
## LR(1) items:
infixr_1 -> infixl_2 INFIXR1 . infixr_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 487
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 487:
## Known stack suffix:
## infixl_2 INFIXR1 infixr_1
## LR(1) items:
infixr_1 -> infixl_2 INFIXR1 infixr_1 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_1 -> infixl_2 INFIXR1 infixr_1

State 488:
## Known stack suffix:
## infixl_2 INFIXL2
## LR(1) items:
infixl_2 -> infixl_2 INFIXL2 . infixr_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 489
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 489:
## Known stack suffix:
## infixl_2 INFIXL2 infixr_2
## LR(1) items:
infixl_2 -> infixl_2 INFIXL2 infixr_2 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_2 -> infixl_2 INFIXL2 infixr_2

State 490:
## Known stack suffix:
## infixl_2 INFIX1
## LR(1) items:
infixr_1 -> infixl_2 INFIX1 . infixl_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 491
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 491:
## Known stack suffix:
## infixl_2 INFIX1 infixl_2
## LR(1) items:
infixl_2 -> infixl_2 . INFIXL2 infixr_2 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_1 -> infixl_2 INFIX1 infixl_2 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL2 shift to state 488
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_1 -> infixl_2 INFIX1 infixl_2

State 492:
## Known stack suffix:
## infixl_1
## LR(1) items:
infixl_1 -> infixl_1 . INFIXL1 infixr_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_0 -> infixl_1 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_0 -> infixl_1 . INFIX0 infixl_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_0 -> infixl_1 . INFIXR0 infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXR0 shift to state 493
-- On INFIXL1 shift to state 495
-- On INFIX0 shift to state 497
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_0 -> infixl_1

State 493:
## Known stack suffix:
## infixl_1 INFIXR0
## LR(1) items:
infixr_0 -> infixl_1 INFIXR0 . infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 494
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 494:
## Known stack suffix:
## infixl_1 INFIXR0 infixr_0
## LR(1) items:
infixr_0 -> infixl_1 INFIXR0 infixr_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixr_0 -> infixl_1 INFIXR0 infixr_0

State 495:
## Known stack suffix:
## infixl_1 INFIXL1
## LR(1) items:
infixl_1 -> infixl_1 INFIXL1 . infixr_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 496
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 496:
## Known stack suffix:
## infixl_1 INFIXL1 infixr_1
## LR(1) items:
infixl_1 -> infixl_1 INFIXL1 infixr_1 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_1 -> infixl_1 INFIXL1 infixr_1

State 497:
## Known stack suffix:
## infixl_1 INFIX0
## LR(1) items:
infixr_0 -> infixl_1 INFIX0 . infixl_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 498
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 498:
## Known stack suffix:
## infixl_1 INFIX0 infixl_1
## LR(1) items:
infixl_1 -> infixl_1 . INFIXL1 infixr_1 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL1 INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
infixr_0 -> infixl_1 INFIX0 infixl_1 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL1 shift to state 495
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production infixr_0 -> infixl_1 INFIX0 infixl_1

State 499:
## Known stack suffix:
## logical_expression BARBAR infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression BARBAR infixl_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 500
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production logical_expression -> logical_expression BARBAR infixl_0

State 500:
## Known stack suffix:
## infixl_0 INFIXL0
## LR(1) items:
infixl_0 -> infixl_0 INFIXL0 . infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 501
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 501:
## Known stack suffix:
## infixl_0 INFIXL0 infixr_0
## LR(1) items:
infixl_0 -> infixl_0 INFIXL0 infixr_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infixl_0 -> infixl_0 INFIXL0 infixr_0

State 502:
## Known stack suffix:
## logical_expression AMPAMP
## LR(1) items:
logical_expression -> logical_expression AMPAMP . infixl_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 503
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 503:
## Known stack suffix:
## logical_expression AMPAMP infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression AMPAMP infixl_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 500
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production logical_expression -> logical_expression AMPAMP infixl_0

State 504:
## Known stack suffix:
## iteration_expression
## LR(1) items:
escape_expression -> iteration_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escape_expression -> iteration_expression

State 505:
## Known stack suffix:
## infixl_0
## LR(1) items:
infixl_0 -> infixl_0 . INFIXL0 infixr_0 [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
logical_expression -> infixl_0 . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On INFIXL0 shift to state 500
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
--   reduce production logical_expression -> infixl_0

State 506:
## Known stack suffix:
## formlet_expression
## LR(1) items:
table_expression -> formlet_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_expression -> formlet_expression

State 507:
## Known stack suffix:
## pattern LLARROW exp
## LR(1) items:
table_generator -> pattern LLARROW exp . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_generator -> pattern LLARROW exp

State 508:
## Known stack suffix:
## escape_expression
## LR(1) items:
formlet_expression -> escape_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> escape_expression

State 509:
## Known stack suffix:
## db_expression
## LR(1) items:
conditional_expression -> db_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> db_expression

State 510:
## Known stack suffix:
## database_expression
## LR(1) items:
exp -> database_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> database_expression

State 511:
## Known stack suffix:
## conditional_expression
## LR(1) items:
case_expression -> conditional_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> conditional_expression

State 512:
## Known stack suffix:
## case_expression
## LR(1) items:
iteration_expression -> case_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_expression -> case_expression

State 513:
## Known stack suffix:
## LPAREN exps
## LR(1) items:
arg_spec -> LPAREN exps . RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 514
## Reductions:

State 514:
## Known stack suffix:
## LPAREN exps RPAREN
## LR(1) items:
arg_spec -> LPAREN exps RPAREN . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_spec -> LPAREN exps RPAREN

State 515:
## Known stack suffix:
## exp
## LR(1) items:
exps -> exp . COMMA exps [ RPAREN RBRACKET ]
exps -> exp . [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 516
## Reductions:
-- On RPAREN RBRACKET
--   reduce production exps -> exp

State 516:
## Known stack suffix:
## exp COMMA
## LR(1) items:
exps -> exp COMMA . exps [ RPAREN RBRACKET ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exps shift to state 517
-- On exp shift to state 515
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 517:
## Known stack suffix:
## exp COMMA exps
## LR(1) items:
exps -> exp COMMA exps . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exps -> exp COMMA exps

State 518:
## Known stack suffix:
## ORDERBY LPAREN exps
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN exps . RPAREN [ VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On RPAREN shift to state 519
## Reductions:

State 519:
## Known stack suffix:
## ORDERBY LPAREN exps RPAREN
## LR(1) items:
perhaps_orderby -> ORDERBY LPAREN exps RPAREN . [ VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_orderby -> ORDERBY LPAREN exps RPAREN

State 520:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 521
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 521:
## Known stack suffix:
## FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp
## LR(1) items:
iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_expression -> FOR LPAREN perhaps_generators RPAREN perhaps_where perhaps_orderby exp

State 522:
## Known stack suffix:
## pattern
## LR(1) items:
list_generator -> pattern . LARROW exp [ RPAREN COMMA ]
table_generator -> pattern . LLARROW exp [ RPAREN COMMA ]
## Transitions:
-- On LLARROW shift to state 355
-- On LARROW shift to state 523
## Reductions:

State 523:
## Known stack suffix:
## pattern LARROW
## LR(1) items:
list_generator -> pattern LARROW . exp [ RPAREN COMMA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 524
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 524:
## Known stack suffix:
## pattern LARROW exp
## LR(1) items:
list_generator -> pattern LARROW exp . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_generator -> pattern LARROW exp

State 525:
## Known stack suffix:
## list_generator
## LR(1) items:
generator -> list_generator . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generator -> list_generator

State 526:
## Known stack suffix:
## generators
## LR(1) items:
perhaps_generators -> generators . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_generators -> generators

State 527:
## Known stack suffix:
## generator
## LR(1) items:
generators -> generator . [ RPAREN ]
generators -> generator . COMMA generators [ RPAREN ]
## Transitions:
-- On COMMA shift to state 528
## Reductions:
-- On RPAREN
--   reduce production generators -> generator

State 528:
## Known stack suffix:
## generator COMMA
## LR(1) items:
generators -> generator COMMA . generators [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On table_generator shift to state 334
-- On primary_pattern shift to state 239
-- On pattern shift to state 522
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On list_generator shift to state 525
-- On generators shift to state 529
-- On generator shift to state 527
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 529:
## Known stack suffix:
## generator COMMA generators
## LR(1) items:
generators -> generator COMMA generators . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production generators -> generator COMMA generators

State 530:
## Known stack suffix:
## FORMLET xml YIELDS exp
## LR(1) items:
formlet_expression -> FORMLET xml YIELDS exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_expression -> FORMLET xml YIELDS exp

State 531:
## Known stack suffix:
## IF LPAREN exp
## LR(1) items:
conditional_expression -> IF LPAREN exp . RPAREN exp ELSE exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 532
## Reductions:

State 532:
## Known stack suffix:
## IF LPAREN exp RPAREN
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN . exp ELSE exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 533
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 533:
## Known stack suffix:
## IF LPAREN exp RPAREN exp
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp . ELSE exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On ELSE shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## IF LPAREN exp RPAREN exp ELSE
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp ELSE . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 535
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 535:
## Known stack suffix:
## IF LPAREN exp RPAREN exp ELSE exp
## LR(1) items:
conditional_expression -> IF LPAREN exp RPAREN exp ELSE exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> IF LPAREN exp RPAREN exp ELSE exp

State 536:
## Known stack suffix:
## INSERT exp
## LR(1) items:
database_expression -> INSERT exp . VALUES LPAREN RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LPAREN record_labels RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp . VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VALUES shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## INSERT exp VALUES
## LR(1) items:
database_expression -> INSERT exp VALUES . LPAREN RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LPAREN record_labels RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LPAREN RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LPAREN record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES . LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 538
-- On LBRACKET shift to state 553
## Reductions:

State 538:
## Known stack suffix:
## INSERT exp VALUES LPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN . RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN . record_labels RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN . RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN . record_labels RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On RPAREN shift to state 539
-- On CONSTRUCTOR shift to state 173
-- On record_labels shift to state 544
-- On record_label shift to state 550
-- On field_label shift to state 224
## Reductions:

State 539:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN RPAREN . db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 540
-- On escape_expression shift to state 508
-- On db_expression shift to state 541
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 540:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN exp
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN RPAREN exp

State 541:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression
## LR(1) items:
conditional_expression -> db_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression . RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RETURNING shift to state 542
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production conditional_expression -> db_expression

State 542:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING . VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 543
## Reductions:

State 543:
## Known stack suffix:
## INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN RPAREN db_expression RETURNING VARIABLE

State 544:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels . RPAREN exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN record_labels . RPAREN db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN . db_expression RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 546
-- On escape_expression shift to state 508
-- On db_expression shift to state 547
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 546:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN exp
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN exp

State 547:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression
## LR(1) items:
conditional_expression -> db_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression . RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RETURNING shift to state 548
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production conditional_expression -> db_expression

State 548:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING . VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LPAREN record_labels RPAREN db_expression RETURNING VARIABLE

State 550:
## Known stack suffix:
## record_label
## LR(1) items:
record_labels -> record_label . COMMA record_labels [ RPAREN ]
record_labels -> record_label . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 551
## Reductions:
-- On RPAREN
--   reduce production record_labels -> record_label

State 551:
## Known stack suffix:
## record_label COMMA
## LR(1) items:
record_labels -> record_label COMMA . record_labels [ RPAREN ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_labels shift to state 552
-- On record_label shift to state 550
-- On field_label shift to state 224
## Reductions:

State 552:
## Known stack suffix:
## record_label COMMA record_labels
## LR(1) items:
record_labels -> record_label COMMA record_labels . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_labels -> record_label COMMA record_labels

State 553:
## Known stack suffix:
## INSERT exp VALUES LBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET . LPAREN labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET . LPAREN RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET . LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN . labeled_exps RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN . RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN . labeled_exps RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On RPAREN shift to state 555
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 559
-- On labeled_exps shift to state 564
-- On field_label shift to state 224
## Reductions:

State 555:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN . RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RBRACKET shift to state 556
## Reductions:

State 556:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET . RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RETURNING shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING . VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 558
## Reductions:

State 558:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN RPAREN RBRACKET RETURNING VARIABLE

State 559:
## Known stack suffix:
## record_label
## LR(1) items:
labeled_exps -> record_label . EQ exp [ VBAR RPAREN ]
labeled_exps -> record_label . EQ exp COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On EQ shift to state 560
## Reductions:

State 560:
## Known stack suffix:
## record_label EQ
## LR(1) items:
labeled_exps -> record_label EQ . exp [ VBAR RPAREN ]
labeled_exps -> record_label EQ . exp COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 561
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 561:
## Known stack suffix:
## record_label EQ exp
## LR(1) items:
labeled_exps -> record_label EQ exp . [ VBAR RPAREN ]
labeled_exps -> record_label EQ exp . COMMA labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On COMMA shift to state 562
## Reductions:
-- On VBAR RPAREN
--   reduce production labeled_exps -> record_label EQ exp

State 562:
## Known stack suffix:
## record_label EQ exp COMMA
## LR(1) items:
labeled_exps -> record_label EQ exp COMMA . labeled_exps [ VBAR RPAREN ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 559
-- On labeled_exps shift to state 563
-- On field_label shift to state 224
## Reductions:

State 563:
## Known stack suffix:
## record_label EQ exp COMMA labeled_exps
## LR(1) items:
labeled_exps -> record_label EQ exp COMMA labeled_exps . [ VBAR RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_exps -> record_label EQ exp COMMA labeled_exps

State 564:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps . RPAREN RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps . RPAREN RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN . RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN . RBRACKET RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RBRACKET shift to state 566
## Reductions:

State 566:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET . RETURNING VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RETURNING shift to state 567
## Reductions:
-- On WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
--   reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET

State 567:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING . VARIABLE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE
## LR(1) items:
database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production database_expression -> INSERT exp VALUES LBRACKET LPAREN labeled_exps RPAREN RBRACKET RETURNING VARIABLE

State 569:
## Known stack suffix:
## LBRACKET exps
## LR(1) items:
primary_expression -> LBRACKET exps . RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 570
## Reductions:

State 570:
## Known stack suffix:
## LBRACKET exps RBRACKET
## LR(1) items:
primary_expression -> LBRACKET exps RBRACKET . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET exps RBRACKET

State 571:
## Known stack suffix:
## LBRACKET exp
## LR(1) items:
exps -> exp . COMMA exps [ RBRACKET ]
exps -> exp . [ RBRACKET ]
primary_expression -> LBRACKET exp . DOTDOT exp RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On DOTDOT shift to state 572
-- On COMMA shift to state 516
## Reductions:
-- On RBRACKET
--   reduce production exps -> exp

State 572:
## Known stack suffix:
## LBRACKET exp DOTDOT
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT . exp RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 573
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 573:
## Known stack suffix:
## LBRACKET exp DOTDOT exp
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT exp . RBRACKET [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 574
## Reductions:

State 574:
## Known stack suffix:
## LBRACKET exp DOTDOT exp RBRACKET
## LR(1) items:
primary_expression -> LBRACKET exp DOTDOT exp RBRACKET . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LBRACKET exp DOTDOT exp RBRACKET

State 575:
## Known stack suffix:
## MINUSDOT unary_expression
## LR(1) items:
unary_expression -> MINUSDOT unary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> MINUSDOT unary_expression

State 576:
## Known stack suffix:
## MINUS
## LR(1) items:
binop -> MINUS . [ RPAREN ]
unary_expression -> MINUS . unary_expression [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 577
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:
-- On RPAREN
--   reduce production binop -> MINUS

State 577:
## Known stack suffix:
## MINUS unary_expression
## LR(1) items:
unary_expression -> MINUS unary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> MINUS unary_expression

State 578:
## Known stack suffix:
## INFIXR9
## LR(1) items:
op -> INFIXR9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR9

State 579:
## Known stack suffix:
## INFIXR8
## LR(1) items:
op -> INFIXR8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR8

State 580:
## Known stack suffix:
## INFIXR7
## LR(1) items:
op -> INFIXR7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR7

State 581:
## Known stack suffix:
## INFIXR6
## LR(1) items:
op -> INFIXR6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR6

State 582:
## Known stack suffix:
## INFIXR5
## LR(1) items:
op -> INFIXR5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR5

State 583:
## Known stack suffix:
## INFIXR4
## LR(1) items:
op -> INFIXR4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR4

State 584:
## Known stack suffix:
## INFIXR3
## LR(1) items:
op -> INFIXR3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR3

State 585:
## Known stack suffix:
## INFIXR2
## LR(1) items:
op -> INFIXR2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR2

State 586:
## Known stack suffix:
## INFIXR1
## LR(1) items:
op -> INFIXR1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR1

State 587:
## Known stack suffix:
## INFIXR0
## LR(1) items:
op -> INFIXR0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXR0

State 588:
## Known stack suffix:
## INFIXL9
## LR(1) items:
op -> INFIXL9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL9

State 589:
## Known stack suffix:
## INFIXL8
## LR(1) items:
op -> INFIXL8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL8

State 590:
## Known stack suffix:
## INFIXL7
## LR(1) items:
op -> INFIXL7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL7

State 591:
## Known stack suffix:
## INFIXL6
## LR(1) items:
op -> INFIXL6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL6

State 592:
## Known stack suffix:
## INFIXL5
## LR(1) items:
op -> INFIXL5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL5

State 593:
## Known stack suffix:
## INFIXL4
## LR(1) items:
op -> INFIXL4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL4

State 594:
## Known stack suffix:
## INFIXL3
## LR(1) items:
op -> INFIXL3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL3

State 595:
## Known stack suffix:
## INFIXL2
## LR(1) items:
op -> INFIXL2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL2

State 596:
## Known stack suffix:
## INFIXL1
## LR(1) items:
op -> INFIXL1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL1

State 597:
## Known stack suffix:
## INFIXL0
## LR(1) items:
op -> INFIXL0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIXL0

State 598:
## Known stack suffix:
## INFIX9
## LR(1) items:
op -> INFIX9 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX9

State 599:
## Known stack suffix:
## INFIX8
## LR(1) items:
op -> INFIX8 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX8

State 600:
## Known stack suffix:
## INFIX7
## LR(1) items:
op -> INFIX7 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX7

State 601:
## Known stack suffix:
## INFIX6
## LR(1) items:
op -> INFIX6 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX6

State 602:
## Known stack suffix:
## INFIX5
## LR(1) items:
op -> INFIX5 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX5

State 603:
## Known stack suffix:
## INFIX4
## LR(1) items:
op -> INFIX4 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX4

State 604:
## Known stack suffix:
## INFIX3
## LR(1) items:
op -> INFIX3 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX3

State 605:
## Known stack suffix:
## INFIX2
## LR(1) items:
op -> INFIX2 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX2

State 606:
## Known stack suffix:
## INFIX1
## LR(1) items:
op -> INFIX1 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX1

State 607:
## Known stack suffix:
## INFIX0
## LR(1) items:
op -> INFIX0 . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op -> INFIX0

State 608:
## Known stack suffix:
## LPAREN DOT
## LR(1) items:
parenthesized_thing -> LPAREN DOT . record_label RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 609
-- On field_label shift to state 224
## Reductions:

State 609:
## Known stack suffix:
## LPAREN DOT record_label
## LR(1) items:
parenthesized_thing -> LPAREN DOT record_label . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## LPAREN DOT record_label RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN DOT record_label RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN DOT record_label RPAREN

State 611:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
constructor_expression -> CONSTRUCTOR . [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR AMPAMP ]
constructor_expression -> CONSTRUCTOR . parenthesized_thing [ WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR AMPAMP ]
field_label -> CONSTRUCTOR . [ EQ ]
## Transitions:
-- On LPAREN shift to state 311
-- On parenthesized_thing shift to state 365
## Reductions:
-- On WITH RPAREN MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE COMMA COLONCOLON COLON BARBAR AMPAMP
--   reduce production constructor_expression -> CONSTRUCTOR
-- On EQ
--   reduce production field_label -> CONSTRUCTOR

State 612:
## Known stack suffix:
## op
## LR(1) items:
binop -> op . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> op

State 613:
## Known stack suffix:
## LPAREN labeled_exps
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps . VBAR exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
parenthesized_thing -> LPAREN labeled_exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VBAR shift to state 614
-- On RPAREN shift to state 617
## Reductions:

State 614:
## Known stack suffix:
## LPAREN labeled_exps VBAR
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR . exp RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 615
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 615:
## Known stack suffix:
## LPAREN labeled_exps VBAR exp
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR exp . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## LPAREN labeled_exps VBAR exp RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps VBAR exp RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN labeled_exps VBAR exp RPAREN

State 617:
## Known stack suffix:
## LPAREN labeled_exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN labeled_exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN labeled_exps RPAREN

State 618:
## Known stack suffix:
## LPAREN exps
## LR(1) items:
parenthesized_thing -> LPAREN exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## LPAREN exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN exps RPAREN

State 620:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
exps -> exp . COMMA exps [ RPAREN ]
exps -> exp . [ RPAREN ]
parenthesized_thing -> LPAREN exp . WITH labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On WITH shift to state 621
-- On COMMA shift to state 516
## Reductions:
-- On RPAREN
--   reduce production exps -> exp

State 621:
## Known stack suffix:
## LPAREN exp WITH
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH . labeled_exps RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 559
-- On labeled_exps shift to state 622
-- On field_label shift to state 224
## Reductions:

State 622:
## Known stack suffix:
## LPAREN exp WITH labeled_exps
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH labeled_exps . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## LPAREN exp WITH labeled_exps RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN exp WITH labeled_exps RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN exp WITH labeled_exps RPAREN

State 624:
## Known stack suffix:
## LPAREN binop
## LR(1) items:
parenthesized_thing -> LPAREN binop . RPAREN [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RPAREN shift to state 625
## Reductions:

State 625:
## Known stack suffix:
## LPAREN binop RPAREN
## LR(1) items:
parenthesized_thing -> LPAREN binop RPAREN . [ WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parenthesized_thing -> LPAREN binop RPAREN

State 626:
## Known stack suffix:
## LBRACEBAR exp
## LR(1) items:
page_placement -> LBRACEBAR exp . BARRBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On BARRBRACE shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## LBRACEBAR exp BARRBRACE
## LR(1) items:
page_placement -> LBRACEBAR exp BARRBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production page_placement -> LBRACEBAR exp BARRBRACE

State 628:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . block_contents RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_binding -> LBRACE . logical_expression RARROW pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE . logical_expression FATRARROW logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE . logical_expression FATRARROW logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 279
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SEMICOLON shift to state 297
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 629
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 633
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On perhaps_semi shift to state 635
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 636
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 646
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block_contents shift to state 648
-- On block shift to state 374
-- On bindings shift to state 650
-- On binding shift to state 654
-- On atomic_expression shift to state 375
## Reductions:
-- On RBRACE
--   reduce production perhaps_semi ->

State 629:
## Known stack suffix:
## FUN
## LR(1) items:
binding -> FUN . var arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
primary_expression -> FUN . arg_lists block [ SEMICOLON RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE DOT COLONCOLON COLON CASE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 8
-- On LPAREN shift to state 321
-- On var shift to state 630
-- On multi_args shift to state 325
-- On arg_lists shift to state 327
## Reductions:

State 630:
## Known stack suffix:
## FUN var
## LR(1) items:
binding -> FUN var . arg_lists block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On LPAREN shift to state 321
-- On multi_args shift to state 325
-- On arg_lists shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## FUN var arg_lists
## LR(1) items:
binding -> FUN var arg_lists . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## FUN var arg_lists block
## LR(1) items:
binding -> FUN var arg_lists block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> FUN var arg_lists block

State 633:
## Known stack suffix:
## typedecl
## LR(1) items:
binding -> typedecl . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On SEMICOLON shift to state 634
## Reductions:

State 634:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
binding -> typedecl SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> typedecl SEMICOLON

State 635:
## Known stack suffix:
## perhaps_semi
## LR(1) items:
block_contents -> perhaps_semi . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_contents -> perhaps_semi

State 636:
## Known stack suffix:
## LBRACE logical_expression
## LR(1) items:
formlet_binding -> LBRACE logical_expression . RARROW pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression . FATRARROW logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression . FATRARROW logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ SEMICOLON RBRACE RARROW FATRARROW COLON BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ SEMICOLON RBRACE RARROW FATRARROW COLON BARBAR AMPAMP ]
typed_expression -> logical_expression . [ SEMICOLON RBRACE COLON ]
## Transitions:
-- On RARROW shift to state 637
-- On FATRARROW shift to state 640
-- On BARBAR shift to state 385
-- On AMPAMP shift to state 502
## Reductions:
-- On SEMICOLON RBRACE COLON
--   reduce production typed_expression -> logical_expression

State 637:
## Known stack suffix:
## LBRACE logical_expression RARROW
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW . pattern RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 638
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 638:
## Known stack suffix:
## LBRACE logical_expression RARROW pattern
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW pattern . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On RBRACE shift to state 639
## Reductions:

State 639:
## Known stack suffix:
## LBRACE logical_expression RARROW pattern RBRACE
## LR(1) items:
formlet_binding -> LBRACE logical_expression RARROW pattern RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_binding -> LBRACE logical_expression RARROW pattern RBRACE

State 640:
## Known stack suffix:
## LBRACE logical_expression FATRARROW
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW . logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression FATRARROW . logical_expression WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 641
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 641:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression . WITH logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ WITH RBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ WITH RBRACE BARBAR AMPAMP ]
## Transitions:
-- On WITH shift to state 642
-- On RBRACE shift to state 645
-- On BARBAR shift to state 385
-- On AMPAMP shift to state 502
## Reductions:

State 642:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH . logical_expression RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On FUN shift to state 320
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 643
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 643:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH logical_expression
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression . RBRACE [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
logical_expression -> logical_expression . BARBAR infixl_0 [ RBRACE BARBAR AMPAMP ]
logical_expression -> logical_expression . AMPAMP infixl_0 [ RBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACE shift to state 644
-- On BARBAR shift to state 385
-- On AMPAMP shift to state 502
## Reductions:

State 644:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_placement -> LBRACE logical_expression FATRARROW logical_expression WITH logical_expression RBRACE

State 645:
## Known stack suffix:
## LBRACE logical_expression FATRARROW logical_expression RBRACE
## LR(1) items:
formlet_placement -> LBRACE logical_expression FATRARROW logical_expression RBRACE . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formlet_placement -> LBRACE logical_expression FATRARROW logical_expression RBRACE

State 646:
## Known stack suffix:
## exp
## LR(1) items:
binding -> exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
block_contents -> exp . SEMICOLON [ RBRACE CASE ]
block_contents -> exp . [ RBRACE CASE ]
## Transitions:
-- On SEMICOLON shift to state 647
## Reductions:
-- On RBRACE CASE
--   reduce production block_contents -> exp

State 647:
## Known stack suffix:
## exp SEMICOLON
## LR(1) items:
binding -> exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
block_contents -> exp SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production binding -> exp SEMICOLON
-- On RBRACE CASE
--   reduce production block_contents -> exp SEMICOLON

State 648:
## Known stack suffix:
## LBRACE block_contents
## LR(1) items:
block -> LBRACE block_contents . RBRACE [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING STAR SPAWNWAIT SPAWN SLASHRXML SLASHFLAGS SLASH SIG SEMICOLON RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACEBAR LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF FUN FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DOLLAR DELETE DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CDATA CASE CARET BARRBRACE BARBAR AMPAMP ALTERNATE ALIEN ]
## Transitions:
-- On RBRACE shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## LBRACE block_contents RBRACE
## LR(1) items:
block -> LBRACE block_contents RBRACE . [ WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING STAR SPAWNWAIT SPAWN SLASHRXML SLASHFLAGS SLASH SIG SEMICOLON RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACEBAR LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF FUN FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DOLLAR DELETE DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CDATA CASE CARET BARRBRACE BARBAR AMPAMP ALTERNATE ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> LBRACE block_contents RBRACE

State 650:
## Known stack suffix:
## bindings
## LR(1) items:
bindings -> bindings . binding [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
block_contents -> bindings . exp SEMICOLON [ RBRACE CASE ]
block_contents -> bindings . exp [ RBRACE CASE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 279
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 629
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 633
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 651
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On binding shift to state 653
-- On atomic_expression shift to state 375
## Reductions:

State 651:
## Known stack suffix:
## bindings exp
## LR(1) items:
binding -> exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
block_contents -> bindings exp . SEMICOLON [ RBRACE CASE ]
block_contents -> bindings exp . [ RBRACE CASE ]
## Transitions:
-- On SEMICOLON shift to state 652
## Reductions:
-- On RBRACE CASE
--   reduce production block_contents -> bindings exp

State 652:
## Known stack suffix:
## bindings exp SEMICOLON
## LR(1) items:
binding -> exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
block_contents -> bindings exp SEMICOLON . [ RBRACE CASE ]
## Transitions:
## Reductions:
-- On VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
--   reduce production binding -> exp SEMICOLON
-- On RBRACE CASE
--   reduce production block_contents -> bindings exp SEMICOLON

State 653:
## Known stack suffix:
## bindings binding
## LR(1) items:
bindings -> bindings binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> bindings binding

State 654:
## Known stack suffix:
## binding
## LR(1) items:
bindings -> binding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> binding

State 655:
## Known stack suffix:
## LXML RXML ENDTAG
## LR(1) items:
xml_tree -> LXML RXML ENDTAG . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML RXML ENDTAG

State 656:
## Known stack suffix:
## CDATA
## LR(1) items:
xml_contents -> CDATA . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> CDATA

State 657:
## Known stack suffix:
## xml_tree
## LR(1) items:
xml_contents -> xml_tree . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> xml_tree

State 658:
## Known stack suffix:
## LXML RXML xml_contents_list
## LR(1) items:
xml_tree -> LXML RXML xml_contents_list . ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On ENDTAG shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## LXML RXML xml_contents_list ENDTAG
## LR(1) items:
xml_tree -> LXML RXML xml_contents_list ENDTAG . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML RXML xml_contents_list ENDTAG

State 660:
## Known stack suffix:
## xml_contents
## LR(1) items:
xml_contents_list -> xml_contents . [ ENDTAG ]
xml_contents_list -> xml_contents . xml_contents_list [ ENDTAG ]
## Transitions:
-- On LXML shift to state 303
-- On LBRACEBAR shift to state 307
-- On LBRACE shift to state 628
-- On CDATA shift to state 656
-- On xml_tree shift to state 657
-- On xml_contents_list shift to state 661
-- On xml_contents shift to state 660
-- On page_placement shift to state 662
-- On formlet_placement shift to state 663
-- On formlet_binding shift to state 664
-- On block shift to state 665
## Reductions:
-- On ENDTAG
--   reduce production xml_contents_list -> xml_contents

State 661:
## Known stack suffix:
## xml_contents xml_contents_list
## LR(1) items:
xml_contents_list -> xml_contents xml_contents_list . [ ENDTAG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents_list -> xml_contents xml_contents_list

State 662:
## Known stack suffix:
## page_placement
## LR(1) items:
xml_contents -> page_placement . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> page_placement

State 663:
## Known stack suffix:
## formlet_placement
## LR(1) items:
xml_contents -> formlet_placement . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> formlet_placement

State 664:
## Known stack suffix:
## formlet_binding
## LR(1) items:
xml_contents -> formlet_binding . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> formlet_binding

State 665:
## Known stack suffix:
## block
## LR(1) items:
xml_contents -> block . [ LXML LBRACEBAR LBRACE ENDTAG CDATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_contents -> block

State 666:
## Known stack suffix:
## xmlid
## LR(1) items:
attr -> xmlid . EQ LQUOTE attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid . EQ LQUOTE RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On EQ shift to state 667
## Reductions:

State 667:
## Known stack suffix:
## xmlid EQ
## LR(1) items:
attr -> xmlid EQ . LQUOTE attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid EQ . LQUOTE RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On LQUOTE shift to state 668
## Reductions:

State 668:
## Known stack suffix:
## xmlid EQ LQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE . attr_val RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
attr -> xmlid EQ LQUOTE . RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On STRING shift to state 669
-- On RQUOTE shift to state 673
-- On LBRACE shift to state 278
-- On block shift to state 670
-- On attr_val shift to state 674
## Reductions:

State 669:
## Known stack suffix:
## STRING
## LR(1) items:
attr_val -> STRING . [ RQUOTE ]
attr_val -> STRING . attr_val [ RQUOTE ]
## Transitions:
-- On STRING shift to state 669
-- On LBRACE shift to state 278
-- On block shift to state 670
-- On attr_val shift to state 672
## Reductions:
-- On RQUOTE
--   reduce production attr_val -> STRING

State 670:
## Known stack suffix:
## block
## LR(1) items:
attr_val -> block . [ RQUOTE ]
attr_val -> block . attr_val [ RQUOTE ]
## Transitions:
-- On STRING shift to state 669
-- On LBRACE shift to state 278
-- On block shift to state 670
-- On attr_val shift to state 671
## Reductions:
-- On RQUOTE
--   reduce production attr_val -> block

State 671:
## Known stack suffix:
## block attr_val
## LR(1) items:
attr_val -> block attr_val . [ RQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_val -> block attr_val

State 672:
## Known stack suffix:
## STRING attr_val
## LR(1) items:
attr_val -> STRING attr_val . [ RQUOTE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_val -> STRING attr_val

State 673:
## Known stack suffix:
## xmlid EQ LQUOTE RQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE RQUOTE . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr -> xmlid EQ LQUOTE RQUOTE

State 674:
## Known stack suffix:
## xmlid EQ LQUOTE attr_val
## LR(1) items:
attr -> xmlid EQ LQUOTE attr_val . RQUOTE [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
-- On RQUOTE shift to state 675
## Reductions:

State 675:
## Known stack suffix:
## xmlid EQ LQUOTE attr_val RQUOTE
## LR(1) items:
attr -> xmlid EQ LQUOTE attr_val RQUOTE . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr -> xmlid EQ LQUOTE attr_val RQUOTE

State 676:
## Known stack suffix:
## block
## LR(1) items:
attrs -> block . [ SLASHRXML RXML ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrs -> block

State 677:
## Known stack suffix:
## LXML attrs
## LR(1) items:
xml_tree -> LXML attrs . RXML ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML attrs . SLASHRXML [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML attrs . RXML xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On SLASHRXML shift to state 678
-- On RXML shift to state 679
## Reductions:

State 678:
## Known stack suffix:
## LXML attrs SLASHRXML
## LR(1) items:
xml_tree -> LXML attrs SLASHRXML . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs SLASHRXML

State 679:
## Known stack suffix:
## LXML attrs RXML
## LR(1) items:
xml_tree -> LXML attrs RXML . ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
xml_tree -> LXML attrs RXML . xml_contents_list ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LXML shift to state 303
-- On LBRACEBAR shift to state 307
-- On LBRACE shift to state 628
-- On ENDTAG shift to state 680
-- On CDATA shift to state 656
-- On xml_tree shift to state 657
-- On xml_contents_list shift to state 681
-- On xml_contents shift to state 660
-- On page_placement shift to state 662
-- On formlet_placement shift to state 663
-- On formlet_binding shift to state 664
-- On block shift to state 665
## Reductions:

State 680:
## Known stack suffix:
## LXML attrs RXML ENDTAG
## LR(1) items:
xml_tree -> LXML attrs RXML ENDTAG . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs RXML ENDTAG

State 681:
## Known stack suffix:
## LXML attrs RXML xml_contents_list
## LR(1) items:
xml_tree -> LXML attrs RXML xml_contents_list . ENDTAG [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On ENDTAG shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## LXML attrs RXML xml_contents_list ENDTAG
## LR(1) items:
xml_tree -> LXML attrs RXML xml_contents_list ENDTAG . [ YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production xml_tree -> LXML attrs RXML xml_contents_list ENDTAG

State 683:
## Known stack suffix:
## attr_list
## LR(1) items:
attr_list -> attr_list . attr [ VARIABLE SLASHRXML RXML LBRACE ]
attrs -> attr_list . [ SLASHRXML RXML ]
attrs -> attr_list . block [ SLASHRXML RXML ]
## Transitions:
-- On VARIABLE shift to state 304
-- On LBRACE shift to state 278
-- On xmlid shift to state 666
-- On block shift to state 684
-- On attr shift to state 685
## Reductions:
-- On SLASHRXML RXML
--   reduce production attrs -> attr_list

State 684:
## Known stack suffix:
## attr_list block
## LR(1) items:
attrs -> attr_list block . [ SLASHRXML RXML ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attrs -> attr_list block

State 685:
## Known stack suffix:
## attr_list attr
## LR(1) items:
attr_list -> attr_list attr . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_list -> attr_list attr

State 686:
## Known stack suffix:
## attr
## LR(1) items:
attr_list -> attr . [ VARIABLE SLASHRXML RXML LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_list -> attr

State 687:
## Known stack suffix:
## PREFIXOP unary_expression
## LR(1) items:
unary_expression -> PREFIXOP unary_expression . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> PREFIXOP unary_expression

State 688:
## Known stack suffix:
## QUERY LBRACKET exp
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp . RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
postfix_expression -> QUERY LBRACKET exp . COMMA exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 689
-- On COMMA shift to state 691
## Reductions:

State 689:
## Known stack suffix:
## QUERY LBRACKET exp RBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp RBRACKET . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 690
## Reductions:

State 690:
## Known stack suffix:
## QUERY LBRACKET exp RBRACKET block
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp RBRACKET block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY LBRACKET exp RBRACKET block

State 691:
## Known stack suffix:
## QUERY LBRACKET exp COMMA
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA . exp RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 692
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 692:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp . RBRACKET block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On RBRACKET shift to state 693
## Reductions:

State 693:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp RBRACKET
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET . block [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## QUERY LBRACKET exp COMMA exp RBRACKET block
## LR(1) items:
postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY LBRACKET exp COMMA exp RBRACKET block

State 695:
## Known stack suffix:
## QUERY block
## LR(1) items:
postfix_expression -> QUERY block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> QUERY block

State 696:
## Known stack suffix:
## CASE pattern RARROW block_contents
## LR(1) items:
case -> CASE pattern RARROW block_contents . [ RBRACE CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> CASE pattern RARROW block_contents

State 697:
## Known stack suffix:
## RECEIVE LBRACE perhaps_cases
## LR(1) items:
case_expression -> RECEIVE LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RBRACE shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## RECEIVE LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> RECEIVE LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> RECEIVE LBRACE perhaps_cases RBRACE

State 699:
## Known stack suffix:
## cases
## LR(1) items:
perhaps_cases -> cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_cases -> cases

State 700:
## Known stack suffix:
## case
## LR(1) items:
cases -> case . [ RBRACE ]
cases -> case . cases [ RBRACE ]
## Transitions:
-- On CASE shift to state 286
-- On cases shift to state 701
-- On case shift to state 700
## Reductions:
-- On RBRACE
--   reduce production cases -> case

State 701:
## Known stack suffix:
## case cases
## LR(1) items:
cases -> case cases . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> case cases

State 702:
## Known stack suffix:
## VAR pattern EQ exp
## LR(1) items:
binding -> VAR pattern EQ exp . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
-- On SEMICOLON shift to state 703
## Reductions:

State 703:
## Known stack suffix:
## VAR pattern EQ exp SEMICOLON
## LR(1) items:
binding -> VAR pattern EQ exp SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> VAR pattern EQ exp SEMICOLON

State 704:
## Known stack suffix:
## SPAWNWAIT block
## LR(1) items:
postfix_expression -> SPAWNWAIT block . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> SPAWNWAIT block

State 705:
## Known stack suffix:
## SWITCH LPAREN exp
## LR(1) items:
case_expression -> SWITCH LPAREN exp . RPAREN LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 706
## Reductions:

State 706:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN . LBRACE perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LBRACE shift to state 707
## Reductions:

State 707:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE . perhaps_cases RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On CASE shift to state 286
-- On perhaps_cases shift to state 708
-- On cases shift to state 699
-- On case shift to state 700
## Reductions:
-- On RBRACE
--   reduce production perhaps_cases ->

State 708:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE perhaps_cases
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases . RBRACE [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RBRACE shift to state 709
## Reductions:

State 709:
## Known stack suffix:
## SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE
## LR(1) items:
case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_expression -> SWITCH LPAREN exp RPAREN LBRACE perhaps_cases RBRACE

State 710:
## Known stack suffix:
## TABLE exp
## LR(1) items:
table_expression -> TABLE exp . WITH datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On WITH shift to state 711
## Reductions:

State 711:
## Known stack suffix:
## TABLE exp WITH
## LR(1) items:
table_expression -> TABLE exp WITH . datatype perhaps_table_constraints FROM exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 712
## Reductions:

State 712:
## Known stack suffix:
## TABLE exp WITH datatype
## LR(1) items:
table_expression -> TABLE exp WITH datatype . perhaps_table_constraints FROM exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On WHERE shift to state 713
-- On perhaps_table_constraints shift to state 723
## Reductions:
-- On FROM
--   reduce production perhaps_table_constraints ->

State 713:
## Known stack suffix:
## WHERE
## LR(1) items:
perhaps_table_constraints -> WHERE . table_constraints [ FROM ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On table_constraints shift to state 714
-- On record_label shift to state 715
-- On field_label shift to state 224
## Reductions:

State 714:
## Known stack suffix:
## WHERE table_constraints
## LR(1) items:
perhaps_table_constraints -> WHERE table_constraints . [ FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_table_constraints -> WHERE table_constraints

State 715:
## Known stack suffix:
## record_label
## LR(1) items:
table_constraints -> record_label . field_constraints [ FROM ]
table_constraints -> record_label . field_constraints COMMA table_constraints [ FROM ]
## Transitions:
-- On READONLY shift to state 716
-- On DEFAULT shift to state 717
-- On field_constraints shift to state 718
-- On field_constraint shift to state 721
## Reductions:

State 716:
## Known stack suffix:
## READONLY
## LR(1) items:
field_constraint -> READONLY . [ READONLY FROM DEFAULT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraint -> READONLY

State 717:
## Known stack suffix:
## DEFAULT
## LR(1) items:
field_constraint -> DEFAULT . [ READONLY FROM DEFAULT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraint -> DEFAULT

State 718:
## Known stack suffix:
## record_label field_constraints
## LR(1) items:
table_constraints -> record_label field_constraints . [ FROM ]
table_constraints -> record_label field_constraints . COMMA table_constraints [ FROM ]
## Transitions:
-- On COMMA shift to state 719
## Reductions:
-- On FROM
--   reduce production table_constraints -> record_label field_constraints

State 719:
## Known stack suffix:
## record_label field_constraints COMMA
## LR(1) items:
table_constraints -> record_label field_constraints COMMA . table_constraints [ FROM ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On table_constraints shift to state 720
-- On record_label shift to state 715
-- On field_label shift to state 224
## Reductions:

State 720:
## Known stack suffix:
## record_label field_constraints COMMA table_constraints
## LR(1) items:
table_constraints -> record_label field_constraints COMMA table_constraints . [ FROM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_constraints -> record_label field_constraints COMMA table_constraints

State 721:
## Known stack suffix:
## field_constraint
## LR(1) items:
field_constraints -> field_constraint . [ FROM COMMA ]
field_constraints -> field_constraint . field_constraints [ FROM COMMA ]
## Transitions:
-- On READONLY shift to state 716
-- On DEFAULT shift to state 717
-- On field_constraints shift to state 722
-- On field_constraint shift to state 721
## Reductions:
-- On FROM COMMA
--   reduce production field_constraints -> field_constraint

State 722:
## Known stack suffix:
## field_constraint field_constraints
## LR(1) items:
field_constraints -> field_constraint field_constraints . [ FROM COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_constraints -> field_constraint field_constraints

State 723:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints . FROM exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On FROM shift to state 724
## Reductions:

State 724:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints FROM
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM . exp [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 6
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PAGE shift to state 308
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On IF shift to state 318
-- On FUN shift to state 320
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typed_expression shift to state 378
-- On table_expression shift to state 383
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On formlet_expression shift to state 506
-- On exp shift to state 725
-- On escape_expression shift to state 508
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 725:
## Known stack suffix:
## TABLE exp WITH datatype perhaps_table_constraints FROM exp
## LR(1) items:
table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM exp . [ WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production table_expression -> TABLE exp WITH datatype perhaps_table_constraints FROM exp

State 726:
## Known stack suffix:
## WHERE LPAREN exp
## LR(1) items:
perhaps_where -> WHERE LPAREN exp . RPAREN [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SET SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DELETE DATABASE CONSTRUCTOR COMMA CHAR CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## WHERE LPAREN exp RPAREN
## LR(1) items:
perhaps_where -> WHERE LPAREN exp RPAREN . [ WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SET SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DELETE DATABASE CONSTRUCTOR COMMA CHAR CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_where -> WHERE LPAREN exp RPAREN

State 728:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where . SET LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On SET shift to state 729
## Reductions:

State 729:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET . LPAREN labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On LPAREN shift to state 730
## Reductions:

State 730:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN . labeled_exps RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On VARIABLE shift to state 170
-- On UINTEGER shift to state 171
-- On STRING shift to state 172
-- On CONSTRUCTOR shift to state 173
-- On record_label shift to state 559
-- On labeled_exps shift to state 731
-- On field_label shift to state 224
## Reductions:

State 731:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps . RPAREN [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
-- On RPAREN shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN
## LR(1) items:
db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN . [ WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production db_expression -> UPDATE LPAREN table_generator RPAREN perhaps_where SET LPAREN labeled_exps RPAREN

State 733:
## Known stack suffix:
## VAR var perhaps_location EQ exp
## LR(1) items:
tlvarbinding -> VAR var perhaps_location EQ exp . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlvarbinding -> VAR var perhaps_location EQ exp

State 734:
## Known stack suffix:
## SIG
## LR(1) items:
signature -> SIG . var COLON datatype [ VAR OP FUN ]
signature -> SIG . op COLON datatype [ VAR OP FUN ]
## Transitions:
-- On VARIABLE shift to state 8
-- On INFIXR9 shift to state 578
-- On INFIXR8 shift to state 579
-- On INFIXR7 shift to state 580
-- On INFIXR6 shift to state 581
-- On INFIXR5 shift to state 582
-- On INFIXR4 shift to state 583
-- On INFIXR3 shift to state 584
-- On INFIXR2 shift to state 585
-- On INFIXR1 shift to state 586
-- On INFIXR0 shift to state 587
-- On INFIXL9 shift to state 588
-- On INFIXL8 shift to state 589
-- On INFIXL7 shift to state 590
-- On INFIXL6 shift to state 591
-- On INFIXL5 shift to state 592
-- On INFIXL4 shift to state 593
-- On INFIXL3 shift to state 594
-- On INFIXL2 shift to state 595
-- On INFIXL1 shift to state 596
-- On INFIXL0 shift to state 597
-- On INFIX9 shift to state 598
-- On INFIX8 shift to state 599
-- On INFIX7 shift to state 600
-- On INFIX6 shift to state 601
-- On INFIX5 shift to state 602
-- On INFIX4 shift to state 603
-- On INFIX3 shift to state 604
-- On INFIX2 shift to state 605
-- On INFIX1 shift to state 606
-- On INFIX0 shift to state 607
-- On var shift to state 735
-- On op shift to state 738
## Reductions:

State 735:
## Known stack suffix:
## SIG var
## LR(1) items:
signature -> SIG var . COLON datatype [ VAR OP FUN ]
## Transitions:
-- On COLON shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## SIG var COLON
## LR(1) items:
signature -> SIG var COLON . datatype [ VAR OP FUN ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 737
## Reductions:

State 737:
## Known stack suffix:
## SIG var COLON datatype
## LR(1) items:
signature -> SIG var COLON datatype . [ VAR OP FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> SIG var COLON datatype

State 738:
## Known stack suffix:
## SIG op
## LR(1) items:
signature -> SIG op . COLON datatype [ VAR OP FUN ]
## Transitions:
-- On COLON shift to state 739
## Reductions:

State 739:
## Known stack suffix:
## SIG op COLON
## LR(1) items:
signature -> SIG op COLON . datatype [ VAR OP FUN ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 740
## Reductions:

State 740:
## Known stack suffix:
## SIG op COLON datatype
## LR(1) items:
signature -> SIG op COLON datatype . [ VAR OP FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> SIG op COLON datatype

State 741:
## Known stack suffix:
## PREFIX
## LR(1) items:
fixity -> PREFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> PREFIX

State 742:
## Known stack suffix:
## POSTFIX
## LR(1) items:
fixity -> POSTFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> POSTFIX

State 743:
## Known stack suffix:
## OP
## LR(1) items:
tlfunbinding -> OP . pattern op pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP . prefixop pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP . pattern postfixop perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On PREFIXOP shift to state 744
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On prefixop shift to state 745
-- On pattern shift to state 749
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 744:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
prefixop -> PREFIXOP . [ VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prefixop -> PREFIXOP

State 745:
## Known stack suffix:
## OP prefixop
## LR(1) items:
tlfunbinding -> OP prefixop . pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 746
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 746:
## Known stack suffix:
## OP prefixop pattern
## LR(1) items:
tlfunbinding -> OP prefixop pattern . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 10
-- On NATIVE shift to state 11
-- On CLIENT shift to state 12
-- On perhaps_location shift to state 747
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 747:
## Known stack suffix:
## OP prefixop pattern perhaps_location
## LR(1) items:
tlfunbinding -> OP prefixop pattern perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## OP prefixop pattern perhaps_location block
## LR(1) items:
tlfunbinding -> OP prefixop pattern perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP prefixop pattern perhaps_location block

State 749:
## Known stack suffix:
## OP pattern
## LR(1) items:
tlfunbinding -> OP pattern . op pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
tlfunbinding -> OP pattern . postfixop perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On POSTFIXOP shift to state 750
-- On INFIXR9 shift to state 578
-- On INFIXR8 shift to state 579
-- On INFIXR7 shift to state 580
-- On INFIXR6 shift to state 581
-- On INFIXR5 shift to state 582
-- On INFIXR4 shift to state 583
-- On INFIXR3 shift to state 584
-- On INFIXR2 shift to state 585
-- On INFIXR1 shift to state 586
-- On INFIXR0 shift to state 587
-- On INFIXL9 shift to state 588
-- On INFIXL8 shift to state 589
-- On INFIXL7 shift to state 590
-- On INFIXL6 shift to state 591
-- On INFIXL5 shift to state 592
-- On INFIXL4 shift to state 593
-- On INFIXL3 shift to state 594
-- On INFIXL2 shift to state 595
-- On INFIXL1 shift to state 596
-- On INFIXL0 shift to state 597
-- On INFIX9 shift to state 598
-- On INFIX8 shift to state 599
-- On INFIX7 shift to state 600
-- On INFIX6 shift to state 601
-- On INFIX5 shift to state 602
-- On INFIX4 shift to state 603
-- On INFIX3 shift to state 604
-- On INFIX2 shift to state 605
-- On INFIX1 shift to state 606
-- On INFIX0 shift to state 607
-- On postfixop shift to state 751
-- On op shift to state 754
## Reductions:

State 750:
## Known stack suffix:
## POSTFIXOP
## LR(1) items:
postfixop -> POSTFIXOP . [ SERVER NATIVE LBRACE CLIENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfixop -> POSTFIXOP

State 751:
## Known stack suffix:
## OP pattern postfixop
## LR(1) items:
tlfunbinding -> OP pattern postfixop . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 10
-- On NATIVE shift to state 11
-- On CLIENT shift to state 12
-- On perhaps_location shift to state 752
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 752:
## Known stack suffix:
## OP pattern postfixop perhaps_location
## LR(1) items:
tlfunbinding -> OP pattern postfixop perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 753
## Reductions:

State 753:
## Known stack suffix:
## OP pattern postfixop perhaps_location block
## LR(1) items:
tlfunbinding -> OP pattern postfixop perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP pattern postfixop perhaps_location block

State 754:
## Known stack suffix:
## OP pattern op
## LR(1) items:
tlfunbinding -> OP pattern op . pattern perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 17
-- On UNDERSCORE shift to state 18
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TRUE shift to state 21
-- On STRING shift to state 22
-- On MINUS shift to state 23
-- On LPAREN shift to state 31
-- On LBRACKET shift to state 36
-- On FALSE shift to state 38
-- On CONSTRUCTOR shift to state 39
-- On CHAR shift to state 41
-- On typed_pattern shift to state 42
-- On primary_pattern shift to state 239
-- On pattern shift to state 755
-- On parenthesized_pattern shift to state 245
-- On negative_pattern shift to state 246
-- On constructor_pattern shift to state 247
-- On constant shift to state 249
-- On cons_pattern shift to state 251
## Reductions:

State 755:
## Known stack suffix:
## OP pattern op pattern
## LR(1) items:
tlfunbinding -> OP pattern op pattern . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 10
-- On NATIVE shift to state 11
-- On CLIENT shift to state 12
-- On perhaps_location shift to state 756
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 756:
## Known stack suffix:
## OP pattern op pattern perhaps_location
## LR(1) items:
tlfunbinding -> OP pattern op pattern perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 757
## Reductions:

State 757:
## Known stack suffix:
## OP pattern op pattern perhaps_location block
## LR(1) items:
tlfunbinding -> OP pattern op pattern perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> OP pattern op pattern perhaps_location block

State 758:
## Known stack suffix:
## INFIXR
## LR(1) items:
fixity -> INFIXR . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIXR

State 759:
## Known stack suffix:
## INFIXL
## LR(1) items:
fixity -> INFIXL . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIXL

State 760:
## Known stack suffix:
## INFIX
## LR(1) items:
fixity -> INFIX . [ UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixity -> INFIX

State 761:
## Known stack suffix:
## FUN
## LR(1) items:
primary_expression -> FUN . arg_lists block [ SEMICOLON POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUALSTILDE END DOT COLONCOLON COLON BARBAR AMPAMP ]
tlfunbinding -> FUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 8
-- On LPAREN shift to state 321
-- On var shift to state 762
-- On multi_args shift to state 325
-- On arg_lists shift to state 327
## Reductions:

State 762:
## Known stack suffix:
## FUN var
## LR(1) items:
tlfunbinding -> FUN var . arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LPAREN shift to state 321
-- On multi_args shift to state 325
-- On arg_lists shift to state 763
## Reductions:

State 763:
## Known stack suffix:
## FUN var arg_lists
## LR(1) items:
tlfunbinding -> FUN var arg_lists . perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SERVER shift to state 10
-- On NATIVE shift to state 11
-- On CLIENT shift to state 12
-- On perhaps_location shift to state 764
## Reductions:
-- On LBRACE
--   reduce production perhaps_location ->

State 764:
## Known stack suffix:
## FUN var arg_lists perhaps_location
## LR(1) items:
tlfunbinding -> FUN var arg_lists perhaps_location . block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On LBRACE shift to state 278
-- On block shift to state 765
## Reductions:

State 765:
## Known stack suffix:
## FUN var arg_lists perhaps_location block
## LR(1) items:
tlfunbinding -> FUN var arg_lists perhaps_location block . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlfunbinding -> FUN var arg_lists perhaps_location block

State 766:
## Known stack suffix:
## ALIEN
## LR(1) items:
nofun_declaration -> ALIEN . VARIABLE var COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 767
## Reductions:

State 767:
## Known stack suffix:
## ALIEN VARIABLE
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE . var COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 768
## Reductions:

State 768:
## Known stack suffix:
## ALIEN VARIABLE var
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var . COLON datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On COLON shift to state 769
## Reductions:

State 769:
## Known stack suffix:
## ALIEN VARIABLE var COLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON . datatype SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 770
## Reductions:

State 770:
## Known stack suffix:
## ALIEN VARIABLE var COLON datatype
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON datatype . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 771
## Reductions:

State 771:
## Known stack suffix:
## ALIEN VARIABLE var COLON datatype SEMICOLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON datatype SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> ALIEN VARIABLE var COLON datatype SEMICOLON

State 772:
## Known stack suffix:
## typedecl
## LR(1) items:
nofun_declaration -> typedecl . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 773
## Reductions:

State 773:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
nofun_declaration -> typedecl SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> typedecl SEMICOLON

State 774:
## Known stack suffix:
## tlvarbinding
## LR(1) items:
nofun_declaration -> tlvarbinding . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 775
## Reductions:

State 775:
## Known stack suffix:
## tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> tlvarbinding SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> tlvarbinding SEMICOLON

State 776:
## Known stack suffix:
## tlfunbinding
## LR(1) items:
fun_declaration -> tlfunbinding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> tlfunbinding

State 777:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
nofun_declaration -> signature . tlvarbinding SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VAR shift to state 7
-- On OP shift to state 743
-- On FUN shift to state 778
-- On tlvarbinding shift to state 779
-- On tlfunbinding shift to state 781
## Reductions:

State 778:
## Known stack suffix:
## FUN
## LR(1) items:
tlfunbinding -> FUN . var arg_lists perhaps_location block [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 762
## Reductions:

State 779:
## Known stack suffix:
## signature tlvarbinding
## LR(1) items:
nofun_declaration -> signature tlvarbinding . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 780
## Reductions:

State 780:
## Known stack suffix:
## signature tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> signature tlvarbinding SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> signature tlvarbinding SEMICOLON

State 781:
## Known stack suffix:
## signature tlfunbinding
## LR(1) items:
fun_declaration -> signature tlfunbinding . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declaration -> signature tlfunbinding

State 782:
## Known stack suffix:
## nofun_declaration
## LR(1) items:
declaration -> nofun_declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> nofun_declaration

State 783:
## Known stack suffix:
## fun_declaration
## LR(1) items:
declaration -> fun_declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> fun_declaration

State 784:
## Known stack suffix:
## fixity
## LR(1) items:
nofun_declaration -> fixity . perhaps_uinteger op SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On UINTEGER shift to state 785
-- On perhaps_uinteger shift to state 786
## Reductions:
-- On INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
--   reduce production perhaps_uinteger ->

State 785:
## Known stack suffix:
## UINTEGER
## LR(1) items:
perhaps_uinteger -> UINTEGER . [ INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production perhaps_uinteger -> UINTEGER

State 786:
## Known stack suffix:
## fixity perhaps_uinteger
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger . op SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On INFIXR9 shift to state 578
-- On INFIXR8 shift to state 579
-- On INFIXR7 shift to state 580
-- On INFIXR6 shift to state 581
-- On INFIXR5 shift to state 582
-- On INFIXR4 shift to state 583
-- On INFIXR3 shift to state 584
-- On INFIXR2 shift to state 585
-- On INFIXR1 shift to state 586
-- On INFIXR0 shift to state 587
-- On INFIXL9 shift to state 588
-- On INFIXL8 shift to state 589
-- On INFIXL7 shift to state 590
-- On INFIXL6 shift to state 591
-- On INFIXL5 shift to state 592
-- On INFIXL4 shift to state 593
-- On INFIXL3 shift to state 594
-- On INFIXL2 shift to state 595
-- On INFIXL1 shift to state 596
-- On INFIXL0 shift to state 597
-- On INFIX9 shift to state 598
-- On INFIX8 shift to state 599
-- On INFIX7 shift to state 600
-- On INFIX6 shift to state 601
-- On INFIX5 shift to state 602
-- On INFIX4 shift to state 603
-- On INFIX3 shift to state 604
-- On INFIX2 shift to state 605
-- On INFIX1 shift to state 606
-- On INFIX0 shift to state 607
-- On op shift to state 787
## Reductions:

State 787:
## Known stack suffix:
## fixity perhaps_uinteger op
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op . SEMICOLON [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
-- On SEMICOLON shift to state 788
## Reductions:

State 788:
## Known stack suffix:
## fixity perhaps_uinteger op SEMICOLON
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op SEMICOLON . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nofun_declaration -> fixity perhaps_uinteger op SEMICOLON

State 789:
## Known stack suffix:
## preamble exp
## LR(1) items:
file -> preamble exp . END [ # ]
## Transitions:
-- On END shift to state 790
## Reductions:

State 790:
## Known stack suffix:
## preamble exp END
## LR(1) items:
file -> preamble exp END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble exp END

State 791:
## Known stack suffix:
## preamble declarations
## LR(1) items:
declarations -> declarations . declaration [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
file -> preamble declarations . exp END [ # ]
file -> preamble declarations . END [ # ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 7
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SIG shift to state 734
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PREFIX shift to state 741
-- On POSTFIX shift to state 742
-- On PAGE shift to state 308
-- On OP shift to state 743
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On INSERT shift to state 317
-- On INFIXR shift to state 758
-- On INFIXL shift to state 759
-- On INFIX shift to state 760
-- On IF shift to state 318
-- On FUN shift to state 761
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On END shift to state 792
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On ALIEN shift to state 766
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 772
-- On typed_expression shift to state 378
-- On tlvarbinding shift to state 774
-- On tlfunbinding shift to state 776
-- On table_expression shift to state 383
-- On signature shift to state 777
-- On primary_expression shift to state 344
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On nofun_declaration shift to state 782
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On fun_declaration shift to state 783
-- On formlet_expression shift to state 506
-- On fixity shift to state 784
-- On exp shift to state 793
-- On escape_expression shift to state 508
-- On declaration shift to state 795
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 792:
## Known stack suffix:
## preamble declarations END
## LR(1) items:
file -> preamble declarations END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble declarations END

State 793:
## Known stack suffix:
## preamble declarations exp
## LR(1) items:
file -> preamble declarations exp . END [ # ]
## Transitions:
-- On END shift to state 794
## Reductions:

State 794:
## Known stack suffix:
## preamble declarations exp END
## LR(1) items:
file -> preamble declarations exp END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> preamble declarations exp END

State 795:
## Known stack suffix:
## declarations declaration
## LR(1) items:
declarations -> declarations declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declarations declaration

State 796:
## Known stack suffix:
## declaration
## LR(1) items:
declarations -> declaration . [ VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declaration

State 797:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 798:
## Known stack suffix:
##
## LR(1) items:
interactive' -> . interactive [ # ]
## Transitions:
-- On VARIABLE shift to state 6
-- On VAR shift to state 7
-- On UPDATE shift to state 15
-- On UINTEGER shift to state 19
-- On UFLOAT shift to state 20
-- On TYPENAME shift to state 289
-- On TRUE shift to state 21
-- On TABLE shift to state 274
-- On SWITCH shift to state 275
-- On STRING shift to state 22
-- On SPAWNWAIT shift to state 277
-- On SPAWN shift to state 282
-- On SIG shift to state 734
-- On SEMICOLON shift to state 799
-- On RECEIVE shift to state 284
-- On QUERY shift to state 298
-- On PREFIXOP shift to state 300
-- On PREFIX shift to state 741
-- On POSTFIX shift to state 742
-- On PAGE shift to state 308
-- On OP shift to state 743
-- On MINUSDOT shift to state 301
-- On MINUS shift to state 302
-- On LXML shift to state 303
-- On LPAREN shift to state 311
-- On LBRACKET shift to state 315
-- On LBRACE shift to state 278
-- On KEYWORD shift to state 800
-- On INSERT shift to state 317
-- On INFIXR shift to state 758
-- On INFIXL shift to state 759
-- On INFIX shift to state 760
-- On INCLUDE shift to state 812
-- On IF shift to state 318
-- On FUN shift to state 761
-- On FORMLET shift to state 329
-- On FOR shift to state 332
-- On FALSE shift to state 38
-- On ESCAPE shift to state 340
-- On END shift to state 814
-- On DELETE shift to state 349
-- On DATABASE shift to state 356
-- On CONSTRUCTOR shift to state 364
-- On CHAR shift to state 41
-- On ALIEN shift to state 815
-- On xml_tree shift to state 309
-- On xml shift to state 343
-- On unary_expression shift to state 366
-- On typedecl shift to state 821
-- On typed_expression shift to state 378
-- On tlvarbinding shift to state 823
-- On tlfunbinding shift to state 776
-- On table_expression shift to state 383
-- On signature shift to state 825
-- On primary_expression shift to state 344
-- On preamble_declaration shift to state 828
-- On postfix_expression shift to state 368
-- On parenthesized_thing shift to state 357
-- On nofun_declaration shift to state 829
-- On logical_expression shift to state 384
-- On iteration_expression shift to state 504
-- On interactive shift to state 830
-- On infixr_9 shift to state 386
-- On infixr_8 shift to state 387
-- On infixr_7 shift to state 388
-- On infixr_6 shift to state 389
-- On infixr_5 shift to state 390
-- On infixr_4 shift to state 424
-- On infixr_3 shift to state 425
-- On infixr_2 shift to state 426
-- On infixr_1 shift to state 427
-- On infixr_0 shift to state 428
-- On infixl_9 shift to state 429
-- On infixl_8 shift to state 438
-- On infixl_7 shift to state 445
-- On infixl_6 shift to state 452
-- On infixl_5 shift to state 463
-- On infixl_4 shift to state 471
-- On infixl_3 shift to state 478
-- On infixl_2 shift to state 485
-- On infixl_1 shift to state 492
-- On infixl_0 shift to state 505
-- On fun_declarations shift to state 831
-- On fun_declaration shift to state 835
-- On formlet_expression shift to state 506
-- On fixity shift to state 836
-- On exp shift to state 840
-- On escape_expression shift to state 508
-- On directive shift to state 842
-- On db_expression shift to state 509
-- On database_expression shift to state 510
-- On constructor_expression shift to state 373
-- On constant shift to state 358
-- On conditional_expression shift to state 511
-- On case_expression shift to state 512
-- On block shift to state 374
-- On atomic_expression shift to state 375
## Reductions:

State 799:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
interactive -> SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> SEMICOLON

State 800:
## Known stack suffix:
## KEYWORD
## LR(1) items:
directive -> KEYWORD . args SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 801
-- On UINTEGER shift to state 802
-- On UFLOAT shift to state 803
-- On TRUE shift to state 804
-- On STRING shift to state 805
-- On FALSE shift to state 806
-- On CONSTRUCTOR shift to state 807
-- On args shift to state 808
-- On arg shift to state 810
## Reductions:
-- On SEMICOLON
--   reduce production args ->

State 801:
## Known stack suffix:
## VARIABLE
## LR(1) items:
arg -> VARIABLE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> VARIABLE

State 802:
## Known stack suffix:
## UINTEGER
## LR(1) items:
arg -> UINTEGER . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UINTEGER

State 803:
## Known stack suffix:
## UFLOAT
## LR(1) items:
arg -> UFLOAT . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> UFLOAT

State 804:
## Known stack suffix:
## TRUE
## LR(1) items:
arg -> TRUE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> TRUE

State 805:
## Known stack suffix:
## STRING
## LR(1) items:
arg -> STRING . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> STRING

State 806:
## Known stack suffix:
## FALSE
## LR(1) items:
arg -> FALSE . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> FALSE

State 807:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
arg -> CONSTRUCTOR . [ VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> CONSTRUCTOR

State 808:
## Known stack suffix:
## KEYWORD args
## LR(1) items:
directive -> KEYWORD args . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 809
## Reductions:

State 809:
## Known stack suffix:
## KEYWORD args SEMICOLON
## LR(1) items:
directive -> KEYWORD args SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production directive -> KEYWORD args SEMICOLON

State 810:
## Known stack suffix:
## arg
## LR(1) items:
args -> arg . args [ SEMICOLON ]
## Transitions:
-- On VARIABLE shift to state 801
-- On UINTEGER shift to state 802
-- On UFLOAT shift to state 803
-- On TRUE shift to state 804
-- On STRING shift to state 805
-- On FALSE shift to state 806
-- On CONSTRUCTOR shift to state 807
-- On args shift to state 811
-- On arg shift to state 810
## Reductions:
-- On SEMICOLON
--   reduce production args ->

State 811:
## Known stack suffix:
## arg args
## LR(1) items:
args -> arg args . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> arg args

State 812:
## Known stack suffix:
## INCLUDE
## LR(1) items:
preamble_declaration -> INCLUDE . STRING [ # ]
## Transitions:
-- On STRING shift to state 813
## Reductions:

State 813:
## Known stack suffix:
## INCLUDE STRING
## LR(1) items:
preamble_declaration -> INCLUDE STRING . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production preamble_declaration -> INCLUDE STRING

State 814:
## Known stack suffix:
## END
## LR(1) items:
interactive -> END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> END

State 815:
## Known stack suffix:
## ALIEN
## LR(1) items:
nofun_declaration -> ALIEN . VARIABLE var COLON datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 816
## Reductions:

State 816:
## Known stack suffix:
## ALIEN VARIABLE
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE . var COLON datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 8
-- On var shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## ALIEN VARIABLE var
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var . COLON datatype SEMICOLON [ # ]
## Transitions:
-- On COLON shift to state 818
## Reductions:

State 818:
## Known stack suffix:
## ALIEN VARIABLE var COLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON . datatype SEMICOLON [ # ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On forall_datatype shift to state 118
-- On datatype shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## ALIEN VARIABLE var COLON datatype
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON datatype . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 820
## Reductions:

State 820:
## Known stack suffix:
## ALIEN VARIABLE var COLON datatype SEMICOLON
## LR(1) items:
nofun_declaration -> ALIEN VARIABLE var COLON datatype SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> ALIEN VARIABLE var COLON datatype SEMICOLON

State 821:
## Known stack suffix:
## typedecl
## LR(1) items:
nofun_declaration -> typedecl . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 822
## Reductions:

State 822:
## Known stack suffix:
## typedecl SEMICOLON
## LR(1) items:
nofun_declaration -> typedecl SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> typedecl SEMICOLON

State 823:
## Known stack suffix:
## tlvarbinding
## LR(1) items:
nofun_declaration -> tlvarbinding . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> tlvarbinding SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> tlvarbinding SEMICOLON

State 825:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ SIG SEMICOLON OP FUN ]
nofun_declaration -> signature . tlvarbinding SEMICOLON [ # ]
## Transitions:
-- On VAR shift to state 7
-- On OP shift to state 743
-- On FUN shift to state 778
-- On tlvarbinding shift to state 826
-- On tlfunbinding shift to state 781
## Reductions:

State 826:
## Known stack suffix:
## signature tlvarbinding
## LR(1) items:
nofun_declaration -> signature tlvarbinding . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 827
## Reductions:

State 827:
## Known stack suffix:
## signature tlvarbinding SEMICOLON
## LR(1) items:
nofun_declaration -> signature tlvarbinding SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> signature tlvarbinding SEMICOLON

State 828:
## Known stack suffix:
## preamble_declaration
## LR(1) items:
interactive -> preamble_declaration . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> preamble_declaration

State 829:
## Known stack suffix:
## nofun_declaration
## LR(1) items:
interactive -> nofun_declaration . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> nofun_declaration

State 830:
## Known stack suffix:
## interactive
## LR(1) items:
interactive' -> interactive . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interactive

State 831:
## Known stack suffix:
## fun_declarations
## LR(1) items:
fun_declarations -> fun_declarations . fun_declaration [ SIG SEMICOLON OP FUN ]
interactive -> fun_declarations . SEMICOLON [ # ]
## Transitions:
-- On SIG shift to state 734
-- On SEMICOLON shift to state 832
-- On OP shift to state 743
-- On FUN shift to state 778
-- On tlfunbinding shift to state 776
-- On signature shift to state 833
-- On fun_declaration shift to state 834
## Reductions:

State 832:
## Known stack suffix:
## fun_declarations SEMICOLON
## LR(1) items:
interactive -> fun_declarations SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> fun_declarations SEMICOLON

State 833:
## Known stack suffix:
## signature
## LR(1) items:
fun_declaration -> signature . tlfunbinding [ SIG SEMICOLON OP FUN ]
## Transitions:
-- On OP shift to state 743
-- On FUN shift to state 778
-- On tlfunbinding shift to state 781
## Reductions:

State 834:
## Known stack suffix:
## fun_declarations fun_declaration
## LR(1) items:
fun_declarations -> fun_declarations fun_declaration . [ SIG SEMICOLON OP FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declarations -> fun_declarations fun_declaration

State 835:
## Known stack suffix:
## fun_declaration
## LR(1) items:
fun_declarations -> fun_declaration . [ SIG SEMICOLON OP FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_declarations -> fun_declaration

State 836:
## Known stack suffix:
## fixity
## LR(1) items:
nofun_declaration -> fixity . perhaps_uinteger op SEMICOLON [ # ]
## Transitions:
-- On UINTEGER shift to state 785
-- On perhaps_uinteger shift to state 837
## Reductions:
-- On INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
--   reduce production perhaps_uinteger ->

State 837:
## Known stack suffix:
## fixity perhaps_uinteger
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger . op SEMICOLON [ # ]
## Transitions:
-- On INFIXR9 shift to state 578
-- On INFIXR8 shift to state 579
-- On INFIXR7 shift to state 580
-- On INFIXR6 shift to state 581
-- On INFIXR5 shift to state 582
-- On INFIXR4 shift to state 583
-- On INFIXR3 shift to state 584
-- On INFIXR2 shift to state 585
-- On INFIXR1 shift to state 586
-- On INFIXR0 shift to state 587
-- On INFIXL9 shift to state 588
-- On INFIXL8 shift to state 589
-- On INFIXL7 shift to state 590
-- On INFIXL6 shift to state 591
-- On INFIXL5 shift to state 592
-- On INFIXL4 shift to state 593
-- On INFIXL3 shift to state 594
-- On INFIXL2 shift to state 595
-- On INFIXL1 shift to state 596
-- On INFIXL0 shift to state 597
-- On INFIX9 shift to state 598
-- On INFIX8 shift to state 599
-- On INFIX7 shift to state 600
-- On INFIX6 shift to state 601
-- On INFIX5 shift to state 602
-- On INFIX4 shift to state 603
-- On INFIX3 shift to state 604
-- On INFIX2 shift to state 605
-- On INFIX1 shift to state 606
-- On INFIX0 shift to state 607
-- On op shift to state 838
## Reductions:

State 838:
## Known stack suffix:
## fixity perhaps_uinteger op
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 839
## Reductions:

State 839:
## Known stack suffix:
## fixity perhaps_uinteger op SEMICOLON
## LR(1) items:
nofun_declaration -> fixity perhaps_uinteger op SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production nofun_declaration -> fixity perhaps_uinteger op SEMICOLON

State 840:
## Known stack suffix:
## exp
## LR(1) items:
interactive -> exp . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 841
## Reductions:

State 841:
## Known stack suffix:
## exp SEMICOLON
## LR(1) items:
interactive -> exp SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> exp SEMICOLON

State 842:
## Known stack suffix:
## directive
## LR(1) items:
interactive -> directive . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> directive

State 843:
## Known stack suffix:
##
## LR(1) items:
just_datatype' -> . just_datatype [ # ]
## Transitions:
-- On VARIABLE shift to state 44
-- On UNDERSCORE shift to state 45
-- On TABLEHANDLE shift to state 46
-- On QUESTIONVAR shift to state 48
-- On QUESTION shift to state 49
-- On MU shift to state 50
-- On LPAREN shift to state 53
-- On LBRACKETBAR shift to state 77
-- On LBRACKET shift to state 90
-- On FORALL shift to state 91
-- On CONSTRUCTOR shift to state 101
-- On type_var shift to state 105
-- On straight_arrow shift to state 107
-- On squiggly_arrow shift to state 108
-- On primary_datatype shift to state 109
-- On parenthesized_datatypes shift to state 110
-- On mu_datatype shift to state 116
-- On kinded_type_var shift to state 117
-- On just_datatype shift to state 844
-- On forall_datatype shift to state 118
-- On datatype shift to state 845
## Reductions:

State 844:
## Known stack suffix:
## just_datatype
## LR(1) items:
just_datatype' -> just_datatype . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept just_datatype

State 845:
## Known stack suffix:
## datatype
## LR(1) items:
just_datatype -> datatype . END [ # ]
## Transitions:
-- On END shift to state 846
## Reductions:

State 846:
## Known stack suffix:
## datatype END
## LR(1) items:
just_datatype -> datatype END . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production just_datatype -> datatype END

