File "links.mly", line 115, characters 28-39:
Warning: the token MINUSLBRACE is unused.
Grammar has 157 nonterminal symbols, among which 3 start symbols.
Grammar has 147 terminal symbols.
Grammar has 475 productions.
nullable(xmlid) = false
nullable(xml_tree) = false
nullable(xml_contents_list) = false
nullable(xml_contents) = false
nullable(xml) = false
nullable(vrow) = true
nullable(vfields) = false
nullable(vfield) = false
nullable(varlist) = false
nullable(var) = false
nullable(unary_expression) = false
nullable(typedecl) = false
nullable(typed_pattern) = false
nullable(typed_expression) = false
nullable(typeargs_opt) = true
nullable(typearg) = false
nullable(type_var) = false
nullable(type_arg_list) = false
nullable(type_arg) = false
nullable(tlvarbinding) = false
nullable(tlfunbinding) = false
nullable(table_generator) = false
nullable(table_expression) = false
nullable(table_constraints) = false
nullable(subkind) = false
nullable(straight_arrow_prefix) = false
nullable(straight_arrow) = false
nullable(squiggly_arrow) = false
nullable(squig_arrow_prefix) = false
nullable(signature) = false
nullable(row_var) = false
nullable(row) = true
nullable(rfields) = false
nullable(rfield) = false
nullable(regex_replace) = true
nullable(regex_pattern_sequence) = false
nullable(regex_pattern_alternate) = false
nullable(regex_pattern) = false
nullable(regex_flags_opt) = false
nullable(regex) = false
nullable(record_labels) = false
nullable(record_label) = false
nullable(primary_pattern) = false
nullable(primary_expression) = false
nullable(primary_datatype) = false
nullable(prefixop) = false
nullable(preamble_declaration) = false
nullable(preamble) = true
nullable(postfixop) = false
nullable(postfix_expression) = false
nullable(perhaps_where) = true
nullable(perhaps_uinteger) = true
nullable(perhaps_table_constraints) = true
nullable(perhaps_semi) = true
nullable(perhaps_orderby) = true
nullable(perhaps_location) = true
nullable(perhaps_generators) = true
nullable(perhaps_db_driver) = true
nullable(perhaps_db_args) = true
nullable(perhaps_cases) = true
nullable(patterns) = false
nullable(pattern) = false
nullable(parenthesized_thing) = false
nullable(parenthesized_pattern) = false
nullable(parenthesized_datatypes) = false
nullable(page_placement) = false
nullable(op) = false
nullable(nonrec_row_var) = false
nullable(nofun_declaration) = false
nullable(negative_pattern) = false
nullable(multi_args) = false
nullable(mu_datatype) = false
nullable(logical_expression) = false
nullable(list_generator) = false
nullable(labeled_patterns) = false
nullable(labeled_exps) = false
nullable(kinded_type_var) = false
nullable(kinded_row_var) = false
nullable(kinded_nonrec_row_var) = false
nullable(kind) = false
nullable(just_datatype) = false
nullable(iteration_expression) = false
nullable(interactive) = false
nullable(infixr_9) = false
nullable(infixr_8) = false
nullable(infixr_7) = false
nullable(infixr_6) = false
nullable(infixr_5) = false
nullable(infixr_4) = false
nullable(infixr_3) = false
nullable(infixr_2) = false
nullable(infixr_1) = false
nullable(infixr_0) = false
nullable(infixl_9) = false
nullable(infixl_8) = false
nullable(infixl_7) = false
nullable(infixl_6) = false
nullable(infixl_5) = false
nullable(infixl_4) = false
nullable(infixl_3) = false
nullable(infixl_2) = false
nullable(infixl_1) = false
nullable(infixl_0) = false
nullable(hear_arrow_prefix) = false
nullable(generators) = false
nullable(generator) = false
nullable(fun_declarations) = false
nullable(fun_declaration) = false
nullable(formlet_placement) = false
nullable(formlet_expression) = false
nullable(formlet_binding) = false
nullable(forall_datatype) = false
nullable(fixity) = false
nullable(file) = false
nullable(fieldspec) = false
nullable(fields) = false
nullable(field_label) = false
nullable(field_constraints) = false
nullable(field_constraint) = false
nullable(field) = false
nullable(exps) = false
nullable(exp) = false
nullable(escape_expression) = false
nullable(efields) = false
nullable(efield) = false
nullable(effect_label) = false
nullable(directive) = false
nullable(declarations) = false
nullable(declaration) = false
nullable(db_expression) = false
nullable(datatypes) = false
nullable(datatype) = false
nullable(database_expression) = false
nullable(constructors) = false
nullable(constructor_pattern) = false
nullable(constructor_expression) = false
nullable(constant) = false
nullable(cons_pattern) = false
nullable(conditional_expression) = false
nullable(cases) = false
nullable(case_expression) = false
nullable(case) = false
nullable(block_contents) = true
nullable(block) = false
nullable(binop) = false
nullable(bindings) = false
nullable(binding) = false
nullable(attrs) = false
nullable(attr_val) = false
nullable(attr_list) = false
nullable(attr) = false
nullable(atomic_expression) = false
nullable(arrow_prefix) = false
nullable(args) = true
nullable(arg_spec) = false
nullable(arg_lists) = false
nullable(arg) = false
first(xmlid) = VARIABLE
first(xml_tree) = LXML
first(xml_contents_list) = LXML LBRACEBAR LBRACE CDATA
first(xml_contents) = LXML LBRACEBAR LBRACE CDATA
first(xml) = LXML
first(vrow) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION LPAREN CONSTRUCTOR
first(vfields) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION LPAREN CONSTRUCTOR
first(vfield) = CONSTRUCTOR
first(varlist) = VARIABLE
first(var) = VARIABLE
first(unary_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(typedecl) = TYPENAME
first(typed_pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(typed_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(typeargs_opt) = LPAREN
first(typearg) = VARIABLE
first(type_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION
first(type_arg_list) = VARIABLE UNDERSCORE TYPE TABLEHANDLE ROW QUESTIONVAR QUESTION PRESENCE MU LPAREN LBRACKETBAR LBRACKET LBRACE FORALL CONSTRUCTOR
first(type_arg) = VARIABLE UNDERSCORE TYPE TABLEHANDLE ROW QUESTIONVAR QUESTION PRESENCE MU LPAREN LBRACKETBAR LBRACKET LBRACE FORALL CONSTRUCTOR
first(tlvarbinding) = VAR
first(tlfunbinding) = OP FUN
first(table_generator) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(table_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FORMLET FOR FALSE ESCAPE DELETE CONSTRUCTOR CHAR
first(table_constraints) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(subkind) = BASE ANY
first(straight_arrow_prefix) = MINUS LBRACE
first(straight_arrow) = LPAREN
first(squiggly_arrow) = LPAREN
first(squig_arrow_prefix) = TILDE LBRACE
first(signature) = SIG
first(row_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION LPAREN
first(row) = VBAR VARIABLE UINTEGER STRING CONSTRUCTOR
first(rfields) = VBAR VARIABLE UINTEGER STRING CONSTRUCTOR
first(rfield) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(regex_replace) = REGEXREPL LBRACE
first(regex_pattern_sequence) = STRING RANGE QUOTEDMETA LPAREN LBRACE DOT DOLLAR CARET
first(regex_pattern_alternate) = STRING RANGE QUOTEDMETA LPAREN LBRACE DOT DOLLAR CARET
first(regex_pattern) = STRING RANGE QUOTEDMETA LPAREN LBRACE DOT DOLLAR CARET
first(regex_flags_opt) = SLASHFLAGS SLASH
first(regex) = SSLASH SLASH
first(record_labels) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(record_label) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(primary_pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING LPAREN LBRACKET FALSE CHAR
first(primary_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING LXML LPAREN LBRACKET FUN FALSE CHAR
first(primary_datatype) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION LPAREN LBRACKETBAR LBRACKET CONSTRUCTOR
first(prefixop) = PREFIXOP
first(preamble_declaration) = INCLUDE
first(preamble) = INCLUDE
first(postfixop) = POSTFIXOP
first(postfix_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY LXML LPAREN LBRACKET LBRACE FUN FALSE CHAR
first(perhaps_where) = WHERE
first(perhaps_uinteger) = UINTEGER
first(perhaps_table_constraints) = WHERE
first(perhaps_semi) = SEMICOLON
first(perhaps_orderby) = ORDERBY
first(perhaps_location) = SERVER NATIVE CLIENT
first(perhaps_generators) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(perhaps_db_driver) = VARIABLE UINTEGER UFLOAT TRUE STRING LPAREN FALSE CHAR
first(perhaps_db_args) = VARIABLE UINTEGER UFLOAT TRUE STRING LPAREN FALSE CHAR
first(perhaps_cases) = CASE
first(patterns) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(parenthesized_thing) = LPAREN
first(parenthesized_pattern) = LPAREN
first(parenthesized_datatypes) = LPAREN
first(page_placement) = LBRACEBAR
first(op) = INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
first(nonrec_row_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION
first(nofun_declaration) = VAR TYPENAME SIG PREFIX POSTFIX INFIXR INFIXL INFIX ALIEN
first(negative_pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CHAR
first(multi_args) = LPAREN
first(mu_datatype) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION MU LPAREN LBRACKETBAR LBRACKET FORALL CONSTRUCTOR
first(logical_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(list_generator) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(labeled_patterns) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(labeled_exps) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(kinded_type_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION
first(kinded_row_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION LPAREN
first(kinded_nonrec_row_var) = VARIABLE UNDERSCORE QUESTIONVAR QUESTION
first(kind) = TYPE ROW PRESENCE BASETYPE BASEROW
first(just_datatype) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION MU LPAREN LBRACKETBAR LBRACKET FORALL CONSTRUCTOR
first(iteration_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FOR FALSE DELETE CONSTRUCTOR CHAR
first(interactive) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE KEYWORD INSERT INFIXR INFIXL INFIX INCLUDE IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN
first(infixr_9) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_8) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_7) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_6) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_5) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_4) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_3) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_2) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_1) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixr_0) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_9) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_8) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_7) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_6) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_5) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_4) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_3) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_2) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_1) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(infixl_0) = VARIABLE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE CONSTRUCTOR CHAR
first(hear_arrow_prefix) = LBRACE
first(generators) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(generator) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(fun_declarations) = SIG OP FUN
first(fun_declaration) = SIG OP FUN
first(formlet_placement) = LBRACE
first(formlet_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FORMLET FOR FALSE ESCAPE DELETE CONSTRUCTOR CHAR
first(formlet_binding) = LBRACE
first(forall_datatype) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION LPAREN LBRACKETBAR LBRACKET FORALL CONSTRUCTOR
first(fixity) = PREFIX POSTFIX INFIXR INFIXL INFIX
first(file) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX INCLUDE IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN
first(fieldspec) = MINUS LBRACE COLON
first(fields) = VBAR VARIABLE UINTEGER STRING CONSTRUCTOR
first(field_label) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(field_constraints) = READONLY DEFAULT
first(field_constraint) = READONLY DEFAULT
first(field) = VARIABLE UINTEGER STRING CONSTRUCTOR
first(exps) = VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(exp) = VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(escape_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FOR FALSE ESCAPE DELETE CONSTRUCTOR CHAR
first(efields) = VBAR VARIABLE CONSTRUCTOR
first(efield) = VARIABLE CONSTRUCTOR
first(effect_label) = VARIABLE CONSTRUCTOR
first(directive) = KEYWORD
first(declarations) = VAR TYPENAME SIG PREFIX POSTFIX OP INFIXR INFIXL INFIX FUN ALIEN
first(declaration) = VAR TYPENAME SIG PREFIX POSTFIX OP INFIXR INFIXL INFIX FUN ALIEN
first(db_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE FUN FALSE DELETE CONSTRUCTOR CHAR
first(datatypes) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION MU LPAREN LBRACKETBAR LBRACKET FORALL CONSTRUCTOR
first(datatype) = VARIABLE UNDERSCORE TABLEHANDLE QUESTIONVAR QUESTION MU LPAREN LBRACKETBAR LBRACKET FORALL CONSTRUCTOR
first(database_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(constructors) = CONSTRUCTOR
first(constructor_pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(constructor_expression) = CONSTRUCTOR
first(constant) = UINTEGER UFLOAT TRUE STRING FALSE CHAR
first(cons_pattern) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
first(conditional_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE STRING SPAWNWAIT SPAWN QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FALSE DELETE CONSTRUCTOR CHAR
first(cases) = CASE
first(case_expression) = VARIABLE UPDATE UINTEGER UFLOAT TRUE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE IF FUN FALSE DELETE CONSTRUCTOR CHAR
first(case) = CASE
first(block_contents) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SEMICOLON RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(block) = LBRACE
first(binop) = MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
first(bindings) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(binding) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
first(attrs) = VARIABLE LBRACE
first(attr_val) = STRING LBRACE
first(attr_list) = VARIABLE
first(attr) = VARIABLE
first(atomic_expression) = VARIABLE UINTEGER UFLOAT TRUE STRING LPAREN FALSE CHAR
first(arrow_prefix) = LBRACE
first(args) = VARIABLE UINTEGER UFLOAT TRUE STRING FALSE CONSTRUCTOR
first(arg_spec) = LPAREN
first(arg_lists) = LPAREN
first(arg) = VARIABLE UINTEGER UFLOAT TRUE STRING FALSE CONSTRUCTOR
minimal(xmlid) = (* 1 *) VARIABLE
minimal(xml_tree) = (* 2 *) LXML SLASHRXML
minimal(xml_contents_list) = (* 1 *) CDATA
minimal(xml_contents) = (* 1 *) CDATA
minimal(xml) = (* 2 *) LXML SLASHRXML
minimal(vrow) = (* 0 *)
minimal(vfields) = (* 1 *) CONSTRUCTOR
minimal(vfield) = (* 1 *) CONSTRUCTOR
minimal(varlist) = (* 1 *) VARIABLE
minimal(var) = (* 1 *) VARIABLE
minimal(unary_expression) = (* 1 *) VARIABLE
minimal(typedecl) = (* 4 *) TYPENAME CONSTRUCTOR EQ VARIABLE
minimal(typed_pattern) = (* 1 *) VARIABLE
minimal(typed_expression) = (* 1 *) VARIABLE
minimal(typeargs_opt) = (* 0 *)
minimal(typearg) = (* 1 *) VARIABLE
minimal(type_var) = (* 1 *) VARIABLE
minimal(type_arg_list) = (* 1 *) VARIABLE
minimal(type_arg) = (* 1 *) VARIABLE
minimal(tlvarbinding) = (* 4 *) VAR VARIABLE EQ VARIABLE
minimal(tlfunbinding) = (* 5 *) OP PREFIXOP VARIABLE LBRACE RBRACE
minimal(table_generator) = (* 3 *) VARIABLE LLARROW VARIABLE
minimal(table_expression) = (* 1 *) VARIABLE
minimal(table_constraints) = (* 2 *) CONSTRUCTOR READONLY
minimal(subkind) = (* 1 *) ANY
minimal(straight_arrow_prefix) = (* 2 *) LBRACE RBRACE
minimal(straight_arrow) = (* 4 *) LPAREN RPAREN RARROW VARIABLE
minimal(squiggly_arrow) = (* 4 *) LPAREN RPAREN SQUIGRARROW VARIABLE
minimal(squig_arrow_prefix) = (* 2 *) LBRACE RBRACE
minimal(signature) = (* 4 *) SIG VARIABLE COLON VARIABLE
minimal(row_var) = (* 1 *) VARIABLE
minimal(row) = (* 0 *)
minimal(rfields) = (* 1 *) CONSTRUCTOR
minimal(rfield) = (* 1 *) CONSTRUCTOR
minimal(regex_replace) = (* 0 *)
minimal(regex_pattern_sequence) = (* 1 *) RANGE
minimal(regex_pattern_alternate) = (* 1 *) RANGE
minimal(regex_pattern) = (* 1 *) RANGE
minimal(regex_flags_opt) = (* 1 *) SLASH
minimal(regex) = (* 2 *) SLASH SLASH
minimal(record_labels) = (* 1 *) CONSTRUCTOR
minimal(record_label) = (* 1 *) CONSTRUCTOR
minimal(primary_pattern) = (* 1 *) VARIABLE
minimal(primary_expression) = (* 1 *) VARIABLE
minimal(primary_datatype) = (* 1 *) VARIABLE
minimal(prefixop) = (* 1 *) PREFIXOP
minimal(preamble_declaration) = (* 2 *) INCLUDE STRING
minimal(preamble) = (* 0 *)
minimal(postfixop) = (* 1 *) POSTFIXOP
minimal(postfix_expression) = (* 1 *) VARIABLE
minimal(perhaps_where) = (* 0 *)
minimal(perhaps_uinteger) = (* 0 *)
minimal(perhaps_table_constraints) = (* 0 *)
minimal(perhaps_semi) = (* 0 *)
minimal(perhaps_orderby) = (* 0 *)
minimal(perhaps_location) = (* 0 *)
minimal(perhaps_generators) = (* 0 *)
minimal(perhaps_db_driver) = (* 0 *)
minimal(perhaps_db_args) = (* 0 *)
minimal(perhaps_cases) = (* 0 *)
minimal(patterns) = (* 1 *) VARIABLE
minimal(pattern) = (* 1 *) VARIABLE
minimal(parenthesized_thing) = (* 2 *) LPAREN RPAREN
minimal(parenthesized_pattern) = (* 2 *) LPAREN RPAREN
minimal(parenthesized_datatypes) = (* 2 *) LPAREN RPAREN
minimal(page_placement) = (* 3 *) LBRACEBAR VARIABLE BARRBRACE
minimal(op) = (* 1 *) INFIX0
minimal(nonrec_row_var) = (* 1 *) VARIABLE
minimal(nofun_declaration) = (* 3 *) INFIX INFIX0 SEMICOLON
minimal(negative_pattern) = (* 1 *) VARIABLE
minimal(multi_args) = (* 2 *) LPAREN RPAREN
minimal(mu_datatype) = (* 1 *) VARIABLE
minimal(logical_expression) = (* 1 *) VARIABLE
minimal(list_generator) = (* 3 *) VARIABLE LARROW VARIABLE
minimal(labeled_patterns) = (* 3 *) CONSTRUCTOR EQ VARIABLE
minimal(labeled_exps) = (* 3 *) CONSTRUCTOR EQ VARIABLE
minimal(kinded_type_var) = (* 2 *) VARIABLE ANY
minimal(kinded_row_var) = (* 2 *) VARIABLE ANY
minimal(kinded_nonrec_row_var) = (* 2 *) VARIABLE ANY
minimal(kind) = (* 1 *) TYPE
minimal(just_datatype) = (* 2 *) VARIABLE END
minimal(iteration_expression) = (* 1 *) VARIABLE
minimal(interactive) = (* 1 *) SEMICOLON
minimal(infixr_9) = (* 1 *) VARIABLE
minimal(infixr_8) = (* 1 *) VARIABLE
minimal(infixr_7) = (* 1 *) VARIABLE
minimal(infixr_6) = (* 1 *) VARIABLE
minimal(infixr_5) = (* 1 *) VARIABLE
minimal(infixr_4) = (* 1 *) VARIABLE
minimal(infixr_3) = (* 1 *) VARIABLE
minimal(infixr_2) = (* 1 *) VARIABLE
minimal(infixr_1) = (* 1 *) VARIABLE
minimal(infixr_0) = (* 1 *) VARIABLE
minimal(infixl_9) = (* 1 *) VARIABLE
minimal(infixl_8) = (* 1 *) VARIABLE
minimal(infixl_7) = (* 1 *) VARIABLE
minimal(infixl_6) = (* 1 *) VARIABLE
minimal(infixl_5) = (* 1 *) VARIABLE
minimal(infixl_4) = (* 1 *) VARIABLE
minimal(infixl_3) = (* 1 *) VARIABLE
minimal(infixl_2) = (* 1 *) VARIABLE
minimal(infixl_1) = (* 1 *) VARIABLE
minimal(infixl_0) = (* 1 *) VARIABLE
minimal(hear_arrow_prefix) = (* 4 *) LBRACE COLON VARIABLE RBRACE
minimal(generators) = (* 3 *) VARIABLE LARROW VARIABLE
minimal(generator) = (* 3 *) VARIABLE LARROW VARIABLE
minimal(fun_declarations) = (* 5 *) OP PREFIXOP VARIABLE LBRACE RBRACE
minimal(fun_declaration) = (* 5 *) OP PREFIXOP VARIABLE LBRACE RBRACE
minimal(formlet_placement) = (* 5 *) LBRACE VARIABLE FATRARROW VARIABLE RBRACE
minimal(formlet_expression) = (* 1 *) VARIABLE
minimal(formlet_binding) = (* 5 *) LBRACE VARIABLE RARROW VARIABLE RBRACE
minimal(forall_datatype) = (* 1 *) VARIABLE
minimal(fixity) = (* 1 *) INFIX
minimal(file) = (* 2 *) VARIABLE END
minimal(fieldspec) = (* 1 *) MINUS
minimal(fields) = (* 1 *) CONSTRUCTOR
minimal(field_label) = (* 1 *) CONSTRUCTOR
minimal(field_constraints) = (* 1 *) READONLY
minimal(field_constraint) = (* 1 *) READONLY
minimal(field) = (* 1 *) CONSTRUCTOR
minimal(exps) = (* 1 *) VARIABLE
minimal(exp) = (* 1 *) VARIABLE
minimal(escape_expression) = (* 1 *) VARIABLE
minimal(efields) = (* 1 *) CONSTRUCTOR
minimal(efield) = (* 1 *) CONSTRUCTOR
minimal(effect_label) = (* 1 *) CONSTRUCTOR
minimal(directive) = (* 2 *) KEYWORD SEMICOLON
minimal(declarations) = (* 3 *) INFIX INFIX0 SEMICOLON
minimal(declaration) = (* 3 *) INFIX INFIX0 SEMICOLON
minimal(db_expression) = (* 1 *) VARIABLE
minimal(datatypes) = (* 1 *) VARIABLE
minimal(datatype) = (* 1 *) VARIABLE
minimal(database_expression) = (* 1 *) VARIABLE
minimal(constructors) = (* 1 *) CONSTRUCTOR
minimal(constructor_pattern) = (* 1 *) VARIABLE
minimal(constructor_expression) = (* 1 *) CONSTRUCTOR
minimal(constant) = (* 1 *) UINTEGER
minimal(cons_pattern) = (* 1 *) VARIABLE
minimal(conditional_expression) = (* 1 *) VARIABLE
minimal(cases) = (* 3 *) CASE VARIABLE RARROW
minimal(case_expression) = (* 1 *) VARIABLE
minimal(case) = (* 3 *) CASE VARIABLE RARROW
minimal(block_contents) = (* 0 *)
minimal(block) = (* 2 *) LBRACE RBRACE
minimal(binop) = (* 1 *) MINUS
minimal(bindings) = (* 2 *) VARIABLE SEMICOLON
minimal(binding) = (* 2 *) VARIABLE SEMICOLON
minimal(attrs) = (* 2 *) LBRACE RBRACE
minimal(attr_val) = (* 1 *) STRING
minimal(attr_list) = (* 4 *) VARIABLE EQ LQUOTE RQUOTE
minimal(attr) = (* 4 *) VARIABLE EQ LQUOTE RQUOTE
minimal(atomic_expression) = (* 1 *) VARIABLE
minimal(arrow_prefix) = (* 2 *) LBRACE RBRACE
minimal(args) = (* 0 *)
minimal(arg_spec) = (* 2 *) LPAREN RPAREN
minimal(arg_lists) = (* 2 *) LPAREN RPAREN
minimal(arg) = (* 1 *) STRING
maximal(xmlid) = 1
maximal(xml_tree) = infinity
maximal(xml_contents_list) = infinity
maximal(xml_contents) = infinity
maximal(xml) = infinity
maximal(vrow) = infinity
maximal(vfields) = infinity
maximal(vfield) = infinity
maximal(varlist) = infinity
maximal(var) = 1
maximal(unary_expression) = infinity
maximal(typedecl) = infinity
maximal(typed_pattern) = infinity
maximal(typed_expression) = infinity
maximal(typeargs_opt) = infinity
maximal(typearg) = 2
maximal(type_var) = 1
maximal(type_arg_list) = infinity
maximal(type_arg) = infinity
maximal(tlvarbinding) = infinity
maximal(tlfunbinding) = infinity
maximal(table_generator) = infinity
maximal(table_expression) = infinity
maximal(table_constraints) = infinity
maximal(subkind) = 1
maximal(straight_arrow_prefix) = infinity
maximal(straight_arrow) = infinity
maximal(squiggly_arrow) = infinity
maximal(squig_arrow_prefix) = infinity
maximal(signature) = infinity
maximal(row_var) = infinity
maximal(row) = infinity
maximal(rfields) = infinity
maximal(rfield) = infinity
maximal(regex_replace) = infinity
maximal(regex_pattern_sequence) = infinity
maximal(regex_pattern_alternate) = infinity
maximal(regex_pattern) = infinity
maximal(regex_flags_opt) = 1
maximal(regex) = infinity
maximal(record_labels) = infinity
maximal(record_label) = 1
maximal(primary_pattern) = infinity
maximal(primary_expression) = infinity
maximal(primary_datatype) = infinity
maximal(prefixop) = 1
maximal(preamble_declaration) = 2
maximal(preamble) = infinity
maximal(postfixop) = 1
maximal(postfix_expression) = infinity
maximal(perhaps_where) = infinity
maximal(perhaps_uinteger) = 1
maximal(perhaps_table_constraints) = infinity
maximal(perhaps_semi) = 1
maximal(perhaps_orderby) = infinity
maximal(perhaps_location) = 1
maximal(perhaps_generators) = infinity
maximal(perhaps_db_driver) = infinity
maximal(perhaps_db_args) = infinity
maximal(perhaps_cases) = infinity
maximal(patterns) = infinity
maximal(pattern) = infinity
maximal(parenthesized_thing) = infinity
maximal(parenthesized_pattern) = infinity
maximal(parenthesized_datatypes) = infinity
maximal(page_placement) = infinity
maximal(op) = 1
maximal(nonrec_row_var) = 1
maximal(nofun_declaration) = infinity
maximal(negative_pattern) = infinity
maximal(multi_args) = infinity
maximal(mu_datatype) = infinity
maximal(logical_expression) = infinity
maximal(list_generator) = infinity
maximal(labeled_patterns) = infinity
maximal(labeled_exps) = infinity
maximal(kinded_type_var) = 2
maximal(kinded_row_var) = infinity
maximal(kinded_nonrec_row_var) = 2
maximal(kind) = 1
maximal(just_datatype) = infinity
maximal(iteration_expression) = infinity
maximal(interactive) = infinity
maximal(infixr_9) = infinity
maximal(infixr_8) = infinity
maximal(infixr_7) = infinity
maximal(infixr_6) = infinity
maximal(infixr_5) = infinity
maximal(infixr_4) = infinity
maximal(infixr_3) = infinity
maximal(infixr_2) = infinity
maximal(infixr_1) = infinity
maximal(infixr_0) = infinity
maximal(infixl_9) = infinity
maximal(infixl_8) = infinity
maximal(infixl_7) = infinity
maximal(infixl_6) = infinity
maximal(infixl_5) = infinity
maximal(infixl_4) = infinity
maximal(infixl_3) = infinity
maximal(infixl_2) = infinity
maximal(infixl_1) = infinity
maximal(infixl_0) = infinity
maximal(hear_arrow_prefix) = infinity
maximal(generators) = infinity
maximal(generator) = infinity
maximal(fun_declarations) = infinity
maximal(fun_declaration) = infinity
maximal(formlet_placement) = infinity
maximal(formlet_expression) = infinity
maximal(formlet_binding) = infinity
maximal(forall_datatype) = infinity
maximal(fixity) = 1
maximal(file) = infinity
maximal(fieldspec) = infinity
maximal(fields) = infinity
maximal(field_label) = 1
maximal(field_constraints) = infinity
maximal(field_constraint) = 1
maximal(field) = infinity
maximal(exps) = infinity
maximal(exp) = infinity
maximal(escape_expression) = infinity
maximal(efields) = infinity
maximal(efield) = infinity
maximal(effect_label) = 1
maximal(directive) = infinity
maximal(declarations) = infinity
maximal(declaration) = infinity
maximal(db_expression) = infinity
maximal(datatypes) = infinity
maximal(datatype) = infinity
maximal(database_expression) = infinity
maximal(constructors) = infinity
maximal(constructor_pattern) = infinity
maximal(constructor_expression) = infinity
maximal(constant) = 1
maximal(cons_pattern) = infinity
maximal(conditional_expression) = infinity
maximal(cases) = infinity
maximal(case_expression) = infinity
maximal(case) = infinity
maximal(block_contents) = infinity
maximal(block) = infinity
maximal(binop) = 1
maximal(bindings) = infinity
maximal(binding) = infinity
maximal(attrs) = infinity
maximal(attr_val) = infinity
maximal(attr_list) = infinity
maximal(attr) = infinity
maximal(atomic_expression) = infinity
maximal(arrow_prefix) = infinity
maximal(args) = infinity
maximal(arg_spec) = infinity
maximal(arg_lists) = infinity
maximal(arg) = 1
follow(xmlid) = EQ
follow(xml_tree) = YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LXML LPAREN LBRACEBAR LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE ENDTAG END ELSE DOTDOT DOT COMMA COLONCOLON COLON CDATA CASE BARRBRACE BARBAR AMPAMP
follow(xml_contents_list) = ENDTAG
follow(xml_contents) = LXML LBRACEBAR LBRACE ENDTAG CDATA
follow(xml) = YIELDS WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(vrow) = BARRBRACKET
follow(vfields) = RPAREN BARRBRACKET
follow(vfield) = VBAR RPAREN BARRBRACKET
follow(varlist) = RPAREN DOT
follow(var) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IN EQ COMMA COLON CLIENT
follow(unary_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(typedecl) = SEMICOLON
follow(typed_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT
follow(typed_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA COLON CASE BARRBRACE
follow(typeargs_opt) = EQ
follow(typearg) = RPAREN DOT COMMA
follow(type_var) = WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BASE BARRBRACKET BARRBRACE ANY
follow(type_arg_list) = RPAREN
follow(type_arg) = RPAREN COMMA
follow(tlvarbinding) = SEMICOLON
follow(tlfunbinding) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN
follow(table_generator) = RPAREN COMMA
follow(table_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(table_constraints) = FROM
follow(subkind) = WITH WHERE VBAR VAR VALUES SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
follow(straight_arrow_prefix) = RARROW
follow(straight_arrow) = WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
follow(squiggly_arrow) = WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
follow(squig_arrow_prefix) = SQUIGRARROW
follow(signature) = VAR OP FUN
follow(row_var) = RPAREN RBRACE BASE BARRBRACKET ANY
follow(row) = RPAREN RBRACE
follow(rfields) = RPAREN
follow(rfield) = VBAR RPAREN COMMA
follow(regex_replace) = SLASHFLAGS SLASH
follow(regex_pattern_sequence) = SLASHFLAGS SLASH RPAREN ALTERNATE
follow(regex_pattern_alternate) = SLASHFLAGS SLASH RPAREN
follow(regex_pattern) = STRING STAR SLASHFLAGS SLASH RPAREN RANGE QUOTEDMETA QUESTION PLUS LPAREN LBRACE DOT DOLLAR CARET ALTERNATE
follow(regex_flags_opt) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(regex) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(record_labels) = RPAREN
follow(record_label) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(primary_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS
follow(primary_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(primary_datatype) = WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
follow(prefixop) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING MINUS LPAREN LBRACKET FALSE CONSTRUCTOR CHAR
follow(preamble_declaration) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX INCLUDE IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN #
follow(preamble) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR ALIEN
follow(postfixop) = SERVER NATIVE LBRACE CLIENT
follow(postfix_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(perhaps_where) = WITH VBAR VARIABLE VALUES UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SET SEMICOLON RPAREN RETURNING RECEIVE RBRACKET RBRACE QUERY PREFIXOP PAGE ORDERBY MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE END ELSE DOTDOT DELETE DATABASE CONSTRUCTOR COMMA CHAR CASE BARRBRACE
follow(perhaps_uinteger) = INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
follow(perhaps_table_constraints) = FROM
follow(perhaps_semi) = RBRACE CASE
follow(perhaps_orderby) = VARIABLE UPDATE UINTEGER UFLOAT TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
follow(perhaps_location) = LBRACE EQ
follow(perhaps_generators) = RPAREN
follow(perhaps_db_driver) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(perhaps_db_args) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(perhaps_cases) = RBRACE
follow(patterns) = RPAREN RBRACKET
follow(pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA CLIENT
follow(parenthesized_thing) = WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP
follow(parenthesized_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS
follow(parenthesized_datatypes) = WITH WHERE VBAR VAR VALUES TILDE SQUIGRARROW SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE MINUS LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
follow(page_placement) = LXML LBRACEBAR LBRACE ENDTAG CDATA
follow(op) = VARIABLE UNDERSCORE UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN MINUS LPAREN LBRACKET FALSE CONSTRUCTOR COLON CHAR
follow(nonrec_row_var) = SQUIGRARROW RPAREN RBRACE RARROW BASE BARRBRACKET ANY
follow(nofun_declaration) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN #
follow(negative_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS
follow(multi_args) = SERVER NATIVE LPAREN LBRACE CLIENT
follow(mu_datatype) = WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
follow(logical_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(list_generator) = RPAREN COMMA
follow(labeled_patterns) = VBAR RPAREN
follow(labeled_exps) = VBAR RPAREN
follow(kinded_type_var) = WITH WHERE VBAR VAR VALUES SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP OP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FROM EQ END ELSE DOTDOT COMMA COLON CLIENT CASE BARRBRACKET BARRBRACE
follow(kinded_row_var) = RPAREN RBRACE BARRBRACKET
follow(kinded_nonrec_row_var) = SQUIGRARROW RBRACE RARROW
follow(kind) = RPAREN DOT COMMA
follow(just_datatype) = #
follow(iteration_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(interactive) = #
follow(infixr_9) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_8) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_7) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_6) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_5) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_4) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_3) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_2) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_1) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixr_0) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_9) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_8) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_7) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_6) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_5) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_4) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_3) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR2 INFIXR1 INFIXR0 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX2 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_2) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR1 INFIXR0 INFIXL2 INFIXL1 INFIXL0 INFIX1 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_1) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXR0 INFIXL1 INFIXL0 INFIX0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(infixl_0) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW INFIXL0 FATRARROW END ELSE DOTDOT COMMA COLON CASE BARRBRACE BARBAR AMPAMP
follow(hear_arrow_prefix) = SQUIGRARROW
follow(generators) = RPAREN
follow(generator) = RPAREN COMMA
follow(fun_declarations) = SIG SEMICOLON OP FUN
follow(fun_declaration) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG SEMICOLON RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN
follow(formlet_placement) = LXML LBRACEBAR LBRACE ENDTAG CDATA
follow(formlet_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(formlet_binding) = LXML LBRACEBAR LBRACE ENDTAG CDATA
follow(forall_datatype) = WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
follow(fixity) = UINTEGER INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0
follow(file) = #
follow(fieldspec) = VBAR RPAREN RBRACE COMMA BARRBRACKET
follow(fields) = RPAREN RBRACE
follow(field_label) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING READONLY RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN LBRACE INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE EQ END ELSE DOTDOT DOT DEFAULT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(field_constraints) = FROM COMMA
follow(field_constraint) = READONLY FROM DEFAULT COMMA
follow(field) = VBAR RPAREN RBRACE COMMA
follow(exps) = RPAREN RBRACKET
follow(exp) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(escape_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(efields) = RBRACE
follow(efield) = VBAR RBRACE COMMA
follow(effect_label) = VBAR RBRACE MINUS LBRACE COMMA COLON
follow(directive) = #
follow(declarations) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN
follow(declaration) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN SIG RECEIVE QUERY PREFIXOP PREFIX POSTFIX PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT INFIXR INFIXL INFIX IF FUN FORMLET FOR FALSE ESCAPE END DELETE DATABASE CONSTRUCTOR CHAR ALIEN
follow(db_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(datatypes) = RPAREN
follow(datatype) = WITH WHERE VBAR VAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE OP LARROW FUN FROM END ELSE DOTDOT COMMA COLON CASE BARRBRACKET BARRBRACE
follow(database_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(constructors) = RPAREN
follow(constructor_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLONCOLON COLON CLIENT AS
follow(constructor_expression) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(constant) = WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SERVER SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP NATIVE MINUSDOT MINUS LPAREN LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE EQ END ELSE DOTDOT DOT COMMA COLONCOLON COLON CLIENT CHAR CASE BARRBRACE BARBAR AS AMPAMP
follow(cons_pattern) = VBAR SERVER RPAREN RBRACKET RBRACE RARROW POSTFIXOP NATIVE LLARROW LBRACE LARROW INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQ COMMA COLON CLIENT AS
follow(conditional_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(cases) = RBRACE
follow(case_expression) = WITH VBAR VALUES SEMICOLON RPAREN RBRACKET RBRACE END ELSE DOTDOT COMMA CASE BARRBRACE
follow(case) = RBRACE CASE
follow(block_contents) = RBRACE CASE
follow(block) = WITH VBAR VARIABLE VAR VALUES UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING STAR SPAWNWAIT SPAWN SLASHRXML SLASHFLAGS SLASH SIG SEMICOLON RXML RQUOTE RPAREN RETURNING RECEIVE RBRACKET RBRACE RARROW RANGE QUOTEDMETA QUESTION QUERY PREFIXOP PREFIX POSTFIXOP POSTFIX PLUS PAGE OP MINUSDOT MINUS LXML LPAREN LBRACKET LBRACEBAR LBRACE INSERT INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXR INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIXL INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 INFIX IF FUN FORMLET FOR FATRARROW FALSE ESCAPE EQUALSTILDE ENDTAG END ELSE DOTDOT DOT DOLLAR DELETE DATABASE CONSTRUCTOR COMMA COLONCOLON COLON CHAR CDATA CASE CARET BARRBRACE BARBAR AMPAMP ALTERNATE ALIEN
follow(binop) = RPAREN
follow(bindings) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
follow(binding) = VARIABLE VAR UPDATE UINTEGER UFLOAT TYPENAME TRUE TABLE SWITCH STRING SPAWNWAIT SPAWN RECEIVE QUERY PREFIXOP PAGE MINUSDOT MINUS LXML LPAREN LBRACKET LBRACE INSERT IF FUN FORMLET FOR FALSE ESCAPE DELETE DATABASE CONSTRUCTOR CHAR
follow(attrs) = SLASHRXML RXML
follow(attr_val) = RQUOTE
follow(attr_list) = VARIABLE SLASHRXML RXML LBRACE
follow(attr) = VARIABLE SLASHRXML RXML LBRACE
follow(atomic_expression) = WITH VBAR VARIABLE VALUES UINTEGER UFLOAT TRUE STRING SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW POSTFIXOP MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW FALSE EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CHAR CASE BARRBRACE BARBAR AMPAMP
follow(arrow_prefix) = SQUIGRARROW RARROW
follow(args) = SEMICOLON
follow(arg_spec) = WITH VBAR VALUES SEMICOLON RPAREN RETURNING RBRACKET RBRACE RARROW MINUSDOT MINUS LPAREN INFIXR9 INFIXR8 INFIXR7 INFIXR6 INFIXR5 INFIXR4 INFIXR3 INFIXR2 INFIXR1 INFIXR0 INFIXL9 INFIXL8 INFIXL7 INFIXL6 INFIXL5 INFIXL4 INFIXL3 INFIXL2 INFIXL1 INFIXL0 INFIX9 INFIX8 INFIX7 INFIX6 INFIX5 INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FATRARROW EQUALSTILDE END ELSE DOTDOT DOT COMMA COLONCOLON COLON CASE BARRBRACE BARBAR AMPAMP
follow(arg_lists) = SERVER NATIVE LBRACE CLIENT
follow(arg) = VARIABLE UINTEGER UFLOAT TRUE STRING SEMICOLON FALSE CONSTRUCTOR
Built an LR(0) automaton with 828 states.
The grammar is not SLR(1) -- 9 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 847 states.
Warning: 2 states have reduce/reduce conflicts.
Warning: 4 reduce/reduce conflicts were arbitrarily resolved.
385 out of 847 states have a default reduction.
249 out of 847 states are represented.
0 out of 309 symbols keep track of their start position.
0 out of 309 symbols keep track of their end position.
280 out of 478 productions exploit shiftreduce optimization.
0 out of 847 states can peek at an error.
2336 functions before inlining, 346 functions after inlining.
