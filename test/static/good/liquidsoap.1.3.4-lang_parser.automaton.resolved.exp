State 0:
## Known stack suffix:
##
## LR(1) items:
interactive' -> . interactive [ # ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On EOF shift to state 374
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On interactive shift to state 375
-- On exprs shift to state 376
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 1:
## Known stack suffix:
## WAV
## LR(1) items:
expr -> WAV . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 373
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 2:
## Known stack suffix:
## LPAR
## LR(1) items:
app_opt -> LPAR . app_list RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 93
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 110
-- On app_list_elem shift to state 111
-- On app_list shift to state 371
## Reductions:
-- On RPAR
--   reduce production app_list ->

State 3:
## Known stack suffix:
## VORBIS_CBR
## LR(1) items:
top_level_ogg_item -> VORBIS_CBR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 4
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 4:
## Known stack suffix:
## VORBIS_CBR app_opt
## LR(1) items:
top_level_ogg_item -> VORBIS_CBR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> VORBIS_CBR app_opt

State 5:
## Known stack suffix:
## VORBIS_ABR
## LR(1) items:
top_level_ogg_item -> VORBIS_ABR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 6
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 6:
## Known stack suffix:
## VORBIS_ABR app_opt
## LR(1) items:
top_level_ogg_item -> VORBIS_ABR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> VORBIS_ABR app_opt

State 7:
## Known stack suffix:
## VORBIS
## LR(1) items:
top_level_ogg_item -> VORBIS . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 8
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 8:
## Known stack suffix:
## VORBIS app_opt
## LR(1) items:
top_level_ogg_item -> VORBIS app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> VORBIS app_opt

State 9:
## Known stack suffix:
## VARLPAR
## LR(1) items:
expr -> VARLPAR . app_list RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 93
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 110
-- On app_list_elem shift to state 111
-- On app_list shift to state 369
## Reductions:
-- On RPAR
--   reduce production app_list ->

State 10:
## Known stack suffix:
## VARLBRA
## LR(1) items:
expr -> VARLBRA . expr RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 367
## Reductions:

State 11:
## Known stack suffix:
## VAR
## LR(1) items:
expr -> VAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> VAR

State 12:
## Known stack suffix:
## TIME
## LR(1) items:
expr -> TIME . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TIME

State 13:
## Known stack suffix:
## THEORA
## LR(1) items:
top_level_ogg_item -> THEORA . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 14
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 14:
## Known stack suffix:
## THEORA app_opt
## LR(1) items:
top_level_ogg_item -> THEORA app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> THEORA app_opt

State 15:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> STRING

State 16:
## Known stack suffix:
## SPEEX
## LR(1) items:
top_level_ogg_item -> SPEEX . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 17
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 17:
## Known stack suffix:
## SPEEX app_opt
## LR(1) items:
top_level_ogg_item -> SPEEX app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> SPEEX app_opt

State 18:
## Known stack suffix:
## SHINE
## LR(1) items:
expr -> SHINE . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 19
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 19:
## Known stack suffix:
## SHINE app_opt
## LR(1) items:
expr -> SHINE app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SHINE app_opt

State 20:
## Known stack suffix:
## SERVER_WRITE
## LR(1) items:
expr -> SERVER_WRITE . expr THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 363
## Reductions:

State 21:
## Known stack suffix:
## SERVER_WAIT
## LR(1) items:
expr -> SERVER_WAIT . exprs THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 359
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 22:
## Known stack suffix:
## VAR
## LR(1) items:
binding -> VAR . GETS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
expr -> VAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On GETS shift to state 23
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production expr -> VAR

State 23:
## Known stack suffix:
## VAR GETS
## LR(1) items:
binding -> VAR GETS . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 358
## Reductions:

State 24:
## Known stack suffix:
## SERVER_READLINE
## LR(1) items:
expr -> SERVER_READLINE . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## SERVER_READLINE VAR
## LR(1) items:
expr -> SERVER_READLINE VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## SERVER_READLINE VAR THEN
## LR(1) items:
expr -> SERVER_READLINE VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 356
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 27:
## Known stack suffix:
## SERVER_READCHARS
## LR(1) items:
expr -> SERVER_READCHARS . expr COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 350
## Reductions:

State 28:
## Known stack suffix:
## SERVER_READ
## LR(1) items:
expr -> SERVER_READ . expr COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 344
## Reductions:

State 29:
## Known stack suffix:
## REF
## LR(1) items:
expr -> REF . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 343
## Reductions:

State 30:
## Known stack suffix:
## OPUS
## LR(1) items:
top_level_ogg_item -> OPUS . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 31
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 31:
## Known stack suffix:
## OPUS app_opt
## LR(1) items:
top_level_ogg_item -> OPUS app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_level_ogg_item -> OPUS app_opt

State 32:
## Known stack suffix:
## OGG
## LR(1) items:
expr -> OGG . LPAR ogg_items RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## OGG LPAR
## LR(1) items:
expr -> OGG LPAR . ogg_items RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On THEORA shift to state 13
-- On SPEEX shift to state 16
-- On OPUS shift to state 30
-- On FLAC shift to state 34
-- On top_level_ogg_item shift to state 36
-- On ogg_items shift to state 37
-- On ogg_item shift to state 39
## Reductions:

State 34:
## Known stack suffix:
## FLAC
## LR(1) items:
ogg_item -> FLAC . app_opt [ RPAR COMMA ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 35
## Reductions:
-- On RPAR COMMA
--   reduce production app_opt ->

State 35:
## Known stack suffix:
## FLAC app_opt
## LR(1) items:
ogg_item -> FLAC app_opt . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ogg_item -> FLAC app_opt

State 36:
## Known stack suffix:
## top_level_ogg_item
## LR(1) items:
ogg_item -> top_level_ogg_item . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ogg_item -> top_level_ogg_item

State 37:
## Known stack suffix:
## OGG LPAR ogg_items
## LR(1) items:
expr -> OGG LPAR ogg_items . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## OGG LPAR ogg_items RPAR
## LR(1) items:
expr -> OGG LPAR ogg_items RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> OGG LPAR ogg_items RPAR

State 39:
## Known stack suffix:
## ogg_item
## LR(1) items:
ogg_items -> ogg_item . [ RPAR ]
ogg_items -> ogg_item . COMMA ogg_items [ RPAR ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAR
--   reduce production ogg_items -> ogg_item

State 40:
## Known stack suffix:
## ogg_item COMMA
## LR(1) items:
ogg_items -> ogg_item COMMA . ogg_items [ RPAR ]
## Transitions:
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On THEORA shift to state 13
-- On SPEEX shift to state 16
-- On OPUS shift to state 30
-- On FLAC shift to state 34
-- On top_level_ogg_item shift to state 36
-- On ogg_items shift to state 41
-- On ogg_item shift to state 39
## Reductions:

State 41:
## Known stack suffix:
## ogg_item COMMA ogg_items
## LR(1) items:
ogg_items -> ogg_item COMMA ogg_items . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ogg_items -> ogg_item COMMA ogg_items

State 42:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 342
## Reductions:

State 43:
## Known stack suffix:
## MP3_VBR
## LR(1) items:
expr -> MP3_VBR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 44
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 44:
## Known stack suffix:
## MP3_VBR app_opt
## LR(1) items:
expr -> MP3_VBR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MP3_VBR app_opt

State 45:
## Known stack suffix:
## MP3_ABR
## LR(1) items:
expr -> MP3_ABR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 46
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 46:
## Known stack suffix:
## MP3_ABR app_opt
## LR(1) items:
expr -> MP3_ABR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MP3_ABR app_opt

State 47:
## Known stack suffix:
## MP3
## LR(1) items:
expr -> MP3 . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 48
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 48:
## Known stack suffix:
## MP3 app_opt
## LR(1) items:
expr -> MP3 app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MP3 app_opt

State 49:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . FLOAT [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> MINUS . INT [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> MINUS . LPAR expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 50
-- On INT shift to state 340
-- On FLOAT shift to state 341
## Reductions:

State 50:
## Known stack suffix:
## MINUS LPAR
## LR(1) items:
expr -> MINUS LPAR . expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 338
## Reductions:

State 51:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr COLON ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> LPAR . expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> LPAR . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> LPAR . expr COMMA expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On RPAR shift to state 52
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 330
## Reductions:

State 52:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
expr -> LPAR RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAR RPAR

State 53:
## Known stack suffix:
## LCUR
## LR(1) items:
expr -> LCUR . exprs RCUR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 328
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 54:
## Known stack suffix:
## LBRA
## LR(1) items:
liquidsoap_1_3_4_lang_parser_list -> LBRA . inner_list RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On inner_list shift to state 323
-- On expr shift to state 325
## Reductions:
-- On RBRA
--   reduce production inner_list ->

State 55:
## Known stack suffix:
## INTERVAL
## LR(1) items:
expr -> INTERVAL . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INTERVAL

State 56:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT

State 57:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . exprs THEN exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 318
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 58:
## Known stack suffix:
## GSTREAMER
## LR(1) items:
expr -> GSTREAMER . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 59
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 59:
## Known stack suffix:
## GSTREAMER app_opt
## LR(1) items:
expr -> GSTREAMER app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> GSTREAMER app_opt

State 60:
## Known stack suffix:
## GET
## LR(1) items:
expr -> GET . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 317
## Reductions:

State 61:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . LPAR arglist RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## FUN LPAR
## LR(1) items:
expr -> FUN LPAR . arglist RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 63
-- On TILD shift to state 76
-- On arglist shift to state 313
-- On arg shift to state 250
## Reductions:
-- On RPAR
--   reduce production arglist ->

State 63:
## Known stack suffix:
## VAR
## LR(1) items:
arg -> VAR . opt [ RPAR COMMA ]
## Transitions:
-- On GETS shift to state 64
-- On opt shift to state 312
## Reductions:
-- On RPAR COMMA
--   reduce production opt ->

State 64:
## Known stack suffix:
## GETS
## LR(1) items:
opt -> GETS . expr [ RPAR COMMA ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 311
## Reductions:

State 65:
## Known stack suffix:
## FLOAT
## LR(1) items:
expr -> FLOAT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLOAT

State 66:
## Known stack suffix:
## FLAC
## LR(1) items:
expr -> FLAC . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 67
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 67:
## Known stack suffix:
## FLAC app_opt
## LR(1) items:
expr -> FLAC app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLAC app_opt

State 68:
## Known stack suffix:
## FDKAAC
## LR(1) items:
expr -> FDKAAC . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 69
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 69:
## Known stack suffix:
## FDKAAC app_opt
## LR(1) items:
expr -> FDKAAC app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FDKAAC app_opt

State 70:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
expr -> EXTERNAL . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 71
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 71:
## Known stack suffix:
## EXTERNAL app_opt
## LR(1) items:
expr -> EXTERNAL app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> EXTERNAL app_opt

State 72:
## Known stack suffix:
## BOOL
## LR(1) items:
expr -> BOOL . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> BOOL

State 73:
## Known stack suffix:
## BEGIN
## LR(1) items:
expr -> BEGIN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 309
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 74:
## Known stack suffix:
## DEF
## LR(1) items:
binding -> DEF . VAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
binding -> DEF . VARLPAR arglist RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
binding -> DEF . REC VARLPAR arglist RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On VARLPAR shift to state 75
-- On VAR shift to state 298
-- On REC shift to state 302
## Reductions:

State 75:
## Known stack suffix:
## DEF VARLPAR
## LR(1) items:
binding -> DEF VARLPAR . arglist RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On VAR shift to state 63
-- On TILD shift to state 76
-- On arglist shift to state 79
-- On arg shift to state 250
## Reductions:
-- On RPAR
--   reduce production arglist ->

State 76:
## Known stack suffix:
## TILD
## LR(1) items:
arg -> TILD . VAR opt [ RPAR COMMA ]
## Transitions:
-- On VAR shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## TILD VAR
## LR(1) items:
arg -> TILD VAR . opt [ RPAR COMMA ]
## Transitions:
-- On GETS shift to state 64
-- On opt shift to state 78
## Reductions:
-- On RPAR COMMA
--   reduce production opt ->

State 78:
## Known stack suffix:
## TILD VAR opt
## LR(1) items:
arg -> TILD VAR opt . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> TILD VAR opt

State 79:
## Known stack suffix:
## DEF VARLPAR arglist
## LR(1) items:
binding -> DEF VARLPAR arglist . RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## DEF VARLPAR arglist RPAR
## LR(1) items:
binding -> DEF VARLPAR arglist RPAR . g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On GETS shift to state 81
-- On g shift to state 82
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ REF OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GSTREAMER GET FUN FLOAT FLAC FDKAAC EXTERNAL DEF BOOL BEGIN AVI
--   reduce production g ->

State 81:
## Known stack suffix:
## GETS
## LR(1) items:
g -> GETS . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ REF OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GSTREAMER GET FUN FLOAT FLAC FDKAAC EXTERNAL DEF BOOL BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production g -> GETS

State 82:
## Known stack suffix:
## DEF VARLPAR arglist RPAR g
## LR(1) items:
binding -> DEF VARLPAR arglist RPAR g . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 87
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 83:
## Known stack suffix:
## AVI
## LR(1) items:
expr -> AVI . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 84
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 84:
## Known stack suffix:
## AVI app_opt
## LR(1) items:
expr -> AVI app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> AVI app_opt

State 85:
## Known stack suffix:
## top_level_ogg_item
## LR(1) items:
expr -> top_level_ogg_item . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> top_level_ogg_item

State 86:
## Known stack suffix:
## liquidsoap_1_3_4_lang_parser_list
## LR(1) items:
expr -> liquidsoap_1_3_4_lang_parser_list . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> liquidsoap_1_3_4_lang_parser_list

State 87:
## Known stack suffix:
## DEF VARLPAR arglist RPAR g exprs
## LR(1) items:
binding -> DEF VARLPAR arglist RPAR g exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On END shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## DEF VARLPAR arglist RPAR g exprs END
## LR(1) items:
binding -> DEF VARLPAR arglist RPAR g exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> DEF VARLPAR arglist RPAR g exprs END

State 89:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
exprs -> expr . s [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
exprs -> expr . cexprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
exprs -> expr . SEQ exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 90
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 92
-- On VARLBRA shift to state 116
-- On VAR shift to state 119
-- On TIMES shift to state 96
-- On TIME shift to state 120
-- On THEORA shift to state 13
-- On STRING shift to state 121
-- On SPEEX shift to state 16
-- On SHINE shift to state 122
-- On SET shift to state 98
-- On SERVER_WRITE shift to state 124
-- On SERVER_WAIT shift to state 130
-- On SERVER_READLINE shift to state 135
-- On SERVER_READCHARS shift to state 140
-- On SERVER_READ shift to state 147
-- On SEQ shift to state 294
-- On REF shift to state 156
-- On OPUS shift to state 30
-- On OGG shift to state 158
-- On NOT shift to state 162
-- On MP3_VBR shift to state 164
-- On MP3_ABR shift to state 166
-- On MP3 shift to state 168
-- On MINUS shift to state 100
-- On LPAR shift to state 170
-- On LCUR shift to state 224
-- On LBRA shift to state 54
-- On INTERVAL shift to state 227
-- On INT shift to state 228
-- On IF shift to state 229
-- On GET shift to state 242
-- On FUN shift to state 244
-- On FLOAT shift to state 253
-- On FLAC shift to state 254
-- On FDKAAC shift to state 256
-- On EXTERNAL shift to state 258
-- On DEF shift to state 74
-- On BOOL shift to state 260
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
-- On BEGIN shift to state 261
-- On AVI shift to state 264
-- On top_level_ogg_item shift to state 266
-- On s shift to state 296
-- On liquidsoap_1_3_4_lang_parser_list shift to state 268
-- On cexprs shift to state 297
-- On cexpr shift to state 270
-- On binding shift to state 289
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s ->

State 90:
## Known stack suffix:
## WAV
## LR(1) items:
cexpr -> WAV . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 91
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 91:
## Known stack suffix:
## WAV app_opt
## LR(1) items:
cexpr -> WAV app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> WAV app_opt

State 92:
## Known stack suffix:
## VARLPAR
## LR(1) items:
cexpr -> VARLPAR . app_list RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 93
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 110
-- On app_list_elem shift to state 111
-- On app_list shift to state 114
## Reductions:
-- On RPAR
--   reduce production app_list ->

State 93:
## Known stack suffix:
## VAR
## LR(1) items:
app_list_elem -> VAR . GETS expr [ RPAR COMMA ]
expr -> VAR . [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On GETS shift to state 94
## Reductions:
-- On TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0
--   reduce production expr -> VAR

State 94:
## Known stack suffix:
## VAR GETS
## LR(1) items:
app_list_elem -> VAR GETS . expr [ RPAR COMMA ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## VAR GETS expr
## LR(1) items:
app_list_elem -> VAR GETS expr . [ RPAR COMMA ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On RPAR COMMA
--   reduce production app_list_elem -> VAR GETS expr

State 96:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr TIMES expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr TIMES expr

State 98:
## Known stack suffix:
## expr SET
## LR(1) items:
expr -> expr SET . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## expr SET expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr SET expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BEGIN AVI
--   reduce production expr -> expr SET expr

State 100:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr MINUS expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On BIN3 shift to state 102
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production expr -> expr MINUS expr

State 102:
## Known stack suffix:
## expr BIN3
## LR(1) items:
expr -> expr BIN3 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## expr BIN3 expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr BIN3 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr BIN3 expr

State 104:
## Known stack suffix:
## expr BIN2
## LR(1) items:
expr -> expr BIN2 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## expr BIN2 expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr BIN2 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On BIN3 shift to state 102
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production expr -> expr BIN2 expr

State 106:
## Known stack suffix:
## expr BIN1
## LR(1) items:
expr -> expr BIN1 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## expr BIN1 expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr BIN1 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN1 BIN0 BEGIN AVI
--   reduce production expr -> expr BIN1 expr

State 108:
## Known stack suffix:
## expr BIN0
## LR(1) items:
expr -> expr BIN0 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## expr BIN0 expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr BIN0 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN0 BEGIN AVI
--   reduce production expr -> expr BIN0 expr

State 110:
## Known stack suffix:
## expr
## LR(1) items:
app_list_elem -> expr . [ RPAR COMMA ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On RPAR COMMA
--   reduce production app_list_elem -> expr

State 111:
## Known stack suffix:
## app_list_elem
## LR(1) items:
app_list -> app_list_elem . [ RPAR ]
app_list -> app_list_elem . COMMA app_list [ RPAR ]
## Transitions:
-- On COMMA shift to state 112
## Reductions:
-- On RPAR
--   reduce production app_list -> app_list_elem

State 112:
## Known stack suffix:
## app_list_elem COMMA
## LR(1) items:
app_list -> app_list_elem COMMA . app_list [ RPAR ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 93
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 110
-- On app_list_elem shift to state 111
-- On app_list shift to state 113
## Reductions:
-- On RPAR
--   reduce production app_list ->

State 113:
## Known stack suffix:
## app_list_elem COMMA app_list
## LR(1) items:
app_list -> app_list_elem COMMA app_list . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_list -> app_list_elem COMMA app_list

State 114:
## Known stack suffix:
## VARLPAR app_list
## LR(1) items:
cexpr -> VARLPAR app_list . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## VARLPAR app_list RPAR
## LR(1) items:
cexpr -> VARLPAR app_list RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> VARLPAR app_list RPAR

State 116:
## Known stack suffix:
## VARLBRA
## LR(1) items:
cexpr -> VARLBRA . expr RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## VARLBRA expr
## LR(1) items:
cexpr -> VARLBRA expr . RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RBRA shift to state 118
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 118:
## Known stack suffix:
## VARLBRA expr RBRA
## LR(1) items:
cexpr -> VARLBRA expr RBRA . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> VARLBRA expr RBRA

State 119:
## Known stack suffix:
## VAR
## LR(1) items:
binding -> VAR . GETS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
cexpr -> VAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On GETS shift to state 23
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production cexpr -> VAR

State 120:
## Known stack suffix:
## TIME
## LR(1) items:
cexpr -> TIME . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> TIME

State 121:
## Known stack suffix:
## STRING
## LR(1) items:
cexpr -> STRING . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> STRING

State 122:
## Known stack suffix:
## SHINE
## LR(1) items:
cexpr -> SHINE . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 123
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 123:
## Known stack suffix:
## SHINE app_opt
## LR(1) items:
cexpr -> SHINE app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SHINE app_opt

State 124:
## Known stack suffix:
## SERVER_WRITE
## LR(1) items:
cexpr -> SERVER_WRITE . expr THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## SERVER_WRITE expr
## LR(1) items:
cexpr -> SERVER_WRITE expr . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On THEN shift to state 126
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 126:
## Known stack suffix:
## SERVER_WRITE expr THEN
## LR(1) items:
cexpr -> SERVER_WRITE expr THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 127
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 127:
## Known stack suffix:
## SERVER_WRITE expr THEN exprs
## LR(1) items:
cexpr -> SERVER_WRITE expr THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## SERVER_WRITE expr THEN exprs END
## LR(1) items:
cexpr -> SERVER_WRITE expr THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SERVER_WRITE expr THEN exprs END

State 129:
## Known stack suffix:
## binding
## LR(1) items:
exprs -> binding . s [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
exprs -> binding . cexprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
exprs -> binding . SEQ exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 90
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 92
-- On VARLBRA shift to state 116
-- On VAR shift to state 119
-- On TIME shift to state 120
-- On THEORA shift to state 13
-- On STRING shift to state 121
-- On SPEEX shift to state 16
-- On SHINE shift to state 122
-- On SERVER_WRITE shift to state 124
-- On SERVER_WAIT shift to state 130
-- On SERVER_READLINE shift to state 135
-- On SERVER_READCHARS shift to state 140
-- On SERVER_READ shift to state 147
-- On SEQ shift to state 154
-- On REF shift to state 156
-- On OPUS shift to state 30
-- On OGG shift to state 158
-- On NOT shift to state 162
-- On MP3_VBR shift to state 164
-- On MP3_ABR shift to state 166
-- On MP3 shift to state 168
-- On LPAR shift to state 170
-- On LCUR shift to state 224
-- On LBRA shift to state 54
-- On INTERVAL shift to state 227
-- On INT shift to state 228
-- On IF shift to state 229
-- On GET shift to state 242
-- On FUN shift to state 244
-- On FLOAT shift to state 253
-- On FLAC shift to state 254
-- On FDKAAC shift to state 256
-- On EXTERNAL shift to state 258
-- On DEF shift to state 74
-- On BOOL shift to state 260
-- On BEGIN shift to state 261
-- On AVI shift to state 264
-- On top_level_ogg_item shift to state 266
-- On s shift to state 267
-- On liquidsoap_1_3_4_lang_parser_list shift to state 268
-- On cexprs shift to state 269
-- On cexpr shift to state 270
-- On binding shift to state 289
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s ->

State 130:
## Known stack suffix:
## SERVER_WAIT
## LR(1) items:
cexpr -> SERVER_WAIT . exprs THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 131
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 131:
## Known stack suffix:
## SERVER_WAIT exprs
## LR(1) items:
cexpr -> SERVER_WAIT exprs . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## SERVER_WAIT exprs THEN
## LR(1) items:
cexpr -> SERVER_WAIT exprs THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 133
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 133:
## Known stack suffix:
## SERVER_WAIT exprs THEN exprs
## LR(1) items:
cexpr -> SERVER_WAIT exprs THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## SERVER_WAIT exprs THEN exprs END
## LR(1) items:
cexpr -> SERVER_WAIT exprs THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SERVER_WAIT exprs THEN exprs END

State 135:
## Known stack suffix:
## SERVER_READLINE
## LR(1) items:
cexpr -> SERVER_READLINE . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## SERVER_READLINE VAR
## LR(1) items:
cexpr -> SERVER_READLINE VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## SERVER_READLINE VAR THEN
## LR(1) items:
cexpr -> SERVER_READLINE VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 138
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 138:
## Known stack suffix:
## SERVER_READLINE VAR THEN exprs
## LR(1) items:
cexpr -> SERVER_READLINE VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## SERVER_READLINE VAR THEN exprs END
## LR(1) items:
cexpr -> SERVER_READLINE VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SERVER_READLINE VAR THEN exprs END

State 140:
## Known stack suffix:
## SERVER_READCHARS
## LR(1) items:
cexpr -> SERVER_READCHARS . expr COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## SERVER_READCHARS expr
## LR(1) items:
cexpr -> SERVER_READCHARS expr . COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On COLON shift to state 142
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 142:
## Known stack suffix:
## SERVER_READCHARS expr COLON
## LR(1) items:
cexpr -> SERVER_READCHARS expr COLON . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR
## LR(1) items:
cexpr -> SERVER_READCHARS expr COLON VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN
## LR(1) items:
cexpr -> SERVER_READCHARS expr COLON VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 145
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 145:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN exprs
## LR(1) items:
cexpr -> SERVER_READCHARS expr COLON VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN exprs END
## LR(1) items:
cexpr -> SERVER_READCHARS expr COLON VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SERVER_READCHARS expr COLON VAR THEN exprs END

State 147:
## Known stack suffix:
## SERVER_READ
## LR(1) items:
cexpr -> SERVER_READ . expr COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## SERVER_READ expr
## LR(1) items:
cexpr -> SERVER_READ expr . COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On COLON shift to state 149
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 149:
## Known stack suffix:
## SERVER_READ expr COLON
## LR(1) items:
cexpr -> SERVER_READ expr COLON . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## SERVER_READ expr COLON VAR
## LR(1) items:
cexpr -> SERVER_READ expr COLON VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN
## LR(1) items:
cexpr -> SERVER_READ expr COLON VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 152
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 152:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN exprs
## LR(1) items:
cexpr -> SERVER_READ expr COLON VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN exprs END
## LR(1) items:
cexpr -> SERVER_READ expr COLON VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> SERVER_READ expr COLON VAR THEN exprs END

State 154:
## Known stack suffix:
## binding SEQ
## LR(1) items:
exprs -> binding SEQ . exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
s -> SEQ . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 155
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s -> SEQ

State 155:
## Known stack suffix:
## binding SEQ exprs
## LR(1) items:
exprs -> binding SEQ exprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> binding SEQ exprs

State 156:
## Known stack suffix:
## REF
## LR(1) items:
cexpr -> REF . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## REF expr
## LR(1) items:
cexpr -> REF expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI
--   reduce production cexpr -> REF expr

State 158:
## Known stack suffix:
## OGG
## LR(1) items:
cexpr -> OGG . LPAR ogg_items RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## OGG LPAR
## LR(1) items:
cexpr -> OGG LPAR . ogg_items RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On THEORA shift to state 13
-- On SPEEX shift to state 16
-- On OPUS shift to state 30
-- On FLAC shift to state 34
-- On top_level_ogg_item shift to state 36
-- On ogg_items shift to state 160
-- On ogg_item shift to state 39
## Reductions:

State 160:
## Known stack suffix:
## OGG LPAR ogg_items
## LR(1) items:
cexpr -> OGG LPAR ogg_items . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## OGG LPAR ogg_items RPAR
## LR(1) items:
cexpr -> OGG LPAR ogg_items RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> OGG LPAR ogg_items RPAR

State 162:
## Known stack suffix:
## NOT
## LR(1) items:
cexpr -> NOT . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## NOT expr
## LR(1) items:
cexpr -> NOT expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN1 BIN0 BEGIN AVI
--   reduce production cexpr -> NOT expr

State 164:
## Known stack suffix:
## MP3_VBR
## LR(1) items:
cexpr -> MP3_VBR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 165
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 165:
## Known stack suffix:
## MP3_VBR app_opt
## LR(1) items:
cexpr -> MP3_VBR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> MP3_VBR app_opt

State 166:
## Known stack suffix:
## MP3_ABR
## LR(1) items:
cexpr -> MP3_ABR . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 167
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 167:
## Known stack suffix:
## MP3_ABR app_opt
## LR(1) items:
cexpr -> MP3_ABR app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> MP3_ABR app_opt

State 168:
## Known stack suffix:
## MP3
## LR(1) items:
cexpr -> MP3 . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 169
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 169:
## Known stack suffix:
## MP3 app_opt
## LR(1) items:
cexpr -> MP3 app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> MP3 app_opt

State 170:
## Known stack suffix:
## LPAR
## LR(1) items:
cexpr -> LPAR . expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> LPAR . expr COLON ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> LPAR . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> LPAR . expr COMMA expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On RPAR shift to state 171
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 172
## Reductions:

State 171:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
cexpr -> LPAR RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> LPAR RPAR

State 172:
## Known stack suffix:
## LPAR expr
## LR(1) items:
cexpr -> LPAR expr . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> LPAR expr . COLON ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> LPAR expr . COMMA expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RPAR shift to state 173
-- On MINUS shift to state 100
-- On COMMA shift to state 174
-- On COLON shift to state 177
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 173:
## Known stack suffix:
## LPAR expr RPAR
## LR(1) items:
cexpr -> LPAR expr RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> LPAR expr RPAR

State 174:
## Known stack suffix:
## LPAR expr COMMA
## LR(1) items:
cexpr -> LPAR expr COMMA . expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## LPAR expr COMMA expr
## LR(1) items:
cexpr -> LPAR expr COMMA expr . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RPAR shift to state 176
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 176:
## Known stack suffix:
## LPAR expr COMMA expr RPAR
## LR(1) items:
cexpr -> LPAR expr COMMA expr RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> LPAR expr COMMA expr RPAR

State 177:
## Known stack suffix:
## LPAR expr COLON
## LR(1) items:
cexpr -> LPAR expr COLON . ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 222
## Reductions:

State 178:
## Known stack suffix:
## VARLPAR
## LR(1) items:
ty -> VARLPAR . ty_args RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 179
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty_args shift to state 216
-- On ty_arg shift to state 218
-- On ty shift to state 221
## Reductions:
-- On RPAR
--   reduce production ty_args ->

State 179:
## Known stack suffix:
## VAR
## LR(1) items:
ty -> VAR . [ RPAR COMMA ]
ty_arg -> VAR . GETS ty [ RPAR COMMA ]
## Transitions:
-- On GETS shift to state 180
## Reductions:
-- On RPAR COMMA
--   reduce production ty -> VAR

State 180:
## Known stack suffix:
## VAR GETS
## LR(1) items:
ty_arg -> VAR GETS . ty [ RPAR COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 215
## Reductions:

State 181:
## Known stack suffix:
## VAR
## LR(1) items:
ty -> VAR . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> VAR

State 182:
## Known stack suffix:
## TIMES
## LR(1) items:
ty -> TIMES . [ TIMES RPAR RBRA COMMA ]
ty -> TIMES . BIN2 INT [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On BIN2 shift to state 183
## Reductions:
-- On TIMES RPAR RBRA COMMA
--   reduce production ty -> TIMES

State 183:
## Known stack suffix:
## TIMES BIN2
## LR(1) items:
ty -> TIMES BIN2 . INT [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On INT shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## TIMES BIN2 INT
## LR(1) items:
ty -> TIMES BIN2 INT . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> TIMES BIN2 INT

State 185:
## Known stack suffix:
## REF
## LR(1) items:
ty -> REF . LPAR ty RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On LPAR shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## REF LPAR
## LR(1) items:
ty -> REF LPAR . ty RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 213
## Reductions:

State 187:
## Known stack suffix:
## LPAR
## LR(1) items:
ty -> LPAR . ty TIMES ty RPAR [ TIMES RPAR RBRA COMMA ]
ty -> LPAR . argsty RPAR YIELDS ty [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 188
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On QUESTION shift to state 197
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 201
-- On argty shift to state 205
-- On argsty shift to state 209
## Reductions:
-- On RPAR
--   reduce production argsty ->

State 188:
## Known stack suffix:
## VAR
## LR(1) items:
argty -> VAR . COLON ty [ RPAR COMMA ]
ty -> VAR . [ TIMES RPAR COMMA ]
## Transitions:
-- On COLON shift to state 189
## Reductions:
-- On TIMES RPAR COMMA
--   reduce production ty -> VAR

State 189:
## Known stack suffix:
## VAR COLON
## LR(1) items:
argty -> VAR COLON . ty [ RPAR COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 196
## Reductions:

State 190:
## Known stack suffix:
## LBRA
## LR(1) items:
ty -> LBRA . ty RBRA [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 194
## Reductions:

State 191:
## Known stack suffix:
## INT
## LR(1) items:
ty -> INT . [ TIMES RPAR RBRA COMMA ]
ty -> INT . BIN2 TIMES [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On BIN2 shift to state 192
## Reductions:
-- On TIMES RPAR RBRA COMMA
--   reduce production ty -> INT

State 192:
## Known stack suffix:
## INT BIN2
## LR(1) items:
ty -> INT BIN2 . TIMES [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On TIMES shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## INT BIN2 TIMES
## LR(1) items:
ty -> INT BIN2 TIMES . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> INT BIN2 TIMES

State 194:
## Known stack suffix:
## LBRA ty
## LR(1) items:
ty -> LBRA ty . RBRA [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On RBRA shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## LBRA ty RBRA
## LR(1) items:
ty -> LBRA ty RBRA . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> LBRA ty RBRA

State 196:
## Known stack suffix:
## VAR COLON ty
## LR(1) items:
argty -> VAR COLON ty . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argty -> VAR COLON ty

State 197:
## Known stack suffix:
## QUESTION
## LR(1) items:
argty -> QUESTION . VAR COLON ty [ RPAR COMMA ]
## Transitions:
-- On VAR shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## QUESTION VAR
## LR(1) items:
argty -> QUESTION VAR . COLON ty [ RPAR COMMA ]
## Transitions:
-- On COLON shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## QUESTION VAR COLON
## LR(1) items:
argty -> QUESTION VAR COLON . ty [ RPAR COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## QUESTION VAR COLON ty
## LR(1) items:
argty -> QUESTION VAR COLON ty . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argty -> QUESTION VAR COLON ty

State 201:
## Known stack suffix:
## LPAR ty
## LR(1) items:
argty -> ty . [ RPAR COMMA ]
ty -> LPAR ty . TIMES ty RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On TIMES shift to state 202
## Reductions:
-- On RPAR COMMA
--   reduce production argty -> ty

State 202:
## Known stack suffix:
## LPAR ty TIMES
## LR(1) items:
ty -> LPAR ty TIMES . ty RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## LPAR ty TIMES ty
## LR(1) items:
ty -> LPAR ty TIMES ty . RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On RPAR shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LPAR ty TIMES ty RPAR
## LR(1) items:
ty -> LPAR ty TIMES ty RPAR . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> LPAR ty TIMES ty RPAR

State 205:
## Known stack suffix:
## argty
## LR(1) items:
argsty -> argty . [ RPAR ]
argsty -> argty . COMMA argsty [ RPAR ]
## Transitions:
-- On COMMA shift to state 206
## Reductions:
-- On RPAR
--   reduce production argsty -> argty

State 206:
## Known stack suffix:
## argty COMMA
## LR(1) items:
argsty -> argty COMMA . argsty [ RPAR ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 188
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On QUESTION shift to state 197
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 207
-- On argty shift to state 205
-- On argsty shift to state 208
## Reductions:
-- On RPAR
--   reduce production argsty ->

State 207:
## Known stack suffix:
## ty
## LR(1) items:
argty -> ty . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argty -> ty

State 208:
## Known stack suffix:
## argty COMMA argsty
## LR(1) items:
argsty -> argty COMMA argsty . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argsty -> argty COMMA argsty

State 209:
## Known stack suffix:
## LPAR argsty
## LR(1) items:
ty -> LPAR argsty . RPAR YIELDS ty [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On RPAR shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## LPAR argsty RPAR
## LR(1) items:
ty -> LPAR argsty RPAR . YIELDS ty [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On YIELDS shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## LPAR argsty RPAR YIELDS
## LR(1) items:
ty -> LPAR argsty RPAR YIELDS . ty [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## LPAR argsty RPAR YIELDS ty
## LR(1) items:
ty -> LPAR argsty RPAR YIELDS ty . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> LPAR argsty RPAR YIELDS ty

State 213:
## Known stack suffix:
## REF LPAR ty
## LR(1) items:
ty -> REF LPAR ty . RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On RPAR shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## REF LPAR ty RPAR
## LR(1) items:
ty -> REF LPAR ty RPAR . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> REF LPAR ty RPAR

State 215:
## Known stack suffix:
## VAR GETS ty
## LR(1) items:
ty_arg -> VAR GETS ty . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty_arg -> VAR GETS ty

State 216:
## Known stack suffix:
## VARLPAR ty_args
## LR(1) items:
ty -> VARLPAR ty_args . RPAR [ TIMES RPAR RBRA COMMA ]
## Transitions:
-- On RPAR shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## VARLPAR ty_args RPAR
## LR(1) items:
ty -> VARLPAR ty_args RPAR . [ TIMES RPAR RBRA COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty -> VARLPAR ty_args RPAR

State 218:
## Known stack suffix:
## ty_arg
## LR(1) items:
ty_args -> ty_arg . [ RPAR ]
ty_args -> ty_arg . COMMA ty_args [ RPAR ]
## Transitions:
-- On COMMA shift to state 219
## Reductions:
-- On RPAR
--   reduce production ty_args -> ty_arg

State 219:
## Known stack suffix:
## ty_arg COMMA
## LR(1) items:
ty_args -> ty_arg COMMA . ty_args [ RPAR ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 179
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty_args shift to state 220
-- On ty_arg shift to state 218
-- On ty shift to state 221
## Reductions:
-- On RPAR
--   reduce production ty_args ->

State 220:
## Known stack suffix:
## ty_arg COMMA ty_args
## LR(1) items:
ty_args -> ty_arg COMMA ty_args . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty_args -> ty_arg COMMA ty_args

State 221:
## Known stack suffix:
## ty
## LR(1) items:
ty_arg -> ty . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty_arg -> ty

State 222:
## Known stack suffix:
## LPAR expr COLON ty
## LR(1) items:
cexpr -> LPAR expr COLON ty . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## LPAR expr COLON ty RPAR
## LR(1) items:
cexpr -> LPAR expr COLON ty RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> LPAR expr COLON ty RPAR

State 224:
## Known stack suffix:
## LCUR
## LR(1) items:
cexpr -> LCUR . exprs RCUR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 225
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 225:
## Known stack suffix:
## LCUR exprs
## LR(1) items:
cexpr -> LCUR exprs . RCUR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RCUR shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LCUR exprs RCUR
## LR(1) items:
cexpr -> LCUR exprs RCUR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> LCUR exprs RCUR

State 227:
## Known stack suffix:
## INTERVAL
## LR(1) items:
cexpr -> INTERVAL . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> INTERVAL

State 228:
## Known stack suffix:
## INT
## LR(1) items:
cexpr -> INT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> INT

State 229:
## Known stack suffix:
## IF
## LR(1) items:
cexpr -> IF . exprs THEN exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 230
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 230:
## Known stack suffix:
## IF exprs
## LR(1) items:
cexpr -> IF exprs . THEN exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## IF exprs THEN
## LR(1) items:
cexpr -> IF exprs THEN . exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 232
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 232:
## Known stack suffix:
## IF exprs THEN exprs
## LR(1) items:
cexpr -> IF exprs THEN exprs . if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On ELSIF shift to state 233
-- On ELSE shift to state 237
-- On if_elsif shift to state 240
## Reductions:
-- On END
--   reduce production if_elsif ->

State 233:
## Known stack suffix:
## ELSIF
## LR(1) items:
if_elsif -> ELSIF . exprs THEN exprs if_elsif [ END ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 234
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 234:
## Known stack suffix:
## ELSIF exprs
## LR(1) items:
if_elsif -> ELSIF exprs . THEN exprs if_elsif [ END ]
## Transitions:
-- On THEN shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## ELSIF exprs THEN
## LR(1) items:
if_elsif -> ELSIF exprs THEN . exprs if_elsif [ END ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 236
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 236:
## Known stack suffix:
## ELSIF exprs THEN exprs
## LR(1) items:
if_elsif -> ELSIF exprs THEN exprs . if_elsif [ END ]
## Transitions:
-- On ELSIF shift to state 233
-- On ELSE shift to state 237
-- On if_elsif shift to state 239
## Reductions:
-- On END
--   reduce production if_elsif ->

State 237:
## Known stack suffix:
## ELSE
## LR(1) items:
if_elsif -> ELSE . exprs [ END ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 238
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 238:
## Known stack suffix:
## ELSE exprs
## LR(1) items:
if_elsif -> ELSE exprs . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_elsif -> ELSE exprs

State 239:
## Known stack suffix:
## ELSIF exprs THEN exprs if_elsif
## LR(1) items:
if_elsif -> ELSIF exprs THEN exprs if_elsif . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_elsif -> ELSIF exprs THEN exprs if_elsif

State 240:
## Known stack suffix:
## IF exprs THEN exprs if_elsif
## LR(1) items:
cexpr -> IF exprs THEN exprs if_elsif . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## IF exprs THEN exprs if_elsif END
## LR(1) items:
cexpr -> IF exprs THEN exprs if_elsif END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> IF exprs THEN exprs if_elsif END

State 242:
## Known stack suffix:
## GET
## LR(1) items:
cexpr -> GET . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## GET expr
## LR(1) items:
cexpr -> GET expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> GET expr

State 244:
## Known stack suffix:
## FUN
## LR(1) items:
cexpr -> FUN . LPAR arglist RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## FUN LPAR
## LR(1) items:
cexpr -> FUN LPAR . arglist RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 63
-- On TILD shift to state 76
-- On arglist shift to state 246
-- On arg shift to state 250
## Reductions:
-- On RPAR
--   reduce production arglist ->

State 246:
## Known stack suffix:
## FUN LPAR arglist
## LR(1) items:
cexpr -> FUN LPAR arglist . RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## FUN LPAR arglist RPAR
## LR(1) items:
cexpr -> FUN LPAR arglist RPAR . YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On YIELDS shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## FUN LPAR arglist RPAR YIELDS
## LR(1) items:
cexpr -> FUN LPAR arglist RPAR YIELDS . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## FUN LPAR arglist RPAR YIELDS expr
## LR(1) items:
cexpr -> FUN LPAR arglist RPAR YIELDS expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI
--   reduce production cexpr -> FUN LPAR arglist RPAR YIELDS expr

State 250:
## Known stack suffix:
## arg
## LR(1) items:
arglist -> arg . [ RPAR ]
arglist -> arg . COMMA arglist [ RPAR ]
## Transitions:
-- On COMMA shift to state 251
## Reductions:
-- On RPAR
--   reduce production arglist -> arg

State 251:
## Known stack suffix:
## arg COMMA
## LR(1) items:
arglist -> arg COMMA . arglist [ RPAR ]
## Transitions:
-- On VAR shift to state 63
-- On TILD shift to state 76
-- On arglist shift to state 252
-- On arg shift to state 250
## Reductions:
-- On RPAR
--   reduce production arglist ->

State 252:
## Known stack suffix:
## arg COMMA arglist
## LR(1) items:
arglist -> arg COMMA arglist . [ RPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arglist -> arg COMMA arglist

State 253:
## Known stack suffix:
## FLOAT
## LR(1) items:
cexpr -> FLOAT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> FLOAT

State 254:
## Known stack suffix:
## FLAC
## LR(1) items:
cexpr -> FLAC . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 255
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 255:
## Known stack suffix:
## FLAC app_opt
## LR(1) items:
cexpr -> FLAC app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> FLAC app_opt

State 256:
## Known stack suffix:
## FDKAAC
## LR(1) items:
cexpr -> FDKAAC . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 257
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 257:
## Known stack suffix:
## FDKAAC app_opt
## LR(1) items:
cexpr -> FDKAAC app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> FDKAAC app_opt

State 258:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
cexpr -> EXTERNAL . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 259
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 259:
## Known stack suffix:
## EXTERNAL app_opt
## LR(1) items:
cexpr -> EXTERNAL app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> EXTERNAL app_opt

State 260:
## Known stack suffix:
## BOOL
## LR(1) items:
cexpr -> BOOL . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> BOOL

State 261:
## Known stack suffix:
## BEGIN
## LR(1) items:
cexpr -> BEGIN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 262
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 262:
## Known stack suffix:
## BEGIN exprs
## LR(1) items:
cexpr -> BEGIN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## BEGIN exprs END
## LR(1) items:
cexpr -> BEGIN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> BEGIN exprs END

State 264:
## Known stack suffix:
## AVI
## LR(1) items:
cexpr -> AVI . app_opt [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On LPAR shift to state 2
-- On app_opt shift to state 265
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production app_opt ->

State 265:
## Known stack suffix:
## AVI app_opt
## LR(1) items:
cexpr -> AVI app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> AVI app_opt

State 266:
## Known stack suffix:
## top_level_ogg_item
## LR(1) items:
cexpr -> top_level_ogg_item . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> top_level_ogg_item

State 267:
## Known stack suffix:
## binding s
## LR(1) items:
exprs -> binding s . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> binding s

State 268:
## Known stack suffix:
## liquidsoap_1_3_4_lang_parser_list
## LR(1) items:
cexpr -> liquidsoap_1_3_4_lang_parser_list . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> liquidsoap_1_3_4_lang_parser_list

State 269:
## Known stack suffix:
## binding cexprs
## LR(1) items:
exprs -> binding cexprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> binding cexprs

State 270:
## Known stack suffix:
## cexpr
## LR(1) items:
cexpr -> cexpr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexpr -> cexpr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
cexprs -> cexpr . s [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
cexprs -> cexpr . cexprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
cexprs -> cexpr . SEQ exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 90
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 92
-- On VARLBRA shift to state 116
-- On VAR shift to state 119
-- On TIMES shift to state 271
-- On TIME shift to state 120
-- On THEORA shift to state 13
-- On STRING shift to state 121
-- On SPEEX shift to state 16
-- On SHINE shift to state 122
-- On SET shift to state 273
-- On SERVER_WRITE shift to state 124
-- On SERVER_WAIT shift to state 130
-- On SERVER_READLINE shift to state 135
-- On SERVER_READCHARS shift to state 140
-- On SERVER_READ shift to state 147
-- On SEQ shift to state 275
-- On REF shift to state 156
-- On OPUS shift to state 30
-- On OGG shift to state 158
-- On NOT shift to state 162
-- On MP3_VBR shift to state 164
-- On MP3_ABR shift to state 166
-- On MP3 shift to state 168
-- On MINUS shift to state 277
-- On LPAR shift to state 170
-- On LCUR shift to state 224
-- On LBRA shift to state 54
-- On INTERVAL shift to state 227
-- On INT shift to state 228
-- On IF shift to state 229
-- On GET shift to state 242
-- On FUN shift to state 244
-- On FLOAT shift to state 253
-- On FLAC shift to state 254
-- On FDKAAC shift to state 256
-- On EXTERNAL shift to state 258
-- On DEF shift to state 74
-- On BOOL shift to state 260
-- On BIN3 shift to state 279
-- On BIN2 shift to state 281
-- On BIN1 shift to state 283
-- On BIN0 shift to state 285
-- On BEGIN shift to state 261
-- On AVI shift to state 264
-- On top_level_ogg_item shift to state 266
-- On s shift to state 287
-- On liquidsoap_1_3_4_lang_parser_list shift to state 268
-- On cexprs shift to state 288
-- On cexpr shift to state 270
-- On binding shift to state 289
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s ->

State 271:
## Known stack suffix:
## cexpr TIMES
## LR(1) items:
cexpr -> cexpr TIMES . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## cexpr TIMES expr
## LR(1) items:
cexpr -> cexpr TIMES expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> cexpr TIMES expr

State 273:
## Known stack suffix:
## cexpr SET
## LR(1) items:
cexpr -> cexpr SET . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## cexpr SET expr
## LR(1) items:
cexpr -> cexpr SET expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI
--   reduce production cexpr -> cexpr SET expr

State 275:
## Known stack suffix:
## cexpr SEQ
## LR(1) items:
cexprs -> cexpr SEQ . exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
s -> SEQ . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 276
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s -> SEQ

State 276:
## Known stack suffix:
## cexpr SEQ exprs
## LR(1) items:
cexprs -> cexpr SEQ exprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> cexpr SEQ exprs

State 277:
## Known stack suffix:
## cexpr MINUS
## LR(1) items:
cexpr -> cexpr MINUS . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## cexpr MINUS expr
## LR(1) items:
cexpr -> cexpr MINUS expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On BIN3 shift to state 102
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production cexpr -> cexpr MINUS expr

State 279:
## Known stack suffix:
## cexpr BIN3
## LR(1) items:
cexpr -> cexpr BIN3 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## cexpr BIN3 expr
## LR(1) items:
cexpr -> cexpr BIN3 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexpr -> cexpr BIN3 expr

State 281:
## Known stack suffix:
## cexpr BIN2
## LR(1) items:
cexpr -> cexpr BIN2 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## cexpr BIN2 expr
## LR(1) items:
cexpr -> cexpr BIN2 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On BIN3 shift to state 102
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN2 BIN1 BIN0 BEGIN AVI
--   reduce production cexpr -> cexpr BIN2 expr

State 283:
## Known stack suffix:
## cexpr BIN1
## LR(1) items:
cexpr -> cexpr BIN1 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## cexpr BIN1 expr
## LR(1) items:
cexpr -> cexpr BIN1 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN1 BIN0 BEGIN AVI
--   reduce production cexpr -> cexpr BIN1 expr

State 285:
## Known stack suffix:
## cexpr BIN0
## LR(1) items:
cexpr -> cexpr BIN0 . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## cexpr BIN0 expr
## LR(1) items:
cexpr -> cexpr BIN0 expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN0 BEGIN AVI
--   reduce production cexpr -> cexpr BIN0 expr

State 287:
## Known stack suffix:
## cexpr s
## LR(1) items:
cexprs -> cexpr s . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> cexpr s

State 288:
## Known stack suffix:
## cexpr cexprs
## LR(1) items:
cexprs -> cexpr cexprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> cexpr cexprs

State 289:
## Known stack suffix:
## binding
## LR(1) items:
cexprs -> binding . s [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
cexprs -> binding . cexprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
cexprs -> binding . SEQ exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 90
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 92
-- On VARLBRA shift to state 116
-- On VAR shift to state 119
-- On TIME shift to state 120
-- On THEORA shift to state 13
-- On STRING shift to state 121
-- On SPEEX shift to state 16
-- On SHINE shift to state 122
-- On SERVER_WRITE shift to state 124
-- On SERVER_WAIT shift to state 130
-- On SERVER_READLINE shift to state 135
-- On SERVER_READCHARS shift to state 140
-- On SERVER_READ shift to state 147
-- On SEQ shift to state 290
-- On REF shift to state 156
-- On OPUS shift to state 30
-- On OGG shift to state 158
-- On NOT shift to state 162
-- On MP3_VBR shift to state 164
-- On MP3_ABR shift to state 166
-- On MP3 shift to state 168
-- On LPAR shift to state 170
-- On LCUR shift to state 224
-- On LBRA shift to state 54
-- On INTERVAL shift to state 227
-- On INT shift to state 228
-- On IF shift to state 229
-- On GET shift to state 242
-- On FUN shift to state 244
-- On FLOAT shift to state 253
-- On FLAC shift to state 254
-- On FDKAAC shift to state 256
-- On EXTERNAL shift to state 258
-- On DEF shift to state 74
-- On BOOL shift to state 260
-- On BEGIN shift to state 261
-- On AVI shift to state 264
-- On top_level_ogg_item shift to state 266
-- On s shift to state 292
-- On liquidsoap_1_3_4_lang_parser_list shift to state 268
-- On cexprs shift to state 293
-- On cexpr shift to state 270
-- On binding shift to state 289
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s ->

State 290:
## Known stack suffix:
## binding SEQ
## LR(1) items:
cexprs -> binding SEQ . exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
s -> SEQ . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 291
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s -> SEQ

State 291:
## Known stack suffix:
## binding SEQ exprs
## LR(1) items:
cexprs -> binding SEQ exprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> binding SEQ exprs

State 292:
## Known stack suffix:
## binding s
## LR(1) items:
cexprs -> binding s . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> binding s

State 293:
## Known stack suffix:
## binding cexprs
## LR(1) items:
cexprs -> binding cexprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cexprs -> binding cexprs

State 294:
## Known stack suffix:
## expr SEQ
## LR(1) items:
exprs -> expr SEQ . exprs [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
s -> SEQ . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 295
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:
-- On THEN SEQSEQ RCUR EOF END ELSIF ELSE
--   reduce production s -> SEQ

State 295:
## Known stack suffix:
## expr SEQ exprs
## LR(1) items:
exprs -> expr SEQ exprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> expr SEQ exprs

State 296:
## Known stack suffix:
## expr s
## LR(1) items:
exprs -> expr s . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> expr s

State 297:
## Known stack suffix:
## expr cexprs
## LR(1) items:
exprs -> expr cexprs . [ THEN SEQSEQ RCUR EOF END ELSIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exprs -> expr cexprs

State 298:
## Known stack suffix:
## DEF VAR
## LR(1) items:
binding -> DEF VAR . g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On GETS shift to state 81
-- On g shift to state 299
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ REF OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GSTREAMER GET FUN FLOAT FLAC FDKAAC EXTERNAL DEF BOOL BEGIN AVI
--   reduce production g ->

State 299:
## Known stack suffix:
## DEF VAR g
## LR(1) items:
binding -> DEF VAR g . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 300
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 300:
## Known stack suffix:
## DEF VAR g exprs
## LR(1) items:
binding -> DEF VAR g exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On END shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## DEF VAR g exprs END
## LR(1) items:
binding -> DEF VAR g exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> DEF VAR g exprs END

State 302:
## Known stack suffix:
## DEF REC
## LR(1) items:
binding -> DEF REC . VARLPAR arglist RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On VARLPAR shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## DEF REC VARLPAR
## LR(1) items:
binding -> DEF REC VARLPAR . arglist RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On VAR shift to state 63
-- On TILD shift to state 76
-- On arglist shift to state 304
-- On arg shift to state 250
## Reductions:
-- On RPAR
--   reduce production arglist ->

State 304:
## Known stack suffix:
## DEF REC VARLPAR arglist
## LR(1) items:
binding -> DEF REC VARLPAR arglist . RPAR g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## DEF REC VARLPAR arglist RPAR
## LR(1) items:
binding -> DEF REC VARLPAR arglist RPAR . g exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On GETS shift to state 81
-- On g shift to state 306
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ REF OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GSTREAMER GET FUN FLOAT FLAC FDKAAC EXTERNAL DEF BOOL BEGIN AVI
--   reduce production g ->

State 306:
## Known stack suffix:
## DEF REC VARLPAR arglist RPAR g
## LR(1) items:
binding -> DEF REC VARLPAR arglist RPAR g . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 307
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 307:
## Known stack suffix:
## DEF REC VARLPAR arglist RPAR g exprs
## LR(1) items:
binding -> DEF REC VARLPAR arglist RPAR g exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
-- On END shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## DEF REC VARLPAR arglist RPAR g exprs END
## LR(1) items:
binding -> DEF REC VARLPAR arglist RPAR g exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> DEF REC VARLPAR arglist RPAR g exprs END

State 309:
## Known stack suffix:
## BEGIN exprs
## LR(1) items:
expr -> BEGIN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## BEGIN exprs END
## LR(1) items:
expr -> BEGIN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> BEGIN exprs END

State 311:
## Known stack suffix:
## GETS expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
opt -> GETS expr . [ RPAR COMMA ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On RPAR COMMA
--   reduce production opt -> GETS expr

State 312:
## Known stack suffix:
## VAR opt
## LR(1) items:
arg -> VAR opt . [ RPAR COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg -> VAR opt

State 313:
## Known stack suffix:
## FUN LPAR arglist
## LR(1) items:
expr -> FUN LPAR arglist . RPAR YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## FUN LPAR arglist RPAR
## LR(1) items:
expr -> FUN LPAR arglist RPAR . YIELDS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On YIELDS shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## FUN LPAR arglist RPAR YIELDS
## LR(1) items:
expr -> FUN LPAR arglist RPAR YIELDS . expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## FUN LPAR arglist RPAR YIELDS expr
## LR(1) items:
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> FUN LPAR arglist RPAR YIELDS expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BEGIN AVI
--   reduce production expr -> FUN LPAR arglist RPAR YIELDS expr

State 317:
## Known stack suffix:
## GET expr
## LR(1) items:
expr -> GET expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> GET expr

State 318:
## Known stack suffix:
## IF exprs
## LR(1) items:
expr -> IF exprs . THEN exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## IF exprs THEN
## LR(1) items:
expr -> IF exprs THEN . exprs if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 320
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 320:
## Known stack suffix:
## IF exprs THEN exprs
## LR(1) items:
expr -> IF exprs THEN exprs . if_elsif END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On ELSIF shift to state 233
-- On ELSE shift to state 237
-- On if_elsif shift to state 321
## Reductions:
-- On END
--   reduce production if_elsif ->

State 321:
## Known stack suffix:
## IF exprs THEN exprs if_elsif
## LR(1) items:
expr -> IF exprs THEN exprs if_elsif . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## IF exprs THEN exprs if_elsif END
## LR(1) items:
expr -> IF exprs THEN exprs if_elsif END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> IF exprs THEN exprs if_elsif END

State 323:
## Known stack suffix:
## LBRA inner_list
## LR(1) items:
liquidsoap_1_3_4_lang_parser_list -> LBRA inner_list . RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RBRA shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## LBRA inner_list RBRA
## LR(1) items:
liquidsoap_1_3_4_lang_parser_list -> LBRA inner_list RBRA . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production liquidsoap_1_3_4_lang_parser_list -> LBRA inner_list RBRA

State 325:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RBRA MINUS COMMA BIN3 BIN2 BIN1 BIN0 ]
inner_list -> expr . COMMA inner_list [ RBRA ]
inner_list -> expr . [ RBRA ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On COMMA shift to state 326
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On RBRA
--   reduce production inner_list -> expr

State 326:
## Known stack suffix:
## expr COMMA
## LR(1) items:
inner_list -> expr COMMA . inner_list [ RBRA ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On inner_list shift to state 327
-- On expr shift to state 325
## Reductions:
-- On RBRA
--   reduce production inner_list ->

State 327:
## Known stack suffix:
## expr COMMA inner_list
## LR(1) items:
inner_list -> expr COMMA inner_list . [ RBRA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production inner_list -> expr COMMA inner_list

State 328:
## Known stack suffix:
## LCUR exprs
## LR(1) items:
expr -> LCUR exprs . RCUR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RCUR shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## LCUR exprs RCUR
## LR(1) items:
expr -> LCUR exprs RCUR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LCUR exprs RCUR

State 330:
## Known stack suffix:
## LPAR expr
## LR(1) items:
expr -> LPAR expr . COLON ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> LPAR expr . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> LPAR expr . COMMA expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS COMMA COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RPAR shift to state 331
-- On MINUS shift to state 100
-- On COMMA shift to state 332
-- On COLON shift to state 335
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 331:
## Known stack suffix:
## LPAR expr RPAR
## LR(1) items:
expr -> LPAR expr RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAR expr RPAR

State 332:
## Known stack suffix:
## LPAR expr COMMA
## LR(1) items:
expr -> LPAR expr COMMA . expr RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 11
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On expr shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## LPAR expr COMMA expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> LPAR expr COMMA expr . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RPAR shift to state 334
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 334:
## Known stack suffix:
## LPAR expr COMMA expr RPAR
## LR(1) items:
expr -> LPAR expr COMMA expr RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAR expr COMMA expr RPAR

State 335:
## Known stack suffix:
## LPAR expr COLON
## LR(1) items:
expr -> LPAR expr COLON . ty RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VARLPAR shift to state 178
-- On VAR shift to state 181
-- On TIMES shift to state 182
-- On REF shift to state 185
-- On LPAR shift to state 187
-- On LBRA shift to state 190
-- On INT shift to state 191
-- On ty shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## LPAR expr COLON ty
## LR(1) items:
expr -> LPAR expr COLON ty . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## LPAR expr COLON ty RPAR
## LR(1) items:
expr -> LPAR expr COLON ty RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAR expr COLON ty RPAR

State 338:
## Known stack suffix:
## MINUS LPAR expr
## LR(1) items:
expr -> MINUS LPAR expr . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN0 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RPAR MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RPAR shift to state 339
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 339:
## Known stack suffix:
## MINUS LPAR expr RPAR
## LR(1) items:
expr -> MINUS LPAR expr RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MINUS LPAR expr RPAR

State 340:
## Known stack suffix:
## MINUS INT
## LR(1) items:
expr -> MINUS INT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MINUS INT

State 341:
## Known stack suffix:
## MINUS FLOAT
## LR(1) items:
expr -> MINUS FLOAT . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> MINUS FLOAT

State 342:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> NOT expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN1 BIN0 BEGIN AVI
--   reduce production expr -> NOT expr

State 343:
## Known stack suffix:
## REF expr
## LR(1) items:
expr -> REF expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BEGIN AVI
--   reduce production expr -> REF expr

State 344:
## Known stack suffix:
## SERVER_READ expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> SERVER_READ expr . COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On COLON shift to state 345
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 345:
## Known stack suffix:
## SERVER_READ expr COLON
## LR(1) items:
expr -> SERVER_READ expr COLON . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## SERVER_READ expr COLON VAR
## LR(1) items:
expr -> SERVER_READ expr COLON VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN
## LR(1) items:
expr -> SERVER_READ expr COLON VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 348
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 348:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN exprs
## LR(1) items:
expr -> SERVER_READ expr COLON VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## SERVER_READ expr COLON VAR THEN exprs END
## LR(1) items:
expr -> SERVER_READ expr COLON VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SERVER_READ expr COLON VAR THEN exprs END

State 350:
## Known stack suffix:
## SERVER_READCHARS expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> SERVER_READCHARS expr . COLON VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET MINUS COLON BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On COLON shift to state 351
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 351:
## Known stack suffix:
## SERVER_READCHARS expr COLON
## LR(1) items:
expr -> SERVER_READCHARS expr COLON . VAR THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On VAR shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR
## LR(1) items:
expr -> SERVER_READCHARS expr COLON VAR . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN
## LR(1) items:
expr -> SERVER_READCHARS expr COLON VAR THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 354
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 354:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN exprs
## LR(1) items:
expr -> SERVER_READCHARS expr COLON VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## SERVER_READCHARS expr COLON VAR THEN exprs END
## LR(1) items:
expr -> SERVER_READCHARS expr COLON VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SERVER_READCHARS expr COLON VAR THEN exprs END

State 356:
## Known stack suffix:
## SERVER_READLINE VAR THEN exprs
## LR(1) items:
expr -> SERVER_READLINE VAR THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## SERVER_READLINE VAR THEN exprs END
## LR(1) items:
expr -> SERVER_READLINE VAR THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SERVER_READLINE VAR THEN exprs END

State 358:
## Known stack suffix:
## VAR GETS expr
## LR(1) items:
binding -> VAR GETS expr . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI ]
expr -> expr . SET expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN1 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN2 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN3 expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . TIMES expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . MINUS expr [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:
-- On WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIME THEORA THEN STRING SPEEX SHINE SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ REF RCUR OPUS OGG NOT MP3_VBR MP3_ABR MP3 LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF BOOL BEGIN AVI
--   reduce production binding -> VAR GETS expr

State 359:
## Known stack suffix:
## SERVER_WAIT exprs
## LR(1) items:
expr -> SERVER_WAIT exprs . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On THEN shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## SERVER_WAIT exprs THEN
## LR(1) items:
expr -> SERVER_WAIT exprs THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 361
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 361:
## Known stack suffix:
## SERVER_WAIT exprs THEN exprs
## LR(1) items:
expr -> SERVER_WAIT exprs THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## SERVER_WAIT exprs THEN exprs END
## LR(1) items:
expr -> SERVER_WAIT exprs THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SERVER_WAIT exprs THEN exprs END

State 363:
## Known stack suffix:
## SERVER_WRITE expr
## LR(1) items:
expr -> expr . SET expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> SERVER_WRITE expr . THEN exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES THEN SET MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On THEN shift to state 364
-- On SET shift to state 98
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 364:
## Known stack suffix:
## SERVER_WRITE expr THEN
## LR(1) items:
expr -> SERVER_WRITE expr THEN . exprs END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 365
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 365:
## Known stack suffix:
## SERVER_WRITE expr THEN exprs
## LR(1) items:
expr -> SERVER_WRITE expr THEN exprs . END [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On END shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## SERVER_WRITE expr THEN exprs END
## LR(1) items:
expr -> SERVER_WRITE expr THEN exprs END . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SERVER_WRITE expr THEN exprs END

State 367:
## Known stack suffix:
## VARLBRA expr
## LR(1) items:
expr -> expr . SET expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> VARLBRA expr . RBRA [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
expr -> expr . BIN0 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN1 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN2 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . BIN3 expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . TIMES expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
expr -> expr . MINUS expr [ TIMES SET RBRA MINUS BIN3 BIN2 BIN1 BIN0 ]
## Transitions:
-- On TIMES shift to state 96
-- On SET shift to state 98
-- On RBRA shift to state 368
-- On MINUS shift to state 100
-- On BIN3 shift to state 102
-- On BIN2 shift to state 104
-- On BIN1 shift to state 106
-- On BIN0 shift to state 108
## Reductions:

State 368:
## Known stack suffix:
## VARLBRA expr RBRA
## LR(1) items:
expr -> VARLBRA expr RBRA . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> VARLBRA expr RBRA

State 369:
## Known stack suffix:
## VARLPAR app_list
## LR(1) items:
expr -> VARLPAR app_list . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## VARLPAR app_list RPAR
## LR(1) items:
expr -> VARLPAR app_list RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> VARLPAR app_list RPAR

State 371:
## Known stack suffix:
## LPAR app_list
## LR(1) items:
app_opt -> LPAR app_list . RPAR [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
-- On RPAR shift to state 372
## Reductions:

State 372:
## Known stack suffix:
## LPAR app_list RPAR
## LR(1) items:
app_opt -> LPAR app_list RPAR . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app_opt -> LPAR app_list RPAR

State 373:
## Known stack suffix:
## WAV app_opt
## LR(1) items:
expr -> WAV app_opt . [ WAV VORBIS_CBR VORBIS_ABR VORBIS VARLPAR VARLBRA VAR TIMES TIME THEORA THEN STRING SPEEX SHINE SET SERVER_WRITE SERVER_WAIT SERVER_READLINE SERVER_READCHARS SERVER_READ SEQSEQ SEQ RPAR REF RCUR RBRA OPUS OGG NOT MP3_VBR MP3_ABR MP3 MINUS LPAR LCUR LBRA INTERVAL INT IF GET FUN FLOAT FLAC FDKAAC EXTERNAL EOF END ELSIF ELSE DEF COMMA COLON BOOL BIN3 BIN2 BIN1 BIN0 BEGIN AVI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WAV app_opt

State 374:
## Known stack suffix:
## EOF
## LR(1) items:
interactive -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> EOF

State 375:
## Known stack suffix:
## interactive
## LR(1) items:
interactive' -> interactive . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interactive

State 376:
## Known stack suffix:
## exprs
## LR(1) items:
interactive -> exprs . SEQSEQ [ # ]
## Transitions:
-- On SEQSEQ shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## exprs SEQSEQ
## LR(1) items:
interactive -> exprs SEQSEQ . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interactive -> exprs SEQSEQ

State 378:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On WAV shift to state 1
-- On VORBIS_CBR shift to state 3
-- On VORBIS_ABR shift to state 5
-- On VORBIS shift to state 7
-- On VARLPAR shift to state 9
-- On VARLBRA shift to state 10
-- On VAR shift to state 22
-- On TIME shift to state 12
-- On THEORA shift to state 13
-- On STRING shift to state 15
-- On SPEEX shift to state 16
-- On SHINE shift to state 18
-- On SERVER_WRITE shift to state 20
-- On SERVER_WAIT shift to state 21
-- On SERVER_READLINE shift to state 24
-- On SERVER_READCHARS shift to state 27
-- On SERVER_READ shift to state 28
-- On REF shift to state 29
-- On OPUS shift to state 30
-- On OGG shift to state 32
-- On NOT shift to state 42
-- On MP3_VBR shift to state 43
-- On MP3_ABR shift to state 45
-- On MP3 shift to state 47
-- On MINUS shift to state 49
-- On LPAR shift to state 51
-- On LCUR shift to state 53
-- On LBRA shift to state 54
-- On INTERVAL shift to state 55
-- On INT shift to state 56
-- On IF shift to state 57
-- On GSTREAMER shift to state 58
-- On GET shift to state 60
-- On FUN shift to state 61
-- On FLOAT shift to state 65
-- On FLAC shift to state 66
-- On FDKAAC shift to state 68
-- On EXTERNAL shift to state 70
-- On EOF shift to state 379
-- On DEF shift to state 74
-- On BOOL shift to state 72
-- On BEGIN shift to state 73
-- On AVI shift to state 83
-- On top_level_ogg_item shift to state 85
-- On program shift to state 380
-- On liquidsoap_1_3_4_lang_parser_list shift to state 86
-- On exprs shift to state 381
-- On expr shift to state 89
-- On binding shift to state 129
## Reductions:

State 379:
## Known stack suffix:
## EOF
## LR(1) items:
program -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> EOF

State 380:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

State 381:
## Known stack suffix:
## exprs
## LR(1) items:
program -> exprs . EOF [ # ]
## Transitions:
-- On EOF shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## exprs EOF
## LR(1) items:
program -> exprs EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> exprs EOF

