Note: the nonterminal symbol list (from liquidsoap.1.3.4-lang_parser.mly) is renamed liquidsoap_1_3_4_lang_parser_list.
File "liquidsoap.1.3.4-lang_parser.mly", line 205, characters 21-31:
Warning: the token PP_COMMENT is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 203, characters 15-21:
Warning: the token PP_DEF is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 203, characters 22-31:
Warning: the token PP_DEFINE is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 202, characters 53-61:
Warning: the token PP_ENDIF is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 203, characters 7-14:
Warning: the token PP_ENDL is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 202, characters 7-15:
Warning: the token PP_IFDEF is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 202, characters 26-38:
Warning: the token PP_IFENCODER is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 202, characters 16-25:
Warning: the token PP_IFNDEF is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 202, characters 39-52:
Warning: the token PP_IFNENCODER is unused.
File "liquidsoap.1.3.4-lang_parser.mly", line 204, characters 16-26:
Warning: the token PP_INCLUDE is unused.
%{

  open Lang_values

  (** Parsing locations. *)
  let curpos ?pos () =
    match pos with
      | None -> Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()
      | Some (i,j) -> Parsing.rhs_start_pos i, Parsing.rhs_end_pos j

  (** Create a new value with an unknown type. *)
  let mk ?pos e =
    let kind =
      T.fresh_evar ~level:(-1) ~pos:(Some (curpos ?pos ()))
    in
      if Lang_values.debug then
        Printf.eprintf "%s (%s): assigned type var %s
"
          (T.print_pos (Utils.get_some kind.T.pos))
          (try Lang_values.print_term {t=kind;term=e} with _ -> "<?>")
          (T.print kind) ;
      { t = kind ; term = e }

  let mk_fun ?pos args body =
    let bound = List.map (fun (_,x,_,_) -> x) args in
    let fv = Lang_values.free_vars ~bound body in
      mk ?pos (Fun (fv,args,body))

  let mk_rec_fun ?pos doc name args body =
    let bound = List.map (fun (_,x,_,_) -> x) args in
    let fv = Lang_values.free_vars ~bound body in
    let cached = ref None in
    let rec fn () =
      match !cached with
        | Some t -> t
        | None ->
            let fnv = mk ?pos (RFun (fv,args,fn)) in
            mk ?pos (Let {doc=doc;var=name;gen=[];
                          def=fnv;body=body})
    in
      cached := Some (fn());
      mk ?pos (RFun (fv,args,fn))

  let mk_enc e = mk (Encoder e)

  (** Time intervals *)

  let time_units = [| 7*24*60*60 ; 24*60*60 ; 60*60 ; 60 ; 1 |]

  (** Given a date specified as a list of four values (whms),
    * return a date in seconds from the beginning of the week. *)
  let date =
    let to_int = function None -> 0 | Some i -> i in
    let rec aux = function
      | None::tl -> aux tl
      | [] -> raise (Parse_error (curpos (), "Invalid time."))
      | l ->
          let a = Array.of_list l in
          let n = Array.length a in
          let tu = time_units and tn = Array.length time_units in
            Array.fold_left (+) 0
              (Array.mapi (fun i s ->
                             let s =
                               if n=4 && i=0 then
                                 (to_int s) mod 7
                               else
                                 to_int s
                             in
                               tu.(tn-1 + i - n+1) * s) a)
    in
      aux

  (** Give the index of the first non-None value in the list. *)
  let last_index l =
    let rec last_index n = function
      | x::tl -> if x=None then last_index (n+1) tl else n
      | [] -> n
    in
      last_index 0 l

  (** Give the precision of a date-as-list.
    * For example, the precision of Xs is 1, XmYs is 60, XhYmZs 3600, etc. *)
  let precision d = time_units.(last_index d)

  (** Give the duration of a data-as-list.
   * For example, the duration of Xs is 1, Xm 60, XhYm 60, etc. *)
  let duration d =
    time_units.(Array.length time_units - 1 - last_index (List.rev d))

  let between d1 d2 =
    let p1 = precision d1 in
    let p2 = precision d2 in
    let t1 = date d1 in
    let t2 = date d2 in
      if p1<>p2 then
        raise (Parse_error (curpos (),
                            "Invalid time interval: precisions differ."));
      (t1,t2,p1)

  let during d =
    let t,d,p = date d, duration d, precision d in
      (t,t+d,p)

  let mk_time_pred (a,b,c) =
    let args = List.map (fun x -> "", mk (Int x)) [a;b;c] in
      mk (App (mk (Var "time_in_mod"), args))

  let mk_var_mult bin mul =
    if bin <> "+" then raise Parsing.Parse_error else
      let mul = Frame.mul_of_int mul in
      let mul = Frame.add_mul Frame.Variable mul in
      Lang_values.type_of_mul ~pos:None ~level:(-1) mul

  let mk_ty name args =
    match name with
      | "_" -> Lang_types.fresh_evar ~level:(-1) ~pos:None
      | "unit" -> Lang_types.make (Lang_types.Ground Lang_types.Unit)
      | "bool" -> Lang_types.make (Lang_types.Ground Lang_types.Bool)
      | "int" -> Lang_types.make (Lang_types.Ground Lang_types.Int)
      | "float" -> Lang_types.make (Lang_types.Ground Lang_types.Float)
      | "string" -> Lang_types.make (Lang_types.Ground Lang_types.String)
      | "source" | "active_source" ->
          (* TODO less confusion in hiding the stream_kind constructed type *)
          (* TODO print position in error message *)
          let audio,video,midi =
            match args with
              | ["",a;"",v;"",m] -> a,v,m
              | l when List.length l > 3 ->
                  raise (Parse_error (curpos (), "Invalid type parameters."))
              | l ->
                  List.iter
                    (fun (lbl,_) ->
                      if not (List.mem lbl ["audio";"video";"midi"]) then
                        raise (Parse_error (curpos (),
                                            "Invalid type parameters.")))
                    l ;
                  let assoc x =
                    try List.assoc x l with
                      | Not_found ->
                          Lang_types.fresh_evar ~level:(-1) ~pos:None
                  in
                    assoc "audio", assoc "video", assoc "midi"
          in
            Lang_values.source_t
              ~active:(name <> "source")
              (Lang_values.frame_kind_t audio video midi)
      | _ -> raise (Parse_error (curpos (), "Unknown type constructor."))

%}
%start interactive
%start program
%token AVI
%token BEGIN
%token <string> BIN0
%token <string> BIN1
%token <string> BIN2
%token <string> BIN3
%token <bool> BOOL
%token COLON
%token COMMA
%token <Doc.item * (string*string) list> DEF
%token ELSE
%token ELSIF
%token END
%token EOF
%token EXTERNAL
%token FDKAAC
%token FLAC
%token <float> FLOAT
%token FUN
%token GET
%token GETS
%token GSTREAMER
%token IF
%token <int> INT
%token <int option list * int option list> INTERVAL
%token LBRA
%token LCUR
%token LPAR
%token MINUS
%token MP3
%token MP3_ABR
%token MP3_VBR
%token NOT
%token OGG
%token OPUS
%token <string list> PP_COMMENT
%token PP_DEF
%token PP_DEFINE
%token PP_ENDIF
%token PP_ENDL
%token PP_IFDEF
%token PP_IFENCODER
%token PP_IFNDEF
%token PP_IFNENCODER
%token <string> PP_INCLUDE
%token QUESTION
%token RBRA
%token RCUR
%token REC
%token REF
%token RPAR
%token SEQ
%token SEQSEQ
%token SERVER_READ
%token SERVER_READCHARS
%token SERVER_READLINE
%token SERVER_WAIT
%token SERVER_WRITE
%token SET
%token SHINE
%token SPEEX
%token <string> STRING
%token THEN
%token THEORA
%token TILD
%token <int option list> TIME
%token TIMES
%token <string> VAR
%token <string> VARLBRA
%token <string> VARLPAR
%token VORBIS
%token VORBIS_ABR
%token VORBIS_CBR
%token WAV
%token YIELDS
%nonassoc YIELDS
%right SET
%nonassoc REF
%left BIN0
%left BIN1
%nonassoc NOT
%left BIN2 MINUS
%left BIN3 TIMES
%nonassoc GET
%nonassoc no_app
%nonassoc LPAR
%type <Lang_values.term> interactive
%type <Lang_values.term> program
%%

program:
  _1 = EOF
    {        ( mk Unit )}
| _1 = exprs _2 = EOF
    {              ( _1 )}

interactive:
  _1 = exprs _2 = SEQSEQ
    {                 ( _1 )}
| _1 = EOF
    {        ( raise End_of_file )}

s:
  
    {     ()}
| _1 = SEQ
    {               ()}

g:
  
    {     ()}
| _1 = GETS
    {               ()}

exprs:
  _1 = expr _2 = s
    {                             ( _1 )}
| _1 = expr _2 = cexprs
    {                             ( mk (Seq (_1,_2)) )}
| _1 = expr _2 = SEQ _3 = exprs
    {                             ( mk (Seq (_1,_3)) )}
| _1 = binding _2 = s
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = mk Unit }) )}
| _1 = binding _2 = cexprs
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = _2 }) )}
| _1 = binding _2 = SEQ _3 = exprs
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = _3 }) )}

cexprs:
  _1 = cexpr _2 = s
    {                             ( _1 )}
| _1 = cexpr _2 = cexprs
    {                             ( mk (Seq (_1,_2)) )}
| _1 = cexpr _2 = SEQ _3 = exprs
    {                             ( mk (Seq (_1,_3)) )}
| _1 = binding _2 = s
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = mk Unit }) )}
| _1 = binding _2 = cexprs
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = _2 }) )}
| _1 = binding _2 = SEQ _3 = exprs
    {                             ( let doc,name,def = _1 in
                                 mk (Let { doc=doc ; var=name ;
                                           gen = [] ; def=def ;
                                           body = _3 }) )}

expr:
  _1 = LPAR _2 = expr _3 = COLON _4 = ty _5 = RPAR
    {                                     ( Lang_types.(<:) _2.Lang_values.t _4 ;
                                       _2 )}
| _1 = MINUS _2 = FLOAT
    {                                     ( mk (Float (-. _2)) )}
| _1 = MINUS _2 = INT
    {                                     ( mk (Int (- _2)) )}
| _1 = MINUS _2 = LPAR _3 = expr _4 = RPAR
    {                                     ( mk (App (mk ~pos:(1,1) (Var "~-"),
                                                ["", _3])) )}
| _1 = LPAR _2 = expr _3 = RPAR
    {                                     ( _2 )}
| _1 = INT
    {                                     ( mk (Int _1) )}
| _1 = NOT _2 = expr
    {                                     ( mk (App (mk ~pos:(1,1) (Var "not"),
                                                ["", _2])) )}
| _1 = BOOL
    {                                     ( mk (Bool _1) )}
| _1 = FLOAT
    {                                     ( mk (Float  _1) )}
| _1 = STRING
    {                                     ( mk (String _1) )}
| _1 = liquidsoap_1_3_4_lang_parser_list
    {                                     ( mk (List _1) )}
| _1 = REF _2 = expr
    {                                     ( mk (Ref _2) )}
| _1 = GET _2 = expr
    {                                     ( mk (Get _2) )}
| _1 = expr _2 = SET _3 = expr
    {                                     ( mk (Set (_1,_3)) )}
| _1 = MP3 _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_cbr _2) )}
| _1 = MP3_VBR _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_vbr _2) )}
| _1 = MP3_ABR _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_abr _2) )}
| _1 = SHINE _2 = app_opt
    {                                     ( mk_enc (Lang_shine.make _2) )}
| _1 = FDKAAC _2 = app_opt
    {                                     ( mk_enc (Lang_fdkaac.make _2) )}
| _1 = FLAC _2 = app_opt
    {                                     ( mk_enc (Lang_flac.make _2) )}
| _1 = EXTERNAL _2 = app_opt
    {                                     ( mk_enc (Lang_external_encoder.make _2) )}
| _1 = GSTREAMER _2 = app_opt
    {                                     ( mk_enc (Lang_gstreamer.make ~pos:(curpos ()) _2) )}
| _1 = WAV _2 = app_opt
    {                                     ( mk_enc (Lang_wav.make _2) )}
| _1 = AVI _2 = app_opt
    {                                     ( mk_enc (Lang_avi.make _2) )}
| _1 = OGG _2 = LPAR _3 = ogg_items _4 = RPAR
    {                                     ( mk (Encoder (Encoder.Ogg _3)) )}
| _1 = top_level_ogg_item
    {                                     ( mk (Encoder (Encoder.Ogg [_1])) )}
| _1 = LPAR _2 = RPAR
    {                                     ( mk Unit )}
| _1 = LPAR _2 = expr _3 = COMMA _4 = expr _5 = RPAR
    {                                     ( mk (Product (_2,_4)) )}
| _1 = VAR
    {                                     ( mk (Var _1) )}
| _1 = VARLPAR _2 = app_list _3 = RPAR
    {                                     ( mk (App (mk ~pos:(1,1) (Var _1),_2)) )}
| _1 = VARLBRA _2 = expr _3 = RBRA
    {                                     ( mk (App (mk ~pos:(1,1) (Var "_[_]"),
                                           ["",_2;
                                            "",mk ~pos:(1,1) (Var _1)])) )}
| _1 = BEGIN _2 = exprs _3 = END
    {                                     ( _2 )}
| _1 = FUN _2 = LPAR _3 = arglist _4 = RPAR _5 = YIELDS _6 = expr
    {                                     ( mk_fun _3 _6 )}
| _1 = LCUR _2 = exprs _3 = RCUR
    {                                     ( mk_fun [] _2 )}
| _1 = IF _2 = exprs _3 = THEN _4 = exprs _5 = if_elsif _6 = END
    {                                     ( let cond = _2 in
                                       let then_b =
                                         mk_fun ~pos:(3,4) [] _4
                                       in
                                       let else_b = _5 in
                                       let op = mk ~pos:(1,1) (Var "if") in
                                         mk (App (op,["",cond;
                                                      "else",else_b;
                                                      "then",then_b])) )}
| _1 = SERVER_WAIT _2 = exprs _3 = THEN _4 = exprs _5 = END
    {                                     (  let condition = _2 in
                                        let op = mk ~pos:(1,1) (Var "server.wait") in
                                        let after =
                                          mk_fun ~pos:(2,3) [] _4
                                        in
                                          mk (App (op, ["",condition;"",after])) )}
| _1 = SERVER_WRITE _2 = expr _3 = THEN _4 = exprs _5 = END
    {                                     ( let data = _2 in
                                       let after =
                                         mk_fun ~pos:(3,4) [] _4
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.write") in
                                         mk (App (op, ["",after;"",data])) )}
| _1 = SERVER_READ _2 = expr _3 = COLON _4 = VAR _5 = THEN _6 = exprs _7 = END
    {                                              (
                                       let marker = _2 in
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_4,mk_ty "string" [],None] _6
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.read") in
                                         mk (App (op, ["",after;"",marker])) )}
| _1 = SERVER_READCHARS _2 = expr _3 = COLON _4 = VAR _5 = THEN _6 = exprs _7 = END
    {                                                   (
                                       let len = _2 in
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_4,mk_ty "string" [],None] _6
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.readchars") in
                                         mk (App (op, ["",after;"",len])) )}
| _1 = SERVER_READLINE _2 = VAR _3 = THEN _4 = exprs _5 = END
    {                                       (
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_2,mk_ty "string" [],None] _4
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.readline") in
                                         mk (App (op, ["",after])) )}
| _1 = expr _2 = BIN0 _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = expr _2 = BIN1 _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = expr _2 = BIN2 _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = expr _2 = BIN3 _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = expr _2 = TIMES _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var "*"),
                                                ["",_1;"",_3])) )}
| _1 = expr _2 = MINUS _3 = expr
    {                                   ( mk (App (mk ~pos:(2,2) (Var "-"),
                                                ["",_1;"",_3])) )}
| _1 = INTERVAL
    {                                   ( mk_time_pred (between (fst _1) (snd _1)) )}
| _1 = TIME
    {                                   ( mk_time_pred (during _1) )}

ty:
  _1 = VAR
    {                              ( mk_ty _1 [] )}
| _1 = VARLPAR _2 = ty_args _3 = RPAR
    {                              ( mk_ty _1 _2 )}
| _1 = REF _2 = LPAR _3 = ty _4 = RPAR
    {                              ( Lang_values.ref_t ~pos:(Some (curpos())) _3 )}
| _1 = LBRA _2 = ty _3 = RBRA
    {                              ( Lang_types.make (Lang_types.List _2) )}
| _1 = LPAR _2 = ty _3 = TIMES _4 = ty _5 = RPAR
    {                              ( Lang_types.make (Lang_types.Product (_2,_4)) )}
| _1 = INT
    {                              ( Lang_values.type_of_int _1 )}
| _1 = TIMES
    {                              ( Lang_values.variable_t )}
| _1 = TIMES _2 = BIN2 _3 = INT
    {                              ( mk_var_mult _2 _3 )}
| _1 = INT _2 = BIN2 _3 = TIMES
    {                              ( mk_var_mult _2 _1 )}
| _1 = LPAR _2 = argsty _3 = RPAR _4 = YIELDS _5 = ty
    {                              ( Lang_types.make (Lang_types.Arrow (_2,_5)) )}

ty_args:
  
    {                         ( [] )}
| _1 = ty_arg
    {                         ( [_1] )}
| _1 = ty_arg _2 = COMMA _3 = ty_args
    {                         ( _1::_3 )}

ty_arg:
  _1 = ty
    {       ( "",_1 )}
| _1 = VAR _2 = GETS _3 = ty
    {                ( _1,_3 )}

argty:
  _1 = ty
    {                          ( false,"",_1 )}
| _1 = VAR _2 = COLON _3 = ty
    {                          ( false,_1,_3 )}
| _1 = QUESTION _2 = VAR _3 = COLON _4 = ty
    {                          ( true,_2,_4 )}

argsty:
  
    {                       ( [] )}
| _1 = argty
    {                       ( [_1] )}
| _1 = argty _2 = COMMA _3 = argsty
    {                       ( _1::_3 )}

cexpr:
  _1 = LPAR _2 = expr _3 = RPAR
    {                                     ( _2 )}
| _1 = LPAR _2 = expr _3 = COLON _4 = ty _5 = RPAR
    {                                     ( Lang_types.(<:) _2.Lang_values.t _4 ;
                                       _2 )}
| _1 = INT
    {                                     ( mk (Int _1) )}
| _1 = NOT _2 = expr
    {                                     ( mk (App (mk ~pos:(1,1) (Var "not"),
                                                ["", _2])) )}
| _1 = BOOL
    {                                     ( mk (Bool _1) )}
| _1 = FLOAT
    {                                     ( mk (Float  _1) )}
| _1 = STRING
    {                                     ( mk (String _1) )}
| _1 = liquidsoap_1_3_4_lang_parser_list
    {                                     ( mk (List _1) )}
| _1 = REF _2 = expr
    {                                     ( mk (Ref _2) )}
| _1 = GET _2 = expr
    {                                     ( mk (Get _2) )}
| _1 = cexpr _2 = SET _3 = expr
    {                                     ( mk (Set (_1,_3)) )}
| _1 = MP3 _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_cbr _2) )}
| _1 = MP3_VBR _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_vbr _2) )}
| _1 = MP3_ABR _2 = app_opt
    {                                     ( mk_enc (Lang_mp3.make_abr _2) )}
| _1 = SHINE _2 = app_opt
    {                                     ( mk_enc (Lang_shine.make _2) )}
| _1 = FLAC _2 = app_opt
    {                                     ( mk_enc (Lang_flac.make _2) )}
| _1 = FDKAAC _2 = app_opt
    {                                     ( mk_enc (Lang_fdkaac.make _2) )}
| _1 = EXTERNAL _2 = app_opt
    {                                     ( mk_enc (Lang_external_encoder.make _2) )}
| _1 = WAV _2 = app_opt
    {                                     ( mk_enc (Lang_wav.make _2) )}
| _1 = AVI _2 = app_opt
    {                                     ( mk_enc (Lang_avi.make _2) )}
| _1 = OGG _2 = LPAR _3 = ogg_items _4 = RPAR
    {                                     ( mk (Encoder (Encoder.Ogg _3)) )}
| _1 = top_level_ogg_item
    {                                     ( mk (Encoder (Encoder.Ogg [_1])) )}
| _1 = LPAR _2 = RPAR
    {                                     ( mk Unit )}
| _1 = LPAR _2 = expr _3 = COMMA _4 = expr _5 = RPAR
    {                                     ( mk (Product (_2,_4)) )}
| _1 = VAR
    {                                     ( mk (Var _1) )}
| _1 = VARLPAR _2 = app_list _3 = RPAR
    {                                     ( mk (App (mk ~pos:(1,1) (Var _1),_2)) )}
| _1 = VARLBRA _2 = expr _3 = RBRA
    {                                     ( mk (App (mk ~pos:(1,1) (Var "_[_]"),
                                           ["",_2;
                                            "",mk ~pos:(1,1) (Var _1)])) )}
| _1 = BEGIN _2 = exprs _3 = END
    {                                     ( _2 )}
| _1 = FUN _2 = LPAR _3 = arglist _4 = RPAR _5 = YIELDS _6 = expr
    {                                     ( mk_fun _3 _6 )}
| _1 = LCUR _2 = exprs _3 = RCUR
    {                                     ( mk_fun [] _2 )}
| _1 = IF _2 = exprs _3 = THEN _4 = exprs _5 = if_elsif _6 = END
    {                                     ( let cond = _2 in
                                       let then_b =
                                         mk_fun ~pos:(3,4) [] _4
                                       in
                                       let else_b = _5 in
                                       let op = mk ~pos:(1,1) (Var "if") in
                                         mk (App (op,["",cond;
                                                      "else",else_b;
                                                      "then",then_b])) )}
| _1 = SERVER_WAIT _2 = exprs _3 = THEN _4 = exprs _5 = END
    {                                     (  let condition = _2 in
                                        let op = mk ~pos:(1,1) (Var "server.wait") in
                                        let after =
                                          mk_fun ~pos:(2,3) [] _4
                                        in
                                          mk (App (op, ["",condition;"",after])) )}
| _1 = SERVER_WRITE _2 = expr _3 = THEN _4 = exprs _5 = END
    {                                     ( let data = _2 in
                                       let after =
                                         mk_fun ~pos:(3,4) [] _4
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.write") in
                                         mk (App (op, ["",after;"",data])) )}
| _1 = SERVER_READ _2 = expr _3 = COLON _4 = VAR _5 = THEN _6 = exprs _7 = END
    {                                              (
                                       let marker = _2 in
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_4,mk_ty "string" [],None] _6
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.read") in
                                         mk (App (op, ["",after;"",marker])) )}
| _1 = SERVER_READCHARS _2 = expr _3 = COLON _4 = VAR _5 = THEN _6 = exprs _7 = END
    {                                                   (
                                       let len = _2 in
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_4,mk_ty "string" [],None] _6
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.readchars") in
                                         mk (App (op, ["",after;"",len])) )}
| _1 = SERVER_READLINE _2 = VAR _3 = THEN _4 = exprs _5 = END
    {                                       (
                                       let after =
                                         mk_fun ~pos:(5,6) ["",_2,mk_ty "string" [],None] _4
                                       in
                                       let op = mk ~pos:(1,1) (Var "server.readline") in
                                         mk (App (op, ["",after])) )}
| _1 = cexpr _2 = BIN0 _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = cexpr _2 = BIN1 _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = cexpr _2 = BIN2 _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = cexpr _2 = BIN3 _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var _2),
                                                ["",_1;"",_3])) )}
| _1 = cexpr _2 = TIMES _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var "*"),
                                                ["",_1;"",_3])) )}
| _1 = cexpr _2 = MINUS _3 = expr
    {                                    ( mk (App (mk ~pos:(2,2) (Var "-"),
                                                ["",_1;"",_3])) )}
| _1 = INTERVAL
    {                                   ( mk_time_pred (between (fst _1) (snd _1)) )}
| _1 = TIME
    {                                   ( mk_time_pred (during _1) )}

liquidsoap_1_3_4_lang_parser_list:
  _1 = LBRA _2 = inner_list _3 = RBRA
    {                         ( _2 )}

inner_list:
  _1 = expr _2 = COMMA _3 = inner_list
    {                           ( _1::_3 )}
| _1 = expr
    {                           ( [_1] )}
| 
    {                           ( [] )}

app_list_elem:
  _1 = VAR _2 = GETS _3 = expr
    {                  ( _1,_3 )}
| _1 = expr
    {                  ( "",_1 )}

app_list:
  
    {                                 ( [] )}
| _1 = app_list_elem
    {                                 ( [_1] )}
| _1 = app_list_elem _2 = COMMA _3 = app_list
    {                                 ( _1::_3 )}

binding:
  _1 = VAR _2 = GETS _3 = expr
    {                  (
       let body = _3 in
         (Doc.none (),[]),_1,body
    )}
| _1 = DEF _2 = VAR _3 = g _4 = exprs _5 = END
    {                        (
      let body = _4 in
        _1,_2,body
    )}
| _1 = DEF _2 = VARLPAR _3 = arglist _4 = RPAR _5 = g _6 = exprs _7 = END
    {                                         (
      let arglist = _3 in
      let body = mk_fun arglist _6 in
        _1,_2,body
    )}
| _1 = DEF _2 = REC _3 = VARLPAR _4 = arglist _5 = RPAR _6 = g _7 = exprs _8 = END
    {                                             (
      let doc = _1 in
      let name = _3 in
      let arglist = _4 in
      let body = mk_rec_fun doc name arglist _7 in
        doc,name,body
    )}

arglist:
  
    {                      ( [] )}
| _1 = arg
    {                      ( [_1] )}
| _1 = arg _2 = COMMA _3 = arglist
    {                      ( _1::_3 )}

arg:
  _1 = TILD _2 = VAR _3 = opt
    {                 ( _2,_2,
                   T.fresh_evar ~level:(-1) ~pos:(Some (curpos ~pos:(2,2) ())),
                   _3 )}
| _1 = VAR _2 = opt
    {                 ( "",_1,
                   T.fresh_evar ~level:(-1) ~pos:(Some (curpos ~pos:(1,1) ())),
                   _2 )}

opt:
  _1 = GETS _2 = expr
    {              ( Some _2 )}
| 
    {              ( None )}

if_elsif:
  _1 = ELSIF _2 = exprs _3 = THEN _4 = exprs _5 = if_elsif
    {                                    ( let cond = _2 in
                                      let then_b =
                                        mk_fun ~pos:(3,4) [] _4
                                      in
                                      let else_b = _5 in
                                      let op = mk ~pos:(1,1) (Var "if") in
                                        mk_fun []
                                          (mk (App (op,["",cond;
                                                        "else",else_b;
                                                        "then",then_b]))) )}
| _1 = ELSE _2 = exprs
    {                                    ( mk_fun ~pos:(1,2) [] _2 )}
| 
    {                                    ( mk_fun [] (mk Unit) )}

app_opt:
   %prec no_app
    {                 ( [] )}
| _1 = LPAR _2 = app_list _3 = RPAR
    {                       ( _2 )}

ogg_items:
  _1 = ogg_item
    {             ( [_1] )}
| _1 = ogg_item _2 = COMMA _3 = ogg_items
    {                             ( _1::_3 )}

top_level_ogg_item:
  _1 = VORBIS _2 = app_opt
    {                       ( Lang_vorbis.make _2 )}
| _1 = VORBIS_CBR _2 = app_opt
    {                       ( Lang_vorbis.make_cbr _2 )}
| _1 = VORBIS_ABR _2 = app_opt
    {                       ( Lang_vorbis.make_abr _2 )}
| _1 = THEORA _2 = app_opt
    {                       ( Lang_theora.make _2 )}
| _1 = SPEEX _2 = app_opt
    {                       ( Lang_speex.make _2 )}
| _1 = OPUS _2 = app_opt
    {                       ( Lang_opus.make _2 )}

ogg_item:
  _1 = FLAC _2 = app_opt
    {                   ( Lang_flac.make_ogg _2 )}
| _1 = top_level_ogg_item
    {                       ( _1 )}

%%
