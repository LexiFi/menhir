State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On main shift to state 1
-- On llist(expr) shift to state 2
## Reductions:
-- On LPAREN INT EOL
--   reduce production llist(expr) ->

State 1:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 2:
## Known stack suffix:
## llist(expr)
## LR(1) items:
llist(expr) -> llist(expr) . expr [ LPAREN INT EOL ]
main -> llist(expr) . EOL [ # ]
## Transitions:
-- On LPAREN shift to state 3
-- On INT shift to state 4
-- On EOL shift to state 11
-- On expr shift to state 12
## Reductions:

State 3:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
-- On LPAREN shift to state 3
-- On INT shift to state 4
-- On expr shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS LPAREN INT EOL
--   reduce production expr -> INT

State 5:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ TIMES RPAREN PLUS LPAREN INT EOL ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS ]
## Transitions:
-- On TIMES shift to state 6
-- On RPAREN shift to state 8
-- On PLUS shift to state 9
## Reductions:

State 6:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
-- On LPAREN shift to state 3
-- On INT shift to state 4
-- On expr shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
expr -> expr TIMES expr . [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS LPAREN INT EOL
--   reduce production expr -> expr TIMES expr

State 8:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
## Reductions:
-- On TIMES RPAREN PLUS LPAREN INT EOL
--   reduce production expr -> LPAREN expr RPAREN

State 9:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
-- On LPAREN shift to state 3
-- On INT shift to state 4
-- On expr shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
expr -> expr PLUS expr . [ TIMES RPAREN PLUS LPAREN INT EOL ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS LPAREN INT EOL ]
## Transitions:
-- On TIMES shift to state 6
## Reductions:
-- On RPAREN PLUS LPAREN INT EOL
--   reduce production expr -> expr PLUS expr

State 11:
## Known stack suffix:
## llist(expr) EOL
## LR(1) items:
main -> llist(expr) EOL . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> llist(expr) EOL

State 12:
## Known stack suffix:
## llist(expr) expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS LPAREN INT EOL ]
expr -> expr . TIMES expr [ TIMES PLUS LPAREN INT EOL ]
llist(expr) -> llist(expr) expr . [ LPAREN INT EOL ]
## Transitions:
-- On TIMES shift to state 6
-- On PLUS shift to state 9
## Reductions:
-- On LPAREN INT EOL
--   reduce production llist(expr) -> llist(expr) expr

