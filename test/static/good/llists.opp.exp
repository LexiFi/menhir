%start main
%token EOL
%token <int> INT
%token LPAREN
%token PLUS
%token RPAREN
%token TIMES
%left PLUS
%left TIMES
%type <int> expr
%type <int list> main
%%

main:
  xs = llist_expr_ _2 = EOL
    {let es =     ( List.rev xs ) in
    ( es )}

expr:
  i = INT
    {    ( i )}
| _1 = LPAREN e = expr _3 = RPAREN
    {    ( e )}
| e1 = expr _2 = PLUS e2 = expr
    {    ( e1 + e2 )}
| e1 = expr _2 = TIMES e2 = expr
    {    ( e1 * e2 )}

llist_expr_:
  
    {    ( [] )}
| xs = llist_expr_ x = expr
    {    ( x :: xs )}

%%
