State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On MetadataVar shift to state 1
-- On LocalVarID shift to state 10
-- On LocalVar shift to state 90
-- On Kw_target shift to state 95
-- On Kw_module shift to state 102
-- On Kw_deplibs shift to state 105
-- On Kw_define shift to state 112
-- On Kw_declare shift to state 1035
-- On Kw_attributes shift to state 1037
-- On GlobalVar shift to state 1081
-- On GlobalID shift to state 1083
-- On Exclaim shift to state 1085
-- On Eof shift to state 1092
-- On ComdatVar shift to state 1093
-- On toplevel_list shift to state 1102
-- On toplevel shift to state 1103
-- On main shift to state 1164
-- On global_eq shift to state 1105
## Reductions:

State 1:
## Known stack suffix:
## MetadataVar
## LR(1) items:
toplevel -> MetadataVar . Equal Exclaim Lbrace mdlist Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## MetadataVar Equal
## LR(1) items:
toplevel -> MetadataVar Equal . Exclaim Lbrace mdlist Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Exclaim shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## MetadataVar Equal Exclaim
## LR(1) items:
toplevel -> MetadataVar Equal Exclaim . Lbrace mdlist Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lbrace shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## MetadataVar Equal Exclaim Lbrace
## LR(1) items:
toplevel -> MetadataVar Equal Exclaim Lbrace . mdlist Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Exclaim shift to state 5
-- On mdlist shift to state 8
## Reductions:
-- On Rbrace
--   reduce production mdlist ->

State 5:
## Known stack suffix:
## Exclaim
## LR(1) items:
mdlist -> Exclaim . APInt mdlist [ Rbrace ]
## Transitions:
-- On APInt shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## Exclaim APInt
## LR(1) items:
mdlist -> Exclaim APInt . mdlist [ Rbrace ]
## Transitions:
-- On Exclaim shift to state 5
-- On mdlist shift to state 7
## Reductions:
-- On Rbrace
--   reduce production mdlist ->

State 7:
## Known stack suffix:
## Exclaim APInt mdlist
## LR(1) items:
mdlist -> Exclaim APInt mdlist . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production mdlist -> Exclaim APInt mdlist

State 8:
## Known stack suffix:
## MetadataVar Equal Exclaim Lbrace mdlist
## LR(1) items:
toplevel -> MetadataVar Equal Exclaim Lbrace mdlist . Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rbrace shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## MetadataVar Equal Exclaim Lbrace mdlist Rbrace
## LR(1) items:
toplevel -> MetadataVar Equal Exclaim Lbrace mdlist Rbrace . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> MetadataVar Equal Exclaim Lbrace mdlist Rbrace

State 10:
## Known stack suffix:
## LocalVarID
## LR(1) items:
toplevel -> LocalVarID . Equal Kw_type Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVarID . Equal Kw_type typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LocalVarID Equal
## LR(1) items:
toplevel -> LocalVarID Equal . Kw_type Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVarID Equal . Kw_type typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_type shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## LocalVarID Equal Kw_type
## LR(1) items:
toplevel -> LocalVarID Equal Kw_type . Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVarID Equal Kw_type . typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_opaque shift to state 88
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 89
-- On non_void_type shift to state 71
## Reductions:

State 13:
## Known stack suffix:
## Lsquare
## LR(1) items:
non_void_type -> Lsquare . APInt Kw_x typ Rsquare [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On APInt shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## Lsquare APInt
## LR(1) items:
non_void_type -> Lsquare APInt . Kw_x typ Rsquare [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Kw_x shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## Lsquare APInt Kw_x
## LR(1) items:
non_void_type -> Lsquare APInt Kw_x . typ Rsquare [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 86
-- On non_void_type shift to state 71
## Reductions:

State 16:
## Known stack suffix:
## LocalVarID
## LR(1) items:
non_void_type -> LocalVarID . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> LocalVarID

State 17:
## Known stack suffix:
## LocalVar
## LR(1) items:
non_void_type -> LocalVar . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> LocalVar

State 18:
## Known stack suffix:
## Less
## LR(1) items:
non_void_type -> Less . Lbrace Rbrace Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> Less . Lbrace type_list Rbrace Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> Less . APInt Kw_x typ Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Lbrace shift to state 19
-- On APInt shift to state 82
## Reductions:

State 19:
## Known stack suffix:
## Less Lbrace
## LR(1) items:
non_void_type -> Less Lbrace . Rbrace Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> Less Lbrace . type_list Rbrace Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Rbrace shift to state 20
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_list shift to state 79
-- On typ shift to state 37
-- On non_void_type shift to state 71
## Reductions:

State 20:
## Known stack suffix:
## Less Lbrace Rbrace
## LR(1) items:
non_void_type -> Less Lbrace Rbrace . Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Greater shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## Less Lbrace Rbrace Greater
## LR(1) items:
non_void_type -> Less Lbrace Rbrace Greater . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Less Lbrace Rbrace Greater

State 22:
## Known stack suffix:
## Lbrace
## LR(1) items:
non_void_type -> Lbrace . Rbrace [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> Lbrace . type_list Rbrace [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Rbrace shift to state 23
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_list shift to state 35
-- On typ shift to state 37
-- On non_void_type shift to state 71
## Reductions:

State 23:
## Known stack suffix:
## Lbrace Rbrace
## LR(1) items:
non_void_type -> Lbrace Rbrace . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Lbrace Rbrace

State 24:
## Known stack suffix:
## Kw_x86_mmx
## LR(1) items:
non_void_type -> Kw_x86_mmx . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_x86_mmx

State 25:
## Known stack suffix:
## Kw_x86_fp80
## LR(1) items:
non_void_type -> Kw_x86_fp80 . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_x86_fp80

State 26:
## Known stack suffix:
## Kw_void
## LR(1) items:
typ -> Kw_void . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production typ -> Kw_void

State 27:
## Known stack suffix:
## Kw_ppc_fp128
## LR(1) items:
non_void_type -> Kw_ppc_fp128 . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_ppc_fp128

State 28:
## Known stack suffix:
## Kw_metadata
## LR(1) items:
non_void_type -> Kw_metadata . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_metadata

State 29:
## Known stack suffix:
## Kw_label
## LR(1) items:
non_void_type -> Kw_label . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_label

State 30:
## Known stack suffix:
## Kw_half
## LR(1) items:
non_void_type -> Kw_half . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_half

State 31:
## Known stack suffix:
## Kw_fp128
## LR(1) items:
non_void_type -> Kw_fp128 . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_fp128

State 32:
## Known stack suffix:
## Kw_float
## LR(1) items:
non_void_type -> Kw_float . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_float

State 33:
## Known stack suffix:
## Kw_double
## LR(1) items:
non_void_type -> Kw_double . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Kw_double

State 34:
## Known stack suffix:
## I
## LR(1) items:
non_void_type -> I . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> I

State 35:
## Known stack suffix:
## Lbrace type_list
## LR(1) items:
non_void_type -> Lbrace type_list . Rbrace [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Rbrace shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## Lbrace type_list Rbrace
## LR(1) items:
non_void_type -> Lbrace type_list Rbrace . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Lbrace type_list Rbrace

State 37:
## Known stack suffix:
## typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rbrace Lparen Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Rbrace Lparen Kw_addrspace Comma ]
type_list -> typ . [ Rbrace ]
type_list -> typ . Comma type_list [ Rbrace ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 77
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On Rbrace
--   reduce production type_list -> typ

State 38:
## Known stack suffix:
## Lparen
## LR(1) items:
argument_list -> Lparen . arg_type_list Rparen [ StringConstant Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_uwtable Kw_urem Kw_unreachable Kw_unnamed_addr Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sspstrong Kw_sspreq Kw_ssp Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_section Kw_sdiv Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_prefix Kw_personality Kw_or Kw_optsize Kw_optnone Kw_null Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonnull Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nocapture Kw_nobuiltin Kw_noalias Kw_nest Kw_naked Kw_musttail Kw_mul Kw_module Kw_minsize Kw_lshr Kw_jumptable Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inlinehint Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_gc Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_builtin Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_alwaysinline Kw_alignstack Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar AttrGrpID APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On DotDotDot shift to state 39
-- On typ shift to state 40
-- On non_void_type shift to state 71
-- On arg_type_list shift to state 72
-- On arg_type shift to state 74
## Reductions:
-- On Rparen
--   reduce production arg_type_list ->

State 39:
## Known stack suffix:
## DotDotDot
## LR(1) items:
arg_type_list -> DotDotDot . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production arg_type_list -> DotDotDot

State 40:
## Known stack suffix:
## typ
## LR(1) items:
arg_type -> typ . param_attribute_list [ Rparen Comma ]
arg_type -> typ . param_attribute_list LocalVar [ Rparen Comma ]
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen LocalVar Kw_zeroext Kw_sret Kw_signext Kw_returned Kw_readonly Kw_readnone Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_inreg Kw_inalloca Kw_dereferenceable Kw_byval Kw_align Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Rparen Lparen LocalVar Kw_zeroext Kw_sret Kw_signext Kw_returned Kw_readonly Kw_readnone Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_inreg Kw_inalloca Kw_dereferenceable Kw_byval Kw_align Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_zeroext shift to state 41
-- On Kw_sret shift to state 42
-- On Kw_signext shift to state 43
-- On Kw_returned shift to state 44
-- On Kw_readonly shift to state 45
-- On Kw_readnone shift to state 46
-- On Kw_nonnull shift to state 47
-- On Kw_nocapture shift to state 48
-- On Kw_noalias shift to state 49
-- On Kw_nest shift to state 50
-- On Kw_inreg shift to state 51
-- On Kw_inalloca shift to state 52
-- On Kw_dereferenceable shift to state 53
-- On Kw_byval shift to state 57
-- On Kw_align shift to state 58
-- On Kw_addrspace shift to state 60
-- On param_attribute_list shift to state 64
-- On param_attribute shift to state 66
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On Rparen LocalVar Comma
--   reduce production param_attribute_list ->

State 41:
## Known stack suffix:
## Kw_zeroext
## LR(1) items:
param_attribute -> Kw_zeroext . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_zeroext

State 42:
## Known stack suffix:
## Kw_sret
## LR(1) items:
param_attribute -> Kw_sret . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_sret

State 43:
## Known stack suffix:
## Kw_signext
## LR(1) items:
param_attribute -> Kw_signext . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_signext

State 44:
## Known stack suffix:
## Kw_returned
## LR(1) items:
param_attribute -> Kw_returned . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_returned

State 45:
## Known stack suffix:
## Kw_readonly
## LR(1) items:
param_attribute -> Kw_readonly . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_readonly

State 46:
## Known stack suffix:
## Kw_readnone
## LR(1) items:
param_attribute -> Kw_readnone . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_readnone

State 47:
## Known stack suffix:
## Kw_nonnull
## LR(1) items:
param_attribute -> Kw_nonnull . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_nonnull

State 48:
## Known stack suffix:
## Kw_nocapture
## LR(1) items:
param_attribute -> Kw_nocapture . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_nocapture

State 49:
## Known stack suffix:
## Kw_noalias
## LR(1) items:
param_attribute -> Kw_noalias . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_noalias

State 50:
## Known stack suffix:
## Kw_nest
## LR(1) items:
param_attribute -> Kw_nest . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_nest

State 51:
## Known stack suffix:
## Kw_inreg
## LR(1) items:
param_attribute -> Kw_inreg . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_inreg

State 52:
## Known stack suffix:
## Kw_inalloca
## LR(1) items:
param_attribute -> Kw_inalloca . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_inalloca

State 53:
## Known stack suffix:
## Kw_dereferenceable
## LR(1) items:
param_attribute -> Kw_dereferenceable . Lparen APInt Rparen [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
-- On Lparen shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## Kw_dereferenceable Lparen
## LR(1) items:
param_attribute -> Kw_dereferenceable Lparen . APInt Rparen [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
-- On APInt shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## Kw_dereferenceable Lparen APInt
## LR(1) items:
param_attribute -> Kw_dereferenceable Lparen APInt . Rparen [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
-- On Rparen shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## Kw_dereferenceable Lparen APInt Rparen
## LR(1) items:
param_attribute -> Kw_dereferenceable Lparen APInt Rparen . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_dereferenceable Lparen APInt Rparen

State 57:
## Known stack suffix:
## Kw_byval
## LR(1) items:
param_attribute -> Kw_byval . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_byval

State 58:
## Known stack suffix:
## Kw_align
## LR(1) items:
param_attribute -> Kw_align . APInt [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
-- On APInt shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## Kw_align APInt
## LR(1) items:
param_attribute -> Kw_align APInt . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute -> Kw_align APInt

State 60:
## Known stack suffix:
## Kw_addrspace
## LR(1) items:
opt_addrspace -> Kw_addrspace . Lparen APInt Rparen [ Star Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant ]
## Transitions:
-- On Lparen shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## Kw_addrspace Lparen
## LR(1) items:
opt_addrspace -> Kw_addrspace Lparen . APInt Rparen [ Star Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant ]
## Transitions:
-- On APInt shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## Kw_addrspace Lparen APInt
## LR(1) items:
opt_addrspace -> Kw_addrspace Lparen APInt . Rparen [ Star Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant ]
## Transitions:
-- On Rparen shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## Kw_addrspace Lparen APInt Rparen
## LR(1) items:
opt_addrspace -> Kw_addrspace Lparen APInt Rparen . [ Star Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant ]
## Transitions:
## Reductions:
-- On Star Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant
--   reduce production opt_addrspace -> Kw_addrspace Lparen APInt Rparen

State 64:
## Known stack suffix:
## typ param_attribute_list
## LR(1) items:
arg_type -> typ param_attribute_list . [ Rparen Comma ]
arg_type -> typ param_attribute_list . LocalVar [ Rparen Comma ]
## Transitions:
-- On LocalVar shift to state 65
## Reductions:
-- On Rparen Comma
--   reduce production arg_type -> typ param_attribute_list

State 65:
## Known stack suffix:
## typ param_attribute_list LocalVar
## LR(1) items:
arg_type -> typ param_attribute_list LocalVar . [ Rparen Comma ]
## Transitions:
## Reductions:
-- On Rparen Comma
--   reduce production arg_type -> typ param_attribute_list LocalVar

State 66:
## Known stack suffix:
## param_attribute
## LR(1) items:
param_attribute_list -> param_attribute . param_attribute_list [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
-- On Kw_zeroext shift to state 41
-- On Kw_sret shift to state 42
-- On Kw_signext shift to state 43
-- On Kw_returned shift to state 44
-- On Kw_readonly shift to state 45
-- On Kw_readnone shift to state 46
-- On Kw_nonnull shift to state 47
-- On Kw_nocapture shift to state 48
-- On Kw_noalias shift to state 49
-- On Kw_nest shift to state 50
-- On Kw_inreg shift to state 51
-- On Kw_inalloca shift to state 52
-- On Kw_dereferenceable shift to state 53
-- On Kw_byval shift to state 57
-- On Kw_align shift to state 58
-- On param_attribute_list shift to state 67
-- On param_attribute shift to state 66
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute_list ->

State 67:
## Known stack suffix:
## param_attribute param_attribute_list
## LR(1) items:
param_attribute_list -> param_attribute param_attribute_list . [ Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
## Transitions:
## Reductions:
-- On Rparen Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat
--   reduce production param_attribute_list -> param_attribute param_attribute_list

State 68:
## Known stack suffix:
## typ opt_addrspace
## LR(1) items:
non_void_type -> typ opt_addrspace . Star [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Star shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## typ opt_addrspace Star
## LR(1) items:
non_void_type -> typ opt_addrspace Star . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> typ opt_addrspace Star

State 70:
## Known stack suffix:
## typ argument_list
## LR(1) items:
non_void_type -> typ argument_list . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> typ argument_list

State 71:
## Known stack suffix:
## non_void_type
## LR(1) items:
typ -> non_void_type . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production typ -> non_void_type

State 72:
## Known stack suffix:
## Lparen arg_type_list
## LR(1) items:
argument_list -> Lparen arg_type_list . Rparen [ StringConstant Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_uwtable Kw_urem Kw_unreachable Kw_unnamed_addr Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sspstrong Kw_sspreq Kw_ssp Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_section Kw_sdiv Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_prefix Kw_personality Kw_or Kw_optsize Kw_optnone Kw_null Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonnull Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nocapture Kw_nobuiltin Kw_noalias Kw_nest Kw_naked Kw_musttail Kw_mul Kw_module Kw_minsize Kw_lshr Kw_jumptable Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inlinehint Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_gc Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_builtin Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_alwaysinline Kw_alignstack Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar AttrGrpID APInt APFloat ]
## Transitions:
-- On Rparen shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## Lparen arg_type_list Rparen
## LR(1) items:
argument_list -> Lparen arg_type_list Rparen . [ StringConstant Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_uwtable Kw_urem Kw_unreachable Kw_unnamed_addr Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sspstrong Kw_sspreq Kw_ssp Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_section Kw_sdiv Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_prefix Kw_personality Kw_or Kw_optsize Kw_optnone Kw_null Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonnull Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nocapture Kw_nobuiltin Kw_noalias Kw_nest Kw_naked Kw_musttail Kw_mul Kw_module Kw_minsize Kw_lshr Kw_jumptable Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inlinehint Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_gc Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_builtin Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_alwaysinline Kw_alignstack Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar AttrGrpID APInt APFloat ]
## Transitions:
## Reductions:
-- On StringConstant Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_uwtable Kw_urem Kw_unreachable Kw_unnamed_addr Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sspstrong Kw_sspreq Kw_ssp Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_section Kw_sdiv Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_prefix Kw_personality Kw_or Kw_optsize Kw_optnone Kw_null Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonnull Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nocapture Kw_nobuiltin Kw_noalias Kw_nest Kw_naked Kw_musttail Kw_mul Kw_module Kw_minsize Kw_lshr Kw_jumptable Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inlinehint Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_gc Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_builtin Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_alwaysinline Kw_alignstack Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar AttrGrpID APInt APFloat
--   reduce production argument_list -> Lparen arg_type_list Rparen

State 74:
## Known stack suffix:
## arg_type
## LR(1) items:
arg_type_list -> arg_type . [ Rparen ]
arg_type_list -> arg_type . Comma arg_type_list [ Rparen ]
## Transitions:
-- On Comma shift to state 75
## Reductions:
-- On Rparen
--   reduce production arg_type_list -> arg_type

State 75:
## Known stack suffix:
## arg_type Comma
## LR(1) items:
arg_type_list -> arg_type Comma . arg_type_list [ Rparen ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On DotDotDot shift to state 39
-- On typ shift to state 40
-- On non_void_type shift to state 71
-- On arg_type_list shift to state 76
-- On arg_type shift to state 74
## Reductions:
-- On Rparen
--   reduce production arg_type_list ->

State 76:
## Known stack suffix:
## arg_type Comma arg_type_list
## LR(1) items:
arg_type_list -> arg_type Comma arg_type_list . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production arg_type_list -> arg_type Comma arg_type_list

State 77:
## Known stack suffix:
## typ Comma
## LR(1) items:
type_list -> typ Comma . type_list [ Rbrace ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_list shift to state 78
-- On typ shift to state 37
-- On non_void_type shift to state 71
## Reductions:

State 78:
## Known stack suffix:
## typ Comma type_list
## LR(1) items:
type_list -> typ Comma type_list . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production type_list -> typ Comma type_list

State 79:
## Known stack suffix:
## Less Lbrace type_list
## LR(1) items:
non_void_type -> Less Lbrace type_list . Rbrace Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Rbrace shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## Less Lbrace type_list Rbrace
## LR(1) items:
non_void_type -> Less Lbrace type_list Rbrace . Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Greater shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## Less Lbrace type_list Rbrace Greater
## LR(1) items:
non_void_type -> Less Lbrace type_list Rbrace Greater . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Less Lbrace type_list Rbrace Greater

State 82:
## Known stack suffix:
## Less APInt
## LR(1) items:
non_void_type -> Less APInt . Kw_x typ Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Kw_x shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## Less APInt Kw_x
## LR(1) items:
non_void_type -> Less APInt Kw_x . typ Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 84
-- On non_void_type shift to state 71
## Reductions:

State 84:
## Known stack suffix:
## Less APInt Kw_x typ
## LR(1) items:
non_void_type -> Less APInt Kw_x typ . Greater [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen Kw_addrspace Greater ]
non_void_type -> typ . argument_list [ Star Lparen Kw_addrspace Greater ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Greater shift to state 85
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 85:
## Known stack suffix:
## Less APInt Kw_x typ Greater
## LR(1) items:
non_void_type -> Less APInt Kw_x typ Greater . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Less APInt Kw_x typ Greater

State 86:
## Known stack suffix:
## Lsquare APInt Kw_x typ
## LR(1) items:
non_void_type -> Lsquare APInt Kw_x typ . Rsquare [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
non_void_type -> typ . opt_addrspace Star [ Star Rsquare Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rsquare Lparen Kw_addrspace ]
## Transitions:
-- On Rsquare shift to state 87
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 87:
## Known stack suffix:
## Lsquare APInt Kw_x typ Rsquare
## LR(1) items:
non_void_type -> Lsquare APInt Kw_x typ Rsquare . [ Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat ]
## Transitions:
## Reductions:
-- On Star Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_unreachable Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_target Kw_tail Kw_switch Kw_sub Kw_store Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_ptrtoint Kw_personality Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_musttail Kw_mul Kw_module Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_indirectbr Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fence Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_call Kw_c Kw_byval Kw_br Kw_blockaddress Kw_bitcast Kw_attributes Kw_atomicrmw Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar APInt APFloat
--   reduce production non_void_type -> Lsquare APInt Kw_x typ Rsquare

State 88:
## Known stack suffix:
## LocalVarID Equal Kw_type Kw_opaque
## LR(1) items:
toplevel -> LocalVarID Equal Kw_type Kw_opaque . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> LocalVarID Equal Kw_type Kw_opaque

State 89:
## Known stack suffix:
## LocalVarID Equal Kw_type typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof ComdatVar ]
non_void_type -> typ . argument_list [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVarID Equal Kw_type typ . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> LocalVarID Equal Kw_type typ

State 90:
## Known stack suffix:
## LocalVar
## LR(1) items:
toplevel -> LocalVar . Equal Kw_type Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVar . Equal Kw_type typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LocalVar Equal
## LR(1) items:
toplevel -> LocalVar Equal . Kw_type Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVar Equal . Kw_type typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_type shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## LocalVar Equal Kw_type
## LR(1) items:
toplevel -> LocalVar Equal Kw_type . Kw_opaque [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVar Equal Kw_type . typ [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_opaque shift to state 93
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 94
-- On non_void_type shift to state 71
## Reductions:

State 93:
## Known stack suffix:
## LocalVar Equal Kw_type Kw_opaque
## LR(1) items:
toplevel -> LocalVar Equal Kw_type Kw_opaque . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> LocalVar Equal Kw_type Kw_opaque

State 94:
## Known stack suffix:
## LocalVar Equal Kw_type typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof ComdatVar ]
non_void_type -> typ . argument_list [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> LocalVar Equal Kw_type typ . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> LocalVar Equal Kw_type typ

State 95:
## Known stack suffix:
## Kw_target
## LR(1) items:
toplevel -> Kw_target . Kw_triple Equal StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> Kw_target . Kw_datalayout Equal StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_triple shift to state 96
-- On Kw_datalayout shift to state 99
## Reductions:

State 96:
## Known stack suffix:
## Kw_target Kw_triple
## LR(1) items:
toplevel -> Kw_target Kw_triple . Equal StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## Kw_target Kw_triple Equal
## LR(1) items:
toplevel -> Kw_target Kw_triple Equal . StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## Kw_target Kw_triple Equal StringConstant
## LR(1) items:
toplevel -> Kw_target Kw_triple Equal StringConstant . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_target Kw_triple Equal StringConstant

State 99:
## Known stack suffix:
## Kw_target Kw_datalayout
## LR(1) items:
toplevel -> Kw_target Kw_datalayout . Equal StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## Kw_target Kw_datalayout Equal
## LR(1) items:
toplevel -> Kw_target Kw_datalayout Equal . StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## Kw_target Kw_datalayout Equal StringConstant
## LR(1) items:
toplevel -> Kw_target Kw_datalayout Equal StringConstant . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_target Kw_datalayout Equal StringConstant

State 102:
## Known stack suffix:
## Kw_module
## LR(1) items:
toplevel -> Kw_module . Kw_asm StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_asm shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## Kw_module Kw_asm
## LR(1) items:
toplevel -> Kw_module Kw_asm . StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## Kw_module Kw_asm StringConstant
## LR(1) items:
toplevel -> Kw_module Kw_asm StringConstant . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_module Kw_asm StringConstant

State 105:
## Known stack suffix:
## Kw_deplibs
## LR(1) items:
toplevel -> Kw_deplibs . Equal Lsquare string_list Rsquare [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## Kw_deplibs Equal
## LR(1) items:
toplevel -> Kw_deplibs Equal . Lsquare string_list Rsquare [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## Kw_deplibs Equal Lsquare
## LR(1) items:
toplevel -> Kw_deplibs Equal Lsquare . string_list Rsquare [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 108
-- On string_list shift to state 110
## Reductions:
-- On Rsquare
--   reduce production string_list ->

State 108:
## Known stack suffix:
## StringConstant
## LR(1) items:
string_list -> StringConstant . string_list [ Rsquare ]
## Transitions:
-- On StringConstant shift to state 108
-- On string_list shift to state 109
## Reductions:
-- On Rsquare
--   reduce production string_list ->

State 109:
## Known stack suffix:
## StringConstant string_list
## LR(1) items:
string_list -> StringConstant string_list . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production string_list -> StringConstant string_list

State 110:
## Known stack suffix:
## Kw_deplibs Equal Lsquare string_list
## LR(1) items:
toplevel -> Kw_deplibs Equal Lsquare string_list . Rsquare [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rsquare shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## Kw_deplibs Equal Lsquare string_list Rsquare
## LR(1) items:
toplevel -> Kw_deplibs Equal Lsquare string_list Rsquare . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_deplibs Equal Lsquare string_list Rsquare

State 112:
## Known stack suffix:
## Kw_define
## LR(1) items:
toplevel -> Kw_define . function_header function_body [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_weak_odr shift to state 113
-- On Kw_weak shift to state 114
-- On Kw_private shift to state 115
-- On Kw_linkonce_odr shift to state 116
-- On Kw_linkonce shift to state 117
-- On Kw_linker_private_weak shift to state 118
-- On Kw_linker_private shift to state 119
-- On Kw_internal shift to state 120
-- On Kw_external shift to state 121
-- On Kw_extern_weak shift to state 122
-- On Kw_common shift to state 123
-- On Kw_available_externally shift to state 124
-- On Kw_appending shift to state 125
-- On opt_linkage shift to state 126
-- On non_external_linkage shift to state 585
-- On function_header shift to state 586
-- On external_linkage shift to state 1034
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc I
--   reduce production non_external_linkage ->

State 113:
## Known stack suffix:
## Kw_weak_odr
## LR(1) items:
non_external_linkage -> Kw_weak_odr . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_weak_odr

State 114:
## Known stack suffix:
## Kw_weak
## LR(1) items:
non_external_linkage -> Kw_weak . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_weak

State 115:
## Known stack suffix:
## Kw_private
## LR(1) items:
non_external_linkage -> Kw_private . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_private

State 116:
## Known stack suffix:
## Kw_linkonce_odr
## LR(1) items:
non_external_linkage -> Kw_linkonce_odr . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_linkonce_odr

State 117:
## Known stack suffix:
## Kw_linkonce
## LR(1) items:
non_external_linkage -> Kw_linkonce . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_linkonce

State 118:
## Known stack suffix:
## Kw_linker_private_weak
## LR(1) items:
non_external_linkage -> Kw_linker_private_weak . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_linker_private_weak

State 119:
## Known stack suffix:
## Kw_linker_private
## LR(1) items:
non_external_linkage -> Kw_linker_private . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_linker_private

State 120:
## Known stack suffix:
## Kw_internal
## LR(1) items:
non_external_linkage -> Kw_internal . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_internal

State 121:
## Known stack suffix:
## Kw_external
## LR(1) items:
external_linkage -> Kw_external . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production external_linkage -> Kw_external

State 122:
## Known stack suffix:
## Kw_extern_weak
## LR(1) items:
external_linkage -> Kw_extern_weak . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production external_linkage -> Kw_extern_weak

State 123:
## Known stack suffix:
## Kw_common
## LR(1) items:
non_external_linkage -> Kw_common . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_common

State 124:
## Known stack suffix:
## Kw_available_externally
## LR(1) items:
non_external_linkage -> Kw_available_externally . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_available_externally

State 125:
## Known stack suffix:
## Kw_appending
## LR(1) items:
non_external_linkage -> Kw_appending . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production non_external_linkage -> Kw_appending

State 126:
## Known stack suffix:
## opt_linkage
## LR(1) items:
function_header -> opt_linkage . opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_protected shift to state 127
-- On Kw_hidden shift to state 128
-- On Kw_default shift to state 129
-- On opt_visibility shift to state 130
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc I
--   reduce production opt_visibility ->

State 127:
## Known stack suffix:
## Kw_protected
## LR(1) items:
opt_visibility -> Kw_protected . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production opt_visibility -> Kw_protected

State 128:
## Known stack suffix:
## Kw_hidden
## LR(1) items:
opt_visibility -> Kw_hidden . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production opt_visibility -> Kw_hidden

State 129:
## Known stack suffix:
## Kw_default
## LR(1) items:
opt_visibility -> Kw_default . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_alias Kw_addrspace I
--   reduce production opt_visibility -> Kw_default

State 130:
## Known stack suffix:
## opt_linkage opt_visibility
## LR(1) items:
function_header -> opt_linkage opt_visibility . opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_dllimport shift to state 131
-- On Kw_dllexport shift to state 132
-- On opt_dll_storageclass shift to state 133
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dereferenceable Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc I
--   reduce production opt_dll_storageclass ->

State 131:
## Known stack suffix:
## Kw_dllimport
## LR(1) items:
opt_dll_storageclass -> Kw_dllimport . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I
--   reduce production opt_dll_storageclass -> Kw_dllimport

State 132:
## Known stack suffix:
## Kw_dllexport
## LR(1) items:
opt_dll_storageclass -> Kw_dllexport . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_unnamed_addr Kw_thread_local Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_half Kw_global Kw_fp128 Kw_float Kw_fastcc Kw_externally_initialized Kw_double Kw_dereferenceable Kw_constant Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I
--   reduce production opt_dll_storageclass -> Kw_dllexport

State 133:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass . opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_x86_thiscallcc shift to state 134
-- On Kw_x86_stdcallcc shift to state 135
-- On Kw_x86_fastcallcc shift to state 136
-- On Kw_x86_cdeclmethodcc shift to state 137
-- On Kw_x86_64_win64cc shift to state 138
-- On Kw_x86_64_sysvcc shift to state 139
-- On Kw_webkit_jscc shift to state 140
-- On Kw_spir_kernel shift to state 141
-- On Kw_spir_func shift to state 142
-- On Kw_ptx_kernel shift to state 143
-- On Kw_ptx_device shift to state 144
-- On Kw_preserve_mostcc shift to state 145
-- On Kw_preserve_allcc shift to state 146
-- On Kw_msp430_intrcc shift to state 147
-- On Kw_intel_ocl_bicc shift to state 148
-- On Kw_fastcc shift to state 149
-- On Kw_coldcc shift to state 150
-- On Kw_ccc shift to state 151
-- On Kw_cc shift to state 152
-- On Kw_arm_apcscc shift to state 153
-- On Kw_arm_aapcscc shift to state 154
-- On Kw_arm_aapcs_vfpcc shift to state 155
-- On Kw_anyregcc shift to state 156
-- On opt_callingconv shift to state 157
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv ->

State 134:
## Known stack suffix:
## Kw_x86_thiscallcc
## LR(1) items:
opt_callingconv -> Kw_x86_thiscallcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_thiscallcc

State 135:
## Known stack suffix:
## Kw_x86_stdcallcc
## LR(1) items:
opt_callingconv -> Kw_x86_stdcallcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_stdcallcc

State 136:
## Known stack suffix:
## Kw_x86_fastcallcc
## LR(1) items:
opt_callingconv -> Kw_x86_fastcallcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_fastcallcc

State 137:
## Known stack suffix:
## Kw_x86_cdeclmethodcc
## LR(1) items:
opt_callingconv -> Kw_x86_cdeclmethodcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_cdeclmethodcc

State 138:
## Known stack suffix:
## Kw_x86_64_win64cc
## LR(1) items:
opt_callingconv -> Kw_x86_64_win64cc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_64_win64cc

State 139:
## Known stack suffix:
## Kw_x86_64_sysvcc
## LR(1) items:
opt_callingconv -> Kw_x86_64_sysvcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_x86_64_sysvcc

State 140:
## Known stack suffix:
## Kw_webkit_jscc
## LR(1) items:
opt_callingconv -> Kw_webkit_jscc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_webkit_jscc

State 141:
## Known stack suffix:
## Kw_spir_kernel
## LR(1) items:
opt_callingconv -> Kw_spir_kernel . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_spir_kernel

State 142:
## Known stack suffix:
## Kw_spir_func
## LR(1) items:
opt_callingconv -> Kw_spir_func . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_spir_func

State 143:
## Known stack suffix:
## Kw_ptx_kernel
## LR(1) items:
opt_callingconv -> Kw_ptx_kernel . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_ptx_kernel

State 144:
## Known stack suffix:
## Kw_ptx_device
## LR(1) items:
opt_callingconv -> Kw_ptx_device . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_ptx_device

State 145:
## Known stack suffix:
## Kw_preserve_mostcc
## LR(1) items:
opt_callingconv -> Kw_preserve_mostcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_preserve_mostcc

State 146:
## Known stack suffix:
## Kw_preserve_allcc
## LR(1) items:
opt_callingconv -> Kw_preserve_allcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_preserve_allcc

State 147:
## Known stack suffix:
## Kw_msp430_intrcc
## LR(1) items:
opt_callingconv -> Kw_msp430_intrcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_msp430_intrcc

State 148:
## Known stack suffix:
## Kw_intel_ocl_bicc
## LR(1) items:
opt_callingconv -> Kw_intel_ocl_bicc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_intel_ocl_bicc

State 149:
## Known stack suffix:
## Kw_fastcc
## LR(1) items:
opt_callingconv -> Kw_fastcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_fastcc

State 150:
## Known stack suffix:
## Kw_coldcc
## LR(1) items:
opt_callingconv -> Kw_coldcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_coldcc

State 151:
## Known stack suffix:
## Kw_ccc
## LR(1) items:
opt_callingconv -> Kw_ccc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_ccc

State 152:
## Known stack suffix:
## Kw_cc
## LR(1) items:
opt_callingconv -> Kw_cc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_cc

State 153:
## Known stack suffix:
## Kw_arm_apcscc
## LR(1) items:
opt_callingconv -> Kw_arm_apcscc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_arm_apcscc

State 154:
## Known stack suffix:
## Kw_arm_aapcscc
## LR(1) items:
opt_callingconv -> Kw_arm_aapcscc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_arm_aapcscc

State 155:
## Known stack suffix:
## Kw_arm_aapcs_vfpcc
## LR(1) items:
opt_callingconv -> Kw_arm_aapcs_vfpcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_arm_aapcs_vfpcc

State 156:
## Known stack suffix:
## Kw_anyregcc
## LR(1) items:
opt_callingconv -> Kw_anyregcc . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv -> Kw_anyregcc

State 157:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv . return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_zeroext shift to state 158
-- On Kw_signext shift to state 159
-- On Kw_nonnull shift to state 160
-- On Kw_noalias shift to state 161
-- On Kw_inreg shift to state 162
-- On Kw_dereferenceable shift to state 163
-- On return_attributes shift to state 167
-- On return_attribute shift to state 583
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production return_attributes ->

State 158:
## Known stack suffix:
## Kw_zeroext
## LR(1) items:
return_attribute -> Kw_zeroext . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_zeroext

State 159:
## Known stack suffix:
## Kw_signext
## LR(1) items:
return_attribute -> Kw_signext . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_signext

State 160:
## Known stack suffix:
## Kw_nonnull
## LR(1) items:
return_attribute -> Kw_nonnull . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_nonnull

State 161:
## Known stack suffix:
## Kw_noalias
## LR(1) items:
return_attribute -> Kw_noalias . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_noalias

State 162:
## Known stack suffix:
## Kw_inreg
## LR(1) items:
return_attribute -> Kw_inreg . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_inreg

State 163:
## Known stack suffix:
## Kw_dereferenceable
## LR(1) items:
return_attribute -> Kw_dereferenceable . Lparen APInt Rparen [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
-- On Lparen shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## Kw_dereferenceable Lparen
## LR(1) items:
return_attribute -> Kw_dereferenceable Lparen . APInt Rparen [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
-- On APInt shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## Kw_dereferenceable Lparen APInt
## LR(1) items:
return_attribute -> Kw_dereferenceable Lparen APInt . Rparen [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
-- On Rparen shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## Kw_dereferenceable Lparen APInt Rparen
## LR(1) items:
return_attribute -> Kw_dereferenceable Lparen APInt Rparen . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production return_attribute -> Kw_dereferenceable Lparen APInt Rparen

State 167:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes . typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 168
-- On non_void_type shift to state 71
## Reductions:

State 168:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ . global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen Kw_addrspace GlobalVar GlobalID ]
non_void_type -> typ . argument_list [ Star Lparen Kw_addrspace GlobalVar GlobalID ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On GlobalVar shift to state 169
-- On GlobalID shift to state 170
-- On opt_addrspace shift to state 68
-- On global_name shift to state 171
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 169:
## Known stack suffix:
## GlobalVar
## LR(1) items:
global_name -> GlobalVar . [ Lparen ]
## Transitions:
## Reductions:
-- On Lparen
--   reduce production global_name -> GlobalVar

State 170:
## Known stack suffix:
## GlobalID
## LR(1) items:
global_name -> GlobalID . [ Lparen ]
## Transitions:
## Reductions:
-- On Lparen
--   reduce production global_name -> GlobalID

State 171:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name . argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lparen shift to state 38
-- On argument_list shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list . opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_unnamed_addr shift to state 173
-- On opt_unnamed_addr shift to state 174
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production opt_unnamed_addr ->

State 173:
## Known stack suffix:
## Kw_unnamed_addr
## LR(1) items:
opt_unnamed_addr -> Kw_unnamed_addr . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_global Kw_gc Kw_externally_initialized Kw_deplibs Kw_define Kw_declare Kw_constant Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_global Kw_gc Kw_externally_initialized Kw_deplibs Kw_define Kw_declare Kw_constant Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production opt_unnamed_addr -> Kw_unnamed_addr

State 174:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr . function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 175
-- On Kw_uwtable shift to state 178
-- On Kw_sspstrong shift to state 179
-- On Kw_sspreq shift to state 180
-- On Kw_ssp shift to state 181
-- On Kw_sanitize_thread shift to state 182
-- On Kw_sanitize_memory shift to state 183
-- On Kw_sanitize_address shift to state 184
-- On Kw_returns_twice shift to state 185
-- On Kw_readonly shift to state 186
-- On Kw_readnone shift to state 187
-- On Kw_optsize shift to state 188
-- On Kw_optnone shift to state 189
-- On Kw_nounwind shift to state 190
-- On Kw_noreturn shift to state 191
-- On Kw_noredzone shift to state 192
-- On Kw_nonlazybind shift to state 193
-- On Kw_noinline shift to state 194
-- On Kw_noimplicitfloat shift to state 195
-- On Kw_noduplicate shift to state 196
-- On Kw_nobuiltin shift to state 197
-- On Kw_naked shift to state 198
-- On Kw_minsize shift to state 199
-- On Kw_jumptable shift to state 200
-- On Kw_inlinehint shift to state 201
-- On Kw_cold shift to state 202
-- On Kw_builtin shift to state 203
-- On Kw_alwaysinline shift to state 204
-- On Kw_alignstack shift to state 205
-- On AttrGrpID shift to state 210
-- On function_attributes shift to state 211
-- On function_attribute shift to state 581
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_section Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production function_attributes ->

State 175:
## Known stack suffix:
## StringConstant
## LR(1) items:
function_attribute -> StringConstant . Equal StringConstant [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On Equal shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## StringConstant Equal
## LR(1) items:
function_attribute -> StringConstant Equal . StringConstant [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On StringConstant shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## StringConstant Equal StringConstant
## LR(1) items:
function_attribute -> StringConstant Equal StringConstant . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> StringConstant Equal StringConstant

State 178:
## Known stack suffix:
## Kw_uwtable
## LR(1) items:
function_attribute -> Kw_uwtable . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_uwtable

State 179:
## Known stack suffix:
## Kw_sspstrong
## LR(1) items:
function_attribute -> Kw_sspstrong . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_sspstrong

State 180:
## Known stack suffix:
## Kw_sspreq
## LR(1) items:
function_attribute -> Kw_sspreq . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_sspreq

State 181:
## Known stack suffix:
## Kw_ssp
## LR(1) items:
function_attribute -> Kw_ssp . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_ssp

State 182:
## Known stack suffix:
## Kw_sanitize_thread
## LR(1) items:
function_attribute -> Kw_sanitize_thread . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_sanitize_thread

State 183:
## Known stack suffix:
## Kw_sanitize_memory
## LR(1) items:
function_attribute -> Kw_sanitize_memory . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_sanitize_memory

State 184:
## Known stack suffix:
## Kw_sanitize_address
## LR(1) items:
function_attribute -> Kw_sanitize_address . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_sanitize_address

State 185:
## Known stack suffix:
## Kw_returns_twice
## LR(1) items:
function_attribute -> Kw_returns_twice . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_returns_twice

State 186:
## Known stack suffix:
## Kw_readonly
## LR(1) items:
function_attribute -> Kw_readonly . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_readonly

State 187:
## Known stack suffix:
## Kw_readnone
## LR(1) items:
function_attribute -> Kw_readnone . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_readnone

State 188:
## Known stack suffix:
## Kw_optsize
## LR(1) items:
function_attribute -> Kw_optsize . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_optsize

State 189:
## Known stack suffix:
## Kw_optnone
## LR(1) items:
function_attribute -> Kw_optnone . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_optnone

State 190:
## Known stack suffix:
## Kw_nounwind
## LR(1) items:
function_attribute -> Kw_nounwind . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_nounwind

State 191:
## Known stack suffix:
## Kw_noreturn
## LR(1) items:
function_attribute -> Kw_noreturn . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_noreturn

State 192:
## Known stack suffix:
## Kw_noredzone
## LR(1) items:
function_attribute -> Kw_noredzone . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_noredzone

State 193:
## Known stack suffix:
## Kw_nonlazybind
## LR(1) items:
function_attribute -> Kw_nonlazybind . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_nonlazybind

State 194:
## Known stack suffix:
## Kw_noinline
## LR(1) items:
function_attribute -> Kw_noinline . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_noinline

State 195:
## Known stack suffix:
## Kw_noimplicitfloat
## LR(1) items:
function_attribute -> Kw_noimplicitfloat . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_noimplicitfloat

State 196:
## Known stack suffix:
## Kw_noduplicate
## LR(1) items:
function_attribute -> Kw_noduplicate . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_noduplicate

State 197:
## Known stack suffix:
## Kw_nobuiltin
## LR(1) items:
function_attribute -> Kw_nobuiltin . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_nobuiltin

State 198:
## Known stack suffix:
## Kw_naked
## LR(1) items:
function_attribute -> Kw_naked . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_naked

State 199:
## Known stack suffix:
## Kw_minsize
## LR(1) items:
function_attribute -> Kw_minsize . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_minsize

State 200:
## Known stack suffix:
## Kw_jumptable
## LR(1) items:
function_attribute -> Kw_jumptable . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_jumptable

State 201:
## Known stack suffix:
## Kw_inlinehint
## LR(1) items:
function_attribute -> Kw_inlinehint . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_inlinehint

State 202:
## Known stack suffix:
## Kw_cold
## LR(1) items:
function_attribute -> Kw_cold . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_cold

State 203:
## Known stack suffix:
## Kw_builtin
## LR(1) items:
function_attribute -> Kw_builtin . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_builtin

State 204:
## Known stack suffix:
## Kw_alwaysinline
## LR(1) items:
function_attribute -> Kw_alwaysinline . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_alwaysinline

State 205:
## Known stack suffix:
## Kw_alignstack
## LR(1) items:
function_attribute -> Kw_alignstack . Equal Lparen APInt Rparen [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On Equal shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## Kw_alignstack Equal
## LR(1) items:
function_attribute -> Kw_alignstack Equal . Lparen APInt Rparen [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On Lparen shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## Kw_alignstack Equal Lparen
## LR(1) items:
function_attribute -> Kw_alignstack Equal Lparen . APInt Rparen [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On APInt shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## Kw_alignstack Equal Lparen APInt
## LR(1) items:
function_attribute -> Kw_alignstack Equal Lparen APInt . Rparen [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
-- On Rparen shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## Kw_alignstack Equal Lparen APInt Rparen
## LR(1) items:
function_attribute -> Kw_alignstack Equal Lparen APInt Rparen . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> Kw_alignstack Equal Lparen APInt Rparen

State 210:
## Known stack suffix:
## AttrGrpID
## LR(1) items:
function_attribute -> AttrGrpID . [ StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID ]
## Transitions:
## Reductions:
-- On StringConstant MetadataVar LocalVarID LocalVar Lbrace Kw_uwtable Kw_to Kw_target Kw_sspstrong Kw_sspreq Kw_ssp Kw_section Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_prefix Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_module Kw_minsize Kw_jumptable Kw_inlinehint Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_cold Kw_builtin Kw_attributes Kw_alwaysinline Kw_alignstack Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar AttrGrpID
--   reduce production function_attribute -> AttrGrpID

State 211:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes . opt_section opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_section shift to state 212
-- On opt_section shift to state 214
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section ->

State 212:
## Known stack suffix:
## Kw_section
## LR(1) items:
opt_section -> Kw_section . StringConstant [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## Kw_section StringConstant
## LR(1) items:
opt_section -> Kw_section StringConstant . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section -> Kw_section StringConstant

State 214:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section . opt_comdat opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_comdat shift to state 215
-- On opt_comdat shift to state 217
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_comdat ->

State 215:
## Known stack suffix:
## Kw_comdat
## LR(1) items:
opt_comdat -> Kw_comdat . ComdatVar [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On ComdatVar shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## Kw_comdat ComdatVar
## LR(1) items:
opt_comdat -> Kw_comdat ComdatVar . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_comdat -> Kw_comdat ComdatVar

State 217:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat . opt_align opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_align shift to state 218
-- On opt_align shift to state 220
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_align ->

State 218:
## Known stack suffix:
## Kw_align
## LR(1) items:
opt_align -> Kw_align . APInt [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On APInt shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## Kw_align APInt
## LR(1) items:
opt_align -> Kw_align APInt . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_align -> Kw_align APInt

State 220:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align . opt_gc opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_gc shift to state 221
-- On opt_gc shift to state 223
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_gc ->

State 221:
## Known stack suffix:
## Kw_gc
## LR(1) items:
opt_gc -> Kw_gc . StringConstant [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## Kw_gc StringConstant
## LR(1) items:
opt_gc -> Kw_gc StringConstant . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_prefix Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_gc -> Kw_gc StringConstant

State 223:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc . opt_prefix [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_prefix shift to state 224
-- On opt_prefix shift to state 580
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_prefix ->

State 224:
## Known stack suffix:
## Kw_prefix
## LR(1) items:
opt_prefix -> Kw_prefix . typ value [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 225
-- On non_void_type shift to state 71
## Reductions:

State 225:
## Known stack suffix:
## Kw_prefix typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
opt_prefix -> Kw_prefix typ . value [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 579
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 226:
## Known stack suffix:
## Lsquare
## LR(1) items:
value -> Lsquare . type_value_list Rsquare [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 227
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rsquare
--   reduce production type_value_list ->

State 227:
## Known stack suffix:
## Lsquare type_value_list
## LR(1) items:
value -> Lsquare type_value_list . Rsquare [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rsquare shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## Lsquare type_value_list Rsquare
## LR(1) items:
value -> Lsquare type_value_list Rsquare . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Lsquare type_value_list Rsquare

State 229:
## Known stack suffix:
## type_value
## LR(1) items:
type_value_list -> type_value . [ Rsquare Rparen Rbrace Greater ]
type_value_list -> type_value . Comma type_value_list [ Rsquare Rparen Rbrace Greater ]
## Transitions:
-- On Comma shift to state 230
## Reductions:
-- On Rsquare Rparen Rbrace Greater
--   reduce production type_value_list -> type_value

State 230:
## Known stack suffix:
## type_value Comma
## LR(1) items:
type_value_list -> type_value Comma . type_value_list [ Rsquare Rparen Rbrace Greater ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 231
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rsquare Rparen Rbrace Greater
--   reduce production type_value_list ->

State 231:
## Known stack suffix:
## type_value Comma type_value_list
## LR(1) items:
type_value_list -> type_value Comma type_value_list . [ Rsquare Rparen Rbrace Greater ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace Greater
--   reduce production type_value_list -> type_value Comma type_value_list

State 232:
## Known stack suffix:
## typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
type_value -> typ . value [ Rsquare Rparen Rbrace MetadataVar Lsquare LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 578
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 233:
## Known stack suffix:
## LocalVarID
## LR(1) items:
value -> LocalVarID . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> LocalVarID

State 234:
## Known stack suffix:
## LocalVar
## LR(1) items:
value -> LocalVar . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> LocalVar

State 235:
## Known stack suffix:
## Less
## LR(1) items:
value -> Less . Lbrace Rbrace Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
value -> Less . Lbrace type_value_LIST Rbrace Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
value -> Less . type_value_list Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 236
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 558
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Greater
--   reduce production type_value_list ->

State 236:
## Known stack suffix:
## Less Lbrace
## LR(1) items:
non_void_type -> Lbrace . Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Lbrace . type_list Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less Lbrace . Rbrace Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
value -> Less Lbrace . type_value_LIST Rbrace Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rbrace shift to state 237
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST shift to state 239
-- On type_value shift to state 242
-- On type_list shift to state 35
-- On typ shift to state 245
-- On non_void_type shift to state 71
## Reductions:

State 237:
## Known stack suffix:
## Less Lbrace Rbrace
## LR(1) items:
non_void_type -> Lbrace Rbrace . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less Lbrace Rbrace . Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Greater shift to state 238
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> Lbrace Rbrace

State 238:
## Known stack suffix:
## Less Lbrace Rbrace Greater
## LR(1) items:
value -> Less Lbrace Rbrace Greater . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Less Lbrace Rbrace Greater

State 239:
## Known stack suffix:
## Less Lbrace type_value_LIST
## LR(1) items:
value -> Less Lbrace type_value_LIST . Rbrace Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rbrace shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## Less Lbrace type_value_LIST Rbrace
## LR(1) items:
value -> Less Lbrace type_value_LIST Rbrace . Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Greater shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## Less Lbrace type_value_LIST Rbrace Greater
## LR(1) items:
value -> Less Lbrace type_value_LIST Rbrace Greater . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Less Lbrace type_value_LIST Rbrace Greater

State 242:
## Known stack suffix:
## type_value
## LR(1) items:
type_value_LIST -> type_value . [ Rsquare Rbrace ]
type_value_LIST -> type_value . Comma type_value_LIST [ Rsquare Rbrace ]
## Transitions:
-- On Comma shift to state 243
## Reductions:
-- On Rsquare Rbrace
--   reduce production type_value_LIST -> type_value

State 243:
## Known stack suffix:
## type_value Comma
## LR(1) items:
type_value_LIST -> type_value Comma . type_value_LIST [ Rsquare Rbrace ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST shift to state 244
-- On type_value shift to state 242
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 244:
## Known stack suffix:
## type_value Comma type_value_LIST
## LR(1) items:
type_value_LIST -> type_value Comma type_value_LIST . [ Rsquare Rbrace ]
## Transitions:
## Reductions:
-- On Rsquare Rbrace
--   reduce production type_value_LIST -> type_value Comma type_value_LIST

State 245:
## Known stack suffix:
## typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rbrace Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
non_void_type -> typ . argument_list [ Star Rbrace Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim Comma APInt APFloat ]
type_list -> typ . [ Rbrace ]
type_list -> typ . Comma type_list [ Rbrace ]
type_value -> typ . value [ Rbrace Comma ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On Comma shift to state 77
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 578
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On Rbrace
--   reduce production type_list -> typ

State 246:
## Known stack suffix:
## Lbrace
## LR(1) items:
value -> Lbrace . type_value_list Rbrace [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 247
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rbrace
--   reduce production type_value_list ->

State 247:
## Known stack suffix:
## Lbrace type_value_list
## LR(1) items:
value -> Lbrace type_value_list . Rbrace [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rbrace shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## Lbrace type_value_list Rbrace
## LR(1) items:
value -> Lbrace type_value_list Rbrace . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Lbrace type_value_list Rbrace

State 249:
## Known stack suffix:
## Kw_zext
## LR(1) items:
value -> Kw_zext . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## Kw_zext Lparen
## LR(1) items:
value -> Kw_zext Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 251
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 251:
## Known stack suffix:
## Kw_zext Lparen type_value
## LR(1) items:
value -> Kw_zext Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## Kw_zext Lparen type_value Kw_to
## LR(1) items:
value -> Kw_zext Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 253
-- On non_void_type shift to state 71
## Reductions:

State 253:
## Known stack suffix:
## Kw_zext Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_zext Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 254
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 254:
## Known stack suffix:
## Kw_zext Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_zext Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_zext Lparen type_value Kw_to typ Rparen

State 255:
## Known stack suffix:
## Kw_zeroinitializer
## LR(1) items:
value -> Kw_zeroinitializer . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_zeroinitializer

State 256:
## Known stack suffix:
## Kw_xor
## LR(1) items:
value -> Kw_xor . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## Kw_xor Lparen
## LR(1) items:
value -> Kw_xor Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 258
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 258:
## Known stack suffix:
## Kw_xor Lparen type_value
## LR(1) items:
value -> Kw_xor Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 259
## Reductions:

State 259:
## Known stack suffix:
## Kw_xor Lparen type_value Comma
## LR(1) items:
value -> Kw_xor Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 260
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 260:
## Known stack suffix:
## Kw_xor Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_xor Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## Kw_xor Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_xor Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_xor Lparen type_value Comma type_value Rparen

State 262:
## Known stack suffix:
## Kw_urem
## LR(1) items:
value -> Kw_urem . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## Kw_urem Lparen
## LR(1) items:
value -> Kw_urem Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 264
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 264:
## Known stack suffix:
## Kw_urem Lparen type_value
## LR(1) items:
value -> Kw_urem Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## Kw_urem Lparen type_value Comma
## LR(1) items:
value -> Kw_urem Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 266
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 266:
## Known stack suffix:
## Kw_urem Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_urem Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## Kw_urem Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_urem Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_urem Lparen type_value Comma type_value Rparen

State 268:
## Known stack suffix:
## Kw_undef
## LR(1) items:
value -> Kw_undef . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_undef

State 269:
## Known stack suffix:
## Kw_uitofp
## LR(1) items:
value -> Kw_uitofp . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## Kw_uitofp Lparen
## LR(1) items:
value -> Kw_uitofp Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 271
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 271:
## Known stack suffix:
## Kw_uitofp Lparen type_value
## LR(1) items:
value -> Kw_uitofp Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## Kw_uitofp Lparen type_value Kw_to
## LR(1) items:
value -> Kw_uitofp Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 273
-- On non_void_type shift to state 71
## Reductions:

State 273:
## Known stack suffix:
## Kw_uitofp Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_uitofp Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 274
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 274:
## Known stack suffix:
## Kw_uitofp Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_uitofp Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_uitofp Lparen type_value Kw_to typ Rparen

State 275:
## Known stack suffix:
## Kw_udiv
## LR(1) items:
value -> Kw_udiv . opt_exact Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 277
## Reductions:
-- On Lparen
--   reduce production opt_exact ->

State 276:
## Known stack suffix:
## Kw_exact
## LR(1) items:
opt_exact -> Kw_exact . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_exact -> Kw_exact

State 277:
## Known stack suffix:
## Kw_udiv opt_exact
## LR(1) items:
value -> Kw_udiv opt_exact . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## Kw_udiv opt_exact Lparen
## LR(1) items:
value -> Kw_udiv opt_exact Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 279
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 279:
## Known stack suffix:
## Kw_udiv opt_exact Lparen type_value
## LR(1) items:
value -> Kw_udiv opt_exact Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## Kw_udiv opt_exact Lparen type_value Comma
## LR(1) items:
value -> Kw_udiv opt_exact Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 281
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 281:
## Known stack suffix:
## Kw_udiv opt_exact Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_udiv opt_exact Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## Kw_udiv opt_exact Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_udiv opt_exact Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_udiv opt_exact Lparen type_value Comma type_value Rparen

State 283:
## Known stack suffix:
## Kw_trunc
## LR(1) items:
value -> Kw_trunc . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## Kw_trunc Lparen
## LR(1) items:
value -> Kw_trunc Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 285
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 285:
## Known stack suffix:
## Kw_trunc Lparen type_value
## LR(1) items:
value -> Kw_trunc Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## Kw_trunc Lparen type_value Kw_to
## LR(1) items:
value -> Kw_trunc Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 287
-- On non_void_type shift to state 71
## Reductions:

State 287:
## Known stack suffix:
## Kw_trunc Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_trunc Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 288
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 288:
## Known stack suffix:
## Kw_trunc Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_trunc Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_trunc Lparen type_value Kw_to typ Rparen

State 289:
## Known stack suffix:
## Kw_true
## LR(1) items:
value -> Kw_true . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_true

State 290:
## Known stack suffix:
## Kw_sub
## LR(1) items:
value -> Kw_sub . opt_nuw_nsw Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 295
## Reductions:
-- On Lparen
--   reduce production opt_nuw_nsw ->

State 291:
## Known stack suffix:
## Kw_nuw
## LR(1) items:
opt_nuw_nsw -> Kw_nuw . Kw_nsw [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
opt_nuw_nsw -> Kw_nuw . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
-- On Kw_nsw shift to state 292
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw -> Kw_nuw

State 292:
## Known stack suffix:
## Kw_nuw Kw_nsw
## LR(1) items:
opt_nuw_nsw -> Kw_nuw Kw_nsw . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw -> Kw_nuw Kw_nsw

State 293:
## Known stack suffix:
## Kw_nsw
## LR(1) items:
opt_nuw_nsw -> Kw_nsw . Kw_nuw [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
opt_nuw_nsw -> Kw_nsw . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
-- On Kw_nuw shift to state 294
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw -> Kw_nsw

State 294:
## Known stack suffix:
## Kw_nsw Kw_nuw
## LR(1) items:
opt_nuw_nsw -> Kw_nsw Kw_nuw . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw -> Kw_nsw Kw_nuw

State 295:
## Known stack suffix:
## Kw_sub opt_nuw_nsw
## LR(1) items:
value -> Kw_sub opt_nuw_nsw . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## Kw_sub opt_nuw_nsw Lparen
## LR(1) items:
value -> Kw_sub opt_nuw_nsw Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 297
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 297:
## Known stack suffix:
## Kw_sub opt_nuw_nsw Lparen type_value
## LR(1) items:
value -> Kw_sub opt_nuw_nsw Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## Kw_sub opt_nuw_nsw Lparen type_value Comma
## LR(1) items:
value -> Kw_sub opt_nuw_nsw Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 299
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 299:
## Known stack suffix:
## Kw_sub opt_nuw_nsw Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_sub opt_nuw_nsw Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## Kw_sub opt_nuw_nsw Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_sub opt_nuw_nsw Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_sub opt_nuw_nsw Lparen type_value Comma type_value Rparen

State 301:
## Known stack suffix:
## Kw_srem
## LR(1) items:
value -> Kw_srem . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## Kw_srem Lparen
## LR(1) items:
value -> Kw_srem Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 303
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 303:
## Known stack suffix:
## Kw_srem Lparen type_value
## LR(1) items:
value -> Kw_srem Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## Kw_srem Lparen type_value Comma
## LR(1) items:
value -> Kw_srem Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 305
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 305:
## Known stack suffix:
## Kw_srem Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_srem Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## Kw_srem Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_srem Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_srem Lparen type_value Comma type_value Rparen

State 307:
## Known stack suffix:
## Kw_sitofp
## LR(1) items:
value -> Kw_sitofp . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## Kw_sitofp Lparen
## LR(1) items:
value -> Kw_sitofp Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 309
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 309:
## Known stack suffix:
## Kw_sitofp Lparen type_value
## LR(1) items:
value -> Kw_sitofp Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## Kw_sitofp Lparen type_value Kw_to
## LR(1) items:
value -> Kw_sitofp Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 311
-- On non_void_type shift to state 71
## Reductions:

State 311:
## Known stack suffix:
## Kw_sitofp Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_sitofp Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 312
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 312:
## Known stack suffix:
## Kw_sitofp Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_sitofp Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_sitofp Lparen type_value Kw_to typ Rparen

State 313:
## Known stack suffix:
## Kw_shufflevector
## LR(1) items:
value -> Kw_shufflevector . Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## Kw_shufflevector Lparen
## LR(1) items:
value -> Kw_shufflevector Lparen . type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 315
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production type_value_list ->

State 315:
## Known stack suffix:
## Kw_shufflevector Lparen type_value_list
## LR(1) items:
value -> Kw_shufflevector Lparen type_value_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## Kw_shufflevector Lparen type_value_list Rparen
## LR(1) items:
value -> Kw_shufflevector Lparen type_value_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_shufflevector Lparen type_value_list Rparen

State 317:
## Known stack suffix:
## Kw_shl
## LR(1) items:
value -> Kw_shl . opt_nuw_nsw Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 318
## Reductions:
-- On Lparen
--   reduce production opt_nuw_nsw ->

State 318:
## Known stack suffix:
## Kw_shl opt_nuw_nsw
## LR(1) items:
value -> Kw_shl opt_nuw_nsw . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## Kw_shl opt_nuw_nsw Lparen
## LR(1) items:
value -> Kw_shl opt_nuw_nsw Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 320
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 320:
## Known stack suffix:
## Kw_shl opt_nuw_nsw Lparen type_value
## LR(1) items:
value -> Kw_shl opt_nuw_nsw Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## Kw_shl opt_nuw_nsw Lparen type_value Comma
## LR(1) items:
value -> Kw_shl opt_nuw_nsw Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 322
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 322:
## Known stack suffix:
## Kw_shl opt_nuw_nsw Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_shl opt_nuw_nsw Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## Kw_shl opt_nuw_nsw Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_shl opt_nuw_nsw Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_shl opt_nuw_nsw Lparen type_value Comma type_value Rparen

State 324:
## Known stack suffix:
## Kw_sext
## LR(1) items:
value -> Kw_sext . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## Kw_sext Lparen
## LR(1) items:
value -> Kw_sext Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 326
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 326:
## Known stack suffix:
## Kw_sext Lparen type_value
## LR(1) items:
value -> Kw_sext Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## Kw_sext Lparen type_value Kw_to
## LR(1) items:
value -> Kw_sext Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 328
-- On non_void_type shift to state 71
## Reductions:

State 328:
## Known stack suffix:
## Kw_sext Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_sext Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 329
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 329:
## Known stack suffix:
## Kw_sext Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_sext Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_sext Lparen type_value Kw_to typ Rparen

State 330:
## Known stack suffix:
## Kw_select
## LR(1) items:
value -> Kw_select . Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## Kw_select Lparen
## LR(1) items:
value -> Kw_select Lparen . type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 332
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production type_value_list ->

State 332:
## Known stack suffix:
## Kw_select Lparen type_value_list
## LR(1) items:
value -> Kw_select Lparen type_value_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## Kw_select Lparen type_value_list Rparen
## LR(1) items:
value -> Kw_select Lparen type_value_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_select Lparen type_value_list Rparen

State 334:
## Known stack suffix:
## Kw_sdiv
## LR(1) items:
value -> Kw_sdiv . opt_exact Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 335
## Reductions:
-- On Lparen
--   reduce production opt_exact ->

State 335:
## Known stack suffix:
## Kw_sdiv opt_exact
## LR(1) items:
value -> Kw_sdiv opt_exact . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## Kw_sdiv opt_exact Lparen
## LR(1) items:
value -> Kw_sdiv opt_exact Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 337
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 337:
## Known stack suffix:
## Kw_sdiv opt_exact Lparen type_value
## LR(1) items:
value -> Kw_sdiv opt_exact Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## Kw_sdiv opt_exact Lparen type_value Comma
## LR(1) items:
value -> Kw_sdiv opt_exact Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 339
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 339:
## Known stack suffix:
## Kw_sdiv opt_exact Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_sdiv opt_exact Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## Kw_sdiv opt_exact Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_sdiv opt_exact Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_sdiv opt_exact Lparen type_value Comma type_value Rparen

State 341:
## Known stack suffix:
## Kw_ptrtoint
## LR(1) items:
value -> Kw_ptrtoint . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## Kw_ptrtoint Lparen
## LR(1) items:
value -> Kw_ptrtoint Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 343
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 343:
## Known stack suffix:
## Kw_ptrtoint Lparen type_value
## LR(1) items:
value -> Kw_ptrtoint Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## Kw_ptrtoint Lparen type_value Kw_to
## LR(1) items:
value -> Kw_ptrtoint Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 345
-- On non_void_type shift to state 71
## Reductions:

State 345:
## Known stack suffix:
## Kw_ptrtoint Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_ptrtoint Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 346
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 346:
## Known stack suffix:
## Kw_ptrtoint Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_ptrtoint Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_ptrtoint Lparen type_value Kw_to typ Rparen

State 347:
## Known stack suffix:
## Kw_or
## LR(1) items:
value -> Kw_or . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## Kw_or Lparen
## LR(1) items:
value -> Kw_or Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 349
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 349:
## Known stack suffix:
## Kw_or Lparen type_value
## LR(1) items:
value -> Kw_or Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## Kw_or Lparen type_value Comma
## LR(1) items:
value -> Kw_or Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 351
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 351:
## Known stack suffix:
## Kw_or Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_or Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## Kw_or Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_or Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_or Lparen type_value Comma type_value Rparen

State 353:
## Known stack suffix:
## Kw_null
## LR(1) items:
value -> Kw_null . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_null

State 354:
## Known stack suffix:
## Kw_mul
## LR(1) items:
value -> Kw_mul . opt_nuw_nsw Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 355
## Reductions:
-- On Lparen
--   reduce production opt_nuw_nsw ->

State 355:
## Known stack suffix:
## Kw_mul opt_nuw_nsw
## LR(1) items:
value -> Kw_mul opt_nuw_nsw . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 356
## Reductions:

State 356:
## Known stack suffix:
## Kw_mul opt_nuw_nsw Lparen
## LR(1) items:
value -> Kw_mul opt_nuw_nsw Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 357
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 357:
## Known stack suffix:
## Kw_mul opt_nuw_nsw Lparen type_value
## LR(1) items:
value -> Kw_mul opt_nuw_nsw Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## Kw_mul opt_nuw_nsw Lparen type_value Comma
## LR(1) items:
value -> Kw_mul opt_nuw_nsw Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 359
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 359:
## Known stack suffix:
## Kw_mul opt_nuw_nsw Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_mul opt_nuw_nsw Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## Kw_mul opt_nuw_nsw Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_mul opt_nuw_nsw Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_mul opt_nuw_nsw Lparen type_value Comma type_value Rparen

State 361:
## Known stack suffix:
## Kw_lshr
## LR(1) items:
value -> Kw_lshr . opt_exact Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 362
## Reductions:
-- On Lparen
--   reduce production opt_exact ->

State 362:
## Known stack suffix:
## Kw_lshr opt_exact
## LR(1) items:
value -> Kw_lshr opt_exact . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## Kw_lshr opt_exact Lparen
## LR(1) items:
value -> Kw_lshr opt_exact Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 364
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 364:
## Known stack suffix:
## Kw_lshr opt_exact Lparen type_value
## LR(1) items:
value -> Kw_lshr opt_exact Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## Kw_lshr opt_exact Lparen type_value Comma
## LR(1) items:
value -> Kw_lshr opt_exact Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 366
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 366:
## Known stack suffix:
## Kw_lshr opt_exact Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_lshr opt_exact Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## Kw_lshr opt_exact Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_lshr opt_exact Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_lshr opt_exact Lparen type_value Comma type_value Rparen

State 368:
## Known stack suffix:
## Kw_inttoptr
## LR(1) items:
value -> Kw_inttoptr . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## Kw_inttoptr Lparen
## LR(1) items:
value -> Kw_inttoptr Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 370
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 370:
## Known stack suffix:
## Kw_inttoptr Lparen type_value
## LR(1) items:
value -> Kw_inttoptr Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## Kw_inttoptr Lparen type_value Kw_to
## LR(1) items:
value -> Kw_inttoptr Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 372
-- On non_void_type shift to state 71
## Reductions:

State 372:
## Known stack suffix:
## Kw_inttoptr Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_inttoptr Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 373
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 373:
## Known stack suffix:
## Kw_inttoptr Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_inttoptr Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_inttoptr Lparen type_value Kw_to typ Rparen

State 374:
## Known stack suffix:
## Kw_insertvalue
## LR(1) items:
value -> Kw_insertvalue . Lparen type_value Comma type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## Kw_insertvalue Lparen
## LR(1) items:
value -> Kw_insertvalue Lparen . type_value Comma type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 376
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 376:
## Known stack suffix:
## Kw_insertvalue Lparen type_value
## LR(1) items:
value -> Kw_insertvalue Lparen type_value . Comma type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## Kw_insertvalue Lparen type_value Comma
## LR(1) items:
value -> Kw_insertvalue Lparen type_value Comma . type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 378
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 378:
## Known stack suffix:
## Kw_insertvalue Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_insertvalue Lparen type_value Comma type_value . index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 379
-- On index_list shift to state 382
## Reductions:

State 379:
## Known stack suffix:
## Comma
## LR(1) items:
index_list -> Comma . APInt [ Rparen ]
index_list -> Comma . APInt index_list [ Rparen ]
## Transitions:
-- On APInt shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## Comma APInt
## LR(1) items:
index_list -> Comma APInt . [ Rparen ]
index_list -> Comma APInt . index_list [ Rparen ]
## Transitions:
-- On Comma shift to state 379
-- On index_list shift to state 381
## Reductions:
-- On Rparen
--   reduce production index_list -> Comma APInt

State 381:
## Known stack suffix:
## Comma APInt index_list
## LR(1) items:
index_list -> Comma APInt index_list . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production index_list -> Comma APInt index_list

State 382:
## Known stack suffix:
## Kw_insertvalue Lparen type_value Comma type_value index_list
## LR(1) items:
value -> Kw_insertvalue Lparen type_value Comma type_value index_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## Kw_insertvalue Lparen type_value Comma type_value index_list Rparen
## LR(1) items:
value -> Kw_insertvalue Lparen type_value Comma type_value index_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_insertvalue Lparen type_value Comma type_value index_list Rparen

State 384:
## Known stack suffix:
## Kw_insertelement
## LR(1) items:
value -> Kw_insertelement . Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## Kw_insertelement Lparen
## LR(1) items:
value -> Kw_insertelement Lparen . type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 386
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production type_value_list ->

State 386:
## Known stack suffix:
## Kw_insertelement Lparen type_value_list
## LR(1) items:
value -> Kw_insertelement Lparen type_value_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## Kw_insertelement Lparen type_value_list Rparen
## LR(1) items:
value -> Kw_insertelement Lparen type_value_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_insertelement Lparen type_value_list Rparen

State 388:
## Known stack suffix:
## Kw_icmp
## LR(1) items:
value -> Kw_icmp . icmp_predicate Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_ult shift to state 389
-- On Kw_ule shift to state 390
-- On Kw_ugt shift to state 391
-- On Kw_uge shift to state 392
-- On Kw_slt shift to state 393
-- On Kw_sle shift to state 394
-- On Kw_sgt shift to state 395
-- On Kw_sge shift to state 396
-- On Kw_ne shift to state 397
-- On Kw_eq shift to state 398
-- On icmp_predicate shift to state 399
## Reductions:

State 389:
## Known stack suffix:
## Kw_ult
## LR(1) items:
icmp_predicate -> Kw_ult . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_ult

State 390:
## Known stack suffix:
## Kw_ule
## LR(1) items:
icmp_predicate -> Kw_ule . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_ule

State 391:
## Known stack suffix:
## Kw_ugt
## LR(1) items:
icmp_predicate -> Kw_ugt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_ugt

State 392:
## Known stack suffix:
## Kw_uge
## LR(1) items:
icmp_predicate -> Kw_uge . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_uge

State 393:
## Known stack suffix:
## Kw_slt
## LR(1) items:
icmp_predicate -> Kw_slt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_slt

State 394:
## Known stack suffix:
## Kw_sle
## LR(1) items:
icmp_predicate -> Kw_sle . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_sle

State 395:
## Known stack suffix:
## Kw_sgt
## LR(1) items:
icmp_predicate -> Kw_sgt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_sgt

State 396:
## Known stack suffix:
## Kw_sge
## LR(1) items:
icmp_predicate -> Kw_sge . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_sge

State 397:
## Known stack suffix:
## Kw_ne
## LR(1) items:
icmp_predicate -> Kw_ne . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_ne

State 398:
## Known stack suffix:
## Kw_eq
## LR(1) items:
icmp_predicate -> Kw_eq . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production icmp_predicate -> Kw_eq

State 399:
## Known stack suffix:
## Kw_icmp icmp_predicate
## LR(1) items:
value -> Kw_icmp icmp_predicate . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## Kw_icmp icmp_predicate Lparen
## LR(1) items:
value -> Kw_icmp icmp_predicate Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 401
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 401:
## Known stack suffix:
## Kw_icmp icmp_predicate Lparen type_value
## LR(1) items:
value -> Kw_icmp icmp_predicate Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## Kw_icmp icmp_predicate Lparen type_value Comma
## LR(1) items:
value -> Kw_icmp icmp_predicate Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 403
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 403:
## Known stack suffix:
## Kw_icmp icmp_predicate Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_icmp icmp_predicate Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## Kw_icmp icmp_predicate Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_icmp icmp_predicate Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_icmp icmp_predicate Lparen type_value Comma type_value Rparen

State 405:
## Known stack suffix:
## Kw_getelementptr
## LR(1) items:
value -> Kw_getelementptr . opt_inbounds Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_inbounds shift to state 406
-- On opt_inbounds shift to state 407
## Reductions:
-- On Lparen
--   reduce production opt_inbounds ->

State 406:
## Known stack suffix:
## Kw_inbounds
## LR(1) items:
opt_inbounds -> Kw_inbounds . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_inbounds -> Kw_inbounds

State 407:
## Known stack suffix:
## Kw_getelementptr opt_inbounds
## LR(1) items:
value -> Kw_getelementptr opt_inbounds . Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## Kw_getelementptr opt_inbounds Lparen
## LR(1) items:
value -> Kw_getelementptr opt_inbounds Lparen . type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 409
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production type_value_list ->

State 409:
## Known stack suffix:
## Kw_getelementptr opt_inbounds Lparen type_value_list
## LR(1) items:
value -> Kw_getelementptr opt_inbounds Lparen type_value_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## Kw_getelementptr opt_inbounds Lparen type_value_list Rparen
## LR(1) items:
value -> Kw_getelementptr opt_inbounds Lparen type_value_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_getelementptr opt_inbounds Lparen type_value_list Rparen

State 411:
## Known stack suffix:
## Kw_fsub
## LR(1) items:
value -> Kw_fsub . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## Kw_fsub Lparen
## LR(1) items:
value -> Kw_fsub Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 413
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 413:
## Known stack suffix:
## Kw_fsub Lparen type_value
## LR(1) items:
value -> Kw_fsub Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## Kw_fsub Lparen type_value Comma
## LR(1) items:
value -> Kw_fsub Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 415
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 415:
## Known stack suffix:
## Kw_fsub Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_fsub Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## Kw_fsub Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_fsub Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fsub Lparen type_value Comma type_value Rparen

State 417:
## Known stack suffix:
## Kw_frem
## LR(1) items:
value -> Kw_frem . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## Kw_frem Lparen
## LR(1) items:
value -> Kw_frem Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 419
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 419:
## Known stack suffix:
## Kw_frem Lparen type_value
## LR(1) items:
value -> Kw_frem Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## Kw_frem Lparen type_value Comma
## LR(1) items:
value -> Kw_frem Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 421
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 421:
## Known stack suffix:
## Kw_frem Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_frem Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## Kw_frem Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_frem Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_frem Lparen type_value Comma type_value Rparen

State 423:
## Known stack suffix:
## Kw_fptrunc
## LR(1) items:
value -> Kw_fptrunc . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## Kw_fptrunc Lparen
## LR(1) items:
value -> Kw_fptrunc Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 425
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 425:
## Known stack suffix:
## Kw_fptrunc Lparen type_value
## LR(1) items:
value -> Kw_fptrunc Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## Kw_fptrunc Lparen type_value Kw_to
## LR(1) items:
value -> Kw_fptrunc Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 427
-- On non_void_type shift to state 71
## Reductions:

State 427:
## Known stack suffix:
## Kw_fptrunc Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_fptrunc Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 428
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 428:
## Known stack suffix:
## Kw_fptrunc Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_fptrunc Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fptrunc Lparen type_value Kw_to typ Rparen

State 429:
## Known stack suffix:
## Kw_fptoui
## LR(1) items:
value -> Kw_fptoui . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## Kw_fptoui Lparen
## LR(1) items:
value -> Kw_fptoui Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 431
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 431:
## Known stack suffix:
## Kw_fptoui Lparen type_value
## LR(1) items:
value -> Kw_fptoui Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## Kw_fptoui Lparen type_value Kw_to
## LR(1) items:
value -> Kw_fptoui Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 433
-- On non_void_type shift to state 71
## Reductions:

State 433:
## Known stack suffix:
## Kw_fptoui Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_fptoui Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 434
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 434:
## Known stack suffix:
## Kw_fptoui Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_fptoui Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fptoui Lparen type_value Kw_to typ Rparen

State 435:
## Known stack suffix:
## Kw_fptosi
## LR(1) items:
value -> Kw_fptosi . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## Kw_fptosi Lparen
## LR(1) items:
value -> Kw_fptosi Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 437
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 437:
## Known stack suffix:
## Kw_fptosi Lparen type_value
## LR(1) items:
value -> Kw_fptosi Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## Kw_fptosi Lparen type_value Kw_to
## LR(1) items:
value -> Kw_fptosi Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 439
-- On non_void_type shift to state 71
## Reductions:

State 439:
## Known stack suffix:
## Kw_fptosi Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_fptosi Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 440
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 440:
## Known stack suffix:
## Kw_fptosi Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_fptosi Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fptosi Lparen type_value Kw_to typ Rparen

State 441:
## Known stack suffix:
## Kw_fpext
## LR(1) items:
value -> Kw_fpext . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 442
## Reductions:

State 442:
## Known stack suffix:
## Kw_fpext Lparen
## LR(1) items:
value -> Kw_fpext Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 443
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 443:
## Known stack suffix:
## Kw_fpext Lparen type_value
## LR(1) items:
value -> Kw_fpext Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## Kw_fpext Lparen type_value Kw_to
## LR(1) items:
value -> Kw_fpext Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 445
-- On non_void_type shift to state 71
## Reductions:

State 445:
## Known stack suffix:
## Kw_fpext Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_fpext Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 446
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 446:
## Known stack suffix:
## Kw_fpext Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_fpext Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fpext Lparen type_value Kw_to typ Rparen

State 447:
## Known stack suffix:
## Kw_fmul
## LR(1) items:
value -> Kw_fmul . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 448
## Reductions:

State 448:
## Known stack suffix:
## Kw_fmul Lparen
## LR(1) items:
value -> Kw_fmul Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 449
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 449:
## Known stack suffix:
## Kw_fmul Lparen type_value
## LR(1) items:
value -> Kw_fmul Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 450
## Reductions:

State 450:
## Known stack suffix:
## Kw_fmul Lparen type_value Comma
## LR(1) items:
value -> Kw_fmul Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 451
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 451:
## Known stack suffix:
## Kw_fmul Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_fmul Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 452
## Reductions:

State 452:
## Known stack suffix:
## Kw_fmul Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_fmul Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fmul Lparen type_value Comma type_value Rparen

State 453:
## Known stack suffix:
## Kw_fdiv
## LR(1) items:
value -> Kw_fdiv . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## Kw_fdiv Lparen
## LR(1) items:
value -> Kw_fdiv Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 455
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 455:
## Known stack suffix:
## Kw_fdiv Lparen type_value
## LR(1) items:
value -> Kw_fdiv Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## Kw_fdiv Lparen type_value Comma
## LR(1) items:
value -> Kw_fdiv Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 457
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 457:
## Known stack suffix:
## Kw_fdiv Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_fdiv Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## Kw_fdiv Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_fdiv Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fdiv Lparen type_value Comma type_value Rparen

State 459:
## Known stack suffix:
## Kw_fcmp
## LR(1) items:
value -> Kw_fcmp . fcmp_predicate Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_uno shift to state 460
-- On Kw_une shift to state 461
-- On Kw_ult shift to state 462
-- On Kw_ule shift to state 463
-- On Kw_ugt shift to state 464
-- On Kw_uge shift to state 465
-- On Kw_ueq shift to state 466
-- On Kw_true shift to state 467
-- On Kw_ord shift to state 468
-- On Kw_one shift to state 469
-- On Kw_olt shift to state 470
-- On Kw_ole shift to state 471
-- On Kw_ogt shift to state 472
-- On Kw_oge shift to state 473
-- On Kw_oeq shift to state 474
-- On Kw_false shift to state 475
-- On fcmp_predicate shift to state 476
## Reductions:

State 460:
## Known stack suffix:
## Kw_uno
## LR(1) items:
fcmp_predicate -> Kw_uno . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_uno

State 461:
## Known stack suffix:
## Kw_une
## LR(1) items:
fcmp_predicate -> Kw_une . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_une

State 462:
## Known stack suffix:
## Kw_ult
## LR(1) items:
fcmp_predicate -> Kw_ult . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ult

State 463:
## Known stack suffix:
## Kw_ule
## LR(1) items:
fcmp_predicate -> Kw_ule . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ule

State 464:
## Known stack suffix:
## Kw_ugt
## LR(1) items:
fcmp_predicate -> Kw_ugt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ugt

State 465:
## Known stack suffix:
## Kw_uge
## LR(1) items:
fcmp_predicate -> Kw_uge . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_uge

State 466:
## Known stack suffix:
## Kw_ueq
## LR(1) items:
fcmp_predicate -> Kw_ueq . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ueq

State 467:
## Known stack suffix:
## Kw_true
## LR(1) items:
fcmp_predicate -> Kw_true . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_true

State 468:
## Known stack suffix:
## Kw_ord
## LR(1) items:
fcmp_predicate -> Kw_ord . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ord

State 469:
## Known stack suffix:
## Kw_one
## LR(1) items:
fcmp_predicate -> Kw_one . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_one

State 470:
## Known stack suffix:
## Kw_olt
## LR(1) items:
fcmp_predicate -> Kw_olt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_olt

State 471:
## Known stack suffix:
## Kw_ole
## LR(1) items:
fcmp_predicate -> Kw_ole . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ole

State 472:
## Known stack suffix:
## Kw_ogt
## LR(1) items:
fcmp_predicate -> Kw_ogt . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_ogt

State 473:
## Known stack suffix:
## Kw_oge
## LR(1) items:
fcmp_predicate -> Kw_oge . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_oge

State 474:
## Known stack suffix:
## Kw_oeq
## LR(1) items:
fcmp_predicate -> Kw_oeq . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_oeq

State 475:
## Known stack suffix:
## Kw_false
## LR(1) items:
fcmp_predicate -> Kw_false . [ Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fcmp_predicate -> Kw_false

State 476:
## Known stack suffix:
## Kw_fcmp fcmp_predicate
## LR(1) items:
value -> Kw_fcmp fcmp_predicate . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## Kw_fcmp fcmp_predicate Lparen
## LR(1) items:
value -> Kw_fcmp fcmp_predicate Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 478
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 478:
## Known stack suffix:
## Kw_fcmp fcmp_predicate Lparen type_value
## LR(1) items:
value -> Kw_fcmp fcmp_predicate Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## Kw_fcmp fcmp_predicate Lparen type_value Comma
## LR(1) items:
value -> Kw_fcmp fcmp_predicate Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 480
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 480:
## Known stack suffix:
## Kw_fcmp fcmp_predicate Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_fcmp fcmp_predicate Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 481
## Reductions:

State 481:
## Known stack suffix:
## Kw_fcmp fcmp_predicate Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_fcmp fcmp_predicate Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fcmp fcmp_predicate Lparen type_value Comma type_value Rparen

State 482:
## Known stack suffix:
## Kw_false
## LR(1) items:
value -> Kw_false . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_false

State 483:
## Known stack suffix:
## Kw_fadd
## LR(1) items:
value -> Kw_fadd . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## Kw_fadd Lparen
## LR(1) items:
value -> Kw_fadd Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 485
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 485:
## Known stack suffix:
## Kw_fadd Lparen type_value
## LR(1) items:
value -> Kw_fadd Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## Kw_fadd Lparen type_value Comma
## LR(1) items:
value -> Kw_fadd Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 487
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 487:
## Known stack suffix:
## Kw_fadd Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_fadd Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## Kw_fadd Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_fadd Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_fadd Lparen type_value Comma type_value Rparen

State 489:
## Known stack suffix:
## Kw_extractvalue
## LR(1) items:
value -> Kw_extractvalue . Lparen type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## Kw_extractvalue Lparen
## LR(1) items:
value -> Kw_extractvalue Lparen . type_value index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 491
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 491:
## Known stack suffix:
## Kw_extractvalue Lparen type_value
## LR(1) items:
value -> Kw_extractvalue Lparen type_value . index_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 379
-- On index_list shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## Kw_extractvalue Lparen type_value index_list
## LR(1) items:
value -> Kw_extractvalue Lparen type_value index_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## Kw_extractvalue Lparen type_value index_list Rparen
## LR(1) items:
value -> Kw_extractvalue Lparen type_value index_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_extractvalue Lparen type_value index_list Rparen

State 494:
## Known stack suffix:
## Kw_extractelement
## LR(1) items:
value -> Kw_extractelement . Lparen type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 495
## Reductions:

State 495:
## Known stack suffix:
## Kw_extractelement Lparen
## LR(1) items:
value -> Kw_extractelement Lparen . type_value_list Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 496
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production type_value_list ->

State 496:
## Known stack suffix:
## Kw_extractelement Lparen type_value_list
## LR(1) items:
value -> Kw_extractelement Lparen type_value_list . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## Kw_extractelement Lparen type_value_list Rparen
## LR(1) items:
value -> Kw_extractelement Lparen type_value_list Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_extractelement Lparen type_value_list Rparen

State 498:
## Known stack suffix:
## Kw_c
## LR(1) items:
value -> Kw_c . StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On StringConstant shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## Kw_c StringConstant
## LR(1) items:
value -> Kw_c StringConstant . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_c StringConstant

State 500:
## Known stack suffix:
## Kw_blockaddress
## LR(1) items:
value -> Kw_blockaddress . Lparen value Comma value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 501
## Reductions:

State 501:
## Known stack suffix:
## Kw_blockaddress Lparen
## LR(1) items:
value -> Kw_blockaddress Lparen . value Comma value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 574
## Reductions:

State 502:
## Known stack suffix:
## Kw_bitcast
## LR(1) items:
value -> Kw_bitcast . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## Kw_bitcast Lparen
## LR(1) items:
value -> Kw_bitcast Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 504
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 504:
## Known stack suffix:
## Kw_bitcast Lparen type_value
## LR(1) items:
value -> Kw_bitcast Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## Kw_bitcast Lparen type_value Kw_to
## LR(1) items:
value -> Kw_bitcast Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 506
-- On non_void_type shift to state 71
## Reductions:

State 506:
## Known stack suffix:
## Kw_bitcast Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_bitcast Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 507
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 507:
## Known stack suffix:
## Kw_bitcast Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_bitcast Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_bitcast Lparen type_value Kw_to typ Rparen

State 508:
## Known stack suffix:
## Kw_asm
## LR(1) items:
value -> Kw_asm . opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_sideeffect shift to state 509
-- On opt_sideeffect shift to state 510
## Reductions:
-- On StringConstant Kw_inteldialect Kw_alignstack
--   reduce production opt_sideeffect ->

State 509:
## Known stack suffix:
## Kw_sideeffect
## LR(1) items:
opt_sideeffect -> Kw_sideeffect . [ StringConstant Kw_inteldialect Kw_alignstack ]
## Transitions:
## Reductions:
-- On StringConstant Kw_inteldialect Kw_alignstack
--   reduce production opt_sideeffect -> Kw_sideeffect

State 510:
## Known stack suffix:
## Kw_asm opt_sideeffect
## LR(1) items:
value -> Kw_asm opt_sideeffect . opt_alignstack opt_inteldialect StringConstant Comma StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_alignstack shift to state 511
-- On opt_alignstack shift to state 512
## Reductions:
-- On StringConstant Kw_inteldialect
--   reduce production opt_alignstack ->

State 511:
## Known stack suffix:
## Kw_alignstack
## LR(1) items:
opt_alignstack -> Kw_alignstack . [ StringConstant Kw_inteldialect ]
## Transitions:
## Reductions:
-- On StringConstant Kw_inteldialect
--   reduce production opt_alignstack -> Kw_alignstack

State 512:
## Known stack suffix:
## Kw_asm opt_sideeffect opt_alignstack
## LR(1) items:
value -> Kw_asm opt_sideeffect opt_alignstack . opt_inteldialect StringConstant Comma StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_inteldialect shift to state 513
-- On opt_inteldialect shift to state 514
## Reductions:
-- On StringConstant
--   reduce production opt_inteldialect ->

State 513:
## Known stack suffix:
## Kw_inteldialect
## LR(1) items:
opt_inteldialect -> Kw_inteldialect . [ StringConstant ]
## Transitions:
## Reductions:
-- On StringConstant
--   reduce production opt_inteldialect -> Kw_inteldialect

State 514:
## Known stack suffix:
## Kw_asm opt_sideeffect opt_alignstack opt_inteldialect
## LR(1) items:
value -> Kw_asm opt_sideeffect opt_alignstack opt_inteldialect . StringConstant Comma StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On StringConstant shift to state 515
## Reductions:

State 515:
## Known stack suffix:
## Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant
## LR(1) items:
value -> Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant . Comma StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma
## LR(1) items:
value -> Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma . StringConstant [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On StringConstant shift to state 517
## Reductions:

State 517:
## Known stack suffix:
## Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma StringConstant
## LR(1) items:
value -> Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma StringConstant . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_asm opt_sideeffect opt_alignstack opt_inteldialect StringConstant Comma StringConstant

State 518:
## Known stack suffix:
## Kw_ashr
## LR(1) items:
value -> Kw_ashr . opt_exact Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 519
## Reductions:
-- On Lparen
--   reduce production opt_exact ->

State 519:
## Known stack suffix:
## Kw_ashr opt_exact
## LR(1) items:
value -> Kw_ashr opt_exact . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## Kw_ashr opt_exact Lparen
## LR(1) items:
value -> Kw_ashr opt_exact Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 521
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 521:
## Known stack suffix:
## Kw_ashr opt_exact Lparen type_value
## LR(1) items:
value -> Kw_ashr opt_exact Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## Kw_ashr opt_exact Lparen type_value Comma
## LR(1) items:
value -> Kw_ashr opt_exact Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 523
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 523:
## Known stack suffix:
## Kw_ashr opt_exact Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_ashr opt_exact Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 524
## Reductions:

State 524:
## Known stack suffix:
## Kw_ashr opt_exact Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_ashr opt_exact Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_ashr opt_exact Lparen type_value Comma type_value Rparen

State 525:
## Known stack suffix:
## Kw_and
## LR(1) items:
value -> Kw_and . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## Kw_and Lparen
## LR(1) items:
value -> Kw_and Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 527
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 527:
## Known stack suffix:
## Kw_and Lparen type_value
## LR(1) items:
value -> Kw_and Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 528
## Reductions:

State 528:
## Known stack suffix:
## Kw_and Lparen type_value Comma
## LR(1) items:
value -> Kw_and Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 529
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 529:
## Known stack suffix:
## Kw_and Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_and Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 530
## Reductions:

State 530:
## Known stack suffix:
## Kw_and Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_and Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_and Lparen type_value Comma type_value Rparen

State 531:
## Known stack suffix:
## Kw_addrspacecast
## LR(1) items:
value -> Kw_addrspacecast . Lparen type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 532
## Reductions:

State 532:
## Known stack suffix:
## Kw_addrspacecast Lparen
## LR(1) items:
value -> Kw_addrspacecast Lparen . type_value Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 533
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 533:
## Known stack suffix:
## Kw_addrspacecast Lparen type_value
## LR(1) items:
value -> Kw_addrspacecast Lparen type_value . Kw_to typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_to shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## Kw_addrspacecast Lparen type_value Kw_to
## LR(1) items:
value -> Kw_addrspacecast Lparen type_value Kw_to . typ Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 535
-- On non_void_type shift to state 71
## Reductions:

State 535:
## Known stack suffix:
## Kw_addrspacecast Lparen type_value Kw_to typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Rparen Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Rparen Lparen Kw_addrspace ]
value -> Kw_addrspacecast Lparen type_value Kw_to typ . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 536
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 536:
## Known stack suffix:
## Kw_addrspacecast Lparen type_value Kw_to typ Rparen
## LR(1) items:
value -> Kw_addrspacecast Lparen type_value Kw_to typ Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_addrspacecast Lparen type_value Kw_to typ Rparen

State 537:
## Known stack suffix:
## Kw_add
## LR(1) items:
value -> Kw_add . opt_nuw_nsw Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 538
## Reductions:
-- On Lparen
--   reduce production opt_nuw_nsw ->

State 538:
## Known stack suffix:
## Kw_add opt_nuw_nsw
## LR(1) items:
value -> Kw_add opt_nuw_nsw . Lparen type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lparen shift to state 539
## Reductions:

State 539:
## Known stack suffix:
## Kw_add opt_nuw_nsw Lparen
## LR(1) items:
value -> Kw_add opt_nuw_nsw Lparen . type_value Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 540
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 540:
## Known stack suffix:
## Kw_add opt_nuw_nsw Lparen type_value
## LR(1) items:
value -> Kw_add opt_nuw_nsw Lparen type_value . Comma type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 541
## Reductions:

State 541:
## Known stack suffix:
## Kw_add opt_nuw_nsw Lparen type_value Comma
## LR(1) items:
value -> Kw_add opt_nuw_nsw Lparen type_value Comma . type_value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 542
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 542:
## Known stack suffix:
## Kw_add opt_nuw_nsw Lparen type_value Comma type_value
## LR(1) items:
value -> Kw_add opt_nuw_nsw Lparen type_value Comma type_value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 543
## Reductions:

State 543:
## Known stack suffix:
## Kw_add opt_nuw_nsw Lparen type_value Comma type_value Rparen
## LR(1) items:
value -> Kw_add opt_nuw_nsw Lparen type_value Comma type_value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_add opt_nuw_nsw Lparen type_value Comma type_value Rparen

State 544:
## Known stack suffix:
## GlobalVar
## LR(1) items:
value -> GlobalVar . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> GlobalVar

State 545:
## Known stack suffix:
## GlobalID
## LR(1) items:
value -> GlobalID . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> GlobalID

State 546:
## Known stack suffix:
## Exclaim
## LR(1) items:
value -> Exclaim . mdvalue [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On StringConstant shift to state 547
-- On Lbrace shift to state 548
-- On APInt shift to state 572
-- On mdvalue shift to state 573
## Reductions:

State 547:
## Known stack suffix:
## StringConstant
## LR(1) items:
mdvalue -> StringConstant . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production mdvalue -> StringConstant

State 548:
## Known stack suffix:
## Lbrace
## LR(1) items:
mdvalue -> Lbrace . mdnodevector Rbrace [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 549
-- On LocalVarID shift to state 550
-- On LocalVar shift to state 551
-- On Less shift to state 552
-- On Lbrace shift to state 560
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_metadata shift to state 28
-- On Kw_lshr shift to state 361
-- On Kw_label shift to state 29
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_half shift to state 30
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fp128 shift to state 31
-- On Kw_fmul shift to state 447
-- On Kw_float shift to state 32
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_double shift to state 33
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On I shift to state 34
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 563
-- On typ shift to state 565
-- On non_void_type shift to state 71
-- On mdnodevector shift to state 570
## Reductions:

State 549:
## Known stack suffix:
## Lsquare
## LR(1) items:
non_void_type -> Lsquare . APInt Kw_x typ Rsquare [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Lsquare . type_value_list Rsquare [ Rbrace Comma ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On APInt shift to state 14
-- On type_value_list shift to state 227
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Rsquare
--   reduce production type_value_list ->

State 550:
## Known stack suffix:
## LocalVarID
## LR(1) items:
non_void_type -> LocalVarID . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> LocalVarID . [ Rbrace Comma ]
## Transitions:
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> LocalVarID
-- On Rbrace Comma
--   reduce production value -> LocalVarID

State 551:
## Known stack suffix:
## LocalVar
## LR(1) items:
non_void_type -> LocalVar . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> LocalVar . [ Rbrace Comma ]
## Transitions:
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> LocalVar
-- On Rbrace Comma
--   reduce production value -> LocalVar

State 552:
## Known stack suffix:
## Less
## LR(1) items:
non_void_type -> Less . Lbrace Rbrace Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less . Lbrace type_list Rbrace Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less . APInt Kw_x typ Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less . Lbrace Rbrace Greater [ Rbrace Comma ]
value -> Less . Lbrace type_value_LIST Rbrace Greater [ Rbrace Comma ]
value -> Less . type_value_list Greater [ Rbrace Comma ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 553
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On APInt shift to state 82
-- On type_value_list shift to state 558
-- On type_value shift to state 229
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:
-- On Greater
--   reduce production type_value_list ->

State 553:
## Known stack suffix:
## Less Lbrace
## LR(1) items:
non_void_type -> Lbrace . Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less Lbrace . Rbrace Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Lbrace . type_list Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less Lbrace . type_list Rbrace Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less Lbrace . Rbrace Greater [ Rbrace Comma ]
value -> Less Lbrace . type_value_LIST Rbrace Greater [ Rbrace Comma ]
## Transitions:
-- On Rbrace shift to state 554
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST shift to state 239
-- On type_value shift to state 242
-- On type_list shift to state 556
-- On typ shift to state 245
-- On non_void_type shift to state 71
## Reductions:

State 554:
## Known stack suffix:
## Less Lbrace Rbrace
## LR(1) items:
non_void_type -> Lbrace Rbrace . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less Lbrace Rbrace . Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less Lbrace Rbrace . Greater [ Rbrace Comma ]
## Transitions:
-- On Greater shift to state 555
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> Lbrace Rbrace

State 555:
## Known stack suffix:
## Less Lbrace Rbrace Greater
## LR(1) items:
non_void_type -> Less Lbrace Rbrace Greater . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Less Lbrace Rbrace Greater . [ Rbrace Comma ]
## Transitions:
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> Less Lbrace Rbrace Greater
-- On Rbrace Comma
--   reduce production value -> Less Lbrace Rbrace Greater

State 556:
## Known stack suffix:
## Less Lbrace type_list
## LR(1) items:
non_void_type -> Lbrace type_list . Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less Lbrace type_list . Rbrace Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Rbrace shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## Less Lbrace type_list Rbrace
## LR(1) items:
non_void_type -> Lbrace type_list Rbrace . [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Less Lbrace type_list Rbrace . Greater [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Greater shift to state 81
## Reductions:
-- On Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production non_void_type -> Lbrace type_list Rbrace

State 558:
## Known stack suffix:
## Less type_value_list
## LR(1) items:
value -> Less type_value_list . Greater [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Greater shift to state 559
## Reductions:

State 559:
## Known stack suffix:
## Less type_value_list Greater
## LR(1) items:
value -> Less type_value_list Greater . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Less type_value_list Greater

State 560:
## Known stack suffix:
## Lbrace
## LR(1) items:
non_void_type -> Lbrace . Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> Lbrace . type_list Rbrace [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
value -> Lbrace . type_value_list Rbrace [ Rbrace Comma ]
## Transitions:
-- On Rbrace shift to state 23
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_list shift to state 247
-- On type_value shift to state 229
-- On type_list shift to state 35
-- On typ shift to state 245
-- On non_void_type shift to state 71
## Reductions:
-- On Rbrace
--   reduce production type_value_list ->
** Conflict on Rbrace

State 561:
## Known stack suffix:
## APInt
## LR(1) items:
value -> APInt . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> APInt

State 562:
## Known stack suffix:
## APFloat
## LR(1) items:
value -> APFloat . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> APFloat

State 563:
## Known stack suffix:
## value
## LR(1) items:
mdnodevector -> value . [ Rbrace ]
mdnodevector -> value . Comma mdnodevector [ Rbrace ]
## Transitions:
-- On Comma shift to state 564
## Reductions:
-- On Rbrace
--   reduce production mdnodevector -> value

State 564:
## Known stack suffix:
## value Comma
## LR(1) items:
mdnodevector -> value Comma . mdnodevector [ Rbrace ]
## Transitions:
-- On Lsquare shift to state 549
-- On LocalVarID shift to state 550
-- On LocalVar shift to state 551
-- On Less shift to state 552
-- On Lbrace shift to state 560
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_metadata shift to state 28
-- On Kw_lshr shift to state 361
-- On Kw_label shift to state 29
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_half shift to state 30
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fp128 shift to state 31
-- On Kw_fmul shift to state 447
-- On Kw_float shift to state 32
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_double shift to state 33
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On I shift to state 34
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 563
-- On typ shift to state 565
-- On non_void_type shift to state 71
-- On mdnodevector shift to state 569
## Reductions:

State 565:
## Known stack suffix:
## typ
## LR(1) items:
mdnodevector -> typ . value [ Rbrace ]
mdnodevector -> typ . value Comma mdnodevector [ Rbrace ]
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 566
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 566:
## Known stack suffix:
## typ value
## LR(1) items:
mdnodevector -> typ value . [ Rbrace ]
mdnodevector -> typ value . Comma mdnodevector [ Rbrace ]
## Transitions:
-- On Comma shift to state 567
## Reductions:
-- On Rbrace
--   reduce production mdnodevector -> typ value

State 567:
## Known stack suffix:
## typ value Comma
## LR(1) items:
mdnodevector -> typ value Comma . mdnodevector [ Rbrace ]
## Transitions:
-- On Lsquare shift to state 549
-- On LocalVarID shift to state 550
-- On LocalVar shift to state 551
-- On Less shift to state 552
-- On Lbrace shift to state 560
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_metadata shift to state 28
-- On Kw_lshr shift to state 361
-- On Kw_label shift to state 29
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_half shift to state 30
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fp128 shift to state 31
-- On Kw_fmul shift to state 447
-- On Kw_float shift to state 32
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_double shift to state 33
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On I shift to state 34
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 563
-- On typ shift to state 565
-- On non_void_type shift to state 71
-- On mdnodevector shift to state 568
## Reductions:

State 568:
## Known stack suffix:
## typ value Comma mdnodevector
## LR(1) items:
mdnodevector -> typ value Comma mdnodevector . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production mdnodevector -> typ value Comma mdnodevector

State 569:
## Known stack suffix:
## value Comma mdnodevector
## LR(1) items:
mdnodevector -> value Comma mdnodevector . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production mdnodevector -> value Comma mdnodevector

State 570:
## Known stack suffix:
## Lbrace mdnodevector
## LR(1) items:
mdvalue -> Lbrace mdnodevector . Rbrace [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rbrace shift to state 571
## Reductions:

State 571:
## Known stack suffix:
## Lbrace mdnodevector Rbrace
## LR(1) items:
mdvalue -> Lbrace mdnodevector Rbrace . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production mdvalue -> Lbrace mdnodevector Rbrace

State 572:
## Known stack suffix:
## APInt
## LR(1) items:
mdvalue -> APInt . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production mdvalue -> APInt

State 573:
## Known stack suffix:
## Exclaim mdvalue
## LR(1) items:
value -> Exclaim mdvalue . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Exclaim mdvalue

State 574:
## Known stack suffix:
## Kw_blockaddress Lparen value
## LR(1) items:
value -> Kw_blockaddress Lparen value . Comma value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Comma shift to state 575
## Reductions:

State 575:
## Known stack suffix:
## Kw_blockaddress Lparen value Comma
## LR(1) items:
value -> Kw_blockaddress Lparen value Comma . value Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 576
## Reductions:

State 576:
## Known stack suffix:
## Kw_blockaddress Lparen value Comma value
## LR(1) items:
value -> Kw_blockaddress Lparen value Comma value . Rparen [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
-- On Rparen shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## Kw_blockaddress Lparen value Comma value Rparen
## LR(1) items:
value -> Kw_blockaddress Lparen value Comma value Rparen . [ Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare Lparen LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production value -> Kw_blockaddress Lparen value Comma value Rparen

State 578:
## Known stack suffix:
## typ value
## LR(1) items:
type_value -> typ value . [ Rsquare Rparen Rbrace MetadataVar Lsquare LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
## Transitions:
## Reductions:
-- On Rsquare Rparen Rbrace MetadataVar Lsquare LocalVarID LocalVar Less Lbrace LabelStr Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_unwind Kw_unreachable Kw_unordered Kw_to Kw_target Kw_tail Kw_switch Kw_store Kw_singlethread Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_ppc_fp128 Kw_musttail Kw_monotonic Kw_module Kw_metadata Kw_label Kw_indirectbr Kw_half Kw_fp128 Kw_float Kw_filter Kw_fence Kw_double Kw_deplibs Kw_define Kw_declare Kw_cmpxchg Kw_cleanup Kw_catch Kw_call Kw_br Kw_attributes Kw_atomicrmw Kw_acquire Kw_acq_rel I Greater GlobalVar GlobalID Exclaim Eof Comma ComdatVar
--   reduce production type_value -> typ value

State 579:
## Known stack suffix:
## Kw_prefix typ value
## LR(1) items:
opt_prefix -> Kw_prefix typ value . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_prefix -> Kw_prefix typ value

State 580:
## Known stack suffix:
## opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix
## LR(1) items:
function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix . [ MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production function_header -> opt_linkage opt_visibility opt_dll_storageclass opt_callingconv return_attributes typ global_name argument_list opt_unnamed_addr function_attributes opt_section opt_comdat opt_align opt_gc opt_prefix

State 581:
## Known stack suffix:
## function_attribute
## LR(1) items:
function_attributes -> function_attribute . function_attributes [ MetadataVar LocalVarID LocalVar Lbrace Kw_to Kw_target Kw_section Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 175
-- On Kw_uwtable shift to state 178
-- On Kw_sspstrong shift to state 179
-- On Kw_sspreq shift to state 180
-- On Kw_ssp shift to state 181
-- On Kw_sanitize_thread shift to state 182
-- On Kw_sanitize_memory shift to state 183
-- On Kw_sanitize_address shift to state 184
-- On Kw_returns_twice shift to state 185
-- On Kw_readonly shift to state 186
-- On Kw_readnone shift to state 187
-- On Kw_optsize shift to state 188
-- On Kw_optnone shift to state 189
-- On Kw_nounwind shift to state 190
-- On Kw_noreturn shift to state 191
-- On Kw_noredzone shift to state 192
-- On Kw_nonlazybind shift to state 193
-- On Kw_noinline shift to state 194
-- On Kw_noimplicitfloat shift to state 195
-- On Kw_noduplicate shift to state 196
-- On Kw_nobuiltin shift to state 197
-- On Kw_naked shift to state 198
-- On Kw_minsize shift to state 199
-- On Kw_jumptable shift to state 200
-- On Kw_inlinehint shift to state 201
-- On Kw_cold shift to state 202
-- On Kw_builtin shift to state 203
-- On Kw_alwaysinline shift to state 204
-- On Kw_alignstack shift to state 205
-- On AttrGrpID shift to state 210
-- On function_attributes shift to state 582
-- On function_attribute shift to state 581
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_to Kw_target Kw_section Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production function_attributes ->

State 582:
## Known stack suffix:
## function_attribute function_attributes
## LR(1) items:
function_attributes -> function_attribute function_attributes . [ MetadataVar LocalVarID LocalVar Lbrace Kw_to Kw_target Kw_section Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Lbrace Kw_to Kw_target Kw_section Kw_prefix Kw_module Kw_gc Kw_deplibs Kw_define Kw_declare Kw_comdat Kw_attributes Kw_align GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production function_attributes -> function_attribute function_attributes

State 583:
## Known stack suffix:
## return_attribute
## LR(1) items:
return_attributes -> return_attribute . return_attributes [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
-- On Kw_zeroext shift to state 158
-- On Kw_signext shift to state 159
-- On Kw_nonnull shift to state 160
-- On Kw_noalias shift to state 161
-- On Kw_inreg shift to state 162
-- On Kw_dereferenceable shift to state 163
-- On return_attributes shift to state 584
-- On return_attribute shift to state 583
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production return_attributes ->

State 584:
## Known stack suffix:
## return_attribute return_attributes
## LR(1) items:
return_attributes -> return_attribute return_attributes . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production return_attributes -> return_attribute return_attributes

State 585:
## Known stack suffix:
## non_external_linkage
## LR(1) items:
opt_linkage -> non_external_linkage . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I
--   reduce production opt_linkage -> non_external_linkage

State 586:
## Known stack suffix:
## Kw_define function_header
## LR(1) items:
toplevel -> Kw_define function_header . function_body [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lbrace shift to state 587
-- On function_body shift to state 1033
## Reductions:

State 587:
## Known stack suffix:
## Lbrace
## LR(1) items:
function_body -> Lbrace . basicblock_list Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On LocalVarID shift to state 588
-- On LocalVar shift to state 590
-- On LabelStr shift to state 592
-- On Kw_unreachable shift to state 593
-- On Kw_switch shift to state 604
-- On Kw_store shift to state 616
-- On Kw_ret shift to state 640
-- On Kw_resume shift to state 647
-- On Kw_indirectbr shift to state 650
-- On Kw_fence shift to state 657
-- On Kw_cmpxchg shift to state 661
-- On Kw_br shift to state 674
-- On Kw_atomicrmw shift to state 682
-- On terminator_instruction shift to state 702
-- On opt_local shift to state 703
-- On local_eq shift to state 730
-- On instruction_list shift to state 1028
-- On instruction shift to state 1026
-- On basicblock_list shift to state 1029
-- On basicblock shift to state 1031
## Reductions:
-- On Kw_tail Kw_musttail Kw_call
--   reduce production opt_local ->

State 588:
## Known stack suffix:
## LocalVarID
## LR(1) items:
local_eq -> LocalVarID . Equal [ Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add ]
## Transitions:
-- On Equal shift to state 589
## Reductions:

State 589:
## Known stack suffix:
## LocalVarID Equal
## LR(1) items:
local_eq -> LocalVarID Equal . [ Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add ]
## Transitions:
## Reductions:
-- On Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add
--   reduce production local_eq -> LocalVarID Equal

State 590:
## Known stack suffix:
## LocalVar
## LR(1) items:
local_eq -> LocalVar . Equal [ Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add ]
## Transitions:
-- On Equal shift to state 591
## Reductions:

State 591:
## Known stack suffix:
## LocalVar Equal
## LR(1) items:
local_eq -> LocalVar Equal . [ Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add ]
## Transitions:
## Reductions:
-- On Kw_zext Kw_xor Kw_va_arg Kw_urem Kw_uitofp Kw_udiv Kw_trunc Kw_tail Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_phi Kw_or Kw_musttail Kw_mul Kw_lshr Kw_load Kw_landingpad Kw_invoke Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_fadd Kw_extractvalue Kw_extractelement Kw_call Kw_bitcast Kw_ashr Kw_and Kw_alloca Kw_addrspacecast Kw_add
--   reduce production local_eq -> LocalVar Equal

State 592:
## Known stack suffix:
## LabelStr
## LR(1) items:
basicblock -> LabelStr . instruction_list [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On LocalVarID shift to state 588
-- On LocalVar shift to state 590
-- On Kw_unreachable shift to state 593
-- On Kw_switch shift to state 604
-- On Kw_store shift to state 616
-- On Kw_ret shift to state 640
-- On Kw_resume shift to state 647
-- On Kw_indirectbr shift to state 650
-- On Kw_fence shift to state 657
-- On Kw_cmpxchg shift to state 661
-- On Kw_br shift to state 674
-- On Kw_atomicrmw shift to state 682
-- On terminator_instruction shift to state 702
-- On opt_local shift to state 703
-- On local_eq shift to state 730
-- On instruction_list shift to state 1025
-- On instruction shift to state 1026
## Reductions:
-- On Kw_tail Kw_musttail Kw_call
--   reduce production opt_local ->

State 593:
## Known stack suffix:
## Kw_unreachable
## LR(1) items:
terminator_instruction -> Kw_unreachable . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 603
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 594:
## Known stack suffix:
## Comma
## LR(1) items:
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## Comma MetadataVar
## LR(1) items:
instruction_metadata -> Comma MetadataVar . Exclaim APInt instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma MetadataVar . Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Exclaim shift to state 596
## Reductions:

State 596:
## Known stack suffix:
## Comma MetadataVar Exclaim
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim . APInt instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma MetadataVar Exclaim . Lbrace mdnodevector Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lbrace shift to state 597
-- On APInt shift to state 601
## Reductions:

State 597:
## Known stack suffix:
## Comma MetadataVar Exclaim Lbrace
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim Lbrace . mdnodevector Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 549
-- On LocalVarID shift to state 550
-- On LocalVar shift to state 551
-- On Less shift to state 552
-- On Lbrace shift to state 560
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_metadata shift to state 28
-- On Kw_lshr shift to state 361
-- On Kw_label shift to state 29
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_half shift to state 30
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fp128 shift to state 31
-- On Kw_fmul shift to state 447
-- On Kw_float shift to state 32
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_double shift to state 33
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On I shift to state 34
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 563
-- On typ shift to state 565
-- On non_void_type shift to state 71
-- On mdnodevector shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## Comma MetadataVar Exclaim Lbrace mdnodevector
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim Lbrace mdnodevector . Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rbrace shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## Comma MetadataVar Exclaim Lbrace mdnodevector Rbrace
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim Lbrace mdnodevector Rbrace . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 600
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 600:
## Known stack suffix:
## Comma MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata -> Comma MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata

State 601:
## Known stack suffix:
## Comma MetadataVar Exclaim APInt
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim APInt . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 602
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 602:
## Known stack suffix:
## Comma MetadataVar Exclaim APInt instruction_metadata
## LR(1) items:
instruction_metadata -> Comma MetadataVar Exclaim APInt instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata -> Comma MetadataVar Exclaim APInt instruction_metadata

State 603:
## Known stack suffix:
## Kw_unreachable instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_unreachable instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_unreachable instruction_metadata

State 604:
## Known stack suffix:
## Kw_switch
## LR(1) items:
terminator_instruction -> Kw_switch . type_value Comma type_value Lsquare jump_table Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 605
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 605:
## Known stack suffix:
## Kw_switch type_value
## LR(1) items:
terminator_instruction -> Kw_switch type_value . Comma type_value Lsquare jump_table Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 606
## Reductions:

State 606:
## Known stack suffix:
## Kw_switch type_value Comma
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma . type_value Lsquare jump_table Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 607
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 607:
## Known stack suffix:
## Kw_switch type_value Comma type_value
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma type_value . Lsquare jump_table Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 608
## Reductions:

State 608:
## Known stack suffix:
## Kw_switch type_value Comma type_value Lsquare
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma type_value Lsquare . jump_table Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 609
-- On typ shift to state 232
-- On non_void_type shift to state 71
-- On jump_table shift to state 613
## Reductions:
-- On Rsquare
--   reduce production jump_table ->

State 609:
## Known stack suffix:
## type_value
## LR(1) items:
jump_table -> type_value . Comma type_value jump_table [ Rsquare ]
## Transitions:
-- On Comma shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## type_value Comma
## LR(1) items:
jump_table -> type_value Comma . type_value jump_table [ Rsquare ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 611
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 611:
## Known stack suffix:
## type_value Comma type_value
## LR(1) items:
jump_table -> type_value Comma type_value . jump_table [ Rsquare ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 609
-- On typ shift to state 232
-- On non_void_type shift to state 71
-- On jump_table shift to state 612
## Reductions:
-- On Rsquare
--   reduce production jump_table ->

State 612:
## Known stack suffix:
## type_value Comma type_value jump_table
## LR(1) items:
jump_table -> type_value Comma type_value jump_table . [ Rsquare ]
## Transitions:
## Reductions:
-- On Rsquare
--   reduce production jump_table -> type_value Comma type_value jump_table

State 613:
## Known stack suffix:
## Kw_switch type_value Comma type_value Lsquare jump_table
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma type_value Lsquare jump_table . Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rsquare shift to state 614
## Reductions:

State 614:
## Known stack suffix:
## Kw_switch type_value Comma type_value Lsquare jump_table Rsquare
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma type_value Lsquare jump_table Rsquare . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 615
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 615:
## Known stack suffix:
## Kw_switch type_value Comma type_value Lsquare jump_table Rsquare instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_switch type_value Comma type_value Lsquare jump_table Rsquare instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_switch type_value Comma type_value Lsquare jump_table Rsquare instruction_metadata

State 616:
## Known stack suffix:
## Kw_store
## LR(1) items:
instruction -> Kw_store . opt_atomic opt_volatile type_value Comma type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_atomic shift to state 617
-- On opt_atomic shift to state 618
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_atomic ->

State 617:
## Known stack suffix:
## Kw_atomic
## LR(1) items:
opt_atomic -> Kw_atomic . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_atomic -> Kw_atomic

State 618:
## Known stack suffix:
## Kw_store opt_atomic
## LR(1) items:
instruction -> Kw_store opt_atomic . opt_volatile type_value Comma type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_volatile shift to state 619
-- On opt_volatile shift to state 620
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_volatile ->

State 619:
## Known stack suffix:
## Kw_volatile
## LR(1) items:
opt_volatile -> Kw_volatile . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_xor Kw_xchg Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_umin Kw_umax Kw_sub Kw_ppc_fp128 Kw_or Kw_nand Kw_min Kw_metadata Kw_max Kw_label Kw_half Kw_fp128 Kw_float Kw_double Kw_and Kw_add I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_xor Kw_xchg Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_umin Kw_umax Kw_sub Kw_ppc_fp128 Kw_or Kw_nand Kw_min Kw_metadata Kw_max Kw_label Kw_half Kw_fp128 Kw_float Kw_double Kw_and Kw_add I
--   reduce production opt_volatile -> Kw_volatile

State 620:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile . type_value Comma type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 621
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 621:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile type_value
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile type_value . Comma type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 622
## Reductions:

State 622:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile type_value Comma
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile type_value Comma . type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 623
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 623:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile type_value Comma type_value
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile type_value Comma type_value . scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_singlethread shift to state 624
-- On scopeandordering shift to state 625
-- On opt_singlethread shift to state 632
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread ->
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production scopeandordering ->

State 624:
## Known stack suffix:
## Kw_singlethread
## LR(1) items:
opt_singlethread -> Kw_singlethread . [ Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel ]
## Transitions:
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread -> Kw_singlethread

State 625:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile type_value Comma type_value scopeandordering
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile type_value Comma type_value scopeandordering . align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 626
-- On instruction_metadata shift to state 630
-- On align_metadata shift to state 631
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 626:
## Known stack suffix:
## Comma
## LR(1) items:
align_metadata -> Comma . Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Kw_align shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## Comma Kw_align
## LR(1) items:
align_metadata -> Comma Kw_align . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## Comma Kw_align APInt
## LR(1) items:
align_metadata -> Comma Kw_align APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 629
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 629:
## Known stack suffix:
## Comma Kw_align APInt instruction_metadata
## LR(1) items:
align_metadata -> Comma Kw_align APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production align_metadata -> Comma Kw_align APInt instruction_metadata

State 630:
## Known stack suffix:
## instruction_metadata
## LR(1) items:
align_metadata -> instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production align_metadata -> instruction_metadata

State 631:
## Known stack suffix:
## Kw_store opt_atomic opt_volatile type_value Comma type_value scopeandordering align_metadata
## LR(1) items:
instruction -> Kw_store opt_atomic opt_volatile type_value Comma type_value scopeandordering align_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> Kw_store opt_atomic opt_volatile type_value Comma type_value scopeandordering align_metadata

State 632:
## Known stack suffix:
## opt_singlethread
## LR(1) items:
scopeandordering -> opt_singlethread . ordering [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Kw_unordered shift to state 633
-- On Kw_seq_cst shift to state 634
-- On Kw_release shift to state 635
-- On Kw_monotonic shift to state 636
-- On Kw_acquire shift to state 637
-- On Kw_acq_rel shift to state 638
-- On ordering shift to state 639
## Reductions:

State 633:
## Known stack suffix:
## Kw_unordered
## LR(1) items:
ordering -> Kw_unordered . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_unordered

State 634:
## Known stack suffix:
## Kw_seq_cst
## LR(1) items:
ordering -> Kw_seq_cst . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_seq_cst

State 635:
## Known stack suffix:
## Kw_release
## LR(1) items:
ordering -> Kw_release . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_release

State 636:
## Known stack suffix:
## Kw_monotonic
## LR(1) items:
ordering -> Kw_monotonic . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_monotonic

State 637:
## Known stack suffix:
## Kw_acquire
## LR(1) items:
ordering -> Kw_acquire . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_acquire

State 638:
## Known stack suffix:
## Kw_acq_rel
## LR(1) items:
ordering -> Kw_acq_rel . [ LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_unordered Kw_tail Kw_switch Kw_store Kw_seq_cst Kw_ret Kw_resume Kw_release Kw_musttail Kw_monotonic Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_acquire Kw_acq_rel Comma
--   reduce production ordering -> Kw_acq_rel

State 639:
## Known stack suffix:
## opt_singlethread ordering
## LR(1) items:
scopeandordering -> opt_singlethread ordering . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production scopeandordering -> opt_singlethread ordering

State 640:
## Known stack suffix:
## Kw_ret
## LR(1) items:
terminator_instruction -> Kw_ret . Kw_void instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
terminator_instruction -> Kw_ret . non_void_type value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 641
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 643
-- On non_void_type shift to state 644
## Reductions:

State 641:
## Known stack suffix:
## Kw_ret Kw_void
## LR(1) items:
terminator_instruction -> Kw_ret Kw_void . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
typ -> Kw_void . [ Star Lparen Kw_addrspace ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 642
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star Lparen Kw_addrspace
--   reduce production typ -> Kw_void

State 642:
## Known stack suffix:
## Kw_ret Kw_void instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_ret Kw_void instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_ret Kw_void instruction_metadata

State 643:
## Known stack suffix:
## typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 644:
## Known stack suffix:
## Kw_ret non_void_type
## LR(1) items:
terminator_instruction -> Kw_ret non_void_type . value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
typ -> non_void_type . [ Star Lparen Kw_addrspace ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 645
## Reductions:
-- On Star Lparen Kw_addrspace
--   reduce production typ -> non_void_type

State 645:
## Known stack suffix:
## Kw_ret non_void_type value
## LR(1) items:
terminator_instruction -> Kw_ret non_void_type value . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 646
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 646:
## Known stack suffix:
## Kw_ret non_void_type value instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_ret non_void_type value instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_ret non_void_type value instruction_metadata

State 647:
## Known stack suffix:
## Kw_resume
## LR(1) items:
terminator_instruction -> Kw_resume . type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 648
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 648:
## Known stack suffix:
## Kw_resume type_value
## LR(1) items:
terminator_instruction -> Kw_resume type_value . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 649
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 649:
## Known stack suffix:
## Kw_resume type_value instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_resume type_value instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_resume type_value instruction_metadata

State 650:
## Known stack suffix:
## Kw_indirectbr
## LR(1) items:
terminator_instruction -> Kw_indirectbr . type_value Comma Lsquare type_value_LIST Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 651
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 651:
## Known stack suffix:
## Kw_indirectbr type_value
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value . Comma Lsquare type_value_LIST Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## Kw_indirectbr type_value Comma
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value Comma . Lsquare type_value_LIST Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## Kw_indirectbr type_value Comma Lsquare
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value Comma Lsquare . type_value_LIST Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST shift to state 654
-- On type_value shift to state 242
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 654:
## Known stack suffix:
## Kw_indirectbr type_value Comma Lsquare type_value_LIST
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value Comma Lsquare type_value_LIST . Rsquare instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rsquare shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## Kw_indirectbr type_value Comma Lsquare type_value_LIST Rsquare
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value Comma Lsquare type_value_LIST Rsquare . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 656
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 656:
## Known stack suffix:
## Kw_indirectbr type_value Comma Lsquare type_value_LIST Rsquare instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_indirectbr type_value Comma Lsquare type_value_LIST Rsquare instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_indirectbr type_value Comma Lsquare type_value_LIST Rsquare instruction_metadata

State 657:
## Known stack suffix:
## Kw_fence
## LR(1) items:
instruction -> Kw_fence . opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_singlethread shift to state 624
-- On opt_singlethread shift to state 658
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread ->

State 658:
## Known stack suffix:
## Kw_fence opt_singlethread
## LR(1) items:
instruction -> Kw_fence opt_singlethread . ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_unordered shift to state 633
-- On Kw_seq_cst shift to state 634
-- On Kw_release shift to state 635
-- On Kw_monotonic shift to state 636
-- On Kw_acquire shift to state 637
-- On Kw_acq_rel shift to state 638
-- On ordering shift to state 659
## Reductions:

State 659:
## Known stack suffix:
## Kw_fence opt_singlethread ordering
## LR(1) items:
instruction -> Kw_fence opt_singlethread ordering . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 660
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 660:
## Known stack suffix:
## Kw_fence opt_singlethread ordering instruction_metadata
## LR(1) items:
instruction -> Kw_fence opt_singlethread ordering instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> Kw_fence opt_singlethread ordering instruction_metadata

State 661:
## Known stack suffix:
## Kw_cmpxchg
## LR(1) items:
instruction -> Kw_cmpxchg . opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_weak shift to state 662
-- On opt_weak shift to state 663
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_weak ->

State 662:
## Known stack suffix:
## Kw_weak
## LR(1) items:
opt_weak -> Kw_weak . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_weak -> Kw_weak

State 663:
## Known stack suffix:
## Kw_cmpxchg opt_weak
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak . opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_volatile shift to state 619
-- On opt_volatile shift to state 664
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_volatile ->

State 664:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile . type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 665
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 665:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value . Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 666
## Reductions:

State 666:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma . type_value Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 667
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 667:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value . Comma type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 668
## Reductions:

State 668:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma . type_value opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 669
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 669:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value . opt_singlethread ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_singlethread shift to state 624
-- On opt_singlethread shift to state 670
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread ->

State 670:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread . ordering ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_unordered shift to state 633
-- On Kw_seq_cst shift to state 634
-- On Kw_release shift to state 635
-- On Kw_monotonic shift to state 636
-- On Kw_acquire shift to state 637
-- On Kw_acq_rel shift to state 638
-- On ordering shift to state 671
## Reductions:

State 671:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering . ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_unordered shift to state 633
-- On Kw_seq_cst shift to state 634
-- On Kw_release shift to state 635
-- On Kw_monotonic shift to state 636
-- On Kw_acquire shift to state 637
-- On Kw_acq_rel shift to state 638
-- On ordering shift to state 672
## Reductions:

State 672:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 673
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 673:
## Known stack suffix:
## Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata
## LR(1) items:
instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> Kw_cmpxchg opt_weak opt_volatile type_value Comma type_value Comma type_value opt_singlethread ordering ordering instruction_metadata

State 674:
## Known stack suffix:
## Kw_br
## LR(1) items:
terminator_instruction -> Kw_br . type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
terminator_instruction -> Kw_br . type_value Comma type_value Comma type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 675
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 675:
## Known stack suffix:
## Kw_br type_value
## LR(1) items:
terminator_instruction -> Kw_br type_value . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
terminator_instruction -> Kw_br type_value . Comma type_value Comma type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 676
-- On instruction_metadata shift to state 681
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 676:
## Known stack suffix:
## Kw_br type_value Comma
## LR(1) items:
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
terminator_instruction -> Kw_br type_value Comma . type_value Comma type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 677
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 677:
## Known stack suffix:
## Kw_br type_value Comma type_value
## LR(1) items:
terminator_instruction -> Kw_br type_value Comma type_value . Comma type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 678
## Reductions:

State 678:
## Known stack suffix:
## Kw_br type_value Comma type_value Comma
## LR(1) items:
terminator_instruction -> Kw_br type_value Comma type_value Comma . type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 679
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 679:
## Known stack suffix:
## Kw_br type_value Comma type_value Comma type_value
## LR(1) items:
terminator_instruction -> Kw_br type_value Comma type_value Comma type_value . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 680
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 680:
## Known stack suffix:
## Kw_br type_value Comma type_value Comma type_value instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_br type_value Comma type_value Comma type_value instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_br type_value Comma type_value Comma type_value instruction_metadata

State 681:
## Known stack suffix:
## Kw_br type_value instruction_metadata
## LR(1) items:
terminator_instruction -> Kw_br type_value instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> Kw_br type_value instruction_metadata

State 682:
## Known stack suffix:
## Kw_atomicrmw
## LR(1) items:
instruction -> Kw_atomicrmw . opt_volatile binop type_value Comma type_value opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_volatile shift to state 619
-- On opt_volatile shift to state 683
## Reductions:
-- On Kw_xor Kw_xchg Kw_umin Kw_umax Kw_sub Kw_or Kw_nand Kw_min Kw_max Kw_and Kw_add
--   reduce production opt_volatile ->

State 683:
## Known stack suffix:
## Kw_atomicrmw opt_volatile
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile . binop type_value Comma type_value opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_xor shift to state 684
-- On Kw_xchg shift to state 685
-- On Kw_umin shift to state 686
-- On Kw_umax shift to state 687
-- On Kw_sub shift to state 688
-- On Kw_or shift to state 689
-- On Kw_nand shift to state 690
-- On Kw_min shift to state 691
-- On Kw_max shift to state 692
-- On Kw_and shift to state 693
-- On Kw_add shift to state 694
-- On binop shift to state 695
## Reductions:

State 684:
## Known stack suffix:
## Kw_xor
## LR(1) items:
binop -> Kw_xor . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_xor

State 685:
## Known stack suffix:
## Kw_xchg
## LR(1) items:
binop -> Kw_xchg . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_xchg

State 686:
## Known stack suffix:
## Kw_umin
## LR(1) items:
binop -> Kw_umin . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_umin

State 687:
## Known stack suffix:
## Kw_umax
## LR(1) items:
binop -> Kw_umax . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_umax

State 688:
## Known stack suffix:
## Kw_sub
## LR(1) items:
binop -> Kw_sub . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_sub

State 689:
## Known stack suffix:
## Kw_or
## LR(1) items:
binop -> Kw_or . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_or

State 690:
## Known stack suffix:
## Kw_nand
## LR(1) items:
binop -> Kw_nand . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_nand

State 691:
## Known stack suffix:
## Kw_min
## LR(1) items:
binop -> Kw_min . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_min

State 692:
## Known stack suffix:
## Kw_max
## LR(1) items:
binop -> Kw_max . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_max

State 693:
## Known stack suffix:
## Kw_and
## LR(1) items:
binop -> Kw_and . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_and

State 694:
## Known stack suffix:
## Kw_add
## LR(1) items:
binop -> Kw_add . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production binop -> Kw_add

State 695:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop . type_value Comma type_value opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 696
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 696:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value . Comma type_value opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 697
## Reductions:

State 697:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value Comma
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value Comma . type_value opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 698
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 698:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value Comma type_value
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value Comma type_value . opt_singlethread ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_singlethread shift to state 624
-- On opt_singlethread shift to state 699
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread ->

State 699:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread . ordering instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_unordered shift to state 633
-- On Kw_seq_cst shift to state 634
-- On Kw_release shift to state 635
-- On Kw_monotonic shift to state 636
-- On Kw_acquire shift to state 637
-- On Kw_acq_rel shift to state 638
-- On ordering shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread ordering
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread ordering . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 701
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 701:
## Known stack suffix:
## Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread ordering instruction_metadata
## LR(1) items:
instruction -> Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread ordering instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> Kw_atomicrmw opt_volatile binop type_value Comma type_value opt_singlethread ordering instruction_metadata

State 702:
## Known stack suffix:
## terminator_instruction
## LR(1) items:
instruction_list -> terminator_instruction . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_list -> terminator_instruction

State 703:
## Known stack suffix:
## opt_local
## LR(1) items:
instruction -> opt_local . opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_tail shift to state 704
-- On Kw_musttail shift to state 705
-- On opt_tail shift to state 706
## Reductions:
-- On Kw_call
--   reduce production opt_tail ->

State 704:
## Known stack suffix:
## Kw_tail
## LR(1) items:
opt_tail -> Kw_tail . [ Kw_call ]
## Transitions:
## Reductions:
-- On Kw_call
--   reduce production opt_tail -> Kw_tail

State 705:
## Known stack suffix:
## Kw_musttail
## LR(1) items:
opt_tail -> Kw_musttail . [ Kw_call ]
## Transitions:
## Reductions:
-- On Kw_call
--   reduce production opt_tail -> Kw_musttail

State 706:
## Known stack suffix:
## opt_local opt_tail
## LR(1) items:
instruction -> opt_local opt_tail . Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_call shift to state 707
## Reductions:

State 707:
## Known stack suffix:
## opt_local opt_tail Kw_call
## LR(1) items:
instruction -> opt_local opt_tail Kw_call . opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_x86_thiscallcc shift to state 134
-- On Kw_x86_stdcallcc shift to state 135
-- On Kw_x86_fastcallcc shift to state 136
-- On Kw_x86_cdeclmethodcc shift to state 137
-- On Kw_x86_64_win64cc shift to state 138
-- On Kw_x86_64_sysvcc shift to state 139
-- On Kw_webkit_jscc shift to state 140
-- On Kw_spir_kernel shift to state 141
-- On Kw_spir_func shift to state 142
-- On Kw_ptx_kernel shift to state 143
-- On Kw_ptx_device shift to state 144
-- On Kw_preserve_mostcc shift to state 145
-- On Kw_preserve_allcc shift to state 146
-- On Kw_msp430_intrcc shift to state 147
-- On Kw_intel_ocl_bicc shift to state 148
-- On Kw_fastcc shift to state 149
-- On Kw_coldcc shift to state 150
-- On Kw_ccc shift to state 151
-- On Kw_cc shift to state 152
-- On Kw_arm_apcscc shift to state 153
-- On Kw_arm_aapcscc shift to state 154
-- On Kw_arm_aapcs_vfpcc shift to state 155
-- On Kw_anyregcc shift to state 156
-- On opt_callingconv shift to state 708
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv ->

State 708:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv . return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_zeroext shift to state 158
-- On Kw_signext shift to state 159
-- On Kw_nonnull shift to state 160
-- On Kw_noalias shift to state 161
-- On Kw_inreg shift to state 162
-- On Kw_dereferenceable shift to state 163
-- On return_attributes shift to state 709
-- On return_attribute shift to state 583
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production return_attributes ->

State 709:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes . typ value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 710
-- On non_void_type shift to state 71
## Reductions:

State 710:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ . value Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 711
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 711:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value . Lparen param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lparen shift to state 712
## Reductions:

State 712:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen . param_list Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 713
-- On param_list shift to state 716
-- On param shift to state 727
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production param_list ->

State 713:
## Known stack suffix:
## typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_zeroext Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_sret Kw_srem Kw_sitofp Kw_signext Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_returned Kw_readonly Kw_readnone Kw_ptrtoint Kw_or Kw_null Kw_nonnull Kw_nocapture Kw_noalias Kw_nest Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_inreg Kw_inalloca Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_dereferenceable Kw_c Kw_byval Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_align Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
param -> typ . param_attribute_list value [ Rparen Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_zeroext shift to state 41
-- On Kw_sret shift to state 42
-- On Kw_signext shift to state 43
-- On Kw_returned shift to state 44
-- On Kw_readonly shift to state 45
-- On Kw_readnone shift to state 46
-- On Kw_nonnull shift to state 47
-- On Kw_nocapture shift to state 48
-- On Kw_noalias shift to state 49
-- On Kw_nest shift to state 50
-- On Kw_inreg shift to state 51
-- On Kw_inalloca shift to state 52
-- On Kw_dereferenceable shift to state 53
-- On Kw_byval shift to state 57
-- On Kw_align shift to state 58
-- On Kw_addrspace shift to state 60
-- On param_attribute_list shift to state 714
-- On param_attribute shift to state 66
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_add GlobalVar GlobalID Exclaim APInt APFloat
--   reduce production param_attribute_list ->

State 714:
## Known stack suffix:
## typ param_attribute_list
## LR(1) items:
param -> typ param_attribute_list . value [ Rparen Comma ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 715
## Reductions:

State 715:
## Known stack suffix:
## typ param_attribute_list value
## LR(1) items:
param -> typ param_attribute_list value . [ Rparen Comma ]
## Transitions:
## Reductions:
-- On Rparen Comma
--   reduce production param -> typ param_attribute_list value

State 716:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list . Rparen call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rparen shift to state 717
## Reductions:

State 717:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen . call_attributes instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_readonly shift to state 718
-- On Kw_readnone shift to state 719
-- On Kw_nounwind shift to state 720
-- On Kw_noreturn shift to state 721
-- On AttrGrpID shift to state 722
-- On call_attributes shift to state 723
-- On call_attribute shift to state 725
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production call_attributes ->

State 718:
## Known stack suffix:
## Kw_readonly
## LR(1) items:
call_attribute -> Kw_readonly . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID
--   reduce production call_attribute -> Kw_readonly

State 719:
## Known stack suffix:
## Kw_readnone
## LR(1) items:
call_attribute -> Kw_readnone . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID
--   reduce production call_attribute -> Kw_readnone

State 720:
## Known stack suffix:
## Kw_nounwind
## LR(1) items:
call_attribute -> Kw_nounwind . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID
--   reduce production call_attribute -> Kw_nounwind

State 721:
## Known stack suffix:
## Kw_noreturn
## LR(1) items:
call_attribute -> Kw_noreturn . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID
--   reduce production call_attribute -> Kw_noreturn

State 722:
## Known stack suffix:
## AttrGrpID
## LR(1) items:
call_attribute -> AttrGrpID . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_readonly Kw_readnone Kw_nounwind Kw_noreturn Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma AttrGrpID
--   reduce production call_attribute -> AttrGrpID

State 723:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 724
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 724:
## Known stack suffix:
## opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata
## LR(1) items:
instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> opt_local opt_tail Kw_call opt_callingconv return_attributes typ value Lparen param_list Rparen call_attributes instruction_metadata

State 725:
## Known stack suffix:
## call_attribute
## LR(1) items:
call_attributes -> call_attribute . call_attributes [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Kw_readonly shift to state 718
-- On Kw_readnone shift to state 719
-- On Kw_nounwind shift to state 720
-- On Kw_noreturn shift to state 721
-- On AttrGrpID shift to state 722
-- On call_attributes shift to state 726
-- On call_attribute shift to state 725
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production call_attributes ->

State 726:
## Known stack suffix:
## call_attribute call_attributes
## LR(1) items:
call_attributes -> call_attribute call_attributes . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production call_attributes -> call_attribute call_attributes

State 727:
## Known stack suffix:
## param
## LR(1) items:
param_list -> param . [ Rparen ]
param_list -> param . Comma param_list [ Rparen ]
## Transitions:
-- On Comma shift to state 728
## Reductions:
-- On Rparen
--   reduce production param_list -> param

State 728:
## Known stack suffix:
## param Comma
## LR(1) items:
param_list -> param Comma . param_list [ Rparen ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 713
-- On param_list shift to state 729
-- On param shift to state 727
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production param_list ->

State 729:
## Known stack suffix:
## param Comma param_list
## LR(1) items:
param_list -> param Comma param_list . [ Rparen ]
## Transitions:
## Reductions:
-- On Rparen
--   reduce production param_list -> param Comma param_list

State 730:
## Known stack suffix:
## local_eq
## LR(1) items:
instruction -> local_eq . Kw_add opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_sub opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_mul opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_shl opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fadd fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fsub fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fmul fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fdiv fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_frem fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_sdiv opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_udiv opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_lshr opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_ashr opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_urem type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_srem type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_and type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_or type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_xor type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_icmp icmp_predicate type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fcmp fcmp_predicate type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_trunc type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_zext type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_sext type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fptrunc type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fpext type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_bitcast type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_addrspacecast type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_uitofp type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_sitofp type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fptoui type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_fptosi type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_inttoptr type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_ptrtoint type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_va_arg type_value Comma typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_getelementptr opt_inbounds type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_extractelement type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_insertelement type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_shufflevector type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_select type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_phi typ phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_alloca alloc_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_load opt_atomic opt_volatile type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_extractvalue type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction -> local_eq . Kw_insertvalue type_value Comma type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
opt_local -> local_eq . [ Kw_tail Kw_musttail Kw_call ]
terminator_instruction -> local_eq . Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_zext shift to state 731
-- On Kw_xor shift to state 736
-- On Kw_va_arg shift to state 741
-- On Kw_urem shift to state 746
-- On Kw_uitofp shift to state 751
-- On Kw_udiv shift to state 756
-- On Kw_trunc shift to state 762
-- On Kw_sub shift to state 767
-- On Kw_srem shift to state 773
-- On Kw_sitofp shift to state 778
-- On Kw_shufflevector shift to state 783
-- On Kw_shl shift to state 789
-- On Kw_sext shift to state 795
-- On Kw_select shift to state 800
-- On Kw_sdiv shift to state 802
-- On Kw_ptrtoint shift to state 808
-- On Kw_phi shift to state 813
-- On Kw_or shift to state 824
-- On Kw_mul shift to state 829
-- On Kw_lshr shift to state 835
-- On Kw_load shift to state 841
-- On Kw_landingpad shift to state 847
-- On Kw_invoke shift to state 863
-- On Kw_inttoptr shift to state 877
-- On Kw_insertvalue shift to state 882
-- On Kw_insertelement shift to state 892
-- On Kw_icmp shift to state 894
-- On Kw_getelementptr shift to state 900
-- On Kw_fsub shift to state 903
-- On Kw_frem shift to state 916
-- On Kw_fptrunc shift to state 922
-- On Kw_fptoui shift to state 927
-- On Kw_fptosi shift to state 932
-- On Kw_fpext shift to state 937
-- On Kw_fmul shift to state 942
-- On Kw_fdiv shift to state 948
-- On Kw_fcmp shift to state 954
-- On Kw_fadd shift to state 960
-- On Kw_extractvalue shift to state 966
-- On Kw_extractelement shift to state 969
-- On Kw_bitcast shift to state 971
-- On Kw_ashr shift to state 976
-- On Kw_and shift to state 982
-- On Kw_alloca shift to state 987
-- On Kw_addrspacecast shift to state 1014
-- On Kw_add shift to state 1019
## Reductions:
-- On Kw_tail Kw_musttail Kw_call
--   reduce production opt_local -> local_eq

State 731:
## Known stack suffix:
## local_eq Kw_zext
## LR(1) items:
instruction -> local_eq Kw_zext . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 732
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 732:
## Known stack suffix:
## local_eq Kw_zext type_value
## LR(1) items:
instruction -> local_eq Kw_zext type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 733
## Reductions:

State 733:
## Known stack suffix:
## local_eq Kw_zext type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_zext type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 734
-- On non_void_type shift to state 71
## Reductions:

State 734:
## Known stack suffix:
## local_eq Kw_zext type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_zext type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 735
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 735:
## Known stack suffix:
## local_eq Kw_zext type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_zext type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_zext type_value Kw_to typ instruction_metadata

State 736:
## Known stack suffix:
## local_eq Kw_xor
## LR(1) items:
instruction -> local_eq Kw_xor . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 737
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 737:
## Known stack suffix:
## local_eq Kw_xor type_value
## LR(1) items:
instruction -> local_eq Kw_xor type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 738
## Reductions:

State 738:
## Known stack suffix:
## local_eq Kw_xor type_value Comma
## LR(1) items:
instruction -> local_eq Kw_xor type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 739
## Reductions:

State 739:
## Known stack suffix:
## local_eq Kw_xor type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_xor type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 740
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 740:
## Known stack suffix:
## local_eq Kw_xor type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_xor type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_xor type_value Comma value instruction_metadata

State 741:
## Known stack suffix:
## local_eq Kw_va_arg
## LR(1) items:
instruction -> local_eq Kw_va_arg . type_value Comma typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 742
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 742:
## Known stack suffix:
## local_eq Kw_va_arg type_value
## LR(1) items:
instruction -> local_eq Kw_va_arg type_value . Comma typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 743
## Reductions:

State 743:
## Known stack suffix:
## local_eq Kw_va_arg type_value Comma
## LR(1) items:
instruction -> local_eq Kw_va_arg type_value Comma . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 744
-- On non_void_type shift to state 71
## Reductions:

State 744:
## Known stack suffix:
## local_eq Kw_va_arg type_value Comma typ
## LR(1) items:
instruction -> local_eq Kw_va_arg type_value Comma typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 745
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 745:
## Known stack suffix:
## local_eq Kw_va_arg type_value Comma typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_va_arg type_value Comma typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_va_arg type_value Comma typ instruction_metadata

State 746:
## Known stack suffix:
## local_eq Kw_urem
## LR(1) items:
instruction -> local_eq Kw_urem . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 747
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 747:
## Known stack suffix:
## local_eq Kw_urem type_value
## LR(1) items:
instruction -> local_eq Kw_urem type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## local_eq Kw_urem type_value Comma
## LR(1) items:
instruction -> local_eq Kw_urem type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 749
## Reductions:

State 749:
## Known stack suffix:
## local_eq Kw_urem type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_urem type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 750
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 750:
## Known stack suffix:
## local_eq Kw_urem type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_urem type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_urem type_value Comma value instruction_metadata

State 751:
## Known stack suffix:
## local_eq Kw_uitofp
## LR(1) items:
instruction -> local_eq Kw_uitofp . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 752
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 752:
## Known stack suffix:
## local_eq Kw_uitofp type_value
## LR(1) items:
instruction -> local_eq Kw_uitofp type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 753
## Reductions:

State 753:
## Known stack suffix:
## local_eq Kw_uitofp type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_uitofp type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 754
-- On non_void_type shift to state 71
## Reductions:

State 754:
## Known stack suffix:
## local_eq Kw_uitofp type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_uitofp type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 755
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 755:
## Known stack suffix:
## local_eq Kw_uitofp type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_uitofp type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_uitofp type_value Kw_to typ instruction_metadata

State 756:
## Known stack suffix:
## local_eq Kw_udiv
## LR(1) items:
instruction -> local_eq Kw_udiv . opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 757
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_exact ->

State 757:
## Known stack suffix:
## local_eq Kw_udiv opt_exact
## LR(1) items:
instruction -> local_eq Kw_udiv opt_exact . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 758
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 758:
## Known stack suffix:
## local_eq Kw_udiv opt_exact type_value
## LR(1) items:
instruction -> local_eq Kw_udiv opt_exact type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 759
## Reductions:

State 759:
## Known stack suffix:
## local_eq Kw_udiv opt_exact type_value Comma
## LR(1) items:
instruction -> local_eq Kw_udiv opt_exact type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 760
## Reductions:

State 760:
## Known stack suffix:
## local_eq Kw_udiv opt_exact type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_udiv opt_exact type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 761
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 761:
## Known stack suffix:
## local_eq Kw_udiv opt_exact type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_udiv opt_exact type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_udiv opt_exact type_value Comma value instruction_metadata

State 762:
## Known stack suffix:
## local_eq Kw_trunc
## LR(1) items:
instruction -> local_eq Kw_trunc . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 763
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 763:
## Known stack suffix:
## local_eq Kw_trunc type_value
## LR(1) items:
instruction -> local_eq Kw_trunc type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 764
## Reductions:

State 764:
## Known stack suffix:
## local_eq Kw_trunc type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_trunc type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 765
-- On non_void_type shift to state 71
## Reductions:

State 765:
## Known stack suffix:
## local_eq Kw_trunc type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_trunc type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 766
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 766:
## Known stack suffix:
## local_eq Kw_trunc type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_trunc type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_trunc type_value Kw_to typ instruction_metadata

State 767:
## Known stack suffix:
## local_eq Kw_sub
## LR(1) items:
instruction -> local_eq Kw_sub . opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 768
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw ->

State 768:
## Known stack suffix:
## local_eq Kw_sub opt_nuw_nsw
## LR(1) items:
instruction -> local_eq Kw_sub opt_nuw_nsw . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 769
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 769:
## Known stack suffix:
## local_eq Kw_sub opt_nuw_nsw type_value
## LR(1) items:
instruction -> local_eq Kw_sub opt_nuw_nsw type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 770
## Reductions:

State 770:
## Known stack suffix:
## local_eq Kw_sub opt_nuw_nsw type_value Comma
## LR(1) items:
instruction -> local_eq Kw_sub opt_nuw_nsw type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 771
## Reductions:

State 771:
## Known stack suffix:
## local_eq Kw_sub opt_nuw_nsw type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_sub opt_nuw_nsw type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 772
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 772:
## Known stack suffix:
## local_eq Kw_sub opt_nuw_nsw type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_sub opt_nuw_nsw type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_sub opt_nuw_nsw type_value Comma value instruction_metadata

State 773:
## Known stack suffix:
## local_eq Kw_srem
## LR(1) items:
instruction -> local_eq Kw_srem . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 774
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 774:
## Known stack suffix:
## local_eq Kw_srem type_value
## LR(1) items:
instruction -> local_eq Kw_srem type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 775
## Reductions:

State 775:
## Known stack suffix:
## local_eq Kw_srem type_value Comma
## LR(1) items:
instruction -> local_eq Kw_srem type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 776
## Reductions:

State 776:
## Known stack suffix:
## local_eq Kw_srem type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_srem type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 777
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 777:
## Known stack suffix:
## local_eq Kw_srem type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_srem type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_srem type_value Comma value instruction_metadata

State 778:
## Known stack suffix:
## local_eq Kw_sitofp
## LR(1) items:
instruction -> local_eq Kw_sitofp . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 779
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 779:
## Known stack suffix:
## local_eq Kw_sitofp type_value
## LR(1) items:
instruction -> local_eq Kw_sitofp type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 780
## Reductions:

State 780:
## Known stack suffix:
## local_eq Kw_sitofp type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_sitofp type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 781
-- On non_void_type shift to state 71
## Reductions:

State 781:
## Known stack suffix:
## local_eq Kw_sitofp type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_sitofp type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 782
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 782:
## Known stack suffix:
## local_eq Kw_sitofp type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_sitofp type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_sitofp type_value Kw_to typ instruction_metadata

State 783:
## Known stack suffix:
## local_eq Kw_shufflevector
## LR(1) items:
instruction -> local_eq Kw_shufflevector . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 784
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 784:
## Known stack suffix:
## local_eq Kw_shufflevector type_value_LIST_metadata
## LR(1) items:
instruction -> local_eq Kw_shufflevector type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_shufflevector type_value_LIST_metadata

State 785:
## Known stack suffix:
## type_value
## LR(1) items:
type_value_LIST_metadata -> type_value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
type_value_LIST_metadata -> type_value . Comma type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 786
-- On instruction_metadata shift to state 788
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 786:
## Known stack suffix:
## type_value Comma
## LR(1) items:
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
type_value_LIST_metadata -> type_value Comma . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 787
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 787:
## Known stack suffix:
## type_value Comma type_value_LIST_metadata
## LR(1) items:
type_value_LIST_metadata -> type_value Comma type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production type_value_LIST_metadata -> type_value Comma type_value_LIST_metadata

State 788:
## Known stack suffix:
## type_value instruction_metadata
## LR(1) items:
type_value_LIST_metadata -> type_value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production type_value_LIST_metadata -> type_value instruction_metadata

State 789:
## Known stack suffix:
## local_eq Kw_shl
## LR(1) items:
instruction -> local_eq Kw_shl . opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 790
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw ->

State 790:
## Known stack suffix:
## local_eq Kw_shl opt_nuw_nsw
## LR(1) items:
instruction -> local_eq Kw_shl opt_nuw_nsw . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 791
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 791:
## Known stack suffix:
## local_eq Kw_shl opt_nuw_nsw type_value
## LR(1) items:
instruction -> local_eq Kw_shl opt_nuw_nsw type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 792
## Reductions:

State 792:
## Known stack suffix:
## local_eq Kw_shl opt_nuw_nsw type_value Comma
## LR(1) items:
instruction -> local_eq Kw_shl opt_nuw_nsw type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 793
## Reductions:

State 793:
## Known stack suffix:
## local_eq Kw_shl opt_nuw_nsw type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_shl opt_nuw_nsw type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 794
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 794:
## Known stack suffix:
## local_eq Kw_shl opt_nuw_nsw type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_shl opt_nuw_nsw type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_shl opt_nuw_nsw type_value Comma value instruction_metadata

State 795:
## Known stack suffix:
## local_eq Kw_sext
## LR(1) items:
instruction -> local_eq Kw_sext . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 796
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 796:
## Known stack suffix:
## local_eq Kw_sext type_value
## LR(1) items:
instruction -> local_eq Kw_sext type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 797
## Reductions:

State 797:
## Known stack suffix:
## local_eq Kw_sext type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_sext type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 798
-- On non_void_type shift to state 71
## Reductions:

State 798:
## Known stack suffix:
## local_eq Kw_sext type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_sext type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 799
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 799:
## Known stack suffix:
## local_eq Kw_sext type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_sext type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_sext type_value Kw_to typ instruction_metadata

State 800:
## Known stack suffix:
## local_eq Kw_select
## LR(1) items:
instruction -> local_eq Kw_select . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 801
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 801:
## Known stack suffix:
## local_eq Kw_select type_value_LIST_metadata
## LR(1) items:
instruction -> local_eq Kw_select type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_select type_value_LIST_metadata

State 802:
## Known stack suffix:
## local_eq Kw_sdiv
## LR(1) items:
instruction -> local_eq Kw_sdiv . opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 803
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_exact ->

State 803:
## Known stack suffix:
## local_eq Kw_sdiv opt_exact
## LR(1) items:
instruction -> local_eq Kw_sdiv opt_exact . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 804
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 804:
## Known stack suffix:
## local_eq Kw_sdiv opt_exact type_value
## LR(1) items:
instruction -> local_eq Kw_sdiv opt_exact type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 805
## Reductions:

State 805:
## Known stack suffix:
## local_eq Kw_sdiv opt_exact type_value Comma
## LR(1) items:
instruction -> local_eq Kw_sdiv opt_exact type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 806
## Reductions:

State 806:
## Known stack suffix:
## local_eq Kw_sdiv opt_exact type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_sdiv opt_exact type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 807
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 807:
## Known stack suffix:
## local_eq Kw_sdiv opt_exact type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_sdiv opt_exact type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_sdiv opt_exact type_value Comma value instruction_metadata

State 808:
## Known stack suffix:
## local_eq Kw_ptrtoint
## LR(1) items:
instruction -> local_eq Kw_ptrtoint . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 809
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 809:
## Known stack suffix:
## local_eq Kw_ptrtoint type_value
## LR(1) items:
instruction -> local_eq Kw_ptrtoint type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 810
## Reductions:

State 810:
## Known stack suffix:
## local_eq Kw_ptrtoint type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_ptrtoint type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 811
-- On non_void_type shift to state 71
## Reductions:

State 811:
## Known stack suffix:
## local_eq Kw_ptrtoint type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_ptrtoint type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 812
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 812:
## Known stack suffix:
## local_eq Kw_ptrtoint type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_ptrtoint type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_ptrtoint type_value Kw_to typ instruction_metadata

State 813:
## Known stack suffix:
## local_eq Kw_phi
## LR(1) items:
instruction -> local_eq Kw_phi . typ phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 814
-- On non_void_type shift to state 71
## Reductions:

State 814:
## Known stack suffix:
## local_eq Kw_phi typ
## LR(1) items:
instruction -> local_eq Kw_phi typ . phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen Kw_addrspace ]
## Transitions:
-- On Lsquare shift to state 815
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On phi_list_metadata shift to state 823
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 815:
## Known stack suffix:
## Lsquare
## LR(1) items:
phi_list_metadata -> Lsquare . value Comma value Rsquare instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare . value Comma value Rsquare Comma phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 816
## Reductions:

State 816:
## Known stack suffix:
## Lsquare value
## LR(1) items:
phi_list_metadata -> Lsquare value . Comma value Rsquare instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare value . Comma value Rsquare Comma phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## Lsquare value Comma
## LR(1) items:
phi_list_metadata -> Lsquare value Comma . value Rsquare instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare value Comma . value Rsquare Comma phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 818
## Reductions:

State 818:
## Known stack suffix:
## Lsquare value Comma value
## LR(1) items:
phi_list_metadata -> Lsquare value Comma value . Rsquare instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare value Comma value . Rsquare Comma phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rsquare shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## Lsquare value Comma value Rsquare
## LR(1) items:
phi_list_metadata -> Lsquare value Comma value Rsquare . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare value Comma value Rsquare . Comma phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 820
-- On instruction_metadata shift to state 822
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 820:
## Known stack suffix:
## Lsquare value Comma value Rsquare Comma
## LR(1) items:
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
phi_list_metadata -> Lsquare value Comma value Rsquare Comma . phi_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Lsquare shift to state 815
-- On phi_list_metadata shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## Lsquare value Comma value Rsquare Comma phi_list_metadata
## LR(1) items:
phi_list_metadata -> Lsquare value Comma value Rsquare Comma phi_list_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production phi_list_metadata -> Lsquare value Comma value Rsquare Comma phi_list_metadata

State 822:
## Known stack suffix:
## Lsquare value Comma value Rsquare instruction_metadata
## LR(1) items:
phi_list_metadata -> Lsquare value Comma value Rsquare instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production phi_list_metadata -> Lsquare value Comma value Rsquare instruction_metadata

State 823:
## Known stack suffix:
## local_eq Kw_phi typ phi_list_metadata
## LR(1) items:
instruction -> local_eq Kw_phi typ phi_list_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_phi typ phi_list_metadata

State 824:
## Known stack suffix:
## local_eq Kw_or
## LR(1) items:
instruction -> local_eq Kw_or . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 825
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 825:
## Known stack suffix:
## local_eq Kw_or type_value
## LR(1) items:
instruction -> local_eq Kw_or type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 826
## Reductions:

State 826:
## Known stack suffix:
## local_eq Kw_or type_value Comma
## LR(1) items:
instruction -> local_eq Kw_or type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 827
## Reductions:

State 827:
## Known stack suffix:
## local_eq Kw_or type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_or type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 828
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 828:
## Known stack suffix:
## local_eq Kw_or type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_or type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_or type_value Comma value instruction_metadata

State 829:
## Known stack suffix:
## local_eq Kw_mul
## LR(1) items:
instruction -> local_eq Kw_mul . opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 830
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw ->

State 830:
## Known stack suffix:
## local_eq Kw_mul opt_nuw_nsw
## LR(1) items:
instruction -> local_eq Kw_mul opt_nuw_nsw . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 831
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 831:
## Known stack suffix:
## local_eq Kw_mul opt_nuw_nsw type_value
## LR(1) items:
instruction -> local_eq Kw_mul opt_nuw_nsw type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 832
## Reductions:

State 832:
## Known stack suffix:
## local_eq Kw_mul opt_nuw_nsw type_value Comma
## LR(1) items:
instruction -> local_eq Kw_mul opt_nuw_nsw type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 833
## Reductions:

State 833:
## Known stack suffix:
## local_eq Kw_mul opt_nuw_nsw type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_mul opt_nuw_nsw type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 834
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 834:
## Known stack suffix:
## local_eq Kw_mul opt_nuw_nsw type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_mul opt_nuw_nsw type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_mul opt_nuw_nsw type_value Comma value instruction_metadata

State 835:
## Known stack suffix:
## local_eq Kw_lshr
## LR(1) items:
instruction -> local_eq Kw_lshr . opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 836
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_exact ->

State 836:
## Known stack suffix:
## local_eq Kw_lshr opt_exact
## LR(1) items:
instruction -> local_eq Kw_lshr opt_exact . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 837
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 837:
## Known stack suffix:
## local_eq Kw_lshr opt_exact type_value
## LR(1) items:
instruction -> local_eq Kw_lshr opt_exact type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 838
## Reductions:

State 838:
## Known stack suffix:
## local_eq Kw_lshr opt_exact type_value Comma
## LR(1) items:
instruction -> local_eq Kw_lshr opt_exact type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 839
## Reductions:

State 839:
## Known stack suffix:
## local_eq Kw_lshr opt_exact type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_lshr opt_exact type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 840
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 840:
## Known stack suffix:
## local_eq Kw_lshr opt_exact type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_lshr opt_exact type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_lshr opt_exact type_value Comma value instruction_metadata

State 841:
## Known stack suffix:
## local_eq Kw_load
## LR(1) items:
instruction -> local_eq Kw_load . opt_atomic opt_volatile type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_atomic shift to state 617
-- On opt_atomic shift to state 842
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_volatile Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_atomic ->

State 842:
## Known stack suffix:
## local_eq Kw_load opt_atomic
## LR(1) items:
instruction -> local_eq Kw_load opt_atomic . opt_volatile type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_volatile shift to state 619
-- On opt_volatile shift to state 843
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_volatile ->

State 843:
## Known stack suffix:
## local_eq Kw_load opt_atomic opt_volatile
## LR(1) items:
instruction -> local_eq Kw_load opt_atomic opt_volatile . type_value scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 844
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 844:
## Known stack suffix:
## local_eq Kw_load opt_atomic opt_volatile type_value
## LR(1) items:
instruction -> local_eq Kw_load opt_atomic opt_volatile type_value . scopeandordering align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_singlethread shift to state 624
-- On scopeandordering shift to state 845
-- On opt_singlethread shift to state 632
## Reductions:
-- On Kw_unordered Kw_seq_cst Kw_release Kw_monotonic Kw_acquire Kw_acq_rel
--   reduce production opt_singlethread ->
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production scopeandordering ->

State 845:
## Known stack suffix:
## local_eq Kw_load opt_atomic opt_volatile type_value scopeandordering
## LR(1) items:
instruction -> local_eq Kw_load opt_atomic opt_volatile type_value scopeandordering . align_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 626
-- On instruction_metadata shift to state 630
-- On align_metadata shift to state 846
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 846:
## Known stack suffix:
## local_eq Kw_load opt_atomic opt_volatile type_value scopeandordering align_metadata
## LR(1) items:
instruction -> local_eq Kw_load opt_atomic opt_volatile type_value scopeandordering align_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_load opt_atomic opt_volatile type_value scopeandordering align_metadata

State 847:
## Known stack suffix:
## local_eq Kw_landingpad
## LR(1) items:
instruction -> local_eq Kw_landingpad . typ Kw_personality type_value opt_cleanup landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 848
-- On non_void_type shift to state 71
## Reductions:

State 848:
## Known stack suffix:
## local_eq Kw_landingpad typ
## LR(1) items:
instruction -> local_eq Kw_landingpad typ . Kw_personality type_value opt_cleanup landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen Kw_personality Kw_addrspace ]
non_void_type -> typ . argument_list [ Star Lparen Kw_personality Kw_addrspace ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_personality shift to state 849
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 849:
## Known stack suffix:
## local_eq Kw_landingpad typ Kw_personality
## LR(1) items:
instruction -> local_eq Kw_landingpad typ Kw_personality . type_value opt_cleanup landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 850
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 850:
## Known stack suffix:
## local_eq Kw_landingpad typ Kw_personality type_value
## LR(1) items:
instruction -> local_eq Kw_landingpad typ Kw_personality type_value . opt_cleanup landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_cleanup shift to state 851
-- On opt_cleanup shift to state 852
## Reductions:
-- On Kw_filter Kw_catch
--   reduce production opt_cleanup ->

State 851:
## Known stack suffix:
## Kw_cleanup
## LR(1) items:
opt_cleanup -> Kw_cleanup . [ Kw_filter Kw_catch ]
## Transitions:
## Reductions:
-- On Kw_filter Kw_catch
--   reduce production opt_cleanup -> Kw_cleanup

State 852:
## Known stack suffix:
## local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup
## LR(1) items:
instruction -> local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup . landingpad_list instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_filter shift to state 853
-- On Kw_catch shift to state 856
-- On landingpad_list shift to state 861
## Reductions:

State 853:
## Known stack suffix:
## Kw_filter
## LR(1) items:
landingpad_list -> Kw_filter . typ value [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_filter . typ value landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 854
-- On non_void_type shift to state 71
## Reductions:

State 854:
## Known stack suffix:
## Kw_filter typ
## LR(1) items:
landingpad_list -> Kw_filter typ . value [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_filter typ . value landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 855
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 855:
## Known stack suffix:
## Kw_filter typ value
## LR(1) items:
landingpad_list -> Kw_filter typ value . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_filter typ value . landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Kw_filter shift to state 853
-- On Kw_catch shift to state 856
-- On landingpad_list shift to state 860
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production landingpad_list -> Kw_filter typ value

State 856:
## Known stack suffix:
## Kw_catch
## LR(1) items:
landingpad_list -> Kw_catch . typ value [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_catch . typ value landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 857
-- On non_void_type shift to state 71
## Reductions:

State 857:
## Known stack suffix:
## Kw_catch typ
## LR(1) items:
landingpad_list -> Kw_catch typ . value [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_catch typ . value landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 858
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 858:
## Known stack suffix:
## Kw_catch typ value
## LR(1) items:
landingpad_list -> Kw_catch typ value . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
landingpad_list -> Kw_catch typ value . landingpad_list [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
-- On Kw_filter shift to state 853
-- On Kw_catch shift to state 856
-- On landingpad_list shift to state 859
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production landingpad_list -> Kw_catch typ value

State 859:
## Known stack suffix:
## Kw_catch typ value landingpad_list
## LR(1) items:
landingpad_list -> Kw_catch typ value landingpad_list . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production landingpad_list -> Kw_catch typ value landingpad_list

State 860:
## Known stack suffix:
## Kw_filter typ value landingpad_list
## LR(1) items:
landingpad_list -> Kw_filter typ value landingpad_list . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Comma
--   reduce production landingpad_list -> Kw_filter typ value landingpad_list

State 861:
## Known stack suffix:
## local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list
## LR(1) items:
instruction -> local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 862
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 862:
## Known stack suffix:
## local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_landingpad typ Kw_personality type_value opt_cleanup landingpad_list instruction_metadata

State 863:
## Known stack suffix:
## local_eq Kw_invoke
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke . opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_x86_thiscallcc shift to state 134
-- On Kw_x86_stdcallcc shift to state 135
-- On Kw_x86_fastcallcc shift to state 136
-- On Kw_x86_cdeclmethodcc shift to state 137
-- On Kw_x86_64_win64cc shift to state 138
-- On Kw_x86_64_sysvcc shift to state 139
-- On Kw_webkit_jscc shift to state 140
-- On Kw_spir_kernel shift to state 141
-- On Kw_spir_func shift to state 142
-- On Kw_ptx_kernel shift to state 143
-- On Kw_ptx_device shift to state 144
-- On Kw_preserve_mostcc shift to state 145
-- On Kw_preserve_allcc shift to state 146
-- On Kw_msp430_intrcc shift to state 147
-- On Kw_intel_ocl_bicc shift to state 148
-- On Kw_fastcc shift to state 149
-- On Kw_coldcc shift to state 150
-- On Kw_ccc shift to state 151
-- On Kw_cc shift to state 152
-- On Kw_arm_apcscc shift to state 153
-- On Kw_arm_aapcscc shift to state 154
-- On Kw_arm_aapcs_vfpcc shift to state 155
-- On Kw_anyregcc shift to state 156
-- On opt_callingconv shift to state 864
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_signext Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_metadata Kw_label Kw_inreg Kw_half Kw_fp128 Kw_float Kw_double Kw_dereferenceable I
--   reduce production opt_callingconv ->

State 864:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv . return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_zeroext shift to state 158
-- On Kw_signext shift to state 159
-- On Kw_nonnull shift to state 160
-- On Kw_noalias shift to state 161
-- On Kw_inreg shift to state 162
-- On Kw_dereferenceable shift to state 163
-- On return_attributes shift to state 865
-- On return_attribute shift to state 583
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production return_attributes ->

State 865:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes . typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 866
-- On non_void_type shift to state 71
## Reductions:

State 866:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ . value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 867
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 867:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value . Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lparen shift to state 868
## Reductions:

State 868:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen . param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 713
-- On param_list shift to state 869
-- On param shift to state 727
-- On non_void_type shift to state 71
## Reductions:
-- On Rparen
--   reduce production param_list ->

State 869:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list . Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Rparen shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen . function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On StringConstant shift to state 175
-- On Kw_uwtable shift to state 178
-- On Kw_sspstrong shift to state 179
-- On Kw_sspreq shift to state 180
-- On Kw_ssp shift to state 181
-- On Kw_sanitize_thread shift to state 182
-- On Kw_sanitize_memory shift to state 183
-- On Kw_sanitize_address shift to state 184
-- On Kw_returns_twice shift to state 185
-- On Kw_readonly shift to state 186
-- On Kw_readnone shift to state 187
-- On Kw_optsize shift to state 188
-- On Kw_optnone shift to state 189
-- On Kw_nounwind shift to state 190
-- On Kw_noreturn shift to state 191
-- On Kw_noredzone shift to state 192
-- On Kw_nonlazybind shift to state 193
-- On Kw_noinline shift to state 194
-- On Kw_noimplicitfloat shift to state 195
-- On Kw_noduplicate shift to state 196
-- On Kw_nobuiltin shift to state 197
-- On Kw_naked shift to state 198
-- On Kw_minsize shift to state 199
-- On Kw_jumptable shift to state 200
-- On Kw_inlinehint shift to state 201
-- On Kw_cold shift to state 202
-- On Kw_builtin shift to state 203
-- On Kw_alwaysinline shift to state 204
-- On Kw_alignstack shift to state 205
-- On AttrGrpID shift to state 210
-- On function_attributes shift to state 871
-- On function_attribute shift to state 581
## Reductions:
-- On Kw_to
--   reduce production function_attributes ->

State 871:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes . Kw_to type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 872
## Reductions:

State 872:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to . type_value Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 873
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 873:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value . Kw_unwind type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_unwind shift to state 874
## Reductions:

State 874:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind . type_value instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 875
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 875:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value . instruction_metadata [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 876
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 876:
## Known stack suffix:
## local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata
## LR(1) items:
terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production terminator_instruction -> local_eq Kw_invoke opt_callingconv return_attributes typ value Lparen param_list Rparen function_attributes Kw_to type_value Kw_unwind type_value instruction_metadata

State 877:
## Known stack suffix:
## local_eq Kw_inttoptr
## LR(1) items:
instruction -> local_eq Kw_inttoptr . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 878
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 878:
## Known stack suffix:
## local_eq Kw_inttoptr type_value
## LR(1) items:
instruction -> local_eq Kw_inttoptr type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 879
## Reductions:

State 879:
## Known stack suffix:
## local_eq Kw_inttoptr type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_inttoptr type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 880
-- On non_void_type shift to state 71
## Reductions:

State 880:
## Known stack suffix:
## local_eq Kw_inttoptr type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_inttoptr type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 881
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 881:
## Known stack suffix:
## local_eq Kw_inttoptr type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_inttoptr type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_inttoptr type_value Kw_to typ instruction_metadata

State 882:
## Known stack suffix:
## local_eq Kw_insertvalue
## LR(1) items:
instruction -> local_eq Kw_insertvalue . type_value Comma type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 883
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 883:
## Known stack suffix:
## local_eq Kw_insertvalue type_value
## LR(1) items:
instruction -> local_eq Kw_insertvalue type_value . Comma type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 884
## Reductions:

State 884:
## Known stack suffix:
## local_eq Kw_insertvalue type_value Comma
## LR(1) items:
instruction -> local_eq Kw_insertvalue type_value Comma . type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 885
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 885:
## Known stack suffix:
## local_eq Kw_insertvalue type_value Comma type_value
## LR(1) items:
instruction -> local_eq Kw_insertvalue type_value Comma type_value . index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 886
-- On index_list_metadata shift to state 891
## Reductions:

State 886:
## Known stack suffix:
## Comma
## LR(1) items:
index_list_metadata -> Comma . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
index_list_metadata -> Comma . APInt index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 887
## Reductions:

State 887:
## Known stack suffix:
## Comma APInt
## LR(1) items:
index_list_metadata -> Comma APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
index_list_metadata -> Comma APInt . index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 888
-- On instruction_metadata shift to state 889
-- On index_list_metadata shift to state 890
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 888:
## Known stack suffix:
## Comma
## LR(1) items:
index_list_metadata -> Comma . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
index_list_metadata -> Comma . APInt index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On APInt shift to state 887
## Reductions:

State 889:
## Known stack suffix:
## Comma APInt instruction_metadata
## LR(1) items:
index_list_metadata -> Comma APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production index_list_metadata -> Comma APInt instruction_metadata

State 890:
## Known stack suffix:
## Comma APInt index_list_metadata
## LR(1) items:
index_list_metadata -> Comma APInt index_list_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production index_list_metadata -> Comma APInt index_list_metadata

State 891:
## Known stack suffix:
## local_eq Kw_insertvalue type_value Comma type_value index_list_metadata
## LR(1) items:
instruction -> local_eq Kw_insertvalue type_value Comma type_value index_list_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_insertvalue type_value Comma type_value index_list_metadata

State 892:
## Known stack suffix:
## local_eq Kw_insertelement
## LR(1) items:
instruction -> local_eq Kw_insertelement . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 893
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 893:
## Known stack suffix:
## local_eq Kw_insertelement type_value_LIST_metadata
## LR(1) items:
instruction -> local_eq Kw_insertelement type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_insertelement type_value_LIST_metadata

State 894:
## Known stack suffix:
## local_eq Kw_icmp
## LR(1) items:
instruction -> local_eq Kw_icmp . icmp_predicate type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_ult shift to state 389
-- On Kw_ule shift to state 390
-- On Kw_ugt shift to state 391
-- On Kw_uge shift to state 392
-- On Kw_slt shift to state 393
-- On Kw_sle shift to state 394
-- On Kw_sgt shift to state 395
-- On Kw_sge shift to state 396
-- On Kw_ne shift to state 397
-- On Kw_eq shift to state 398
-- On icmp_predicate shift to state 895
## Reductions:

State 895:
## Known stack suffix:
## local_eq Kw_icmp icmp_predicate
## LR(1) items:
instruction -> local_eq Kw_icmp icmp_predicate . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 896
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 896:
## Known stack suffix:
## local_eq Kw_icmp icmp_predicate type_value
## LR(1) items:
instruction -> local_eq Kw_icmp icmp_predicate type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 897
## Reductions:

State 897:
## Known stack suffix:
## local_eq Kw_icmp icmp_predicate type_value Comma
## LR(1) items:
instruction -> local_eq Kw_icmp icmp_predicate type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 898
## Reductions:

State 898:
## Known stack suffix:
## local_eq Kw_icmp icmp_predicate type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_icmp icmp_predicate type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 899
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 899:
## Known stack suffix:
## local_eq Kw_icmp icmp_predicate type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_icmp icmp_predicate type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_icmp icmp_predicate type_value Comma value instruction_metadata

State 900:
## Known stack suffix:
## local_eq Kw_getelementptr
## LR(1) items:
instruction -> local_eq Kw_getelementptr . opt_inbounds type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_inbounds shift to state 406
-- On opt_inbounds shift to state 901
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_inbounds ->

State 901:
## Known stack suffix:
## local_eq Kw_getelementptr opt_inbounds
## LR(1) items:
instruction -> local_eq Kw_getelementptr opt_inbounds . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 902
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 902:
## Known stack suffix:
## local_eq Kw_getelementptr opt_inbounds type_value_LIST_metadata
## LR(1) items:
instruction -> local_eq Kw_getelementptr opt_inbounds type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_getelementptr opt_inbounds type_value_LIST_metadata

State 903:
## Known stack suffix:
## local_eq Kw_fsub
## LR(1) items:
instruction -> local_eq Kw_fsub . fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 909
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 904:
## Known stack suffix:
## Kw_nsz
## LR(1) items:
fast_math_flag -> Kw_nsz . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I
--   reduce production fast_math_flag -> Kw_nsz

State 905:
## Known stack suffix:
## Kw_nnan
## LR(1) items:
fast_math_flag -> Kw_nnan . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I
--   reduce production fast_math_flag -> Kw_nnan

State 906:
## Known stack suffix:
## Kw_ninf
## LR(1) items:
fast_math_flag -> Kw_ninf . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I
--   reduce production fast_math_flag -> Kw_ninf

State 907:
## Known stack suffix:
## Kw_fast
## LR(1) items:
fast_math_flag -> Kw_fast . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I
--   reduce production fast_math_flag -> Kw_fast

State 908:
## Known stack suffix:
## Kw_arcp
## LR(1) items:
fast_math_flag -> Kw_arcp . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_nsz Kw_nnan Kw_ninf Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_fast Kw_double Kw_arcp I
--   reduce production fast_math_flag -> Kw_arcp

State 909:
## Known stack suffix:
## local_eq Kw_fsub fast_math_flags
## LR(1) items:
instruction -> local_eq Kw_fsub fast_math_flags . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 910
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 910:
## Known stack suffix:
## local_eq Kw_fsub fast_math_flags type_value
## LR(1) items:
instruction -> local_eq Kw_fsub fast_math_flags type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 911
## Reductions:

State 911:
## Known stack suffix:
## local_eq Kw_fsub fast_math_flags type_value Comma
## LR(1) items:
instruction -> local_eq Kw_fsub fast_math_flags type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 912
## Reductions:

State 912:
## Known stack suffix:
## local_eq Kw_fsub fast_math_flags type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_fsub fast_math_flags type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 913
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 913:
## Known stack suffix:
## local_eq Kw_fsub fast_math_flags type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fsub fast_math_flags type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fsub fast_math_flags type_value Comma value instruction_metadata

State 914:
## Known stack suffix:
## fast_math_flag
## LR(1) items:
fast_math_flags -> fast_math_flag . fast_math_flags [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 915
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 915:
## Known stack suffix:
## fast_math_flag fast_math_flags
## LR(1) items:
fast_math_flags -> fast_math_flag fast_math_flags . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags -> fast_math_flag fast_math_flags

State 916:
## Known stack suffix:
## local_eq Kw_frem
## LR(1) items:
instruction -> local_eq Kw_frem . fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 917
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 917:
## Known stack suffix:
## local_eq Kw_frem fast_math_flags
## LR(1) items:
instruction -> local_eq Kw_frem fast_math_flags . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 918
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 918:
## Known stack suffix:
## local_eq Kw_frem fast_math_flags type_value
## LR(1) items:
instruction -> local_eq Kw_frem fast_math_flags type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 919
## Reductions:

State 919:
## Known stack suffix:
## local_eq Kw_frem fast_math_flags type_value Comma
## LR(1) items:
instruction -> local_eq Kw_frem fast_math_flags type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 920
## Reductions:

State 920:
## Known stack suffix:
## local_eq Kw_frem fast_math_flags type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_frem fast_math_flags type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 921
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 921:
## Known stack suffix:
## local_eq Kw_frem fast_math_flags type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_frem fast_math_flags type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_frem fast_math_flags type_value Comma value instruction_metadata

State 922:
## Known stack suffix:
## local_eq Kw_fptrunc
## LR(1) items:
instruction -> local_eq Kw_fptrunc . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 923
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 923:
## Known stack suffix:
## local_eq Kw_fptrunc type_value
## LR(1) items:
instruction -> local_eq Kw_fptrunc type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 924
## Reductions:

State 924:
## Known stack suffix:
## local_eq Kw_fptrunc type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_fptrunc type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 925
-- On non_void_type shift to state 71
## Reductions:

State 925:
## Known stack suffix:
## local_eq Kw_fptrunc type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_fptrunc type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 926
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 926:
## Known stack suffix:
## local_eq Kw_fptrunc type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fptrunc type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fptrunc type_value Kw_to typ instruction_metadata

State 927:
## Known stack suffix:
## local_eq Kw_fptoui
## LR(1) items:
instruction -> local_eq Kw_fptoui . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 928
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 928:
## Known stack suffix:
## local_eq Kw_fptoui type_value
## LR(1) items:
instruction -> local_eq Kw_fptoui type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 929
## Reductions:

State 929:
## Known stack suffix:
## local_eq Kw_fptoui type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_fptoui type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 930
-- On non_void_type shift to state 71
## Reductions:

State 930:
## Known stack suffix:
## local_eq Kw_fptoui type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_fptoui type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 931
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 931:
## Known stack suffix:
## local_eq Kw_fptoui type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fptoui type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fptoui type_value Kw_to typ instruction_metadata

State 932:
## Known stack suffix:
## local_eq Kw_fptosi
## LR(1) items:
instruction -> local_eq Kw_fptosi . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 933
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 933:
## Known stack suffix:
## local_eq Kw_fptosi type_value
## LR(1) items:
instruction -> local_eq Kw_fptosi type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 934
## Reductions:

State 934:
## Known stack suffix:
## local_eq Kw_fptosi type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_fptosi type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 935
-- On non_void_type shift to state 71
## Reductions:

State 935:
## Known stack suffix:
## local_eq Kw_fptosi type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_fptosi type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 936
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 936:
## Known stack suffix:
## local_eq Kw_fptosi type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fptosi type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fptosi type_value Kw_to typ instruction_metadata

State 937:
## Known stack suffix:
## local_eq Kw_fpext
## LR(1) items:
instruction -> local_eq Kw_fpext . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 938
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 938:
## Known stack suffix:
## local_eq Kw_fpext type_value
## LR(1) items:
instruction -> local_eq Kw_fpext type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 939
## Reductions:

State 939:
## Known stack suffix:
## local_eq Kw_fpext type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_fpext type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 940
-- On non_void_type shift to state 71
## Reductions:

State 940:
## Known stack suffix:
## local_eq Kw_fpext type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_fpext type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 941
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 941:
## Known stack suffix:
## local_eq Kw_fpext type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fpext type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fpext type_value Kw_to typ instruction_metadata

State 942:
## Known stack suffix:
## local_eq Kw_fmul
## LR(1) items:
instruction -> local_eq Kw_fmul . fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 943
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 943:
## Known stack suffix:
## local_eq Kw_fmul fast_math_flags
## LR(1) items:
instruction -> local_eq Kw_fmul fast_math_flags . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 944
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 944:
## Known stack suffix:
## local_eq Kw_fmul fast_math_flags type_value
## LR(1) items:
instruction -> local_eq Kw_fmul fast_math_flags type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 945
## Reductions:

State 945:
## Known stack suffix:
## local_eq Kw_fmul fast_math_flags type_value Comma
## LR(1) items:
instruction -> local_eq Kw_fmul fast_math_flags type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 946
## Reductions:

State 946:
## Known stack suffix:
## local_eq Kw_fmul fast_math_flags type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_fmul fast_math_flags type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 947
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 947:
## Known stack suffix:
## local_eq Kw_fmul fast_math_flags type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fmul fast_math_flags type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fmul fast_math_flags type_value Comma value instruction_metadata

State 948:
## Known stack suffix:
## local_eq Kw_fdiv
## LR(1) items:
instruction -> local_eq Kw_fdiv . fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 949
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 949:
## Known stack suffix:
## local_eq Kw_fdiv fast_math_flags
## LR(1) items:
instruction -> local_eq Kw_fdiv fast_math_flags . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 950
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 950:
## Known stack suffix:
## local_eq Kw_fdiv fast_math_flags type_value
## LR(1) items:
instruction -> local_eq Kw_fdiv fast_math_flags type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 951
## Reductions:

State 951:
## Known stack suffix:
## local_eq Kw_fdiv fast_math_flags type_value Comma
## LR(1) items:
instruction -> local_eq Kw_fdiv fast_math_flags type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 952
## Reductions:

State 952:
## Known stack suffix:
## local_eq Kw_fdiv fast_math_flags type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_fdiv fast_math_flags type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 953
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 953:
## Known stack suffix:
## local_eq Kw_fdiv fast_math_flags type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fdiv fast_math_flags type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fdiv fast_math_flags type_value Comma value instruction_metadata

State 954:
## Known stack suffix:
## local_eq Kw_fcmp
## LR(1) items:
instruction -> local_eq Kw_fcmp . fcmp_predicate type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_uno shift to state 460
-- On Kw_une shift to state 461
-- On Kw_ult shift to state 462
-- On Kw_ule shift to state 463
-- On Kw_ugt shift to state 464
-- On Kw_uge shift to state 465
-- On Kw_ueq shift to state 466
-- On Kw_true shift to state 467
-- On Kw_ord shift to state 468
-- On Kw_one shift to state 469
-- On Kw_olt shift to state 470
-- On Kw_ole shift to state 471
-- On Kw_ogt shift to state 472
-- On Kw_oge shift to state 473
-- On Kw_oeq shift to state 474
-- On Kw_false shift to state 475
-- On fcmp_predicate shift to state 955
## Reductions:

State 955:
## Known stack suffix:
## local_eq Kw_fcmp fcmp_predicate
## LR(1) items:
instruction -> local_eq Kw_fcmp fcmp_predicate . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 956
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 956:
## Known stack suffix:
## local_eq Kw_fcmp fcmp_predicate type_value
## LR(1) items:
instruction -> local_eq Kw_fcmp fcmp_predicate type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 957
## Reductions:

State 957:
## Known stack suffix:
## local_eq Kw_fcmp fcmp_predicate type_value Comma
## LR(1) items:
instruction -> local_eq Kw_fcmp fcmp_predicate type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 958
## Reductions:

State 958:
## Known stack suffix:
## local_eq Kw_fcmp fcmp_predicate type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_fcmp fcmp_predicate type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 959
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 959:
## Known stack suffix:
## local_eq Kw_fcmp fcmp_predicate type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fcmp fcmp_predicate type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fcmp fcmp_predicate type_value Comma value instruction_metadata

State 960:
## Known stack suffix:
## local_eq Kw_fadd
## LR(1) items:
instruction -> local_eq Kw_fadd . fast_math_flags type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nsz shift to state 904
-- On Kw_nnan shift to state 905
-- On Kw_ninf shift to state 906
-- On Kw_fast shift to state 907
-- On Kw_arcp shift to state 908
-- On fast_math_flags shift to state 961
-- On fast_math_flag shift to state 914
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production fast_math_flags ->

State 961:
## Known stack suffix:
## local_eq Kw_fadd fast_math_flags
## LR(1) items:
instruction -> local_eq Kw_fadd fast_math_flags . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 962
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 962:
## Known stack suffix:
## local_eq Kw_fadd fast_math_flags type_value
## LR(1) items:
instruction -> local_eq Kw_fadd fast_math_flags type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 963
## Reductions:

State 963:
## Known stack suffix:
## local_eq Kw_fadd fast_math_flags type_value Comma
## LR(1) items:
instruction -> local_eq Kw_fadd fast_math_flags type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 964
## Reductions:

State 964:
## Known stack suffix:
## local_eq Kw_fadd fast_math_flags type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_fadd fast_math_flags type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 965
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 965:
## Known stack suffix:
## local_eq Kw_fadd fast_math_flags type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_fadd fast_math_flags type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_fadd fast_math_flags type_value Comma value instruction_metadata

State 966:
## Known stack suffix:
## local_eq Kw_extractvalue
## LR(1) items:
instruction -> local_eq Kw_extractvalue . type_value index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 967
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 967:
## Known stack suffix:
## local_eq Kw_extractvalue type_value
## LR(1) items:
instruction -> local_eq Kw_extractvalue type_value . index_list_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 886
-- On index_list_metadata shift to state 968
## Reductions:

State 968:
## Known stack suffix:
## local_eq Kw_extractvalue type_value index_list_metadata
## LR(1) items:
instruction -> local_eq Kw_extractvalue type_value index_list_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_extractvalue type_value index_list_metadata

State 969:
## Known stack suffix:
## local_eq Kw_extractelement
## LR(1) items:
instruction -> local_eq Kw_extractelement . type_value_LIST_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value_LIST_metadata shift to state 970
-- On type_value shift to state 785
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 970:
## Known stack suffix:
## local_eq Kw_extractelement type_value_LIST_metadata
## LR(1) items:
instruction -> local_eq Kw_extractelement type_value_LIST_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_extractelement type_value_LIST_metadata

State 971:
## Known stack suffix:
## local_eq Kw_bitcast
## LR(1) items:
instruction -> local_eq Kw_bitcast . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 972
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 972:
## Known stack suffix:
## local_eq Kw_bitcast type_value
## LR(1) items:
instruction -> local_eq Kw_bitcast type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 973
## Reductions:

State 973:
## Known stack suffix:
## local_eq Kw_bitcast type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_bitcast type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 974
-- On non_void_type shift to state 71
## Reductions:

State 974:
## Known stack suffix:
## local_eq Kw_bitcast type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_bitcast type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 975
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 975:
## Known stack suffix:
## local_eq Kw_bitcast type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_bitcast type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_bitcast type_value Kw_to typ instruction_metadata

State 976:
## Known stack suffix:
## local_eq Kw_ashr
## LR(1) items:
instruction -> local_eq Kw_ashr . opt_exact type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_exact shift to state 276
-- On opt_exact shift to state 977
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_exact ->

State 977:
## Known stack suffix:
## local_eq Kw_ashr opt_exact
## LR(1) items:
instruction -> local_eq Kw_ashr opt_exact . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 978
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 978:
## Known stack suffix:
## local_eq Kw_ashr opt_exact type_value
## LR(1) items:
instruction -> local_eq Kw_ashr opt_exact type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 979
## Reductions:

State 979:
## Known stack suffix:
## local_eq Kw_ashr opt_exact type_value Comma
## LR(1) items:
instruction -> local_eq Kw_ashr opt_exact type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 980
## Reductions:

State 980:
## Known stack suffix:
## local_eq Kw_ashr opt_exact type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_ashr opt_exact type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 981
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 981:
## Known stack suffix:
## local_eq Kw_ashr opt_exact type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_ashr opt_exact type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_ashr opt_exact type_value Comma value instruction_metadata

State 982:
## Known stack suffix:
## local_eq Kw_and
## LR(1) items:
instruction -> local_eq Kw_and . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 983
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 983:
## Known stack suffix:
## local_eq Kw_and type_value
## LR(1) items:
instruction -> local_eq Kw_and type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 984
## Reductions:

State 984:
## Known stack suffix:
## local_eq Kw_and type_value Comma
## LR(1) items:
instruction -> local_eq Kw_and type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 985
## Reductions:

State 985:
## Known stack suffix:
## local_eq Kw_and type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_and type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 986
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 986:
## Known stack suffix:
## local_eq Kw_and type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_and type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_and type_value Comma value instruction_metadata

State 987:
## Known stack suffix:
## local_eq Kw_alloca
## LR(1) items:
instruction -> local_eq Kw_alloca . alloc_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_inalloca shift to state 988
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 1001
-- On non_void_type shift to state 71
-- On alloc_metadata shift to state 1013
## Reductions:

State 988:
## Known stack suffix:
## Kw_inalloca
## LR(1) items:
alloc_metadata -> Kw_inalloca . typ Comma type_value Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca . typ Comma type_value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca . typ Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 989
-- On non_void_type shift to state 71
## Reductions:

State 989:
## Known stack suffix:
## Kw_inalloca typ
## LR(1) items:
alloc_metadata -> Kw_inalloca typ . Comma type_value Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ . Comma type_value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ . Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 990
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 1000
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 990:
## Known stack suffix:
## Kw_inalloca typ Comma
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma . type_value Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ Comma . type_value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ Comma . Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On Kw_align shift to state 991
-- On I shift to state 34
-- On type_value shift to state 994
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 991:
## Known stack suffix:
## Kw_inalloca typ Comma Kw_align
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma Kw_align . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 992
## Reductions:

State 992:
## Known stack suffix:
## Kw_inalloca typ Comma Kw_align APInt
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma Kw_align APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 993
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 993:
## Known stack suffix:
## Kw_inalloca typ Comma Kw_align APInt instruction_metadata
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma Kw_align APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> Kw_inalloca typ Comma Kw_align APInt instruction_metadata

State 994:
## Known stack suffix:
## Kw_inalloca typ Comma type_value
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value . Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> Kw_inalloca typ Comma type_value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 995
-- On instruction_metadata shift to state 999
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 995:
## Known stack suffix:
## Kw_inalloca typ Comma type_value Comma
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value Comma . Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Kw_align shift to state 996
## Reductions:

State 996:
## Known stack suffix:
## Kw_inalloca typ Comma type_value Comma Kw_align
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value Comma Kw_align . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 997
## Reductions:

State 997:
## Known stack suffix:
## Kw_inalloca typ Comma type_value Comma Kw_align APInt
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value Comma Kw_align APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 998
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 998:
## Known stack suffix:
## Kw_inalloca typ Comma type_value Comma Kw_align APInt instruction_metadata
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value Comma Kw_align APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> Kw_inalloca typ Comma type_value Comma Kw_align APInt instruction_metadata

State 999:
## Known stack suffix:
## Kw_inalloca typ Comma type_value instruction_metadata
## LR(1) items:
alloc_metadata -> Kw_inalloca typ Comma type_value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> Kw_inalloca typ Comma type_value instruction_metadata

State 1000:
## Known stack suffix:
## Kw_inalloca typ instruction_metadata
## LR(1) items:
alloc_metadata -> Kw_inalloca typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> Kw_inalloca typ instruction_metadata

State 1001:
## Known stack suffix:
## typ
## LR(1) items:
alloc_metadata -> typ . Comma type_value Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ . Comma type_value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ . Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 1002
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 1012
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 1002:
## Known stack suffix:
## typ Comma
## LR(1) items:
alloc_metadata -> typ Comma . type_value Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ Comma . type_value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ Comma . Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On Kw_align shift to state 1003
-- On I shift to state 34
-- On type_value shift to state 1006
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 1003:
## Known stack suffix:
## typ Comma Kw_align
## LR(1) items:
alloc_metadata -> typ Comma Kw_align . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 1004
## Reductions:

State 1004:
## Known stack suffix:
## typ Comma Kw_align APInt
## LR(1) items:
alloc_metadata -> typ Comma Kw_align APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 1005
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 1005:
## Known stack suffix:
## typ Comma Kw_align APInt instruction_metadata
## LR(1) items:
alloc_metadata -> typ Comma Kw_align APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> typ Comma Kw_align APInt instruction_metadata

State 1006:
## Known stack suffix:
## typ Comma type_value
## LR(1) items:
alloc_metadata -> typ Comma type_value . Comma Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
alloc_metadata -> typ Comma type_value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 1007
-- On instruction_metadata shift to state 1011
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 1007:
## Known stack suffix:
## typ Comma type_value Comma
## LR(1) items:
alloc_metadata -> typ Comma type_value Comma . Kw_align APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
instruction_metadata -> Comma . MetadataVar Exclaim Lbrace mdnodevector Rbrace instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On MetadataVar shift to state 595
-- On Kw_align shift to state 1008
## Reductions:

State 1008:
## Known stack suffix:
## typ Comma type_value Comma Kw_align
## LR(1) items:
alloc_metadata -> typ Comma type_value Comma Kw_align . APInt instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On APInt shift to state 1009
## Reductions:

State 1009:
## Known stack suffix:
## typ Comma type_value Comma Kw_align APInt
## LR(1) items:
alloc_metadata -> typ Comma type_value Comma Kw_align APInt . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 1010
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 1010:
## Known stack suffix:
## typ Comma type_value Comma Kw_align APInt instruction_metadata
## LR(1) items:
alloc_metadata -> typ Comma type_value Comma Kw_align APInt instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> typ Comma type_value Comma Kw_align APInt instruction_metadata

State 1011:
## Known stack suffix:
## typ Comma type_value instruction_metadata
## LR(1) items:
alloc_metadata -> typ Comma type_value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> typ Comma type_value instruction_metadata

State 1012:
## Known stack suffix:
## typ instruction_metadata
## LR(1) items:
alloc_metadata -> typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production alloc_metadata -> typ instruction_metadata

State 1013:
## Known stack suffix:
## local_eq Kw_alloca alloc_metadata
## LR(1) items:
instruction -> local_eq Kw_alloca alloc_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_alloca alloc_metadata

State 1014:
## Known stack suffix:
## local_eq Kw_addrspacecast
## LR(1) items:
instruction -> local_eq Kw_addrspacecast . type_value Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 1015
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 1015:
## Known stack suffix:
## local_eq Kw_addrspacecast type_value
## LR(1) items:
instruction -> local_eq Kw_addrspacecast type_value . Kw_to typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_to shift to state 1016
## Reductions:

State 1016:
## Known stack suffix:
## local_eq Kw_addrspacecast type_value Kw_to
## LR(1) items:
instruction -> local_eq Kw_addrspacecast type_value Kw_to . typ instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 1017
-- On non_void_type shift to state 71
## Reductions:

State 1017:
## Known stack suffix:
## local_eq Kw_addrspacecast type_value Kw_to typ
## LR(1) items:
instruction -> local_eq Kw_addrspacecast type_value Kw_to typ . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 594
-- On opt_addrspace shift to state 68
-- On instruction_metadata shift to state 1018
-- On argument_list shift to state 70
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->
-- On Star
--   reduce production opt_addrspace ->

State 1018:
## Known stack suffix:
## local_eq Kw_addrspacecast type_value Kw_to typ instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_addrspacecast type_value Kw_to typ instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_addrspacecast type_value Kw_to typ instruction_metadata

State 1019:
## Known stack suffix:
## local_eq Kw_add
## LR(1) items:
instruction -> local_eq Kw_add . opt_nuw_nsw type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Kw_nuw shift to state 291
-- On Kw_nsw shift to state 293
-- On opt_nuw_nsw shift to state 1020
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production opt_nuw_nsw ->

State 1020:
## Known stack suffix:
## local_eq Kw_add opt_nuw_nsw
## LR(1) items:
instruction -> local_eq Kw_add opt_nuw_nsw . type_value Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 1021
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 1021:
## Known stack suffix:
## local_eq Kw_add opt_nuw_nsw type_value
## LR(1) items:
instruction -> local_eq Kw_add opt_nuw_nsw type_value . Comma value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 1022
## Reductions:

State 1022:
## Known stack suffix:
## local_eq Kw_add opt_nuw_nsw type_value Comma
## LR(1) items:
instruction -> local_eq Kw_add opt_nuw_nsw type_value Comma . value instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Lsquare shift to state 226
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 1023
## Reductions:

State 1023:
## Known stack suffix:
## local_eq Kw_add opt_nuw_nsw type_value Comma value
## LR(1) items:
instruction -> local_eq Kw_add opt_nuw_nsw type_value Comma value . instruction_metadata [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On Comma shift to state 594
-- On instruction_metadata shift to state 1024
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_metadata ->

State 1024:
## Known stack suffix:
## local_eq Kw_add opt_nuw_nsw type_value Comma value instruction_metadata
## LR(1) items:
instruction -> local_eq Kw_add opt_nuw_nsw type_value Comma value instruction_metadata . [ LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On LocalVarID LocalVar Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction -> local_eq Kw_add opt_nuw_nsw type_value Comma value instruction_metadata

State 1025:
## Known stack suffix:
## LabelStr instruction_list
## LR(1) items:
basicblock -> LabelStr instruction_list . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production basicblock -> LabelStr instruction_list

State 1026:
## Known stack suffix:
## instruction
## LR(1) items:
instruction_list -> instruction . instruction_list [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
-- On LocalVarID shift to state 588
-- On LocalVar shift to state 590
-- On Kw_unreachable shift to state 593
-- On Kw_switch shift to state 604
-- On Kw_store shift to state 616
-- On Kw_ret shift to state 640
-- On Kw_resume shift to state 647
-- On Kw_indirectbr shift to state 650
-- On Kw_fence shift to state 657
-- On Kw_cmpxchg shift to state 661
-- On Kw_br shift to state 674
-- On Kw_atomicrmw shift to state 682
-- On terminator_instruction shift to state 702
-- On opt_local shift to state 703
-- On local_eq shift to state 730
-- On instruction_list shift to state 1027
-- On instruction shift to state 1026
## Reductions:
-- On Kw_tail Kw_musttail Kw_call
--   reduce production opt_local ->

State 1027:
## Known stack suffix:
## instruction instruction_list
## LR(1) items:
instruction_list -> instruction instruction_list . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production instruction_list -> instruction instruction_list

State 1028:
## Known stack suffix:
## instruction_list
## LR(1) items:
basicblock -> instruction_list . [ Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw ]
## Transitions:
## Reductions:
-- On Rbrace LocalVarID LocalVar LabelStr Kw_unreachable Kw_tail Kw_switch Kw_store Kw_ret Kw_resume Kw_musttail Kw_indirectbr Kw_fence Kw_cmpxchg Kw_call Kw_br Kw_atomicrmw
--   reduce production basicblock -> instruction_list

State 1029:
## Known stack suffix:
## Lbrace basicblock_list
## LR(1) items:
function_body -> Lbrace basicblock_list . Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rbrace shift to state 1030
## Reductions:

State 1030:
## Known stack suffix:
## Lbrace basicblock_list Rbrace
## LR(1) items:
function_body -> Lbrace basicblock_list Rbrace . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production function_body -> Lbrace basicblock_list Rbrace

State 1031:
## Known stack suffix:
## basicblock
## LR(1) items:
basicblock_list -> basicblock . [ Rbrace ]
basicblock_list -> basicblock . basicblock_list [ Rbrace ]
## Transitions:
-- On LocalVarID shift to state 588
-- On LocalVar shift to state 590
-- On LabelStr shift to state 592
-- On Kw_unreachable shift to state 593
-- On Kw_switch shift to state 604
-- On Kw_store shift to state 616
-- On Kw_ret shift to state 640
-- On Kw_resume shift to state 647
-- On Kw_indirectbr shift to state 650
-- On Kw_fence shift to state 657
-- On Kw_cmpxchg shift to state 661
-- On Kw_br shift to state 674
-- On Kw_atomicrmw shift to state 682
-- On terminator_instruction shift to state 702
-- On opt_local shift to state 703
-- On local_eq shift to state 730
-- On instruction_list shift to state 1028
-- On instruction shift to state 1026
-- On basicblock_list shift to state 1032
-- On basicblock shift to state 1031
## Reductions:
-- On Rbrace
--   reduce production basicblock_list -> basicblock
-- On Kw_tail Kw_musttail Kw_call
--   reduce production opt_local ->

State 1032:
## Known stack suffix:
## basicblock basicblock_list
## LR(1) items:
basicblock_list -> basicblock basicblock_list . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production basicblock_list -> basicblock basicblock_list

State 1033:
## Known stack suffix:
## Kw_define function_header function_body
## LR(1) items:
toplevel -> Kw_define function_header function_body . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_define function_header function_body

State 1034:
## Known stack suffix:
## external_linkage
## LR(1) items:
opt_linkage -> external_linkage . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc Kw_addrspace I
--   reduce production opt_linkage -> external_linkage

State 1035:
## Known stack suffix:
## Kw_declare
## LR(1) items:
toplevel -> Kw_declare . function_header [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_weak_odr shift to state 113
-- On Kw_weak shift to state 114
-- On Kw_private shift to state 115
-- On Kw_linkonce_odr shift to state 116
-- On Kw_linkonce shift to state 117
-- On Kw_linker_private_weak shift to state 118
-- On Kw_linker_private shift to state 119
-- On Kw_internal shift to state 120
-- On Kw_external shift to state 121
-- On Kw_extern_weak shift to state 122
-- On Kw_common shift to state 123
-- On Kw_available_externally shift to state 124
-- On Kw_appending shift to state 125
-- On opt_linkage shift to state 126
-- On non_external_linkage shift to state 585
-- On function_header shift to state 1036
-- On external_linkage shift to state 1034
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_zeroext Kw_x86_thiscallcc Kw_x86_stdcallcc Kw_x86_mmx Kw_x86_fp80 Kw_x86_fastcallcc Kw_x86_cdeclmethodcc Kw_x86_64_win64cc Kw_x86_64_sysvcc Kw_webkit_jscc Kw_void Kw_spir_kernel Kw_spir_func Kw_signext Kw_ptx_kernel Kw_ptx_device Kw_protected Kw_preserve_mostcc Kw_preserve_allcc Kw_ppc_fp128 Kw_nonnull Kw_noalias Kw_msp430_intrcc Kw_metadata Kw_label Kw_intel_ocl_bicc Kw_inreg Kw_hidden Kw_half Kw_fp128 Kw_float Kw_fastcc Kw_double Kw_dllimport Kw_dllexport Kw_dereferenceable Kw_default Kw_coldcc Kw_ccc Kw_cc Kw_arm_apcscc Kw_arm_aapcscc Kw_arm_aapcs_vfpcc Kw_anyregcc I
--   reduce production non_external_linkage ->

State 1036:
## Known stack suffix:
## Kw_declare function_header
## LR(1) items:
toplevel -> Kw_declare function_header . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_declare function_header

State 1037:
## Known stack suffix:
## Kw_attributes
## LR(1) items:
toplevel -> Kw_attributes . AttrGrpID Equal Lbrace group_attributes Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On AttrGrpID shift to state 1038
## Reductions:

State 1038:
## Known stack suffix:
## Kw_attributes AttrGrpID
## LR(1) items:
toplevel -> Kw_attributes AttrGrpID . Equal Lbrace group_attributes Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 1039
## Reductions:

State 1039:
## Known stack suffix:
## Kw_attributes AttrGrpID Equal
## LR(1) items:
toplevel -> Kw_attributes AttrGrpID Equal . Lbrace group_attributes Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lbrace shift to state 1040
## Reductions:

State 1040:
## Known stack suffix:
## Kw_attributes AttrGrpID Equal Lbrace
## LR(1) items:
toplevel -> Kw_attributes AttrGrpID Equal Lbrace . group_attributes Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 1041
-- On Kw_uwtable shift to state 1044
-- On Kw_sspstrong shift to state 1045
-- On Kw_sspreq shift to state 1046
-- On Kw_ssp shift to state 1047
-- On Kw_sanitize_thread shift to state 1048
-- On Kw_sanitize_memory shift to state 1049
-- On Kw_sanitize_address shift to state 1050
-- On Kw_returns_twice shift to state 1051
-- On Kw_readonly shift to state 1052
-- On Kw_readnone shift to state 1053
-- On Kw_optsize shift to state 1054
-- On Kw_optnone shift to state 1055
-- On Kw_nounwind shift to state 1056
-- On Kw_noreturn shift to state 1057
-- On Kw_noredzone shift to state 1058
-- On Kw_nonlazybind shift to state 1059
-- On Kw_noinline shift to state 1060
-- On Kw_noimplicitfloat shift to state 1061
-- On Kw_noduplicate shift to state 1062
-- On Kw_nobuiltin shift to state 1063
-- On Kw_naked shift to state 1064
-- On Kw_minsize shift to state 1065
-- On Kw_jumptable shift to state 1066
-- On Kw_inlinehint shift to state 1067
-- On Kw_cold shift to state 1068
-- On Kw_builtin shift to state 1069
-- On Kw_alwaysinline shift to state 1070
-- On Kw_alignstack shift to state 1071
-- On Kw_align shift to state 1074
-- On group_attributes shift to state 1077
-- On group_attribute shift to state 1079
## Reductions:
-- On Rbrace
--   reduce production group_attributes ->

State 1041:
## Known stack suffix:
## StringConstant
## LR(1) items:
group_attribute -> StringConstant . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
group_attribute -> StringConstant . Equal StringConstant [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On Equal shift to state 1042
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> StringConstant

State 1042:
## Known stack suffix:
## StringConstant Equal
## LR(1) items:
group_attribute -> StringConstant Equal . StringConstant [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On StringConstant shift to state 1043
## Reductions:

State 1043:
## Known stack suffix:
## StringConstant Equal StringConstant
## LR(1) items:
group_attribute -> StringConstant Equal StringConstant . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> StringConstant Equal StringConstant

State 1044:
## Known stack suffix:
## Kw_uwtable
## LR(1) items:
group_attribute -> Kw_uwtable . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_uwtable

State 1045:
## Known stack suffix:
## Kw_sspstrong
## LR(1) items:
group_attribute -> Kw_sspstrong . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_sspstrong

State 1046:
## Known stack suffix:
## Kw_sspreq
## LR(1) items:
group_attribute -> Kw_sspreq . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_sspreq

State 1047:
## Known stack suffix:
## Kw_ssp
## LR(1) items:
group_attribute -> Kw_ssp . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_ssp

State 1048:
## Known stack suffix:
## Kw_sanitize_thread
## LR(1) items:
group_attribute -> Kw_sanitize_thread . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_sanitize_thread

State 1049:
## Known stack suffix:
## Kw_sanitize_memory
## LR(1) items:
group_attribute -> Kw_sanitize_memory . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_sanitize_memory

State 1050:
## Known stack suffix:
## Kw_sanitize_address
## LR(1) items:
group_attribute -> Kw_sanitize_address . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_sanitize_address

State 1051:
## Known stack suffix:
## Kw_returns_twice
## LR(1) items:
group_attribute -> Kw_returns_twice . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_returns_twice

State 1052:
## Known stack suffix:
## Kw_readonly
## LR(1) items:
group_attribute -> Kw_readonly . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_readonly

State 1053:
## Known stack suffix:
## Kw_readnone
## LR(1) items:
group_attribute -> Kw_readnone . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_readnone

State 1054:
## Known stack suffix:
## Kw_optsize
## LR(1) items:
group_attribute -> Kw_optsize . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_optsize

State 1055:
## Known stack suffix:
## Kw_optnone
## LR(1) items:
group_attribute -> Kw_optnone . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_optnone

State 1056:
## Known stack suffix:
## Kw_nounwind
## LR(1) items:
group_attribute -> Kw_nounwind . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_nounwind

State 1057:
## Known stack suffix:
## Kw_noreturn
## LR(1) items:
group_attribute -> Kw_noreturn . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_noreturn

State 1058:
## Known stack suffix:
## Kw_noredzone
## LR(1) items:
group_attribute -> Kw_noredzone . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_noredzone

State 1059:
## Known stack suffix:
## Kw_nonlazybind
## LR(1) items:
group_attribute -> Kw_nonlazybind . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_nonlazybind

State 1060:
## Known stack suffix:
## Kw_noinline
## LR(1) items:
group_attribute -> Kw_noinline . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_noinline

State 1061:
## Known stack suffix:
## Kw_noimplicitfloat
## LR(1) items:
group_attribute -> Kw_noimplicitfloat . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_noimplicitfloat

State 1062:
## Known stack suffix:
## Kw_noduplicate
## LR(1) items:
group_attribute -> Kw_noduplicate . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_noduplicate

State 1063:
## Known stack suffix:
## Kw_nobuiltin
## LR(1) items:
group_attribute -> Kw_nobuiltin . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_nobuiltin

State 1064:
## Known stack suffix:
## Kw_naked
## LR(1) items:
group_attribute -> Kw_naked . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_naked

State 1065:
## Known stack suffix:
## Kw_minsize
## LR(1) items:
group_attribute -> Kw_minsize . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_minsize

State 1066:
## Known stack suffix:
## Kw_jumptable
## LR(1) items:
group_attribute -> Kw_jumptable . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_jumptable

State 1067:
## Known stack suffix:
## Kw_inlinehint
## LR(1) items:
group_attribute -> Kw_inlinehint . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_inlinehint

State 1068:
## Known stack suffix:
## Kw_cold
## LR(1) items:
group_attribute -> Kw_cold . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_cold

State 1069:
## Known stack suffix:
## Kw_builtin
## LR(1) items:
group_attribute -> Kw_builtin . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_builtin

State 1070:
## Known stack suffix:
## Kw_alwaysinline
## LR(1) items:
group_attribute -> Kw_alwaysinline . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_alwaysinline

State 1071:
## Known stack suffix:
## Kw_alignstack
## LR(1) items:
group_attribute -> Kw_alignstack . Equal APInt [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On Equal shift to state 1072
## Reductions:

State 1072:
## Known stack suffix:
## Kw_alignstack Equal
## LR(1) items:
group_attribute -> Kw_alignstack Equal . APInt [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On APInt shift to state 1073
## Reductions:

State 1073:
## Known stack suffix:
## Kw_alignstack Equal APInt
## LR(1) items:
group_attribute -> Kw_alignstack Equal APInt . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_alignstack Equal APInt

State 1074:
## Known stack suffix:
## Kw_align
## LR(1) items:
group_attribute -> Kw_align . Equal APInt [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On Equal shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## Kw_align Equal
## LR(1) items:
group_attribute -> Kw_align Equal . APInt [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
-- On APInt shift to state 1076
## Reductions:

State 1076:
## Known stack suffix:
## Kw_align Equal APInt
## LR(1) items:
group_attribute -> Kw_align Equal APInt . [ StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align ]
## Transitions:
## Reductions:
-- On StringConstant Rbrace Kw_uwtable Kw_sspstrong Kw_sspreq Kw_ssp Kw_sanitize_thread Kw_sanitize_memory Kw_sanitize_address Kw_returns_twice Kw_readonly Kw_readnone Kw_optsize Kw_optnone Kw_nounwind Kw_noreturn Kw_noredzone Kw_nonlazybind Kw_noinline Kw_noimplicitfloat Kw_noduplicate Kw_nobuiltin Kw_naked Kw_minsize Kw_jumptable Kw_inlinehint Kw_cold Kw_builtin Kw_alwaysinline Kw_alignstack Kw_align
--   reduce production group_attribute -> Kw_align Equal APInt

State 1077:
## Known stack suffix:
## Kw_attributes AttrGrpID Equal Lbrace group_attributes
## LR(1) items:
toplevel -> Kw_attributes AttrGrpID Equal Lbrace group_attributes . Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rbrace shift to state 1078
## Reductions:

State 1078:
## Known stack suffix:
## Kw_attributes AttrGrpID Equal Lbrace group_attributes Rbrace
## LR(1) items:
toplevel -> Kw_attributes AttrGrpID Equal Lbrace group_attributes Rbrace . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Kw_attributes AttrGrpID Equal Lbrace group_attributes Rbrace

State 1079:
## Known stack suffix:
## group_attribute
## LR(1) items:
group_attributes -> group_attribute . group_attributes [ Rbrace ]
## Transitions:
-- On StringConstant shift to state 1041
-- On Kw_uwtable shift to state 1044
-- On Kw_sspstrong shift to state 1045
-- On Kw_sspreq shift to state 1046
-- On Kw_ssp shift to state 1047
-- On Kw_sanitize_thread shift to state 1048
-- On Kw_sanitize_memory shift to state 1049
-- On Kw_sanitize_address shift to state 1050
-- On Kw_returns_twice shift to state 1051
-- On Kw_readonly shift to state 1052
-- On Kw_readnone shift to state 1053
-- On Kw_optsize shift to state 1054
-- On Kw_optnone shift to state 1055
-- On Kw_nounwind shift to state 1056
-- On Kw_noreturn shift to state 1057
-- On Kw_noredzone shift to state 1058
-- On Kw_nonlazybind shift to state 1059
-- On Kw_noinline shift to state 1060
-- On Kw_noimplicitfloat shift to state 1061
-- On Kw_noduplicate shift to state 1062
-- On Kw_nobuiltin shift to state 1063
-- On Kw_naked shift to state 1064
-- On Kw_minsize shift to state 1065
-- On Kw_jumptable shift to state 1066
-- On Kw_inlinehint shift to state 1067
-- On Kw_cold shift to state 1068
-- On Kw_builtin shift to state 1069
-- On Kw_alwaysinline shift to state 1070
-- On Kw_alignstack shift to state 1071
-- On Kw_align shift to state 1074
-- On group_attributes shift to state 1080
-- On group_attribute shift to state 1079
## Reductions:
-- On Rbrace
--   reduce production group_attributes ->

State 1080:
## Known stack suffix:
## group_attribute group_attributes
## LR(1) items:
group_attributes -> group_attribute group_attributes . [ Rbrace ]
## Transitions:
## Reductions:
-- On Rbrace
--   reduce production group_attributes -> group_attribute group_attributes

State 1081:
## Known stack suffix:
## GlobalVar
## LR(1) items:
global_eq -> GlobalVar . Equal [ Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace ]
## Transitions:
-- On Equal shift to state 1082
## Reductions:

State 1082:
## Known stack suffix:
## GlobalVar Equal
## LR(1) items:
global_eq -> GlobalVar Equal . [ Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace ]
## Transitions:
## Reductions:
-- On Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace
--   reduce production global_eq -> GlobalVar Equal

State 1083:
## Known stack suffix:
## GlobalID
## LR(1) items:
global_eq -> GlobalID . Equal [ Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace ]
## Transitions:
-- On Equal shift to state 1084
## Reductions:

State 1084:
## Known stack suffix:
## GlobalID Equal
## LR(1) items:
global_eq -> GlobalID Equal . [ Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace ]
## Transitions:
## Reductions:
-- On Kw_weak_odr Kw_weak Kw_unnamed_addr Kw_thread_local Kw_protected Kw_private Kw_linkonce_odr Kw_linkonce Kw_linker_private_weak Kw_linker_private Kw_internal Kw_hidden Kw_global Kw_externally_initialized Kw_external Kw_extern_weak Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_common Kw_available_externally Kw_appending Kw_alias Kw_addrspace
--   reduce production global_eq -> GlobalID Equal

State 1085:
## Known stack suffix:
## Exclaim
## LR(1) items:
toplevel -> Exclaim . APInt Equal Exclaim Lbrace mdnodevector Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On APInt shift to state 1086
## Reductions:

State 1086:
## Known stack suffix:
## Exclaim APInt
## LR(1) items:
toplevel -> Exclaim APInt . Equal Exclaim Lbrace mdnodevector Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 1087
## Reductions:

State 1087:
## Known stack suffix:
## Exclaim APInt Equal
## LR(1) items:
toplevel -> Exclaim APInt Equal . Exclaim Lbrace mdnodevector Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Exclaim shift to state 1088
## Reductions:

State 1088:
## Known stack suffix:
## Exclaim APInt Equal Exclaim
## LR(1) items:
toplevel -> Exclaim APInt Equal Exclaim . Lbrace mdnodevector Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lbrace shift to state 1089
## Reductions:

State 1089:
## Known stack suffix:
## Exclaim APInt Equal Exclaim Lbrace
## LR(1) items:
toplevel -> Exclaim APInt Equal Exclaim Lbrace . mdnodevector Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 549
-- On LocalVarID shift to state 550
-- On LocalVar shift to state 551
-- On Less shift to state 552
-- On Lbrace shift to state 560
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_metadata shift to state 28
-- On Kw_lshr shift to state 361
-- On Kw_label shift to state 29
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_half shift to state 30
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fp128 shift to state 31
-- On Kw_fmul shift to state 447
-- On Kw_float shift to state 32
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_double shift to state 33
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_add shift to state 537
-- On I shift to state 34
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 563
-- On typ shift to state 565
-- On non_void_type shift to state 71
-- On mdnodevector shift to state 1090
## Reductions:

State 1090:
## Known stack suffix:
## Exclaim APInt Equal Exclaim Lbrace mdnodevector
## LR(1) items:
toplevel -> Exclaim APInt Equal Exclaim Lbrace mdnodevector . Rbrace [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rbrace shift to state 1091
## Reductions:

State 1091:
## Known stack suffix:
## Exclaim APInt Equal Exclaim Lbrace mdnodevector Rbrace
## LR(1) items:
toplevel -> Exclaim APInt Equal Exclaim Lbrace mdnodevector Rbrace . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> Exclaim APInt Equal Exclaim Lbrace mdnodevector Rbrace

State 1092:
## Known stack suffix:
## Eof
## LR(1) items:
toplevel_list -> Eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_list -> Eof

State 1093:
## Known stack suffix:
## ComdatVar
## LR(1) items:
toplevel -> ComdatVar . Equal Kw_comdat selection_kind [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Equal shift to state 1094
## Reductions:

State 1094:
## Known stack suffix:
## ComdatVar Equal
## LR(1) items:
toplevel -> ComdatVar Equal . Kw_comdat selection_kind [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_comdat shift to state 1095
## Reductions:

State 1095:
## Known stack suffix:
## ComdatVar Equal Kw_comdat
## LR(1) items:
toplevel -> ComdatVar Equal Kw_comdat . selection_kind [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_samesize shift to state 1096
-- On Kw_noduplicates shift to state 1097
-- On Kw_largest shift to state 1098
-- On Kw_exactmatch shift to state 1099
-- On Kw_any shift to state 1100
-- On selection_kind shift to state 1101
## Reductions:

State 1096:
## Known stack suffix:
## Kw_samesize
## LR(1) items:
selection_kind -> Kw_samesize . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production selection_kind -> Kw_samesize

State 1097:
## Known stack suffix:
## Kw_noduplicates
## LR(1) items:
selection_kind -> Kw_noduplicates . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production selection_kind -> Kw_noduplicates

State 1098:
## Known stack suffix:
## Kw_largest
## LR(1) items:
selection_kind -> Kw_largest . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production selection_kind -> Kw_largest

State 1099:
## Known stack suffix:
## Kw_exactmatch
## LR(1) items:
selection_kind -> Kw_exactmatch . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production selection_kind -> Kw_exactmatch

State 1100:
## Known stack suffix:
## Kw_any
## LR(1) items:
selection_kind -> Kw_any . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production selection_kind -> Kw_any

State 1101:
## Known stack suffix:
## ComdatVar Equal Kw_comdat selection_kind
## LR(1) items:
toplevel -> ComdatVar Equal Kw_comdat selection_kind . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> ComdatVar Equal Kw_comdat selection_kind

State 1102:
## Known stack suffix:
## toplevel_list
## LR(1) items:
main -> toplevel_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> toplevel_list

State 1103:
## Known stack suffix:
## toplevel
## LR(1) items:
toplevel_list -> toplevel . toplevel_list [ # ]
## Transitions:
-- On MetadataVar shift to state 1
-- On LocalVarID shift to state 10
-- On LocalVar shift to state 90
-- On Kw_target shift to state 95
-- On Kw_module shift to state 102
-- On Kw_deplibs shift to state 105
-- On Kw_define shift to state 112
-- On Kw_declare shift to state 1035
-- On Kw_attributes shift to state 1037
-- On GlobalVar shift to state 1081
-- On GlobalID shift to state 1083
-- On Exclaim shift to state 1085
-- On Eof shift to state 1092
-- On ComdatVar shift to state 1093
-- On toplevel_list shift to state 1104
-- On toplevel shift to state 1103
-- On global_eq shift to state 1105
## Reductions:

State 1104:
## Known stack suffix:
## toplevel toplevel_list
## LR(1) items:
toplevel_list -> toplevel toplevel_list . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_list -> toplevel toplevel_list

State 1105:
## Known stack suffix:
## global_eq
## LR(1) items:
toplevel -> global_eq . external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq . non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq . external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq . non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_weak_odr shift to state 113
-- On Kw_weak shift to state 114
-- On Kw_private shift to state 115
-- On Kw_linkonce_odr shift to state 116
-- On Kw_linkonce shift to state 117
-- On Kw_linker_private_weak shift to state 118
-- On Kw_linker_private shift to state 119
-- On Kw_internal shift to state 120
-- On Kw_external shift to state 121
-- On Kw_extern_weak shift to state 122
-- On Kw_common shift to state 123
-- On Kw_available_externally shift to state 124
-- On Kw_appending shift to state 125
-- On non_external_linkage shift to state 1106
-- On external_linkage shift to state 1150
## Reductions:
-- On Kw_unnamed_addr Kw_thread_local Kw_protected Kw_hidden Kw_global Kw_externally_initialized Kw_dllimport Kw_dllexport Kw_default Kw_constant Kw_alias Kw_addrspace
--   reduce production non_external_linkage ->

State 1106:
## Known stack suffix:
## global_eq non_external_linkage
## LR(1) items:
toplevel -> global_eq non_external_linkage . opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq non_external_linkage . opt_visibility opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_protected shift to state 127
-- On Kw_hidden shift to state 128
-- On Kw_default shift to state 129
-- On opt_visibility shift to state 1107
## Reductions:
-- On Kw_unnamed_addr Kw_thread_local Kw_global Kw_externally_initialized Kw_dllimport Kw_dllexport Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_visibility ->

State 1107:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility . opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq non_external_linkage opt_visibility . opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_thread_local shift to state 1108
-- On Kw_dllimport shift to state 131
-- On Kw_dllexport shift to state 132
-- On opt_thread_local shift to state 1116
-- On opt_dll_storageclass shift to state 1128
## Reductions:
-- On Kw_unnamed_addr Kw_thread_local Kw_global Kw_externally_initialized Kw_constant Kw_addrspace
--   reduce production opt_dll_storageclass ->
-- On Kw_alias
--   reduce production opt_thread_local ->
** Conflict on Kw_thread_local

State 1108:
## Known stack suffix:
## Kw_thread_local
## LR(1) items:
opt_thread_local -> Kw_thread_local . [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
opt_thread_local -> Kw_thread_local . Lparen Kw_localdynamic Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
opt_thread_local -> Kw_thread_local . Lparen Kw_initialexec Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
opt_thread_local -> Kw_thread_local . Lparen Kw_localexec Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
-- On Lparen shift to state 1109
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_thread_local -> Kw_thread_local

State 1109:
## Known stack suffix:
## Kw_thread_local Lparen
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen . Kw_localdynamic Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
opt_thread_local -> Kw_thread_local Lparen . Kw_initialexec Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
opt_thread_local -> Kw_thread_local Lparen . Kw_localexec Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
-- On Kw_localexec shift to state 1110
-- On Kw_localdynamic shift to state 1112
-- On Kw_initialexec shift to state 1114
## Reductions:

State 1110:
## Known stack suffix:
## Kw_thread_local Lparen Kw_localexec
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_localexec . Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
-- On Rparen shift to state 1111
## Reductions:

State 1111:
## Known stack suffix:
## Kw_thread_local Lparen Kw_localexec Rparen
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_localexec Rparen . [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_thread_local -> Kw_thread_local Lparen Kw_localexec Rparen

State 1112:
## Known stack suffix:
## Kw_thread_local Lparen Kw_localdynamic
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_localdynamic . Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
-- On Rparen shift to state 1113
## Reductions:

State 1113:
## Known stack suffix:
## Kw_thread_local Lparen Kw_localdynamic Rparen
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_localdynamic Rparen . [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_thread_local -> Kw_thread_local Lparen Kw_localdynamic Rparen

State 1114:
## Known stack suffix:
## Kw_thread_local Lparen Kw_initialexec
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_initialexec . Rparen [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
-- On Rparen shift to state 1115
## Reductions:

State 1115:
## Known stack suffix:
## Kw_thread_local Lparen Kw_initialexec Rparen
## LR(1) items:
opt_thread_local -> Kw_thread_local Lparen Kw_initialexec Rparen . [ Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace ]
## Transitions:
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_thread_local -> Kw_thread_local Lparen Kw_initialexec Rparen

State 1116:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_thread_local
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_thread_local . Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_alias shift to state 1117
## Reductions:

State 1117:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias . opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_weak_odr shift to state 113
-- On Kw_weak shift to state 114
-- On Kw_private shift to state 115
-- On Kw_linkonce_odr shift to state 116
-- On Kw_linkonce shift to state 117
-- On Kw_linker_private_weak shift to state 118
-- On Kw_linker_private shift to state 119
-- On Kw_internal shift to state 120
-- On Kw_external shift to state 121
-- On Kw_extern_weak shift to state 122
-- On Kw_common shift to state 123
-- On Kw_available_externally shift to state 124
-- On Kw_appending shift to state 125
-- On opt_linkage shift to state 1118
-- On non_external_linkage shift to state 585
-- On external_linkage shift to state 1034
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double Kw_addrspace I
--   reduce production non_external_linkage ->

State 1118:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage . aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On Kw_addrspace shift to state 1119
-- On I shift to state 34
-- On type_value shift to state 1126
-- On typ shift to state 232
-- On non_void_type shift to state 71
-- On aliasee shift to state 1127
## Reductions:

State 1119:
## Known stack suffix:
## Kw_addrspace
## LR(1) items:
aliasee -> Kw_addrspace . Lparen APInt Rparen typ Comma type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lparen shift to state 1120
## Reductions:

State 1120:
## Known stack suffix:
## Kw_addrspace Lparen
## LR(1) items:
aliasee -> Kw_addrspace Lparen . APInt Rparen typ Comma type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On APInt shift to state 1121
## Reductions:

State 1121:
## Known stack suffix:
## Kw_addrspace Lparen APInt
## LR(1) items:
aliasee -> Kw_addrspace Lparen APInt . Rparen typ Comma type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Rparen shift to state 1122
## Reductions:

State 1122:
## Known stack suffix:
## Kw_addrspace Lparen APInt Rparen
## LR(1) items:
aliasee -> Kw_addrspace Lparen APInt Rparen . typ Comma type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 1123
-- On non_void_type shift to state 71
## Reductions:

State 1123:
## Known stack suffix:
## Kw_addrspace Lparen APInt Rparen typ
## LR(1) items:
aliasee -> Kw_addrspace Lparen APInt Rparen typ . Comma type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
non_void_type -> typ . opt_addrspace Star [ Star Lparen Kw_addrspace Comma ]
non_void_type -> typ . argument_list [ Star Lparen Kw_addrspace Comma ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 1124
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 1124:
## Known stack suffix:
## Kw_addrspace Lparen APInt Rparen typ Comma
## LR(1) items:
aliasee -> Kw_addrspace Lparen APInt Rparen typ Comma . type_value [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On type_value shift to state 1125
-- On typ shift to state 232
-- On non_void_type shift to state 71
## Reductions:

State 1125:
## Known stack suffix:
## Kw_addrspace Lparen APInt Rparen typ Comma type_value
## LR(1) items:
aliasee -> Kw_addrspace Lparen APInt Rparen typ Comma type_value . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production aliasee -> Kw_addrspace Lparen APInt Rparen typ Comma type_value

State 1126:
## Known stack suffix:
## type_value
## LR(1) items:
aliasee -> type_value . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production aliasee -> type_value

State 1127:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> global_eq non_external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee

State 1128:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass . opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_thread_local shift to state 1108
-- On opt_thread_local shift to state 1129
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_addrspace
--   reduce production opt_thread_local ->

State 1129:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local . opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 1130
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant
--   reduce production opt_addrspace ->

State 1130:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace . opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_unnamed_addr shift to state 173
-- On opt_unnamed_addr shift to state 1131
## Reductions:
-- On Kw_global Kw_externally_initialized Kw_constant
--   reduce production opt_unnamed_addr ->

State 1131:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr . opt_externally_initialized constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_externally_initialized shift to state 1132
-- On opt_externally_initialized shift to state 1133
## Reductions:
-- On Kw_global Kw_constant
--   reduce production opt_externally_initialized ->

State 1132:
## Known stack suffix:
## Kw_externally_initialized
## LR(1) items:
opt_externally_initialized -> Kw_externally_initialized . [ Kw_global Kw_constant ]
## Transitions:
## Reductions:
-- On Kw_global Kw_constant
--   reduce production opt_externally_initialized -> Kw_externally_initialized

State 1133:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized . constant_or_global typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_global shift to state 1134
-- On Kw_constant shift to state 1135
-- On constant_or_global shift to state 1136
## Reductions:

State 1134:
## Known stack suffix:
## Kw_global
## LR(1) items:
constant_or_global -> Kw_global . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production constant_or_global -> Kw_global

State 1135:
## Known stack suffix:
## Kw_constant
## LR(1) items:
constant_or_global -> Kw_constant . [ Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I ]
## Transitions:
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double I
--   reduce production constant_or_global -> Kw_constant

State 1136:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global . typ value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 1137
-- On non_void_type shift to state 71
## Reductions:

State 1137:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
non_void_type -> typ . argument_list [ Star Lsquare Lparen LocalVarID LocalVar Less Lbrace Kw_zext Kw_zeroinitializer Kw_xor Kw_urem Kw_undef Kw_uitofp Kw_udiv Kw_trunc Kw_true Kw_sub Kw_srem Kw_sitofp Kw_shufflevector Kw_shl Kw_sext Kw_select Kw_sdiv Kw_ptrtoint Kw_or Kw_null Kw_mul Kw_lshr Kw_inttoptr Kw_insertvalue Kw_insertelement Kw_icmp Kw_getelementptr Kw_fsub Kw_frem Kw_fptrunc Kw_fptoui Kw_fptosi Kw_fpext Kw_fmul Kw_fdiv Kw_fcmp Kw_false Kw_fadd Kw_extractvalue Kw_extractelement Kw_c Kw_blockaddress Kw_bitcast Kw_asm Kw_ashr Kw_and Kw_addrspacecast Kw_addrspace Kw_add GlobalVar GlobalID Exclaim APInt APFloat ]
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ . value opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 226
-- On Lparen shift to state 38
-- On LocalVarID shift to state 233
-- On LocalVar shift to state 234
-- On Less shift to state 235
-- On Lbrace shift to state 246
-- On Kw_zext shift to state 249
-- On Kw_zeroinitializer shift to state 255
-- On Kw_xor shift to state 256
-- On Kw_urem shift to state 262
-- On Kw_undef shift to state 268
-- On Kw_uitofp shift to state 269
-- On Kw_udiv shift to state 275
-- On Kw_trunc shift to state 283
-- On Kw_true shift to state 289
-- On Kw_sub shift to state 290
-- On Kw_srem shift to state 301
-- On Kw_sitofp shift to state 307
-- On Kw_shufflevector shift to state 313
-- On Kw_shl shift to state 317
-- On Kw_sext shift to state 324
-- On Kw_select shift to state 330
-- On Kw_sdiv shift to state 334
-- On Kw_ptrtoint shift to state 341
-- On Kw_or shift to state 347
-- On Kw_null shift to state 353
-- On Kw_mul shift to state 354
-- On Kw_lshr shift to state 361
-- On Kw_inttoptr shift to state 368
-- On Kw_insertvalue shift to state 374
-- On Kw_insertelement shift to state 384
-- On Kw_icmp shift to state 388
-- On Kw_getelementptr shift to state 405
-- On Kw_fsub shift to state 411
-- On Kw_frem shift to state 417
-- On Kw_fptrunc shift to state 423
-- On Kw_fptoui shift to state 429
-- On Kw_fptosi shift to state 435
-- On Kw_fpext shift to state 441
-- On Kw_fmul shift to state 447
-- On Kw_fdiv shift to state 453
-- On Kw_fcmp shift to state 459
-- On Kw_false shift to state 482
-- On Kw_fadd shift to state 483
-- On Kw_extractvalue shift to state 489
-- On Kw_extractelement shift to state 494
-- On Kw_c shift to state 498
-- On Kw_blockaddress shift to state 500
-- On Kw_bitcast shift to state 502
-- On Kw_asm shift to state 508
-- On Kw_ashr shift to state 518
-- On Kw_and shift to state 525
-- On Kw_addrspacecast shift to state 531
-- On Kw_addrspace shift to state 60
-- On Kw_add shift to state 537
-- On GlobalVar shift to state 544
-- On GlobalID shift to state 545
-- On Exclaim shift to state 546
-- On APInt shift to state 561
-- On APFloat shift to state 562
-- On value shift to state 1138
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->

State 1138:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value . opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Comma shift to state 1139
-- On opt_section_align_comdat shift to state 1149
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat ->

State 1139:
## Known stack suffix:
## Comma
## LR(1) items:
opt_section_align_comdat -> Comma . Kw_section StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
opt_section_align_comdat -> Comma . Kw_align APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
opt_section_align_comdat -> Comma . Kw_section StringConstant Comma Kw_align APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
opt_section_align_comdat -> Comma . Kw_comdat ComdatVar [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_section shift to state 1140
-- On Kw_comdat shift to state 1145
-- On Kw_align shift to state 1147
## Reductions:

State 1140:
## Known stack suffix:
## Comma Kw_section
## LR(1) items:
opt_section_align_comdat -> Comma Kw_section . StringConstant [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
opt_section_align_comdat -> Comma Kw_section . StringConstant Comma Kw_align APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On StringConstant shift to state 1141
## Reductions:

State 1141:
## Known stack suffix:
## Comma Kw_section StringConstant
## LR(1) items:
opt_section_align_comdat -> Comma Kw_section StringConstant . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
opt_section_align_comdat -> Comma Kw_section StringConstant . Comma Kw_align APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Comma shift to state 1142
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat -> Comma Kw_section StringConstant

State 1142:
## Known stack suffix:
## Comma Kw_section StringConstant Comma
## LR(1) items:
opt_section_align_comdat -> Comma Kw_section StringConstant Comma . Kw_align APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_align shift to state 1143
## Reductions:

State 1143:
## Known stack suffix:
## Comma Kw_section StringConstant Comma Kw_align
## LR(1) items:
opt_section_align_comdat -> Comma Kw_section StringConstant Comma Kw_align . APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On APInt shift to state 1144
## Reductions:

State 1144:
## Known stack suffix:
## Comma Kw_section StringConstant Comma Kw_align APInt
## LR(1) items:
opt_section_align_comdat -> Comma Kw_section StringConstant Comma Kw_align APInt . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat -> Comma Kw_section StringConstant Comma Kw_align APInt

State 1145:
## Known stack suffix:
## Comma Kw_comdat
## LR(1) items:
opt_section_align_comdat -> Comma Kw_comdat . ComdatVar [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On ComdatVar shift to state 1146
## Reductions:

State 1146:
## Known stack suffix:
## Comma Kw_comdat ComdatVar
## LR(1) items:
opt_section_align_comdat -> Comma Kw_comdat ComdatVar . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat -> Comma Kw_comdat ComdatVar

State 1147:
## Known stack suffix:
## Comma Kw_align
## LR(1) items:
opt_section_align_comdat -> Comma Kw_align . APInt [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On APInt shift to state 1148
## Reductions:

State 1148:
## Known stack suffix:
## Comma Kw_align APInt
## LR(1) items:
opt_section_align_comdat -> Comma Kw_align APInt . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat -> Comma Kw_align APInt

State 1149:
## Known stack suffix:
## global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat
## LR(1) items:
toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> global_eq non_external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ value opt_section_align_comdat

State 1150:
## Known stack suffix:
## global_eq external_linkage
## LR(1) items:
toplevel -> global_eq external_linkage . opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq external_linkage . opt_visibility opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_protected shift to state 127
-- On Kw_hidden shift to state 128
-- On Kw_default shift to state 129
-- On opt_visibility shift to state 1151
## Reductions:
-- On Kw_unnamed_addr Kw_thread_local Kw_global Kw_externally_initialized Kw_dllimport Kw_dllexport Kw_constant Kw_alias Kw_addrspace
--   reduce production opt_visibility ->

State 1151:
## Known stack suffix:
## global_eq external_linkage opt_visibility
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility . opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
toplevel -> global_eq external_linkage opt_visibility . opt_thread_local Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_thread_local shift to state 1108
-- On Kw_dllimport shift to state 131
-- On Kw_dllexport shift to state 132
-- On opt_thread_local shift to state 1152
-- On opt_dll_storageclass shift to state 1156
## Reductions:
-- On Kw_unnamed_addr Kw_thread_local Kw_global Kw_externally_initialized Kw_constant Kw_addrspace
--   reduce production opt_dll_storageclass ->
-- On Kw_alias
--   reduce production opt_thread_local ->
** Conflict on Kw_thread_local

State 1152:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_thread_local
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_thread_local . Kw_alias opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_alias shift to state 1153
## Reductions:

State 1153:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_thread_local Kw_alias
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_thread_local Kw_alias . opt_linkage aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_weak_odr shift to state 113
-- On Kw_weak shift to state 114
-- On Kw_private shift to state 115
-- On Kw_linkonce_odr shift to state 116
-- On Kw_linkonce shift to state 117
-- On Kw_linker_private_weak shift to state 118
-- On Kw_linker_private shift to state 119
-- On Kw_internal shift to state 120
-- On Kw_external shift to state 121
-- On Kw_extern_weak shift to state 122
-- On Kw_common shift to state 123
-- On Kw_available_externally shift to state 124
-- On Kw_appending shift to state 125
-- On opt_linkage shift to state 1154
-- On non_external_linkage shift to state 585
-- On external_linkage shift to state 1034
## Reductions:
-- On Lsquare LocalVarID LocalVar Less Lbrace Kw_x86_mmx Kw_x86_fp80 Kw_void Kw_ppc_fp128 Kw_metadata Kw_label Kw_half Kw_fp128 Kw_float Kw_double Kw_addrspace I
--   reduce production non_external_linkage ->

State 1154:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage . aliasee [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On Kw_addrspace shift to state 1119
-- On I shift to state 34
-- On type_value shift to state 1126
-- On typ shift to state 232
-- On non_void_type shift to state 71
-- On aliasee shift to state 1155
## Reductions:

State 1155:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> global_eq external_linkage opt_visibility opt_thread_local Kw_alias opt_linkage aliasee

State 1156:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass . opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_thread_local shift to state 1108
-- On opt_thread_local shift to state 1157
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant Kw_addrspace
--   reduce production opt_thread_local ->

State 1157:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local . opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_addrspace shift to state 60
-- On opt_addrspace shift to state 1158
## Reductions:
-- On Kw_unnamed_addr Kw_global Kw_externally_initialized Kw_constant
--   reduce production opt_addrspace ->

State 1158:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace . opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_unnamed_addr shift to state 173
-- On opt_unnamed_addr shift to state 1159
## Reductions:
-- On Kw_global Kw_externally_initialized Kw_constant
--   reduce production opt_unnamed_addr ->

State 1159:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr . opt_externally_initialized constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_externally_initialized shift to state 1132
-- On opt_externally_initialized shift to state 1160
## Reductions:
-- On Kw_global Kw_constant
--   reduce production opt_externally_initialized ->

State 1160:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized . constant_or_global typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Kw_global shift to state 1134
-- On Kw_constant shift to state 1135
-- On constant_or_global shift to state 1161
## Reductions:

State 1161:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global . typ opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lsquare shift to state 13
-- On LocalVarID shift to state 16
-- On LocalVar shift to state 17
-- On Less shift to state 18
-- On Lbrace shift to state 22
-- On Kw_x86_mmx shift to state 24
-- On Kw_x86_fp80 shift to state 25
-- On Kw_void shift to state 26
-- On Kw_ppc_fp128 shift to state 27
-- On Kw_metadata shift to state 28
-- On Kw_label shift to state 29
-- On Kw_half shift to state 30
-- On Kw_fp128 shift to state 31
-- On Kw_float shift to state 32
-- On Kw_double shift to state 33
-- On I shift to state 34
-- On typ shift to state 1162
-- On non_void_type shift to state 71
## Reductions:

State 1162:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ
## LR(1) items:
non_void_type -> typ . opt_addrspace Star [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
non_void_type -> typ . argument_list [ Star MetadataVar Lparen LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes Kw_addrspace GlobalVar GlobalID Exclaim Eof Comma ComdatVar ]
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ . opt_section_align_comdat [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
-- On Lparen shift to state 38
-- On Kw_addrspace shift to state 60
-- On Comma shift to state 1139
-- On opt_section_align_comdat shift to state 1163
-- On opt_addrspace shift to state 68
-- On argument_list shift to state 70
## Reductions:
-- On Star
--   reduce production opt_addrspace ->
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production opt_section_align_comdat ->

State 1163:
## Known stack suffix:
## global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat
## LR(1) items:
toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat . [ MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar ]
## Transitions:
## Reductions:
-- On MetadataVar LocalVarID LocalVar Kw_target Kw_module Kw_deplibs Kw_define Kw_declare Kw_attributes GlobalVar GlobalID Exclaim Eof ComdatVar
--   reduce production toplevel -> global_eq external_linkage opt_visibility opt_dll_storageclass opt_thread_local opt_addrspace opt_unnamed_addr opt_externally_initialized constant_or_global typ opt_section_align_comdat

State 1164:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

