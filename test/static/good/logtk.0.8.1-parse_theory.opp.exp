%{
  open Logtk

  module T = Basic.FO
  module F = Basic.Form
  module Ty = Basic.Ty
  module Sym = Basic.Sym
  module L = Location

  let remove_quotes s =
    assert (s.[0] = '\'' && s.[String.length s - 1] = '\'');
    String.sub s 1 (String.length s - 2)
%}
%start parse_statement
%start parse_statements
%token AND
%token AND_ALSO
%token ARROW
%token AXIOM
%token COLUMN
%token COMMA
%token <string> DISTINCT_OBJECT
%token <string> DOLLAR_DOLLAR_WORD
%token <string> DOLLAR_WORD
%token DOT
%token EOI
%token EQUAL
%token EQUIV
%token EXISTS
%token FALSE
%token FORALL
%token GENTZEN_ARROW
%token IF
%token IMPLY
%token INCLUDE
%token <string> INTEGER
%token IS
%token LEFT_BRACKET
%token LEFT_IMPLY
%token LEFT_PAREN
%token LEMMA
%token <string> LOWER_WORD
%token NOT
%token NOTAND
%token NOTVLINE
%token NOT_EQUAL
%token <string> RATIONAL
%token RAW
%token <string> REAL
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token <string> SINGLE_QUOTED
%token STAR
%token THEORY
%token TRUE
%token TYPE_TY
%token <string> UPPER_WORD
%token VLINE
%token XOR
%left VLINE
%left AND
%nonassoc EQUIV
%nonassoc XOR
%nonassoc IMPLY
%nonassoc LEFT_IMPLY
%nonassoc NOTVLINE
%nonassoc NOTAND
%type <Ast_theory.statement> parse_statement
%type <Ast_theory.statement list> parse_statements
%%

loption_separated_nonempty_list_COMMA_fof_logic_formula__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_fof_logic_formula_
    {    ( x )}

separated_nonempty_list_AND_ALSO_premise_:
  x = premise
    {    ( [ x ] )}
| x = premise _2 = AND_ALSO xs = separated_nonempty_list_AND_ALSO_premise_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_atomic_word_:
  x = atomic_word
    {    ( [ x ] )}
| x = atomic_word _2 = COMMA xs = separated_nonempty_list_COMMA_atomic_word_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_datalog_lit_:
  x = datalog_lit
    {    ( [ x ] )}
| x = datalog_lit _2 = COMMA xs = separated_nonempty_list_COMMA_datalog_lit_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_datalog_term_:
  x = datalog_term
    {    ( [ x ] )}
| x = datalog_term _2 = COMMA xs = separated_nonempty_list_COMMA_datalog_term_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_fof_logic_formula_:
  x = fof_logic_formula
    {    ( [ x ] )}
| x = fof_logic_formula _2 = COMMA xs = separated_nonempty_list_COMMA_fof_logic_formula_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_term_:
  x = term
    {    ( [ x ] )}
| x = term _2 = COMMA xs = separated_nonempty_list_COMMA_term_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_tff_type_:
  x = tff_type
    {    ( [ x ] )}
| x = tff_type _2 = COMMA xs = separated_nonempty_list_COMMA_tff_type_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_variable_:
  x = variable
    {    ( [ x ] )}
| x = variable _2 = COMMA xs = separated_nonempty_list_COMMA_variable_
    {    ( x :: xs )}

parse_statement:
  d = statement _2 = EOI
    {                                 ( d )}

parse_statements:
  l = statements _2 = EOI
    {                                   ( l )}

statements:
  _1 = EOI
    {        ( [] )}
| s = statement l = statements
    {                             ( s :: l )}
| _1 = error _2 = statements
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      raise (Ast_theory.ParseError loc)
    )}

statement:
  t = theory
    {             ( t )}
| a = axiom
    {            ( a )}
| l = lemma
    {            ( l )}
| c = clause
    {             ( c )}
| i = include_
    {               ( i )}

theory:
  _1 = THEORY h = datalog_atom _3 = IS l = premises _5 = DOT
    {    ( let name, args = h in
      Ast_theory.Theory (name, args, l)
    )}

axiom:
  _1 = AXIOM h = datalog_atom _3 = IS f = fof_formula _5 = DOT
    {    ( let name, args = h in
      Ast_theory.Axiom (name, args, f)
    )}

lemma:
  _1 = LEMMA f = fof_formula _3 = IF l = premises _5 = DOT
    {    ( Ast_theory.LemmaInline (f, l) )}
| _1 = LEMMA _2 = AXIOM h = datalog_atom _4 = IF l = premises _6 = DOT
    {    ( let name, args = h in
      Ast_theory.Lemma (name, args, l)
    )}

clause:
  _1 = RAW h = datalog_lit _3 = DOT
    {    ( Ast_theory.Clause (h, []) )}
| _1 = RAW h = datalog_lit _3 = IF l = separated_nonempty_list_COMMA_datalog_lit_ _5 = DOT
    {    ( Ast_theory.Clause (h, l) )}

datalog_lit:
  s = atomic_word
    {                  ( s, [] )}
| s = atomic_word _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_datalog_term_ _4 = RIGHT_PAREN
    {    ( s, l )}

datalog_term:
  s = atomic_word
    {                  ( s )}
| s = UPPER_WORD
    {                 ( s )}

include_:
  _1 = INCLUDE w = atomic_word _3 = DOT
    {    ( Ast_theory.Include w )}

premises:
  _1 = separated_nonempty_list_AND_ALSO_premise_
    {                                                     ( _1 )}

premise:
  f = fof_formula
    {                  ( Ast_theory.IfPattern f )}
| _1 = AXIOM h = datalog_atom
    {                         ( let name, args = h in Ast_theory.IfAxiom (name, args) )}
| _1 = THEORY h = datalog_atom
    {                          ( let name, args = h in Ast_theory.IfTheory (name, args) )}

datalog_atom:
  w = LOWER_WORD
    {                 ( w, [] )}
| w = LOWER_WORD _2 = LEFT_PAREN args = separated_nonempty_list_COMMA_atomic_word_ _4 = RIGHT_PAREN
    {    ( w, args )}

fof_formula:
  _1 = fof_logic_formula
    {                      ( _1 )}
| _1 = fof_sequent
    {                ( _1 )}

fof_sequent:
  l = fof_tuple _2 = GENTZEN_ARROW r = fof_tuple
    {let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    ( (* TODO accurate locs for subterms *)
      let loc = L.mk_pos _startpos _endpos in
      F.mk_imply ~loc (F.mk_and ~loc l) (F.mk_or ~loc r)
    )}
| _1 = LEFT_PAREN seq = fof_sequent _3 = RIGHT_PAREN
    {                                           ( seq )}

fof_tuple:
  _1 = LEFT_BRACKET xs = loption_separated_nonempty_list_COMMA_fof_logic_formula__ _3 = RIGHT_BRACKET
    {let l =     ( xs ) in
                                                                        ( l )}

fof_logic_formula:
  f = fof_unitary_formula
    {                          ( f )}
| l = fof_logic_formula _1 = EQUIV r = fof_logic_formula
    {let o =           ( F.mk_equiv ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = IMPLY r = fof_logic_formula
    {let o =           ( F.mk_imply ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = LEFT_IMPLY r = fof_logic_formula
    {let o =                ( fun ?loc l r -> F.mk_imply ?loc r l ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = XOR r = fof_logic_formula
    {let o =         ( F.mk_xor ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = NOTVLINE r = fof_logic_formula
    {let o =              ( fun ?loc x y -> F.mk_not ?loc (F.mk_or ?loc [x; y]) ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = NOTAND r = fof_logic_formula
    {let o =            ( fun ?loc x y -> F.mk_not ?loc (F.mk_and ?loc [x; y]) ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = AND r = fof_logic_formula
    {let o =         ( fun ?loc x y -> F.mk_and ?loc [x;y] ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}
| l = fof_logic_formula _1 = VLINE r = fof_logic_formula
    {let o =           ( fun ?loc x y -> F.mk_or ?loc [x;y] ) in
let _endpos = _endpos_r_ in
let _startpos = _startpos_l_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      o ?loc:(Some loc) l r
    )}

fof_unitary_formula:
  _1 = fof_quantified_formula
    {                           ( _1 )}
| _1 = fof_unary_formula
    {                      ( _1 )}
| _1 = atomic_formula
    {                   ( _1 )}
| _1 = LEFT_PAREN f = fof_logic_formula _3 = RIGHT_PAREN
    {                                               ( f )}

fof_quantified_formula:
  _1 = FORALL _2 = LEFT_BRACKET vars = variables _4 = RIGHT_BRACKET _5 = COLUMN f = fof_unitary_formula
    {let q =            ( F.forall ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ~loc vars f
    )}
| _1 = EXISTS _2 = LEFT_BRACKET vars = variables _4 = RIGHT_BRACKET _5 = COLUMN f = fof_unitary_formula
    {let q =            ( F.exists ) in
let _startpos_q_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      q ~loc vars f
    )}

fof_unary_formula:
  _1 = NOT f = fof_unitary_formula
    {let o =         ( F.mk_not ) in
let _startpos_o_ = _startpos__1_ in
let _endpos = _endpos_f_ in
let _startpos = _startpos_o_ in
    (
     let loc = L.mk_pos _startpos _endpos in
     o ~loc f
    )}

atomic_formula:
  _1 = TRUE
    {         ( F.mk_true )}
| _1 = FALSE
    {          ( F.mk_false )}
| l = term _1 = EQUAL r = term
    {let o =           ( F.mk_eq ) in
                                     ( o l r )}
| l = term _1 = NOT_EQUAL r = term
    {let o =               ( F.mk_neq ) in
                                     ( o l r )}
| t = function_term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      F.atom ~loc t
    )}

term:
  _1 = function_term
    {                  ( _1 )}
| _1 = variable
    {             ( _1 )}

function_term:
  _1 = plain_term
    {               ( _1 )}
| _1 = defined_term
    {                 ( _1 )}
| _1 = system_term
    {                ( _1 )}

plain_term:
  s = constant
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.const ~loc s
    )}
| f = functor_ _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app ~loc f args
    )}

constant:
  s = atomic_word
    {                ( Sym.mk_const s )}
| s = atomic_defined_word
    {                        ( s )}

functor_:
  f = atomic_word
    {                        ( Sym.mk_const f )}

defined_term:
  t = defined_atom
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_t_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.const ~loc t
    )}
| t = defined_atomic_term
    {                          ( t )}

defined_atom:
  n = INTEGER
    {              ( Sym.mk_bigint (Big_int.big_int_of_string n) )}
| n = RATIONAL
    {               ( Sym.mk_ratio (Ratio.ratio_of_string n) )}
| n = REAL
    {           ( Sym.mk_real (float_of_string n) )}
| s = DISTINCT_OBJECT
    {                      ( Sym.mk_distinct s )}

defined_atomic_term:
  t = defined_plain_term
    {                         ( t )}

defined_plain_term:
  s = defined_constant
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.const ~loc s
    )}
| f = defined_functor _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app ~loc f args
    )}

defined_constant:
  t = defined_functor
    {                                    ( t )}

defined_functor:
  s = atomic_defined_word
    {                                       ( s )}

system_term:
  c = system_constant
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.const ~loc c
    )}
| f = system_functor _2 = LEFT_PAREN args = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.app ~loc f args
    )}

system_constant:
  t = system_functor
    {                                  ( t )}

system_functor:
  s = atomic_system_word
    {                                     ( s )}

tff_type:
  ty = tff_atom_type
    {                     ( ty )}
| l = tff_atom_type _2 = ARROW r = tff_atom_type
    {    ( Ty.mk_fun r [l] )}
| _1 = LEFT_PAREN args = tff_ty_args _3 = RIGHT_PAREN _4 = ARROW r = tff_atom_type
    {    ( Ty.mk_fun r args )}

tff_atom_type:
  v = tff_ty_var
    {                 ( v )}
| w = type_const
    {                 ( Ty.const w )}
| w = type_const _2 = LEFT_PAREN l = separated_nonempty_list_COMMA_tff_type_ _4 = RIGHT_PAREN
    {    ( Ty.app w l )}
| _1 = TYPE_TY
    {            ( Ty.tType )}
| _1 = LEFT_PAREN ty = tff_type _3 = RIGHT_PAREN
    {                                       ( ty )}

tff_ty_args:
  ty = tff_atom_type
    {                     ( [ty] )}
| hd = tff_atom_type _2 = STAR tl = tff_ty_args
    {                                         ( hd :: tl )}

tff_ty_var:
  w = UPPER_WORD
    {                         ( Ty.var w )}

type_const:
  w = LOWER_WORD
    {                 ( w )}
| w = DOLLAR_WORD
    {                  ( w )}

arguments:
  _1 = separated_nonempty_list_COMMA_term_
    {                                                ( _1 )}

variables:
  l = separated_nonempty_list_COMMA_variable_
    {                                               ( l )}

variable:
  x = UPPER_WORD
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_x_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.var ~loc x
    )}
| x = UPPER_WORD _2 = COLUMN ty = tff_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_x_ in
    (
      let loc = L.mk_pos _startpos _endpos in
      T.var ~loc ~ty x
    )}

atomic_word:
  s = SINGLE_QUOTED
    {                    ( remove_quotes s )}
| s = LOWER_WORD
    {                 ( s )}

atomic_defined_word:
  w = DOLLAR_WORD
    {                  ( Sym.mk_const w )}

atomic_system_word:
  w = DOLLAR_DOLLAR_WORD
    {                         ( Sym.mk_const w )}

%%


