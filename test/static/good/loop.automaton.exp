State 0:
phrase' -> . phrase [ # ]
-- On s shift to state 1
-- On phrase shift to state 3
-- On a shift to state 4
-- On B reduce production a ->

State 1:
phrase -> s . EOF [ # ]
-- On EOF shift to state 2

State 2:
phrase -> s EOF . [ # ]
-- On # reduce production phrase -> s EOF

State 3:
phrase' -> phrase . [ # ]
-- On # accept phrase

State 4:
s -> a . s C [ EOF C ]
-- On s shift to state 5
-- On a shift to state 4
-- On B reduce production a ->

State 5:
s -> a s . C [ EOF C ]
-- On C shift to state 6

State 6:
s -> a s C . [ EOF C ]
-- On EOF reduce production s -> a s C
-- On C reduce production s -> a s C

