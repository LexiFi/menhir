State 0:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On s shift to state 1
-- On phrase shift to state 3
-- On a shift to state 4
## Reductions:
-- On B reduce production a ->

State 1:
## Known stack suffix:
## s
## LR(1) items:
phrase -> s . EOF [ # ]
## Transitions:
-- On EOF shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## s EOF
## LR(1) items:
phrase -> s EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> s EOF

State 3:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Reductions:
-- On # accept phrase

State 4:
## Known stack suffix:
## a
## LR(1) items:
s -> a . s C [ EOF C ]
## Transitions:
-- On s shift to state 5
-- On a shift to state 4
## Reductions:
-- On B reduce production a ->

State 5:
## Known stack suffix:
## a s
## LR(1) items:
s -> a s . C [ EOF C ]
## Transitions:
-- On C shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## a s C
## LR(1) items:
s -> a s C . [ EOF C ]
## Transitions:
## Reductions:
-- On EOF reduce production s -> a s C
-- On C reduce production s -> a s C

