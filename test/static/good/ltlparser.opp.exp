%{
open Promelaast
open Logic_ptree

let observed_expressions=Hashtbl.create 97

let ident_count=ref 0
let get_fresh_ident () =
  ident_count:=!ident_count+1;
  ("buchfreshident"^(string_of_int !ident_count))
%}
%start ltl
%token EOF
%token LTL_ADRESSE
%token LTL_AND
%token LTL_CALL
%token LTL_CALL_OR_RETURN
%token LTL_DIV
%token LTL_DOT
%token LTL_EQ
%token LTL_FALSE
%token LTL_FATALLY
%token LTL_GE
%token LTL_GLOBALLY
%token LTL_GT
%token LTL_IMPLIES
%token <string> LTL_INT
%token <string> LTL_LABEL
%token LTL_LE
%token LTL_LEFT_RIGHT_ARROW
%token LTL_LEFT_SQUARE
%token LTL_LPAREN
%token LTL_LT
%token LTL_MINUS
%token LTL_MODULO
%token LTL_NEQ
%token LTL_NEXT
%token LTL_NOT
%token LTL_OR
%token LTL_PLUS
%token LTL_RELEASE
%token LTL_RETURN
%token LTL_RIGHT_ARROW
%token LTL_RIGHT_SQUARE
%token LTL_RPAREN
%token LTL_STAR
%token LTL_TRUE
%token LTL_UNTIL
%right LTL_IMPLIES LTL_LEFT_RIGHT_ARROW LTL_OR
%right LTL_AND
%nonassoc LTL_NOT
%right LTL_FATALLY LTL_GLOBALLY LTL_NEXT LTL_RELEASE LTL_UNTIL
%right LTL_EQ LTL_GE LTL_GT LTL_LE LTL_LT LTL_NEQ
%right LTL_DIV LTL_MINUS LTL_MODULO LTL_PLUS LTL_STAR
%type <(Ltlast.formula * (string, (Logic_ptree.relation *  Promelaast.expression * Promelaast.expression)) Hashtbl.t)> ltl
%%

ltl:
  _1 = formula _2 = EOF
    {                      ((_1,observed_expressions))}

formula:
  _1 = LTL_TRUE
    {            (Ltlast.LTrue)}
| _1 = LTL_FALSE
    {     (Ltlast.LFalse)}
| _1 = LTL_LPAREN _2 = formula _3 = LTL_RPAREN
    {     ( _2 )}
| _1 = LTL_GLOBALLY _2 = formula
    {     ( Ltlast.LGlobally(_2) )}
| _1 = LTL_FATALLY _2 = formula
    {     ( Ltlast.LFatally(_2) )}
| _1 = formula _2 = LTL_UNTIL _3 = formula
    {     ( Ltlast.LUntil(_1,_3) )}
| _1 = formula _2 = LTL_RELEASE _3 = formula
    {     ( Ltlast.LRelease(_1,_3) )}
| _1 = LTL_NEXT _2 = formula
    {     ( Ltlast.LNext(_2) )}
| _1 = formula _2 = LTL_OR _3 = formula
    {     ( Ltlast.LOr(_1,_3) )}
| _1 = formula _2 = LTL_AND _3 = formula
    {     ( Ltlast.LAnd(_1,_3) )}
| _1 = LTL_NOT _2 = formula
    {     ( Ltlast.LNot(_2) )}
| _1 = formula _2 = LTL_IMPLIES _3 = formula
    {     ( Ltlast.LImplies(_1,_3) )}
| _1 = formula _2 = LTL_LEFT_RIGHT_ARROW _3 = formula
    {     ( Ltlast.LIff(_1,_3) )}
| _1 = LTL_CALL _2 = LTL_LPAREN _3 = LTL_LABEL _4 = LTL_RPAREN
    {     ( Ltlast.LCall(_3))}
| _1 = LTL_RETURN _2 = LTL_LPAREN _3 = LTL_LABEL _4 = LTL_RPAREN
    {     ( Ltlast.LReturn(_3))}
| _1 = LTL_CALL_OR_RETURN _2 = LTL_LPAREN _3 = LTL_LABEL _4 = LTL_RPAREN
    {     ( Ltlast.LCallOrReturn(_3))}
| _1 = logic_relation
    {     (
	      let id = get_fresh_ident () in
	        Hashtbl.add observed_expressions id _1;
	        Ltlast.LIdent(id)
	    )}

logic_relation:
  _1 = arith_relation _2 = LTL_EQ _3 = arith_relation
    {                                         ( Eq, _1 , _3)}
| _1 = arith_relation _2 = LTL_LT _3 = arith_relation
    {                                         ( Lt, _1, _3 )}
| _1 = arith_relation _2 = LTL_GT _3 = arith_relation
    {                                         ( Gt, _1, _3 )}
| _1 = arith_relation _2 = LTL_LE _3 = arith_relation
    {                                         ( Le, _1, _3 )}
| _1 = arith_relation _2 = LTL_GE _3 = arith_relation
    {                                         ( Ge, _1, _3 )}
| _1 = arith_relation _2 = LTL_NEQ _3 = arith_relation
    {                                         ( Neq, _1, _3 )}
| _1 = arith_relation
    {                  ( Neq, _1, PCst (IntConstant "0") )}

arith_relation:
  _1 = arith_relation_mul _2 = LTL_PLUS _3 = arith_relation
    {                                                     ( PBinop(Badd,_1,_3) )}
| _1 = arith_relation_mul _2 = LTL_MINUS _3 = arith_relation
    {                                               ( PBinop(Bsub,_1,_3) )}
| _1 = arith_relation_mul
    {                      ( _1 )}

arith_relation_mul:
  _1 = arith_relation_mul _2 = LTL_DIV _3 = access_or_const
    {                                              ( PBinop(Bdiv,_1,_3) )}
| _1 = arith_relation_mul _2 = LTL_STAR _3 = access_or_const
    {                                               ( PBinop(Bmul,_1,_3) )}
| _1 = arith_relation_mul _2 = LTL_MODULO _3 = access_or_const
    {                                                 ( PBinop(Bmod,_1,_3))}
| _1 = access_or_const
    {                   ( _1 )}

access_or_const:
  _1 = LTL_INT
    {                  ( PCst (IntConstant _1) )}
| _1 = LTL_MINUS _2 = LTL_INT
    {                            ( PUnop (Uminus,PCst (IntConstant _2)) )}
| _1 = access
    {          ( _1 )}
| _1 = LTL_LPAREN _2 = arith_relation _3 = LTL_RPAREN
    {                                        ( _2 )}

access:
  _1 = access _2 = LTL_RIGHT_ARROW _3 = LTL_LABEL
    {                                    ( PField (PUnop(Ustar,_1),_3) )}
| _1 = access _2 = LTL_DOT _3 = LTL_LABEL
    {                            ( PField(_1,_3) )}
| _1 = access_array
    {                (_1)}

access_array:
  _1 = access_array _2 = LTL_LEFT_SQUARE _3 = access_or_const _4 = LTL_RIGHT_SQUARE
    {     ( PArrget(_1,_3) )}
| _1 = access_leaf
    {                   (_1)}

access_leaf:
  _1 = LTL_ADRESSE _2 = access
    {                             ( PUnop (Uamp,_2) )}
| _1 = LTL_STAR _2 = access
    {                   ( PUnop (Ustar, _2 ) )}
| _1 = LTL_LABEL
    {             ( PVar _1 )}
| _1 = LTL_LPAREN _2 = access _3 = LTL_RPAREN
    {                                ( _2 )}

%%
