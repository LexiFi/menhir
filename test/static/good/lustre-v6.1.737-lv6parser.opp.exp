File "lustre-v6.1.737-lv6parser.mly", line 22, characters 15-23:
Warning: the token TK_ERROR is unused.
File "lustre-v6.1.737-lv6parser.mly", line 72, characters 15-26:
Warning: the token TK_OPERATOR is unused.
File "lustre-v6.1.737-lv6parser.mly", line 76, characters 15-23:
Warning: the token TK_POWER is unused.
%{
open Lxm
open AstPredef
open AstV6
open AstCore
open Lv6parserUtils


(**********************************************************************************)
(**********************************************************************************)
(**********************************************************************************)
(*
   TODO:
   - reindent
 *)

%}
%start program
%token <Lxm.t> TK_AND
%token <Lxm.t> TK_ARROW
%token <Lxm.t> TK_ASSERT
%token <Lxm.t> TK_BAR
%token <Lxm.t> TK_BODY
%token <Lxm.t> TK_BOOL
%token <Lxm.t> TK_CDOTS
%token <Lxm.t> TK_CLOSE_BRACE
%token <Lxm.t> TK_CLOSE_BRACKET
%token <Lxm.t> TK_CLOSE_PAR
%token <Lxm.t> TK_CLOSE_STATIC_PAR
%token <Lxm.t> TK_COLON
%token <Lxm.t> TK_COMA
%token <Lxm.t> TK_CONST
%token <Lxm.t> TK_CURRENT
%token <Lxm.t> TK_DIESE
%token <Lxm.t> TK_DIV
%token <Lxm.t> TK_DOT
%token <Lxm.t> TK_ELSE
%token <Lxm.t> TK_END
%token <Lxm.t> TK_ENUM
%token TK_EOF
%token <Lxm.t> TK_EQ
%token <Lxm.t> TK_ERROR
%token <Lxm.t> TK_EXTERN
%token <Lxm.t> TK_FALSE
%token <Lxm.t> TK_FBY
%token <Lxm.t> TK_FUNCTION
%token <Lxm.t> TK_GT
%token <Lxm.t> TK_GTE
%token <Lxm.t> TK_HAT
%token <Lxm.t> TK_ICONST
%token <Lxm.t> TK_IDENT
%token <Lxm.t> TK_IF
%token <Lxm.t> TK_IMPL
%token <Lxm.t> TK_INCLUDE
%token <Lxm.t> TK_INT
%token <Lxm.t> TK_IS
%token <Lxm.t> TK_LET
%token <Lxm.t> TK_LONGIDENT
%token <Lxm.t> TK_LT
%token <Lxm.t> TK_LTE
%token <Lxm.t> TK_MERGE
%token <Lxm.t> TK_MINUS
%token <Lxm.t> TK_MOD
%token <Lxm.t> TK_MODEL
%token <Lxm.t> TK_NEEDS
%token <Lxm.t> TK_NEQ
%token <Lxm.t> TK_NODE
%token <Lxm.t> TK_NOR
%token <Lxm.t> TK_NOT
%token <Lxm.t> TK_OPEN_BRACE
%token <Lxm.t> TK_OPEN_BRACKET
%token <Lxm.t> TK_OPEN_PAR
%token <Lxm.t> TK_OPEN_STATIC_PAR
%token <Lxm.t> TK_OPERATOR
%token <Lxm.t> TK_OR
%token <Lxm.t> TK_PACKAGE
%token <Lxm.t> TK_PCENT
%token <Lxm.t> TK_PLUS
%token <Lxm.t> TK_POWER
%token <Lxm.t> TK_PRE
%token <Lxm.t> TK_PROVIDES
%token <Lxm.t> TK_RCONST
%token <Lxm.t> TK_REAL
%token <Lxm.t> TK_RETURNS
%token <Lxm.t> TK_SEMICOL
%token <Lxm.t> TK_SLASH
%token <Lxm.t> TK_STAR
%token <Lxm.t> TK_STEP
%token <Lxm.t> TK_STRING
%token <Lxm.t> TK_STRUCT
%token <Lxm.t> TK_TEL
%token <Lxm.t> TK_THEN
%token <Lxm.t> TK_TRUE
%token <Lxm.t> TK_TYPE
%token <Lxm.t> TK_UNSAFE
%token <Lxm.t> TK_USES
%token <Lxm.t> TK_VAR
%token <Lxm.t> TK_WHEN
%token <Lxm.t> TK_WITH
%token <Lxm.t> TK_XOR
%left TK_ELSE
%left TK_BAR
%left TK_ARROW
%nonassoc TK_STEP
%nonassoc TK_CDOTS
%right TK_IMPL
%left TK_OR TK_XOR
%left TK_AND
%nonassoc TK_EQ TK_GT TK_GTE TK_LT TK_LTE TK_NEQ
%nonassoc TK_NOT
%left TK_MINUS TK_PLUS
%left TK_DIV TK_MOD TK_PCENT TK_SLASH TK_STAR
%left TK_POWER
%left TK_WHEN
%nonassoc TK_INT TK_REAL
%nonassoc TK_CURRENT TK_DIESE TK_NOR TK_PRE TK_UMINUS
%left TK_DOT TK_HAT
%right TK_OPEN_BRACE TK_OPEN_BRACKET TK_SEMICOL
%right TK_COMA
%right TK_FBY
%type <AstV6.t> program
%%

program:
  _1 = IncludeList _2 = PackBody _3 = TK_EOF
    {        (
                AstV6.PRPackBody(List.rev _1, _2)
        )}
| _1 = IncludeList _2 = PackList _3 = TK_EOF
    {        (
                AstV6.PRPack_or_models (List.rev _1, List.rev _2)
        )}

PackList:
  _1 = OnePack
    {        ( [_1] )}
| _1 = PackList _2 = OnePack
    {        ( _2::_1 )}

OnePack:
  _1 = ModelDecl
    {                ( AstV6.NSModel _1 )}
| _1 = PackDecl
    {                ( AstV6.NSPack _1 )}
| _1 = PackEq
    {                ( AstV6.NSPack _1 )}

Include:
  _1 = TK_INCLUDE _2 = TK_STRING
    {        ( (Lxm.str _2)  )}

IncludeList:
  
    {        ( [] )}
| _1 = IncludeList _2 = Include
    {        ( _2::_1 )}

Provides:
  
    {                ( None )}
| _1 = TK_PROVIDES _2 = ProvideList
    {        ( Some (List.rev _2) )}

ProvideList:
  _1 = Provide _2 = TK_SEMICOL
    {                ( [_1]  )}
| _1 = ProvideList _2 = Provide _3 = TK_SEMICOL
    {                ( _2::_1 )}

Provide:
  _1 = TK_CONST _2 = Lv6Id _3 = TK_COLON _4 = Type _5 = ConstDefOpt
    {        (
                Lxm.flagit
                  (ConstInfo (ExternalConst (Lxm.id _2, _4, _5)))
                _2
        )}
| _1 = TK_UNSAFE _2 = TK_NODE _3 = Lv6Id _4 = StaticParams _5 = Params _6 = TK_RETURNS _7 = Params
    {        (
                treat_abstract_node true true _3 _4 _5 _7
        )}
| _1 = TK_NODE _2 = Lv6Id _3 = StaticParams _4 = Params _5 = TK_RETURNS _6 = Params
    {        (
                treat_abstract_node false true _2 _3 _4 _6
        )}
| _1 = TK_UNSAFE _2 = TK_FUNCTION _3 = Lv6Id _4 = StaticParams _5 = Params _6 = TK_RETURNS _7 = Params
    {        (
                treat_abstract_node true false _3 _4 _5 _7
        )}
| _1 = TK_FUNCTION _2 = Lv6Id _3 = StaticParams _4 = Params _5 = TK_RETURNS _6 = Params
    {        (
                treat_abstract_node false false _2 _3 _4 _6
        )}
| _1 = TK_TYPE _2 = OneTypeDecl
    {        ( Lxm.flagit (TypeInfo (snd _2)) (fst _2) )}

ConstDefOpt:
  
    {        ( None)}
| _1 = TK_EQ _2 = Expression
    {        (
          Some _2
        )}

ModelDecl:
  _1 = TK_MODEL _2 = Lv6Id _3 = Uses _4 = TK_NEEDS _5 = StaticParamList _6 = TK_SEMICOL _7 = Provides _8 = TK_BODY _9 = PackBody _10 = TK_END
    {        (
                let mdecl = {
                        mo_name = (Lv6Id.pack_name_of_string (Lxm.str _2));
                        mo_uses = _3 ;
                        mo_needs = (List.rev _5) ;
                        mo_provides = _7 ;
                        mo_body = _9;
                } in
                {it = mdecl; src = _2 }
        )}

PackDecl:
  _1 = TK_PACKAGE _2 = Lv6Id _3 = Uses _4 = Provides _5 = TK_BODY _6 = PackBody _7 = TK_END
    {        (
                let pdef = PackGiven {
                        pg_uses = _3 ;
                        pg_provides = _4 ;
                        pg_body = _6;
                } in
                let pdecl = {
                        pa_name = (Lv6Id.pack_name_of_string (Lxm.str _2));
                        pa_def = pdef;
                } in
                {it = pdecl; src = _2 }
        )}

Uses:
  
    {        ( [] )}
| _1 = TK_USES _2 = Lv6IdList _3 = TK_SEMICOL
    {        (
                List.rev_map lexeme_to_pack_name_flagged _2
        )}

Eq_or_Is:
  _1 = TK_EQ
    {                ()}
| _1 = TK_IS
    {                ()}

PackEq:
  _1 = TK_PACKAGE _2 = Lv6Id _3 = Eq_or_Is _4 = Lv6Id _5 = TK_OPEN_PAR _6 = ByNameStaticArgList _7 = TK_CLOSE_PAR _8 = TK_SEMICOL
    {        (
                let pdef = PackInstance {
                        pi_model =  (Lxm.id _4);
                        pi_args = (List.rev _6);
                } in
                let pa = {
                        pa_name = (Lv6Id.pack_name_of_string (Lxm.str _2));
                        pa_def = pdef;
                } in
                {it = pa; src = _2 }
        )}

PackBody:
  _1 = DeclList
    {        (
                let res = AstV6.make_packbody
                        const_table type_table node_table (List.rev !def_list) in
                (* clean all ... *)
                Hashtbl.clear const_table ;
                Hashtbl.clear type_table ;
                Hashtbl.clear node_table ;
                def_list := [] ;
                res
        )}

DeclList:
  _1 = OneDecl
    {                        ( )}
| _1 = DeclList _2 = OneDecl
    {                        ( )}

OneDecl:
  _1 = ConstDecl
    {                        ( )}
| _1 = TypeDecl
    {                        ( )}
| _1 = ExtNodeDecl
    {                        ( )}
| _1 = NodeDecl
    {                        ( )}

Lv6IdRef:
  _1 = TK_IDENT
    {        ( idref_of_lxm _1 )}
| _1 = TK_LONGIDENT
    {        ( idref_of_lxm _1 )}

Lv6Id:
  _1 = TK_IDENT _2 = Pragma
    {        ( (Lv6parserUtils.make_ident _1 _2) )}

Lv6IdList:
  _1 = Lv6Id
    {                        ( [_1] )}
| _1 = Lv6IdList _2 = TK_COMA _3 = Lv6Id
    {                        ( _3::_1 )}

TypedLv6IdsList:
  _1 = TypedLv6Ids
    {                        ( [ _1 ] )}
| _1 = TypedLv6IdsList _2 = TK_SEMICOL _3 = TypedLv6Ids
    {                        ( _3::_1 )}

TypedLv6Ids:
  _1 = Lv6IdList _2 = TK_COLON _3 = Type
    {                        ( ((List.rev _1), _3 ) )}

TypedValuedLv6Ids:
  _1 = TypedValuedLv6Id
    {                        ( _1 )}
| _1 = TypedValuedLv6Ids _2 = TK_SEMICOL _3 = TypedValuedLv6Id
    {                        ( List.append _1 _3 )}

TypedValuedLv6Id:
  _1 = Lv6Id _2 = TK_COLON _3 = Type
    {                        ( (id_valopt_list_of_id_list [_1] _3 ) )}
| _1 = Lv6Id _2 = TK_COMA _3 = Lv6IdList _4 = TK_COLON _5 = Type
    {                        ( (id_valopt_list_of_id_list (_1::(List.rev _3)) _5) )}
| _1 = Lv6Id _2 = TK_COLON _3 = Type _4 = TK_EQ _5 = Expression
    {                        ( [id_valopt_of_id_val _1 _3 _5]  )}

ConstDecl:
  _1 = TK_CONST _2 = ConstDeclList
    {     ( treat_const_decl_list _2 )}

ConstDeclList:
  _1 = OneConstDecl _2 = TK_SEMICOL
    {    ( _1 )}
| _1 = ConstDeclList _2 = OneConstDecl _3 = TK_SEMICOL
    {    ( _1 @ _2 )}

OneConstDecl:
  _1 = Lv6Id _2 = TK_COLON _3 = Type
    {    ( (make_external_const_list [_1] _3 ) )}
| _1 = Lv6Id _2 = TK_COMA _3 = Lv6IdList _4 = TK_COLON _5 = Type
    {    ( (make_external_const_list (_1::(List.rev _3)) _5) )}
| _1 = Lv6Id _2 = TK_COLON _3 = Type _4 = TK_EQ _5 = Expression
    {    ( [ (make_defined_const _1 (Some _3) _5) ] )}
| _1 = Lv6Id _2 = TK_EQ _3 = Expression
    {    ( [ (make_defined_const _1 (None) _3 ) ] )}

TypeDecl:
  _1 = TK_TYPE _2 = TypeDeclList
    {                ( List.iter treat_type_decl (List.rev _2) )}

TypeDeclList:
  _1 = OneTypeDecl _2 = TK_SEMICOL
    {                        ( [_1] )}
| _1 = TypeDeclList _2 = OneTypeDecl _3 = TK_SEMICOL
    {                        ( _2::_1 )}

OneTypeDecl:
  _1 = Lv6Id
    {                ( (_1, ExternalType (Lxm.id _1)) )}
| _1 = Lv6Id _2 = TK_EQ _3 = Type
    {                ( (_1, AliasedType ((Lxm.id _1), _3)) )}
| _1 = Lv6Id _2 = TK_EQ _3 = TK_ENUM _4 = TK_OPEN_BRACE _5 = Lv6IdList _6 = TK_CLOSE_BRACE
    {                (
							let cstnamelist = List.rev_map lexeme_to_ident_flagged _5 in
							(_1, EnumType ((Lxm.id _1), cstnamelist))
                )}
| _1 = Lv6Id _2 = TK_EQ _3 = OptStruct _4 = TK_OPEN_BRACE _5 = TypedValuedLv6Ids _6 = OptSemicol _7 = TK_CLOSE_BRACE
    {                (
						let typinfo = StructType (make_struct_type_info _1 _5) in
						(_1, typinfo)
					 )}

OptStruct:
  
    {                      ()}
| _1 = TK_STRUCT
    {                      ()}

Type:
  _1 = TK_BOOL
    {                     ( {src=_1; it=Bool_type_exp } )}
| _1 = TK_INT
    {                     ( {src=_1; it=Int_type_exp } )}
| _1 = TK_REAL
    {                     ( {src=_1; it=Real_type_exp } )}
| _1 = Lv6IdRef
    {                          ( {src=_1.src; it= Named_type_exp _1.it } )}
| _1 = Type _2 = TK_HAT _3 = Expression
    {                        ( {src=_2; it=Array_type_exp (_1 , _3) } )}

ExtNodeDecl:
  _1 = TK_EXTERN _2 = TK_FUNCTION _3 = Lv6Id _4 = Params _5 = TK_RETURNS _6 = Params _7 = OptSemicol
    {          ( treat_external_node false false _3 _4 _6 )}
| _1 = TK_UNSAFE _2 = TK_EXTERN _3 = TK_FUNCTION _4 = Lv6Id _5 = Params _6 = TK_RETURNS _7 = Params _8 = OptSemicol
    {          ( treat_external_node true false _4 _5 _7 )}
| _1 = TK_EXTERN _2 = TK_NODE _3 = Lv6Id _4 = Params _5 = TK_RETURNS _6 = Params _7 = OptSemicol
    {          ( treat_external_node false true _3 _4 _6 )}
| _1 = TK_UNSAFE _2 = TK_EXTERN _3 = TK_NODE _4 = Lv6Id _5 = Params _6 = TK_RETURNS _7 = Params _8 = OptSemicol
    {          ( treat_external_node true true  _4 _5 _7 )}

NodeDecl:
  _1 = LocalNode
    {                    ()}

LocalNode:
  _1 = TK_NODE _2 = Lv6Id _3 = StaticParams _4 = Params _5 = TK_RETURNS _6 = Params _7 = OptSemicol _8 = LocalDecls _9 = Body _10 = OptEndNode
    {        ( treat_node_decl false true _2 _3 _4 _6 _8 (fst _9) (snd _9) )}
| _1 = TK_FUNCTION _2 = Lv6Id _3 = StaticParams _4 = Params _5 = TK_RETURNS _6 = Params _7 = OptSemicol _8 = LocalDecls _9 = Body _10 = OptEndNode
    {        ( treat_node_decl false false _2 _3 _4 _6 _8 (fst _9) (snd _9) )}
| _1 = TK_NODE _2 = Lv6Id _3 = StaticParams _4 = NodeProfileOpt _5 = TK_EQ _6 = EffectiveNode _7 = OptSemicol
    {        ( treat_node_alias false true _2 _3 _4 _6 )}
| _1 = TK_FUNCTION _2 = Lv6Id _3 = StaticParams _4 = NodeProfileOpt _5 = TK_EQ _6 = EffectiveNode _7 = OptSemicol
    {        ( treat_node_alias false false _2 _3 _4 _6 )}
| _1 = TK_UNSAFE _2 = TK_NODE _3 = Lv6Id _4 = StaticParams _5 = Params _6 = TK_RETURNS _7 = Params _8 = OptSemicol _9 = LocalDecls _10 = Body _11 = OptEndNode
    {        ( treat_node_decl true true _3 _4 _5 _7 _9 (fst _10) (snd _10) )}
| _1 = TK_UNSAFE _2 = TK_FUNCTION _3 = Lv6Id _4 = StaticParams _5 = Params _6 = TK_RETURNS _7 = Params _8 = OptSemicol _9 = LocalDecls _10 = Body _11 = OptEndNode
    {        ( treat_node_decl true false  _3 _4 _5 _7 _9 (fst _10) (snd _10) )}
| _1 = TK_UNSAFE _2 = TK_NODE _3 = Lv6Id _4 = StaticParams _5 = NodeProfileOpt _6 = TK_EQ _7 = EffectiveNode _8 = OptSemicol
    {        ( treat_node_alias true true _3 _4 _5 _7 )}
| _1 = TK_UNSAFE _2 = TK_FUNCTION _3 = Lv6Id _4 = StaticParams _5 = NodeProfileOpt _6 = TK_EQ _7 = EffectiveNode _8 = OptSemicol
    {        ( treat_node_alias true false _3 _4 _5 _7 )}

NodeProfileOpt:
  
    {        ( None )}
| _1 = Params _2 = TK_RETURNS _3 = Params
    {        (
                let invars = clocked_ids_to_var_infos VarInput _1 in
                let outvars = clocked_ids_to_var_infos VarOutput _3 in
                Some (invars, outvars)
        )}

StaticParams:
  
    {                ( [] )}
| _1 = TK_OPEN_STATIC_PAR _2 = StaticParamList _3 = TK_CLOSE_STATIC_PAR
    {                ( (List.rev _2) )}

StaticParamList:
  _1 = StaticParam
    {                        ( [_1] )}
| _1 = StaticParamList _2 = TK_SEMICOL _3 = StaticParam
    {                        ( _3::_1 )}

StaticParam:
  _1 = TK_TYPE _2 = Lv6Id
    {                        ( {it=(StaticParamType (Lxm.id _2)); src=_2} )}
| _1 = TK_CONST _2 = Lv6Id _3 = TK_COLON _4 = Type
    {                        ( {it=(StaticParamConst (Lxm.id _2 , _4)); src=_2} )}
| _1 = TK_NODE _2 = Lv6Id _3 = Params _4 = TK_RETURNS _5 = Params
    {            (
                		let invars = clocked_ids_to_var_infos VarInput _3 in
                		let outvars = clocked_ids_to_var_infos VarOutput _5 in
                		let xn = StaticParamNode (
                        		Lxm.id _2,
                        		invars,
                        		outvars,
                        		true,
                              true
                		) in
                		Lxm.flagit xn _2
        				)}
| _1 = TK_FUNCTION _2 = Lv6Id _3 = Params _4 = TK_RETURNS _5 = Params
    {        (
                let invars = clocked_ids_to_var_infos VarInput _3 in
                let outvars = clocked_ids_to_var_infos VarOutput _5 in
                let xn = StaticParamNode (
                        Lxm.id _2,
                        invars,
                        outvars,
                        false,
                        true
                ) in
                Lxm.flagit xn _2
        )}
| _1 = TK_UNSAFE _2 = TK_NODE _3 = Lv6Id _4 = Params _5 = TK_RETURNS _6 = Params
    {            (
                		let invars = clocked_ids_to_var_infos VarInput _4 in
                		let outvars = clocked_ids_to_var_infos VarOutput _6 in
                		let xn = StaticParamNode (
                        		Lxm.id _3,
                        		invars,
                        		outvars,
                        		true,
                              false
                		) in
                		Lxm.flagit xn _3
        				)}
| _1 = TK_UNSAFE _2 = TK_FUNCTION _3 = Lv6Id _4 = Params _5 = TK_RETURNS _6 = Params
    {        (
                let invars = clocked_ids_to_var_infos VarInput _4 in
                let outvars = clocked_ids_to_var_infos VarOutput _6 in
                let xn = StaticParamNode (
                        Lxm.id _3,
                        invars,
                        outvars,
                        false,
                        false
                ) in
                Lxm.flagit xn _3
        )}

OptEndNode:
  _1 = TK_DOT
    {                        ()}
| _1 = OptSemicol
    {                        ()}

Params:
  _1 = TK_OPEN_PAR _2 = TK_CLOSE_PAR
    {                        ( [] )}
| _1 = TK_OPEN_PAR _2 = VarDeclList _3 = OptSemicol _4 = TK_CLOSE_PAR
    {                        ( (List.rev _2) )}

LocalDecls:
  
    { ( ([],[]) )}
| _1 = LocalDeclList
    { ( _1 )}

LocalDeclList:
  _1 = OneLocalDecl
    {  ( _1 )}
| _1 = LocalDeclList _2 = OneLocalDecl
    {  (
			match (_1,_2) with
			|	( (vl1, cl1) , (vl2, cl2)) ->
				( vl2 @ vl1, cl2 @ cl1)
		)}

OneLocalDecl:
  _1 = LocalVars
    {  ( (_1, []) )}
| _1 = LocalConsts
    {  ( ([], _1) )}

LocalConsts:
  _1 = TK_CONST _2 = ConstDeclList
    { ( _2 )}

LocalVars:
  _1 = TK_VAR _2 = VarDeclList _3 = TK_SEMICOL
    { ( (List.rev _2) )}

VarDeclList:
  _1 = VarDecl
    {                        ( [_1] )}
| _1 = VarDeclList _2 = TK_SEMICOL _3 = VarDecl
    {                        ( _3::_1 )}

VarDecl:
  _1 = TypedLv6Ids
    {                ( ([_1], Base) )}
| _1 = TypedLv6Ids _2 = TK_WHEN _3 = ClockExpr
    {                ( ([_1], _3) )}
| _1 = TK_OPEN_PAR _2 = TypedLv6IdsList _3 = TK_CLOSE_PAR _4 = TK_WHEN _5 = ClockExpr
    {                ( ( (List.rev _2), _5 ) )}

Body:
  _1 = TK_LET _2 = TK_TEL
    {                ( ([], []) )}
| _1 = TK_LET _2 = EquationList _3 = TK_TEL
    {                ( (List.rev (fst _2) , List.rev (snd _2)) )}

EquationList:
  _1 = Equation
    {          ( _1 )}
| _1 = EquationList _2 = Equation
    {          ( ( (fst _2) @ (fst _1) , (snd _2) @ (snd _1) ) )}

Equation:
  _1 = TK_ASSERT _2 = Expression _3 = TK_SEMICOL
    {          ( ( [ {src = _1; it = _2} ] , [] ) )}
| _1 = Left _2 = TK_EQ _3 = Expression _4 = TK_SEMICOL
    {          ( ( [] , [ {src = _2; it = (_1, _3) } ] ) )}

Left:
  _1 = LeftItemList
    {          ( (List.rev _1) )}
| _1 = TK_OPEN_PAR _2 = LeftItemList _3 = TK_CLOSE_PAR
    {          ( (List.rev _2) )}

LeftItemList:
  _1 = LeftItem
    {          ( [_1] )}
| _1 = LeftItemList _2 = TK_COMA _3 = LeftItem
    {          ( _3::_1 )}

LeftItem:
  _1 = Lv6Id
    {          ( LeftVar ( {src = _1; it = Lxm.id _1} ) )}
| _1 = FieldLeftItem
    {          ( _1 )}
| _1 = TableLeftItem
    {          ( _1 )}

FieldLeftItem:
  _1 = LeftItem _2 = TK_DOT _3 = Lv6Id
    {        ( LeftField (_1 , {src = _3; it = Lxm.id _3} ) )}

TableLeftItem:
  _1 = LeftItem _2 = TK_OPEN_BRACKET _3 = Expression _4 = TK_CLOSE_BRACKET
    {          ( LeftArray (_1 , {src = _2; it = _3})  )}
| _1 = LeftItem _2 = TK_OPEN_BRACKET _3 = Select _4 = TK_CLOSE_BRACKET
    {          ( LeftSlice (_1, _3 ) )}

Expression:
  _1 = Constant
    {                     ( _1 )}
| _1 = Lv6IdRef
    {                        ( leafexp _1.src (IDENT_n _1.it) )}
| _1 = TK_NOT _2 = Expression
    {                                   ( unexp_predef _1 NOT_n _2 )}
| _1 = TK_MINUS _2 = Expression %prec TK_UMINUS
    {                                     ( unexp_predef _1 UMINUS_n _2 )}
| _1 = TK_PRE _2 = Expression
    {                                   ( unexp _1 PRE_n _2 )}
| _1 = TK_CURRENT _2 = Expression
    {                                   ( unexp _1 CURRENT_n _2 )}
| _1 = TK_INT _2 = Expression
    {                                   ( unexp_predef _1 REAL2INT_n _2 )}
| _1 = TK_REAL _2 = Expression
    {                                   ( unexp_predef _1 INT2REAL_n _2 )}
| _1 = Expression _2 = TK_WHEN _3 = ClockExpr
    {     ( unexp _2 (WHEN_n _3) _1 )}
| _1 = Expression _2 = TK_FBY _3 = Expression
    {                                          ( binexp _2 FBY_n _1 _3 )}
| _1 = Expression _2 = TK_ARROW _3 = Expression
    {                                          ( binexp _2 ARROW_n _1 _3 )}
| _1 = Expression _2 = TK_AND _3 = Expression
    {                                          ( binexp_predef _2 AND_n  _1 _3 )}
| _1 = Expression _2 = TK_OR _3 = Expression
    {                                          ( binexp_predef _2 OR_n  _1 _3 )}
| _1 = Expression _2 = TK_XOR _3 = Expression
    {                                          ( binexp_predef _2 XOR_n  _1 _3 )}
| _1 = Expression _2 = TK_IMPL _3 = Expression
    {                                          ( binexp_predef _2 IMPL_n  _1 _3 )}
| _1 = Expression _2 = TK_EQ _3 = Expression
    {                                          ( binexp_predef _2 EQ_n  _1 _3 )}
| _1 = Expression _2 = TK_NEQ _3 = Expression
    {                                          ( binexp_predef _2 NEQ_n  _1 _3 )}
| _1 = Expression _2 = TK_LT _3 = Expression
    {                                          ( binexp_predef _2 LT_n  _1 _3 )}
| _1 = Expression _2 = TK_LTE _3 = Expression
    {                                          ( binexp_predef _2 LTE_n  _1 _3 )}
| _1 = Expression _2 = TK_GT _3 = Expression
    {                                          ( binexp_predef _2 GT_n  _1 _3 )}
| _1 = Expression _2 = TK_GTE _3 = Expression
    {                                          ( binexp_predef _2 GTE_n  _1 _3 )}
| _1 = Expression _2 = TK_DIV _3 = Expression
    {                                          ( binexp_predef _2 DIV_n  _1 _3 )}
| _1 = Expression _2 = TK_MOD _3 = Expression
    {                                          ( binexp_predef _2 MOD_n  _1 _3 )}
| _1 = Expression _2 = TK_MINUS _3 = Expression
    {                                          ( binexp_predef _2 MINUS_n  _1 _3 )}
| _1 = Expression _2 = TK_PLUS _3 = Expression
    {                                          ( binexp_predef _2 PLUS_n  _1 _3 )}
| _1 = Expression _2 = TK_SLASH _3 = Expression
    {                                          ( binexp_predef _2 SLASH_n  _1 _3 )}
| _1 = Expression _2 = TK_STAR _3 = Expression
    {                                          ( binexp_predef _2 TIMES_n  _1 _3 )}
| _1 = TK_IF _2 = Expression _3 = TK_THEN _4 = Expression _5 = TK_ELSE _6 = Expression
    {                        ( ternexp_predef _1 IF_n _2 _4 _6 )}
| _1 = TK_WITH _2 = Expression _3 = TK_THEN _4 = Expression _5 = TK_ELSE _6 = Expression
    {            ( CallByPos( {src = _1 ; it = WITH_n(_2, _4, _6) }, Oper [] ) )}
| _1 = TK_DIESE _2 = TK_OPEN_PAR _3 = ExpressionList _4 = TK_CLOSE_PAR
    {                        ( naryexp_predef _1 DIESE_n (List.rev _3) )}
| _1 = TK_NOR _2 = TK_OPEN_PAR _3 = ExpressionList _4 = TK_CLOSE_PAR
    {                        ( naryexp_predef _1 NOR_n (List.rev _3) )}
| _1 = CallByPosExpression
    {                        ( _1 )}
| _1 = TK_OPEN_BRACKET _2 = ExpressionList _3 = TK_CLOSE_BRACKET
    {                        ( naryexp _1 ARRAY_n (List.rev _2) )}
| _1 = Expression _2 = TK_HAT _3 = Expression
    {                                        ( binexp _2 HAT_n _1 _3 )}
| _1 = Expression _2 = TK_BAR _3 = Expression
    {                                        ( binexp _2 CONCAT_n _1 _3 )}
| _1 = Expression _2 = TK_OPEN_BRACKET _3 = Expression _4 = TK_CLOSE_BRACKET
    {                        ( unexp _2 (ARRAY_ACCES_n _3) _1 )}
| _1 = Expression _2 = TK_OPEN_BRACKET _3 = Select _4 = TK_CLOSE_BRACKET
    {                        ( unexp _3.src (ARRAY_SLICE_n _3.it) _1 )}
| _1 = Expression _2 = TK_DOT _3 = Lv6Id
    {                        ( unexp _2 (STRUCT_ACCESS_n (Lxm.id _3)) _1 )}
| _1 = CallByNameExpression
    {                        ( _1 )}
| _1 = TK_OPEN_PAR _2 = ExpressionList _3 = TK_CLOSE_PAR
    {    ( if (List.length _2 = 1) then (List.hd _2) else naryexp _1 TUPLE_n (List.rev _2) )}
| _1 = TK_MERGE _2 = Lv6Id _3 = MergeCaseList
    {                ( make_merge_op _2 _3 )}

MergeCaseList:
  _1 = MergeCase
    {                ( [_1] )}
| _1 = MergeCaseList _2 = MergeCase
    {                ( _2::_1 )}

MergeCase:
  _1 = TK_OPEN_PAR _2 = Lv6IdRef _3 = TK_ARROW _4 = Expression _5 = TK_CLOSE_PAR
    {           ( (Idref _2.it,_2.src,_4) )}
| _1 = TK_OPEN_PAR _2 = TK_TRUE _3 = TK_ARROW _4 = Expression _5 = TK_CLOSE_PAR
    {           ( (Bool true, _2,_4) )}
| _1 = TK_OPEN_PAR _2 = TK_FALSE _3 = TK_ARROW _4 = Expression _5 = TK_CLOSE_PAR
    {           ( (Bool false, _2,_4) )}

ClockExpr:
  _1 = Lv6IdRef _2 = TK_OPEN_PAR _3 = Lv6Id _4 = TK_CLOSE_PAR
    {                   ( (make_clock_exp _1.it _3) )}
| _1 = Lv6Id
    {                 ( (make_clock_exp (Lv6Id.idref_of_string "Lustre::true")  _1) )}
| _1 = TK_NOT _2 = Lv6Id
    {                 ( (make_clock_exp (Lv6Id.idref_of_string "Lustre::false") _2) )}
| _1 = TK_NOT _2 = TK_OPEN_PAR _3 = Lv6Id _4 = TK_CLOSE_PAR
    {                   ( (make_clock_exp (Lv6Id.idref_of_string "Lustre::false") _3) )}

PredefOp:
  _1 = TK_NOT
    {                      ( make_predef_posop _1 NOT_n )}
| _1 = TK_FBY
    {                      ( {src=_1; it=FBY_n} )}
| _1 = TK_PRE
    {                      ( {src=_1; it=PRE_n} )}
| _1 = TK_CURRENT
    {                      ( {src=_1; it=CURRENT_n} )}
| _1 = TK_ARROW
    {                      ( {src=_1; it=ARROW_n} )}
| _1 = TK_AND
    {                      ( make_predef_posop _1 AND_n )}
| _1 = TK_OR
    {                      ( make_predef_posop _1 OR_n )}
| _1 = TK_XOR
    {                      ( make_predef_posop _1 XOR_n )}
| _1 = TK_IMPL
    {                      ( make_predef_posop _1 IMPL_n )}
| _1 = TK_EQ
    {                      ( make_predef_posop _1 EQ_n )}
| _1 = TK_NEQ
    {                      ( make_predef_posop _1 NEQ_n )}
| _1 = TK_LT
    {                      ( make_predef_posop _1 LT_n )}
| _1 = TK_LTE
    {                      ( make_predef_posop _1 LTE_n )}
| _1 = TK_GT
    {                      ( make_predef_posop _1 GT_n )}
| _1 = TK_GTE
    {                      ( make_predef_posop _1 GTE_n )}
| _1 = TK_DIV
    {                      ( make_predef_posop _1 DIV_n )}
| _1 = TK_MOD
    {                      ( make_predef_posop _1 MOD_n )}
| _1 = TK_MINUS
    {                      ( make_predef_posop _1 MINUS_n )}
| _1 = TK_PLUS
    {                      ( make_predef_posop _1 PLUS_n )}
| _1 = TK_SLASH
    {                      ( make_predef_posop _1 SLASH_n )}
| _1 = TK_STAR
    {                      ( make_predef_posop _1 TIMES_n )}
| _1 = TK_IF
    {                      ( make_predef_posop _1 IF_n )}

CallByPosExpression:
  _1 = EffectiveNode _2 = TK_OPEN_PAR _3 = ExpressionList _4 = TK_CLOSE_PAR
    {                ( naryexp _1.src (CALL_n _1) (List.rev _3) )}

EffectiveNode:
  _1 = Lv6IdRef
    {                        ( {src=_1.src; it=((_1.it, [])) } )}
| _1 = Lv6IdRef _2 = TK_OPEN_STATIC_PAR _3 = StaticArgList _4 = TK_CLOSE_STATIC_PAR
    {                        ( {src=_1.src; it=((_1.it, List.rev _3)) }      )}

StaticArgList:
  _1 = StaticArg
    {                ( [_1] )}
| _1 = StaticArgList _2 = TK_COMA _3 = StaticArg
    {                ( _3::_1 )}
| _1 = StaticArgList _2 = TK_SEMICOL _3 = StaticArg
    {                ( _3::_1 )}

StaticArg:
  _1 = TK_TYPE _2 = Type
    {            ( {src=_1 ; it=StaticArgType _2 } )}
| _1 = TK_CONST _2 = Expression
    {            ( {src=_1 ; it=StaticArgConst _2 } )}
| _1 = TK_NODE _2 = EffectiveNode
    {            ( {src=_1 ; it=StaticArgNode (CALL_n _2) } )}
| _1 = TK_FUNCTION _2 = EffectiveNode
    {            ( {src=_1 ; it=StaticArgNode (CALL_n _2) } )}
| _1 = PredefOp
    {                        ( {src=_1.src; it=StaticArgNode _1.it } )}
| _1 = SimpleExp
    {            (
              match _1 with
                | CallByPos (op, x) -> (
                    match op.it with
                      | IDENT_n idref -> {src=op.src ; it = StaticArgLv6Id idref }
                      | _ -> {src=op.src ; it= StaticArgConst _1}
                  )
                | Merge_bool_n _
                | Merge_n _
                | CallByName _ ->
                    print_string "*** unexpected static argument
";
                    assert false
            )}
| _1 = SurelyType
    {                        ( {src=_1.src; it=StaticArgType _1} )}
| _1 = SurelyNode
    {                        ( {src=_1.src; it=StaticArgNode (CALL_n _1)} )}

ByNameStaticArgList:
  _1 = ByNameStaticArg
    {                ( [_1] )}
| _1 = ByNameStaticArgList _2 = TK_COMA _3 = ByNameStaticArg
    {                ( _3::_1 )}
| _1 = ByNameStaticArgList _2 = TK_SEMICOL _3 = ByNameStaticArg
    {                ( _3::_1 )}

ByNameStaticArg:
  _1 = TK_TYPE _2 = Lv6Id _3 = TK_EQ _4 = Type
    {            (  (Lxm.id _2, {src=_1 ; it= StaticArgType _4 }) )}
| _1 = TK_CONST _2 = Lv6Id _3 = TK_EQ _4 = Expression
    {            (  (Lxm.id _2, {src=_1 ; it= StaticArgConst _4 }) )}
| _1 = TK_NODE _2 = Lv6Id _3 = TK_EQ _4 = EffectiveNode
    {            (  (Lxm.id _2, {src=_1 ; it= StaticArgNode (CALL_n _4) }) )}
| _1 = TK_FUNCTION _2 = Lv6Id _3 = TK_EQ _4 = EffectiveNode
    {            (  (Lxm.id _2, {src=_1 ; it= StaticArgNode (CALL_n _4) }) )}
| _1 = Lv6Id _2 = TK_EQ _3 = PredefOp
    {            ( Lxm.id _1, {src=_3.src; it=StaticArgNode _3.it } )}
| _1 = Lv6Id _2 = TK_EQ _3 = SimpleExp
    {            ( Lxm.id _1,
              match _3 with
                | CallByPos (op, x) -> (
                    match op.it with
                      | IDENT_n idref -> {src=op.src ; it = StaticArgLv6Id idref }
                      | _ -> {src=op.src ; it= StaticArgConst _3}
                  )
                | Merge_bool_n _
                | Merge_n _
                | CallByName _ ->
                    print_string "*** unexpected static argument
";
                    assert false
            )}
| _1 = Lv6Id _2 = TK_EQ _3 = SurelyType
    {                        ( Lxm.id _1, {src=_3.src; it=StaticArgType _3} )}
| _1 = Lv6Id _2 = TK_EQ _3 = SurelyNode
    {                        ( Lxm.id _1, {src=_3.src; it=StaticArgNode (CALL_n _3)} )}

SurelyNode:
  _1 = Lv6IdRef _2 = TK_OPEN_STATIC_PAR _3 = StaticArgList _4 = TK_CLOSE_STATIC_PAR
    {                 ( {src=_1.src; it=(_1.it, List.rev _3) }        )}

SurelyType:
  _1 = TK_BOOL
    {                     ( {src=_1; it=Bool_type_exp} )}
| _1 = TK_INT
    {                     ( {src=_1; it=Int_type_exp} )}
| _1 = TK_REAL
    {                     ( {src=_1; it=Real_type_exp} )}
| _1 = SurelyType _2 = TK_HAT _3 = Expression
    {                        ( {src=_1.src; it = Array_type_exp (_1 , _3) } )}

SimpleExp:
  _1 = Constant
    {                    ( _1 )}
| _1 = Lv6IdRef
    {                       ( leafexp _1.src (IDENT_n _1.it) )}
| _1 = SimpleTuple
    {                       ( _1 )}
| _1 = TK_NOT _2 = SimpleExp
    {                                 ( unexp_predef _1 NOT_n _2 )}
| _1 = TK_MINUS _2 = SimpleExp %prec TK_UMINUS
    {                                              ( unexp_predef _1 UMINUS_n _2 )}
| _1 = SimpleExp _2 = TK_AND _3 = SimpleExp
    {                                        ( binexp_predef _2 AND_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_OR _3 = SimpleExp
    {                                        ( binexp_predef _2 OR_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_XOR _3 = SimpleExp
    {                                        ( binexp_predef _2 XOR_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_IMPL _3 = SimpleExp
    {                                        ( binexp_predef _2 IMPL_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_EQ _3 = SimpleExp
    {                                        ( binexp_predef _2 EQ_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_NEQ _3 = SimpleExp
    {                                        ( binexp_predef _2 NEQ_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_LT _3 = SimpleExp
    {                                        ( binexp_predef _2 LT_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_LTE _3 = SimpleExp
    {                                        ( binexp_predef _2 LTE_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_GT _3 = SimpleExp
    {                                        ( binexp_predef _2 GT_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_GTE _3 = SimpleExp
    {                                        ( binexp_predef _2 GTE_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_DIV _3 = SimpleExp
    {                                        ( binexp_predef _2 DIV_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_MOD _3 = SimpleExp
    {                                        ( binexp_predef _2 MOD_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_MINUS _3 = SimpleExp
    {                                        ( binexp_predef _2 MINUS_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_PLUS _3 = SimpleExp
    {                                        ( binexp_predef _2 PLUS_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_SLASH _3 = SimpleExp
    {                                        ( binexp_predef _2 SLASH_n  _1 _3 )}
| _1 = SimpleExp _2 = TK_STAR _3 = SimpleExp
    {                                        ( binexp_predef _2 TIMES_n  _1 _3 )}
| _1 = TK_IF _2 = SimpleExp _3 = TK_THEN _4 = SimpleExp _5 = TK_ELSE _6 = SimpleExp
    {                        ( ternexp_predef _1 IF_n _2 _4 _6 )}

SimpleTuple:
  _1 = TK_OPEN_PAR _2 = SimpleExpList _3 = TK_CLOSE_PAR
    { (
		(match _2 with
		| [x] -> x
		| l  -> naryexp _1 TUPLE_n (List.rev l) )
	)}

SimpleExpList:
  _1 = SimpleExp
    {   ( [_1] )}
| _1 = SimpleExpList _2 = TK_COMA _3 = SimpleExp
    {  ( _3::_1 )}

CallByNameExpression:
  _1 = Lv6IdRef _2 = TK_OPEN_BRACE _3 = CallByNameParamList _4 = OptSemicol _5 = TK_CLOSE_BRACE
    {                ( bynameexp _1.src (STRUCT_n _1.it) (List.rev _3) )}
| _1 = Lv6IdRef _2 = TK_OPEN_BRACE _3 = Lv6IdRef _4 = TK_WITH _5 = CallByNameParamList _6 = OptSemicol _7 = TK_CLOSE_BRACE
    {                ( bynameexp _1.src (STRUCT_WITH_n (_1.it,_3.it)) (List.rev _5) )}
| _1 = Lv6IdRef _2 = TK_OPEN_BRACE _3 = TK_CLOSE_BRACE
    {                ( bynameexp _1.src (STRUCT_n _1.it) ([]) )}

CallByNameParamList:
  _1 = CallByNameParam
    {                        ( [_1] )}
| _1 = CallByNameParamList _2 = sepVariant _3 = CallByNameParam
    {                        ( _3::_1 )}

sepVariant:
  _1 = TK_SEMICOL
    {                ()}
| _1 = TK_COMA
    {                ( Lv6errors.warning _1 "separator mismatch, ';' expected")}

CallByNameParam:
  _1 = Lv6Id _2 = TK_EQ _3 = Expression
    {                        ( ({it=Lxm.id _1;src=_1} , _3) )}

ExpressionList:
  
    {        ( [] )}
| _1 = Expression
    {                        ( [_1] )}
| _1 = ExpressionList _2 = TK_COMA _3 = Expression
    {                        ( _3::_1 )}

Constant:
  _1 = TK_TRUE
    {                        ( (leafexp_predef _1 TRUE_n) )}
| _1 = TK_FALSE
    {                        ( (leafexp_predef _1 FALSE_n) )}
| _1 = IntConst
    {                        ( (leafexp_predef _1 (ICONST_n (Lxm.id _1))) )}
| _1 = RealConst
    {                        ( (leafexp_predef _1 ((RCONST_n (Lxm.id _1)))) )}

IntConst:
  _1 = TK_ICONST
    {  ( _1 )}

RealConst:
  _1 = TK_RCONST
    {  ( _1 )}

Select:
  _1 = Expression _2 = TK_CDOTS _3 = Expression _4 = Step
    {                ( {it={si_first = _1; si_last = _3 ; si_step = _4 }; src = _2} )}

Step:
  
    {                        ( None )}
| _1 = TK_STEP _2 = Expression
    {                        ( Some _2 )}

OptSemicol:
  
    {                ()}
| _1 = TK_SEMICOL
    {                ()}

Pragma:
  
    {        ( [] )}
| _1 = TK_PCENT _2 = TK_IDENT _3 = TK_COLON _4 = TK_IDENT _5 = TK_PCENT _6 = Pragma
    {                ( (Pragma(Lxm.str _2, Lxm.str _4))::_6 )}

%%


