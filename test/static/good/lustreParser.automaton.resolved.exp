State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On TYPE shift to state 1
-- On NODE shift to state 205
-- On FUNCTION shift to state 369
-- On CONST shift to state 304
-- On type_decl shift to state 378
-- On node_param_inst shift to state 379
-- On node_decl shift to state 380
-- On main shift to state 381
-- On list(decl) shift to state 382
-- On func_decl shift to state 384
-- On decl shift to state 385
-- On const_decl shift to state 387
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## TYPE
## LR(1) items:
type_decl -> TYPE . ident_list SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
type_decl -> TYPE . ident_list EQUALS lustre_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
type_decl -> TYPE . ident_list EQUALS record_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 3
-- On ident_list shift to state 4
-- On ident shift to state 99
## Reductions:

State 2:
## Known stack suffix:
## SYM
## LR(1) items:
ident -> SYM . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT LSQBRACKET LPAREN LPARAMBRACKET LCURLYBRACKET INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DOT DIV COMMA COLON CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> SYM

State 3:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
ident_list -> separated_nonempty_list(COMMA,ident) . [ SEMICOLON RCURLYBRACKET EQUALS COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> separated_nonempty_list(COMMA,ident)

State 4:
## Known stack suffix:
## TYPE ident_list
## LR(1) items:
type_decl -> TYPE ident_list . SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
type_decl -> TYPE ident_list . EQUALS lustre_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
type_decl -> TYPE ident_list . EQUALS record_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 5
-- On EQUALS shift to state 6
## Reductions:

State 5:
## Known stack suffix:
## TYPE ident_list SEMICOLON
## LR(1) items:
type_decl -> TYPE ident_list SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_decl -> TYPE ident_list SEMICOLON

State 6:
## Known stack suffix:
## TYPE ident_list EQUALS
## LR(1) items:
type_decl -> TYPE ident_list EQUALS . lustre_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
type_decl -> TYPE ident_list EQUALS . record_type SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On STRUCT shift to state 187
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On record_type shift to state 188
-- On option(STRUCT) shift to state 190
-- On lustre_type shift to state 203
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:
-- On LCURLYBRACKET
--   reduce production option(STRUCT) ->

State 7:
## Known stack suffix:
## SUBRANGE
## LR(1) items:
lustre_type -> SUBRANGE . LSQBRACKET expr COMMA expr RSQBRACKET OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On LSQBRACKET shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## SUBRANGE LSQBRACKET
## LR(1) items:
lustre_type -> SUBRANGE LSQBRACKET . expr COMMA expr RSQBRACKET OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 181
## Reductions:

State 9:
## Known stack suffix:
## WITH
## LR(1) items:
expr -> WITH . expr THEN expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 176
## Reductions:

State 10:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRUE

State 11:
## Known stack suffix:
## REAL
## LR(1) items:
expr -> REAL . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 175
## Reductions:

State 12:
## Known stack suffix:
## PRE
## LR(1) items:
expr -> PRE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 174
## Reductions:

State 13:
## Known stack suffix:
## NUMERAL
## LR(1) items:
expr -> NUMERAL . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NUMERAL

State 14:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 173
## Reductions:

State 15:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 172
## Reductions:

State 16:
## Known stack suffix:
## LSQBRACKET
## LR(1) items:
expr -> LSQBRACKET . expr_list RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 147
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr_list shift to state 170
-- On expr shift to state 87
## Reductions:

State 17:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> LPAREN . expr COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 165
## Reductions:

State 18:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 164
## Reductions:

State 19:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 159
## Reductions:

State 20:
## Known stack suffix:
## HASH
## LR(1) items:
expr -> HASH . LPAREN expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LPAREN shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## HASH LPAREN
## LR(1) items:
expr -> HASH LPAREN . expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 147
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr_list shift to state 157
-- On expr shift to state 87
## Reductions:

State 22:
## Known stack suffix:
## FBY
## LR(1) items:
expr -> FBY . LPAREN expr COMMA NUMERAL COMMA expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LPAREN shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## FBY LPAREN
## LR(1) items:
expr -> FBY LPAREN . expr COMMA NUMERAL COMMA expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 151
## Reductions:

State 24:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FALSE

State 25:
## Known stack suffix:
## DECIMAL
## LR(1) items:
expr -> DECIMAL . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> DECIMAL

State 26:
## Known stack suffix:
## CURRENT
## LR(1) items:
expr -> CURRENT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 150
## Reductions:

State 27:
## Known stack suffix:
## CONDACT
## LR(1) items:
expr -> CONDACT . LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LPAREN shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## CONDACT LPAREN
## LR(1) items:
expr -> CONDACT LPAREN . expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 140
## Reductions:

State 29:
## Known stack suffix:
## node_call
## LR(1) items:
expr -> node_call . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> node_call

State 30:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> ident . LSQBRACKET expr RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> ident . LSQBRACKET array_slice_list RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> ident . DOT ident [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> ident . tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
node_call -> ident . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
node_call -> ident . tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LSQBRACKET shift to state 31
-- On LPAREN shift to state 83
-- On LPARAMBRACKET shift to state 90
-- On LCURLYBRACKET shift to state 122
-- On DOT shift to state 133
-- On tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) shift to state 135
-- On tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) shift to state 139
## Reductions:
-- On XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND
--   reduce production expr -> ident

State 31:
## Known stack suffix:
## ident LSQBRACKET
## LR(1) items:
expr -> ident LSQBRACKET . expr RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> ident LSQBRACKET . array_slice_list RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,array_slice) shift to state 32
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 33
-- On array_slice_list shift to state 77
-- On array_slice shift to state 79
## Reductions:

State 32:
## Known stack suffix:
## separated_nonempty_list(COMMA,array_slice)
## LR(1) items:
array_slice_list -> separated_nonempty_list(COMMA,array_slice) . [ RSQBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_slice_list -> separated_nonempty_list(COMMA,array_slice)

State 33:
## Known stack suffix:
## ident LSQBRACKET expr
## LR(1) items:
array_slice -> expr . DOTDOT expr [ RSQBRACKET COMMA ]
expr -> expr . CARET expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> ident LSQBRACKET expr . RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On RSQBRACKET shift to state 66
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DOTDOT shift to state 75
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 34:
## Known stack suffix:
## expr XOR
## LR(1) items:
expr -> expr XOR . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expr XOR expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr XOR expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On AND shift to state 64
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR IMPL ELSE DOTDOT COMMA ARROW
--   reduce production expr -> expr XOR expr

State 36:
## Known stack suffix:
## expr WHEN
## LR(1) items:
expr -> expr WHEN . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr WHEN expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr WHEN expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> expr WHEN expr

State 38:
## Known stack suffix:
## expr CARET
## LR(1) items:
expr -> expr CARET . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr CARET expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr CARET expr

State 40:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr PLUS expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MINUS LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr PLUS expr

State 42:
## Known stack suffix:
## expr MULT
## LR(1) items:
expr -> expr MULT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expr MULT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr MULT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> expr MULT expr

State 44:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr MOD expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> expr MOD expr

State 46:
## Known stack suffix:
## expr INTDIV
## LR(1) items:
expr -> expr INTDIV . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expr INTDIV expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr INTDIV expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> expr INTDIV expr

State 48:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr DIV expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> expr DIV expr

State 50:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr NEQ expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr NEQ expr

State 52:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr MINUS expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MINUS LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr MINUS expr

State 54:
## Known stack suffix:
## expr LTE
## LR(1) items:
expr -> expr LTE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## expr LTE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr LTE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr LTE expr

State 56:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr LT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr LT expr

State 58:
## Known stack suffix:
## expr GTE
## LR(1) items:
expr -> expr GTE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## expr GTE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr GTE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr GTE expr

State 60:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr GT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr GT expr

State 62:
## Known stack suffix:
## expr EQUALS
## LR(1) items:
expr -> expr EQUALS . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## expr EQUALS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr EQUALS expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR NEQ LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr EQUALS expr

State 64:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr AND expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR IMPL ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> expr AND expr

State 66:
## Known stack suffix:
## ident LSQBRACKET expr RSQBRACKET
## LR(1) items:
expr -> ident LSQBRACKET expr RSQBRACKET . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident LSQBRACKET expr RSQBRACKET

State 67:
## Known stack suffix:
## expr PIPE
## LR(1) items:
expr -> expr PIPE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr PIPE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr PIPE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE ELSE DOTDOT COMMA
--   reduce production expr -> expr PIPE expr

State 69:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr OR expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On AND shift to state 64
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE OR IMPL ELSE DOTDOT COMMA ARROW
--   reduce production expr -> expr OR expr

State 71:
## Known stack suffix:
## expr IMPL
## LR(1) items:
expr -> expr IMPL . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expr IMPL expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr IMPL expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On AND shift to state 64
## Reductions:
-- On THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE ELSE DOTDOT COMMA ARROW
--   reduce production expr -> expr IMPL expr

State 73:
## Known stack suffix:
## expr ARROW
## LR(1) items:
expr -> expr ARROW . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr ARROW expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr ARROW expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE ELSE DOTDOT COMMA
--   reduce production expr -> expr ARROW expr

State 75:
## Known stack suffix:
## expr DOTDOT
## LR(1) items:
array_slice -> expr DOTDOT . expr [ RSQBRACKET COMMA ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## expr DOTDOT expr
## LR(1) items:
array_slice -> expr DOTDOT expr . [ RSQBRACKET COMMA ]
expr -> expr . CARET expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On RSQBRACKET COMMA
--   reduce production array_slice -> expr DOTDOT expr

State 77:
## Known stack suffix:
## ident LSQBRACKET array_slice_list
## LR(1) items:
expr -> ident LSQBRACKET array_slice_list . RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RSQBRACKET shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## ident LSQBRACKET array_slice_list RSQBRACKET
## LR(1) items:
expr -> ident LSQBRACKET array_slice_list RSQBRACKET . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident LSQBRACKET array_slice_list RSQBRACKET

State 79:
## Known stack suffix:
## array_slice
## LR(1) items:
separated_nonempty_list(COMMA,array_slice) -> array_slice . [ RSQBRACKET ]
separated_nonempty_list(COMMA,array_slice) -> array_slice . COMMA separated_nonempty_list(COMMA,array_slice) [ RSQBRACKET ]
## Transitions:
-- On COMMA shift to state 80
## Reductions:
-- On RSQBRACKET
--   reduce production separated_nonempty_list(COMMA,array_slice) -> array_slice

State 80:
## Known stack suffix:
## array_slice COMMA
## LR(1) items:
separated_nonempty_list(COMMA,array_slice) -> array_slice COMMA . separated_nonempty_list(COMMA,array_slice) [ RSQBRACKET ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,array_slice) shift to state 81
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 82
-- On array_slice shift to state 79
## Reductions:

State 81:
## Known stack suffix:
## array_slice COMMA separated_nonempty_list(COMMA,array_slice)
## LR(1) items:
separated_nonempty_list(COMMA,array_slice) -> array_slice COMMA separated_nonempty_list(COMMA,array_slice) . [ RSQBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,array_slice) -> array_slice COMMA separated_nonempty_list(COMMA,array_slice)

State 82:
## Known stack suffix:
## expr
## LR(1) items:
array_slice -> expr . DOTDOT expr [ RSQBRACKET COMMA ]
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DOTDOT DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DOTDOT shift to state 75
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 83:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
node_call -> ident LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 84
-- On node_call shift to state 29
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 85
-- On ident shift to state 30
-- On expr shift to state 87
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 84:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 85:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
node_call -> ident LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
node_call -> ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_call -> ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN

State 87:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RSQBRACKET RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RSQBRACKET RPAREN ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSQBRACKET RPAREN ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On COMMA shift to state 88
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On RSQBRACKET RPAREN
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 88:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RSQBRACKET RPAREN ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 89
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 87
## Reductions:

State 89:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RSQBRACKET RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 90:
## Known stack suffix:
## LPARAMBRACKET
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET . tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) [ SEMICOLON LPAREN ]
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET . RPARAMBRACKET [ SEMICOLON LPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On RPARAMBRACKET shift to state 91
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) shift to state 115
-- On node_call_static_param shift to state 116
-- On lustre_type shift to state 119
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 91:
## Known stack suffix:
## LPARAMBRACKET RPARAMBRACKET
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET RPARAMBRACKET . [ SEMICOLON LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET RPARAMBRACKET

State 92:
## Known stack suffix:
## REAL
## LR(1) items:
lustre_type -> REAL . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> REAL

State 93:
## Known stack suffix:
## LSQBRACKET
## LR(1) items:
tuple_type -> LSQBRACKET . lustre_type_list RSQBRACKET [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On separated_nonempty_list(COMMA,lustre_type) shift to state 104
-- On lustre_type_list shift to state 105
-- On lustre_type shift to state 107
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 94:
## Known stack suffix:
## INT
## LR(1) items:
lustre_type -> INT . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> INT

State 95:
## Known stack suffix:
## ENUM
## LR(1) items:
enum_type -> ENUM . LCURLYBRACKET ident_list RCURLYBRACKET [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On LCURLYBRACKET shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## ENUM LCURLYBRACKET
## LR(1) items:
enum_type -> ENUM LCURLYBRACKET . ident_list RCURLYBRACKET [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On SYM shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 3
-- On ident_list shift to state 97
-- On ident shift to state 99
## Reductions:

State 97:
## Known stack suffix:
## ENUM LCURLYBRACKET ident_list
## LR(1) items:
enum_type -> ENUM LCURLYBRACKET ident_list . RCURLYBRACKET [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On RCURLYBRACKET shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## ENUM LCURLYBRACKET ident_list RCURLYBRACKET
## LR(1) items:
enum_type -> ENUM LCURLYBRACKET ident_list RCURLYBRACKET . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_type -> ENUM LCURLYBRACKET ident_list RCURLYBRACKET

State 99:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ SEMICOLON RCURLYBRACKET EQUALS COLON ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ SEMICOLON RCURLYBRACKET EQUALS COLON ]
## Transitions:
-- On COMMA shift to state 100
## Reductions:
-- On SEMICOLON RCURLYBRACKET EQUALS COLON
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 100:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ SEMICOLON RCURLYBRACKET EQUALS COLON ]
## Transitions:
-- On SYM shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 101
-- On ident shift to state 99
## Reductions:

State 101:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ SEMICOLON RCURLYBRACKET EQUALS COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 102:
## Known stack suffix:
## BOOL
## LR(1) items:
lustre_type -> BOOL . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> BOOL

State 103:
## Known stack suffix:
## tuple_type
## LR(1) items:
lustre_type -> tuple_type . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> tuple_type

State 104:
## Known stack suffix:
## separated_nonempty_list(COMMA,lustre_type)
## LR(1) items:
lustre_type_list -> separated_nonempty_list(COMMA,lustre_type) . [ RSQBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type_list -> separated_nonempty_list(COMMA,lustre_type)

State 105:
## Known stack suffix:
## LSQBRACKET lustre_type_list
## LR(1) items:
tuple_type -> LSQBRACKET lustre_type_list . RSQBRACKET [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On RSQBRACKET shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## LSQBRACKET lustre_type_list RSQBRACKET
## LR(1) items:
tuple_type -> LSQBRACKET lustre_type_list RSQBRACKET . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuple_type -> LSQBRACKET lustre_type_list RSQBRACKET

State 107:
## Known stack suffix:
## lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ RSQBRACKET COMMA CARET ]
separated_nonempty_list(COMMA,lustre_type) -> lustre_type . [ RSQBRACKET ]
separated_nonempty_list(COMMA,lustre_type) -> lustre_type . COMMA separated_nonempty_list(COMMA,lustre_type) [ RSQBRACKET ]
## Transitions:
-- On COMMA shift to state 108
-- On CARET shift to state 113
## Reductions:
-- On RSQBRACKET
--   reduce production separated_nonempty_list(COMMA,lustre_type) -> lustre_type

State 108:
## Known stack suffix:
## lustre_type COMMA
## LR(1) items:
separated_nonempty_list(COMMA,lustre_type) -> lustre_type COMMA . separated_nonempty_list(COMMA,lustre_type) [ RSQBRACKET ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On separated_nonempty_list(COMMA,lustre_type) shift to state 109
-- On lustre_type shift to state 107
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 109:
## Known stack suffix:
## lustre_type COMMA separated_nonempty_list(COMMA,lustre_type)
## LR(1) items:
separated_nonempty_list(COMMA,lustre_type) -> lustre_type COMMA separated_nonempty_list(COMMA,lustre_type) . [ RSQBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,lustre_type) -> lustre_type COMMA separated_nonempty_list(COMMA,lustre_type)

State 110:
## Known stack suffix:
## ident
## LR(1) items:
lustre_type -> ident . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> ident

State 111:
## Known stack suffix:
## enum_type
## LR(1) items:
lustre_type -> enum_type . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> enum_type

State 112:
## Known stack suffix:
## array_type
## LR(1) items:
lustre_type -> array_type . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> array_type

State 113:
## Known stack suffix:
## lustre_type CARET
## LR(1) items:
array_type -> lustre_type CARET . expr [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## lustre_type CARET expr
## LR(1) items:
array_type -> lustre_type CARET expr . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
expr -> expr . CARET expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On DIV shift to state 48
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET
--   reduce production array_type -> lustre_type CARET expr

State 115:
## Known stack suffix:
## LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param)
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) . [ SEMICOLON LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) -> LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param)

State 116:
## Known stack suffix:
## node_call_static_param
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param . option(SEMICOLON) RPARAMBRACKET [ SEMICOLON LPAREN ]
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param . SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) [ SEMICOLON LPAREN ]
## Transitions:
-- On SEMICOLON shift to state 117
-- On option(SEMICOLON) shift to state 120
## Reductions:
-- On RPARAMBRACKET
--   reduce production option(SEMICOLON) ->

State 117:
## Known stack suffix:
## node_call_static_param SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPARAMBRACKET ]
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param SEMICOLON . tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) [ SEMICOLON LPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) shift to state 118
-- On node_call_static_param shift to state 116
-- On lustre_type shift to state 119
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:
-- On RPARAMBRACKET
--   reduce production option(SEMICOLON) -> SEMICOLON

State 118:
## Known stack suffix:
## node_call_static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param)
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) . [ SEMICOLON LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param)

State 119:
## Known stack suffix:
## lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ SEMICOLON RPARAMBRACKET CARET ]
node_call_static_param -> lustre_type . [ SEMICOLON RPARAMBRACKET ]
## Transitions:
-- On CARET shift to state 113
## Reductions:
-- On SEMICOLON RPARAMBRACKET
--   reduce production node_call_static_param -> lustre_type

State 120:
## Known stack suffix:
## node_call_static_param option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param option(SEMICOLON) . RPARAMBRACKET [ SEMICOLON LPAREN ]
## Transitions:
-- On RPARAMBRACKET shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## node_call_static_param option(SEMICOLON) RPARAMBRACKET
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param option(SEMICOLON) RPARAMBRACKET . [ SEMICOLON LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPARAMBRACKET,node_call_static_param) -> node_call_static_param option(SEMICOLON) RPARAMBRACKET

State 122:
## Known stack suffix:
## LCURLYBRACKET
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET . tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET . RCURLYBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On SYM shift to state 2
-- On RCURLYBRACKET shift to state 123
-- On tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) shift to state 124
-- On record_field_assign shift to state 125
-- On ident shift to state 128
## Reductions:

State 123:
## Known stack suffix:
## LCURLYBRACKET RCURLYBRACKET
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET RCURLYBRACKET . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET RCURLYBRACKET

State 124:
## Known stack suffix:
## LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign)
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) -> LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign)

State 125:
## Known stack suffix:
## record_field_assign
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign . option(SEMICOLON) RCURLYBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign . SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On SEMICOLON shift to state 126
-- On option(SEMICOLON) shift to state 131
## Reductions:
-- On RCURLYBRACKET
--   reduce production option(SEMICOLON) ->

State 126:
## Known stack suffix:
## record_field_assign SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RCURLYBRACKET ]
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign SEMICOLON . tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On SYM shift to state 2
-- On tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) shift to state 127
-- On record_field_assign shift to state 125
-- On ident shift to state 128
## Reductions:
-- On RCURLYBRACKET
--   reduce production option(SEMICOLON) -> SEMICOLON

State 127:
## Known stack suffix:
## record_field_assign SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign)
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign)

State 128:
## Known stack suffix:
## ident
## LR(1) items:
record_field_assign -> ident . EQUALS expr [ SEMICOLON RCURLYBRACKET ]
## Transitions:
-- On EQUALS shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## ident EQUALS
## LR(1) items:
record_field_assign -> ident EQUALS . expr [ SEMICOLON RCURLYBRACKET ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## ident EQUALS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
record_field_assign -> ident EQUALS expr . [ SEMICOLON RCURLYBRACKET ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On SEMICOLON RCURLYBRACKET
--   reduce production record_field_assign -> ident EQUALS expr

State 131:
## Known stack suffix:
## record_field_assign option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign option(SEMICOLON) . RCURLYBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RCURLYBRACKET shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## record_field_assign option(SEMICOLON) RCURLYBRACKET
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign option(SEMICOLON) RCURLYBRACKET . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RCURLYBRACKET,record_field_assign) -> record_field_assign option(SEMICOLON) RCURLYBRACKET

State 133:
## Known stack suffix:
## ident DOT
## LR(1) items:
expr -> ident DOT . ident [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## ident DOT ident
## LR(1) items:
expr -> ident DOT ident . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident DOT ident

State 135:
## Known stack suffix:
## ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param)
## LR(1) items:
node_call -> ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LPAREN shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN
## LR(1) items:
node_call -> ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 84
-- On node_call shift to state 29
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 137
-- On ident shift to state 30
-- On expr shift to state 87
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 137:
## Known stack suffix:
## ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
node_call -> ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
node_call -> ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_call -> ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN

State 139:
## Known stack suffix:
## ident tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign)
## LR(1) items:
expr -> ident tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign) . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,record_field_assign)

State 140:
## Known stack suffix:
## CONDACT LPAREN expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> CONDACT LPAREN expr . COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On COMMA shift to state 141
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 141:
## Known stack suffix:
## CONDACT LPAREN expr COMMA
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA . ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On LPAREN shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 84
-- On node_call shift to state 29
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 144
-- On ident shift to state 30
-- On expr shift to state 87
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 144:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN . COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On COMMA shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA . expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 147
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr_list shift to state 148
-- On expr shift to state 87
## Reductions:

State 147:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
expr_list -> separated_nonempty_list(COMMA,expr) . [ RSQBRACKET RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> separated_nonempty_list(COMMA,expr)

State 148:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN
## LR(1) items:
expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> CONDACT LPAREN expr COMMA ident LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN COMMA expr_list RPAREN

State 150:
## Known stack suffix:
## CURRENT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> CURRENT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On CARET shift to state 38
## Reductions:
-- On XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> CURRENT expr

State 151:
## Known stack suffix:
## FBY LPAREN expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> FBY LPAREN expr . COMMA NUMERAL COMMA expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On COMMA shift to state 152
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 152:
## Known stack suffix:
## FBY LPAREN expr COMMA
## LR(1) items:
expr -> FBY LPAREN expr COMMA . NUMERAL COMMA expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On NUMERAL shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## FBY LPAREN expr COMMA NUMERAL
## LR(1) items:
expr -> FBY LPAREN expr COMMA NUMERAL . COMMA expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On COMMA shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## FBY LPAREN expr COMMA NUMERAL COMMA
## LR(1) items:
expr -> FBY LPAREN expr COMMA NUMERAL COMMA . expr RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## FBY LPAREN expr COMMA NUMERAL COMMA expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> FBY LPAREN expr COMMA NUMERAL COMMA expr . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On RPAREN shift to state 156
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 156:
## Known stack suffix:
## FBY LPAREN expr COMMA NUMERAL COMMA expr RPAREN
## LR(1) items:
expr -> FBY LPAREN expr COMMA NUMERAL COMMA expr RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FBY LPAREN expr COMMA NUMERAL COMMA expr RPAREN

State 157:
## Known stack suffix:
## HASH LPAREN expr_list
## LR(1) items:
expr -> HASH LPAREN expr_list . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## HASH LPAREN expr_list RPAREN
## LR(1) items:
expr -> HASH LPAREN expr_list RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> HASH LPAREN expr_list RPAREN

State 159:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> IF expr . THEN expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On THEN shift to state 160
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 160:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> IF expr THEN expr . ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On ELSE shift to state 162
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 162:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> IF expr THEN expr ELSE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE ELSE DOTDOT COMMA
--   reduce production expr -> IF expr THEN expr ELSE expr

State 164:
## Known stack suffix:
## INT expr
## LR(1) items:
expr -> INT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT expr

State 165:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> LPAREN expr . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> LPAREN expr . COMMA expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . CARET expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RPAREN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On RPAREN shift to state 166
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On COMMA shift to state 167
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 166:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr RPAREN

State 167:
## Known stack suffix:
## LPAREN expr COMMA
## LR(1) items:
expr -> LPAREN expr COMMA . expr_list RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On separated_nonempty_list(COMMA,expr) shift to state 147
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr_list shift to state 168
-- On expr shift to state 87
## Reductions:

State 168:
## Known stack suffix:
## LPAREN expr COMMA expr_list
## LR(1) items:
expr -> LPAREN expr COMMA expr_list . RPAREN [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RPAREN shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## LPAREN expr COMMA expr_list RPAREN
## LR(1) items:
expr -> LPAREN expr COMMA expr_list RPAREN . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr COMMA expr_list RPAREN

State 170:
## Known stack suffix:
## LSQBRACKET expr_list
## LR(1) items:
expr -> LSQBRACKET expr_list . RSQBRACKET [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On RSQBRACKET shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## LSQBRACKET expr_list RSQBRACKET
## LR(1) items:
expr -> LSQBRACKET expr_list RSQBRACKET . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LSQBRACKET expr_list RSQBRACKET

State 172:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> MINUS expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WHEN shift to state 36
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On INTDIV shift to state 46
-- On DIV shift to state 48
-- On CARET shift to state 38
## Reductions:
-- On XOR THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MINUS LTE LT IMPL GTE GT EQUALS ELSE DOTDOT COMMA ARROW AND
--   reduce production expr -> MINUS expr

State 173:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> NOT expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On CARET shift to state 38
## Reductions:
-- On XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> NOT expr

State 174:
## Known stack suffix:
## PRE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> PRE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On CARET shift to state 38
## Reductions:
-- On XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA ARROW AND
--   reduce production expr -> PRE expr

State 175:
## Known stack suffix:
## REAL expr
## LR(1) items:
expr -> REAL expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> REAL expr

State 176:
## Known stack suffix:
## WITH expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> WITH expr . THEN expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On THEN shift to state 177
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 177:
## Known stack suffix:
## WITH expr THEN
## LR(1) items:
expr -> WITH expr THEN . expr ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## WITH expr THEN expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> WITH expr THEN expr . ELSE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On ELSE shift to state 179
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 179:
## Known stack suffix:
## WITH expr THEN expr ELSE
## LR(1) items:
expr -> WITH expr THEN expr ELSE . expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## WITH expr THEN expr ELSE expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> WITH expr THEN expr ELSE expr . [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS ELSE DOTDOT DIV COMMA CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:
-- On THEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET PIPE ELSE DOTDOT COMMA
--   reduce production expr -> WITH expr THEN expr ELSE expr

State 181:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV COMMA CARET ARROW AND ]
lustre_type -> SUBRANGE LSQBRACKET expr . COMMA expr RSQBRACKET OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On COMMA shift to state 182
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 182:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr COMMA
## LR(1) items:
lustre_type -> SUBRANGE LSQBRACKET expr COMMA . expr RSQBRACKET OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr COMMA expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN RSQBRACKET PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
lustre_type -> SUBRANGE LSQBRACKET expr COMMA expr . RSQBRACKET OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On RSQBRACKET shift to state 184
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 184:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET
## LR(1) items:
lustre_type -> SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET . OF INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On OF shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET OF
## LR(1) items:
lustre_type -> SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET OF . INT [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
-- On INT shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET OF INT
## LR(1) items:
lustre_type -> SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET OF INT . [ WHEN SEMICOLON RSQBRACKET RPAREN RPARAMBRACKET RCURLYBRACKET EQUALS COMMA CARET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lustre_type -> SUBRANGE LSQBRACKET expr COMMA expr RSQBRACKET OF INT

State 187:
## Known stack suffix:
## STRUCT
## LR(1) items:
option(STRUCT) -> STRUCT . [ LCURLYBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(STRUCT) -> STRUCT

State 188:
## Known stack suffix:
## TYPE ident_list EQUALS record_type
## LR(1) items:
type_decl -> TYPE ident_list EQUALS record_type . SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## TYPE ident_list EQUALS record_type SEMICOLON
## LR(1) items:
type_decl -> TYPE ident_list EQUALS record_type SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_decl -> TYPE ident_list EQUALS record_type SEMICOLON

State 190:
## Known stack suffix:
## option(STRUCT)
## LR(1) items:
record_type -> option(STRUCT) . tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) [ SEMICOLON ]
## Transitions:
-- On LCURLYBRACKET shift to state 191
-- On tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) shift to state 202
## Reductions:

State 191:
## Known stack suffix:
## LCURLYBRACKET
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET . tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) [ SEMICOLON ]
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET . RCURLYBRACKET [ SEMICOLON ]
## Transitions:
-- On SYM shift to state 2
-- On RCURLYBRACKET shift to state 192
-- On typed_idents shift to state 193
-- On tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) shift to state 201
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:

State 192:
## Known stack suffix:
## LCURLYBRACKET RCURLYBRACKET
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET RCURLYBRACKET . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET RCURLYBRACKET

State 193:
## Known stack suffix:
## typed_idents
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents . option(SEMICOLON) RCURLYBRACKET [ SEMICOLON ]
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents . SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) [ SEMICOLON ]
## Transitions:
-- On SEMICOLON shift to state 194
-- On option(SEMICOLON) shift to state 199
## Reductions:
-- On RCURLYBRACKET
--   reduce production option(SEMICOLON) ->

State 194:
## Known stack suffix:
## typed_idents SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RCURLYBRACKET ]
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents SEMICOLON . tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) [ SEMICOLON ]
## Transitions:
-- On SYM shift to state 2
-- On typed_idents shift to state 193
-- On tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) shift to state 195
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:
-- On RCURLYBRACKET
--   reduce production option(SEMICOLON) -> SEMICOLON

State 195:
## Known stack suffix:
## typed_idents SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents)
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents SEMICOLON tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents)

State 196:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident)
## LR(1) items:
typed_idents -> separated_nonempty_list(COMMA,ident) . COLON lustre_type [ WHEN SEMICOLON RPAREN RCURLYBRACKET ]
## Transitions:
-- On COLON shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident) COLON
## LR(1) items:
typed_idents -> separated_nonempty_list(COMMA,ident) COLON . lustre_type [ WHEN SEMICOLON RPAREN RCURLYBRACKET ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On lustre_type shift to state 198
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 198:
## Known stack suffix:
## separated_nonempty_list(COMMA,ident) COLON lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ WHEN SEMICOLON RPAREN RCURLYBRACKET CARET ]
typed_idents -> separated_nonempty_list(COMMA,ident) COLON lustre_type . [ WHEN SEMICOLON RPAREN RCURLYBRACKET ]
## Transitions:
-- On CARET shift to state 113
## Reductions:
-- On WHEN SEMICOLON RPAREN RCURLYBRACKET
--   reduce production typed_idents -> separated_nonempty_list(COMMA,ident) COLON lustre_type

State 199:
## Known stack suffix:
## typed_idents option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents option(SEMICOLON) . RCURLYBRACKET [ SEMICOLON ]
## Transitions:
-- On RCURLYBRACKET shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## typed_idents option(SEMICOLON) RCURLYBRACKET
## LR(1) items:
tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents option(SEMICOLON) RCURLYBRACKET . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) -> typed_idents option(SEMICOLON) RCURLYBRACKET

State 201:
## Known stack suffix:
## LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents)
## LR(1) items:
tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents) . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) -> LCURLYBRACKET tlist_tail(SEMICOLON,RCURLYBRACKET,typed_idents)

State 202:
## Known stack suffix:
## option(STRUCT) tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents)
## LR(1) items:
record_type -> option(STRUCT) tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents) . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_type -> option(STRUCT) tlist(LCURLYBRACKET,SEMICOLON,RCURLYBRACKET,typed_idents)

State 203:
## Known stack suffix:
## TYPE ident_list EQUALS lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ SEMICOLON CARET ]
type_decl -> TYPE ident_list EQUALS lustre_type . SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 204
-- On CARET shift to state 113
## Reductions:

State 204:
## Known stack suffix:
## TYPE ident_list EQUALS lustre_type SEMICOLON
## LR(1) items:
type_decl -> TYPE ident_list EQUALS lustre_type SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_decl -> TYPE ident_list EQUALS lustre_type SEMICOLON

State 205:
## Known stack suffix:
## NODE
## LR(1) items:
node_decl -> NODE . ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
node_param_inst -> NODE . ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## NODE ident
## LR(1) items:
node_decl -> NODE ident . loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
node_param_inst -> NODE ident . EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPARAMBRACKET shift to state 207
-- On EQUALS shift to state 217
-- On tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) shift to state 221
-- On static_params shift to state 222
-- On loption(static_params) shift to state 223
## Reductions:
-- On LPAREN
--   reduce production loption(static_params) ->

State 207:
## Known stack suffix:
## LPARAMBRACKET
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET . tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) [ LPAREN ]
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET . RPARAMBRACKET [ LPAREN ]
## Transitions:
-- On TYPE shift to state 208
-- On RPARAMBRACKET shift to state 210
-- On tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) shift to state 211
-- On static_param shift to state 212
## Reductions:

State 208:
## Known stack suffix:
## TYPE
## LR(1) items:
static_param -> TYPE . ident [ SEMICOLON RPARAMBRACKET ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## TYPE ident
## LR(1) items:
static_param -> TYPE ident . [ SEMICOLON RPARAMBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_param -> TYPE ident

State 210:
## Known stack suffix:
## LPARAMBRACKET RPARAMBRACKET
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET RPARAMBRACKET . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET RPARAMBRACKET

State 211:
## Known stack suffix:
## LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,static_param)
## LR(1) items:
tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) -> LPARAMBRACKET tlist_tail(SEMICOLON,RPARAMBRACKET,static_param)

State 212:
## Known stack suffix:
## static_param
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param . option(SEMICOLON) RPARAMBRACKET [ LPAREN ]
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param . SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) [ LPAREN ]
## Transitions:
-- On SEMICOLON shift to state 213
-- On option(SEMICOLON) shift to state 215
## Reductions:
-- On RPARAMBRACKET
--   reduce production option(SEMICOLON) ->

State 213:
## Known stack suffix:
## static_param SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPARAMBRACKET ]
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param SEMICOLON . tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) [ LPAREN ]
## Transitions:
-- On TYPE shift to state 208
-- On tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) shift to state 214
-- On static_param shift to state 212
## Reductions:
-- On RPARAMBRACKET
--   reduce production option(SEMICOLON) -> SEMICOLON

State 214:
## Known stack suffix:
## static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,static_param)
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param SEMICOLON tlist_tail(SEMICOLON,RPARAMBRACKET,static_param)

State 215:
## Known stack suffix:
## static_param option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param option(SEMICOLON) . RPARAMBRACKET [ LPAREN ]
## Transitions:
-- On RPARAMBRACKET shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## static_param option(SEMICOLON) RPARAMBRACKET
## LR(1) items:
tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param option(SEMICOLON) RPARAMBRACKET . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPARAMBRACKET,static_param) -> static_param option(SEMICOLON) RPARAMBRACKET

State 217:
## Known stack suffix:
## NODE ident EQUALS
## LR(1) items:
node_param_inst -> NODE ident EQUALS . ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## NODE ident EQUALS ident
## LR(1) items:
node_param_inst -> NODE ident EQUALS ident . tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPARAMBRACKET shift to state 90
-- On tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## NODE ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param)
## LR(1) items:
node_param_inst -> NODE ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) . SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## NODE ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON
## LR(1) items:
node_param_inst -> NODE ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_param_inst -> NODE ident EQUALS ident tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,node_call_static_param) SEMICOLON

State 221:
## Known stack suffix:
## tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param)
## LR(1) items:
static_params -> tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param) . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_params -> tlist(LPARAMBRACKET,SEMICOLON,RPARAMBRACKET,static_param)

State 222:
## Known stack suffix:
## static_params
## LR(1) items:
loption(static_params) -> static_params . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loption(static_params) -> static_params

State 223:
## Known stack suffix:
## NODE ident loption(static_params)
## LR(1) items:
node_decl -> NODE ident loption(static_params) . tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPAREN shift to state 224
-- On tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) shift to state 259
## Reductions:

State 224:
## Known stack suffix:
## LPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN . tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) [ RETURNS ]
tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN . RPAREN [ RETURNS ]
## Transitions:
-- On RPAREN shift to state 225
-- On LPAREN shift to state 226
-- On CONST shift to state 227
-- On tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) shift to state 250
-- On const_typed_idents shift to state 251
-- On const_clocked_typed_idents shift to state 254
-- On boption(CONST) shift to state 243
## Reductions:
-- On SYM
--   reduce production boption(CONST) ->

State 225:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN RPAREN . [ RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN RPAREN

State 226:
## Known stack suffix:
## LPAREN
## LR(1) items:
const_clocked_typed_idents -> LPAREN . const_typed_idents RPAREN WHEN clock_expr [ SEMICOLON RPAREN ]
const_clocked_typed_idents -> LPAREN . const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On CONST shift to state 227
-- On const_typed_idents shift to state 228
-- On boption(CONST) shift to state 243
## Reductions:
-- On SYM
--   reduce production boption(CONST) ->

State 227:
## Known stack suffix:
## CONST
## LR(1) items:
boption(CONST) -> CONST . [ SYM ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boption(CONST) -> CONST

State 228:
## Known stack suffix:
## LPAREN const_typed_idents
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents . RPAREN WHEN clock_expr [ SEMICOLON RPAREN ]
const_clocked_typed_idents -> LPAREN const_typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On SEMICOLON shift to state 229
-- On RPAREN shift to state 247
## Reductions:

State 229:
## Known stack suffix:
## LPAREN const_typed_idents SEMICOLON
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On CONST shift to state 227
-- On tlist_tail(SEMICOLON,RPAREN,const_typed_idents) shift to state 230
-- On const_typed_idents shift to state 240
-- On boption(CONST) shift to state 243
## Reductions:
-- On SYM
--   reduce production boption(CONST) ->

State 230:
## Known stack suffix:
## LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents)
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 239
## Reductions:

State 232:
## Known stack suffix:
## TRUE
## LR(1) items:
clock_expr -> TRUE . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clock_expr -> TRUE

State 233:
## Known stack suffix:
## NOT
## LR(1) items:
clock_expr -> NOT . ident [ SEMICOLON RPAREN ]
clock_expr -> NOT . LPAREN ident RPAREN [ SEMICOLON RPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On LPAREN shift to state 234
-- On ident shift to state 237
## Reductions:

State 234:
## Known stack suffix:
## NOT LPAREN
## LR(1) items:
clock_expr -> NOT LPAREN . ident RPAREN [ SEMICOLON RPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## NOT LPAREN ident
## LR(1) items:
clock_expr -> NOT LPAREN ident . RPAREN [ SEMICOLON RPAREN ]
## Transitions:
-- On RPAREN shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## NOT LPAREN ident RPAREN
## LR(1) items:
clock_expr -> NOT LPAREN ident RPAREN . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clock_expr -> NOT LPAREN ident RPAREN

State 237:
## Known stack suffix:
## NOT ident
## LR(1) items:
clock_expr -> NOT ident . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clock_expr -> NOT ident

State 238:
## Known stack suffix:
## ident
## LR(1) items:
clock_expr -> ident . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clock_expr -> ident

State 239:
## Known stack suffix:
## LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_clocked_typed_idents -> LPAREN const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) WHEN clock_expr

State 240:
## Known stack suffix:
## const_typed_idents
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents . option(SEMICOLON) RPAREN [ WHEN ]
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) [ WHEN ]
## Transitions:
-- On SEMICOLON shift to state 241
-- On option(SEMICOLON) shift to state 245
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) ->

State 241:
## Known stack suffix:
## const_typed_idents SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPAREN ]
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,const_typed_idents) [ WHEN ]
## Transitions:
-- On CONST shift to state 227
-- On tlist_tail(SEMICOLON,RPAREN,const_typed_idents) shift to state 242
-- On const_typed_idents shift to state 240
-- On boption(CONST) shift to state 243
## Reductions:
-- On SYM
--   reduce production boption(CONST) ->
-- On RPAREN
--   reduce production option(SEMICOLON) -> SEMICOLON

State 242:
## Known stack suffix:
## const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents) . [ WHEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_typed_idents)

State 243:
## Known stack suffix:
## boption(CONST)
## LR(1) items:
const_typed_idents -> boption(CONST) . typed_idents [ WHEN SEMICOLON RPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On typed_idents shift to state 244
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:

State 244:
## Known stack suffix:
## boption(CONST) typed_idents
## LR(1) items:
const_typed_idents -> boption(CONST) typed_idents . [ WHEN SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_typed_idents -> boption(CONST) typed_idents

State 245:
## Known stack suffix:
## const_typed_idents option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents option(SEMICOLON) . RPAREN [ WHEN ]
## Transitions:
-- On RPAREN shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## const_typed_idents option(SEMICOLON) RPAREN
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents option(SEMICOLON) RPAREN . [ WHEN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,const_typed_idents) -> const_typed_idents option(SEMICOLON) RPAREN

State 247:
## Known stack suffix:
## LPAREN const_typed_idents RPAREN
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents RPAREN . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## LPAREN const_typed_idents RPAREN WHEN
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents RPAREN WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## LPAREN const_typed_idents RPAREN WHEN clock_expr
## LR(1) items:
const_clocked_typed_idents -> LPAREN const_typed_idents RPAREN WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_clocked_typed_idents -> LPAREN const_typed_idents RPAREN WHEN clock_expr

State 250:
## Known stack suffix:
## LPAREN tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents)
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) . [ RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents)

State 251:
## Known stack suffix:
## const_typed_idents
## LR(1) items:
const_clocked_typed_idents -> const_typed_idents . [ SEMICOLON RPAREN ]
const_clocked_typed_idents -> const_typed_idents . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 252
## Reductions:
-- On SEMICOLON RPAREN
--   reduce production const_clocked_typed_idents -> const_typed_idents

State 252:
## Known stack suffix:
## const_typed_idents WHEN
## LR(1) items:
const_clocked_typed_idents -> const_typed_idents WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## const_typed_idents WHEN clock_expr
## LR(1) items:
const_clocked_typed_idents -> const_typed_idents WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_clocked_typed_idents -> const_typed_idents WHEN clock_expr

State 254:
## Known stack suffix:
## const_clocked_typed_idents
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents . option(SEMICOLON) RPAREN [ RETURNS ]
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) [ RETURNS ]
## Transitions:
-- On SEMICOLON shift to state 255
-- On option(SEMICOLON) shift to state 257
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) ->

State 255:
## Known stack suffix:
## const_clocked_typed_idents SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPAREN ]
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) [ RETURNS ]
## Transitions:
-- On LPAREN shift to state 226
-- On CONST shift to state 227
-- On tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) shift to state 256
-- On const_typed_idents shift to state 251
-- On const_clocked_typed_idents shift to state 254
-- On boption(CONST) shift to state 243
## Reductions:
-- On SYM
--   reduce production boption(CONST) ->
-- On RPAREN
--   reduce production option(SEMICOLON) -> SEMICOLON

State 256:
## Known stack suffix:
## const_clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) . [ RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents)

State 257:
## Known stack suffix:
## const_clocked_typed_idents option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents option(SEMICOLON) . RPAREN [ RETURNS ]
## Transitions:
-- On RPAREN shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## const_clocked_typed_idents option(SEMICOLON) RPAREN
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents option(SEMICOLON) RPAREN . [ RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,const_clocked_typed_idents) -> const_clocked_typed_idents option(SEMICOLON) RPAREN

State 259:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents)
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) . RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On RETURNS shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS . tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPAREN shift to state 261
-- On tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) shift to state 286
## Reductions:

State 261:
## Known stack suffix:
## LPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN . tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) [ SEMICOLON ]
tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN . RPAREN [ SEMICOLON ]
## Transitions:
-- On SYM shift to state 2
-- On RPAREN shift to state 262
-- On LPAREN shift to state 263
-- On typed_idents shift to state 277
-- On tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) shift to state 280
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
-- On clocked_typed_idents shift to state 281
## Reductions:

State 262:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN RPAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN RPAREN

State 263:
## Known stack suffix:
## LPAREN
## LR(1) items:
clocked_typed_idents -> LPAREN . typed_idents RPAREN WHEN clock_expr [ SEMICOLON RPAREN ]
clocked_typed_idents -> LPAREN . typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On typed_idents shift to state 264
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:

State 264:
## Known stack suffix:
## LPAREN typed_idents
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents . RPAREN WHEN clock_expr [ SEMICOLON RPAREN ]
clocked_typed_idents -> LPAREN typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On SEMICOLON shift to state 265
-- On RPAREN shift to state 274
## Reductions:

State 265:
## Known stack suffix:
## LPAREN typed_idents SEMICOLON
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On SYM shift to state 2
-- On typed_idents shift to state 266
-- On tlist_tail(SEMICOLON,RPAREN,typed_idents) shift to state 271
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:

State 266:
## Known stack suffix:
## typed_idents
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents . option(SEMICOLON) RPAREN [ WHEN SEMICOLON RETURNS ]
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) [ WHEN SEMICOLON RETURNS ]
## Transitions:
-- On SEMICOLON shift to state 267
-- On option(SEMICOLON) shift to state 269
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) ->

State 267:
## Known stack suffix:
## typed_idents SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPAREN ]
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,typed_idents) [ WHEN SEMICOLON RETURNS ]
## Transitions:
-- On SYM shift to state 2
-- On typed_idents shift to state 266
-- On tlist_tail(SEMICOLON,RPAREN,typed_idents) shift to state 268
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) -> SEMICOLON

State 268:
## Known stack suffix:
## typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) . [ WHEN SEMICOLON RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents)

State 269:
## Known stack suffix:
## typed_idents option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents option(SEMICOLON) . RPAREN [ WHEN SEMICOLON RETURNS ]
## Transitions:
-- On RPAREN shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## typed_idents option(SEMICOLON) RPAREN
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents option(SEMICOLON) RPAREN . [ WHEN SEMICOLON RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,typed_idents) -> typed_idents option(SEMICOLON) RPAREN

State 271:
## Known stack suffix:
## LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents)
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clocked_typed_idents -> LPAREN typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,typed_idents) WHEN clock_expr

State 274:
## Known stack suffix:
## LPAREN typed_idents RPAREN
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents RPAREN . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## LPAREN typed_idents RPAREN WHEN
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents RPAREN WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## LPAREN typed_idents RPAREN WHEN clock_expr
## LR(1) items:
clocked_typed_idents -> LPAREN typed_idents RPAREN WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clocked_typed_idents -> LPAREN typed_idents RPAREN WHEN clock_expr

State 277:
## Known stack suffix:
## typed_idents
## LR(1) items:
clocked_typed_idents -> typed_idents . [ SEMICOLON RPAREN ]
clocked_typed_idents -> typed_idents . WHEN clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On WHEN shift to state 278
## Reductions:
-- On SEMICOLON RPAREN
--   reduce production clocked_typed_idents -> typed_idents

State 278:
## Known stack suffix:
## typed_idents WHEN
## LR(1) items:
clocked_typed_idents -> typed_idents WHEN . clock_expr [ SEMICOLON RPAREN ]
## Transitions:
-- On TRUE shift to state 232
-- On SYM shift to state 2
-- On NOT shift to state 233
-- On ident shift to state 238
-- On clock_expr shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## typed_idents WHEN clock_expr
## LR(1) items:
clocked_typed_idents -> typed_idents WHEN clock_expr . [ SEMICOLON RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clocked_typed_idents -> typed_idents WHEN clock_expr

State 280:
## Known stack suffix:
## LPAREN tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents)
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents)

State 281:
## Known stack suffix:
## clocked_typed_idents
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents . option(SEMICOLON) RPAREN [ SEMICOLON ]
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents . SEMICOLON tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) [ SEMICOLON ]
## Transitions:
-- On SEMICOLON shift to state 282
-- On option(SEMICOLON) shift to state 284
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) ->

State 282:
## Known stack suffix:
## clocked_typed_idents SEMICOLON
## LR(1) items:
option(SEMICOLON) -> SEMICOLON . [ RPAREN ]
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents SEMICOLON . tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) [ SEMICOLON ]
## Transitions:
-- On SYM shift to state 2
-- On LPAREN shift to state 263
-- On typed_idents shift to state 277
-- On tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) shift to state 283
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
-- On clocked_typed_idents shift to state 281
## Reductions:
-- On RPAREN
--   reduce production option(SEMICOLON) -> SEMICOLON

State 283:
## Known stack suffix:
## clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents SEMICOLON tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents)

State 284:
## Known stack suffix:
## clocked_typed_idents option(SEMICOLON)
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents option(SEMICOLON) . RPAREN [ SEMICOLON ]
## Transitions:
-- On RPAREN shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## clocked_typed_idents option(SEMICOLON) RPAREN
## LR(1) items:
tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents option(SEMICOLON) RPAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist_tail(SEMICOLON,RPAREN,clocked_typed_idents) -> clocked_typed_idents option(SEMICOLON) RPAREN

State 286:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents)
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) . SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON . contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On REQUIRES shift to state 288
-- On ENSURES shift to state 291
-- On list(contract_clause) shift to state 294
-- On contract_clause shift to state 295
-- On contract shift to state 297
## Reductions:
-- On VAR LET CONST
--   reduce production list(contract_clause) ->

State 288:
## Known stack suffix:
## REQUIRES
## LR(1) items:
contract_clause -> REQUIRES . expr SEMICOLON [ VAR REQUIRES LET ENSURES CONST ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## REQUIRES expr
## LR(1) items:
contract_clause -> REQUIRES expr . SEMICOLON [ VAR REQUIRES LET ENSURES CONST ]
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 290
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 290:
## Known stack suffix:
## REQUIRES expr SEMICOLON
## LR(1) items:
contract_clause -> REQUIRES expr SEMICOLON . [ VAR REQUIRES LET ENSURES CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production contract_clause -> REQUIRES expr SEMICOLON

State 291:
## Known stack suffix:
## ENSURES
## LR(1) items:
contract_clause -> ENSURES . expr SEMICOLON [ VAR REQUIRES LET ENSURES CONST ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## ENSURES expr
## LR(1) items:
contract_clause -> ENSURES expr . SEMICOLON [ VAR REQUIRES LET ENSURES CONST ]
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 293
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 293:
## Known stack suffix:
## ENSURES expr SEMICOLON
## LR(1) items:
contract_clause -> ENSURES expr SEMICOLON . [ VAR REQUIRES LET ENSURES CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production contract_clause -> ENSURES expr SEMICOLON

State 294:
## Known stack suffix:
## list(contract_clause)
## LR(1) items:
contract -> list(contract_clause) . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production contract -> list(contract_clause)

State 295:
## Known stack suffix:
## contract_clause
## LR(1) items:
list(contract_clause) -> contract_clause . list(contract_clause) [ VAR LET CONST ]
## Transitions:
-- On REQUIRES shift to state 288
-- On ENSURES shift to state 291
-- On list(contract_clause) shift to state 296
-- On contract_clause shift to state 295
## Reductions:
-- On VAR LET CONST
--   reduce production list(contract_clause) ->

State 296:
## Known stack suffix:
## contract_clause list(contract_clause)
## LR(1) items:
list(contract_clause) -> contract_clause list(contract_clause) . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(contract_clause) -> contract_clause list(contract_clause)

State 297:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract . list(node_local_decl) LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On VAR shift to state 298
-- On CONST shift to state 304
-- On var_decls shift to state 324
-- On node_local_decl shift to state 325
-- On list(node_local_decl) shift to state 328
-- On const_decl shift to state 327
## Reductions:
-- On LET
--   reduce production list(node_local_decl) ->

State 298:
## Known stack suffix:
## VAR
## LR(1) items:
var_decls -> VAR . nonempty_list(var_decl) [ VAR LET CONST ]
## Transitions:
-- On SYM shift to state 2
-- On LPAREN shift to state 263
-- On var_decl shift to state 299
-- On typed_idents shift to state 277
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On nonempty_list(var_decl) shift to state 303
-- On ident shift to state 99
-- On clocked_typed_idents shift to state 301
## Reductions:

State 299:
## Known stack suffix:
## var_decl
## LR(1) items:
nonempty_list(var_decl) -> var_decl . [ VAR LET CONST ]
nonempty_list(var_decl) -> var_decl . nonempty_list(var_decl) [ VAR LET CONST ]
## Transitions:
-- On SYM shift to state 2
-- On LPAREN shift to state 263
-- On var_decl shift to state 299
-- On typed_idents shift to state 277
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On nonempty_list(var_decl) shift to state 300
-- On ident shift to state 99
-- On clocked_typed_idents shift to state 301
## Reductions:
-- On VAR LET CONST
--   reduce production nonempty_list(var_decl) -> var_decl

State 300:
## Known stack suffix:
## var_decl nonempty_list(var_decl)
## LR(1) items:
nonempty_list(var_decl) -> var_decl nonempty_list(var_decl) . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(var_decl) -> var_decl nonempty_list(var_decl)

State 301:
## Known stack suffix:
## clocked_typed_idents
## LR(1) items:
var_decl -> clocked_typed_idents . SEMICOLON [ VAR SYM LPAREN LET CONST ]
## Transitions:
-- On SEMICOLON shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## clocked_typed_idents SEMICOLON
## LR(1) items:
var_decl -> clocked_typed_idents SEMICOLON . [ VAR SYM LPAREN LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var_decl -> clocked_typed_idents SEMICOLON

State 303:
## Known stack suffix:
## VAR nonempty_list(var_decl)
## LR(1) items:
var_decls -> VAR nonempty_list(var_decl) . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var_decls -> VAR nonempty_list(var_decl)

State 304:
## Known stack suffix:
## CONST
## LR(1) items:
const_decl -> CONST . nonempty_list(const_decl_body) [ VAR TYPE NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On typed_ident shift to state 305
-- On nonempty_list(const_decl_body) shift to state 309
-- On ident shift to state 310
-- On const_decl_body shift to state 322
## Reductions:

State 305:
## Known stack suffix:
## typed_ident
## LR(1) items:
const_decl_body -> typed_ident . EQUALS expr SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On EQUALS shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## typed_ident EQUALS
## LR(1) items:
const_decl_body -> typed_ident EQUALS . expr SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## typed_ident EQUALS expr
## LR(1) items:
const_decl_body -> typed_ident EQUALS expr . SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 308
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 308:
## Known stack suffix:
## typed_ident EQUALS expr SEMICOLON
## LR(1) items:
const_decl_body -> typed_ident EQUALS expr SEMICOLON . [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_decl_body -> typed_ident EQUALS expr SEMICOLON

State 309:
## Known stack suffix:
## CONST nonempty_list(const_decl_body)
## LR(1) items:
const_decl -> CONST nonempty_list(const_decl_body) . [ VAR TYPE NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_decl -> CONST nonempty_list(const_decl_body)

State 310:
## Known stack suffix:
## ident
## LR(1) items:
const_decl_body -> ident . COLON lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
const_decl_body -> ident . COMMA ident_list COLON lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
const_decl_body -> ident . EQUALS expr SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
typed_ident -> ident . COLON lustre_type [ EQUALS ]
## Transitions:
-- On EQUALS shift to state 311
-- On COMMA shift to state 314
-- On COLON shift to state 319
## Reductions:

State 311:
## Known stack suffix:
## ident EQUALS
## LR(1) items:
const_decl_body -> ident EQUALS . expr SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## ident EQUALS expr
## LR(1) items:
const_decl_body -> ident EQUALS expr . SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 313
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 313:
## Known stack suffix:
## ident EQUALS expr SEMICOLON
## LR(1) items:
const_decl_body -> ident EQUALS expr SEMICOLON . [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_decl_body -> ident EQUALS expr SEMICOLON

State 314:
## Known stack suffix:
## ident COMMA
## LR(1) items:
const_decl_body -> ident COMMA . ident_list COLON lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On separated_nonempty_list(COMMA,ident) shift to state 3
-- On ident_list shift to state 315
-- On ident shift to state 99
## Reductions:

State 315:
## Known stack suffix:
## ident COMMA ident_list
## LR(1) items:
const_decl_body -> ident COMMA ident_list . COLON lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On COLON shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## ident COMMA ident_list COLON
## LR(1) items:
const_decl_body -> ident COMMA ident_list COLON . lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On lustre_type shift to state 317
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 317:
## Known stack suffix:
## ident COMMA ident_list COLON lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ SEMICOLON CARET ]
const_decl_body -> ident COMMA ident_list COLON lustre_type . SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 318
-- On CARET shift to state 113
## Reductions:

State 318:
## Known stack suffix:
## ident COMMA ident_list COLON lustre_type SEMICOLON
## LR(1) items:
const_decl_body -> ident COMMA ident_list COLON lustre_type SEMICOLON . [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_decl_body -> ident COMMA ident_list COLON lustre_type SEMICOLON

State 319:
## Known stack suffix:
## ident COLON
## LR(1) items:
const_decl_body -> ident COLON . lustre_type SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
typed_ident -> ident COLON . lustre_type [ EQUALS ]
## Transitions:
-- On SYM shift to state 2
-- On SUBRANGE shift to state 7
-- On REAL shift to state 92
-- On LSQBRACKET shift to state 93
-- On INT shift to state 94
-- On ENUM shift to state 95
-- On BOOL shift to state 102
-- On tuple_type shift to state 103
-- On lustre_type shift to state 320
-- On ident shift to state 110
-- On enum_type shift to state 111
-- On array_type shift to state 112
## Reductions:

State 320:
## Known stack suffix:
## ident COLON lustre_type
## LR(1) items:
array_type -> lustre_type . CARET expr [ SEMICOLON EQUALS CARET ]
const_decl_body -> ident COLON lustre_type . SEMICOLON [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
typed_ident -> ident COLON lustre_type . [ EQUALS ]
## Transitions:
-- On SEMICOLON shift to state 321
-- On CARET shift to state 113
## Reductions:
-- On EQUALS
--   reduce production typed_ident -> ident COLON lustre_type

State 321:
## Known stack suffix:
## ident COLON lustre_type SEMICOLON
## LR(1) items:
const_decl_body -> ident COLON lustre_type SEMICOLON . [ VAR TYPE SYM NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_decl_body -> ident COLON lustre_type SEMICOLON

State 322:
## Known stack suffix:
## const_decl_body
## LR(1) items:
nonempty_list(const_decl_body) -> const_decl_body . [ VAR TYPE NODE LET FUNCTION EOF CONST ]
nonempty_list(const_decl_body) -> const_decl_body . nonempty_list(const_decl_body) [ VAR TYPE NODE LET FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On typed_ident shift to state 305
-- On nonempty_list(const_decl_body) shift to state 323
-- On ident shift to state 310
-- On const_decl_body shift to state 322
## Reductions:
-- On VAR TYPE NODE LET FUNCTION EOF CONST
--   reduce production nonempty_list(const_decl_body) -> const_decl_body

State 323:
## Known stack suffix:
## const_decl_body nonempty_list(const_decl_body)
## LR(1) items:
nonempty_list(const_decl_body) -> const_decl_body nonempty_list(const_decl_body) . [ VAR TYPE NODE LET FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(const_decl_body) -> const_decl_body nonempty_list(const_decl_body)

State 324:
## Known stack suffix:
## var_decls
## LR(1) items:
node_local_decl -> var_decls . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_local_decl -> var_decls

State 325:
## Known stack suffix:
## node_local_decl
## LR(1) items:
list(node_local_decl) -> node_local_decl . list(node_local_decl) [ LET ]
## Transitions:
-- On VAR shift to state 298
-- On CONST shift to state 304
-- On var_decls shift to state 324
-- On node_local_decl shift to state 325
-- On list(node_local_decl) shift to state 326
-- On const_decl shift to state 327
## Reductions:
-- On LET
--   reduce production list(node_local_decl) ->

State 326:
## Known stack suffix:
## node_local_decl list(node_local_decl)
## LR(1) items:
list(node_local_decl) -> node_local_decl list(node_local_decl) . [ LET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(node_local_decl) -> node_local_decl list(node_local_decl)

State 327:
## Known stack suffix:
## const_decl
## LR(1) items:
node_local_decl -> const_decl . [ VAR LET CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_local_decl -> const_decl

State 328:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl)
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) . LET list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LET shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET . list(node_equation) TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On PROPERTY shift to state 330
-- On MAIN shift to state 333
-- On LPAREN shift to state 334
-- On ASSERT shift to state 353
-- On struct_item_list shift to state 356
-- On struct_item shift to state 338
-- On separated_nonempty_list(COMMA,struct_item) shift to state 352
-- On node_equation shift to state 357
-- On list(node_equation) shift to state 363
-- On left_side shift to state 359
-- On ident shift to state 341
## Reductions:
-- On TEL
--   reduce production list(node_equation) ->

State 330:
## Known stack suffix:
## PROPERTY
## LR(1) items:
node_equation -> PROPERTY . expr SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## PROPERTY expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
node_equation -> PROPERTY expr . SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 332
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 332:
## Known stack suffix:
## PROPERTY expr SEMICOLON
## LR(1) items:
node_equation -> PROPERTY expr SEMICOLON . [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_equation -> PROPERTY expr SEMICOLON

State 333:
## Known stack suffix:
## MAIN
## LR(1) items:
node_equation -> MAIN . [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_equation -> MAIN

State 334:
## Known stack suffix:
## LPAREN
## LR(1) items:
left_side -> LPAREN . struct_item_list RPAREN [ EQUALS ]
left_side -> LPAREN . RPAREN [ EQUALS ]
## Transitions:
-- On SYM shift to state 2
-- On RPAREN shift to state 335
-- On struct_item_list shift to state 336
-- On struct_item shift to state 338
-- On separated_nonempty_list(COMMA,struct_item) shift to state 352
-- On ident shift to state 341
## Reductions:

State 335:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
left_side -> LPAREN RPAREN . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_side -> LPAREN RPAREN

State 336:
## Known stack suffix:
## LPAREN struct_item_list
## LR(1) items:
left_side -> LPAREN struct_item_list . RPAREN [ EQUALS ]
## Transitions:
-- On RPAREN shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## LPAREN struct_item_list RPAREN
## LR(1) items:
left_side -> LPAREN struct_item_list RPAREN . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_side -> LPAREN struct_item_list RPAREN

State 338:
## Known stack suffix:
## struct_item
## LR(1) items:
separated_nonempty_list(COMMA,struct_item) -> struct_item . [ RPAREN EQUALS ]
separated_nonempty_list(COMMA,struct_item) -> struct_item . COMMA separated_nonempty_list(COMMA,struct_item) [ RPAREN EQUALS ]
## Transitions:
-- On COMMA shift to state 339
## Reductions:
-- On RPAREN EQUALS
--   reduce production separated_nonempty_list(COMMA,struct_item) -> struct_item

State 339:
## Known stack suffix:
## struct_item COMMA
## LR(1) items:
separated_nonempty_list(COMMA,struct_item) -> struct_item COMMA . separated_nonempty_list(COMMA,struct_item) [ RPAREN EQUALS ]
## Transitions:
-- On SYM shift to state 2
-- On struct_item shift to state 338
-- On separated_nonempty_list(COMMA,struct_item) shift to state 340
-- On ident shift to state 341
## Reductions:

State 340:
## Known stack suffix:
## struct_item COMMA separated_nonempty_list(COMMA,struct_item)
## LR(1) items:
separated_nonempty_list(COMMA,struct_item) -> struct_item COMMA separated_nonempty_list(COMMA,struct_item) . [ RPAREN EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,struct_item) -> struct_item COMMA separated_nonempty_list(COMMA,struct_item)

State 341:
## Known stack suffix:
## ident
## LR(1) items:
struct_item -> ident . [ RPAREN EQUALS COMMA ]
struct_item -> ident . nonempty_list(one_index) [ RPAREN EQUALS COMMA ]
## Transitions:
-- On LSQBRACKET shift to state 342
-- On DOT shift to state 347
-- On one_index shift to state 349
-- On nonempty_list(one_index) shift to state 351
## Reductions:
-- On RPAREN EQUALS COMMA
--   reduce production struct_item -> ident

State 342:
## Known stack suffix:
## LSQBRACKET
## LR(1) items:
one_index -> LSQBRACKET . ident RSQBRACKET [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
one_index -> LSQBRACKET . NUMERAL RSQBRACKET [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
-- On SYM shift to state 2
-- On NUMERAL shift to state 343
-- On ident shift to state 345
## Reductions:

State 343:
## Known stack suffix:
## LSQBRACKET NUMERAL
## LR(1) items:
one_index -> LSQBRACKET NUMERAL . RSQBRACKET [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
-- On RSQBRACKET shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## LSQBRACKET NUMERAL RSQBRACKET
## LR(1) items:
one_index -> LSQBRACKET NUMERAL RSQBRACKET . [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production one_index -> LSQBRACKET NUMERAL RSQBRACKET

State 345:
## Known stack suffix:
## LSQBRACKET ident
## LR(1) items:
one_index -> LSQBRACKET ident . RSQBRACKET [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
-- On RSQBRACKET shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## LSQBRACKET ident RSQBRACKET
## LR(1) items:
one_index -> LSQBRACKET ident RSQBRACKET . [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production one_index -> LSQBRACKET ident RSQBRACKET

State 347:
## Known stack suffix:
## DOT
## LR(1) items:
one_index -> DOT . ident [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## DOT ident
## LR(1) items:
one_index -> DOT ident . [ RPAREN LSQBRACKET EQUALS DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production one_index -> DOT ident

State 349:
## Known stack suffix:
## one_index
## LR(1) items:
nonempty_list(one_index) -> one_index . [ RPAREN EQUALS COMMA ]
nonempty_list(one_index) -> one_index . nonempty_list(one_index) [ RPAREN EQUALS COMMA ]
## Transitions:
-- On LSQBRACKET shift to state 342
-- On DOT shift to state 347
-- On one_index shift to state 349
-- On nonempty_list(one_index) shift to state 350
## Reductions:
-- On RPAREN EQUALS COMMA
--   reduce production nonempty_list(one_index) -> one_index

State 350:
## Known stack suffix:
## one_index nonempty_list(one_index)
## LR(1) items:
nonempty_list(one_index) -> one_index nonempty_list(one_index) . [ RPAREN EQUALS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(one_index) -> one_index nonempty_list(one_index)

State 351:
## Known stack suffix:
## ident nonempty_list(one_index)
## LR(1) items:
struct_item -> ident nonempty_list(one_index) . [ RPAREN EQUALS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_item -> ident nonempty_list(one_index)

State 352:
## Known stack suffix:
## separated_nonempty_list(COMMA,struct_item)
## LR(1) items:
struct_item_list -> separated_nonempty_list(COMMA,struct_item) . [ RPAREN EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_item_list -> separated_nonempty_list(COMMA,struct_item)

State 353:
## Known stack suffix:
## ASSERT
## LR(1) items:
node_equation -> ASSERT . expr SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## ASSERT expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
node_equation -> ASSERT expr . SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 355
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 355:
## Known stack suffix:
## ASSERT expr SEMICOLON
## LR(1) items:
node_equation -> ASSERT expr SEMICOLON . [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_equation -> ASSERT expr SEMICOLON

State 356:
## Known stack suffix:
## struct_item_list
## LR(1) items:
left_side -> struct_item_list . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production left_side -> struct_item_list

State 357:
## Known stack suffix:
## node_equation
## LR(1) items:
list(node_equation) -> node_equation . list(node_equation) [ TEL ]
## Transitions:
-- On SYM shift to state 2
-- On PROPERTY shift to state 330
-- On MAIN shift to state 333
-- On LPAREN shift to state 334
-- On ASSERT shift to state 353
-- On struct_item_list shift to state 356
-- On struct_item shift to state 338
-- On separated_nonempty_list(COMMA,struct_item) shift to state 352
-- On node_equation shift to state 357
-- On list(node_equation) shift to state 358
-- On left_side shift to state 359
-- On ident shift to state 341
## Reductions:
-- On TEL
--   reduce production list(node_equation) ->

State 358:
## Known stack suffix:
## node_equation list(node_equation)
## LR(1) items:
list(node_equation) -> node_equation list(node_equation) . [ TEL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(node_equation) -> node_equation list(node_equation)

State 359:
## Known stack suffix:
## left_side
## LR(1) items:
node_equation -> left_side . EQUALS expr SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On EQUALS shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## left_side EQUALS
## LR(1) items:
node_equation -> left_side EQUALS . expr SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On WITH shift to state 9
-- On TRUE shift to state 10
-- On SYM shift to state 2
-- On REAL shift to state 11
-- On PRE shift to state 12
-- On NUMERAL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LSQBRACKET shift to state 16
-- On LPAREN shift to state 17
-- On INT shift to state 18
-- On IF shift to state 19
-- On HASH shift to state 20
-- On FBY shift to state 22
-- On FALSE shift to state 24
-- On DECIMAL shift to state 25
-- On CURRENT shift to state 26
-- On CONDACT shift to state 27
-- On node_call shift to state 29
-- On ident shift to state 30
-- On expr shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## left_side EQUALS expr
## LR(1) items:
expr -> expr . CARET expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PIPE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MINUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . PLUS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MULT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . DIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . INTDIV expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . MOD expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . AND expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . OR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . XOR expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . IMPL expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GT expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . LTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . GTE expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . EQUALS expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . NEQ expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . WHEN expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
expr -> expr . ARROW expr [ XOR WHEN SEMICOLON PLUS PIPE OR NEQ MULT MOD MINUS LTE LT INTDIV IMPL GTE GT EQUALS DIV CARET ARROW AND ]
node_equation -> left_side EQUALS expr . SEMICOLON [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
-- On XOR shift to state 34
-- On WHEN shift to state 36
-- On SEMICOLON shift to state 362
-- On PLUS shift to state 40
-- On PIPE shift to state 67
-- On OR shift to state 69
-- On NEQ shift to state 50
-- On MULT shift to state 42
-- On MOD shift to state 44
-- On MINUS shift to state 52
-- On LTE shift to state 54
-- On LT shift to state 56
-- On INTDIV shift to state 46
-- On IMPL shift to state 71
-- On GTE shift to state 58
-- On GT shift to state 60
-- On EQUALS shift to state 62
-- On DIV shift to state 48
-- On CARET shift to state 38
-- On ARROW shift to state 73
-- On AND shift to state 64
## Reductions:

State 362:
## Known stack suffix:
## left_side EQUALS expr SEMICOLON
## LR(1) items:
node_equation -> left_side EQUALS expr SEMICOLON . [ TEL SYM PROPERTY MAIN LPAREN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_equation -> left_side EQUALS expr SEMICOLON

State 363:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation)
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) . TEL option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On TEL shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL . option(node_sep) [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 365
-- On DOT shift to state 366
-- On option(node_sep) shift to state 367
-- On node_sep shift to state 368
## Reductions:
-- On TYPE NODE FUNCTION EOF CONST
--   reduce production option(node_sep) ->

State 365:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
node_sep -> SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_sep -> SEMICOLON

State 366:
## Known stack suffix:
## DOT
## LR(1) items:
node_sep -> DOT . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_sep -> DOT

State 367:
## Known stack suffix:
## NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep)
## LR(1) items:
node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep) . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_decl -> NODE ident loption(static_params) tlist(LPAREN,SEMICOLON,RPAREN,const_clocked_typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,clocked_typed_idents) SEMICOLON contract list(node_local_decl) LET list(node_equation) TEL option(node_sep)

State 368:
## Known stack suffix:
## node_sep
## LR(1) items:
option(node_sep) -> node_sep . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production option(node_sep) -> node_sep

State 369:
## Known stack suffix:
## FUNCTION
## LR(1) items:
func_decl -> FUNCTION . ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SYM shift to state 2
-- On ident shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## FUNCTION ident
## LR(1) items:
func_decl -> FUNCTION ident . tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPAREN shift to state 371
-- On tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) shift to state 374
## Reductions:

State 371:
## Known stack suffix:
## LPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN . tlist_tail(SEMICOLON,RPAREN,typed_idents) [ SEMICOLON RETURNS ]
tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN . RPAREN [ SEMICOLON RETURNS ]
## Transitions:
-- On SYM shift to state 2
-- On RPAREN shift to state 372
-- On typed_idents shift to state 266
-- On tlist_tail(SEMICOLON,RPAREN,typed_idents) shift to state 373
-- On separated_nonempty_list(COMMA,ident) shift to state 196
-- On ident shift to state 99
## Reductions:

State 372:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN RPAREN . [ SEMICOLON RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN RPAREN

State 373:
## Known stack suffix:
## LPAREN tlist_tail(SEMICOLON,RPAREN,typed_idents)
## LR(1) items:
tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,typed_idents) . [ SEMICOLON RETURNS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) -> LPAREN tlist_tail(SEMICOLON,RPAREN,typed_idents)

State 374:
## Known stack suffix:
## FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents)
## LR(1) items:
func_decl -> FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) . RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On RETURNS shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS
## LR(1) items:
func_decl -> FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS . tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On LPAREN shift to state 371
-- On tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents)
## LR(1) items:
func_decl -> FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) . SEMICOLON [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON
## LR(1) items:
func_decl -> FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production func_decl -> FUNCTION ident tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) RETURNS tlist(LPAREN,SEMICOLON,RPAREN,typed_idents) SEMICOLON

State 378:
## Known stack suffix:
## type_decl
## LR(1) items:
decl -> type_decl . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> type_decl

State 379:
## Known stack suffix:
## node_param_inst
## LR(1) items:
decl -> node_param_inst . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> node_param_inst

State 380:
## Known stack suffix:
## node_decl
## LR(1) items:
decl -> node_decl . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> node_decl

State 381:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept main

State 382:
## Known stack suffix:
## list(decl)
## LR(1) items:
main -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
main -> list(decl) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production main -> list(decl) EOF

State 384:
## Known stack suffix:
## func_decl
## LR(1) items:
decl -> func_decl . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> func_decl

State 385:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On TYPE shift to state 1
-- On NODE shift to state 205
-- On FUNCTION shift to state 369
-- On CONST shift to state 304
-- On type_decl shift to state 378
-- On node_param_inst shift to state 379
-- On node_decl shift to state 380
-- On list(decl) shift to state 386
-- On func_decl shift to state 384
-- On decl shift to state 385
-- On const_decl shift to state 387
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 386:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(decl) -> decl list(decl)

State 387:
## Known stack suffix:
## const_decl
## LR(1) items:
decl -> const_decl . [ TYPE NODE FUNCTION EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> const_decl

