%{

module I = LustreIdent
module A = LustreAst

let mk_pos = Lib.position_of_lexing

%}
%start main
%token AND
%token ARROW
%token ASSERT
%token BOOL
%token CARET
%token COLON
%token COMMA
%token CONDACT
%token CONST
%token CURRENT
%token <string> DECIMAL
%token DIV
%token DOT
%token DOTDOT
%token ELSE
%token ENSURES
%token ENUM
%token EOF
%token EQUALS
%token FALSE
%token FBY
%token FUNCTION
%token GT
%token GTE
%token HASH
%token IF
%token IMPL
%token INT
%token INTDIV
%token LCURLYBRACKET
%token LET
%token LPARAMBRACKET
%token LPAREN
%token LSQBRACKET
%token LT
%token LTE
%token MAIN
%token MINUS
%token MOD
%token MULT
%token NEQ
%token NODE
%token NOT
%token <string> NUMERAL
%token OF
%token OR
%token PIPE
%token PLUS
%token PRE
%token PROPERTY
%token RCURLYBRACKET
%token REAL
%token REQUIRES
%token RETURNS
%token RPARAMBRACKET
%token RPAREN
%token RSQBRACKET
%token SEMICOLON
%token STRUCT
%token SUBRANGE
%token <string> SYM
%token TEL
%token THEN
%token TRUE
%token TYPE
%token VAR
%token WHEN
%token WITH
%token XOR
%left PIPE
%nonassoc ELSE
%right ARROW
%right IMPL
%left OR XOR
%left AND
%left EQUALS GT GTE LT LTE NEQ
%left MINUS PLUS
%left DIV INTDIV MOD MULT
%nonassoc WHEN
%nonassoc NOT
%nonassoc CURRENT
%nonassoc PRE
%left CARET
%nonassoc INT REAL
%type <LustreAst.t> main
%%

option_SEMICOLON_:
  
    {    ( None )}
| x = SEMICOLON
    {    ( Some x )}

option_STRUCT_:
  
    {    ( None )}
| x = STRUCT
    {    ( Some x )}

option_node_sep_:
  
    {    ( None )}
| x = node_sep
    {    ( Some x )}

boption_CONST_:
  
    {    ( false )}
| _1 = CONST
    {    ( true )}

loption_separated_nonempty_list_COMMA_expr__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_expr_
    {    ( x )}

loption_static_params_:
  
    {    ( [] )}
| x = static_params
    {    ( x )}

list_contract_clause_:
  
    {    ( [] )}
| x = contract_clause xs = list_contract_clause_
    {    ( x :: xs )}

list_decl_:
  
    {    ( [] )}
| x = decl xs = list_decl_
    {    ( x :: xs )}

list_node_equation_:
  
    {    ( [] )}
| x = node_equation xs = list_node_equation_
    {    ( x :: xs )}

list_node_local_decl_:
  
    {    ( [] )}
| x = node_local_decl xs = list_node_local_decl_
    {    ( x :: xs )}

nonempty_list_const_decl_body_:
  x = const_decl_body
    {    ( [ x ] )}
| x = const_decl_body xs = nonempty_list_const_decl_body_
    {    ( x :: xs )}

nonempty_list_one_index_:
  x = one_index
    {    ( [ x ] )}
| x = one_index xs = nonempty_list_one_index_
    {    ( x :: xs )}

nonempty_list_var_decl_:
  x = var_decl
    {    ( [ x ] )}
| x = var_decl xs = nonempty_list_var_decl_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_array_slice_:
  x = array_slice
    {    ( [ x ] )}
| x = array_slice _2 = COMMA xs = separated_nonempty_list_COMMA_array_slice_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_expr_:
  x = expr
    {    ( [ x ] )}
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_ident_:
  x = ident
    {    ( [ x ] )}
| x = ident _2 = COMMA xs = separated_nonempty_list_COMMA_ident_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_lustre_type_:
  x = lustre_type
    {    ( [ x ] )}
| x = lustre_type _2 = COMMA xs = separated_nonempty_list_COMMA_lustre_type_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_struct_item_:
  x = struct_item
    {    ( [ x ] )}
| x = struct_item _2 = COMMA xs = separated_nonempty_list_COMMA_struct_item_
    {    ( x :: xs )}

main:
  p = list_decl_ _2 = EOF
    {                         ( List.flatten p )}

decl:
  d = const_decl
    {let _startpos = _startpos_d_ in
                   ( List.map
                       (function e -> A.ConstDecl (mk_pos _startpos, e))
                       d )}
| d = type_decl
    {let _startpos = _startpos_d_ in
                  ( List.map
                      (function e -> A.TypeDecl (mk_pos _startpos, e))
                      d )}
| d = node_decl
    {let _startpos = _startpos_d_ in
                  ( [A.NodeDecl (mk_pos _startpos, d)] )}
| d = func_decl
    {let _startpos = _startpos_d_ in
                  ( [A.FuncDecl (mk_pos _startpos, d)] )}
| d = node_param_inst
    {let _startpos = _startpos_d_ in
                        ( [A.NodeParamInst (mk_pos _startpos, d)] )}

const_decl:
  _1 = CONST l = nonempty_list_const_decl_body_
    {                                                      ( List.flatten l )}

const_decl_body:
  h = ident _2 = COLON t = lustre_type _4 = SEMICOLON
    {let _startpos = _startpos_h_ in
    ( [A.FreeConst (mk_pos _startpos, h, t)] )}
| h = ident _2 = COMMA l = ident_list _4 = COLON t = lustre_type _6 = SEMICOLON
    {let _startpos = _startpos_h_ in
    ( List.map (function e -> A.FreeConst (mk_pos _startpos, e, t)) (h :: l) )}
| s = ident _2 = EQUALS e = expr _4 = SEMICOLON
    {let _startpos = _startpos_s_ in
    ( [A.UntypedConst (mk_pos _startpos, s, e)] )}
| c = typed_ident _2 = EQUALS e = expr _4 = SEMICOLON
    {let _startpos = _startpos_c_ in
    ( let (s, t) = c in [A.TypedConst (mk_pos _startpos, s, e, t)] )}

type_decl:
  _1 = TYPE l = ident_list _3 = SEMICOLON
    {let _startpos = _startpos__1_ in
     ( List.map (function e -> A.FreeType (mk_pos _startpos, e)) l )}
| _1 = TYPE l = ident_list _3 = EQUALS t = lustre_type _5 = SEMICOLON
    {let _startpos = _startpos__1_ in
     ( List.map (function e -> A.AliasType (mk_pos _startpos, e, t)) l )}
| _1 = TYPE l = ident_list _3 = EQUALS t = record_type _5 = SEMICOLON
    {let _startpos = _startpos__1_ in
     ( List.map
         (function e ->
           A.AliasType (mk_pos _startpos,
                        e,
                        A.RecordType (mk_pos _startpos, t)))
         l )}

lustre_type:
  _1 = BOOL
    {let _startpos = _startpos__1_ in
         ( A.Bool (mk_pos _startpos) )}
| _1 = INT
    {let _startpos = _startpos__1_ in
        ( A.Int (mk_pos _startpos))}
| _1 = REAL
    {let _startpos = _startpos__1_ in
         ( A.Real (mk_pos _startpos))}
| _1 = SUBRANGE _2 = LSQBRACKET l = expr _4 = COMMA u = expr _6 = RSQBRACKET _7 = OF _8 = INT
    {let _startpos = _startpos__1_ in
    ( A.IntRange (mk_pos _startpos, l, u))}
| s = ident
    {let _startpos = _startpos_s_ in
              ( A.UserType (mk_pos _startpos, s) )}
| t = tuple_type
    {let _startpos = _startpos_t_ in
                   ( A.TupleType (mk_pos _startpos, t) )}
| t = array_type
    {let _startpos = _startpos_t_ in
                   ( A.ArrayType (mk_pos _startpos, t) )}
| t = enum_type
    {let _startpos = _startpos_t_ in
                  ( A.EnumType (mk_pos _startpos, t) )}

tuple_type:
  _1 = LSQBRACKET l = lustre_type_list _3 = RSQBRACKET
    {                                                 ( l )}

record_type:
  _1 = option_STRUCT_ f = tlist_LCURLYBRACKET_SEMICOLON_RCURLYBRACKET_typed_idents_
    {    ( List.flatten f  )}

array_type:
  t = lustre_type _2 = CARET s = expr
    {                                     ( t, s )}

enum_type:
  _1 = ENUM _2 = LCURLYBRACKET l = ident_list _4 = RCURLYBRACKET
    {                                                             ( l )}

func_decl:
  _1 = FUNCTION n = ident i = tlist_LPAREN_SEMICOLON_RPAREN_typed_idents_ _4 = RETURNS o = tlist_LPAREN_SEMICOLON_RPAREN_typed_idents_ _6 = SEMICOLON
    {    ( (n, List.flatten i, List.flatten o)  )}

node_decl:
  _1 = NODE n = ident p = loption_static_params_ i = tlist_LPAREN_SEMICOLON_RPAREN_const_clocked_typed_idents_ _5 = RETURNS o = tlist_LPAREN_SEMICOLON_RPAREN_clocked_typed_idents_ _7 = SEMICOLON r = contract l = list_node_local_decl_ _10 = LET e = list_node_equation_ _12 = TEL _13 = option_node_sep_
    {    ( (n,
       p,
       List.flatten i,
       List.flatten o,
       (List.flatten l),
       e,
       r)  )}

node_param_inst:
  _1 = NODE n = ident _3 = EQUALS s = ident p = tlist_LPARAMBRACKET_SEMICOLON_RPARAMBRACKET_node_call_static_param_ _6 = SEMICOLON
    {    ( (n, s, p) )}

node_sep:
  _1 = DOT
    {                          ( )}
| _1 = SEMICOLON
    {                          ( )}

contract:
  l = list_contract_clause_
    {                              ( l )}

contract_clause:
  _1 = REQUIRES e = expr _3 = SEMICOLON
    {let _startpos = _startpos__1_ in
                                  ( A.Requires (mk_pos _startpos, e) )}
| _1 = ENSURES e = expr _3 = SEMICOLON
    {let _startpos = _startpos__1_ in
                                 ( A.Ensures (mk_pos _startpos, e) )}

static_param:
  _1 = TYPE t = ident
    {                    ( A.TypeParam t )}

static_params:
  l = tlist_LPARAMBRACKET_SEMICOLON_RPARAMBRACKET_static_param_
    {    ( l )}

node_local_decl:
  c = const_decl
    {let _startpos = _startpos_c_ in
                   ( List.map
                       (function e -> A.NodeConstDecl (mk_pos _startpos, e))
                       c )}
| v = var_decls
    {let _startpos = _startpos_v_ in
                  ( List.map
                      (function e -> A.NodeVarDecl (mk_pos _startpos, e))
                      v )}

var_decls:
  _1 = VAR l = nonempty_list_var_decl_
    {                                     ( List.flatten l )}

var_decl:
  l = clocked_typed_idents _2 = SEMICOLON
    {                                        ( l )}

node_equation:
  _1 = ASSERT e = expr _3 = SEMICOLON
    {let _startpos = _startpos__1_ in
    ( A.Assert (mk_pos _startpos, e) )}
| l = left_side _2 = EQUALS e = expr _4 = SEMICOLON
    {let _startpos = _startpos_l_ in
    ( A.Equation (mk_pos _startpos, l, e) )}
| _1 = MAIN
    {         ( A.AnnotMain )}
| _1 = PROPERTY e = expr _3 = SEMICOLON
    {let _startpos = _startpos__1_ in
                                  ( A.AnnotProperty (mk_pos _startpos, e) )}

left_side:
  l = struct_item_list
    {                         ( l )}
| _1 = LPAREN l = struct_item_list _3 = RPAREN
    {                                         ( l )}
| _1 = LPAREN _2 = RPAREN
    {                   ( [] )}

struct_item:
  s = ident
    {let _startpos = _startpos_s_ in
     ( A.SingleIdent (mk_pos _startpos, s) )}
| s = ident l = nonempty_list_one_index_
    {let _startpos = _startpos_s_ in
     ( A.IndexedIdent (mk_pos _startpos, s, l))}

struct_item_list:
  l = separated_nonempty_list_COMMA_struct_item_
    {                                                   ( l )}

expr:
  s = ident
    {let _startpos = _startpos_s_ in
              ( A.Ident (mk_pos _startpos, s) )}
| _1 = TRUE
    {let _startpos = _startpos__1_ in
         ( A.True (mk_pos _startpos) )}
| _1 = FALSE
    {let _startpos = _startpos__1_ in
          ( A.False (mk_pos _startpos) )}
| s = NUMERAL
    {let _startpos = _startpos_s_ in
                ( A.Num (mk_pos _startpos, s) )}
| s = DECIMAL
    {let _startpos = _startpos_s_ in
                ( A.Dec (mk_pos _startpos, s) )}
| _1 = INT e = expr
    {let _startpos = _startpos__1_ in
                  ( A.ToInt (mk_pos _startpos, e) )}
| _1 = REAL e = expr
    {let _startpos = _startpos__1_ in
                   ( A.ToReal (mk_pos _startpos, e) )}
| _1 = LPAREN e = expr _3 = RPAREN
    {                             ( e )}
| _1 = LPAREN h = expr _3 = COMMA l = expr_list _5 = RPAREN
    {let _startpos = _startpos__1_ in
    ( A.ExprList (mk_pos _startpos, h :: l) )}
| _1 = LSQBRACKET l = expr_list _3 = RSQBRACKET
    {let _startpos = _startpos__1_ in
                                          ( A.TupleExpr (mk_pos _startpos, l) )}
| e1 = expr _2 = CARET e2 = expr
    {let _startpos = _startpos_e1_ in
                                ( A.ArrayConstr (mk_pos _startpos, e1, e2) )}
| e = ident _2 = LSQBRACKET i = expr _4 = RSQBRACKET
    {let _startpos = _startpos_e_ in
    ( A.TupleProject (mk_pos _startpos, e, i) )}
| e = ident _2 = LSQBRACKET l = array_slice_list _4 = RSQBRACKET
    {let _startpos = _startpos_e_ in
    ( A.ArraySlice (mk_pos _startpos, e, l) )}
| s = ident _2 = DOT t = ident
    {let _startpos = _startpos_s_ in
    ( A.RecordProject (mk_pos _startpos, s, I.index_of_ident t) )}
| t = ident f = tlist_LCURLYBRACKET_SEMICOLON_RCURLYBRACKET_record_field_assign_
    {let _startpos = _startpos_t_ in
    ( A.RecordConstruct (mk_pos _startpos, t, f) )}
| e1 = expr _2 = PIPE e2 = expr
    {let _startpos = _startpos_e1_ in
                               ( A.ArrayConcat (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = MINUS e2 = expr
    {let _startpos = _startpos_e1_ in
                                ( A.Minus (mk_pos _startpos, e1, e2) )}
| _1 = MINUS e = expr
    {let _startpos = _startpos__1_ in
                    ( A.Uminus (mk_pos _startpos, e) )}
| e1 = expr _2 = PLUS e2 = expr
    {let _startpos = _startpos_e1_ in
                               ( A.Plus (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = MULT e2 = expr
    {let _startpos = _startpos_e1_ in
                               ( A.Times (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = DIV e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Div (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = INTDIV e2 = expr
    {let _startpos = _startpos_e1_ in
                                 ( A.IntDiv (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = MOD e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Mod (mk_pos _startpos, e1, e2) )}
| _1 = NOT e = expr
    {let _startpos = _startpos__1_ in
                  ( A.Not (mk_pos _startpos, e) )}
| e1 = expr _2 = AND e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.And (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = OR e2 = expr
    {let _startpos = _startpos_e1_ in
                             ( A.Or (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = XOR e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Xor (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = IMPL e2 = expr
    {let _startpos = _startpos_e1_ in
                               ( A.Impl (mk_pos _startpos, e1, e2) )}
| _1 = HASH _2 = LPAREN e = expr_list _4 = RPAREN
    {let _startpos = _startpos__1_ in
                                        ( A.OneHot (mk_pos _startpos, e) )}
| e1 = expr _2 = LT e2 = expr
    {let _startpos = _startpos_e1_ in
                             ( A.Lt (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = GT e2 = expr
    {let _startpos = _startpos_e1_ in
                             ( A.Gt (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = LTE e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Lte (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = GTE e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Gte (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = EQUALS e2 = expr
    {let _startpos = _startpos_e1_ in
                                 ( A.Eq (mk_pos _startpos, e1, e2) )}
| e1 = expr _2 = NEQ e2 = expr
    {let _startpos = _startpos_e1_ in
                              ( A.Neq (mk_pos _startpos, e1, e2) )}
| _1 = IF e1 = expr _3 = THEN e2 = expr _5 = ELSE e3 = expr
    {let _startpos = _startpos__1_ in
    ( A.Ite (mk_pos _startpos, e1, e2, e3) )}
| _1 = WITH e1 = expr _3 = THEN e2 = expr _5 = ELSE e3 = expr
    {let _startpos = _startpos__1_ in
    ( A.With (mk_pos _startpos, e1, e2, e3) )}
| e1 = expr _2 = WHEN e2 = expr
    {let _startpos = _startpos_e1_ in
                               ( A.When (mk_pos _startpos, e1, e2) )}
| _1 = CURRENT e = expr
    {let _startpos = _startpos__1_ in
                      ( A.Current (mk_pos _startpos, e) )}
| _1 = CONDACT _2 = LPAREN e1 = expr _4 = COMMA s = ident _6 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _8 = RPAREN _9 = COMMA v = expr_list _11 = RPAREN
    {let a =     ( xs ) in
let _startpos = _startpos__1_ in
    ( A.Condact (mk_pos _startpos, e1, s, a, v) )}
| _1 = PRE e = expr
    {let _startpos = _startpos__1_ in
                  ( A.Pre (mk_pos _startpos, e) )}
| _1 = FBY _2 = LPAREN e1 = expr _4 = COMMA s = NUMERAL _6 = COMMA e2 = expr _8 = RPAREN
    {let _startpos = _startpos__1_ in
    ( A.Fby (mk_pos _startpos, e2, (int_of_string s), e2) )}
| e1 = expr _2 = ARROW e2 = expr
    {let _startpos = _startpos_e1_ in
                                ( A.Arrow (mk_pos _startpos, e1, e2) )}
| e = node_call
    {                  ( e )}

node_call_static_param:
  t = lustre_type
    {                    ( t )}

node_call:
  s = ident _2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _4 = RPAREN
    {let a =     ( xs ) in
let _startpos = _startpos_s_ in
    ( A.Call (mk_pos _startpos, s, a) )}
| s = ident p = tlist_LPARAMBRACKET_SEMICOLON_RPARAMBRACKET_node_call_static_param_ _3 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _5 = RPAREN
    {let a =     ( xs ) in
let _startpos = _startpos_s_ in
    ( A.CallParam (mk_pos _startpos, s, p, a) )}

expr_list:
  l = separated_nonempty_list_COMMA_expr_
    {                                                    ( l )}

array_slice:
  il = expr _2 = DOTDOT iu = expr
    {                                          ( il, iu )}

array_slice_list:
  l = separated_nonempty_list_COMMA_array_slice_
    {                                                                  ( l )}

record_field_assign:
  s = ident _2 = EQUALS e = expr
    {                                                 ( (s, e) )}

clock_expr:
  c = ident
    {              ( A.ClockPos c )}
| _1 = NOT c = ident
    {                   ( A.ClockNeg c )}
| _1 = NOT _2 = LPAREN c = ident _4 = RPAREN
    {                                   ( A.ClockNeg c )}
| _1 = TRUE
    {         ( A.ClockTrue )}

ident:
  s = SYM
    {               ( I.mk_string_ident s )}

typed_ident:
  s = ident _2 = COLON t = lustre_type
    {                                               ( (s, t) )}

ident_list:
  l = separated_nonempty_list_COMMA_ident_
    {                                              ( l )}

lustre_type_list:
  l = separated_nonempty_list_COMMA_lustre_type_
    {                                                    ( l )}

typed_idents:
  l = separated_nonempty_list_COMMA_ident_ _2 = COLON t = lustre_type
    {    ( List.map (function e -> (e, t)) l )}

const_typed_idents:
  o = boption_CONST_ l = typed_idents
    {    ( List.map (function (e, t) -> (e, t, o)) l )}

clocked_typed_idents:
  l = typed_idents
    {let _startpos = _startpos_l_ in
    ( List.map (function (e, t) -> (mk_pos _startpos, e, t, A.ClockTrue)) l )}
| l = typed_idents _2 = WHEN c = clock_expr
    {let _startpos = _startpos_l_ in
    ( List.map (function (e, t) -> (mk_pos _startpos, e, t, c)) l )}
| _1 = LPAREN l = typed_idents _3 = RPAREN _4 = WHEN c = clock_expr
    {let _startpos = _startpos__1_ in
    ( List.map (function (e, t) -> (mk_pos _startpos, e, t, c)) l )}
| _1 = LPAREN h = typed_idents _3 = SEMICOLON l = tlist_tail_SEMICOLON_RPAREN_typed_idents_ _5 = WHEN c = clock_expr
    {let _startpos = _startpos__1_ in
    ( List.map
        (function (e, t) -> (mk_pos _startpos, e, t, c))
        (h @ (List.flatten l)) )}

const_clocked_typed_idents:
  l = const_typed_idents
    {let _startpos = _startpos_l_ in
    ( List.map
        (function (e, t, o) -> (mk_pos _startpos, e, t, A.ClockTrue, o))
        l )}
| l = const_typed_idents _2 = WHEN c = clock_expr
    {let _startpos = _startpos_l_ in
    ( List.map
        (function (e, t, o) -> (mk_pos _startpos, e, t, c, o))
        l )}
| _1 = LPAREN l = const_typed_idents _3 = RPAREN _4 = WHEN c = clock_expr
    {let _startpos = _startpos__1_ in
    ( List.map
        (function (e, t, o) -> (mk_pos _startpos, e, t, c, o))
        l )}
| _1 = LPAREN h = const_typed_idents _3 = SEMICOLON l = tlist_tail_SEMICOLON_RPAREN_const_typed_idents_ _5 = WHEN c = clock_expr
    {let _startpos = _startpos__1_ in
    ( List.map (function (e, t, o) -> (mk_pos _startpos, e, t, c, o)) (h @ (List.flatten l)) )}

tlist_tail_SEMICOLON_RCURLYBRACKET_record_field_assign_:
  x = record_field_assign _2 = option_SEMICOLON_ _3 = RCURLYBRACKET
    {                                      ( [ x ] )}
| x = record_field_assign _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RCURLYBRACKET_record_field_assign_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RCURLYBRACKET_typed_idents_:
  x = typed_idents _2 = option_SEMICOLON_ _3 = RCURLYBRACKET
    {                                      ( [ x ] )}
| x = typed_idents _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RCURLYBRACKET_typed_idents_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPARAMBRACKET_node_call_static_param_:
  x = node_call_static_param _2 = option_SEMICOLON_ _3 = RPARAMBRACKET
    {                                      ( [ x ] )}
| x = node_call_static_param _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPARAMBRACKET_node_call_static_param_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPARAMBRACKET_static_param_:
  x = static_param _2 = option_SEMICOLON_ _3 = RPARAMBRACKET
    {                                      ( [ x ] )}
| x = static_param _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPARAMBRACKET_static_param_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPAREN_clocked_typed_idents_:
  x = clocked_typed_idents _2 = option_SEMICOLON_ _3 = RPAREN
    {                                      ( [ x ] )}
| x = clocked_typed_idents _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPAREN_clocked_typed_idents_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPAREN_const_clocked_typed_idents_:
  x = const_clocked_typed_idents _2 = option_SEMICOLON_ _3 = RPAREN
    {                                      ( [ x ] )}
| x = const_clocked_typed_idents _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPAREN_const_clocked_typed_idents_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPAREN_const_typed_idents_:
  x = const_typed_idents _2 = option_SEMICOLON_ _3 = RPAREN
    {                                      ( [ x ] )}
| x = const_typed_idents _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPAREN_const_typed_idents_
    {    ( x :: xs )}

tlist_tail_SEMICOLON_RPAREN_typed_idents_:
  x = typed_idents _2 = option_SEMICOLON_ _3 = RPAREN
    {                                      ( [ x ] )}
| x = typed_idents _2 = SEMICOLON xs = tlist_tail_SEMICOLON_RPAREN_typed_idents_
    {    ( x :: xs )}

tlist_LCURLYBRACKET_SEMICOLON_RCURLYBRACKET_record_field_assign_:
  _1 = LCURLYBRACKET l = tlist_tail_SEMICOLON_RCURLYBRACKET_record_field_assign_
    {                                                   ( l )}
| _1 = LCURLYBRACKET _2 = RCURLYBRACKET
    {                     ( [ ] )}

tlist_LCURLYBRACKET_SEMICOLON_RCURLYBRACKET_typed_idents_:
  _1 = LCURLYBRACKET l = tlist_tail_SEMICOLON_RCURLYBRACKET_typed_idents_
    {                                                   ( l )}
| _1 = LCURLYBRACKET _2 = RCURLYBRACKET
    {                     ( [ ] )}

tlist_LPARAMBRACKET_SEMICOLON_RPARAMBRACKET_node_call_static_param_:
  _1 = LPARAMBRACKET l = tlist_tail_SEMICOLON_RPARAMBRACKET_node_call_static_param_
    {                                                   ( l )}
| _1 = LPARAMBRACKET _2 = RPARAMBRACKET
    {                     ( [ ] )}

tlist_LPARAMBRACKET_SEMICOLON_RPARAMBRACKET_static_param_:
  _1 = LPARAMBRACKET l = tlist_tail_SEMICOLON_RPARAMBRACKET_static_param_
    {                                                   ( l )}
| _1 = LPARAMBRACKET _2 = RPARAMBRACKET
    {                     ( [ ] )}

tlist_LPAREN_SEMICOLON_RPAREN_clocked_typed_idents_:
  _1 = LPAREN l = tlist_tail_SEMICOLON_RPAREN_clocked_typed_idents_
    {                                                   ( l )}
| _1 = LPAREN _2 = RPAREN
    {                     ( [ ] )}

tlist_LPAREN_SEMICOLON_RPAREN_const_clocked_typed_idents_:
  _1 = LPAREN l = tlist_tail_SEMICOLON_RPAREN_const_clocked_typed_idents_
    {                                                   ( l )}
| _1 = LPAREN _2 = RPAREN
    {                     ( [ ] )}

tlist_LPAREN_SEMICOLON_RPAREN_typed_idents_:
  _1 = LPAREN l = tlist_tail_SEMICOLON_RPAREN_typed_idents_
    {                                                   ( l )}
| _1 = LPAREN _2 = RPAREN
    {                     ( [ ] )}

one_index:
  _1 = DOT i = ident
    {let _startpos = _startpos__1_ in
     ( A.FieldIndex (mk_pos _startpos, i) )}
| _1 = LSQBRACKET i = ident _3 = RSQBRACKET
    {let _startpos = _startpos__1_ in
     ( A.VarIndex (mk_pos _startpos, i) )}
| _1 = LSQBRACKET s = NUMERAL _3 = RSQBRACKET
    {let _startpos = _startpos__1_ in
     ( A.NumIndex (mk_pos _startpos, int_of_string s) )}

%%
