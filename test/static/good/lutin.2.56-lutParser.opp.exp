File "lutin.2.56-lutParser.mly", line 210, characters 18-26:
Warning: the token TK_ARROW is unused.
File "lutin.2.56-lutParser.mly", line 238, characters 27-35:
Warning: the token TK_DIESE is unused.
File "lutin.2.56-lutParser.mly", line 192, characters 18-24:
Warning: the token TK_DOT is unused.
File "lutin.2.56-lutParser.mly", line 129, characters 18-26:
Warning: the token TK_ERROR is unused.
File "lutin.2.56-lutParser.mly", line 239, characters 13-21:
Warning: the token TK_FIELD is unused.
File "lutin.2.56-lutParser.mly", line 239, characters 6-12:
Warning: the token TK_HAT is unused.
File "lutin.2.56-lutParser.mly", line 238, characters 36-42:
Warning: the token TK_NOR is unused.
File "lutin.2.56-lutParser.mly", line 235, characters 24-32:
Warning: the token TK_PCENT is unused.
File "lutin.2.56-lutParser.mly", line 156, characters 18-25:
Warning: the token TK_TYPE is unused.
%{
(** SYNTAXE : analyse syntaxique

----------------------------------------------------------------*)
open Lexing
open Lexeme
open Syntaxe
open LutErrors
open Format
open Str


(* init parse *)

let lettab = ref (Hashtbl.create 50)
let nodetab = ref (Hashtbl.create 50)
let excepttab = ref (Hashtbl.create 50)
let deflist    = ref []
let included_files_to_handle = ref []

let add_info
   (htbl   : (string, 'a ) Hashtbl.t)
   (id  : Syntaxe.ident)   (* le lexeme en question        *)
   (info : 'a)         (* l'info en question           *)
= (
   try
      Some (Hashtbl.find htbl id.it)
   with Not_found -> (
      Hashtbl.add htbl id.it info ;
		None
   )
)


let add_except (idl : ident list) = (
  let f id = (
    match (add_info !excepttab id id) with
	None -> deflist := (ExceptDef id)  :: !deflist
      | Some ei -> raise (
	  Compile_error ( id.src ,
			  (sprintf "bad exception declaration, ident already linked %s"
			     (LutErrors.lexeme_line_col ei.src)))
	)
  ) in
    List.iter f idl
)

(* N.B. let et extern sont dans le meme espace de nom
	le seule différence est qu'on tient une liste à part des externes
*)
let add_extern (id : Syntaxe.ident) (ci : let_info) = (
	match ( add_info !lettab id ci) with
	None -> deflist := (ExternDef id) :: !deflist
	| Some mi -> raise (
		Compile_error ( id.src ,
			(sprintf "bad macro declaration, ident already linked %s"
				(LutErrors.lexeme_line_col mi.lti_ident.src))
      )
	)
)

let (add_include : Lexeme.t -> unit) =
  fun file ->
    (* remove '"' from string. *)
    let f = String.sub file.str 1 ((String.length file.str) - 2) in
    included_files_to_handle := (f)::!included_files_to_handle

let add_letdef (id : Syntaxe.ident) (ci : let_info) = (
	match ( add_info !lettab id ci) with
	None -> deflist := (LetDef id) :: !deflist
	| Some mi -> raise (
		Compile_error ( id.src ,
			(sprintf "bad macro declaration, ident already linked %s"
				(LutErrors.lexeme_line_col mi.lti_ident.src))
      )
	)
)

let add_node (id : Syntaxe.ident) (ci : node_info) = (
	match ( add_info !nodetab id ci ) with
	None -> deflist := (NodeDef id) :: !deflist
	| Some ni -> raise (
		Compile_error ( id.src ,
			(sprintf "bad node declaration, ident already linked %s"
				(LutErrors.lexeme_line_col ni.ndi_ident.src))
      )
	)
)

let distrib_type idlst texp = (
	let attach_type id = (id, texp) in
	List.map attach_type idlst
)

let distrib_type_and_init idlst texp range_opt vexp = (
	let attach_type id = (id, texp, vexp, range_opt) in
	List.map attach_type idlst
)

let parse_end () = (
   let res = {
      pck_lettab = !lettab;
      pck_nodetab  = !nodetab;
      pck_excepttab  = !excepttab;
      pck_deflist  = (List.rev !deflist);
      pck_included_files_to_handle = !included_files_to_handle
   } in
   lettab := Hashtbl.create 50;
   nodetab := Hashtbl.create 50;
   deflist := [];
   res
)

let ident_of_token lxm = (
	Lexeme.flagit lxm.str lxm
)

let make_val_exp ven lxm = {
	it = ven;
	src = lxm
}


%}
%start lutFileTop
%token <Lexeme.t> TK_AND
%token <Lexeme.t> TK_ARROW
%token <Lexeme.t> TK_ASSERT
%token <Lexeme.t> TK_ASSIGN
%token <Lexeme.t> TK_BAR
%token <Lexeme.t> TK_BARSUP
%token <Lexeme.t> TK_BOOL
%token <Lexeme.t> TK_CATCH
%token <Lexeme.t> TK_CLOSE_BRACE
%token <Lexeme.t> TK_CLOSE_BRACKET
%token <Lexeme.t> TK_CLOSE_PAR
%token <Lexeme.t> TK_COLON
%token <Lexeme.t> TK_COMA
%token <Lexeme.t> TK_DIV
%token <Lexeme.t> TK_DO
%token <Lexeme.t> TK_DOT
%token <Lexeme.t> TK_ELSE
%token TK_EOF
%token <Lexeme.t> TK_EQ
%token <Lexeme.t> TK_ERROR
%token <Lexeme.t> TK_ERUN
%token <Lexeme.t> TK_EXCEPTION
%token <Lexeme.t> TK_EXIST
%token <Lexeme.t> TK_EXTERN
%token <Lexeme.t> TK_FALSE
%token <Lexeme.t> TK_FBY
%token <Lexeme.t> TK_GT
%token <Lexeme.t> TK_GTE
%token <Lexeme.t> TK_ICONST
%token <Lexeme.t> TK_IDENT
%token <Lexeme.t> TK_IF
%token <Lexeme.t> TK_IMPL
%token <Lexeme.t> TK_IN
%token <Lexeme.t> TK_INCLUDE
%token <Lexeme.t> TK_INT
%token <Lexeme.t> TK_LET
%token <Lexeme.t> TK_LOOP
%token <Lexeme.t> TK_LT
%token <Lexeme.t> TK_LTE
%token <Lexeme.t> TK_MINUS
%token <Lexeme.t> TK_MOD
%token <Lexeme.t> TK_NEQ
%token <Lexeme.t> TK_NODE
%token <Lexeme.t> TK_NOT
%token <Lexeme.t> TK_OPEN_BRACE
%token <Lexeme.t> TK_OPEN_BRACKET
%token <Lexeme.t> TK_OPEN_PAR
%token <Lexeme.t> TK_OR
%token <Lexeme.t> TK_PARA
%token <Lexeme.t> TK_PLUS
%token <Lexeme.t> TK_PRE
%token <Lexeme.t> TK_RAISE
%token <Lexeme.t> TK_RCONST
%token <Lexeme.t> TK_REAL
%token <Lexeme.t> TK_REF
%token <Lexeme.t> TK_RETURNS
%token <Lexeme.t> TK_RUN
%token <Lexeme.t> TK_SEMICOL
%token <Lexeme.t> TK_SLASH
%token <Lexeme.t> TK_STRING
%token <Lexeme.t> TK_STRONG
%token <Lexeme.t> TK_SYSTEM
%token <Lexeme.t> TK_THEN
%token <Lexeme.t> TK_TILDA
%token <Lexeme.t> TK_TIMES
%token <Lexeme.t> TK_TRACE
%token <Lexeme.t> TK_TRAP
%token <Lexeme.t> TK_TRUE
%token <Lexeme.t> TK_TRY
%token <Lexeme.t> TK_TYPE
%token <Lexeme.t> TK_WEAK
%token <Lexeme.t> TK_XOR
%nonassoc TK_IN TK_TRY
%left NO_DO_PART
%nonassoc TK_DO
%left TK_FBY
%nonassoc TK_LOOP
%left TK_ELSE
%nonassoc TK_IMPL
%left TK_OR
%left TK_XOR
%left TK_AND
%left TK_EQ TK_NEQ
%left TK_GT TK_GTE TK_LT TK_LTE
%left TK_MINUS TK_PLUS
%left TK_DIV TK_MOD TK_PCENT TK_SLASH TK_TIMES
%nonassoc TK_NOT
%nonassoc TK_INT TK_REAL
%nonassoc TK_DIESE TK_NOR TK_PRE TK_UMINUS
%left TK_DOT TK_FIELD TK_HAT
%nonassoc HACK_CALL
%nonassoc HACK_ID
%nonassoc TK_OPEN_PAR
%type <Syntaxe.package> lutFileTop
%%

lutFileTop:
  _1 = lutFile _2 = TK_EOF
    {   ( parse_end () )}

lutFile:
  
    {   ( )}
| _1 = lutFile _2 = lutOneDecl
    {   ( )}

lutInclude:
  _1 = TK_INCLUDE _2 = TK_STRING
    {            ( _2 )}

lutOneDecl:
  _1 = lutInclude
    {  ( add_include _1 )}
| _1 = lutLetDecl
    {  ( add_letdef (fst _1) (snd _1) )}
| _1 = lutExceptDecl
    {  ( add_except _1 )}
| _1 = lutExternNodeDecl
    {  ( add_extern (fst _1) (snd _1) )}
| _1 = lutNodeDecl
    {  ( add_node (fst _1) (snd _1) )}

lutExceptDecl:
  _1 = TK_EXCEPTION _2 = lutIdentList
    {   ( List.rev _2 )}

lutLetDecl:
  _1 = TK_LET _2 = lutIdent _3 = lutOptParams _4 = lutOptType _5 = TK_EQ _6 = lutTraceExp
    {  (
	  (* let id = ident_of_token $2 in *)
	  let id = _2 in
	  ( id,
		  {
			  lti_ident = id;
			  lti_inputs = _3;
			  lti_type = _4;
			  lti_def = Some _6;
		  }
	  )
  )}

lutExternNodeDecl:
  _1 = TK_EXTERN _2 = lutIdent _3 = lutOptParams _4 = lutOptType
    {  (
	  (* let id = ident_of_token $2 in *)
	  let id = _2 in
	  ( id,
		  {
			  lti_ident = id;
			  lti_inputs = _3;
			  lti_type = _4;
			  lti_def = None;
		  }
	  )
  )}

lutNodeStart:
  _1 = TK_NODE
    {  ()}
| _1 = TK_SYSTEM
    {  ()}

lutNodeDecl:
  _1 = lutNodeStart _2 = lutIdent _3 = TK_OPEN_PAR _4 = lutTypedIdentListOpt _5 = TK_CLOSE_PAR _6 = TK_RETURNS _7 = TK_OPEN_PAR _8 = lutTypedIdentList _9 = TK_CLOSE_PAR _10 = TK_EQ _11 = lutTraceExp
    { (
		(* let id = ident_of_token $2 in *)
		let id = _2 in
		(id,
			{
				ndi_ident = id;
				ndi_inputs = List.rev _4;
				ndi_outputs = List.rev _8;
				ndi_def = _11
			}
		)
	)}

lutIdent:
  _1 = TK_IDENT
    {  ( ident_of_token _1 )}

lutIdentList:
  _1 = lutIdent
    {   ( [_1] )}
| _1 = lutIdentList _2 = TK_COMA _3 = lutIdent
    {   ( _3::_1 )}

lutIdentTuple:
  _1 = lutIdentList
    {  ( List.rev _1 )}
| _1 = TK_OPEN_PAR _2 = lutIdentList _3 = TK_CLOSE_PAR
    {  ( List.rev _2 )}

lutERunVars:
  _1 = TK_OPEN_PAR _2 = lutERunVarList _3 = TK_CLOSE_PAR
    {  ( _2 )}
| _1 = lutERunVarList
    {  ( _1 )}

lutERunVarList:
  _1 = lutERunVar
    {  ( [_1] )}
| _1 = lutERunVarList _2 = TK_COMA _3 = lutERunVar
    {  ( _3::_1 )}

lutRangeOpt:
  
    { ( None )}
| _1 = TK_OPEN_BRACKET _2 = lutExp _3 = TK_SEMICOL _4 = lutExp _5 = TK_CLOSE_BRACKET
    { ( Some(_2,_4) )}

lutTypedIdent:
  _1 = lutIdentList _2 = TK_COLON _3 = lutType _4 = lutRangeOpt
    {  ( distrib_type_and_init _1 _3 _4  None)}
| _1 = lutIdentList _2 = TK_COLON _3 = lutType _4 = lutRangeOpt _5 = TK_EQ _6 = lutExp
    {  ( distrib_type_and_init _1 _3 _4 (Some _6) )}

lutTypedIdentListOpt:
  
    {   ( [] )}
| _1 = lutTypedIdentList
    {   ( _1 )}

lutTypedIdentList:
  _1 = lutTypedIdentListA
    {   ( _1 )}
| _1 = lutTypedIdentListA _2 = TK_SEMICOL
    {   ( _1 )}

lutTypedIdentListA:
  _1 = lutTypedIdent
    {   ( _1 )}
| _1 = lutTypedIdentListA _2 = TK_SEMICOL _3 = lutTypedIdent
    {   ( _3@_1 )}

lutOptParams:
  
    {   ( None )}
| _1 = TK_OPEN_PAR _2 = TK_CLOSE_PAR
    {   ( Some [] )}
| _1 = TK_OPEN_PAR _2 = lutTypedParamList _3 = TK_CLOSE_PAR
    {  ( Some (List.rev _2) )}

lutTypedParamList:
  _1 = lutTypedParam
    { ( _1 )}
| _1 = lutTypedParamList _2 = TK_SEMICOL _3 = lutTypedParam
    { ( _3@_1 )}

lutTypedParam:
  _1 = lutIdentList _2 = TK_COLON _3 = lutParamType
    { ( distrib_type _1 _3)}

lutERunVar:
  _1 = lutIdent _2 = lutOptType _3 = lutOptInit
    {  ( (_1, _2, _3) )}

lutOptInit:
  
    {  ( None )}
| _1 = TK_EQ _2 = lutExp
    {  ( Some _2 )}

lutOptType:
  
    { ( None )}
| _1 = TK_COLON _2 = lutType
    { ( Some _2 )}

lutType:
  _1 = lutPredefType
    {  (TEXP_predef _1)}
| _1 = TK_TRACE
    {  ( (TEXP_trace) )}

lutPredefType:
  _1 = TK_BOOL
    {   ( Bool )}
| _1 = TK_INT
    {   ( Int )}
| _1 = TK_REAL
    {   ( Real )}

lutParamType:
  _1 = lutType
    {  (_1)}
| _1 = lutPredefType _2 = TK_REF
    {  (TEXP_ref _1)}

lutAssertFlag:
  _1 = TK_STRONG
    {  ( Strong )}
| _1 = TK_WEAK
    {  ( Weak )}
| 
    {  ( Weak )}

lutTraceExp:
  _1 = lutExp
    {   ( _1 )}
| _1 = TK_RAISE _2 = lutIdent
    {   ( make_val_exp (RAISE_n _2) _1 )}
| _1 = lutTraceExp _2 = TK_FBY _3 = lutTraceExp
    {   ( make_val_exp (FBY_n (_1,_3)) _2)}
| _1 = lutLoopExp
    {   ( _1 )}
| _1 = lutLoopStatExp
    {   ( _1 )}
| _1 = lutBraceExp
    {   ( _1 )}
| _1 = lutLetDecl _2 = TK_IN _3 = lutTraceExp
    {   ( make_val_exp (LET_n (snd _1,_3)) ((fst _1).src) )}
| _1 = lutAssertFlag _2 = TK_ASSERT _3 = lutExp _4 = TK_IN _5 = lutTraceExp
    {   ( make_val_exp (ASSERT_n (_1,_3,_5)) _2 )}
| _1 = TK_ERUN _2 = lutERunVars _3 = TK_ASSIGN _4 = lutExp _5 = TK_IN _6 = lutTraceExp
    {   ( make_val_exp (ERUN_n (List.rev _2, _4, _6)) _1 )}
| _1 = TK_RUN _2 = lutIdentTuple _3 = TK_ASSIGN _4 = lutExp _5 = TK_IN _6 = lutTraceExp
    {   ( make_val_exp (RUN_n (_2, _4, Some _6)) _1 )}
| _1 = TK_RUN _2 = lutIdentTuple _3 = TK_ASSIGN _4 = lutExp
    {   ( make_val_exp (RUN_n (_2, _4, None)) _1 )}
| _1 = TK_EXIST _2 = lutTypedIdentList _3 = TK_IN _4 = lutTraceExp
    {   ( make_val_exp (EXIST_n (List.rev _2,_4)) _1 )}
| _1 = TK_EXCEPTION _2 = lutIdentList _3 = TK_IN _4 = lutTraceExp
    {   ( make_val_exp (EXCEPT_n (List.rev _2,_4)) _1 )}
| _1 = TK_TRY _2 = lutTraceExp _3 = lutDoPart
    {   ( make_val_exp (TRY_n (_2,_3)) _1 )}
| _1 = TK_CATCH _2 = lutIdent _3 = TK_IN _4 = lutTraceExp _5 = lutDoPart
    {   ( make_val_exp (CATCH_n(_2,_4, _5)) _1)}
| _1 = TK_TRAP _2 = lutIdent _3 = TK_IN _4 = lutTraceExp _5 = lutDoPart
    {   ( make_val_exp (TRAP_n(_2,_4,_5)) _1)}

lutDoPart:
   %prec NO_DO_PART
    {  ( None )}
| _1 = TK_DO _2 = lutTraceExp
    {  ( Some _2 )}

lutLoopExp:
  _1 = TK_LOOP _2 = lutTraceExp
    {  (  make_val_exp (LOOP_n (Weak,_2)) _1 )}
| _1 = TK_STRONG _2 = TK_LOOP _3 = lutTraceExp
    {  (  make_val_exp (LOOP_n (Strong,_3)) _2 )}
| _1 = TK_WEAK _2 = TK_LOOP _3 = lutTraceExp
    {  (  make_val_exp (LOOP_n (Weak,_3)) _2 )}

lutLoopStatExp:
  _1 = TK_LOOP _2 = lutAverage _3 = lutTraceExp
    {   ( make_val_exp (LOOPI_n (fst _2, snd _2, _3)) _1 )}
| _1 = TK_LOOP _2 = lutGaussian _3 = lutTraceExp
    {   ( make_val_exp (LOOPA_n (fst _2, snd _2, _3)) _1 )}

lutAverage:
  _1 = TK_OPEN_BRACKET _2 = lutExp _3 = TK_CLOSE_BRACKET
    {  ( (_2, _2) )}
| _1 = TK_OPEN_BRACKET _2 = lutExp _3 = TK_COMA _4 = lutExp _5 = TK_CLOSE_BRACKET
    {  ( (_2, _4) )}

lutGaussian:
  _1 = TK_TILDA _2 = lutExp %prec TK_NOT
    {  ( (_2, None) )}
| _1 = TK_TILDA _2 = lutExp _3 = TK_COLON _4 = lutExp %prec TK_NOT
    {  ( (_2, Some _4) )}

lutChoice:
  _1 = TK_BAR _2 = lutTraceExp
    {   ( [ (_2, None) ] )}
| _1 = TK_BAR _2 = lutExp _3 = TK_COLON _4 = lutTraceExp
    {   ( let w = Some {it = _2; src = _3} in [ (_4, w) ] )}
| _1 = lutChoice _2 = TK_BAR _3 = lutTraceExp
    {   ( (_3, None)::_1 )}
| _1 = lutChoice _2 = TK_BAR _3 = lutExp _4 = TK_COLON _5 = lutTraceExp
    {   ( let w = Some {it = _3; src = _4} in (_5,w)::_1 )}

lutPrio:
  _1 = TK_BARSUP _2 = lutTraceExp
    {   ( [ _2 ] )}
| _1 = lutPrio _2 = TK_BARSUP _3 = lutTraceExp
    {   ( _3::_1 )}

lutPara:
  _1 = TK_PARA _2 = lutTraceExp
    {   ( [ _2 ] )}
| _1 = lutPara _2 = TK_PARA _3 = lutTraceExp
    {   ( _3::_1 )}

lutBraceExp:
  _1 = TK_OPEN_BRACE _2 = lutTraceExp _3 = TK_CLOSE_BRACE
    {  ( _2 )}
| _1 = TK_OPEN_BRACE _2 = lutPrio _3 = TK_CLOSE_BRACE
    {  (
			let args = (List.rev _2) in
			make_val_exp (PRIO_n args) _1
		)}
| _1 = TK_OPEN_BRACE _2 = lutTraceExp _3 = lutPrio _4 = TK_CLOSE_BRACE
    {  (
			let args = _2::(List.rev _3) in
			make_val_exp (PRIO_n args) _1
		)}
| _1 = TK_OPEN_BRACE _2 = lutChoice _3 = TK_CLOSE_BRACE
    {  (
			let args = (List.rev _2) in
			make_val_exp (CHOICE_n args) _1
		)}
| _1 = TK_OPEN_BRACE _2 = lutTraceExp _3 = lutChoice _4 = TK_CLOSE_BRACE
    {  (
			let args = (_2,None)::(List.rev _3) in
			make_val_exp (CHOICE_n args) _1
		)}
| _1 = TK_OPEN_BRACE _2 = lutPara _3 = TK_CLOSE_BRACE
    {  (
			let args = (List.rev _2) in
			make_val_exp (PARA_n args) _1
		)}
| _1 = TK_OPEN_BRACE _2 = lutTraceExp _3 = lutPara _4 = TK_CLOSE_BRACE
    {  (
			let args = _2::(List.rev _3) in
			make_val_exp (PARA_n args) _1
		)}

lutExp:
  _1 = lutConst
    {           ( _1 )}
| _1 = lutIdentRef
    {               ( _1 )}
| _1 = TK_PRE _2 = lutIdent
    {                   ( make_val_exp (PRE_n _2) _1 )}
| _1 = TK_OPEN_PAR _2 = lutExp _3 = TK_CLOSE_PAR
    {                                   ( _2 )}
| _1 = lutUnExp
    {            ( _1 )}
| _1 = lutBinExp
    {             ( _1 )}
| _1 = TK_IF _2 = lutExp _3 = TK_THEN _4 = lutExp _5 = TK_ELSE _6 = lutExp
    {   ( make_val_exp (CALL_n (flagit "ite" _1, [_2;_4;_6])) _1 )}

lutUnExp:
  _1 = TK_MINUS _2 = lutExp %prec TK_UMINUS
    {                                  ( make_val_exp (CALL_n (flagit "uminus" _1, [_2])) _1 )}
| _1 = TK_NOT _2 = lutExp
    {                 ( make_val_exp (CALL_n (flagit "not" _1, [_2])) _1 )}

lutBinExp:
  _1 = lutExp _2 = TK_EQ _3 = lutExp
    {                      ( make_val_exp (CALL_n (flagit "eq" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_NEQ _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "neq" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_OR _3 = lutExp
    {                       ( make_val_exp (CALL_n (flagit "or" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_XOR _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "xor" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_AND _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "and" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_IMPL _3 = lutExp
    {                         ( make_val_exp (CALL_n (flagit "impl" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_PLUS _3 = lutExp
    {                         ( make_val_exp (CALL_n (flagit "plus" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_MINUS _3 = lutExp
    {                          ( make_val_exp (CALL_n (flagit "minus" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_TIMES _3 = lutExp
    {                          ( make_val_exp (CALL_n (flagit "times" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_SLASH _3 = lutExp
    {                          ( make_val_exp (CALL_n (flagit "slash" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_DIV _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "div" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_MOD _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "mod" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_LT _3 = lutExp
    {                       ( make_val_exp (CALL_n (flagit "lt" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_LTE _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "lte" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_GT _3 = lutExp
    {                       ( make_val_exp (CALL_n (flagit "gt" _2, [_1;_3])) _2 )}
| _1 = lutExp _2 = TK_GTE _3 = lutExp
    {                        ( make_val_exp (CALL_n (flagit "gte" _2, [_1;_3])) _2 )}

lutInteger:
  _1 = TK_ICONST
    {  ( make_val_exp (ICONST_n (ident_of_token _1)) _1 )}

lutFloating:
  _1 = TK_RCONST
    {  ( make_val_exp (RCONST_n (ident_of_token _1)) _1 )}

lutConst:
  _1 = TK_TRUE
    {  ( make_val_exp TRUE_n _1 )}
| _1 = TK_FALSE
    {  ( make_val_exp FALSE_n _1)}
| _1 = lutInteger
    {  ( _1 )}
| _1 = lutFloating
    {  ( _1 )}

lutIdentRef:
  _1 = lutIdent %prec HACK_ID
    {   ( make_val_exp (IDENT_n _1) _1.src )}
| _1 = lutIdent _2 = TK_OPEN_PAR _3 = TK_CLOSE_PAR %prec HACK_CALL
    {   ( make_val_exp (CALL_n (_1, [])) _1.src )}
| _1 = lutIdent _2 = TK_OPEN_PAR _3 = lutArgList _4 = TK_CLOSE_PAR %prec HACK_CALL
    {   ( make_val_exp (CALL_n (_1, List.rev _3)) _1.src )}

lutArgList:
  _1 = lutArg
    {   ( [_1] )}
| _1 = lutArgList _2 = TK_COMA _3 = lutArg
    {   ( _3::_1 )}

lutArg:
  _1 = lutTraceExp
    {  ( _1 )}

%%
