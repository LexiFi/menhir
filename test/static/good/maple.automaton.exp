State 0:
program' -> . program [ # ]
-- On statseq shift to state 1
-- On program shift to state 214
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On EOF reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 1:
program -> statseq . EOF [ # ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON EOF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON EOF COLON ]
-- On SEMICOLON shift to state 2
-- On EOF shift to state 213
-- On COLON shift to state 129

State 2:
statseq -> statseq SEMICOLON . comments stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On comments shift to state 3
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On FI reduce production comments -> 
-- On EOF reduce production comments -> 
-- On END reduce production comments -> 
-- On ELSE reduce production comments -> 
-- On ELIF reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 3:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> statseq SEMICOLON comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 212
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
-- On SEMICOLON reduce production stat -> 
-- On OD reduce production stat -> 
-- On FI reduce production stat -> 
-- On EOF reduce production stat -> 
-- On END reduce production stat -> 
-- On ELSE reduce production stat -> 
-- On ELIF reduce production stat -> 
-- On COMMA reduce production nameseq -> 
-- On COLON reduce production stat -> 
-- On ASSIGN reduce production nameseq -> 

State 4:
for_body -> WHILE . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 208

State 5:
expr -> SUBTRACT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 207

State 6:
expr -> STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> STRING 
-- On UNION reduce production expr -> STRING 
-- On TO reduce production expr -> STRING 
-- On THEN reduce production expr -> STRING 
-- On SUBTRACT reduce production expr -> STRING 
-- On SLASH reduce production expr -> STRING 
-- On SEQ reduce production expr -> STRING 
-- On SEMICOLON reduce production expr -> STRING 
-- On RPAREN reduce production expr -> STRING 
-- On REPEAT_COMPOSE reduce production expr -> STRING 
-- On RBRACK reduce production expr -> STRING 
-- On RBRACE reduce production expr -> STRING 
-- On QUOTE reduce production expr -> STRING 
-- On PLUS reduce production expr -> STRING 
-- On OR reduce production expr -> STRING 
-- On OD reduce production expr -> STRING 
-- On NE reduce production expr -> STRING 
-- On MULT reduce production expr -> STRING 
-- On MOD reduce production expr -> STRING 
-- On MINUS reduce production expr -> STRING 
-- On LT reduce production expr -> STRING 
-- On LE reduce production expr -> STRING 
-- On INTERSECT reduce production expr -> STRING 
-- On GT reduce production expr -> STRING 
-- On GE reduce production expr -> STRING 
-- On FI reduce production expr -> STRING 
-- On EXP reduce production expr -> STRING 
-- On EXCLAM reduce production expr -> STRING 
-- On EQUAL reduce production expr -> STRING 
-- On EOF reduce production expr -> STRING 
-- On END reduce production expr -> STRING 
-- On ELSE reduce production expr -> STRING 
-- On ELLIPSE reduce production expr -> STRING 
-- On ELIF reduce production expr -> STRING 
-- On DO reduce production expr -> STRING 
-- On COMMA reduce production expr -> STRING 
-- On COLON reduce production expr -> STRING 
-- On CARET reduce production expr -> STRING 
-- On BY reduce production expr -> STRING 
-- On AT reduce production expr -> STRING 
-- On ARROW reduce production expr -> STRING 
-- On AND reduce production expr -> STRING 
-- On AMPOP reduce production expr -> STRING 
-- On AMPMUL reduce production expr -> STRING 

State 7:
expr -> SEQ . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 206

State 8:
name_string -> QUOTED_STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name_string -> QUOTED_STRING 
-- On UNION reduce production name_string -> QUOTED_STRING 
-- On TO reduce production name_string -> QUOTED_STRING 
-- On THEN reduce production name_string -> QUOTED_STRING 
-- On SUBTRACT reduce production name_string -> QUOTED_STRING 
-- On SLASH reduce production name_string -> QUOTED_STRING 
-- On SEQ reduce production name_string -> QUOTED_STRING 
-- On SEMICOLON reduce production name_string -> QUOTED_STRING 
-- On RPAREN reduce production name_string -> QUOTED_STRING 
-- On REPEAT_COMPOSE reduce production name_string -> QUOTED_STRING 
-- On RBRACK reduce production name_string -> QUOTED_STRING 
-- On RBRACE reduce production name_string -> QUOTED_STRING 
-- On QUOTE reduce production name_string -> QUOTED_STRING 
-- On PLUS reduce production name_string -> QUOTED_STRING 
-- On OR reduce production name_string -> QUOTED_STRING 
-- On OD reduce production name_string -> QUOTED_STRING 
-- On NE reduce production name_string -> QUOTED_STRING 
-- On MULT reduce production name_string -> QUOTED_STRING 
-- On MOD reduce production name_string -> QUOTED_STRING 
-- On MINUS reduce production name_string -> QUOTED_STRING 
-- On LT reduce production name_string -> QUOTED_STRING 
-- On LPAREN reduce production name_string -> QUOTED_STRING 
-- On LE reduce production name_string -> QUOTED_STRING 
-- On LBRACK reduce production name_string -> QUOTED_STRING 
-- On INTERSECT reduce production name_string -> QUOTED_STRING 
-- On IN reduce production name_string -> QUOTED_STRING 
-- On GT reduce production name_string -> QUOTED_STRING 
-- On GE reduce production name_string -> QUOTED_STRING 
-- On FROM reduce production name_string -> QUOTED_STRING 
-- On FI reduce production name_string -> QUOTED_STRING 
-- On EXP reduce production name_string -> QUOTED_STRING 
-- On EXCLAM reduce production name_string -> QUOTED_STRING 
-- On EQUAL reduce production name_string -> QUOTED_STRING 
-- On EOF reduce production name_string -> QUOTED_STRING 
-- On END reduce production name_string -> QUOTED_STRING 
-- On ELSE reduce production name_string -> QUOTED_STRING 
-- On ELLIPSE reduce production name_string -> QUOTED_STRING 
-- On ELIF reduce production name_string -> QUOTED_STRING 
-- On DOUBLE_COLON reduce production name_string -> QUOTED_STRING 
-- On DOT reduce production name_string -> QUOTED_STRING 
-- On DO reduce production name_string -> QUOTED_STRING 
-- On COMMA reduce production name_string -> QUOTED_STRING 
-- On COLON reduce production name_string -> QUOTED_STRING 
-- On CARET reduce production name_string -> QUOTED_STRING 
-- On BY reduce production name_string -> QUOTED_STRING 
-- On AT reduce production name_string -> QUOTED_STRING 
-- On ASSIGN reduce production name_string -> QUOTED_STRING 
-- On ARROW reduce production name_string -> QUOTED_STRING 
-- On AND reduce production name_string -> QUOTED_STRING 
-- On AMPOP reduce production name_string -> QUOTED_STRING 
-- On AMPMUL reduce production name_string -> QUOTED_STRING 

State 9:
expr -> QUOTE . expr QUOTE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 204

State 10:
expr -> PROC . LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On LPAREN shift to state 11

State 11:
expr -> PROC LPAREN . parmseq RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On parmseq shift to state 13
-- On oneparm shift to state 203
-- On name_string shift to state 23
-- On name shift to state 200
-- On RPAREN reduce production parmseq -> 
-- On COMMA reduce production parmseq -> 

State 12:
name_string -> ID . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name_string -> ID 
-- On UNION reduce production name_string -> ID 
-- On TO reduce production name_string -> ID 
-- On THEN reduce production name_string -> ID 
-- On SUBTRACT reduce production name_string -> ID 
-- On SLASH reduce production name_string -> ID 
-- On SEQ reduce production name_string -> ID 
-- On SEMICOLON reduce production name_string -> ID 
-- On RPAREN reduce production name_string -> ID 
-- On REPEAT_COMPOSE reduce production name_string -> ID 
-- On RBRACK reduce production name_string -> ID 
-- On RBRACE reduce production name_string -> ID 
-- On QUOTE reduce production name_string -> ID 
-- On PLUS reduce production name_string -> ID 
-- On OR reduce production name_string -> ID 
-- On OD reduce production name_string -> ID 
-- On NE reduce production name_string -> ID 
-- On MULT reduce production name_string -> ID 
-- On MOD reduce production name_string -> ID 
-- On MINUS reduce production name_string -> ID 
-- On LT reduce production name_string -> ID 
-- On LPAREN reduce production name_string -> ID 
-- On LE reduce production name_string -> ID 
-- On LBRACK reduce production name_string -> ID 
-- On INTERSECT reduce production name_string -> ID 
-- On IN reduce production name_string -> ID 
-- On GT reduce production name_string -> ID 
-- On GE reduce production name_string -> ID 
-- On FROM reduce production name_string -> ID 
-- On FI reduce production name_string -> ID 
-- On EXP reduce production name_string -> ID 
-- On EXCLAM reduce production name_string -> ID 
-- On EQUAL reduce production name_string -> ID 
-- On EOF reduce production name_string -> ID 
-- On END reduce production name_string -> ID 
-- On ELSE reduce production name_string -> ID 
-- On ELLIPSE reduce production name_string -> ID 
-- On ELIF reduce production name_string -> ID 
-- On DOUBLE_COLON reduce production name_string -> ID 
-- On DOT reduce production name_string -> ID 
-- On DO reduce production name_string -> ID 
-- On COMMA reduce production name_string -> ID 
-- On COLON reduce production name_string -> ID 
-- On CARET reduce production name_string -> ID 
-- On BY reduce production name_string -> ID 
-- On AT reduce production name_string -> ID 
-- On ASSIGN reduce production name_string -> ID 
-- On ARROW reduce production name_string -> ID 
-- On AND reduce production name_string -> ID 
-- On AMPOP reduce production name_string -> ID 
-- On AMPMUL reduce production name_string -> ID 

State 13:
expr -> PROC LPAREN parmseq . RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
parmseq -> parmseq . COMMA oneparm [ RPAREN COMMA ]
-- On RPAREN shift to state 14
-- On COMMA shift to state 198

State 14:
expr -> PROC LPAREN parmseq RPAREN . result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On DOUBLE_COLON shift to state 15
-- On result_type shift to state 18
-- On WHILE reduce production result_type -> 
-- On TO reduce production result_type -> 
-- On SUBTRACT reduce production result_type -> 
-- On STRING reduce production result_type -> 
-- On STOP reduce production result_type -> 
-- On SEQ reduce production result_type -> 
-- On SEMICOLON reduce production result_type -> 
-- On SAVE reduce production result_type -> 
-- On READ reduce production result_type -> 
-- On QUOTED_STRING reduce production result_type -> 
-- On QUOTE reduce production result_type -> 
-- On QUIT reduce production result_type -> 
-- On PROC reduce production result_type -> 
-- On PLUS reduce production result_type -> 
-- On OPTION reduce production result_type -> 
-- On NOT reduce production result_type -> 
-- On LPAREN reduce production result_type -> 
-- On LOCAL reduce production result_type -> 
-- On LBRACK reduce production result_type -> 
-- On LBRACE reduce production result_type -> 
-- On INT reduce production result_type -> 
-- On IF reduce production result_type -> 
-- On ID reduce production result_type -> 
-- On GLOBAL reduce production result_type -> 
-- On FROM reduce production result_type -> 
-- On FOR reduce production result_type -> 
-- On END reduce production result_type -> 
-- On DOT reduce production result_type -> 
-- On DO reduce production result_type -> 
-- On COMMENT reduce production result_type -> 
-- On COMMA reduce production result_type -> 
-- On COLON reduce production result_type -> 
-- On BY reduce production result_type -> 
-- On ASSIGN reduce production result_type -> 

State 15:
result_type -> DOUBLE_COLON . name_string SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 16

State 16:
result_type -> DOUBLE_COLON name_string . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On SEMICOLON shift to state 17

State 17:
result_type -> DOUBLE_COLON name_string SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On TO reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On SUBTRACT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On STRING reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On STOP reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On SEQ reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On SEMICOLON reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On SAVE reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On READ reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On QUOTED_STRING reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On QUOTE reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On QUIT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On PROC reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On PLUS reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On OPTION reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On NOT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On LPAREN reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On LOCAL reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On LBRACK reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On LBRACE reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On INT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On IF reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On ID reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On GLOBAL reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On FROM reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On FOR reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On END reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On DOT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On DO reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On COMMENT reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On COMMA reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On COLON reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On BY reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 
-- On ASSIGN reduce production result_type -> DOUBLE_COLON name_string SEMICOLON 

State 18:
expr -> PROC LPAREN parmseq RPAREN result_type . decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On LOCAL shift to state 19
-- On GLOBAL shift to state 115
-- On locals_of_proc shift to state 118
-- On globals_of_proc shift to state 120
-- On decls_proc shift to state 122
-- On WHILE reduce production decls_proc -> 
-- On TO reduce production decls_proc -> 
-- On SUBTRACT reduce production decls_proc -> 
-- On STRING reduce production decls_proc -> 
-- On STOP reduce production decls_proc -> 
-- On SEQ reduce production decls_proc -> 
-- On SEMICOLON reduce production decls_proc -> 
-- On SAVE reduce production decls_proc -> 
-- On READ reduce production decls_proc -> 
-- On QUOTED_STRING reduce production decls_proc -> 
-- On QUOTE reduce production decls_proc -> 
-- On QUIT reduce production decls_proc -> 
-- On PROC reduce production decls_proc -> 
-- On PLUS reduce production decls_proc -> 
-- On OPTION reduce production decls_proc -> 
-- On NOT reduce production decls_proc -> 
-- On LPAREN reduce production decls_proc -> 
-- On LBRACK reduce production decls_proc -> 
-- On LBRACE reduce production decls_proc -> 
-- On INT reduce production decls_proc -> 
-- On IF reduce production decls_proc -> 
-- On ID reduce production decls_proc -> 
-- On FROM reduce production decls_proc -> 
-- On FOR reduce production decls_proc -> 
-- On END reduce production decls_proc -> 
-- On DOT reduce production decls_proc -> 
-- On DO reduce production decls_proc -> 
-- On COMMENT reduce production decls_proc -> 
-- On COMMA reduce production decls_proc -> 
-- On COLON reduce production decls_proc -> 
-- On BY reduce production decls_proc -> 
-- On ASSIGN reduce production decls_proc -> 

State 19:
locals_of_proc -> LOCAL . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 20
-- On name_string shift to state 23
-- On name shift to state 114
-- On SEMICOLON reduce production nameseq -> 
-- On COMMA reduce production nameseq -> 

State 20:
locals_of_proc -> LOCAL nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
-- On SEMICOLON shift to state 21
-- On COMMA shift to state 22

State 21:
locals_of_proc -> LOCAL nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On TO reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On SUBTRACT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On STRING reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On STOP reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On SEQ reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On SEMICOLON reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On SAVE reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On READ reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On QUOTED_STRING reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On QUOTE reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On QUIT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On PROC reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On PLUS reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On OPTION reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On NOT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On LPAREN reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On LBRACK reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On LBRACE reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On INT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On IF reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On ID reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On GLOBAL reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On FROM reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On FOR reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On END reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On DOT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On DO reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On COMMENT reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On COMMA reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On COLON reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On BY reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 
-- On ASSIGN reduce production locals_of_proc -> LOCAL nameseq SEMICOLON 

State 22:
nameseq -> nameseq COMMA . name [ SEMICOLON COMMA ASSIGN ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 23
-- On name shift to state 24

State 23:
name -> name_string . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name -> name_string 
-- On UNION reduce production name -> name_string 
-- On TO reduce production name -> name_string 
-- On THEN reduce production name -> name_string 
-- On SUBTRACT reduce production name -> name_string 
-- On SLASH reduce production name -> name_string 
-- On SEQ reduce production name -> name_string 
-- On SEMICOLON reduce production name -> name_string 
-- On RPAREN reduce production name -> name_string 
-- On REPEAT_COMPOSE reduce production name -> name_string 
-- On RBRACK reduce production name -> name_string 
-- On RBRACE reduce production name -> name_string 
-- On QUOTE reduce production name -> name_string 
-- On PLUS reduce production name -> name_string 
-- On OR reduce production name -> name_string 
-- On OD reduce production name -> name_string 
-- On NE reduce production name -> name_string 
-- On MULT reduce production name -> name_string 
-- On MOD reduce production name -> name_string 
-- On MINUS reduce production name -> name_string 
-- On LT reduce production name -> name_string 
-- On LPAREN reduce production name -> name_string 
-- On LE reduce production name -> name_string 
-- On LBRACK reduce production name -> name_string 
-- On INTERSECT reduce production name -> name_string 
-- On IN reduce production name -> name_string 
-- On GT reduce production name -> name_string 
-- On GE reduce production name -> name_string 
-- On FROM reduce production name -> name_string 
-- On FI reduce production name -> name_string 
-- On EXP reduce production name -> name_string 
-- On EXCLAM reduce production name -> name_string 
-- On EQUAL reduce production name -> name_string 
-- On EOF reduce production name -> name_string 
-- On END reduce production name -> name_string 
-- On ELSE reduce production name -> name_string 
-- On ELLIPSE reduce production name -> name_string 
-- On ELIF reduce production name -> name_string 
-- On DOUBLE_COLON reduce production name -> name_string 
-- On DOT reduce production name -> name_string 
-- On DO reduce production name -> name_string 
-- On COMMA reduce production name -> name_string 
-- On COLON reduce production name -> name_string 
-- On CARET reduce production name -> name_string 
-- On BY reduce production name -> name_string 
-- On AT reduce production name -> name_string 
-- On ASSIGN reduce production name -> name_string 
-- On ARROW reduce production name -> name_string 
-- On AND reduce production name -> name_string 
-- On AMPOP reduce production name -> name_string 
-- On AMPMUL reduce production name -> name_string 

State 24:
name -> name . DOT INT [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . DOT STRING [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . DOT LPAREN expr RPAREN [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . LBRACK exprseq RBRACK [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
nameseq -> nameseq COMMA name . [ SEMICOLON COMMA ASSIGN ]
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On SEMICOLON reduce production nameseq -> nameseq COMMA name 
-- On COMMA reduce production nameseq -> nameseq COMMA name 
-- On ASSIGN reduce production nameseq -> nameseq COMMA name 

State 25:
name -> name LBRACK . exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 112
-- On expr shift to state 93
-- On RBRACK reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 26:
expr -> PLUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 111

State 27:
expr -> NOT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 110

State 28:
expr -> LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 108
-- On expr shift to state 93
-- On RPAREN reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 29:
expr -> LBRACK . exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 106
-- On expr shift to state 93
-- On RBRACK reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 30:
expr -> LBRACE . exprseq RBRACE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 104
-- On expr shift to state 93
-- On RBRACE reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 31:
expr -> INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT . DOT INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT . DOT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On DOT shift to state 32
-- On WHILE reduce production expr -> INT 
-- On UNION reduce production expr -> INT 
-- On TO reduce production expr -> INT 
-- On THEN reduce production expr -> INT 
-- On SUBTRACT reduce production expr -> INT 
-- On SLASH reduce production expr -> INT 
-- On SEQ reduce production expr -> INT 
-- On SEMICOLON reduce production expr -> INT 
-- On RPAREN reduce production expr -> INT 
-- On REPEAT_COMPOSE reduce production expr -> INT 
-- On RBRACK reduce production expr -> INT 
-- On RBRACE reduce production expr -> INT 
-- On QUOTE reduce production expr -> INT 
-- On PLUS reduce production expr -> INT 
-- On OR reduce production expr -> INT 
-- On OD reduce production expr -> INT 
-- On NE reduce production expr -> INT 
-- On MULT reduce production expr -> INT 
-- On MOD reduce production expr -> INT 
-- On MINUS reduce production expr -> INT 
-- On LT reduce production expr -> INT 
-- On LE reduce production expr -> INT 
-- On INTERSECT reduce production expr -> INT 
-- On GT reduce production expr -> INT 
-- On GE reduce production expr -> INT 
-- On FI reduce production expr -> INT 
-- On EXP reduce production expr -> INT 
-- On EXCLAM reduce production expr -> INT 
-- On EQUAL reduce production expr -> INT 
-- On EOF reduce production expr -> INT 
-- On END reduce production expr -> INT 
-- On ELSE reduce production expr -> INT 
-- On ELLIPSE reduce production expr -> INT 
-- On ELIF reduce production expr -> INT 
-- On DO reduce production expr -> INT 
-- On COMMA reduce production expr -> INT 
-- On COLON reduce production expr -> INT 
-- On CARET reduce production expr -> INT 
-- On BY reduce production expr -> INT 
-- On AT reduce production expr -> INT 
-- On ARROW reduce production expr -> INT 
-- On AND reduce production expr -> INT 
-- On AMPOP reduce production expr -> INT 
-- On AMPMUL reduce production expr -> INT 

State 32:
expr -> INT DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT DOT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On INT shift to state 33
-- On WHILE reduce production expr -> INT DOT 
-- On UNION reduce production expr -> INT DOT 
-- On TO reduce production expr -> INT DOT 
-- On THEN reduce production expr -> INT DOT 
-- On SUBTRACT reduce production expr -> INT DOT 
-- On SLASH reduce production expr -> INT DOT 
-- On SEQ reduce production expr -> INT DOT 
-- On SEMICOLON reduce production expr -> INT DOT 
-- On RPAREN reduce production expr -> INT DOT 
-- On REPEAT_COMPOSE reduce production expr -> INT DOT 
-- On RBRACK reduce production expr -> INT DOT 
-- On RBRACE reduce production expr -> INT DOT 
-- On QUOTE reduce production expr -> INT DOT 
-- On PLUS reduce production expr -> INT DOT 
-- On OR reduce production expr -> INT DOT 
-- On OD reduce production expr -> INT DOT 
-- On NE reduce production expr -> INT DOT 
-- On MULT reduce production expr -> INT DOT 
-- On MOD reduce production expr -> INT DOT 
-- On MINUS reduce production expr -> INT DOT 
-- On LT reduce production expr -> INT DOT 
-- On LE reduce production expr -> INT DOT 
-- On INTERSECT reduce production expr -> INT DOT 
-- On GT reduce production expr -> INT DOT 
-- On GE reduce production expr -> INT DOT 
-- On FI reduce production expr -> INT DOT 
-- On EXP reduce production expr -> INT DOT 
-- On EXCLAM reduce production expr -> INT DOT 
-- On EQUAL reduce production expr -> INT DOT 
-- On EOF reduce production expr -> INT DOT 
-- On END reduce production expr -> INT DOT 
-- On ELSE reduce production expr -> INT DOT 
-- On ELLIPSE reduce production expr -> INT DOT 
-- On ELIF reduce production expr -> INT DOT 
-- On DO reduce production expr -> INT DOT 
-- On COMMA reduce production expr -> INT DOT 
-- On COLON reduce production expr -> INT DOT 
-- On CARET reduce production expr -> INT DOT 
-- On BY reduce production expr -> INT DOT 
-- On AT reduce production expr -> INT DOT 
-- On ARROW reduce production expr -> INT DOT 
-- On AND reduce production expr -> INT DOT 
-- On AMPOP reduce production expr -> INT DOT 
-- On AMPMUL reduce production expr -> INT DOT 

State 33:
expr -> INT DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> INT DOT INT 
-- On UNION reduce production expr -> INT DOT INT 
-- On TO reduce production expr -> INT DOT INT 
-- On THEN reduce production expr -> INT DOT INT 
-- On SUBTRACT reduce production expr -> INT DOT INT 
-- On SLASH reduce production expr -> INT DOT INT 
-- On SEQ reduce production expr -> INT DOT INT 
-- On SEMICOLON reduce production expr -> INT DOT INT 
-- On RPAREN reduce production expr -> INT DOT INT 
-- On REPEAT_COMPOSE reduce production expr -> INT DOT INT 
-- On RBRACK reduce production expr -> INT DOT INT 
-- On RBRACE reduce production expr -> INT DOT INT 
-- On QUOTE reduce production expr -> INT DOT INT 
-- On PLUS reduce production expr -> INT DOT INT 
-- On OR reduce production expr -> INT DOT INT 
-- On OD reduce production expr -> INT DOT INT 
-- On NE reduce production expr -> INT DOT INT 
-- On MULT reduce production expr -> INT DOT INT 
-- On MOD reduce production expr -> INT DOT INT 
-- On MINUS reduce production expr -> INT DOT INT 
-- On LT reduce production expr -> INT DOT INT 
-- On LE reduce production expr -> INT DOT INT 
-- On INTERSECT reduce production expr -> INT DOT INT 
-- On GT reduce production expr -> INT DOT INT 
-- On GE reduce production expr -> INT DOT INT 
-- On FI reduce production expr -> INT DOT INT 
-- On EXP reduce production expr -> INT DOT INT 
-- On EXCLAM reduce production expr -> INT DOT INT 
-- On EQUAL reduce production expr -> INT DOT INT 
-- On EOF reduce production expr -> INT DOT INT 
-- On END reduce production expr -> INT DOT INT 
-- On ELSE reduce production expr -> INT DOT INT 
-- On ELLIPSE reduce production expr -> INT DOT INT 
-- On ELIF reduce production expr -> INT DOT INT 
-- On DO reduce production expr -> INT DOT INT 
-- On COMMA reduce production expr -> INT DOT INT 
-- On COLON reduce production expr -> INT DOT INT 
-- On CARET reduce production expr -> INT DOT INT 
-- On BY reduce production expr -> INT DOT INT 
-- On AT reduce production expr -> INT DOT INT 
-- On ARROW reduce production expr -> INT DOT INT 
-- On AND reduce production expr -> INT DOT INT 
-- On AMPOP reduce production expr -> INT DOT INT 
-- On AMPMUL reduce production expr -> INT DOT INT 

State 34:
expr -> DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On INT shift to state 35

State 35:
expr -> DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> DOT INT 
-- On UNION reduce production expr -> DOT INT 
-- On TO reduce production expr -> DOT INT 
-- On THEN reduce production expr -> DOT INT 
-- On SUBTRACT reduce production expr -> DOT INT 
-- On SLASH reduce production expr -> DOT INT 
-- On SEQ reduce production expr -> DOT INT 
-- On SEMICOLON reduce production expr -> DOT INT 
-- On RPAREN reduce production expr -> DOT INT 
-- On REPEAT_COMPOSE reduce production expr -> DOT INT 
-- On RBRACK reduce production expr -> DOT INT 
-- On RBRACE reduce production expr -> DOT INT 
-- On QUOTE reduce production expr -> DOT INT 
-- On PLUS reduce production expr -> DOT INT 
-- On OR reduce production expr -> DOT INT 
-- On OD reduce production expr -> DOT INT 
-- On NE reduce production expr -> DOT INT 
-- On MULT reduce production expr -> DOT INT 
-- On MOD reduce production expr -> DOT INT 
-- On MINUS reduce production expr -> DOT INT 
-- On LT reduce production expr -> DOT INT 
-- On LE reduce production expr -> DOT INT 
-- On INTERSECT reduce production expr -> DOT INT 
-- On GT reduce production expr -> DOT INT 
-- On GE reduce production expr -> DOT INT 
-- On FI reduce production expr -> DOT INT 
-- On EXP reduce production expr -> DOT INT 
-- On EXCLAM reduce production expr -> DOT INT 
-- On EQUAL reduce production expr -> DOT INT 
-- On EOF reduce production expr -> DOT INT 
-- On END reduce production expr -> DOT INT 
-- On ELSE reduce production expr -> DOT INT 
-- On ELLIPSE reduce production expr -> DOT INT 
-- On ELIF reduce production expr -> DOT INT 
-- On DO reduce production expr -> DOT INT 
-- On COMMA reduce production expr -> DOT INT 
-- On COLON reduce production expr -> DOT INT 
-- On CARET reduce production expr -> DOT INT 
-- On BY reduce production expr -> DOT INT 
-- On AT reduce production expr -> DOT INT 
-- On ARROW reduce production expr -> DOT INT 
-- On AND reduce production expr -> DOT INT 
-- On AMPOP reduce production expr -> DOT INT 
-- On AMPMUL reduce production expr -> DOT INT 

State 36:
expr -> name . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> name . functional_operator [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT STRING [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT LPAREN expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . LBRACK exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On LPAREN shift to state 37
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On functional_operator shift to state 100
-- On WHILE reduce production expr -> name 
-- On UNION reduce production expr -> name 
-- On TO reduce production expr -> name 
-- On THEN reduce production expr -> name 
-- On SUBTRACT reduce production expr -> name 
-- On SLASH reduce production expr -> name 
-- On SEQ reduce production expr -> name 
-- On SEMICOLON reduce production expr -> name 
-- On RPAREN reduce production expr -> name 
-- On REPEAT_COMPOSE reduce production expr -> name 
-- On RBRACK reduce production expr -> name 
-- On RBRACE reduce production expr -> name 
-- On QUOTE reduce production expr -> name 
-- On PLUS reduce production expr -> name 
-- On OR reduce production expr -> name 
-- On OD reduce production expr -> name 
-- On NE reduce production expr -> name 
-- On MULT reduce production expr -> name 
-- On MOD reduce production expr -> name 
-- On MINUS reduce production expr -> name 
-- On LT reduce production expr -> name 
-- On LE reduce production expr -> name 
-- On INTERSECT reduce production expr -> name 
-- On GT reduce production expr -> name 
-- On GE reduce production expr -> name 
-- On FI reduce production expr -> name 
-- On EXP reduce production expr -> name 
-- On EXCLAM reduce production expr -> name 
-- On EQUAL reduce production expr -> name 
-- On EOF reduce production expr -> name 
-- On END reduce production expr -> name 
-- On ELSE reduce production expr -> name 
-- On ELLIPSE reduce production expr -> name 
-- On ELIF reduce production expr -> name 
-- On DO reduce production expr -> name 
-- On COMMA reduce production expr -> name 
-- On COLON reduce production expr -> name 
-- On CARET reduce production expr -> name 
-- On BY reduce production expr -> name 
-- On AT reduce production expr -> name 
-- On ARROW reduce production expr -> name 
-- On AND reduce production expr -> name 
-- On AMPOP reduce production expr -> name 
-- On AMPMUL reduce production expr -> name 

State 37:
functional_operator -> LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 38
-- On expr shift to state 93
-- On RPAREN reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 38:
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
functional_operator -> LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On RPAREN shift to state 39
-- On COMMA shift to state 40

State 39:
functional_operator -> LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On UNION reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On TO reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On THEN reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On SUBTRACT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On SLASH reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On SEQ reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On SEMICOLON reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On RPAREN reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On REPEAT_COMPOSE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On RBRACK reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On RBRACE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On QUOTE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On PLUS reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On OR reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On OD reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On NE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On MULT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On MOD reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On MINUS reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On LT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On LPAREN reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On LE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On INTERSECT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On GT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On GE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On FI reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On EXP reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On EXCLAM reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On EQUAL reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On EOF reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On END reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On ELSE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On ELLIPSE reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On ELIF reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On DO reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On COMMA reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On COLON reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On CARET reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On BY reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On AT reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On ARROW reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On AND reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On AMPOP reduce production functional_operator -> LPAREN exprseq RPAREN 
-- On AMPMUL reduce production functional_operator -> LPAREN exprseq RPAREN 

State 40:
exprseq -> exprseq COMMA . expr [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 41

State 41:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq COMMA expr . [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On SEMICOLON reduce production exprseq -> exprseq COMMA expr 
-- On RPAREN reduce production exprseq -> exprseq COMMA expr 
-- On RBRACK reduce production exprseq -> exprseq COMMA expr 
-- On RBRACE reduce production exprseq -> exprseq COMMA expr 
-- On OD reduce production exprseq -> exprseq COMMA expr 
-- On FI reduce production exprseq -> exprseq COMMA expr 
-- On EOF reduce production exprseq -> exprseq COMMA expr 
-- On END reduce production exprseq -> exprseq COMMA expr 
-- On ELSE reduce production exprseq -> exprseq COMMA expr 
-- On ELIF reduce production exprseq -> exprseq COMMA expr 
-- On COMMA reduce production exprseq -> exprseq COMMA expr 
-- On COLON reduce production exprseq -> exprseq COMMA expr 

State 42:
expr -> expr UNION . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 43

State 43:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr UNION expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr UNION expr 
-- On UNION reduce production expr -> expr UNION expr 
-- On TO reduce production expr -> expr UNION expr 
-- On THEN reduce production expr -> expr UNION expr 
-- On SUBTRACT reduce production expr -> expr UNION expr 
-- On SEQ reduce production expr -> expr UNION expr 
-- On SEMICOLON reduce production expr -> expr UNION expr 
-- On RPAREN reduce production expr -> expr UNION expr 
-- On RBRACK reduce production expr -> expr UNION expr 
-- On RBRACE reduce production expr -> expr UNION expr 
-- On QUOTE reduce production expr -> expr UNION expr 
-- On PLUS reduce production expr -> expr UNION expr 
-- On OR reduce production expr -> expr UNION expr 
-- On OD reduce production expr -> expr UNION expr 
-- On NE reduce production expr -> expr UNION expr 
-- On MOD reduce production expr -> expr UNION expr 
-- On MINUS reduce production expr -> expr UNION expr 
-- On LT reduce production expr -> expr UNION expr 
-- On LE reduce production expr -> expr UNION expr 
-- On GT reduce production expr -> expr UNION expr 
-- On GE reduce production expr -> expr UNION expr 
-- On FI reduce production expr -> expr UNION expr 
-- On EQUAL reduce production expr -> expr UNION expr 
-- On EOF reduce production expr -> expr UNION expr 
-- On END reduce production expr -> expr UNION expr 
-- On ELSE reduce production expr -> expr UNION expr 
-- On ELLIPSE reduce production expr -> expr UNION expr 
-- On ELIF reduce production expr -> expr UNION expr 
-- On DO reduce production expr -> expr UNION expr 
-- On COMMA reduce production expr -> expr UNION expr 
-- On COLON reduce production expr -> expr UNION expr 
-- On BY reduce production expr -> expr UNION expr 
-- On ARROW reduce production expr -> expr UNION expr 
-- On AND reduce production expr -> expr UNION expr 

State 44:
expr -> expr SLASH . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 45

State 45:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SLASH expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr SLASH expr 
-- On UNION reduce production expr -> expr SLASH expr 
-- On TO reduce production expr -> expr SLASH expr 
-- On THEN reduce production expr -> expr SLASH expr 
-- On SUBTRACT reduce production expr -> expr SLASH expr 
-- On SLASH reduce production expr -> expr SLASH expr 
-- On SEQ reduce production expr -> expr SLASH expr 
-- On SEMICOLON reduce production expr -> expr SLASH expr 
-- On RPAREN reduce production expr -> expr SLASH expr 
-- On RBRACK reduce production expr -> expr SLASH expr 
-- On RBRACE reduce production expr -> expr SLASH expr 
-- On QUOTE reduce production expr -> expr SLASH expr 
-- On PLUS reduce production expr -> expr SLASH expr 
-- On OR reduce production expr -> expr SLASH expr 
-- On OD reduce production expr -> expr SLASH expr 
-- On NE reduce production expr -> expr SLASH expr 
-- On MULT reduce production expr -> expr SLASH expr 
-- On MOD reduce production expr -> expr SLASH expr 
-- On MINUS reduce production expr -> expr SLASH expr 
-- On LT reduce production expr -> expr SLASH expr 
-- On LE reduce production expr -> expr SLASH expr 
-- On INTERSECT reduce production expr -> expr SLASH expr 
-- On GT reduce production expr -> expr SLASH expr 
-- On GE reduce production expr -> expr SLASH expr 
-- On FI reduce production expr -> expr SLASH expr 
-- On EQUAL reduce production expr -> expr SLASH expr 
-- On EOF reduce production expr -> expr SLASH expr 
-- On END reduce production expr -> expr SLASH expr 
-- On ELSE reduce production expr -> expr SLASH expr 
-- On ELLIPSE reduce production expr -> expr SLASH expr 
-- On ELIF reduce production expr -> expr SLASH expr 
-- On DO reduce production expr -> expr SLASH expr 
-- On COMMA reduce production expr -> expr SLASH expr 
-- On COLON reduce production expr -> expr SLASH expr 
-- On BY reduce production expr -> expr SLASH expr 
-- On AT reduce production expr -> expr SLASH expr 
-- On ARROW reduce production expr -> expr SLASH expr 
-- On AND reduce production expr -> expr SLASH expr 
-- On AMPMUL reduce production expr -> expr SLASH expr 

State 46:
expr -> expr REPEAT_COMPOSE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 47

State 47:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr REPEAT_COMPOSE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On UNION reduce production expr -> expr REPEAT_COMPOSE expr 
-- On TO reduce production expr -> expr REPEAT_COMPOSE expr 
-- On THEN reduce production expr -> expr REPEAT_COMPOSE expr 
-- On SUBTRACT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On SLASH reduce production expr -> expr REPEAT_COMPOSE expr 
-- On SEQ reduce production expr -> expr REPEAT_COMPOSE expr 
-- On SEMICOLON reduce production expr -> expr REPEAT_COMPOSE expr 
-- On RPAREN reduce production expr -> expr REPEAT_COMPOSE expr 
-- On RBRACK reduce production expr -> expr REPEAT_COMPOSE expr 
-- On RBRACE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On QUOTE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On PLUS reduce production expr -> expr REPEAT_COMPOSE expr 
-- On OR reduce production expr -> expr REPEAT_COMPOSE expr 
-- On OD reduce production expr -> expr REPEAT_COMPOSE expr 
-- On NE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On MULT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On MOD reduce production expr -> expr REPEAT_COMPOSE expr 
-- On MINUS reduce production expr -> expr REPEAT_COMPOSE expr 
-- On LT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On LE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On INTERSECT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On GT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On GE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On FI reduce production expr -> expr REPEAT_COMPOSE expr 
-- On EQUAL reduce production expr -> expr REPEAT_COMPOSE expr 
-- On EOF reduce production expr -> expr REPEAT_COMPOSE expr 
-- On END reduce production expr -> expr REPEAT_COMPOSE expr 
-- On ELSE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On ELLIPSE reduce production expr -> expr REPEAT_COMPOSE expr 
-- On ELIF reduce production expr -> expr REPEAT_COMPOSE expr 
-- On DO reduce production expr -> expr REPEAT_COMPOSE expr 
-- On COMMA reduce production expr -> expr REPEAT_COMPOSE expr 
-- On COLON reduce production expr -> expr REPEAT_COMPOSE expr 
-- On BY reduce production expr -> expr REPEAT_COMPOSE expr 
-- On AT reduce production expr -> expr REPEAT_COMPOSE expr 
-- On ARROW reduce production expr -> expr REPEAT_COMPOSE expr 
-- On AND reduce production expr -> expr REPEAT_COMPOSE expr 
-- On AMPMUL reduce production expr -> expr REPEAT_COMPOSE expr 

State 48:
expr -> expr EXCLAM . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> expr EXCLAM 
-- On UNION reduce production expr -> expr EXCLAM 
-- On TO reduce production expr -> expr EXCLAM 
-- On THEN reduce production expr -> expr EXCLAM 
-- On SUBTRACT reduce production expr -> expr EXCLAM 
-- On SLASH reduce production expr -> expr EXCLAM 
-- On SEQ reduce production expr -> expr EXCLAM 
-- On SEMICOLON reduce production expr -> expr EXCLAM 
-- On RPAREN reduce production expr -> expr EXCLAM 
-- On REPEAT_COMPOSE reduce production expr -> expr EXCLAM 
-- On RBRACK reduce production expr -> expr EXCLAM 
-- On RBRACE reduce production expr -> expr EXCLAM 
-- On QUOTE reduce production expr -> expr EXCLAM 
-- On PLUS reduce production expr -> expr EXCLAM 
-- On OR reduce production expr -> expr EXCLAM 
-- On OD reduce production expr -> expr EXCLAM 
-- On NE reduce production expr -> expr EXCLAM 
-- On MULT reduce production expr -> expr EXCLAM 
-- On MOD reduce production expr -> expr EXCLAM 
-- On MINUS reduce production expr -> expr EXCLAM 
-- On LT reduce production expr -> expr EXCLAM 
-- On LE reduce production expr -> expr EXCLAM 
-- On INTERSECT reduce production expr -> expr EXCLAM 
-- On GT reduce production expr -> expr EXCLAM 
-- On GE reduce production expr -> expr EXCLAM 
-- On FI reduce production expr -> expr EXCLAM 
-- On EXP reduce production expr -> expr EXCLAM 
-- On EXCLAM reduce production expr -> expr EXCLAM 
-- On EQUAL reduce production expr -> expr EXCLAM 
-- On EOF reduce production expr -> expr EXCLAM 
-- On END reduce production expr -> expr EXCLAM 
-- On ELSE reduce production expr -> expr EXCLAM 
-- On ELLIPSE reduce production expr -> expr EXCLAM 
-- On ELIF reduce production expr -> expr EXCLAM 
-- On DO reduce production expr -> expr EXCLAM 
-- On COMMA reduce production expr -> expr EXCLAM 
-- On COLON reduce production expr -> expr EXCLAM 
-- On CARET reduce production expr -> expr EXCLAM 
-- On BY reduce production expr -> expr EXCLAM 
-- On AT reduce production expr -> expr EXCLAM 
-- On ARROW reduce production expr -> expr EXCLAM 
-- On AND reduce production expr -> expr EXCLAM 
-- On AMPOP reduce production expr -> expr EXCLAM 
-- On AMPMUL reduce production expr -> expr EXCLAM 

State 49:
expr -> expr AMPOP . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 50

State 50:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AMPOP expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> expr AMPOP expr 
-- On UNION reduce production expr -> expr AMPOP expr 
-- On TO reduce production expr -> expr AMPOP expr 
-- On THEN reduce production expr -> expr AMPOP expr 
-- On SUBTRACT reduce production expr -> expr AMPOP expr 
-- On SLASH reduce production expr -> expr AMPOP expr 
-- On SEQ reduce production expr -> expr AMPOP expr 
-- On SEMICOLON reduce production expr -> expr AMPOP expr 
-- On RPAREN reduce production expr -> expr AMPOP expr 
-- On REPEAT_COMPOSE reduce production expr -> expr AMPOP expr 
-- On RBRACK reduce production expr -> expr AMPOP expr 
-- On RBRACE reduce production expr -> expr AMPOP expr 
-- On QUOTE reduce production expr -> expr AMPOP expr 
-- On PLUS reduce production expr -> expr AMPOP expr 
-- On OR reduce production expr -> expr AMPOP expr 
-- On OD reduce production expr -> expr AMPOP expr 
-- On NE reduce production expr -> expr AMPOP expr 
-- On MULT reduce production expr -> expr AMPOP expr 
-- On MOD reduce production expr -> expr AMPOP expr 
-- On MINUS reduce production expr -> expr AMPOP expr 
-- On LT reduce production expr -> expr AMPOP expr 
-- On LE reduce production expr -> expr AMPOP expr 
-- On INTERSECT reduce production expr -> expr AMPOP expr 
-- On GT reduce production expr -> expr AMPOP expr 
-- On GE reduce production expr -> expr AMPOP expr 
-- On FI reduce production expr -> expr AMPOP expr 
-- On EXP reduce production expr -> expr AMPOP expr 
-- On EXCLAM reduce production expr -> expr AMPOP expr 
-- On EQUAL reduce production expr -> expr AMPOP expr 
-- On EOF reduce production expr -> expr AMPOP expr 
-- On END reduce production expr -> expr AMPOP expr 
-- On ELSE reduce production expr -> expr AMPOP expr 
-- On ELLIPSE reduce production expr -> expr AMPOP expr 
-- On ELIF reduce production expr -> expr AMPOP expr 
-- On DO reduce production expr -> expr AMPOP expr 
-- On COMMA reduce production expr -> expr AMPOP expr 
-- On COLON reduce production expr -> expr AMPOP expr 
-- On CARET reduce production expr -> expr AMPOP expr 
-- On BY reduce production expr -> expr AMPOP expr 
-- On AT reduce production expr -> expr AMPOP expr 
-- On ARROW reduce production expr -> expr AMPOP expr 
-- On AND reduce production expr -> expr AMPOP expr 
-- On AMPOP reduce production expr -> expr AMPOP expr 
-- On AMPMUL reduce production expr -> expr AMPOP expr 

State 51:
expr -> expr EXP . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 52

State 52:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr EXP expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr EXP expr 
-- On UNION reduce production expr -> expr EXP expr 
-- On TO reduce production expr -> expr EXP expr 
-- On THEN reduce production expr -> expr EXP expr 
-- On SUBTRACT reduce production expr -> expr EXP expr 
-- On SLASH reduce production expr -> expr EXP expr 
-- On SEQ reduce production expr -> expr EXP expr 
-- On SEMICOLON reduce production expr -> expr EXP expr 
-- On RPAREN reduce production expr -> expr EXP expr 
-- On RBRACK reduce production expr -> expr EXP expr 
-- On RBRACE reduce production expr -> expr EXP expr 
-- On QUOTE reduce production expr -> expr EXP expr 
-- On PLUS reduce production expr -> expr EXP expr 
-- On OR reduce production expr -> expr EXP expr 
-- On OD reduce production expr -> expr EXP expr 
-- On NE reduce production expr -> expr EXP expr 
-- On MULT reduce production expr -> expr EXP expr 
-- On MOD reduce production expr -> expr EXP expr 
-- On MINUS reduce production expr -> expr EXP expr 
-- On LT reduce production expr -> expr EXP expr 
-- On LE reduce production expr -> expr EXP expr 
-- On INTERSECT reduce production expr -> expr EXP expr 
-- On GT reduce production expr -> expr EXP expr 
-- On GE reduce production expr -> expr EXP expr 
-- On FI reduce production expr -> expr EXP expr 
-- On EQUAL reduce production expr -> expr EXP expr 
-- On EOF reduce production expr -> expr EXP expr 
-- On END reduce production expr -> expr EXP expr 
-- On ELSE reduce production expr -> expr EXP expr 
-- On ELLIPSE reduce production expr -> expr EXP expr 
-- On ELIF reduce production expr -> expr EXP expr 
-- On DO reduce production expr -> expr EXP expr 
-- On COMMA reduce production expr -> expr EXP expr 
-- On COLON reduce production expr -> expr EXP expr 
-- On BY reduce production expr -> expr EXP expr 
-- On AT reduce production expr -> expr EXP expr 
-- On ARROW reduce production expr -> expr EXP expr 
-- On AND reduce production expr -> expr EXP expr 
-- On AMPMUL reduce production expr -> expr EXP expr 

State 53:
expr -> expr CARET . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 54

State 54:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr CARET expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr CARET expr 
-- On UNION reduce production expr -> expr CARET expr 
-- On TO reduce production expr -> expr CARET expr 
-- On THEN reduce production expr -> expr CARET expr 
-- On SUBTRACT reduce production expr -> expr CARET expr 
-- On SLASH reduce production expr -> expr CARET expr 
-- On SEQ reduce production expr -> expr CARET expr 
-- On SEMICOLON reduce production expr -> expr CARET expr 
-- On RPAREN reduce production expr -> expr CARET expr 
-- On RBRACK reduce production expr -> expr CARET expr 
-- On RBRACE reduce production expr -> expr CARET expr 
-- On QUOTE reduce production expr -> expr CARET expr 
-- On PLUS reduce production expr -> expr CARET expr 
-- On OR reduce production expr -> expr CARET expr 
-- On OD reduce production expr -> expr CARET expr 
-- On NE reduce production expr -> expr CARET expr 
-- On MULT reduce production expr -> expr CARET expr 
-- On MOD reduce production expr -> expr CARET expr 
-- On MINUS reduce production expr -> expr CARET expr 
-- On LT reduce production expr -> expr CARET expr 
-- On LE reduce production expr -> expr CARET expr 
-- On INTERSECT reduce production expr -> expr CARET expr 
-- On GT reduce production expr -> expr CARET expr 
-- On GE reduce production expr -> expr CARET expr 
-- On FI reduce production expr -> expr CARET expr 
-- On EQUAL reduce production expr -> expr CARET expr 
-- On EOF reduce production expr -> expr CARET expr 
-- On END reduce production expr -> expr CARET expr 
-- On ELSE reduce production expr -> expr CARET expr 
-- On ELLIPSE reduce production expr -> expr CARET expr 
-- On ELIF reduce production expr -> expr CARET expr 
-- On DO reduce production expr -> expr CARET expr 
-- On COMMA reduce production expr -> expr CARET expr 
-- On COLON reduce production expr -> expr CARET expr 
-- On BY reduce production expr -> expr CARET expr 
-- On AT reduce production expr -> expr CARET expr 
-- On ARROW reduce production expr -> expr CARET expr 
-- On AND reduce production expr -> expr CARET expr 
-- On AMPMUL reduce production expr -> expr CARET expr 

State 55:
expr -> expr MULT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 56

State 56:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MULT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr MULT expr 
-- On UNION reduce production expr -> expr MULT expr 
-- On TO reduce production expr -> expr MULT expr 
-- On THEN reduce production expr -> expr MULT expr 
-- On SUBTRACT reduce production expr -> expr MULT expr 
-- On SLASH reduce production expr -> expr MULT expr 
-- On SEQ reduce production expr -> expr MULT expr 
-- On SEMICOLON reduce production expr -> expr MULT expr 
-- On RPAREN reduce production expr -> expr MULT expr 
-- On RBRACK reduce production expr -> expr MULT expr 
-- On RBRACE reduce production expr -> expr MULT expr 
-- On QUOTE reduce production expr -> expr MULT expr 
-- On PLUS reduce production expr -> expr MULT expr 
-- On OR reduce production expr -> expr MULT expr 
-- On OD reduce production expr -> expr MULT expr 
-- On NE reduce production expr -> expr MULT expr 
-- On MULT reduce production expr -> expr MULT expr 
-- On MOD reduce production expr -> expr MULT expr 
-- On MINUS reduce production expr -> expr MULT expr 
-- On LT reduce production expr -> expr MULT expr 
-- On LE reduce production expr -> expr MULT expr 
-- On INTERSECT reduce production expr -> expr MULT expr 
-- On GT reduce production expr -> expr MULT expr 
-- On GE reduce production expr -> expr MULT expr 
-- On FI reduce production expr -> expr MULT expr 
-- On EQUAL reduce production expr -> expr MULT expr 
-- On EOF reduce production expr -> expr MULT expr 
-- On END reduce production expr -> expr MULT expr 
-- On ELSE reduce production expr -> expr MULT expr 
-- On ELLIPSE reduce production expr -> expr MULT expr 
-- On ELIF reduce production expr -> expr MULT expr 
-- On DO reduce production expr -> expr MULT expr 
-- On COMMA reduce production expr -> expr MULT expr 
-- On COLON reduce production expr -> expr MULT expr 
-- On BY reduce production expr -> expr MULT expr 
-- On AT reduce production expr -> expr MULT expr 
-- On ARROW reduce production expr -> expr MULT expr 
-- On AND reduce production expr -> expr MULT expr 
-- On AMPMUL reduce production expr -> expr MULT expr 

State 57:
expr -> expr INTERSECT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 58

State 58:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr INTERSECT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr INTERSECT expr 
-- On UNION reduce production expr -> expr INTERSECT expr 
-- On TO reduce production expr -> expr INTERSECT expr 
-- On THEN reduce production expr -> expr INTERSECT expr 
-- On SUBTRACT reduce production expr -> expr INTERSECT expr 
-- On SLASH reduce production expr -> expr INTERSECT expr 
-- On SEQ reduce production expr -> expr INTERSECT expr 
-- On SEMICOLON reduce production expr -> expr INTERSECT expr 
-- On RPAREN reduce production expr -> expr INTERSECT expr 
-- On RBRACK reduce production expr -> expr INTERSECT expr 
-- On RBRACE reduce production expr -> expr INTERSECT expr 
-- On QUOTE reduce production expr -> expr INTERSECT expr 
-- On PLUS reduce production expr -> expr INTERSECT expr 
-- On OR reduce production expr -> expr INTERSECT expr 
-- On OD reduce production expr -> expr INTERSECT expr 
-- On NE reduce production expr -> expr INTERSECT expr 
-- On MULT reduce production expr -> expr INTERSECT expr 
-- On MOD reduce production expr -> expr INTERSECT expr 
-- On MINUS reduce production expr -> expr INTERSECT expr 
-- On LT reduce production expr -> expr INTERSECT expr 
-- On LE reduce production expr -> expr INTERSECT expr 
-- On INTERSECT reduce production expr -> expr INTERSECT expr 
-- On GT reduce production expr -> expr INTERSECT expr 
-- On GE reduce production expr -> expr INTERSECT expr 
-- On FI reduce production expr -> expr INTERSECT expr 
-- On EQUAL reduce production expr -> expr INTERSECT expr 
-- On EOF reduce production expr -> expr INTERSECT expr 
-- On END reduce production expr -> expr INTERSECT expr 
-- On ELSE reduce production expr -> expr INTERSECT expr 
-- On ELLIPSE reduce production expr -> expr INTERSECT expr 
-- On ELIF reduce production expr -> expr INTERSECT expr 
-- On DO reduce production expr -> expr INTERSECT expr 
-- On COMMA reduce production expr -> expr INTERSECT expr 
-- On COLON reduce production expr -> expr INTERSECT expr 
-- On BY reduce production expr -> expr INTERSECT expr 
-- On AT reduce production expr -> expr INTERSECT expr 
-- On ARROW reduce production expr -> expr INTERSECT expr 
-- On AND reduce production expr -> expr INTERSECT expr 
-- On AMPMUL reduce production expr -> expr INTERSECT expr 

State 59:
expr -> expr AT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 60

State 60:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr AT expr 
-- On UNION reduce production expr -> expr AT expr 
-- On TO reduce production expr -> expr AT expr 
-- On THEN reduce production expr -> expr AT expr 
-- On SUBTRACT reduce production expr -> expr AT expr 
-- On SLASH reduce production expr -> expr AT expr 
-- On SEQ reduce production expr -> expr AT expr 
-- On SEMICOLON reduce production expr -> expr AT expr 
-- On RPAREN reduce production expr -> expr AT expr 
-- On RBRACK reduce production expr -> expr AT expr 
-- On RBRACE reduce production expr -> expr AT expr 
-- On QUOTE reduce production expr -> expr AT expr 
-- On PLUS reduce production expr -> expr AT expr 
-- On OR reduce production expr -> expr AT expr 
-- On OD reduce production expr -> expr AT expr 
-- On NE reduce production expr -> expr AT expr 
-- On MULT reduce production expr -> expr AT expr 
-- On MOD reduce production expr -> expr AT expr 
-- On MINUS reduce production expr -> expr AT expr 
-- On LT reduce production expr -> expr AT expr 
-- On LE reduce production expr -> expr AT expr 
-- On INTERSECT reduce production expr -> expr AT expr 
-- On GT reduce production expr -> expr AT expr 
-- On GE reduce production expr -> expr AT expr 
-- On FI reduce production expr -> expr AT expr 
-- On EQUAL reduce production expr -> expr AT expr 
-- On EOF reduce production expr -> expr AT expr 
-- On END reduce production expr -> expr AT expr 
-- On ELSE reduce production expr -> expr AT expr 
-- On ELLIPSE reduce production expr -> expr AT expr 
-- On ELIF reduce production expr -> expr AT expr 
-- On DO reduce production expr -> expr AT expr 
-- On COMMA reduce production expr -> expr AT expr 
-- On COLON reduce production expr -> expr AT expr 
-- On BY reduce production expr -> expr AT expr 
-- On AT reduce production expr -> expr AT expr 
-- On ARROW reduce production expr -> expr AT expr 
-- On AND reduce production expr -> expr AT expr 
-- On AMPMUL reduce production expr -> expr AT expr 

State 61:
expr -> expr AMPMUL . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 62

State 62:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AMPMUL expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
-- On WHILE reduce production expr -> expr AMPMUL expr 
-- On UNION reduce production expr -> expr AMPMUL expr 
-- On TO reduce production expr -> expr AMPMUL expr 
-- On THEN reduce production expr -> expr AMPMUL expr 
-- On SUBTRACT reduce production expr -> expr AMPMUL expr 
-- On SLASH reduce production expr -> expr AMPMUL expr 
-- On SEQ reduce production expr -> expr AMPMUL expr 
-- On SEMICOLON reduce production expr -> expr AMPMUL expr 
-- On RPAREN reduce production expr -> expr AMPMUL expr 
-- On RBRACK reduce production expr -> expr AMPMUL expr 
-- On RBRACE reduce production expr -> expr AMPMUL expr 
-- On QUOTE reduce production expr -> expr AMPMUL expr 
-- On PLUS reduce production expr -> expr AMPMUL expr 
-- On OR reduce production expr -> expr AMPMUL expr 
-- On OD reduce production expr -> expr AMPMUL expr 
-- On NE reduce production expr -> expr AMPMUL expr 
-- On MULT reduce production expr -> expr AMPMUL expr 
-- On MOD reduce production expr -> expr AMPMUL expr 
-- On MINUS reduce production expr -> expr AMPMUL expr 
-- On LT reduce production expr -> expr AMPMUL expr 
-- On LE reduce production expr -> expr AMPMUL expr 
-- On INTERSECT reduce production expr -> expr AMPMUL expr 
-- On GT reduce production expr -> expr AMPMUL expr 
-- On GE reduce production expr -> expr AMPMUL expr 
-- On FI reduce production expr -> expr AMPMUL expr 
-- On EQUAL reduce production expr -> expr AMPMUL expr 
-- On EOF reduce production expr -> expr AMPMUL expr 
-- On END reduce production expr -> expr AMPMUL expr 
-- On ELSE reduce production expr -> expr AMPMUL expr 
-- On ELLIPSE reduce production expr -> expr AMPMUL expr 
-- On ELIF reduce production expr -> expr AMPMUL expr 
-- On DO reduce production expr -> expr AMPMUL expr 
-- On COMMA reduce production expr -> expr AMPMUL expr 
-- On COLON reduce production expr -> expr AMPMUL expr 
-- On BY reduce production expr -> expr AMPMUL expr 
-- On AT reduce production expr -> expr AMPMUL expr 
-- On ARROW reduce production expr -> expr AMPMUL expr 
-- On AND reduce production expr -> expr AMPMUL expr 
-- On AMPMUL reduce production expr -> expr AMPMUL expr 

State 63:
expr -> expr SUBTRACT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 64

State 64:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SUBTRACT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr SUBTRACT expr 
-- On UNION reduce production expr -> expr SUBTRACT expr 
-- On TO reduce production expr -> expr SUBTRACT expr 
-- On THEN reduce production expr -> expr SUBTRACT expr 
-- On SUBTRACT reduce production expr -> expr SUBTRACT expr 
-- On SEQ reduce production expr -> expr SUBTRACT expr 
-- On SEMICOLON reduce production expr -> expr SUBTRACT expr 
-- On RPAREN reduce production expr -> expr SUBTRACT expr 
-- On RBRACK reduce production expr -> expr SUBTRACT expr 
-- On RBRACE reduce production expr -> expr SUBTRACT expr 
-- On QUOTE reduce production expr -> expr SUBTRACT expr 
-- On PLUS reduce production expr -> expr SUBTRACT expr 
-- On OR reduce production expr -> expr SUBTRACT expr 
-- On OD reduce production expr -> expr SUBTRACT expr 
-- On NE reduce production expr -> expr SUBTRACT expr 
-- On MOD reduce production expr -> expr SUBTRACT expr 
-- On MINUS reduce production expr -> expr SUBTRACT expr 
-- On LT reduce production expr -> expr SUBTRACT expr 
-- On LE reduce production expr -> expr SUBTRACT expr 
-- On GT reduce production expr -> expr SUBTRACT expr 
-- On GE reduce production expr -> expr SUBTRACT expr 
-- On FI reduce production expr -> expr SUBTRACT expr 
-- On EQUAL reduce production expr -> expr SUBTRACT expr 
-- On EOF reduce production expr -> expr SUBTRACT expr 
-- On END reduce production expr -> expr SUBTRACT expr 
-- On ELSE reduce production expr -> expr SUBTRACT expr 
-- On ELLIPSE reduce production expr -> expr SUBTRACT expr 
-- On ELIF reduce production expr -> expr SUBTRACT expr 
-- On DO reduce production expr -> expr SUBTRACT expr 
-- On COMMA reduce production expr -> expr SUBTRACT expr 
-- On COLON reduce production expr -> expr SUBTRACT expr 
-- On BY reduce production expr -> expr SUBTRACT expr 
-- On ARROW reduce production expr -> expr SUBTRACT expr 
-- On AND reduce production expr -> expr SUBTRACT expr 

State 65:
expr -> expr SEQ . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 66

State 66:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SEQ expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr SEQ expr 
-- On TO reduce production expr -> expr SEQ expr 
-- On THEN reduce production expr -> expr SEQ expr 
-- On SEMICOLON reduce production expr -> expr SEQ expr 
-- On RPAREN reduce production expr -> expr SEQ expr 
-- On RBRACK reduce production expr -> expr SEQ expr 
-- On RBRACE reduce production expr -> expr SEQ expr 
-- On QUOTE reduce production expr -> expr SEQ expr 
-- On OR reduce production expr -> expr SEQ expr 
-- On OD reduce production expr -> expr SEQ expr 
-- On FI reduce production expr -> expr SEQ expr 
-- On EOF reduce production expr -> expr SEQ expr 
-- On END reduce production expr -> expr SEQ expr 
-- On ELSE reduce production expr -> expr SEQ expr 
-- On ELIF reduce production expr -> expr SEQ expr 
-- On DO reduce production expr -> expr SEQ expr 
-- On COMMA reduce production expr -> expr SEQ expr 
-- On COLON reduce production expr -> expr SEQ expr 
-- On BY reduce production expr -> expr SEQ expr 
-- On ARROW reduce production expr -> expr SEQ expr 
-- On AND reduce production expr -> expr SEQ expr 

State 67:
expr -> expr PLUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 68

State 68:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr PLUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr PLUS expr 
-- On UNION reduce production expr -> expr PLUS expr 
-- On TO reduce production expr -> expr PLUS expr 
-- On THEN reduce production expr -> expr PLUS expr 
-- On SUBTRACT reduce production expr -> expr PLUS expr 
-- On SEQ reduce production expr -> expr PLUS expr 
-- On SEMICOLON reduce production expr -> expr PLUS expr 
-- On RPAREN reduce production expr -> expr PLUS expr 
-- On RBRACK reduce production expr -> expr PLUS expr 
-- On RBRACE reduce production expr -> expr PLUS expr 
-- On QUOTE reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On OD reduce production expr -> expr PLUS expr 
-- On NE reduce production expr -> expr PLUS expr 
-- On MOD reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LT reduce production expr -> expr PLUS expr 
-- On LE reduce production expr -> expr PLUS expr 
-- On GT reduce production expr -> expr PLUS expr 
-- On GE reduce production expr -> expr PLUS expr 
-- On FI reduce production expr -> expr PLUS expr 
-- On EQUAL reduce production expr -> expr PLUS expr 
-- On EOF reduce production expr -> expr PLUS expr 
-- On END reduce production expr -> expr PLUS expr 
-- On ELSE reduce production expr -> expr PLUS expr 
-- On ELLIPSE reduce production expr -> expr PLUS expr 
-- On ELIF reduce production expr -> expr PLUS expr 
-- On DO reduce production expr -> expr PLUS expr 
-- On COMMA reduce production expr -> expr PLUS expr 
-- On COLON reduce production expr -> expr PLUS expr 
-- On BY reduce production expr -> expr PLUS expr 
-- On ARROW reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 69:
expr -> expr NE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 70

State 70:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr NE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr NE expr 
-- On TO reduce production expr -> expr NE expr 
-- On THEN reduce production expr -> expr NE expr 
-- On SEQ reduce production expr -> expr NE expr 
-- On SEMICOLON reduce production expr -> expr NE expr 
-- On RPAREN reduce production expr -> expr NE expr 
-- On RBRACK reduce production expr -> expr NE expr 
-- On RBRACE reduce production expr -> expr NE expr 
-- On QUOTE reduce production expr -> expr NE expr 
-- On OR reduce production expr -> expr NE expr 
-- On OD reduce production expr -> expr NE expr 
-- On FI reduce production expr -> expr NE expr 
-- On EOF reduce production expr -> expr NE expr 
-- On END reduce production expr -> expr NE expr 
-- On ELSE reduce production expr -> expr NE expr 
-- On ELIF reduce production expr -> expr NE expr 
-- On DO reduce production expr -> expr NE expr 
-- On COMMA reduce production expr -> expr NE expr 
-- On COLON reduce production expr -> expr NE expr 
-- On BY reduce production expr -> expr NE expr 
-- On ARROW reduce production expr -> expr NE expr 
-- On AND reduce production expr -> expr NE expr 

State 71:
expr -> expr MOD . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 72

State 72:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MOD expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr MOD expr 
-- On TO reduce production expr -> expr MOD expr 
-- On THEN reduce production expr -> expr MOD expr 
-- On SEQ reduce production expr -> expr MOD expr 
-- On SEMICOLON reduce production expr -> expr MOD expr 
-- On RPAREN reduce production expr -> expr MOD expr 
-- On RBRACK reduce production expr -> expr MOD expr 
-- On RBRACE reduce production expr -> expr MOD expr 
-- On QUOTE reduce production expr -> expr MOD expr 
-- On OR reduce production expr -> expr MOD expr 
-- On OD reduce production expr -> expr MOD expr 
-- On NE reduce production expr -> expr MOD expr 
-- On LT reduce production expr -> expr MOD expr 
-- On LE reduce production expr -> expr MOD expr 
-- On GT reduce production expr -> expr MOD expr 
-- On GE reduce production expr -> expr MOD expr 
-- On FI reduce production expr -> expr MOD expr 
-- On EQUAL reduce production expr -> expr MOD expr 
-- On EOF reduce production expr -> expr MOD expr 
-- On END reduce production expr -> expr MOD expr 
-- On ELSE reduce production expr -> expr MOD expr 
-- On ELLIPSE reduce production expr -> expr MOD expr 
-- On ELIF reduce production expr -> expr MOD expr 
-- On DO reduce production expr -> expr MOD expr 
-- On COMMA reduce production expr -> expr MOD expr 
-- On COLON reduce production expr -> expr MOD expr 
-- On BY reduce production expr -> expr MOD expr 
-- On ARROW reduce production expr -> expr MOD expr 
-- On AND reduce production expr -> expr MOD expr 

State 73:
expr -> expr MINUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 74

State 74:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MINUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr MINUS expr 
-- On UNION reduce production expr -> expr MINUS expr 
-- On TO reduce production expr -> expr MINUS expr 
-- On THEN reduce production expr -> expr MINUS expr 
-- On SUBTRACT reduce production expr -> expr MINUS expr 
-- On SEQ reduce production expr -> expr MINUS expr 
-- On SEMICOLON reduce production expr -> expr MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On RBRACK reduce production expr -> expr MINUS expr 
-- On RBRACE reduce production expr -> expr MINUS expr 
-- On QUOTE reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On OD reduce production expr -> expr MINUS expr 
-- On NE reduce production expr -> expr MINUS expr 
-- On MOD reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LE reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GE reduce production expr -> expr MINUS expr 
-- On FI reduce production expr -> expr MINUS expr 
-- On EQUAL reduce production expr -> expr MINUS expr 
-- On EOF reduce production expr -> expr MINUS expr 
-- On END reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On ELLIPSE reduce production expr -> expr MINUS expr 
-- On ELIF reduce production expr -> expr MINUS expr 
-- On DO reduce production expr -> expr MINUS expr 
-- On COMMA reduce production expr -> expr MINUS expr 
-- On COLON reduce production expr -> expr MINUS expr 
-- On BY reduce production expr -> expr MINUS expr 
-- On ARROW reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 

State 75:
expr -> expr ELLIPSE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 76

State 76:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr ELLIPSE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr ELLIPSE expr 
-- On TO reduce production expr -> expr ELLIPSE expr 
-- On THEN reduce production expr -> expr ELLIPSE expr 
-- On SEQ reduce production expr -> expr ELLIPSE expr 
-- On SEMICOLON reduce production expr -> expr ELLIPSE expr 
-- On RPAREN reduce production expr -> expr ELLIPSE expr 
-- On RBRACK reduce production expr -> expr ELLIPSE expr 
-- On RBRACE reduce production expr -> expr ELLIPSE expr 
-- On QUOTE reduce production expr -> expr ELLIPSE expr 
-- On OR reduce production expr -> expr ELLIPSE expr 
-- On OD reduce production expr -> expr ELLIPSE expr 
-- On NE reduce production expr -> expr ELLIPSE expr 
-- On LT reduce production expr -> expr ELLIPSE expr 
-- On LE reduce production expr -> expr ELLIPSE expr 
-- On GT reduce production expr -> expr ELLIPSE expr 
-- On GE reduce production expr -> expr ELLIPSE expr 
-- On FI reduce production expr -> expr ELLIPSE expr 
-- On EQUAL reduce production expr -> expr ELLIPSE expr 
-- On EOF reduce production expr -> expr ELLIPSE expr 
-- On END reduce production expr -> expr ELLIPSE expr 
-- On ELSE reduce production expr -> expr ELLIPSE expr 
-- On ELIF reduce production expr -> expr ELLIPSE expr 
-- On DO reduce production expr -> expr ELLIPSE expr 
-- On COMMA reduce production expr -> expr ELLIPSE expr 
-- On COLON reduce production expr -> expr ELLIPSE expr 
-- On BY reduce production expr -> expr ELLIPSE expr 
-- On ARROW reduce production expr -> expr ELLIPSE expr 
-- On AND reduce production expr -> expr ELLIPSE expr 

State 77:
expr -> expr LT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 78

State 78:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr LT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr LT expr 
-- On TO reduce production expr -> expr LT expr 
-- On THEN reduce production expr -> expr LT expr 
-- On SEQ reduce production expr -> expr LT expr 
-- On SEMICOLON reduce production expr -> expr LT expr 
-- On RPAREN reduce production expr -> expr LT expr 
-- On RBRACK reduce production expr -> expr LT expr 
-- On RBRACE reduce production expr -> expr LT expr 
-- On QUOTE reduce production expr -> expr LT expr 
-- On OR reduce production expr -> expr LT expr 
-- On OD reduce production expr -> expr LT expr 
-- On FI reduce production expr -> expr LT expr 
-- On EOF reduce production expr -> expr LT expr 
-- On END reduce production expr -> expr LT expr 
-- On ELSE reduce production expr -> expr LT expr 
-- On ELIF reduce production expr -> expr LT expr 
-- On DO reduce production expr -> expr LT expr 
-- On COMMA reduce production expr -> expr LT expr 
-- On COLON reduce production expr -> expr LT expr 
-- On BY reduce production expr -> expr LT expr 
-- On ARROW reduce production expr -> expr LT expr 
-- On AND reduce production expr -> expr LT expr 

State 79:
expr -> expr LE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 80

State 80:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr LE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr LE expr 
-- On TO reduce production expr -> expr LE expr 
-- On THEN reduce production expr -> expr LE expr 
-- On SEQ reduce production expr -> expr LE expr 
-- On SEMICOLON reduce production expr -> expr LE expr 
-- On RPAREN reduce production expr -> expr LE expr 
-- On RBRACK reduce production expr -> expr LE expr 
-- On RBRACE reduce production expr -> expr LE expr 
-- On QUOTE reduce production expr -> expr LE expr 
-- On OR reduce production expr -> expr LE expr 
-- On OD reduce production expr -> expr LE expr 
-- On FI reduce production expr -> expr LE expr 
-- On EOF reduce production expr -> expr LE expr 
-- On END reduce production expr -> expr LE expr 
-- On ELSE reduce production expr -> expr LE expr 
-- On ELIF reduce production expr -> expr LE expr 
-- On DO reduce production expr -> expr LE expr 
-- On COMMA reduce production expr -> expr LE expr 
-- On COLON reduce production expr -> expr LE expr 
-- On BY reduce production expr -> expr LE expr 
-- On ARROW reduce production expr -> expr LE expr 
-- On AND reduce production expr -> expr LE expr 

State 81:
expr -> expr GT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 82

State 82:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr GT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr GT expr 
-- On TO reduce production expr -> expr GT expr 
-- On THEN reduce production expr -> expr GT expr 
-- On SEQ reduce production expr -> expr GT expr 
-- On SEMICOLON reduce production expr -> expr GT expr 
-- On RPAREN reduce production expr -> expr GT expr 
-- On RBRACK reduce production expr -> expr GT expr 
-- On RBRACE reduce production expr -> expr GT expr 
-- On QUOTE reduce production expr -> expr GT expr 
-- On OR reduce production expr -> expr GT expr 
-- On OD reduce production expr -> expr GT expr 
-- On FI reduce production expr -> expr GT expr 
-- On EOF reduce production expr -> expr GT expr 
-- On END reduce production expr -> expr GT expr 
-- On ELSE reduce production expr -> expr GT expr 
-- On ELIF reduce production expr -> expr GT expr 
-- On DO reduce production expr -> expr GT expr 
-- On COMMA reduce production expr -> expr GT expr 
-- On COLON reduce production expr -> expr GT expr 
-- On BY reduce production expr -> expr GT expr 
-- On ARROW reduce production expr -> expr GT expr 
-- On AND reduce production expr -> expr GT expr 

State 83:
expr -> expr GE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 84

State 84:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr GE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr GE expr 
-- On TO reduce production expr -> expr GE expr 
-- On THEN reduce production expr -> expr GE expr 
-- On SEQ reduce production expr -> expr GE expr 
-- On SEMICOLON reduce production expr -> expr GE expr 
-- On RPAREN reduce production expr -> expr GE expr 
-- On RBRACK reduce production expr -> expr GE expr 
-- On RBRACE reduce production expr -> expr GE expr 
-- On QUOTE reduce production expr -> expr GE expr 
-- On OR reduce production expr -> expr GE expr 
-- On OD reduce production expr -> expr GE expr 
-- On FI reduce production expr -> expr GE expr 
-- On EOF reduce production expr -> expr GE expr 
-- On END reduce production expr -> expr GE expr 
-- On ELSE reduce production expr -> expr GE expr 
-- On ELIF reduce production expr -> expr GE expr 
-- On DO reduce production expr -> expr GE expr 
-- On COMMA reduce production expr -> expr GE expr 
-- On COLON reduce production expr -> expr GE expr 
-- On BY reduce production expr -> expr GE expr 
-- On ARROW reduce production expr -> expr GE expr 
-- On AND reduce production expr -> expr GE expr 

State 85:
expr -> expr EQUAL . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 86

State 86:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr EQUAL expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr EQUAL expr 
-- On TO reduce production expr -> expr EQUAL expr 
-- On THEN reduce production expr -> expr EQUAL expr 
-- On SEQ reduce production expr -> expr EQUAL expr 
-- On SEMICOLON reduce production expr -> expr EQUAL expr 
-- On RPAREN reduce production expr -> expr EQUAL expr 
-- On RBRACK reduce production expr -> expr EQUAL expr 
-- On RBRACE reduce production expr -> expr EQUAL expr 
-- On QUOTE reduce production expr -> expr EQUAL expr 
-- On OR reduce production expr -> expr EQUAL expr 
-- On OD reduce production expr -> expr EQUAL expr 
-- On FI reduce production expr -> expr EQUAL expr 
-- On EOF reduce production expr -> expr EQUAL expr 
-- On END reduce production expr -> expr EQUAL expr 
-- On ELSE reduce production expr -> expr EQUAL expr 
-- On ELIF reduce production expr -> expr EQUAL expr 
-- On DO reduce production expr -> expr EQUAL expr 
-- On COMMA reduce production expr -> expr EQUAL expr 
-- On COLON reduce production expr -> expr EQUAL expr 
-- On BY reduce production expr -> expr EQUAL expr 
-- On ARROW reduce production expr -> expr EQUAL expr 
-- On AND reduce production expr -> expr EQUAL expr 

State 87:
expr -> expr OR . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 88

State 88:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr OR expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr OR expr 
-- On TO reduce production expr -> expr OR expr 
-- On THEN reduce production expr -> expr OR expr 
-- On SEMICOLON reduce production expr -> expr OR expr 
-- On RPAREN reduce production expr -> expr OR expr 
-- On RBRACK reduce production expr -> expr OR expr 
-- On RBRACE reduce production expr -> expr OR expr 
-- On QUOTE reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On OD reduce production expr -> expr OR expr 
-- On FI reduce production expr -> expr OR expr 
-- On EOF reduce production expr -> expr OR expr 
-- On END reduce production expr -> expr OR expr 
-- On ELSE reduce production expr -> expr OR expr 
-- On ELIF reduce production expr -> expr OR expr 
-- On DO reduce production expr -> expr OR expr 
-- On COMMA reduce production expr -> expr OR expr 
-- On COLON reduce production expr -> expr OR expr 
-- On BY reduce production expr -> expr OR expr 
-- On ARROW reduce production expr -> expr OR expr 

State 89:
expr -> expr AND . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 90

State 90:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AND expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr AND expr 
-- On TO reduce production expr -> expr AND expr 
-- On THEN reduce production expr -> expr AND expr 
-- On SEMICOLON reduce production expr -> expr AND expr 
-- On RPAREN reduce production expr -> expr AND expr 
-- On RBRACK reduce production expr -> expr AND expr 
-- On RBRACE reduce production expr -> expr AND expr 
-- On QUOTE reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On OD reduce production expr -> expr AND expr 
-- On FI reduce production expr -> expr AND expr 
-- On EOF reduce production expr -> expr AND expr 
-- On END reduce production expr -> expr AND expr 
-- On ELSE reduce production expr -> expr AND expr 
-- On ELIF reduce production expr -> expr AND expr 
-- On DO reduce production expr -> expr AND expr 
-- On COMMA reduce production expr -> expr AND expr 
-- On COLON reduce production expr -> expr AND expr 
-- On BY reduce production expr -> expr AND expr 
-- On ARROW reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 91:
expr -> expr ARROW . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 92

State 92:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr ARROW expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> expr ARROW expr 
-- On TO reduce production expr -> expr ARROW expr 
-- On THEN reduce production expr -> expr ARROW expr 
-- On SEMICOLON reduce production expr -> expr ARROW expr 
-- On RPAREN reduce production expr -> expr ARROW expr 
-- On RBRACK reduce production expr -> expr ARROW expr 
-- On RBRACE reduce production expr -> expr ARROW expr 
-- On QUOTE reduce production expr -> expr ARROW expr 
-- On OD reduce production expr -> expr ARROW expr 
-- On FI reduce production expr -> expr ARROW expr 
-- On EOF reduce production expr -> expr ARROW expr 
-- On END reduce production expr -> expr ARROW expr 
-- On ELSE reduce production expr -> expr ARROW expr 
-- On ELIF reduce production expr -> expr ARROW expr 
-- On DO reduce production expr -> expr ARROW expr 
-- On COMMA reduce production expr -> expr ARROW expr 
-- On COLON reduce production expr -> expr ARROW expr 
-- On BY reduce production expr -> expr ARROW expr 

State 93:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
exprseq -> expr . [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On SEMICOLON reduce production exprseq -> expr 
-- On RPAREN reduce production exprseq -> expr 
-- On RBRACK reduce production exprseq -> expr 
-- On RBRACE reduce production exprseq -> expr 
-- On OD reduce production exprseq -> expr 
-- On FI reduce production exprseq -> expr 
-- On EOF reduce production exprseq -> expr 
-- On END reduce production exprseq -> expr 
-- On ELSE reduce production exprseq -> expr 
-- On ELIF reduce production exprseq -> expr 
-- On COMMA reduce production exprseq -> expr 
-- On COLON reduce production exprseq -> expr 

State 94:
name -> name DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name DOT . STRING [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name DOT . LPAREN expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On STRING shift to state 95
-- On LPAREN shift to state 96
-- On INT shift to state 99

State 95:
name -> name DOT STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name -> name DOT STRING 
-- On UNION reduce production name -> name DOT STRING 
-- On TO reduce production name -> name DOT STRING 
-- On THEN reduce production name -> name DOT STRING 
-- On SUBTRACT reduce production name -> name DOT STRING 
-- On SLASH reduce production name -> name DOT STRING 
-- On SEQ reduce production name -> name DOT STRING 
-- On SEMICOLON reduce production name -> name DOT STRING 
-- On RPAREN reduce production name -> name DOT STRING 
-- On REPEAT_COMPOSE reduce production name -> name DOT STRING 
-- On RBRACK reduce production name -> name DOT STRING 
-- On RBRACE reduce production name -> name DOT STRING 
-- On QUOTE reduce production name -> name DOT STRING 
-- On PLUS reduce production name -> name DOT STRING 
-- On OR reduce production name -> name DOT STRING 
-- On OD reduce production name -> name DOT STRING 
-- On NE reduce production name -> name DOT STRING 
-- On MULT reduce production name -> name DOT STRING 
-- On MOD reduce production name -> name DOT STRING 
-- On MINUS reduce production name -> name DOT STRING 
-- On LT reduce production name -> name DOT STRING 
-- On LPAREN reduce production name -> name DOT STRING 
-- On LE reduce production name -> name DOT STRING 
-- On LBRACK reduce production name -> name DOT STRING 
-- On INTERSECT reduce production name -> name DOT STRING 
-- On IN reduce production name -> name DOT STRING 
-- On GT reduce production name -> name DOT STRING 
-- On GE reduce production name -> name DOT STRING 
-- On FROM reduce production name -> name DOT STRING 
-- On FI reduce production name -> name DOT STRING 
-- On EXP reduce production name -> name DOT STRING 
-- On EXCLAM reduce production name -> name DOT STRING 
-- On EQUAL reduce production name -> name DOT STRING 
-- On EOF reduce production name -> name DOT STRING 
-- On END reduce production name -> name DOT STRING 
-- On ELSE reduce production name -> name DOT STRING 
-- On ELLIPSE reduce production name -> name DOT STRING 
-- On ELIF reduce production name -> name DOT STRING 
-- On DOUBLE_COLON reduce production name -> name DOT STRING 
-- On DOT reduce production name -> name DOT STRING 
-- On DO reduce production name -> name DOT STRING 
-- On COMMA reduce production name -> name DOT STRING 
-- On COLON reduce production name -> name DOT STRING 
-- On CARET reduce production name -> name DOT STRING 
-- On BY reduce production name -> name DOT STRING 
-- On AT reduce production name -> name DOT STRING 
-- On ASSIGN reduce production name -> name DOT STRING 
-- On ARROW reduce production name -> name DOT STRING 
-- On AND reduce production name -> name DOT STRING 
-- On AMPOP reduce production name -> name DOT STRING 
-- On AMPMUL reduce production name -> name DOT STRING 

State 96:
name -> name DOT LPAREN . expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 97

State 97:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
name -> name DOT LPAREN expr . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On RPAREN shift to state 98
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 98:
name -> name DOT LPAREN expr RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name -> name DOT LPAREN expr RPAREN 
-- On UNION reduce production name -> name DOT LPAREN expr RPAREN 
-- On TO reduce production name -> name DOT LPAREN expr RPAREN 
-- On THEN reduce production name -> name DOT LPAREN expr RPAREN 
-- On SUBTRACT reduce production name -> name DOT LPAREN expr RPAREN 
-- On SLASH reduce production name -> name DOT LPAREN expr RPAREN 
-- On SEQ reduce production name -> name DOT LPAREN expr RPAREN 
-- On SEMICOLON reduce production name -> name DOT LPAREN expr RPAREN 
-- On RPAREN reduce production name -> name DOT LPAREN expr RPAREN 
-- On REPEAT_COMPOSE reduce production name -> name DOT LPAREN expr RPAREN 
-- On RBRACK reduce production name -> name DOT LPAREN expr RPAREN 
-- On RBRACE reduce production name -> name DOT LPAREN expr RPAREN 
-- On QUOTE reduce production name -> name DOT LPAREN expr RPAREN 
-- On PLUS reduce production name -> name DOT LPAREN expr RPAREN 
-- On OR reduce production name -> name DOT LPAREN expr RPAREN 
-- On OD reduce production name -> name DOT LPAREN expr RPAREN 
-- On NE reduce production name -> name DOT LPAREN expr RPAREN 
-- On MULT reduce production name -> name DOT LPAREN expr RPAREN 
-- On MOD reduce production name -> name DOT LPAREN expr RPAREN 
-- On MINUS reduce production name -> name DOT LPAREN expr RPAREN 
-- On LT reduce production name -> name DOT LPAREN expr RPAREN 
-- On LPAREN reduce production name -> name DOT LPAREN expr RPAREN 
-- On LE reduce production name -> name DOT LPAREN expr RPAREN 
-- On LBRACK reduce production name -> name DOT LPAREN expr RPAREN 
-- On INTERSECT reduce production name -> name DOT LPAREN expr RPAREN 
-- On IN reduce production name -> name DOT LPAREN expr RPAREN 
-- On GT reduce production name -> name DOT LPAREN expr RPAREN 
-- On GE reduce production name -> name DOT LPAREN expr RPAREN 
-- On FROM reduce production name -> name DOT LPAREN expr RPAREN 
-- On FI reduce production name -> name DOT LPAREN expr RPAREN 
-- On EXP reduce production name -> name DOT LPAREN expr RPAREN 
-- On EXCLAM reduce production name -> name DOT LPAREN expr RPAREN 
-- On EQUAL reduce production name -> name DOT LPAREN expr RPAREN 
-- On EOF reduce production name -> name DOT LPAREN expr RPAREN 
-- On END reduce production name -> name DOT LPAREN expr RPAREN 
-- On ELSE reduce production name -> name DOT LPAREN expr RPAREN 
-- On ELLIPSE reduce production name -> name DOT LPAREN expr RPAREN 
-- On ELIF reduce production name -> name DOT LPAREN expr RPAREN 
-- On DOUBLE_COLON reduce production name -> name DOT LPAREN expr RPAREN 
-- On DOT reduce production name -> name DOT LPAREN expr RPAREN 
-- On DO reduce production name -> name DOT LPAREN expr RPAREN 
-- On COMMA reduce production name -> name DOT LPAREN expr RPAREN 
-- On COLON reduce production name -> name DOT LPAREN expr RPAREN 
-- On CARET reduce production name -> name DOT LPAREN expr RPAREN 
-- On BY reduce production name -> name DOT LPAREN expr RPAREN 
-- On AT reduce production name -> name DOT LPAREN expr RPAREN 
-- On ASSIGN reduce production name -> name DOT LPAREN expr RPAREN 
-- On ARROW reduce production name -> name DOT LPAREN expr RPAREN 
-- On AND reduce production name -> name DOT LPAREN expr RPAREN 
-- On AMPOP reduce production name -> name DOT LPAREN expr RPAREN 
-- On AMPMUL reduce production name -> name DOT LPAREN expr RPAREN 

State 99:
name -> name DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name -> name DOT INT 
-- On UNION reduce production name -> name DOT INT 
-- On TO reduce production name -> name DOT INT 
-- On THEN reduce production name -> name DOT INT 
-- On SUBTRACT reduce production name -> name DOT INT 
-- On SLASH reduce production name -> name DOT INT 
-- On SEQ reduce production name -> name DOT INT 
-- On SEMICOLON reduce production name -> name DOT INT 
-- On RPAREN reduce production name -> name DOT INT 
-- On REPEAT_COMPOSE reduce production name -> name DOT INT 
-- On RBRACK reduce production name -> name DOT INT 
-- On RBRACE reduce production name -> name DOT INT 
-- On QUOTE reduce production name -> name DOT INT 
-- On PLUS reduce production name -> name DOT INT 
-- On OR reduce production name -> name DOT INT 
-- On OD reduce production name -> name DOT INT 
-- On NE reduce production name -> name DOT INT 
-- On MULT reduce production name -> name DOT INT 
-- On MOD reduce production name -> name DOT INT 
-- On MINUS reduce production name -> name DOT INT 
-- On LT reduce production name -> name DOT INT 
-- On LPAREN reduce production name -> name DOT INT 
-- On LE reduce production name -> name DOT INT 
-- On LBRACK reduce production name -> name DOT INT 
-- On INTERSECT reduce production name -> name DOT INT 
-- On IN reduce production name -> name DOT INT 
-- On GT reduce production name -> name DOT INT 
-- On GE reduce production name -> name DOT INT 
-- On FROM reduce production name -> name DOT INT 
-- On FI reduce production name -> name DOT INT 
-- On EXP reduce production name -> name DOT INT 
-- On EXCLAM reduce production name -> name DOT INT 
-- On EQUAL reduce production name -> name DOT INT 
-- On EOF reduce production name -> name DOT INT 
-- On END reduce production name -> name DOT INT 
-- On ELSE reduce production name -> name DOT INT 
-- On ELLIPSE reduce production name -> name DOT INT 
-- On ELIF reduce production name -> name DOT INT 
-- On DOUBLE_COLON reduce production name -> name DOT INT 
-- On DOT reduce production name -> name DOT INT 
-- On DO reduce production name -> name DOT INT 
-- On COMMA reduce production name -> name DOT INT 
-- On COLON reduce production name -> name DOT INT 
-- On CARET reduce production name -> name DOT INT 
-- On BY reduce production name -> name DOT INT 
-- On AT reduce production name -> name DOT INT 
-- On ASSIGN reduce production name -> name DOT INT 
-- On ARROW reduce production name -> name DOT INT 
-- On AND reduce production name -> name DOT INT 
-- On AMPOP reduce production name -> name DOT INT 
-- On AMPMUL reduce production name -> name DOT INT 

State 100:
expr -> name functional_operator . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
functional_operator -> functional_operator . LPAREN exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On LPAREN shift to state 101
-- On WHILE reduce production expr -> name functional_operator 
-- On UNION reduce production expr -> name functional_operator 
-- On TO reduce production expr -> name functional_operator 
-- On THEN reduce production expr -> name functional_operator 
-- On SUBTRACT reduce production expr -> name functional_operator 
-- On SLASH reduce production expr -> name functional_operator 
-- On SEQ reduce production expr -> name functional_operator 
-- On SEMICOLON reduce production expr -> name functional_operator 
-- On RPAREN reduce production expr -> name functional_operator 
-- On REPEAT_COMPOSE reduce production expr -> name functional_operator 
-- On RBRACK reduce production expr -> name functional_operator 
-- On RBRACE reduce production expr -> name functional_operator 
-- On QUOTE reduce production expr -> name functional_operator 
-- On PLUS reduce production expr -> name functional_operator 
-- On OR reduce production expr -> name functional_operator 
-- On OD reduce production expr -> name functional_operator 
-- On NE reduce production expr -> name functional_operator 
-- On MULT reduce production expr -> name functional_operator 
-- On MOD reduce production expr -> name functional_operator 
-- On MINUS reduce production expr -> name functional_operator 
-- On LT reduce production expr -> name functional_operator 
-- On LE reduce production expr -> name functional_operator 
-- On INTERSECT reduce production expr -> name functional_operator 
-- On GT reduce production expr -> name functional_operator 
-- On GE reduce production expr -> name functional_operator 
-- On FI reduce production expr -> name functional_operator 
-- On EXP reduce production expr -> name functional_operator 
-- On EXCLAM reduce production expr -> name functional_operator 
-- On EQUAL reduce production expr -> name functional_operator 
-- On EOF reduce production expr -> name functional_operator 
-- On END reduce production expr -> name functional_operator 
-- On ELSE reduce production expr -> name functional_operator 
-- On ELLIPSE reduce production expr -> name functional_operator 
-- On ELIF reduce production expr -> name functional_operator 
-- On DO reduce production expr -> name functional_operator 
-- On COMMA reduce production expr -> name functional_operator 
-- On COLON reduce production expr -> name functional_operator 
-- On CARET reduce production expr -> name functional_operator 
-- On BY reduce production expr -> name functional_operator 
-- On AT reduce production expr -> name functional_operator 
-- On ARROW reduce production expr -> name functional_operator 
-- On AND reduce production expr -> name functional_operator 
-- On AMPOP reduce production expr -> name functional_operator 
-- On AMPMUL reduce production expr -> name functional_operator 

State 101:
functional_operator -> functional_operator LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 102
-- On expr shift to state 93
-- On RPAREN reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 

State 102:
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
functional_operator -> functional_operator LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On RPAREN shift to state 103
-- On COMMA shift to state 40

State 103:
functional_operator -> functional_operator LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On UNION reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On TO reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On THEN reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On SUBTRACT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On SLASH reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On SEQ reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On SEMICOLON reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On RPAREN reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On REPEAT_COMPOSE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On RBRACK reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On RBRACE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On QUOTE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On PLUS reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On OR reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On OD reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On NE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On MULT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On MOD reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On MINUS reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On LT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On LPAREN reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On LE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On INTERSECT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On GT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On GE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On FI reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On EXP reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On EXCLAM reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On EQUAL reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On EOF reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On END reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On ELSE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On ELLIPSE reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On ELIF reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On DO reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On COMMA reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On COLON reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On CARET reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On BY reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On AT reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On ARROW reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On AND reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On AMPOP reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 
-- On AMPMUL reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN 

State 104:
expr -> LBRACE exprseq . RBRACE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RBRACE COMMA ]
-- On RBRACE shift to state 105
-- On COMMA shift to state 40

State 105:
expr -> LBRACE exprseq RBRACE . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> LBRACE exprseq RBRACE 
-- On UNION reduce production expr -> LBRACE exprseq RBRACE 
-- On TO reduce production expr -> LBRACE exprseq RBRACE 
-- On THEN reduce production expr -> LBRACE exprseq RBRACE 
-- On SUBTRACT reduce production expr -> LBRACE exprseq RBRACE 
-- On SLASH reduce production expr -> LBRACE exprseq RBRACE 
-- On SEQ reduce production expr -> LBRACE exprseq RBRACE 
-- On SEMICOLON reduce production expr -> LBRACE exprseq RBRACE 
-- On RPAREN reduce production expr -> LBRACE exprseq RBRACE 
-- On REPEAT_COMPOSE reduce production expr -> LBRACE exprseq RBRACE 
-- On RBRACK reduce production expr -> LBRACE exprseq RBRACE 
-- On RBRACE reduce production expr -> LBRACE exprseq RBRACE 
-- On QUOTE reduce production expr -> LBRACE exprseq RBRACE 
-- On PLUS reduce production expr -> LBRACE exprseq RBRACE 
-- On OR reduce production expr -> LBRACE exprseq RBRACE 
-- On OD reduce production expr -> LBRACE exprseq RBRACE 
-- On NE reduce production expr -> LBRACE exprseq RBRACE 
-- On MULT reduce production expr -> LBRACE exprseq RBRACE 
-- On MOD reduce production expr -> LBRACE exprseq RBRACE 
-- On MINUS reduce production expr -> LBRACE exprseq RBRACE 
-- On LT reduce production expr -> LBRACE exprseq RBRACE 
-- On LE reduce production expr -> LBRACE exprseq RBRACE 
-- On INTERSECT reduce production expr -> LBRACE exprseq RBRACE 
-- On GT reduce production expr -> LBRACE exprseq RBRACE 
-- On GE reduce production expr -> LBRACE exprseq RBRACE 
-- On FI reduce production expr -> LBRACE exprseq RBRACE 
-- On EXP reduce production expr -> LBRACE exprseq RBRACE 
-- On EXCLAM reduce production expr -> LBRACE exprseq RBRACE 
-- On EQUAL reduce production expr -> LBRACE exprseq RBRACE 
-- On EOF reduce production expr -> LBRACE exprseq RBRACE 
-- On END reduce production expr -> LBRACE exprseq RBRACE 
-- On ELSE reduce production expr -> LBRACE exprseq RBRACE 
-- On ELLIPSE reduce production expr -> LBRACE exprseq RBRACE 
-- On ELIF reduce production expr -> LBRACE exprseq RBRACE 
-- On DO reduce production expr -> LBRACE exprseq RBRACE 
-- On COMMA reduce production expr -> LBRACE exprseq RBRACE 
-- On COLON reduce production expr -> LBRACE exprseq RBRACE 
-- On CARET reduce production expr -> LBRACE exprseq RBRACE 
-- On BY reduce production expr -> LBRACE exprseq RBRACE 
-- On AT reduce production expr -> LBRACE exprseq RBRACE 
-- On ARROW reduce production expr -> LBRACE exprseq RBRACE 
-- On AND reduce production expr -> LBRACE exprseq RBRACE 
-- On AMPOP reduce production expr -> LBRACE exprseq RBRACE 
-- On AMPMUL reduce production expr -> LBRACE exprseq RBRACE 

State 106:
expr -> LBRACK exprseq . RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RBRACK COMMA ]
-- On RBRACK shift to state 107
-- On COMMA shift to state 40

State 107:
expr -> LBRACK exprseq RBRACK . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> LBRACK exprseq RBRACK 
-- On UNION reduce production expr -> LBRACK exprseq RBRACK 
-- On TO reduce production expr -> LBRACK exprseq RBRACK 
-- On THEN reduce production expr -> LBRACK exprseq RBRACK 
-- On SUBTRACT reduce production expr -> LBRACK exprseq RBRACK 
-- On SLASH reduce production expr -> LBRACK exprseq RBRACK 
-- On SEQ reduce production expr -> LBRACK exprseq RBRACK 
-- On SEMICOLON reduce production expr -> LBRACK exprseq RBRACK 
-- On RPAREN reduce production expr -> LBRACK exprseq RBRACK 
-- On REPEAT_COMPOSE reduce production expr -> LBRACK exprseq RBRACK 
-- On RBRACK reduce production expr -> LBRACK exprseq RBRACK 
-- On RBRACE reduce production expr -> LBRACK exprseq RBRACK 
-- On QUOTE reduce production expr -> LBRACK exprseq RBRACK 
-- On PLUS reduce production expr -> LBRACK exprseq RBRACK 
-- On OR reduce production expr -> LBRACK exprseq RBRACK 
-- On OD reduce production expr -> LBRACK exprseq RBRACK 
-- On NE reduce production expr -> LBRACK exprseq RBRACK 
-- On MULT reduce production expr -> LBRACK exprseq RBRACK 
-- On MOD reduce production expr -> LBRACK exprseq RBRACK 
-- On MINUS reduce production expr -> LBRACK exprseq RBRACK 
-- On LT reduce production expr -> LBRACK exprseq RBRACK 
-- On LE reduce production expr -> LBRACK exprseq RBRACK 
-- On INTERSECT reduce production expr -> LBRACK exprseq RBRACK 
-- On GT reduce production expr -> LBRACK exprseq RBRACK 
-- On GE reduce production expr -> LBRACK exprseq RBRACK 
-- On FI reduce production expr -> LBRACK exprseq RBRACK 
-- On EXP reduce production expr -> LBRACK exprseq RBRACK 
-- On EXCLAM reduce production expr -> LBRACK exprseq RBRACK 
-- On EQUAL reduce production expr -> LBRACK exprseq RBRACK 
-- On EOF reduce production expr -> LBRACK exprseq RBRACK 
-- On END reduce production expr -> LBRACK exprseq RBRACK 
-- On ELSE reduce production expr -> LBRACK exprseq RBRACK 
-- On ELLIPSE reduce production expr -> LBRACK exprseq RBRACK 
-- On ELIF reduce production expr -> LBRACK exprseq RBRACK 
-- On DO reduce production expr -> LBRACK exprseq RBRACK 
-- On COMMA reduce production expr -> LBRACK exprseq RBRACK 
-- On COLON reduce production expr -> LBRACK exprseq RBRACK 
-- On CARET reduce production expr -> LBRACK exprseq RBRACK 
-- On BY reduce production expr -> LBRACK exprseq RBRACK 
-- On AT reduce production expr -> LBRACK exprseq RBRACK 
-- On ARROW reduce production expr -> LBRACK exprseq RBRACK 
-- On AND reduce production expr -> LBRACK exprseq RBRACK 
-- On AMPOP reduce production expr -> LBRACK exprseq RBRACK 
-- On AMPMUL reduce production expr -> LBRACK exprseq RBRACK 

State 108:
expr -> LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
-- On RPAREN shift to state 109
-- On COMMA shift to state 40

State 109:
expr -> LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> LPAREN exprseq RPAREN 
-- On UNION reduce production expr -> LPAREN exprseq RPAREN 
-- On TO reduce production expr -> LPAREN exprseq RPAREN 
-- On THEN reduce production expr -> LPAREN exprseq RPAREN 
-- On SUBTRACT reduce production expr -> LPAREN exprseq RPAREN 
-- On SLASH reduce production expr -> LPAREN exprseq RPAREN 
-- On SEQ reduce production expr -> LPAREN exprseq RPAREN 
-- On SEMICOLON reduce production expr -> LPAREN exprseq RPAREN 
-- On RPAREN reduce production expr -> LPAREN exprseq RPAREN 
-- On REPEAT_COMPOSE reduce production expr -> LPAREN exprseq RPAREN 
-- On RBRACK reduce production expr -> LPAREN exprseq RPAREN 
-- On RBRACE reduce production expr -> LPAREN exprseq RPAREN 
-- On QUOTE reduce production expr -> LPAREN exprseq RPAREN 
-- On PLUS reduce production expr -> LPAREN exprseq RPAREN 
-- On OR reduce production expr -> LPAREN exprseq RPAREN 
-- On OD reduce production expr -> LPAREN exprseq RPAREN 
-- On NE reduce production expr -> LPAREN exprseq RPAREN 
-- On MULT reduce production expr -> LPAREN exprseq RPAREN 
-- On MOD reduce production expr -> LPAREN exprseq RPAREN 
-- On MINUS reduce production expr -> LPAREN exprseq RPAREN 
-- On LT reduce production expr -> LPAREN exprseq RPAREN 
-- On LE reduce production expr -> LPAREN exprseq RPAREN 
-- On INTERSECT reduce production expr -> LPAREN exprseq RPAREN 
-- On GT reduce production expr -> LPAREN exprseq RPAREN 
-- On GE reduce production expr -> LPAREN exprseq RPAREN 
-- On FI reduce production expr -> LPAREN exprseq RPAREN 
-- On EXP reduce production expr -> LPAREN exprseq RPAREN 
-- On EXCLAM reduce production expr -> LPAREN exprseq RPAREN 
-- On EQUAL reduce production expr -> LPAREN exprseq RPAREN 
-- On EOF reduce production expr -> LPAREN exprseq RPAREN 
-- On END reduce production expr -> LPAREN exprseq RPAREN 
-- On ELSE reduce production expr -> LPAREN exprseq RPAREN 
-- On ELLIPSE reduce production expr -> LPAREN exprseq RPAREN 
-- On ELIF reduce production expr -> LPAREN exprseq RPAREN 
-- On DO reduce production expr -> LPAREN exprseq RPAREN 
-- On COMMA reduce production expr -> LPAREN exprseq RPAREN 
-- On COLON reduce production expr -> LPAREN exprseq RPAREN 
-- On CARET reduce production expr -> LPAREN exprseq RPAREN 
-- On BY reduce production expr -> LPAREN exprseq RPAREN 
-- On AT reduce production expr -> LPAREN exprseq RPAREN 
-- On ARROW reduce production expr -> LPAREN exprseq RPAREN 
-- On AND reduce production expr -> LPAREN exprseq RPAREN 
-- On AMPOP reduce production expr -> LPAREN exprseq RPAREN 
-- On AMPMUL reduce production expr -> LPAREN exprseq RPAREN 

State 110:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> NOT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> NOT expr 
-- On TO reduce production expr -> NOT expr 
-- On THEN reduce production expr -> NOT expr 
-- On SEMICOLON reduce production expr -> NOT expr 
-- On RPAREN reduce production expr -> NOT expr 
-- On RBRACK reduce production expr -> NOT expr 
-- On RBRACE reduce production expr -> NOT expr 
-- On QUOTE reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On OD reduce production expr -> NOT expr 
-- On FI reduce production expr -> NOT expr 
-- On EOF reduce production expr -> NOT expr 
-- On END reduce production expr -> NOT expr 
-- On ELSE reduce production expr -> NOT expr 
-- On ELIF reduce production expr -> NOT expr 
-- On DO reduce production expr -> NOT expr 
-- On COMMA reduce production expr -> NOT expr 
-- On COLON reduce production expr -> NOT expr 
-- On BY reduce production expr -> NOT expr 
-- On ARROW reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 111:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> PLUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> PLUS expr 
-- On TO reduce production expr -> PLUS expr 
-- On THEN reduce production expr -> PLUS expr 
-- On SEQ reduce production expr -> PLUS expr 
-- On SEMICOLON reduce production expr -> PLUS expr 
-- On RPAREN reduce production expr -> PLUS expr 
-- On RBRACK reduce production expr -> PLUS expr 
-- On RBRACE reduce production expr -> PLUS expr 
-- On QUOTE reduce production expr -> PLUS expr 
-- On OR reduce production expr -> PLUS expr 
-- On OD reduce production expr -> PLUS expr 
-- On NE reduce production expr -> PLUS expr 
-- On MOD reduce production expr -> PLUS expr 
-- On LT reduce production expr -> PLUS expr 
-- On LE reduce production expr -> PLUS expr 
-- On GT reduce production expr -> PLUS expr 
-- On GE reduce production expr -> PLUS expr 
-- On FI reduce production expr -> PLUS expr 
-- On EQUAL reduce production expr -> PLUS expr 
-- On EOF reduce production expr -> PLUS expr 
-- On END reduce production expr -> PLUS expr 
-- On ELSE reduce production expr -> PLUS expr 
-- On ELLIPSE reduce production expr -> PLUS expr 
-- On ELIF reduce production expr -> PLUS expr 
-- On DO reduce production expr -> PLUS expr 
-- On COMMA reduce production expr -> PLUS expr 
-- On COLON reduce production expr -> PLUS expr 
-- On BY reduce production expr -> PLUS expr 
-- On ARROW reduce production expr -> PLUS expr 
-- On AND reduce production expr -> PLUS expr 

State 112:
exprseq -> exprseq . COMMA expr [ RBRACK COMMA ]
name -> name LBRACK exprseq . RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On RBRACK shift to state 113
-- On COMMA shift to state 40

State 113:
name -> name LBRACK exprseq RBRACK . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production name -> name LBRACK exprseq RBRACK 
-- On UNION reduce production name -> name LBRACK exprseq RBRACK 
-- On TO reduce production name -> name LBRACK exprseq RBRACK 
-- On THEN reduce production name -> name LBRACK exprseq RBRACK 
-- On SUBTRACT reduce production name -> name LBRACK exprseq RBRACK 
-- On SLASH reduce production name -> name LBRACK exprseq RBRACK 
-- On SEQ reduce production name -> name LBRACK exprseq RBRACK 
-- On SEMICOLON reduce production name -> name LBRACK exprseq RBRACK 
-- On RPAREN reduce production name -> name LBRACK exprseq RBRACK 
-- On REPEAT_COMPOSE reduce production name -> name LBRACK exprseq RBRACK 
-- On RBRACK reduce production name -> name LBRACK exprseq RBRACK 
-- On RBRACE reduce production name -> name LBRACK exprseq RBRACK 
-- On QUOTE reduce production name -> name LBRACK exprseq RBRACK 
-- On PLUS reduce production name -> name LBRACK exprseq RBRACK 
-- On OR reduce production name -> name LBRACK exprseq RBRACK 
-- On OD reduce production name -> name LBRACK exprseq RBRACK 
-- On NE reduce production name -> name LBRACK exprseq RBRACK 
-- On MULT reduce production name -> name LBRACK exprseq RBRACK 
-- On MOD reduce production name -> name LBRACK exprseq RBRACK 
-- On MINUS reduce production name -> name LBRACK exprseq RBRACK 
-- On LT reduce production name -> name LBRACK exprseq RBRACK 
-- On LPAREN reduce production name -> name LBRACK exprseq RBRACK 
-- On LE reduce production name -> name LBRACK exprseq RBRACK 
-- On LBRACK reduce production name -> name LBRACK exprseq RBRACK 
-- On INTERSECT reduce production name -> name LBRACK exprseq RBRACK 
-- On IN reduce production name -> name LBRACK exprseq RBRACK 
-- On GT reduce production name -> name LBRACK exprseq RBRACK 
-- On GE reduce production name -> name LBRACK exprseq RBRACK 
-- On FROM reduce production name -> name LBRACK exprseq RBRACK 
-- On FI reduce production name -> name LBRACK exprseq RBRACK 
-- On EXP reduce production name -> name LBRACK exprseq RBRACK 
-- On EXCLAM reduce production name -> name LBRACK exprseq RBRACK 
-- On EQUAL reduce production name -> name LBRACK exprseq RBRACK 
-- On EOF reduce production name -> name LBRACK exprseq RBRACK 
-- On END reduce production name -> name LBRACK exprseq RBRACK 
-- On ELSE reduce production name -> name LBRACK exprseq RBRACK 
-- On ELLIPSE reduce production name -> name LBRACK exprseq RBRACK 
-- On ELIF reduce production name -> name LBRACK exprseq RBRACK 
-- On DOUBLE_COLON reduce production name -> name LBRACK exprseq RBRACK 
-- On DOT reduce production name -> name LBRACK exprseq RBRACK 
-- On DO reduce production name -> name LBRACK exprseq RBRACK 
-- On COMMA reduce production name -> name LBRACK exprseq RBRACK 
-- On COLON reduce production name -> name LBRACK exprseq RBRACK 
-- On CARET reduce production name -> name LBRACK exprseq RBRACK 
-- On BY reduce production name -> name LBRACK exprseq RBRACK 
-- On AT reduce production name -> name LBRACK exprseq RBRACK 
-- On ASSIGN reduce production name -> name LBRACK exprseq RBRACK 
-- On ARROW reduce production name -> name LBRACK exprseq RBRACK 
-- On AND reduce production name -> name LBRACK exprseq RBRACK 
-- On AMPOP reduce production name -> name LBRACK exprseq RBRACK 
-- On AMPMUL reduce production name -> name LBRACK exprseq RBRACK 

State 114:
name -> name . DOT INT [ SEMICOLON LBRACK DOT COMMA ]
name -> name . DOT STRING [ SEMICOLON LBRACK DOT COMMA ]
name -> name . DOT LPAREN expr RPAREN [ SEMICOLON LBRACK DOT COMMA ]
name -> name . LBRACK exprseq RBRACK [ SEMICOLON LBRACK DOT COMMA ]
nameseq -> name . [ SEMICOLON COMMA ]
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On SEMICOLON reduce production nameseq -> name 
-- On COMMA reduce production nameseq -> name 

State 115:
globals_of_proc -> GLOBAL . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 116
-- On name_string shift to state 23
-- On name shift to state 114
-- On SEMICOLON reduce production nameseq -> 
-- On COMMA reduce production nameseq -> 

State 116:
globals_of_proc -> GLOBAL nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
-- On SEMICOLON shift to state 117
-- On COMMA shift to state 22

State 117:
globals_of_proc -> GLOBAL nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On TO reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On SUBTRACT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On STRING reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On STOP reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On SEQ reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On SEMICOLON reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On SAVE reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On READ reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On QUOTED_STRING reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On QUOTE reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On QUIT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On PROC reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On PLUS reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On OPTION reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On NOT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On LPAREN reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On LOCAL reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On LBRACK reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On LBRACE reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On INT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On IF reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On ID reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On FROM reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On FOR reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On END reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On DOT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On DO reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On COMMENT reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On COMMA reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On COLON reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On BY reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 
-- On ASSIGN reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON 

State 118:
decls_proc -> locals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
decls_proc -> locals_of_proc . globals_of_proc [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On GLOBAL shift to state 115
-- On globals_of_proc shift to state 119
-- On WHILE reduce production decls_proc -> locals_of_proc 
-- On TO reduce production decls_proc -> locals_of_proc 
-- On SUBTRACT reduce production decls_proc -> locals_of_proc 
-- On STRING reduce production decls_proc -> locals_of_proc 
-- On STOP reduce production decls_proc -> locals_of_proc 
-- On SEQ reduce production decls_proc -> locals_of_proc 
-- On SEMICOLON reduce production decls_proc -> locals_of_proc 
-- On SAVE reduce production decls_proc -> locals_of_proc 
-- On READ reduce production decls_proc -> locals_of_proc 
-- On QUOTED_STRING reduce production decls_proc -> locals_of_proc 
-- On QUOTE reduce production decls_proc -> locals_of_proc 
-- On QUIT reduce production decls_proc -> locals_of_proc 
-- On PROC reduce production decls_proc -> locals_of_proc 
-- On PLUS reduce production decls_proc -> locals_of_proc 
-- On OPTION reduce production decls_proc -> locals_of_proc 
-- On NOT reduce production decls_proc -> locals_of_proc 
-- On LPAREN reduce production decls_proc -> locals_of_proc 
-- On LBRACK reduce production decls_proc -> locals_of_proc 
-- On LBRACE reduce production decls_proc -> locals_of_proc 
-- On INT reduce production decls_proc -> locals_of_proc 
-- On IF reduce production decls_proc -> locals_of_proc 
-- On ID reduce production decls_proc -> locals_of_proc 
-- On FROM reduce production decls_proc -> locals_of_proc 
-- On FOR reduce production decls_proc -> locals_of_proc 
-- On END reduce production decls_proc -> locals_of_proc 
-- On DOT reduce production decls_proc -> locals_of_proc 
-- On DO reduce production decls_proc -> locals_of_proc 
-- On COMMENT reduce production decls_proc -> locals_of_proc 
-- On COMMA reduce production decls_proc -> locals_of_proc 
-- On COLON reduce production decls_proc -> locals_of_proc 
-- On BY reduce production decls_proc -> locals_of_proc 
-- On ASSIGN reduce production decls_proc -> locals_of_proc 

State 119:
decls_proc -> locals_of_proc globals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On TO reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On SUBTRACT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On STRING reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On STOP reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On SEQ reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On SEMICOLON reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On SAVE reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On READ reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On QUOTED_STRING reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On QUOTE reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On QUIT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On PROC reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On PLUS reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On OPTION reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On NOT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On LPAREN reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On LBRACK reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On LBRACE reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On INT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On IF reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On ID reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On FROM reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On FOR reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On END reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On DOT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On DO reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On COMMENT reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On COMMA reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On COLON reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On BY reduce production decls_proc -> locals_of_proc globals_of_proc 
-- On ASSIGN reduce production decls_proc -> locals_of_proc globals_of_proc 

State 120:
decls_proc -> globals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
decls_proc -> globals_of_proc . locals_of_proc [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On LOCAL shift to state 19
-- On locals_of_proc shift to state 121
-- On WHILE reduce production decls_proc -> globals_of_proc 
-- On TO reduce production decls_proc -> globals_of_proc 
-- On SUBTRACT reduce production decls_proc -> globals_of_proc 
-- On STRING reduce production decls_proc -> globals_of_proc 
-- On STOP reduce production decls_proc -> globals_of_proc 
-- On SEQ reduce production decls_proc -> globals_of_proc 
-- On SEMICOLON reduce production decls_proc -> globals_of_proc 
-- On SAVE reduce production decls_proc -> globals_of_proc 
-- On READ reduce production decls_proc -> globals_of_proc 
-- On QUOTED_STRING reduce production decls_proc -> globals_of_proc 
-- On QUOTE reduce production decls_proc -> globals_of_proc 
-- On QUIT reduce production decls_proc -> globals_of_proc 
-- On PROC reduce production decls_proc -> globals_of_proc 
-- On PLUS reduce production decls_proc -> globals_of_proc 
-- On OPTION reduce production decls_proc -> globals_of_proc 
-- On NOT reduce production decls_proc -> globals_of_proc 
-- On LPAREN reduce production decls_proc -> globals_of_proc 
-- On LBRACK reduce production decls_proc -> globals_of_proc 
-- On LBRACE reduce production decls_proc -> globals_of_proc 
-- On INT reduce production decls_proc -> globals_of_proc 
-- On IF reduce production decls_proc -> globals_of_proc 
-- On ID reduce production decls_proc -> globals_of_proc 
-- On FROM reduce production decls_proc -> globals_of_proc 
-- On FOR reduce production decls_proc -> globals_of_proc 
-- On END reduce production decls_proc -> globals_of_proc 
-- On DOT reduce production decls_proc -> globals_of_proc 
-- On DO reduce production decls_proc -> globals_of_proc 
-- On COMMENT reduce production decls_proc -> globals_of_proc 
-- On COMMA reduce production decls_proc -> globals_of_proc 
-- On COLON reduce production decls_proc -> globals_of_proc 
-- On BY reduce production decls_proc -> globals_of_proc 
-- On ASSIGN reduce production decls_proc -> globals_of_proc 

State 121:
decls_proc -> globals_of_proc locals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On TO reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On SUBTRACT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On STRING reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On STOP reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On SEQ reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On SEMICOLON reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On SAVE reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On READ reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On QUOTED_STRING reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On QUOTE reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On QUIT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On PROC reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On PLUS reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On OPTION reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On NOT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On LPAREN reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On LBRACK reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On LBRACE reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On INT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On IF reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On ID reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On FROM reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On FOR reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On END reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On DOT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On DO reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On COMMENT reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On COMMA reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On COLON reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On BY reduce production decls_proc -> globals_of_proc locals_of_proc 
-- On ASSIGN reduce production decls_proc -> globals_of_proc locals_of_proc 

State 122:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc . options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On OPTION shift to state 123
-- On options_of_proc shift to state 126
-- On WHILE reduce production options_of_proc -> 
-- On TO reduce production options_of_proc -> 
-- On SUBTRACT reduce production options_of_proc -> 
-- On STRING reduce production options_of_proc -> 
-- On STOP reduce production options_of_proc -> 
-- On SEQ reduce production options_of_proc -> 
-- On SEMICOLON reduce production options_of_proc -> 
-- On SAVE reduce production options_of_proc -> 
-- On READ reduce production options_of_proc -> 
-- On QUOTED_STRING reduce production options_of_proc -> 
-- On QUOTE reduce production options_of_proc -> 
-- On QUIT reduce production options_of_proc -> 
-- On PROC reduce production options_of_proc -> 
-- On PLUS reduce production options_of_proc -> 
-- On NOT reduce production options_of_proc -> 
-- On LPAREN reduce production options_of_proc -> 
-- On LBRACK reduce production options_of_proc -> 
-- On LBRACE reduce production options_of_proc -> 
-- On INT reduce production options_of_proc -> 
-- On IF reduce production options_of_proc -> 
-- On ID reduce production options_of_proc -> 
-- On FROM reduce production options_of_proc -> 
-- On FOR reduce production options_of_proc -> 
-- On END reduce production options_of_proc -> 
-- On DOT reduce production options_of_proc -> 
-- On DO reduce production options_of_proc -> 
-- On COMMENT reduce production options_of_proc -> 
-- On COMMA reduce production options_of_proc -> 
-- On COLON reduce production options_of_proc -> 
-- On BY reduce production options_of_proc -> 
-- On ASSIGN reduce production options_of_proc -> 

State 123:
options_of_proc -> OPTION . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 124
-- On name_string shift to state 23
-- On name shift to state 114
-- On SEMICOLON reduce production nameseq -> 
-- On COMMA reduce production nameseq -> 

State 124:
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
options_of_proc -> OPTION nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On SEMICOLON shift to state 125
-- On COMMA shift to state 22

State 125:
options_of_proc -> OPTION nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On TO reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On SUBTRACT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On STRING reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On STOP reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On SEQ reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On SEMICOLON reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On SAVE reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On READ reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On QUOTED_STRING reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On QUOTE reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On QUIT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On PROC reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On PLUS reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On NOT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On LPAREN reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On LBRACK reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On LBRACE reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On INT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On IF reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On ID reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On FROM reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On FOR reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On END reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On DOT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On DO reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On COMMENT reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On COMMA reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On COLON reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On BY reduce production options_of_proc -> OPTION nameseq SEMICOLON 
-- On ASSIGN reduce production options_of_proc -> OPTION nameseq SEMICOLON 

State 126:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc . statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On statseq shift to state 127
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On END reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 127:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq . END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON END COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON END COLON ]
-- On SEMICOLON shift to state 2
-- On END shift to state 128
-- On COLON shift to state 129

State 128:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On UNION reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On TO reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On THEN reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On SUBTRACT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On SLASH reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On SEQ reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On SEMICOLON reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On RPAREN reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On REPEAT_COMPOSE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On RBRACK reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On RBRACE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On QUOTE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On PLUS reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On OR reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On OD reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On NE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On MULT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On MOD reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On MINUS reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On LT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On LE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On INTERSECT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On GT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On GE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On FI reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On EXP reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On EXCLAM reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On EQUAL reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On EOF reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On END reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On ELSE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On ELLIPSE reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On ELIF reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On DO reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On COMMA reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On COLON reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On CARET reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On BY reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On AT reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On ARROW reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On AND reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On AMPOP reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 
-- On AMPMUL reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END 

State 129:
statseq -> statseq COLON . comments stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On comments shift to state 130
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On FI reduce production comments -> 
-- On EOF reduce production comments -> 
-- On END reduce production comments -> 
-- On ELSE reduce production comments -> 
-- On ELIF reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 130:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> statseq COLON comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 197
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
-- On SEMICOLON reduce production stat -> 
-- On OD reduce production stat -> 
-- On FI reduce production stat -> 
-- On EOF reduce production stat -> 
-- On END reduce production stat -> 
-- On ELSE reduce production stat -> 
-- On ELIF reduce production stat -> 
-- On COMMA reduce production nameseq -> 
-- On COLON reduce production stat -> 
-- On ASSIGN reduce production nameseq -> 

State 131:
for_without_from -> TO . expr BY expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> TO . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 132

State 132:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
for_without_from -> TO expr . BY expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> TO expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On BY shift to state 193
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 196

State 133:
for_body -> DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On statseq shift to state 134
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 134:
for_body -> DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
-- On SEMICOLON shift to state 2
-- On OD shift to state 135
-- On COLON shift to state 129

State 135:
for_body -> DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_body -> DO statseq OD 
-- On OD reduce production for_body -> DO statseq OD 
-- On FI reduce production for_body -> DO statseq OD 
-- On EOF reduce production for_body -> DO statseq OD 
-- On END reduce production for_body -> DO statseq OD 
-- On ELSE reduce production for_body -> DO statseq OD 
-- On ELIF reduce production for_body -> DO statseq OD 
-- On COLON reduce production for_body -> DO statseq OD 

State 136:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 175
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
-- On SEMICOLON reduce production stat -> 
-- On OD reduce production stat -> 
-- On FI reduce production stat -> 
-- On EOF reduce production stat -> 
-- On END reduce production stat -> 
-- On ELSE reduce production stat -> 
-- On ELIF reduce production stat -> 
-- On COMMA reduce production nameseq -> 
-- On COLON reduce production stat -> 
-- On ASSIGN reduce production nameseq -> 

State 137:
stat -> STOP . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> STOP 
-- On OD reduce production stat -> STOP 
-- On FI reduce production stat -> STOP 
-- On EOF reduce production stat -> STOP 
-- On END reduce production stat -> STOP 
-- On ELSE reduce production stat -> STOP 
-- On ELIF reduce production stat -> STOP 
-- On COLON reduce production stat -> STOP 

State 138:
stat -> SAVE . name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
stat -> SAVE . nameseq COMMA name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 139
-- On name_string shift to state 142
-- On name shift to state 114
-- On COMMA reduce production nameseq -> 

State 139:
nameseq -> nameseq . COMMA name [ COMMA ]
stat -> SAVE nameseq . COMMA name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On COMMA shift to state 140

State 140:
nameseq -> nameseq COMMA . name [ COMMA ]
stat -> SAVE nameseq COMMA . name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 141
-- On name shift to state 24

State 141:
name -> name_string . [ LBRACK DOT COMMA ]
stat -> SAVE nameseq COMMA name_string . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> SAVE nameseq COMMA name_string 
-- On OD reduce production stat -> SAVE nameseq COMMA name_string 
-- On LBRACK reduce production name -> name_string 
-- On FI reduce production stat -> SAVE nameseq COMMA name_string 
-- On EOF reduce production stat -> SAVE nameseq COMMA name_string 
-- On END reduce production stat -> SAVE nameseq COMMA name_string 
-- On ELSE reduce production stat -> SAVE nameseq COMMA name_string 
-- On ELIF reduce production stat -> SAVE nameseq COMMA name_string 
-- On DOT reduce production name -> name_string 
-- On COMMA reduce production name -> name_string 
-- On COLON reduce production stat -> SAVE nameseq COMMA name_string 

State 142:
name -> name_string . [ LBRACK DOT COMMA ]
stat -> SAVE name_string . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> SAVE name_string 
-- On OD reduce production stat -> SAVE name_string 
-- On LBRACK reduce production name -> name_string 
-- On FI reduce production stat -> SAVE name_string 
-- On EOF reduce production stat -> SAVE name_string 
-- On END reduce production stat -> SAVE name_string 
-- On ELSE reduce production stat -> SAVE name_string 
-- On ELIF reduce production stat -> SAVE name_string 
-- On DOT reduce production name -> name_string 
-- On COMMA reduce production name -> name_string 
-- On COLON reduce production stat -> SAVE name_string 

State 143:
stat -> READ . expr [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 144

State 144:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
stat -> READ expr . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On SEMICOLON reduce production stat -> READ expr 
-- On OD reduce production stat -> READ expr 
-- On FI reduce production stat -> READ expr 
-- On EOF reduce production stat -> READ expr 
-- On END reduce production stat -> READ expr 
-- On ELSE reduce production stat -> READ expr 
-- On ELIF reduce production stat -> READ expr 
-- On COLON reduce production stat -> READ expr 

State 145:
stat -> QUIT . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> QUIT 
-- On OD reduce production stat -> QUIT 
-- On FI reduce production stat -> QUIT 
-- On EOF reduce production stat -> QUIT 
-- On END reduce production stat -> QUIT 
-- On ELSE reduce production stat -> QUIT 
-- On ELIF reduce production stat -> QUIT 
-- On COLON reduce production stat -> QUIT 

State 146:
ifpart -> IF . expr THEN statseq [ FI ELSE ELIF ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 147

State 147:
expr -> expr . ARROW expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
ifpart -> IF expr . THEN statseq [ FI ELSE ELIF ]
-- On UNION shift to state 42
-- On THEN shift to state 148
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 148:
ifpart -> IF expr THEN . statseq [ FI ELSE ELIF ]
-- On statseq shift to state 149
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On FI reduce production comments -> 
-- On ELSE reduce production comments -> 
-- On ELIF reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 149:
ifpart -> IF expr THEN statseq . [ FI ELSE ELIF ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
-- On SEMICOLON shift to state 2
-- On COLON shift to state 129
-- On FI reduce production ifpart -> IF expr THEN statseq 
-- On ELSE reduce production ifpart -> IF expr THEN statseq 
-- On ELIF reduce production ifpart -> IF expr THEN statseq 

State 150:
for_without_name -> FROM . expr for_without_from [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 151

State 151:
expr -> expr . ARROW expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
for_without_name -> FROM expr . for_without_from [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On TO shift to state 131
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On BY shift to state 152
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_without_from shift to state 158
-- On for_body shift to state 159

State 152:
for_without_from -> BY . expr TO expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> BY . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 153

State 153:
expr -> expr . ARROW expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> BY expr . TO expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> BY expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On TO shift to state 154
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 157

State 154:
for_without_from -> BY expr TO . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 155

State 155:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> BY expr TO expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 156

State 156:
for_without_from -> BY expr TO expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_from -> BY expr TO expr for_body 
-- On OD reduce production for_without_from -> BY expr TO expr for_body 
-- On FI reduce production for_without_from -> BY expr TO expr for_body 
-- On EOF reduce production for_without_from -> BY expr TO expr for_body 
-- On END reduce production for_without_from -> BY expr TO expr for_body 
-- On ELSE reduce production for_without_from -> BY expr TO expr for_body 
-- On ELIF reduce production for_without_from -> BY expr TO expr for_body 
-- On COLON reduce production for_without_from -> BY expr TO expr for_body 

State 157:
for_without_from -> BY expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_from -> BY expr for_body 
-- On OD reduce production for_without_from -> BY expr for_body 
-- On FI reduce production for_without_from -> BY expr for_body 
-- On EOF reduce production for_without_from -> BY expr for_body 
-- On END reduce production for_without_from -> BY expr for_body 
-- On ELSE reduce production for_without_from -> BY expr for_body 
-- On ELIF reduce production for_without_from -> BY expr for_body 
-- On COLON reduce production for_without_from -> BY expr for_body 

State 158:
for_without_name -> FROM expr for_without_from . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_name -> FROM expr for_without_from 
-- On OD reduce production for_without_name -> FROM expr for_without_from 
-- On FI reduce production for_without_name -> FROM expr for_without_from 
-- On EOF reduce production for_without_name -> FROM expr for_without_from 
-- On END reduce production for_without_name -> FROM expr for_without_from 
-- On ELSE reduce production for_without_name -> FROM expr for_without_from 
-- On ELIF reduce production for_without_name -> FROM expr for_without_from 
-- On COLON reduce production for_without_name -> FROM expr for_without_from 

State 159:
for_without_from -> for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_from -> for_body 
-- On OD reduce production for_without_from -> for_body 
-- On FI reduce production for_without_from -> for_body 
-- On EOF reduce production for_without_from -> for_body 
-- On END reduce production for_without_from -> for_body 
-- On ELSE reduce production for_without_from -> for_body 
-- On ELIF reduce production for_without_from -> for_body 
-- On COLON reduce production for_without_from -> for_body 

State 160:
for_in_stmt -> FOR . name IN expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR . name IN expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_stmt -> FOR . name for_without_name [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 23
-- On name shift to state 161

State 161:
for_in_stmt -> FOR name . IN expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name . IN expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_stmt -> FOR name . for_without_name [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
name -> name . DOT INT [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . DOT STRING [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . DOT LPAREN expr RPAREN [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . LBRACK exprseq RBRACK [ WHILE TO LBRACK IN FROM DOT DO BY ]
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On LBRACK shift to state 25
-- On IN shift to state 162
-- On FROM shift to state 150
-- On DOT shift to state 94
-- On DO shift to state 133
-- On BY shift to state 152
-- On for_without_name shift to state 172
-- On for_without_from shift to state 173
-- On for_body shift to state 159

State 162:
for_in_stmt -> FOR name IN . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name IN . expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 163

State 163:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_in_stmt -> FOR name IN expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name IN expr . WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 164
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 169
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 164:
for_in_stmt -> FOR name IN expr WHILE . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 165

State 165:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_in_stmt -> FOR name IN expr WHILE expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 166
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 166:
for_in_stmt -> FOR name IN expr WHILE expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On statseq shift to state 167
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 167:
for_in_stmt -> FOR name IN expr WHILE expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
-- On SEMICOLON shift to state 2
-- On OD shift to state 168
-- On COLON shift to state 129

State 168:
for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On OD reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On FI reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On EOF reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On END reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On ELSE reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On ELIF reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 
-- On COLON reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD 

State 169:
for_in_stmt -> FOR name IN expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On statseq shift to state 170
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 170:
for_in_stmt -> FOR name IN expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
-- On SEMICOLON shift to state 2
-- On OD shift to state 171
-- On COLON shift to state 129

State 171:
for_in_stmt -> FOR name IN expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On OD reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On FI reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On EOF reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On END reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On ELSE reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On ELIF reduce production for_in_stmt -> FOR name IN expr DO statseq OD 
-- On COLON reduce production for_in_stmt -> FOR name IN expr DO statseq OD 

State 172:
for_stmt -> FOR name for_without_name . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_stmt -> FOR name for_without_name 
-- On OD reduce production for_stmt -> FOR name for_without_name 
-- On FI reduce production for_stmt -> FOR name for_without_name 
-- On EOF reduce production for_stmt -> FOR name for_without_name 
-- On END reduce production for_stmt -> FOR name for_without_name 
-- On ELSE reduce production for_stmt -> FOR name for_without_name 
-- On ELIF reduce production for_stmt -> FOR name for_without_name 
-- On COLON reduce production for_stmt -> FOR name for_without_name 

State 173:
for_without_name -> for_without_from . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_name -> for_without_from 
-- On OD reduce production for_without_name -> for_without_from 
-- On FI reduce production for_without_name -> for_without_from 
-- On EOF reduce production for_without_name -> for_without_from 
-- On END reduce production for_without_name -> for_without_from 
-- On ELSE reduce production for_without_name -> for_without_from 
-- On ELIF reduce production for_without_name -> for_without_from 
-- On COLON reduce production for_without_name -> for_without_from 

State 174:
comments -> comments COMMENT . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
-- On WHILE reduce production comments -> comments COMMENT 
-- On TO reduce production comments -> comments COMMENT 
-- On SUBTRACT reduce production comments -> comments COMMENT 
-- On STRING reduce production comments -> comments COMMENT 
-- On STOP reduce production comments -> comments COMMENT 
-- On SEQ reduce production comments -> comments COMMENT 
-- On SEMICOLON reduce production comments -> comments COMMENT 
-- On SAVE reduce production comments -> comments COMMENT 
-- On READ reduce production comments -> comments COMMENT 
-- On QUOTED_STRING reduce production comments -> comments COMMENT 
-- On QUOTE reduce production comments -> comments COMMENT 
-- On QUIT reduce production comments -> comments COMMENT 
-- On PROC reduce production comments -> comments COMMENT 
-- On PLUS reduce production comments -> comments COMMENT 
-- On OD reduce production comments -> comments COMMENT 
-- On NOT reduce production comments -> comments COMMENT 
-- On LPAREN reduce production comments -> comments COMMENT 
-- On LBRACK reduce production comments -> comments COMMENT 
-- On LBRACE reduce production comments -> comments COMMENT 
-- On INT reduce production comments -> comments COMMENT 
-- On IF reduce production comments -> comments COMMENT 
-- On ID reduce production comments -> comments COMMENT 
-- On FROM reduce production comments -> comments COMMENT 
-- On FOR reduce production comments -> comments COMMENT 
-- On FI reduce production comments -> comments COMMENT 
-- On EOF reduce production comments -> comments COMMENT 
-- On END reduce production comments -> comments COMMENT 
-- On ELSE reduce production comments -> comments COMMENT 
-- On ELIF reduce production comments -> comments COMMENT 
-- On DOT reduce production comments -> comments COMMENT 
-- On DO reduce production comments -> comments COMMENT 
-- On COMMENT reduce production comments -> comments COMMENT 
-- On COMMA reduce production comments -> comments COMMENT 
-- On COLON reduce production comments -> comments COMMENT 
-- On BY reduce production comments -> comments COMMENT 
-- On ASSIGN reduce production comments -> comments COMMENT 

State 175:
statseq -> comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production statseq -> comments stat 
-- On OD reduce production statseq -> comments stat 
-- On FI reduce production statseq -> comments stat 
-- On EOF reduce production statseq -> comments stat 
-- On END reduce production statseq -> comments stat 
-- On ELSE reduce production statseq -> comments stat 
-- On ELIF reduce production statseq -> comments stat 
-- On COLON reduce production statseq -> comments stat 

State 176:
nameseq -> nameseq . COMMA name [ COMMA ASSIGN ]
stat -> nameseq . ASSIGN exprseq [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On COMMA shift to state 22
-- On ASSIGN shift to state 177

State 177:
stat -> nameseq ASSIGN . exprseq [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 178
-- On expr shift to state 93
-- On SEMICOLON reduce production exprseq -> 
-- On OD reduce production exprseq -> 
-- On FI reduce production exprseq -> 
-- On EOF reduce production exprseq -> 
-- On END reduce production exprseq -> 
-- On ELSE reduce production exprseq -> 
-- On ELIF reduce production exprseq -> 
-- On COMMA reduce production exprseq -> 
-- On COLON reduce production exprseq -> 

State 178:
exprseq -> exprseq . COMMA expr [ SEMICOLON OD FI EOF END ELSE ELIF COMMA COLON ]
stat -> nameseq ASSIGN exprseq . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On COMMA shift to state 40
-- On SEMICOLON reduce production stat -> nameseq ASSIGN exprseq 
-- On OD reduce production stat -> nameseq ASSIGN exprseq 
-- On FI reduce production stat -> nameseq ASSIGN exprseq 
-- On EOF reduce production stat -> nameseq ASSIGN exprseq 
-- On END reduce production stat -> nameseq ASSIGN exprseq 
-- On ELSE reduce production stat -> nameseq ASSIGN exprseq 
-- On ELIF reduce production stat -> nameseq ASSIGN exprseq 
-- On COLON reduce production stat -> nameseq ASSIGN exprseq 

State 179:
expr -> name . [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> name . functional_operator [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT INT [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . DOT STRING [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . DOT LPAREN expr RPAREN [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . LBRACK exprseq RBRACK [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
nameseq -> name . [ COMMA ASSIGN ]
-- On LPAREN shift to state 37
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On functional_operator shift to state 100
-- On UNION reduce production expr -> name 
-- On SUBTRACT reduce production expr -> name 
-- On SLASH reduce production expr -> name 
-- On SEQ reduce production expr -> name 
-- On SEMICOLON reduce production expr -> name 
-- On REPEAT_COMPOSE reduce production expr -> name 
-- On PLUS reduce production expr -> name 
-- On OR reduce production expr -> name 
-- On OD reduce production expr -> name 
-- On NE reduce production expr -> name 
-- On MULT reduce production expr -> name 
-- On MOD reduce production expr -> name 
-- On MINUS reduce production expr -> name 
-- On LT reduce production expr -> name 
-- On LE reduce production expr -> name 
-- On INTERSECT reduce production expr -> name 
-- On GT reduce production expr -> name 
-- On GE reduce production expr -> name 
-- On FI reduce production expr -> name 
-- On EXP reduce production expr -> name 
-- On EXCLAM reduce production expr -> name 
-- On EQUAL reduce production expr -> name 
-- On EOF reduce production expr -> name 
-- On END reduce production expr -> name 
-- On ELSE reduce production expr -> name 
-- On ELLIPSE reduce production expr -> name 
-- On ELIF reduce production expr -> name 
-- On COMMA reduce production nameseq -> name 
-- On COLON reduce production expr -> name 
-- On CARET reduce production expr -> name 
-- On AT reduce production expr -> name 
-- On ASSIGN reduce production nameseq -> name 
-- On ARROW reduce production expr -> name 
-- On AND reduce production expr -> name 
-- On AMPOP reduce production expr -> name 
-- On AMPMUL reduce production expr -> name 

State 180:
ifpart -> ifpart . ELIF expr THEN statseq [ FI ELSE ELIF ]
stat -> ifpart . FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
stat -> ifpart . ELSE statseq FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On FI shift to state 181
-- On ELSE shift to state 182
-- On ELIF shift to state 185

State 181:
stat -> ifpart FI . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> ifpart FI 
-- On OD reduce production stat -> ifpart FI 
-- On FI reduce production stat -> ifpart FI 
-- On EOF reduce production stat -> ifpart FI 
-- On END reduce production stat -> ifpart FI 
-- On ELSE reduce production stat -> ifpart FI 
-- On ELIF reduce production stat -> ifpart FI 
-- On COLON reduce production stat -> ifpart FI 

State 182:
stat -> ifpart ELSE . statseq FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On statseq shift to state 183
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On FI reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 183:
stat -> ifpart ELSE statseq . FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI COLON ]
-- On SEMICOLON shift to state 2
-- On FI shift to state 184
-- On COLON shift to state 129

State 184:
stat -> ifpart ELSE statseq FI . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> ifpart ELSE statseq FI 
-- On OD reduce production stat -> ifpart ELSE statseq FI 
-- On FI reduce production stat -> ifpart ELSE statseq FI 
-- On EOF reduce production stat -> ifpart ELSE statseq FI 
-- On END reduce production stat -> ifpart ELSE statseq FI 
-- On ELSE reduce production stat -> ifpart ELSE statseq FI 
-- On ELIF reduce production stat -> ifpart ELSE statseq FI 
-- On COLON reduce production stat -> ifpart ELSE statseq FI 

State 185:
ifpart -> ifpart ELIF . expr THEN statseq [ FI ELSE ELIF ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 186

State 186:
expr -> expr . ARROW expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
ifpart -> ifpart ELIF expr . THEN statseq [ FI ELSE ELIF ]
-- On UNION shift to state 42
-- On THEN shift to state 187
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 187:
ifpart -> ifpart ELIF expr THEN . statseq [ FI ELSE ELIF ]
-- On statseq shift to state 188
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On FI reduce production comments -> 
-- On ELSE reduce production comments -> 
-- On ELIF reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 188:
ifpart -> ifpart ELIF expr THEN statseq . [ FI ELSE ELIF ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
-- On SEMICOLON shift to state 2
-- On COLON shift to state 129
-- On FI reduce production ifpart -> ifpart ELIF expr THEN statseq 
-- On ELSE reduce production ifpart -> ifpart ELIF expr THEN statseq 
-- On ELIF reduce production ifpart -> ifpart ELIF expr THEN statseq 

State 189:
for_stmt -> for_without_name . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_stmt -> for_without_name 
-- On OD reduce production for_stmt -> for_without_name 
-- On FI reduce production for_stmt -> for_without_name 
-- On EOF reduce production for_stmt -> for_without_name 
-- On END reduce production for_stmt -> for_without_name 
-- On ELSE reduce production for_stmt -> for_without_name 
-- On ELIF reduce production for_stmt -> for_without_name 
-- On COLON reduce production for_stmt -> for_without_name 

State 190:
stat -> for_stmt . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> for_stmt 
-- On OD reduce production stat -> for_stmt 
-- On FI reduce production stat -> for_stmt 
-- On EOF reduce production stat -> for_stmt 
-- On END reduce production stat -> for_stmt 
-- On ELSE reduce production stat -> for_stmt 
-- On ELIF reduce production stat -> for_stmt 
-- On COLON reduce production stat -> for_stmt 

State 191:
stat -> for_in_stmt . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production stat -> for_in_stmt 
-- On OD reduce production stat -> for_in_stmt 
-- On FI reduce production stat -> for_in_stmt 
-- On EOF reduce production stat -> for_in_stmt 
-- On END reduce production stat -> for_in_stmt 
-- On ELSE reduce production stat -> for_in_stmt 
-- On ELIF reduce production stat -> for_in_stmt 
-- On COLON reduce production stat -> for_in_stmt 

State 192:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
stat -> expr . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On SEMICOLON reduce production stat -> expr 
-- On OD reduce production stat -> expr 
-- On FI reduce production stat -> expr 
-- On EOF reduce production stat -> expr 
-- On END reduce production stat -> expr 
-- On ELSE reduce production stat -> expr 
-- On ELIF reduce production stat -> expr 
-- On COLON reduce production stat -> expr 

State 193:
for_without_from -> TO expr BY . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 194

State 194:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> TO expr BY expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 195

State 195:
for_without_from -> TO expr BY expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_from -> TO expr BY expr for_body 
-- On OD reduce production for_without_from -> TO expr BY expr for_body 
-- On FI reduce production for_without_from -> TO expr BY expr for_body 
-- On EOF reduce production for_without_from -> TO expr BY expr for_body 
-- On END reduce production for_without_from -> TO expr BY expr for_body 
-- On ELSE reduce production for_without_from -> TO expr BY expr for_body 
-- On ELIF reduce production for_without_from -> TO expr BY expr for_body 
-- On COLON reduce production for_without_from -> TO expr BY expr for_body 

State 196:
for_without_from -> TO expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_without_from -> TO expr for_body 
-- On OD reduce production for_without_from -> TO expr for_body 
-- On FI reduce production for_without_from -> TO expr for_body 
-- On EOF reduce production for_without_from -> TO expr for_body 
-- On END reduce production for_without_from -> TO expr for_body 
-- On ELSE reduce production for_without_from -> TO expr for_body 
-- On ELIF reduce production for_without_from -> TO expr for_body 
-- On COLON reduce production for_without_from -> TO expr for_body 

State 197:
statseq -> statseq COLON comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production statseq -> statseq COLON comments stat 
-- On OD reduce production statseq -> statseq COLON comments stat 
-- On FI reduce production statseq -> statseq COLON comments stat 
-- On EOF reduce production statseq -> statseq COLON comments stat 
-- On END reduce production statseq -> statseq COLON comments stat 
-- On ELSE reduce production statseq -> statseq COLON comments stat 
-- On ELIF reduce production statseq -> statseq COLON comments stat 
-- On COLON reduce production statseq -> statseq COLON comments stat 

State 198:
parmseq -> parmseq COMMA . oneparm [ RPAREN COMMA ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On oneparm shift to state 199
-- On name_string shift to state 23
-- On name shift to state 200

State 199:
parmseq -> parmseq COMMA oneparm . [ RPAREN COMMA ]
-- On RPAREN reduce production parmseq -> parmseq COMMA oneparm 
-- On COMMA reduce production parmseq -> parmseq COMMA oneparm 

State 200:
name -> name . DOT INT [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . DOT STRING [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . DOT LPAREN expr RPAREN [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . LBRACK exprseq RBRACK [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
oneparm -> name . [ RPAREN COMMA ]
oneparm -> name . DOUBLE_COLON name_string [ RPAREN COMMA ]
-- On LBRACK shift to state 25
-- On DOUBLE_COLON shift to state 201
-- On DOT shift to state 94
-- On RPAREN reduce production oneparm -> name 
-- On COMMA reduce production oneparm -> name 

State 201:
oneparm -> name DOUBLE_COLON . name_string [ RPAREN COMMA ]
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 202

State 202:
oneparm -> name DOUBLE_COLON name_string . [ RPAREN COMMA ]
-- On RPAREN reduce production oneparm -> name DOUBLE_COLON name_string 
-- On COMMA reduce production oneparm -> name DOUBLE_COLON name_string 

State 203:
parmseq -> oneparm . [ RPAREN COMMA ]
-- On RPAREN reduce production parmseq -> oneparm 
-- On COMMA reduce production parmseq -> oneparm 

State 204:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> QUOTE expr . QUOTE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On QUOTE shift to state 205
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 205:
expr -> QUOTE expr QUOTE . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On WHILE reduce production expr -> QUOTE expr QUOTE 
-- On UNION reduce production expr -> QUOTE expr QUOTE 
-- On TO reduce production expr -> QUOTE expr QUOTE 
-- On THEN reduce production expr -> QUOTE expr QUOTE 
-- On SUBTRACT reduce production expr -> QUOTE expr QUOTE 
-- On SLASH reduce production expr -> QUOTE expr QUOTE 
-- On SEQ reduce production expr -> QUOTE expr QUOTE 
-- On SEMICOLON reduce production expr -> QUOTE expr QUOTE 
-- On RPAREN reduce production expr -> QUOTE expr QUOTE 
-- On REPEAT_COMPOSE reduce production expr -> QUOTE expr QUOTE 
-- On RBRACK reduce production expr -> QUOTE expr QUOTE 
-- On RBRACE reduce production expr -> QUOTE expr QUOTE 
-- On QUOTE reduce production expr -> QUOTE expr QUOTE 
-- On PLUS reduce production expr -> QUOTE expr QUOTE 
-- On OR reduce production expr -> QUOTE expr QUOTE 
-- On OD reduce production expr -> QUOTE expr QUOTE 
-- On NE reduce production expr -> QUOTE expr QUOTE 
-- On MULT reduce production expr -> QUOTE expr QUOTE 
-- On MOD reduce production expr -> QUOTE expr QUOTE 
-- On MINUS reduce production expr -> QUOTE expr QUOTE 
-- On LT reduce production expr -> QUOTE expr QUOTE 
-- On LE reduce production expr -> QUOTE expr QUOTE 
-- On INTERSECT reduce production expr -> QUOTE expr QUOTE 
-- On GT reduce production expr -> QUOTE expr QUOTE 
-- On GE reduce production expr -> QUOTE expr QUOTE 
-- On FI reduce production expr -> QUOTE expr QUOTE 
-- On EXP reduce production expr -> QUOTE expr QUOTE 
-- On EXCLAM reduce production expr -> QUOTE expr QUOTE 
-- On EQUAL reduce production expr -> QUOTE expr QUOTE 
-- On EOF reduce production expr -> QUOTE expr QUOTE 
-- On END reduce production expr -> QUOTE expr QUOTE 
-- On ELSE reduce production expr -> QUOTE expr QUOTE 
-- On ELLIPSE reduce production expr -> QUOTE expr QUOTE 
-- On ELIF reduce production expr -> QUOTE expr QUOTE 
-- On DO reduce production expr -> QUOTE expr QUOTE 
-- On COMMA reduce production expr -> QUOTE expr QUOTE 
-- On COLON reduce production expr -> QUOTE expr QUOTE 
-- On CARET reduce production expr -> QUOTE expr QUOTE 
-- On BY reduce production expr -> QUOTE expr QUOTE 
-- On AT reduce production expr -> QUOTE expr QUOTE 
-- On ARROW reduce production expr -> QUOTE expr QUOTE 
-- On AND reduce production expr -> QUOTE expr QUOTE 
-- On AMPOP reduce production expr -> QUOTE expr QUOTE 
-- On AMPMUL reduce production expr -> QUOTE expr QUOTE 

State 206:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> SEQ expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> SEQ expr 
-- On TO reduce production expr -> SEQ expr 
-- On THEN reduce production expr -> SEQ expr 
-- On SEMICOLON reduce production expr -> SEQ expr 
-- On RPAREN reduce production expr -> SEQ expr 
-- On RBRACK reduce production expr -> SEQ expr 
-- On RBRACE reduce production expr -> SEQ expr 
-- On QUOTE reduce production expr -> SEQ expr 
-- On OR reduce production expr -> SEQ expr 
-- On OD reduce production expr -> SEQ expr 
-- On FI reduce production expr -> SEQ expr 
-- On EOF reduce production expr -> SEQ expr 
-- On END reduce production expr -> SEQ expr 
-- On ELSE reduce production expr -> SEQ expr 
-- On ELIF reduce production expr -> SEQ expr 
-- On DO reduce production expr -> SEQ expr 
-- On COMMA reduce production expr -> SEQ expr 
-- On COLON reduce production expr -> SEQ expr 
-- On BY reduce production expr -> SEQ expr 
-- On ARROW reduce production expr -> SEQ expr 
-- On AND reduce production expr -> SEQ expr 

State 207:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> SUBTRACT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On WHILE reduce production expr -> SUBTRACT expr 
-- On TO reduce production expr -> SUBTRACT expr 
-- On THEN reduce production expr -> SUBTRACT expr 
-- On SEQ reduce production expr -> SUBTRACT expr 
-- On SEMICOLON reduce production expr -> SUBTRACT expr 
-- On RPAREN reduce production expr -> SUBTRACT expr 
-- On RBRACK reduce production expr -> SUBTRACT expr 
-- On RBRACE reduce production expr -> SUBTRACT expr 
-- On QUOTE reduce production expr -> SUBTRACT expr 
-- On OR reduce production expr -> SUBTRACT expr 
-- On OD reduce production expr -> SUBTRACT expr 
-- On NE reduce production expr -> SUBTRACT expr 
-- On MOD reduce production expr -> SUBTRACT expr 
-- On LT reduce production expr -> SUBTRACT expr 
-- On LE reduce production expr -> SUBTRACT expr 
-- On GT reduce production expr -> SUBTRACT expr 
-- On GE reduce production expr -> SUBTRACT expr 
-- On FI reduce production expr -> SUBTRACT expr 
-- On EQUAL reduce production expr -> SUBTRACT expr 
-- On EOF reduce production expr -> SUBTRACT expr 
-- On END reduce production expr -> SUBTRACT expr 
-- On ELSE reduce production expr -> SUBTRACT expr 
-- On ELLIPSE reduce production expr -> SUBTRACT expr 
-- On ELIF reduce production expr -> SUBTRACT expr 
-- On DO reduce production expr -> SUBTRACT expr 
-- On COMMA reduce production expr -> SUBTRACT expr 
-- On COLON reduce production expr -> SUBTRACT expr 
-- On BY reduce production expr -> SUBTRACT expr 
-- On ARROW reduce production expr -> SUBTRACT expr 
-- On AND reduce production expr -> SUBTRACT expr 

State 208:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_body -> WHILE expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 209
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61

State 209:
for_body -> WHILE expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On statseq shift to state 210
-- On comments shift to state 136
-- On WHILE reduce production comments -> 
-- On TO reduce production comments -> 
-- On SUBTRACT reduce production comments -> 
-- On STRING reduce production comments -> 
-- On STOP reduce production comments -> 
-- On SEQ reduce production comments -> 
-- On SEMICOLON reduce production comments -> 
-- On SAVE reduce production comments -> 
-- On READ reduce production comments -> 
-- On QUOTED_STRING reduce production comments -> 
-- On QUOTE reduce production comments -> 
-- On QUIT reduce production comments -> 
-- On PROC reduce production comments -> 
-- On PLUS reduce production comments -> 
-- On OD reduce production comments -> 
-- On NOT reduce production comments -> 
-- On LPAREN reduce production comments -> 
-- On LBRACK reduce production comments -> 
-- On LBRACE reduce production comments -> 
-- On INT reduce production comments -> 
-- On IF reduce production comments -> 
-- On ID reduce production comments -> 
-- On FROM reduce production comments -> 
-- On FOR reduce production comments -> 
-- On DOT reduce production comments -> 
-- On DO reduce production comments -> 
-- On COMMENT reduce production comments -> 
-- On COMMA reduce production comments -> 
-- On COLON reduce production comments -> 
-- On BY reduce production comments -> 
-- On ASSIGN reduce production comments -> 

State 210:
for_body -> WHILE expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
-- On SEMICOLON shift to state 2
-- On OD shift to state 211
-- On COLON shift to state 129

State 211:
for_body -> WHILE expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production for_body -> WHILE expr DO statseq OD 
-- On OD reduce production for_body -> WHILE expr DO statseq OD 
-- On FI reduce production for_body -> WHILE expr DO statseq OD 
-- On EOF reduce production for_body -> WHILE expr DO statseq OD 
-- On END reduce production for_body -> WHILE expr DO statseq OD 
-- On ELSE reduce production for_body -> WHILE expr DO statseq OD 
-- On ELIF reduce production for_body -> WHILE expr DO statseq OD 
-- On COLON reduce production for_body -> WHILE expr DO statseq OD 

State 212:
statseq -> statseq SEMICOLON comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
-- On SEMICOLON reduce production statseq -> statseq SEMICOLON comments stat 
-- On OD reduce production statseq -> statseq SEMICOLON comments stat 
-- On FI reduce production statseq -> statseq SEMICOLON comments stat 
-- On EOF reduce production statseq -> statseq SEMICOLON comments stat 
-- On END reduce production statseq -> statseq SEMICOLON comments stat 
-- On ELSE reduce production statseq -> statseq SEMICOLON comments stat 
-- On ELIF reduce production statseq -> statseq SEMICOLON comments stat 
-- On COLON reduce production statseq -> statseq SEMICOLON comments stat 

State 213:
program -> statseq EOF . [ # ]
-- On # reduce production program -> statseq EOF 

State 214:
program' -> program . [ # ]
-- On # accept program

