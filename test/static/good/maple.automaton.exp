State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On statseq shift to state 1
-- On program shift to state 214
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR EOF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 1:
## Known stack suffix:
## statseq
## LR(1) items:
program -> statseq . EOF [ # ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON EOF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON EOF COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On EOF shift to state 213
-- On COLON shift to state 129
## Reductions:

State 2:
## Known stack suffix:
## statseq SEMICOLON
## LR(1) items:
statseq -> statseq SEMICOLON . comments stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On comments shift to state 3
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 3:
## Known stack suffix:
## statseq SEMICOLON comments
## LR(1) items:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> statseq SEMICOLON comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 212
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
## Reductions:
-- On COMMA ASSIGN
--   reduce production nameseq ->
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat ->

State 4:
## Known stack suffix:
## WHILE
## LR(1) items:
for_body -> WHILE . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 208
## Reductions:

State 5:
## Known stack suffix:
## SUBTRACT
## LR(1) items:
expr -> SUBTRACT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 207
## Reductions:

State 6:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> STRING

State 7:
## Known stack suffix:
## SEQ
## LR(1) items:
expr -> SEQ . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 206
## Reductions:

State 8:
## Known stack suffix:
## QUOTED_STRING
## LR(1) items:
name_string -> QUOTED_STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name_string -> QUOTED_STRING

State 9:
## Known stack suffix:
## QUOTE
## LR(1) items:
expr -> QUOTE . expr QUOTE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 204
## Reductions:

State 10:
## Known stack suffix:
## PROC
## LR(1) items:
expr -> PROC . LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On LPAREN shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## PROC LPAREN
## LR(1) items:
expr -> PROC LPAREN . parmseq RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On parmseq shift to state 13
-- On oneparm shift to state 203
-- On name_string shift to state 23
-- On name shift to state 200
## Reductions:
-- On RPAREN COMMA
--   reduce production parmseq ->

State 12:
## Known stack suffix:
## ID
## LR(1) items:
name_string -> ID . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name_string -> ID

State 13:
## Known stack suffix:
## PROC LPAREN parmseq
## LR(1) items:
expr -> PROC LPAREN parmseq . RPAREN result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
parmseq -> parmseq . COMMA oneparm [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 14
-- On COMMA shift to state 198
## Reductions:

State 14:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN . result_type decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On DOUBLE_COLON shift to state 15
-- On result_type shift to state 18
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production result_type ->

State 15:
## Known stack suffix:
## DOUBLE_COLON
## LR(1) items:
result_type -> DOUBLE_COLON . name_string SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## DOUBLE_COLON name_string
## LR(1) items:
result_type -> DOUBLE_COLON name_string . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On SEMICOLON shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## DOUBLE_COLON name_string SEMICOLON
## LR(1) items:
result_type -> DOUBLE_COLON name_string SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production result_type -> DOUBLE_COLON name_string SEMICOLON

State 18:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN result_type
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN result_type . decls_proc options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On LOCAL shift to state 19
-- On GLOBAL shift to state 115
-- On locals_of_proc shift to state 118
-- On globals_of_proc shift to state 120
-- On decls_proc shift to state 122
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production decls_proc ->

State 19:
## Known stack suffix:
## LOCAL
## LR(1) items:
locals_of_proc -> LOCAL . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 20
-- On name_string shift to state 23
-- On name shift to state 114
## Reductions:
-- On SEMICOLON COMMA
--   reduce production nameseq ->

State 20:
## Known stack suffix:
## LOCAL nameseq
## LR(1) items:
locals_of_proc -> LOCAL nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
## Transitions:
-- On SEMICOLON shift to state 21
-- On COMMA shift to state 22
## Reductions:

State 21:
## Known stack suffix:
## LOCAL nameseq SEMICOLON
## LR(1) items:
locals_of_proc -> LOCAL nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production locals_of_proc -> LOCAL nameseq SEMICOLON

State 22:
## Known stack suffix:
## nameseq COMMA
## LR(1) items:
nameseq -> nameseq COMMA . name [ SEMICOLON COMMA ASSIGN ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 23
-- On name shift to state 24
## Reductions:

State 23:
## Known stack suffix:
## name_string
## LR(1) items:
name -> name_string . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name -> name_string

State 24:
## Known stack suffix:
## nameseq COMMA name
## LR(1) items:
name -> name . DOT INT [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . DOT STRING [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . DOT LPAREN expr RPAREN [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
name -> name . LBRACK exprseq RBRACK [ SEMICOLON LBRACK DOT COMMA ASSIGN ]
nameseq -> nameseq COMMA name . [ SEMICOLON COMMA ASSIGN ]
## Transitions:
-- On LBRACK shift to state 25
-- On DOT shift to state 94
## Reductions:
-- On SEMICOLON COMMA ASSIGN
--   reduce production nameseq -> nameseq COMMA name

State 25:
## Known stack suffix:
## name LBRACK
## LR(1) items:
name -> name LBRACK . exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 112
-- On expr shift to state 93
## Reductions:
-- On RBRACK COMMA
--   reduce production exprseq ->

State 26:
## Known stack suffix:
## PLUS
## LR(1) items:
expr -> PLUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 111
## Reductions:

State 27:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 110
## Reductions:

State 28:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 108
-- On expr shift to state 93
## Reductions:
-- On RPAREN COMMA
--   reduce production exprseq ->

State 29:
## Known stack suffix:
## LBRACK
## LR(1) items:
expr -> LBRACK . exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 106
-- On expr shift to state 93
## Reductions:
-- On RBRACK COMMA
--   reduce production exprseq ->

State 30:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . exprseq RBRACE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 104
-- On expr shift to state 93
## Reductions:
-- On RBRACE COMMA
--   reduce production exprseq ->

State 31:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT . DOT INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT . DOT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On DOT shift to state 32
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> INT

State 32:
## Known stack suffix:
## INT DOT
## LR(1) items:
expr -> INT DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> INT DOT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On INT shift to state 33
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> INT DOT

State 33:
## Known stack suffix:
## INT DOT INT
## LR(1) items:
expr -> INT DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> INT DOT INT

State 34:
## Known stack suffix:
## DOT
## LR(1) items:
expr -> DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On INT shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## DOT INT
## LR(1) items:
expr -> DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> DOT INT

State 36:
## Known stack suffix:
## name
## LR(1) items:
expr -> name . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> name . functional_operator [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT STRING [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT LPAREN expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
name -> name . LBRACK exprseq RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On LPAREN shift to state 37
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On functional_operator shift to state 100
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> name

State 37:
## Known stack suffix:
## LPAREN
## LR(1) items:
functional_operator -> LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 38
-- On expr shift to state 93
## Reductions:
-- On RPAREN COMMA
--   reduce production exprseq ->

State 38:
## Known stack suffix:
## LPAREN exprseq
## LR(1) items:
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
functional_operator -> LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On RPAREN shift to state 39
-- On COMMA shift to state 40
## Reductions:

State 39:
## Known stack suffix:
## LPAREN exprseq RPAREN
## LR(1) items:
functional_operator -> LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production functional_operator -> LPAREN exprseq RPAREN

State 40:
## Known stack suffix:
## exprseq COMMA
## LR(1) items:
exprseq -> exprseq COMMA . expr [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## exprseq COMMA expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq COMMA expr . [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON
--   reduce production exprseq -> exprseq COMMA expr

State 42:
## Known stack suffix:
## expr UNION
## LR(1) items:
expr -> expr UNION . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expr UNION expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr UNION expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MOD MINUS LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr UNION expr

State 44:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr -> expr SLASH . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SLASH expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr SLASH expr

State 46:
## Known stack suffix:
## expr REPEAT_COMPOSE
## LR(1) items:
expr -> expr REPEAT_COMPOSE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expr REPEAT_COMPOSE expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr REPEAT_COMPOSE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr REPEAT_COMPOSE expr

State 48:
## Known stack suffix:
## expr EXCLAM
## LR(1) items:
expr -> expr EXCLAM . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> expr EXCLAM

State 49:
## Known stack suffix:
## expr AMPOP
## LR(1) items:
expr -> expr AMPOP . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expr AMPOP expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AMPOP expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> expr AMPOP expr

State 51:
## Known stack suffix:
## expr EXP
## LR(1) items:
expr -> expr EXP . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expr EXP expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr EXP expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr EXP expr

State 53:
## Known stack suffix:
## expr CARET
## LR(1) items:
expr -> expr CARET . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr CARET expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On EXCLAM shift to state 48
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr CARET expr

State 55:
## Known stack suffix:
## expr MULT
## LR(1) items:
expr -> expr MULT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expr MULT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MULT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr MULT expr

State 57:
## Known stack suffix:
## expr INTERSECT
## LR(1) items:
expr -> expr INTERSECT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expr INTERSECT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr INTERSECT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr INTERSECT expr

State 59:
## Known stack suffix:
## expr AT
## LR(1) items:
expr -> expr AT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expr AT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr AT expr

State 61:
## Known stack suffix:
## expr AMPMUL
## LR(1) items:
expr -> expr AMPMUL . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## expr AMPMUL expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AMPMUL expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On REPEAT_COMPOSE shift to state 46
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AMPOP shift to state 49
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY AT ARROW AND AMPMUL
--   reduce production expr -> expr AMPMUL expr

State 63:
## Known stack suffix:
## expr SUBTRACT
## LR(1) items:
expr -> expr SUBTRACT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## expr SUBTRACT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SUBTRACT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MOD MINUS LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr SUBTRACT expr

State 65:
## Known stack suffix:
## expr SEQ
## LR(1) items:
expr -> expr SEQ . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expr SEQ expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr SEQ expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr SEQ expr

State 67:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr PLUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MOD MINUS LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr PLUS expr

State 69:
## Known stack suffix:
## expr NE
## LR(1) items:
expr -> expr NE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr NE expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr NE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr NE expr

State 71:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MOD expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD NE LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr MOD expr

State 73:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr MINUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On MULT shift to state 55
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE PLUS OR OD NE MOD MINUS LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr MINUS expr

State 75:
## Known stack suffix:
## expr ELLIPSE
## LR(1) items:
expr -> expr ELLIPSE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## expr ELLIPSE expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr ELLIPSE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD NE LT LE GT GE FI EQUAL EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr ELLIPSE expr

State 77:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr LT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr LT expr

State 79:
## Known stack suffix:
## expr LE
## LR(1) items:
expr -> expr LE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr LE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr LE expr

State 81:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr GT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr GT expr

State 83:
## Known stack suffix:
## expr GE
## LR(1) items:
expr -> expr GE . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr GE expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr GE expr

State 85:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr EQUAL expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr EQUAL expr

State 87:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr OR expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW
--   reduce production expr -> expr OR expr

State 89:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr AND expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> expr AND expr

State 91:
## Known stack suffix:
## expr ARROW
## LR(1) items:
expr -> expr ARROW . expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## expr ARROW expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr ARROW expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OD FI EOF END ELSE ELIF DO COMMA COLON BY
--   reduce production expr -> expr ARROW expr

State 93:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COMMA COLON CARET AT ARROW AND AMPOP AMPMUL ]
exprseq -> expr . [ SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON
--   reduce production exprseq -> expr

State 94:
## Known stack suffix:
## name DOT
## LR(1) items:
name -> name DOT . INT [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name DOT . STRING [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name DOT . LPAREN expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On STRING shift to state 95
-- On LPAREN shift to state 96
-- On INT shift to state 99
## Reductions:

State 95:
## Known stack suffix:
## name DOT STRING
## LR(1) items:
name -> name DOT STRING . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name -> name DOT STRING

State 96:
## Known stack suffix:
## name DOT LPAREN
## LR(1) items:
name -> name DOT LPAREN . expr RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## name DOT LPAREN expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ RPAREN REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
name -> name DOT LPAREN expr . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On RPAREN shift to state 98
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 98:
## Known stack suffix:
## name DOT LPAREN expr RPAREN
## LR(1) items:
name -> name DOT LPAREN expr RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name -> name DOT LPAREN expr RPAREN

State 99:
## Known stack suffix:
## name DOT INT
## LR(1) items:
name -> name DOT INT . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name -> name DOT INT

State 100:
## Known stack suffix:
## name functional_operator
## LR(1) items:
expr -> name functional_operator . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
functional_operator -> functional_operator . LPAREN exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On LPAREN shift to state 101
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> name functional_operator

State 101:
## Known stack suffix:
## functional_operator LPAREN
## LR(1) items:
functional_operator -> functional_operator LPAREN . exprseq RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 102
-- On expr shift to state 93
## Reductions:
-- On RPAREN COMMA
--   reduce production exprseq ->

State 102:
## Known stack suffix:
## functional_operator LPAREN exprseq
## LR(1) items:
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
functional_operator -> functional_operator LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On RPAREN shift to state 103
-- On COMMA shift to state 40
## Reductions:

State 103:
## Known stack suffix:
## functional_operator LPAREN exprseq RPAREN
## LR(1) items:
functional_operator -> functional_operator LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production functional_operator -> functional_operator LPAREN exprseq RPAREN

State 104:
## Known stack suffix:
## LBRACE exprseq
## LR(1) items:
expr -> LBRACE exprseq . RBRACE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 105
-- On COMMA shift to state 40
## Reductions:

State 105:
## Known stack suffix:
## LBRACE exprseq RBRACE
## LR(1) items:
expr -> LBRACE exprseq RBRACE . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> LBRACE exprseq RBRACE

State 106:
## Known stack suffix:
## LBRACK exprseq
## LR(1) items:
expr -> LBRACK exprseq . RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RBRACK COMMA ]
## Transitions:
-- On RBRACK shift to state 107
-- On COMMA shift to state 40
## Reductions:

State 107:
## Known stack suffix:
## LBRACK exprseq RBRACK
## LR(1) items:
expr -> LBRACK exprseq RBRACK . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> LBRACK exprseq RBRACK

State 108:
## Known stack suffix:
## LPAREN exprseq
## LR(1) items:
expr -> LPAREN exprseq . RPAREN [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
exprseq -> exprseq . COMMA expr [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 109
-- On COMMA shift to state 40
## Reductions:

State 109:
## Known stack suffix:
## LPAREN exprseq RPAREN
## LR(1) items:
expr -> LPAREN exprseq RPAREN . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> LPAREN exprseq RPAREN

State 110:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> NOT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> NOT expr

State 111:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> PLUS expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD NE MOD LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> PLUS expr

State 112:
## Known stack suffix:
## name LBRACK exprseq
## LR(1) items:
exprseq -> exprseq . COMMA expr [ RBRACK COMMA ]
name -> name LBRACK exprseq . RBRACK [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On RBRACK shift to state 113
-- On COMMA shift to state 40
## Reductions:

State 113:
## Known stack suffix:
## name LBRACK exprseq RBRACK
## LR(1) items:
name -> name LBRACK exprseq RBRACK . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
--   reduce production name -> name LBRACK exprseq RBRACK

State 114:
## Known stack suffix:
## name
## LR(1) items:
name -> name . DOT INT [ SEMICOLON LBRACK DOT COMMA ]
name -> name . DOT STRING [ SEMICOLON LBRACK DOT COMMA ]
name -> name . DOT LPAREN expr RPAREN [ SEMICOLON LBRACK DOT COMMA ]
name -> name . LBRACK exprseq RBRACK [ SEMICOLON LBRACK DOT COMMA ]
nameseq -> name . [ SEMICOLON COMMA ]
## Transitions:
-- On LBRACK shift to state 25
-- On DOT shift to state 94
## Reductions:
-- On SEMICOLON COMMA
--   reduce production nameseq -> name

State 115:
## Known stack suffix:
## GLOBAL
## LR(1) items:
globals_of_proc -> GLOBAL . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 116
-- On name_string shift to state 23
-- On name shift to state 114
## Reductions:
-- On SEMICOLON COMMA
--   reduce production nameseq ->

State 116:
## Known stack suffix:
## GLOBAL nameseq
## LR(1) items:
globals_of_proc -> GLOBAL nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
## Transitions:
-- On SEMICOLON shift to state 117
-- On COMMA shift to state 22
## Reductions:

State 117:
## Known stack suffix:
## GLOBAL nameseq SEMICOLON
## LR(1) items:
globals_of_proc -> GLOBAL nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production globals_of_proc -> GLOBAL nameseq SEMICOLON

State 118:
## Known stack suffix:
## locals_of_proc
## LR(1) items:
decls_proc -> locals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
decls_proc -> locals_of_proc . globals_of_proc [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On GLOBAL shift to state 115
-- On globals_of_proc shift to state 119
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production decls_proc -> locals_of_proc

State 119:
## Known stack suffix:
## locals_of_proc globals_of_proc
## LR(1) items:
decls_proc -> locals_of_proc globals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production decls_proc -> locals_of_proc globals_of_proc

State 120:
## Known stack suffix:
## globals_of_proc
## LR(1) items:
decls_proc -> globals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
decls_proc -> globals_of_proc . locals_of_proc [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On LOCAL shift to state 19
-- On locals_of_proc shift to state 121
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production decls_proc -> globals_of_proc

State 121:
## Known stack suffix:
## globals_of_proc locals_of_proc
## LR(1) items:
decls_proc -> globals_of_proc locals_of_proc . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production decls_proc -> globals_of_proc locals_of_proc

State 122:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN result_type decls_proc
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc . options_of_proc statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On OPTION shift to state 123
-- On options_of_proc shift to state 126
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production options_of_proc ->

State 123:
## Known stack suffix:
## OPTION
## LR(1) items:
options_of_proc -> OPTION . nameseq SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 124
-- On name_string shift to state 23
-- On name shift to state 114
## Reductions:
-- On SEMICOLON COMMA
--   reduce production nameseq ->

State 124:
## Known stack suffix:
## OPTION nameseq
## LR(1) items:
nameseq -> nameseq . COMMA name [ SEMICOLON COMMA ]
options_of_proc -> OPTION nameseq . SEMICOLON [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
-- On SEMICOLON shift to state 125
-- On COMMA shift to state 22
## Reductions:

State 125:
## Known stack suffix:
## OPTION nameseq SEMICOLON
## LR(1) items:
options_of_proc -> OPTION nameseq SEMICOLON . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production options_of_proc -> OPTION nameseq SEMICOLON

State 126:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc . statseq END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On statseq shift to state 127
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 127:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq . END [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON END COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON END COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On END shift to state 128
-- On COLON shift to state 129
## Reductions:

State 128:
## Known stack suffix:
## PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END
## LR(1) items:
expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> PROC LPAREN parmseq RPAREN result_type decls_proc options_of_proc statseq END

State 129:
## Known stack suffix:
## statseq COLON
## LR(1) items:
statseq -> statseq COLON . comments stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On comments shift to state 130
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 130:
## Known stack suffix:
## statseq COLON comments
## LR(1) items:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> statseq COLON comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 197
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
## Reductions:
-- On COMMA ASSIGN
--   reduce production nameseq ->
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat ->

State 131:
## Known stack suffix:
## TO
## LR(1) items:
for_without_from -> TO . expr BY expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> TO . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## TO expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
for_without_from -> TO expr . BY expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> TO expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On BY shift to state 193
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 196
## Reductions:

State 133:
## Known stack suffix:
## DO
## LR(1) items:
for_body -> DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On statseq shift to state 134
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 134:
## Known stack suffix:
## DO statseq
## LR(1) items:
for_body -> DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On OD shift to state 135
-- On COLON shift to state 129
## Reductions:

State 135:
## Known stack suffix:
## DO statseq OD
## LR(1) items:
for_body -> DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_body -> DO statseq OD

State 136:
## Known stack suffix:
## comments
## LR(1) items:
comments -> comments . COMMENT [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
statseq -> comments . stat [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On STOP shift to state 137
-- On SEQ shift to state 7
-- On SAVE shift to state 138
-- On READ shift to state 143
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On QUIT shift to state 145
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On IF shift to state 146
-- On ID shift to state 12
-- On FROM shift to state 150
-- On FOR shift to state 160
-- On DOT shift to state 34
-- On DO shift to state 133
-- On COMMENT shift to state 174
-- On BY shift to state 152
-- On stat shift to state 175
-- On nameseq shift to state 176
-- On name_string shift to state 23
-- On name shift to state 179
-- On ifpart shift to state 180
-- On for_without_name shift to state 189
-- On for_without_from shift to state 173
-- On for_stmt shift to state 190
-- On for_in_stmt shift to state 191
-- On for_body shift to state 159
-- On expr shift to state 192
## Reductions:
-- On COMMA ASSIGN
--   reduce production nameseq ->
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat ->

State 137:
## Known stack suffix:
## STOP
## LR(1) items:
stat -> STOP . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> STOP

State 138:
## Known stack suffix:
## SAVE
## LR(1) items:
stat -> SAVE . name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
stat -> SAVE . nameseq COMMA name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On nameseq shift to state 139
-- On name_string shift to state 142
-- On name shift to state 114
## Reductions:
-- On COMMA
--   reduce production nameseq ->

State 139:
## Known stack suffix:
## SAVE nameseq
## LR(1) items:
nameseq -> nameseq . COMMA name [ COMMA ]
stat -> SAVE nameseq . COMMA name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On COMMA shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## SAVE nameseq COMMA
## LR(1) items:
nameseq -> nameseq COMMA . name [ COMMA ]
stat -> SAVE nameseq COMMA . name_string [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 141
-- On name shift to state 24
## Reductions:

State 141:
## Known stack suffix:
## SAVE nameseq COMMA name_string
## LR(1) items:
name -> name_string . [ LBRACK DOT COMMA ]
stat -> SAVE nameseq COMMA name_string . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On LBRACK DOT COMMA
--   reduce production name -> name_string
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> SAVE nameseq COMMA name_string

State 142:
## Known stack suffix:
## SAVE name_string
## LR(1) items:
name -> name_string . [ LBRACK DOT COMMA ]
stat -> SAVE name_string . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On LBRACK DOT COMMA
--   reduce production name -> name_string
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> SAVE name_string

State 143:
## Known stack suffix:
## READ
## LR(1) items:
stat -> READ . expr [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## READ expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
stat -> READ expr . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> READ expr

State 145:
## Known stack suffix:
## QUIT
## LR(1) items:
stat -> QUIT . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> QUIT

State 146:
## Known stack suffix:
## IF
## LR(1) items:
ifpart -> IF . expr THEN statseq [ FI ELSE ELIF ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
ifpart -> IF expr . THEN statseq [ FI ELSE ELIF ]
## Transitions:
-- On UNION shift to state 42
-- On THEN shift to state 148
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 148:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
ifpart -> IF expr THEN . statseq [ FI ELSE ELIF ]
## Transitions:
-- On statseq shift to state 149
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 149:
## Known stack suffix:
## IF expr THEN statseq
## LR(1) items:
ifpart -> IF expr THEN statseq . [ FI ELSE ELIF ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On COLON shift to state 129
## Reductions:
-- On FI ELSE ELIF
--   reduce production ifpart -> IF expr THEN statseq

State 150:
## Known stack suffix:
## FROM
## LR(1) items:
for_without_name -> FROM . expr for_without_from [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## FROM expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET BY AT ARROW AND AMPOP AMPMUL ]
for_without_name -> FROM expr . for_without_from [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On TO shift to state 131
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On BY shift to state 152
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_without_from shift to state 158
-- On for_body shift to state 159
## Reductions:

State 152:
## Known stack suffix:
## BY
## LR(1) items:
for_without_from -> BY . expr TO expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> BY . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## BY expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> BY expr . TO expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_without_from -> BY expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On TO shift to state 154
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 157
## Reductions:

State 154:
## Known stack suffix:
## BY expr TO
## LR(1) items:
for_without_from -> BY expr TO . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## BY expr TO expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> BY expr TO expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## BY expr TO expr for_body
## LR(1) items:
for_without_from -> BY expr TO expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_from -> BY expr TO expr for_body

State 157:
## Known stack suffix:
## BY expr for_body
## LR(1) items:
for_without_from -> BY expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_from -> BY expr for_body

State 158:
## Known stack suffix:
## FROM expr for_without_from
## LR(1) items:
for_without_name -> FROM expr for_without_from . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_name -> FROM expr for_without_from

State 159:
## Known stack suffix:
## for_body
## LR(1) items:
for_without_from -> for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_from -> for_body

State 160:
## Known stack suffix:
## FOR
## LR(1) items:
for_in_stmt -> FOR . name IN expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR . name IN expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_stmt -> FOR . name for_without_name [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 23
-- On name shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## FOR name
## LR(1) items:
for_in_stmt -> FOR name . IN expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name . IN expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_stmt -> FOR name . for_without_name [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
name -> name . DOT INT [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . DOT STRING [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . DOT LPAREN expr RPAREN [ WHILE TO LBRACK IN FROM DOT DO BY ]
name -> name . LBRACK exprseq RBRACK [ WHILE TO LBRACK IN FROM DOT DO BY ]
## Transitions:
-- On WHILE shift to state 4
-- On TO shift to state 131
-- On LBRACK shift to state 25
-- On IN shift to state 162
-- On FROM shift to state 150
-- On DOT shift to state 94
-- On DO shift to state 133
-- On BY shift to state 152
-- On for_without_name shift to state 172
-- On for_without_from shift to state 173
-- On for_body shift to state 159
## Reductions:

State 162:
## Known stack suffix:
## FOR name IN
## LR(1) items:
for_in_stmt -> FOR name IN . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name IN . expr WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## FOR name IN expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_in_stmt -> FOR name IN expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
for_in_stmt -> FOR name IN expr . WHILE expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 164
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 169
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 164:
## Known stack suffix:
## FOR name IN expr WHILE
## LR(1) items:
for_in_stmt -> FOR name IN expr WHILE . expr DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## FOR name IN expr WHILE expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_in_stmt -> FOR name IN expr WHILE expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 166
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 166:
## Known stack suffix:
## FOR name IN expr WHILE expr DO
## LR(1) items:
for_in_stmt -> FOR name IN expr WHILE expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On statseq shift to state 167
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 167:
## Known stack suffix:
## FOR name IN expr WHILE expr DO statseq
## LR(1) items:
for_in_stmt -> FOR name IN expr WHILE expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On OD shift to state 168
-- On COLON shift to state 129
## Reductions:

State 168:
## Known stack suffix:
## FOR name IN expr WHILE expr DO statseq OD
## LR(1) items:
for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_in_stmt -> FOR name IN expr WHILE expr DO statseq OD

State 169:
## Known stack suffix:
## FOR name IN expr DO
## LR(1) items:
for_in_stmt -> FOR name IN expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On statseq shift to state 170
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 170:
## Known stack suffix:
## FOR name IN expr DO statseq
## LR(1) items:
for_in_stmt -> FOR name IN expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On OD shift to state 171
-- On COLON shift to state 129
## Reductions:

State 171:
## Known stack suffix:
## FOR name IN expr DO statseq OD
## LR(1) items:
for_in_stmt -> FOR name IN expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_in_stmt -> FOR name IN expr DO statseq OD

State 172:
## Known stack suffix:
## FOR name for_without_name
## LR(1) items:
for_stmt -> FOR name for_without_name . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_stmt -> FOR name for_without_name

State 173:
## Known stack suffix:
## for_without_from
## LR(1) items:
for_without_name -> for_without_from . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_name -> for_without_from

State 174:
## Known stack suffix:
## comments COMMENT
## LR(1) items:
comments -> comments COMMENT . [ WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN ]
## Transitions:
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments -> comments COMMENT

State 175:
## Known stack suffix:
## comments stat
## LR(1) items:
statseq -> comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production statseq -> comments stat

State 176:
## Known stack suffix:
## nameseq
## LR(1) items:
nameseq -> nameseq . COMMA name [ COMMA ASSIGN ]
stat -> nameseq . ASSIGN exprseq [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On COMMA shift to state 22
-- On ASSIGN shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## nameseq ASSIGN
## LR(1) items:
stat -> nameseq ASSIGN . exprseq [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On exprseq shift to state 178
-- On expr shift to state 93
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COMMA COLON
--   reduce production exprseq ->

State 178:
## Known stack suffix:
## nameseq ASSIGN exprseq
## LR(1) items:
exprseq -> exprseq . COMMA expr [ SEMICOLON OD FI EOF END ELSE ELIF COMMA COLON ]
stat -> nameseq ASSIGN exprseq . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> nameseq ASSIGN exprseq

State 179:
## Known stack suffix:
## name
## LR(1) items:
expr -> name . [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> name . functional_operator [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
name -> name . DOT INT [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . DOT STRING [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . DOT LPAREN expr RPAREN [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
name -> name . LBRACK exprseq RBRACK [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOT COMMA COLON CARET AT ASSIGN ARROW AND AMPOP AMPMUL ]
nameseq -> name . [ COMMA ASSIGN ]
## Transitions:
-- On LPAREN shift to state 37
-- On LBRACK shift to state 25
-- On DOT shift to state 94
-- On functional_operator shift to state 100
## Reductions:
-- On UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> name
-- On COMMA ASSIGN
--   reduce production nameseq -> name

State 180:
## Known stack suffix:
## ifpart
## LR(1) items:
ifpart -> ifpart . ELIF expr THEN statseq [ FI ELSE ELIF ]
stat -> ifpart . FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
stat -> ifpart . ELSE statseq FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On FI shift to state 181
-- On ELSE shift to state 182
-- On ELIF shift to state 185
## Reductions:

State 181:
## Known stack suffix:
## ifpart FI
## LR(1) items:
stat -> ifpart FI . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> ifpart FI

State 182:
## Known stack suffix:
## ifpart ELSE
## LR(1) items:
stat -> ifpart ELSE . statseq FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On statseq shift to state 183
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 183:
## Known stack suffix:
## ifpart ELSE statseq
## LR(1) items:
stat -> ifpart ELSE statseq . FI [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On FI shift to state 184
-- On COLON shift to state 129
## Reductions:

State 184:
## Known stack suffix:
## ifpart ELSE statseq FI
## LR(1) items:
stat -> ifpart ELSE statseq FI . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> ifpart ELSE statseq FI

State 185:
## Known stack suffix:
## ifpart ELIF
## LR(1) items:
ifpart -> ifpart ELIF . expr THEN statseq [ FI ELSE ELIF ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## ifpart ELIF expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION THEN SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
ifpart -> ifpart ELIF expr . THEN statseq [ FI ELSE ELIF ]
## Transitions:
-- On UNION shift to state 42
-- On THEN shift to state 187
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 187:
## Known stack suffix:
## ifpart ELIF expr THEN
## LR(1) items:
ifpart -> ifpart ELIF expr THEN . statseq [ FI ELSE ELIF ]
## Transitions:
-- On statseq shift to state 188
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 188:
## Known stack suffix:
## ifpart ELIF expr THEN statseq
## LR(1) items:
ifpart -> ifpart ELIF expr THEN statseq . [ FI ELSE ELIF ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON FI ELSE ELIF COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On COLON shift to state 129
## Reductions:
-- On FI ELSE ELIF
--   reduce production ifpart -> ifpart ELIF expr THEN statseq

State 189:
## Known stack suffix:
## for_without_name
## LR(1) items:
for_stmt -> for_without_name . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_stmt -> for_without_name

State 190:
## Known stack suffix:
## for_stmt
## LR(1) items:
stat -> for_stmt . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> for_stmt

State 191:
## Known stack suffix:
## for_in_stmt
## LR(1) items:
stat -> for_in_stmt . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> for_in_stmt

State 192:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ SEMICOLON REPEAT_COMPOSE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF COLON CARET AT ARROW AND AMPOP AMPMUL ]
stat -> expr . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production stat -> expr

State 193:
## Known stack suffix:
## TO expr BY
## LR(1) items:
for_without_from -> TO expr BY . expr for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On SUBTRACT shift to state 5
-- On STRING shift to state 6
-- On SEQ shift to state 7
-- On QUOTED_STRING shift to state 8
-- On QUOTE shift to state 9
-- On PROC shift to state 10
-- On PLUS shift to state 26
-- On NOT shift to state 27
-- On LPAREN shift to state 28
-- On LBRACK shift to state 29
-- On LBRACE shift to state 30
-- On INT shift to state 31
-- On ID shift to state 12
-- On DOT shift to state 34
-- On name_string shift to state 23
-- On name shift to state 36
-- On expr shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## TO expr BY expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_without_from -> TO expr BY expr . for_body [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On WHILE shift to state 4
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 133
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
-- On for_body shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## TO expr BY expr for_body
## LR(1) items:
for_without_from -> TO expr BY expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_from -> TO expr BY expr for_body

State 196:
## Known stack suffix:
## TO expr for_body
## LR(1) items:
for_without_from -> TO expr for_body . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_without_from -> TO expr for_body

State 197:
## Known stack suffix:
## statseq COLON comments stat
## LR(1) items:
statseq -> statseq COLON comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production statseq -> statseq COLON comments stat

State 198:
## Known stack suffix:
## parmseq COMMA
## LR(1) items:
parmseq -> parmseq COMMA . oneparm [ RPAREN COMMA ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On oneparm shift to state 199
-- On name_string shift to state 23
-- On name shift to state 200
## Reductions:

State 199:
## Known stack suffix:
## parmseq COMMA oneparm
## LR(1) items:
parmseq -> parmseq COMMA oneparm . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parmseq -> parmseq COMMA oneparm

State 200:
## Known stack suffix:
## name
## LR(1) items:
name -> name . DOT INT [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . DOT STRING [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . DOT LPAREN expr RPAREN [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
name -> name . LBRACK exprseq RBRACK [ RPAREN LBRACK DOUBLE_COLON DOT COMMA ]
oneparm -> name . [ RPAREN COMMA ]
oneparm -> name . DOUBLE_COLON name_string [ RPAREN COMMA ]
## Transitions:
-- On LBRACK shift to state 25
-- On DOUBLE_COLON shift to state 201
-- On DOT shift to state 94
## Reductions:
-- On RPAREN COMMA
--   reduce production oneparm -> name

State 201:
## Known stack suffix:
## name DOUBLE_COLON
## LR(1) items:
oneparm -> name DOUBLE_COLON . name_string [ RPAREN COMMA ]
## Transitions:
-- On QUOTED_STRING shift to state 8
-- On ID shift to state 12
-- On name_string shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## name DOUBLE_COLON name_string
## LR(1) items:
oneparm -> name DOUBLE_COLON name_string . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production oneparm -> name DOUBLE_COLON name_string

State 203:
## Known stack suffix:
## oneparm
## LR(1) items:
parmseq -> oneparm . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production parmseq -> oneparm

State 204:
## Known stack suffix:
## QUOTE expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> QUOTE expr . QUOTE [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE QUOTE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE CARET AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On QUOTE shift to state 205
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 205:
## Known stack suffix:
## QUOTE expr QUOTE
## LR(1) items:
expr -> QUOTE expr QUOTE . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
## Reductions:
-- On WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
--   reduce production expr -> QUOTE expr QUOTE

State 206:
## Known stack suffix:
## SEQ expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> SEQ expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD FI EOF END ELSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> SEQ expr

State 207:
## Known stack suffix:
## SUBTRACT expr
## LR(1) items:
expr -> expr . ARROW expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> SUBTRACT expr . [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On MULT shift to state 55
-- On MINUS shift to state 73
-- On INTERSECT shift to state 57
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On CARET shift to state 53
-- On AT shift to state 59
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:
-- On WHILE TO THEN SEQ SEMICOLON RPAREN RBRACK RBRACE QUOTE OR OD NE MOD LT LE GT GE FI EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON BY ARROW AND
--   reduce production expr -> SUBTRACT expr

State 208:
## Known stack suffix:
## WHILE expr
## LR(1) items:
expr -> expr . ARROW expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . OR expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AND expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SUBTRACT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . PLUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MULT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPOP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AMPMUL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SLASH expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . CARET expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXP expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . SEQ expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . LE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . GE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . NE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EQUAL expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MOD expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . ELLIPSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . UNION expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . MINUS expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . INTERSECT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . EXCLAM [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . AT expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
expr -> expr . REPEAT_COMPOSE expr [ UNION SUBTRACT SLASH SEQ REPEAT_COMPOSE PLUS OR NE MULT MOD MINUS LT LE INTERSECT GT GE EXP EXCLAM EQUAL ELLIPSE DO CARET AT ARROW AND AMPOP AMPMUL ]
for_body -> WHILE expr . DO statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On UNION shift to state 42
-- On SUBTRACT shift to state 63
-- On SLASH shift to state 44
-- On SEQ shift to state 65
-- On REPEAT_COMPOSE shift to state 46
-- On PLUS shift to state 67
-- On OR shift to state 87
-- On NE shift to state 69
-- On MULT shift to state 55
-- On MOD shift to state 71
-- On MINUS shift to state 73
-- On LT shift to state 77
-- On LE shift to state 79
-- On INTERSECT shift to state 57
-- On GT shift to state 81
-- On GE shift to state 83
-- On EXP shift to state 51
-- On EXCLAM shift to state 48
-- On EQUAL shift to state 85
-- On ELLIPSE shift to state 75
-- On DO shift to state 209
-- On CARET shift to state 53
-- On AT shift to state 59
-- On ARROW shift to state 91
-- On AND shift to state 89
-- On AMPOP shift to state 49
-- On AMPMUL shift to state 61
## Reductions:

State 209:
## Known stack suffix:
## WHILE expr DO
## LR(1) items:
for_body -> WHILE expr DO . statseq OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
-- On statseq shift to state 210
-- On comments shift to state 136
## Reductions:
-- On WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMENT COMMA COLON BY ASSIGN
--   reduce production comments ->

State 210:
## Known stack suffix:
## WHILE expr DO statseq
## LR(1) items:
for_body -> WHILE expr DO statseq . OD [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
statseq -> statseq . SEMICOLON comments stat [ SEMICOLON OD COLON ]
statseq -> statseq . COLON comments stat [ SEMICOLON OD COLON ]
## Transitions:
-- On SEMICOLON shift to state 2
-- On OD shift to state 211
-- On COLON shift to state 129
## Reductions:

State 211:
## Known stack suffix:
## WHILE expr DO statseq OD
## LR(1) items:
for_body -> WHILE expr DO statseq OD . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production for_body -> WHILE expr DO statseq OD

State 212:
## Known stack suffix:
## statseq SEMICOLON comments stat
## LR(1) items:
statseq -> statseq SEMICOLON comments stat . [ SEMICOLON OD FI EOF END ELSE ELIF COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON OD FI EOF END ELSE ELIF COLON
--   reduce production statseq -> statseq SEMICOLON comments stat

State 213:
## Known stack suffix:
## statseq EOF
## LR(1) items:
program -> statseq EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> statseq EOF

State 214:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

