File "maple.mly", line 61, characters 37-46:
Warning: the token BACKSLASH is unused.
File "maple.mly", line 61, characters 7-10:
Warning: the token BAR is unused.
File "maple.mly", line 60, characters 13-19:
Warning: the token BQUOTE is unused.
File "maple.mly", line 62, characters 13-17:
Warning: the token DONE is unused.
File "maple.mly", line 60, characters 20-26:
Warning: the token DQUOTE is unused.
File "maple.mly", line 61, characters 29-36:
Warning: the token PERCENT is unused.
File "maple.mly", line 61, characters 47-59:
Warning: the token QUESTIONMARK is unused.
File "maple.mly", line 61, characters 18-28:
Warning: the token UNDERSCORE is unused.
Grammar has 23 nonterminal symbols, among which 1 start symbols.
Grammar has 76 terminal symbols.
Grammar has 106 productions.
nullable(statseq) = true
nullable(stat) = true
nullable(result_type) = true
nullable(program) = false
nullable(parmseq) = true
nullable(options_of_proc) = true
nullable(oneparm) = false
nullable(nameseq) = true
nullable(name_string) = false
nullable(name) = false
nullable(locals_of_proc) = false
nullable(ifpart) = false
nullable(globals_of_proc) = false
nullable(functional_operator) = false
nullable(for_without_name) = false
nullable(for_without_from) = false
nullable(for_stmt) = false
nullable(for_in_stmt) = false
nullable(for_body) = false
nullable(exprseq) = true
nullable(expr) = false
nullable(decls_proc) = true
nullable(comments) = true
first(statseq) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMENT COMMA COLON BY ASSIGN
first(stat) = WHILE TO SUBTRACT STRING STOP SEQ SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR DOT DO COMMA BY ASSIGN
first(result_type) = DOUBLE_COLON
first(program) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR EOF DOT DO COMMENT COMMA COLON BY ASSIGN
first(parmseq) = QUOTED_STRING ID COMMA
first(options_of_proc) = OPTION
first(oneparm) = QUOTED_STRING ID
first(nameseq) = QUOTED_STRING ID COMMA
first(name_string) = QUOTED_STRING ID
first(name) = QUOTED_STRING ID
first(locals_of_proc) = LOCAL
first(ifpart) = IF
first(globals_of_proc) = GLOBAL
first(functional_operator) = LPAREN
first(for_without_name) = WHILE TO FROM DO BY
first(for_without_from) = WHILE TO DO BY
first(for_stmt) = WHILE TO FROM FOR DO BY
first(for_in_stmt) = FOR
first(for_body) = WHILE DO
first(exprseq) = SUBTRACT STRING SEQ QUOTED_STRING QUOTE PROC PLUS NOT LPAREN LBRACK LBRACE INT ID DOT COMMA
first(expr) = SUBTRACT STRING SEQ QUOTED_STRING QUOTE PROC PLUS NOT LPAREN LBRACK LBRACE INT ID DOT
first(decls_proc) = LOCAL GLOBAL
first(comments) = COMMENT
minimal(statseq) = (* 0 *)
minimal(stat) = (* 0 *)
minimal(result_type) = (* 0 *)
minimal(program) = (* 1 *) EOF
minimal(parmseq) = (* 0 *)
minimal(options_of_proc) = (* 0 *)
minimal(oneparm) = (* 1 *) ID
minimal(nameseq) = (* 0 *)
minimal(name_string) = (* 1 *) ID
minimal(name) = (* 1 *) ID
minimal(locals_of_proc) = (* 2 *) LOCAL SEMICOLON
minimal(ifpart) = (* 3 *) IF ID THEN
minimal(globals_of_proc) = (* 2 *) GLOBAL SEMICOLON
minimal(functional_operator) = (* 2 *) LPAREN RPAREN
minimal(for_without_name) = (* 2 *) DO OD
minimal(for_without_from) = (* 2 *) DO OD
minimal(for_stmt) = (* 2 *) DO OD
minimal(for_in_stmt) = (* 6 *) FOR ID IN ID DO OD
minimal(for_body) = (* 2 *) DO OD
minimal(exprseq) = (* 0 *)
minimal(expr) = (* 1 *) ID
minimal(decls_proc) = (* 0 *)
minimal(comments) = (* 0 *)
follow(statseq) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(stat) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(result_type) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
follow(program) = #
follow(parmseq) = RPAREN COMMA
follow(options_of_proc) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
follow(oneparm) = RPAREN COMMA
follow(nameseq) = SEMICOLON COMMA ASSIGN
follow(name_string) = WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
follow(name) = WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE LBRACK INTERSECT IN GT GE FROM FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DOUBLE_COLON DOT DO COMMA COLON CARET BY AT ASSIGN ARROW AND AMPOP AMPMUL
follow(locals_of_proc) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID GLOBAL FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
follow(ifpart) = FI ELSE ELIF
follow(globals_of_proc) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LOCAL LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
follow(functional_operator) = WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LPAREN LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
follow(for_without_name) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(for_without_from) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(for_stmt) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(for_in_stmt) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(for_body) = SEMICOLON OD FI EOF END ELSE ELIF COLON
follow(exprseq) = SEMICOLON RPAREN RBRACK RBRACE OD FI EOF END ELSE ELIF COMMA COLON
follow(expr) = WHILE UNION TO THEN SUBTRACT SLASH SEQ SEMICOLON RPAREN REPEAT_COMPOSE RBRACK RBRACE QUOTE PLUS OR OD NE MULT MOD MINUS LT LE INTERSECT GT GE FI EXP EXCLAM EQUAL EOF END ELSE ELLIPSE ELIF DO COMMA COLON CARET BY AT ARROW AND AMPOP AMPMUL
follow(decls_proc) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OPTION NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR END DOT DO COMMENT COMMA COLON BY ASSIGN
follow(comments) = WHILE TO SUBTRACT STRING STOP SEQ SEMICOLON SAVE READ QUOTED_STRING QUOTE QUIT PROC PLUS OD NOT LPAREN LBRACK LBRACE INT IF ID FROM FOR FI EOF END ELSE ELIF DOT DO COMMENT COMMA COLON BY ASSIGN
Built an LR(0) automaton with 215 states.
The grammar is not SLR(1) -- 35 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 215 states.
754 shift/reduce conflicts were silently solved.
File "maple.mly", line 68, characters 0-9:
Warning: the precedence level assigned to ASSIGN is never useful.
File "maple.mly", line 69, characters 0-5:
Warning: the precedence level assigned to COMMA is never useful.
File "maple.mly", line 85, characters 0-5:
Warning: the precedence level assigned to DOT is never useful.
File "maple.mly", line 84, characters 0-9:
Warning: the precedence level assigned to PERCENT is never useful.
64 out of 215 states have a default reduction.
128 out of 215 states are represented.
0 out of 102 symbols keep track of their start position.
0 out of 102 symbols keep track of their end position.
48 out of 107 productions exploit shiftreduce optimization.
0 out of 215 states can peek at an error.
566 functions before inlining, 92 functions after inlining.
