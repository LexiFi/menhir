File "maple.mly", line 61, characters 37-46:
Warning: the token BACKSLASH is unused.
File "maple.mly", line 61, characters 7-10:
Warning: the token BAR is unused.
File "maple.mly", line 60, characters 13-19:
Warning: the token BQUOTE is unused.
File "maple.mly", line 62, characters 13-17:
Warning: the token DONE is unused.
File "maple.mly", line 60, characters 20-26:
Warning: the token DQUOTE is unused.
File "maple.mly", line 61, characters 29-36:
Warning: the token PERCENT is unused.
File "maple.mly", line 61, characters 47-59:
Warning: the token QUESTIONMARK is unused.
File "maple.mly", line 61, characters 18-28:
Warning: the token UNDERSCORE is unused.
%{
(* François Thomasset -- INRIA Rocquencourt -- Octobre 2001 *)

(* Translation from Maple to MuPad : syntaxic specification of maple *)

(*
Copyright © 2001-2002 François Thomasset, all rights reserved.
Copying is covered by the GNU General Public License (GPL).

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

$Revision: 1.1.1.1 $
$Date: 2002/03/08 08:31:57 $

*)

open Maple;;
let is_empty_comments = function
  | [] -> true
  | _ -> false;;
let is_empty_stat = function
  | EmptyStat -> true
  | _ -> false ;;
let convert_exprs_to_names exprs =
  let cve = function
    | NameExpr (n) -> n
    | e ->
	begin
	  Printf.printf "ERROR: a parameter of an arrow expression is a %s\n" (string_of_expr e);
	  Printf.printf "NameExpr was expected\n";
	  Printf.printf "line number : %d\n" !Maple_lexer.linecount;
	  flush stdout;
	  failwith "convert_exprs_to_names"
	end
  in
  let rec cv = function
    | [] -> []
    | n :: reste -> (cve n) :: cv reste
  in cv exprs ;;
%}
%start program
%token AMPMUL
%token <string> AMPOP
%token AND
%token ARROW
%token ASSIGN
%token AT
%token BACKSLASH
%token BAR
%token BQUOTE
%token BY
%token CARET
%token COLON
%token COMMA
%token <string> COMMENT
%token DO
%token DONE
%token DOT
%token DOUBLE_COLON
%token DQUOTE
%token ELIF
%token ELLIPSE
%token ELSE
%token END
%token EOF
%token EQUAL
%token EXCLAM
%token EXP
%token FI
%token FOR
%token FROM
%token GE
%token GLOBAL
%token GT
%token <string> ID
%token IF
%token IN
%token <int> INT
%token INTERSECT
%token LBRACE
%token LBRACK
%token LE
%token LOCAL
%token LPAREN
%token LT
%token MINUS
%token MOD
%token MULT
%token NE
%token NOT
%token OD
%token OPTION
%token OR
%token PERCENT
%token PLUS
%token PROC
%token QUESTIONMARK
%token QUIT
%token QUOTE
%token <string> QUOTED_STRING
%token RBRACE
%token RBRACK
%token READ
%token REPEAT_COMPOSE
%token RPAREN
%token SAVE
%token SEMICOLON
%token SEQ
%token SLASH
%token STOP
%token <string> STRING
%token SUBTRACT
%token THEN
%token TO
%token UNDERSCORE
%token UNION
%token WHILE
%nonassoc ASSIGN
%left COMMA
%right ARROW
%left OR
%left AND
%right NOT
%nonassoc SEQ
%nonassoc EQUAL GE GT LE LT NE
%nonassoc ELLIPSE
%nonassoc MOD
%nonassoc UMINUS UPLUS
%left MINUS PLUS SUBTRACT UNION
%left AMPMUL AT INTERSECT MULT SLASH
%nonassoc CARET EXP REPEAT_COMPOSE
%left EXCLAM
%left AMPOP
%nonassoc PERCENT
%left DOT
%type <Maple.prog> program
%%

program:
  _1 = statseq _2 = EOF
    {                      ( List.rev _1 )}

comments:
  _1 = comments _2 = COMMENT
    {                            ( _2 :: _1 )}
| 
    {          ( [] )}

statseq:
  _1 = statseq _2 = SEMICOLON _3 = comments _4 = stat
    {                                          ( { comments = List.rev _3;
					      sep=SemiColon;
					      stat = _4
					    }
					    :: _1
					  )}
| _1 = statseq _2 = COLON _3 = comments _4 = stat
    {                                      ( { comments = List.rev _3;
					  sep=Colon;
					  stat = _4
					}
					:: _1
				      )}
| _1 = comments _2 = stat
    {     (
	     if (is_empty_stat _2) & (is_empty_comments _1) then []
	     else
	       [ { comments = List.rev _1;
		   sep=NoSep;
		   stat = _2
		 }
	       ]
	    )}

stat:
  _1 = nameseq _2 = ASSIGN _3 = exprseq
    {                                 ( AssignStat ( { lhs_of_assign=_1; rhs=_3 } ) )}
| _1 = expr
    {        ( ExprStat (_1) )}
| _1 = READ _2 = expr
    {             ( match _2 with
                      | ParenExpr ([e]) -> ReadStat (e)
		      |	_ -> ReadStat (_2) ;
		    )}
| _1 = SAVE _2 = name_string
    {                    ( SaveStat ( [] , _2 ) )}
| _1 = SAVE _2 = nameseq _3 = COMMA _4 = name_string
    {                                  ( SaveStat ( _2 , _4 ) )}
| _1 = ifpart _2 = FI
    {             ( _1 )}
| _1 = ifpart _2 = ELSE _3 = statseq _4 = FI
    {       ( match _1 with
	        | IfThenElseStat current_if_stat
		  ->
	            let condition = current_if_stat.cond and
			th = current_if_stat.then_part and
			alts = current_if_stat.alternatives
		    in IfThenElseStat ( { cond = condition;
					  then_part = th;
					  alternatives = alts;
					  else_part = List.rev _3
					} )
		| _ ->
		    begin
		      Printf.printf "ERROR: ifpart is a %s\n" (string_of_stat _1);
		      Printf.printf "IfThenElseStat was expected\n";
		      Printf.printf "current rule: stat: ifpart ELSE statseq FI\n";
		      Printf.printf "line number : %d\n" !Maple_lexer.linecount;
		      flush stdout;
		      failwith "ifpart"
		    end
	      )}
| _1 = for_stmt
    {            ( _1 )}
| _1 = for_in_stmt
    {               ( _1 )}
| _1 = QUIT
    {        ( StopStat )}
| _1 = STOP
    {        ( StopStat )}
| 
    {   ( EmptyStat )}

for_stmt:
  _1 = FOR _2 = name _3 = for_without_name
    {     ( let fwn = _3 in
              ForStat ( { loop_index = Some _2;
			  from_expr = fwn.from_expr;
			  by_expr = fwn.by_expr;
			  to_expr = fwn.to_expr;
			  while_expr = fwn.while_expr;
			  body = fwn.body
			} )
	    )}
| _1 = for_without_name
    {                    ( ForStat (_1) )}

for_without_name:
  _1 = FROM _2 = expr _3 = for_without_from
    {     ( let fwf = _3 in
	      { loop_index = None;
		from_expr = Some _2;
		by_expr = fwf.by_expr;
		to_expr = fwf.to_expr;
		while_expr = fwf.while_expr;
		body = fwf.body
	      }
	    )}
| _1 = for_without_from
    {                    ( _1 )}

for_without_from:
  _1 = BY _2 = expr _3 = TO _4 = expr _5 = for_body
    {     ( let fwb = _5 in
	      { loop_index = None;
		from_expr = None;
		by_expr = Some _2 ;
		to_expr = Some _4 ;
		while_expr = fwb.while_expr;
		body = fwb.body
	      }
	    )}
| _1 = TO _2 = expr _3 = BY _4 = expr _5 = for_body
    {     ( let fwb = _5 in
	      { loop_index = None;
		from_expr = None;
		by_expr = Some _4 ;
		to_expr = Some _2 ;
		while_expr = fwb.while_expr;
		body = fwb.body
	      }
	    )}
| _1 = TO _2 = expr _3 = for_body
    {     ( let fwb = _3 in
	      { loop_index = None;
		from_expr = None;
		by_expr = None;
		to_expr = Some _2 ;
		while_expr = fwb.while_expr;
		body = fwb.body
	      }
	    )}
| _1 = BY _2 = expr _3 = for_body
    {     ( let fwb = _3 in
	      { loop_index = None;
		from_expr = None;
		by_expr = Some _2 ;
		to_expr = None ;
		while_expr = fwb.while_expr;
		body = fwb.body
	      }
	    )}
| _1 = for_body
    {            ( _1 )}

for_body:
  _1 = WHILE _2 = expr _3 = DO _4 = statseq _5 = OD
    {     ( { loop_index = None;
		from_expr = None;
		by_expr = None;
		to_expr = None;
		while_expr = Some _2;
		body = List.rev _4
	      }
	    )}
| _1 = DO _2 = statseq _3 = OD
    {                 ( { loop_index = None;
			    from_expr = None;
			    by_expr = None;
			    to_expr = None;
			    while_expr = None;
			    body = List.rev _2
			  }
			)}

for_in_stmt:
  _1 = FOR _2 = name _3 = IN _4 = expr _5 = DO _6 = statseq _7 = OD
    {     (
	      ForInStat ( { loop_var = _2;
			    in_expr = _4;
			    in_while = None;
			    in_body = List.rev _6
			  }
			 )
	    )}
| _1 = FOR _2 = name _3 = IN _4 = expr _5 = WHILE _6 = expr _7 = DO _8 = statseq _9 = OD
    {     (
	      ForInStat ( { loop_var = _2;
			    in_expr = _4;
			    in_while = Some _6;
			    in_body = List.rev _8
			  }
			 )
	    )}

ifpart:
  _1 = IF _2 = expr _3 = THEN _4 = statseq
    {                               ( IfThenElseStat ( { cond=_2;
						    then_part = List.rev _4;
						    alternatives = [];
						    else_part = []
						  } )
			       )}
| _1 = ifpart _2 = ELIF _3 = expr _4 = THEN _5 = statseq
    {       ( match _1 with
	        | IfThenElseStat current_if_stat
		  ->
	            let condition = current_if_stat.cond and
			th = current_if_stat.then_part and
			alts = current_if_stat.alternatives
		    in IfThenElseStat ( { cond = condition;
					  then_part = th;
					  alternatives = alts @ [ { cond_of_alt = _3;
								    stats_of_alt = List.rev _5 } ];
					  else_part = []
					} )
		| _ ->
		    begin
		      Printf.printf "ERROR: ifpart is a %s\n" (string_of_stat _1);
		      Printf.printf "IfThenElseStat was expected\n";
		      Printf.printf "current rule: ifpart: IF expr THEN statseq\n";
		      Printf.printf "line number : %d\n" !Maple_lexer.linecount;
		      flush stdout;
		      failwith "ifpart"
		    end
	      )}

expr:
  _1 = expr _2 = ARROW _3 = expr
    {            ( match _1 with
	    | NameExpr (n) -> ArrowExpr ( [n] , _3 )
	    | ParenExpr (exps) -> ArrowExpr ( (convert_exprs_to_names exps) , _3 )
	    | _ ->
		begin
		  Printf.printf "ERROR: expected NameExpr or ParenExpr\n";
		  Printf.printf "current rule: expr: expr ARROW expr\n";
		  Printf.printf "first expr is a %s\n" (string_of_expr _1);
		  Printf.printf "line number : %d\n" !Maple_lexer.linecount;
		  flush stdout;
		  failwith "arrow expr"
		end
	    )}
| _1 = expr _2 = OR _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = OrOp; right = _3 } ) )}
| _1 = expr _2 = AND _3 = expr
    {                 ( BinExpr ( { left = _1; bin_op = AndOp; right = _3 } ) )}
| _1 = NOT _2 = expr
    {            ( UnaryExpr ( NotOp, _2) )}
| _1 = expr _2 = SUBTRACT _3 = expr
    {                      ( BinExpr ( { left = _1; bin_op = MinusOp; right = _3 } ) )}
| _1 = expr _2 = PLUS _3 = expr
    {                  ( BinExpr ( { left = _1; bin_op = PlusOp; right = _3 } ) )}
| _1 = PLUS _2 = expr %prec UPLUS
    {                         ( UnaryExpr ( UnaryPlus , _2 ) )}
| _1 = SUBTRACT _2 = expr %prec UMINUS
    {                              ( UnaryExpr ( UnaryMinus , _2 ) )}
| _1 = expr _2 = MULT _3 = expr
    {                  ( BinExpr ( { left = _1; bin_op = MultOp; right = _3 } ) )}
| _1 = expr _2 = AMPOP _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = NeutralOp(_2); right = _3 } ) )}
| _1 = expr _2 = AMPMUL _3 = expr
    {                    ( BinExpr ( { left = _1; bin_op = NeutralMulOp; right = _3 } ) )}
| _1 = expr _2 = SLASH _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = DivOp; right = _3 } ) )}
| _1 = expr _2 = CARET _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = ExpoOp; right = _3 } ) )}
| _1 = expr _2 = EXP _3 = expr
    {                 ( BinExpr ( { left = _1; bin_op = ExpoOp; right = _3 } ) )}
| _1 = expr _2 = SEQ _3 = expr
    {                 ( SeqExpr ( Some _1 , _3 ) )}
| _1 = SEQ _2 = expr
    {            ( SeqExpr ( None , _2 ) )}
| _1 = expr _2 = LT _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = LTOp; right = _3 } ) )}
| _1 = expr _2 = GT _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = GTOp; right = _3 } ) )}
| _1 = expr _2 = LE _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = LEOp; right = _3 } ) )}
| _1 = expr _2 = GE _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = GEOp; right = _3 } ) )}
| _1 = expr _2 = NE _3 = expr
    {                ( BinExpr ( { left = _1; bin_op = NEOp; right = _3 } ) )}
| _1 = expr _2 = EQUAL _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = EQOp; right = _3 } ) )}
| _1 = expr _2 = MOD _3 = expr
    {                 ( BinExpr ( { left = _1; bin_op = ModOp; right = _3 } ) )}
| _1 = expr _2 = ELLIPSE _3 = expr
    {                     ( IntervalExpr ( _1 , _3 ) )}
| _1 = expr _2 = UNION _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = Union; right = _3 } ) )}
| _1 = expr _2 = MINUS _3 = expr
    {                   ( BinExpr ( { left = _1; bin_op = Minus; right = _3 } ) )}
| _1 = expr _2 = INTERSECT _3 = expr
    {                       ( BinExpr ( { left = _1; bin_op = Intersect; right = _3 } ) )}
| _1 = expr _2 = EXCLAM
    {               ( Factorial ( _1 ) )}
| _1 = QUOTE _2 = expr _3 = QUOTE
    {                    ( UnevaluatedExpr ( _2 ) )}
| _1 = LBRACK _2 = exprseq _3 = RBRACK
    {                         ( ListExpr ( _2 ) )}
| _1 = LBRACE _2 = exprseq _3 = RBRACE
    {                         ( SetExpr ( _2 ) )}
| _1 = name
    {        ( NameExpr ( _1 ) )}
| _1 = STRING
    {          ( StringExpr (_1) )}
| _1 = name _2 = functional_operator
    {     (
	     match _2 with
	     | [a] -> CallExpr ( { callee = _1; args = a } )
	     | _ -> FunctionalCallExpr ( { callee_f = _1; fargs = _2 } )
	   )}
| _1 = INT
    {       ( IntExpr (_1) )}
| _1 = INT _2 = DOT _3 = INT
    {               ( FloatExpr ( _1, _3 ) )}
| _1 = INT _2 = DOT
    {           ( FloatExpr ( _1 , 0 ) )}
| _1 = DOT _2 = INT
    {           ( FloatExpr ( 0 , _2 ) )}
| _1 = PROC _2 = LPAREN _3 = parmseq _4 = RPAREN _5 = result_type _6 = decls_proc _7 = options_of_proc _8 = statseq _9 = END
    {     (
	     ProcDef ( { params = _3;
			 result_type = _5;
			 locals = _6;
			 options = _7;
			 body_of_proc = List.rev _8;
		       }
		     )
	    )}
| _1 = LPAREN _2 = exprseq _3 = RPAREN
    {                         ( ParenExpr (_2) )}
| _1 = expr _2 = AT _3 = expr
    {                ( ComposeExpr (_1,_3) )}
| _1 = expr _2 = REPEAT_COMPOSE _3 = expr
    {                            ( RepeatComposeExpr (_1,_3) )}

exprseq:
  
    {          ( [] )}
| _1 = exprseq _2 = COMMA _3 = expr
    {                             ( _1 @ [_3] )}
| _1 = expr
    {        ( [ _1 ] )}

name:
  _1 = name_string
    {                      ( NameString (_1) )}
| _1 = name _2 = DOT _3 = INT
    {                ( NameConcat ( _1 , N_int (_3) ) )}
| _1 = name _2 = DOT _3 = STRING
    {                   ( NameConcat ( _1 , N_str (_3) ) )}
| _1 = name _2 = DOT _3 = LPAREN _4 = expr _5 = RPAREN
    {                               ( NameConcat ( _1 , N_expr (_4) ) )}
| _1 = name _2 = LBRACK _3 = exprseq _4 = RBRACK
    {                              ( NameIndexed ( _1 , _3 ) )}

functional_operator:
  _1 = LPAREN _2 = exprseq _3 = RPAREN
    {                         ( [ _2 ] )}
| _1 = functional_operator _2 = LPAREN _3 = exprseq _4 = RPAREN
    {                                             ( _1 @ [_3] )}

parmseq:
  
    {          ( [] )}
| _1 = oneparm
    {           ( [_1] )}
| _1 = parmseq _2 = COMMA _3 = oneparm
    {                         ( _1 @ [_3] )}

result_type:
  
    {   ( None )}
| _1 = DOUBLE_COLON _2 = name_string _3 = SEMICOLON
    {                                      ( Some _2 )}

oneparm:
  _1 = name
    {               ( { param_name =_1 ; param_type = None } )}
| _1 = name _2 = DOUBLE_COLON _3 = name_string
    {                                 ( { param_name =_1 ; param_type = Some _3 } )}

nameseq:
  
    {          ( [] )}
| _1 = name
    {        ( [_1] )}
| _1 = nameseq _2 = COMMA _3 = name
    {                      ( _1 @ [_3] )}

decls_proc:
  
    {   ( [] )}
| _1 = globals_of_proc
    {                   ( [] )}
| _1 = locals_of_proc
    {                  ( _1 )}
| _1 = locals_of_proc _2 = globals_of_proc
    {                                  ( _1 )}
| _1 = globals_of_proc _2 = locals_of_proc
    {                                  ( _2 )}

locals_of_proc:
  _1 = LOCAL _2 = nameseq _3 = SEMICOLON
    {                           ( _2 )}

globals_of_proc:
  _1 = GLOBAL _2 = nameseq _3 = SEMICOLON
    {                            ( () )}

options_of_proc:
  
    {   ( [] )}
| _1 = OPTION _2 = nameseq _3 = SEMICOLON
    {                            ( _2 )}

name_string:
  _1 = ID
    {             ( Ident ( _1  ) )}
| _1 = QUOTED_STRING
    {                 ( QuotedString ( _1 ) )}

%%


