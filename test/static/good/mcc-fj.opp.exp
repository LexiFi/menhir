File "mcc-fj.mly", line 195, characters 35-44:
Warning: the token TokAssign is unused.
File "mcc-fj.mly", line 204, characters 20-27:
Warning: the token TokCase is unused.
File "mcc-fj.mly", line 210, characters 20-30:
Warning: the token TokDefault is unused.
File "mcc-fj.mly", line 219, characters 20-27:
Warning: the token TokGoto is unused.
File "mcc-fj.mly", line 255, characters 20-28:
Warning: the token TokQuest is unused.
File "mcc-fj.mly", line 260, characters 20-33:
Warning: the token TokRightArrow is unused.
File "mcc-fj.mly", line 238, characters 20-29:
Warning: the token TokSwitch is unused.
File "mcc-fj.mly", line 242, characters 20-29:
Warning: the token TokThrows is unused.
%{
open Symbol
open Fj_ast
open Fj_ast_util
open Fj_ast_state
open Fj_ast_exn

(*
 * The name of the root class.
 *)
let object_sym = Symbol.add "FjObject"

(*
 * The star symbol is used for parsing import statements
 *)
let star_sym = Symbol.add "*"

(*
 * Var name in a declaration.
 *)
type var_name =
   VarNameId of symbol * pos
 | VarNameArray of var_name * pos
 | VarNameFun of var_name * (symbol * ty) list * pos

let pos_of_var_name = function
   VarNameId (_, pos) -> pos
 | VarNameArray (_, pos) -> pos
 | VarNameFun (_, _, pos) -> pos

(*
 * This is a temporary hack because new arrays do
 * not allow arbitrary types.
 *)
let var_of_var_name = function
   VarNameId (id, pos) ->
      id, pos
 | VarNameArray (_, pos)
 | VarNameFun (_, _, pos) ->
      raise (AstException (pos, StringError "complex array allocations not implemented"))

(*
 * Build a variable name from an id and a nest tree.
 *)
let make_var_name id nest pos =
   let rec collect name = function
      0 -> name
    | i -> collect (VarNameArray (name, pos)) (pred i)
   in
      collect (VarNameId (id, pos)) nest

(*
 * Do the same for types.
 *)
let make_type id nest pos =
   let rec collect ty = function
      0 -> ty
    | i -> collect (TypeArray (ty, pos)) (pred i)
   in
      collect (TypeId (id, pos)) nest

(*
 * Build a variable declaration from the syntax.
 *)
let rec make_var_decl ty = function
   VarNameId (n, pos) ->
      n, ty, pos
 | VarNameArray (v, pos) ->
      make_var_decl (TypeArray (ty, pos)) v
 | VarNameFun (v, args, pos) ->
      make_var_decl (TypeFun (List.map snd args, ty, pos)) v

and make_var_decls ty decls =
   List.map (make_var_decl ty) decls

(*
 * Make a param decl from a var decl.
 *)
let make_param_decls args =
   List.map (fun (v, ty, _) -> v, ty) args

(*
 * Build a variable declaration from the syntax.
 *)
let make_var_init_decls ty defs =
   (* Build the declaration with an initializer *)
   let rec make_def ty e = function
      VarNameId (n, pos) ->
         n, ty, e, pos
    | VarNameArray (v, pos) ->
         make_def (TypeArray (ty, pos)) e v
    | VarNameFun (v, args, pos) ->
         make_def (TypeFun (List.map snd args, ty, pos)) e v
   in

   (* Initial type *)
   let make_init_def (v, e) =
      make_def ty e v
   in
      List.map make_init_def defs

(*
 * A function definition.
 *)
let get_fun_var (v, ty) =
   v, ty, pos_of_type ty

let make_fun_def ty_mods ty decl body pos =
   let pos = union_pos (pos_of_type ty) pos in
   match decl with
      VarNameFun (res, vars, _) ->
         let vars = List.map get_fun_var vars in
         let f, ty, _ = make_var_decl ty res in
            FunDefs ([ty_mods, f, vars, ty, SeqExpr (body, pos), pos], pos)
    | VarNameId _
    | VarNameArray _ ->
         raise (AstException (pos, StringError "not a function"))

(*
 * Constructor definition.
 *)
let make_const_def ty_mods decl body pos =
   match decl with
      VarNameFun (res, vars, _) ->
         let vars = List.map get_fun_var vars in
         let f, _, _ = make_var_decl (TypeVoid pos) res in
            ConstDef (ty_mods, f, vars, SeqExpr (body, pos), pos)
    | VarNameId _
    | VarNameArray _ ->
         raise (AstException (pos, StringError "not a function"))

(*
 * Unary expression.
 *)
let make_unop op expr =
   UnOpExpr (op, expr, pos_of_expr expr)

(*
 * Binary expressions.
 *)
let make_binop op expr1 expr2 =
   let pos = union_pos (pos_of_expr expr1) (pos_of_expr expr2) in
      BinOpExpr (op, expr1, expr2, pos)

let make_boolop op expr1 expr2 =
   let pos = union_pos (pos_of_expr expr1) (pos_of_expr expr2) in
      BoolOpExpr (op, expr1, expr2, pos)

(*
 * Pre and pos increment.
 *)
let make_uarith_op pos op expr =
   let pos = union_pos pos (pos_of_expr expr) in
      UArithExpr (op, expr, pos)

(*
 * Optional expression.
 *)
let make_opt_expr opt_expr def_expr =
   match opt_expr with
      Some expr -> expr
    | None -> def_expr
%}
%start prog
%token <Fj_ast.pos> TokAbstract
%token <Fj_ast.pos> TokAmp
%token <Fj_ast.pos> TokAsr
%token <Fj_ast.binop * Fj_ast.pos> TokAssign
%token <Fj_ast.pos> TokBang
%token <Fj_ast.pos> TokBreak
%token <Fj_ast.pos> TokCase
%token <Fj_ast.pos> TokCatch
%token <char * Fj_ast.pos> TokChar
%token <Fj_ast.pos> TokClass
%token <Fj_ast.pos> TokColon
%token <Fj_ast.pos> TokComma
%token <Fj_ast.pos> TokConst
%token <Fj_ast.pos> TokContinue
%token <Fj_ast.pos> TokDefault
%token <Fj_ast.pos> TokDo
%token <Fj_ast.pos> TokDot
%token <Fj_ast.pos> TokDoubleBrack
%token <Fj_ast.pos> TokElse
%token TokEof
%token <Fj_ast.pos> TokEq
%token <Fj_ast.pos> TokEqEq
%token <Fj_ast.pos> TokExtends
%token <Fj_ast.pos> TokFalse
%token <Fj_ast.pos> TokFinal
%token <Fj_ast.pos> TokFinally
%token <float * Fj_ast.pos> TokFloat
%token <Fj_ast.pos> TokFor
%token <Fj_ast.pos> TokGe
%token <Fj_ast.pos> TokGoto
%token <Fj_ast.pos> TokGt
%token <Fj_ast.pos> TokHat
%token <Symbol.symbol * Fj_ast.pos> TokId
%token <Fj_ast.pos> TokIf
%token <Fj_ast.pos> TokImplements
%token <Fj_ast.pos> TokImport
%token <Fj_ast.pos> TokInstanceof
%token <int * Fj_ast.pos> TokInt
%token <Fj_ast.pos> TokInterface
%token <Fj_ast.pos> TokLAnd
%token <Fj_ast.pos> TokLOr
%token <Fj_ast.pos> TokLe
%token <Fj_ast.pos> TokLeftBrace
%token <Fj_ast.pos> TokLeftBrack
%token <Fj_ast.pos> TokLeftParen
%token <Fj_ast.pos> TokLsl
%token <Fj_ast.pos> TokLsr
%token <Fj_ast.pos> TokLt
%token <Fj_ast.pos> TokMinus
%token <Fj_ast.pos> TokMinusMinus
%token <Fj_ast.pos> TokNative
%token <Fj_ast.pos> TokNew
%token <Fj_ast.pos> TokNil
%token <Fj_ast.pos> TokNotEq
%token <Fj_ast.pos> TokPackage
%token <Fj_ast.pos> TokPercent
%token <Fj_ast.pos> TokPipe
%token <Fj_ast.pos> TokPlus
%token <Fj_ast.pos> TokPlusPlus
%token <Fj_ast.pos> TokPrivate
%token <Fj_ast.pos> TokProtected
%token <Fj_ast.pos> TokPublic
%token <Fj_ast.pos> TokQuest
%token <Fj_ast.pos> TokReturn
%token <Fj_ast.pos> TokRightArrow
%token <Fj_ast.pos> TokRightBrace
%token <Fj_ast.pos> TokRightBrack
%token <Fj_ast.pos> TokRightParen
%token <Fj_ast.pos> TokSemi
%token <Fj_ast.pos> TokSlash
%token <Fj_ast.pos> TokStar
%token <Fj_ast.pos> TokStatic
%token <Fj_ast.pos> TokStrictfp
%token <string * Fj_ast.pos> TokString
%token <Fj_ast.pos> TokSwitch
%token <Fj_ast.pos> TokSynchronized
%token <Fj_ast.pos> TokThrow
%token <Fj_ast.pos> TokThrows
%token <Fj_ast.pos> TokTransient
%token <Fj_ast.pos> TokTrue
%token <Fj_ast.pos> TokTry
%token <Fj_ast.pos> TokVolatile
%token <Fj_ast.pos> TokWhile
%nonassoc TokInstanceof
%left TokComma
%right TokEq
%left TokLOr
%left TokLAnd
%left TokPipe
%left TokHat
%left TokAmp
%left TokEqEq TokNotEq
%left TokGe TokGt TokLe TokLt
%left TokAsr TokLsl TokLsr
%left TokMinus TokPlus
%left TokPercent TokSlash TokStar
%nonassoc TokThrow
%right TokMinusMinus TokPlusPlus prec_cast prec_unary
%left TokDot TokLeftBrack TokLeftParen prec_apply prec_subscript
%right TokFor TokWhile
%nonassoc prec_ifthen
%nonassoc TokElse prec_ifthenelse
%nonassoc TokTry
%left TokCatch TokFinally
%type <Fj_ast.prog> prog
%%

prog:
  _1 = opt_package_stmt _2 = opt_import_list _3 = class_or_interface_defs _4 = TokEof
    {          ( {  prog_package = _1;
               prog_imports = _2;
               prog_defs    = _3 }
          )}

opt_package_stmt:
  
    {      ( None )}
| _1 = TokPackage _2 = rev_dotted_name _3 = TokSemi
    {      ( Some (List.rev _2, union_pos _1 _3) )}

opt_import_list:
  
    {      ( [] )}
| _1 = rev_import_list
    {      ( List.rev _1 )}

rev_import_list:
  _1 = import_stmt
    {      ( [_1] )}
| _1 = rev_import_list _2 = import_stmt
    {      ( _2 :: _1 )}

import_stmt:
  _1 = TokImport _2 = rev_dotted_name _3 = TokSemi
    {      ( List.rev _2, union_pos _1 _3 )}
| _1 = TokImport _2 = rev_dotted_name _3 = TokDot _4 = TokStar _5 = TokSemi
    {      ( List.rev (star_sym :: _2), union_pos _1 _5 )}

rev_dotted_name:
  _1 = TokId
    {      ( [fst _1] )}
| _1 = rev_dotted_name _2 = TokDot _3 = TokId
    {      ( (fst _3) :: _1 )}

class_or_interface_defs:
  _1 = rev_class_or_interface_defs
    {          ( List.rev _1 )}

rev_class_or_interface_defs:
  
    {          ( [] )}
| _1 = rev_class_or_interface_defs _2 = class_or_interface_def
    {          ( _2 :: _1 )}

class_or_interface_def:
  _1 = rev_type_mod_list _2 = class_or_interface_def_content
    {          ( (* Add type modifier information *)
            match _2 with
               TypeDef (_, v, ty, pos) ->
                  TypeDef (List.rev _1, v, ty, pos)
             | ClassDef (_, a, b, c, d, e) ->
                  ClassDef (List.rev _1, a, b, c, d, e)
             | _ ->
                  failwith "Internal error while parsing class/interface def."
          )}

class_or_interface_def_content:
  _1 = class_def
    {          ( _1 )}
| _1 = interface_def
    {          ( _1 )}

interface_def:
  _1 = TokInterface _2 = TokId _3 = opt_extends_list _4 = TokLeftBrace _5 = rev_interface_body _6 = TokRightBrace
    {          ( let pos = union_pos _1 _6 in
            let v, _ = _2 in
            let ty = TypeInterface (v, _3, List.rev _5, pos) in
               TypeDef ([], v, ty, pos)
          )}

class_def:
  _1 = TokClass _2 = TokId _3 = opt_extends _4 = opt_implements _5 = TokLeftBrace _6 = class_body _7 = TokRightBrace
    {          ( let pos = union_pos _1 _7 in
            let v, _ = _2 in
               ClassDef ([], v, _3, _4, _6, pos)
          )}

opt_extends_list:
  
    {          ( [] )}
| _1 = TokExtends _2 = var_list
    {          ( List.map fst _2 )}

opt_extends:
  
    {          ( object_sym )}
| _1 = TokExtends _2 = TokId
    {          ( fst _2 )}

opt_implements:
  
    {          ( [] )}
| _1 = TokImplements _2 = var_list
    {          ( List.map fst _2 )}

var_list:
  _1 = rev_var_list
    {          ( List.rev _1 )}

rev_var_list:
  _1 = TokId
    {          ( [_1] )}
| _1 = rev_var_list _2 = TokComma _3 = TokId
    {          ( _3 :: _1 )}

rev_interface_body:
  
    {          ( [] )}
| _1 = rev_interface_body _2 = rev_var_decl_list _3 = TokSemi
    {          ( _2 @ _1 )}

class_body:
  _1 = rev_member_defs
    {          ( List.rev _1 )}

rev_member_defs:
  
    {          ( [] )}
| _1 = rev_member_defs _2 = rev_type_mod_list _3 = member_def
    {          ( let ty_mods = List.rev _2 in
            let mem_def = match _3 with
               VarDefs (_, vdl, pos) ->
                  VarDefs (ty_mods, vdl, pos)
             | FunDefs ([_, f, vars, ty, se, pos], pos2) ->
                  FunDefs ([ty_mods, f, vars, ty, se, pos], pos2)
             | ConstDef (_, f, vars, se, pos) ->
                  ConstDef (ty_mods, f, vars, se, pos )
             | _ ->
                  failwith "Internal Error: Unexpected def while parsing"
            in
               mem_def :: _1
          )}

member_def:
  _1 = var_defs
    {          ( _1 )}
| _1 = fun_def
    {          ( _1 )}
| _1 = const_def
    {          ( _1 )}

rev_type_mod_list:
  
    {          ( [] )}
| _1 = rev_type_mod_list _2 = type_mod
    {          ( _2 :: _1 )}

type_mod:
  _1 = TokPublic
    {          ( ModPublic _1 )}
| _1 = TokProtected
    {          ( ModProtected _1 )}
| _1 = TokPrivate
    {          ( ModPrivate _1 )}
| _1 = TokStatic
    {          ( ModStatic _1 )}
| _1 = TokFinal
    {          ( ModFinal _1 )}
| _1 = TokNative
    {          ( ModNative _1 )}
| _1 = TokAbstract
    {          ( ModAbstract _1 )}
| _1 = TokSynchronized
    {          ( ModSynchronized _1 )}
| _1 = TokTransient
    {          ( ModTransient _1 )}
| _1 = TokVolatile
    {          ( ModVolatile _1 )}
| _1 = TokStrictfp
    {          ( ModStrictfp _1 )}
| _1 = TokConst
    {          ( raise (AstException (_1,
               (StringError "'const' is reserved, but not a Java keyword"))) )}

type_spec:
  _1 = id_brackets
    {          ( let id, nest, pos = _1 in
               make_type id nest pos
          )}

id_brackets:
  _1 = TokId
    {          ( let id, pos = _1 in
               id, 0, pos
          )}
| _1 = TokId _2 = brackets
    {          ( let id, pos1 = _1 in
            let nest, pos2 = _2 in
            let pos = union_pos pos1 pos2 in
               id, nest, pos
          )}

brackets:
  _1 = TokDoubleBrack
    {          ( 1, _1 )}
| _1 = brackets _2 = TokDoubleBrack
    {          ( let count, pos1 = _1 in
              succ count, union_pos pos1 _2
          )}

opt_var_decl_list:
  
    {          ( [] )}
| _1 = var_decl_list
    {          ( _1 )}

var_decl_list:
  _1 = rev_var_decl_list
    {          ( List.rev _1 )}

rev_var_decl_list:
  _1 = var_decl
    {          ( [_1] )}
| _1 = rev_var_decl_list _2 = TokComma _3 = var_decl
    {          ( _3 :: _1 )}

var_decl:
  _1 = type_spec _2 = direct_decl
    {          ( make_var_decl _1 _2 )}

var_defs:
  _1 = type_spec _2 = init_def_list _3 = TokSemi
    {          ( let pos = union_pos (pos_of_type _1) _3 in
               VarDefs ([], make_var_init_decls _1 _2, pos)
          )}

init_def_list:
  _1 = rev_init_def_list
    {          ( List.rev _1 )}

rev_init_def_list:
  _1 = init_def
    {          ( [_1] )}
| _1 = rev_init_def_list _2 = TokComma _3 = init_def
    {          ( _3 :: _1 )}

init_def:
  _1 = direct_decl
    {          ( _1, None )}
| _1 = direct_decl _2 = TokEq _3 = expr
    {          ( _1, Some _3 )}

direct_decl:
  _1 = id_brackets
    {          ( let id, nest, pos = _1 in
               make_var_name id nest pos
          )}
| _1 = fun_decl
    {          ( _1 )}

fun_decl:
  _1 = id_brackets _2 = TokLeftParen _3 = opt_var_decl_list _4 = TokRightParen
    {          ( let id, nest, pos1 = _1 in
            let name = make_var_name id nest pos1 in
            let pos = union_pos pos1 _4 in
               VarNameFun (name, make_param_decls _3, pos)
          )}
| _1 = fun_decl _2 = TokDoubleBrack %prec prec_subscript
    {          ( let pos = union_pos (pos_of_var_name _1) _2 in
               VarNameArray (_1, pos)
          )}
| _1 = fun_decl _2 = TokLeftParen _3 = opt_var_decl_list _4 = TokRightParen %prec prec_apply
    {          ( let pos = union_pos (pos_of_var_name _1) _4 in
               VarNameFun (_1, make_param_decls _3, pos)
          )}

fun_def:
  _1 = type_spec _2 = direct_decl _3 = TokLeftBrace _4 = stmt_list _5 = TokRightBrace
    {          ( make_fun_def [] _1 _2 _4 _5 )}

const_def:
  _1 = direct_decl _2 = TokLeftBrace _3 = stmt_list _4 = TokRightBrace
    {          ( make_const_def [] _1 _3 _4 )}

expr:
  _1 = ncast_expr
    {          ( _1 )}
| _1 = cast_expr
    {          ( _1 )}

ncast_expr:
  _1 = TokInt
    {          ( let i, pos = _1 in
               IntExpr (i, pos)
          )}
| _1 = TokFloat
    {          ( let x, pos = _1 in
               FloatExpr (x, pos)
          )}
| _1 = TokChar
    {          ( let c, pos = _1 in
               CharExpr (c, pos)
          )}
| _1 = TokString
    {          ( let s, pos = _1 in
               StringExpr (s, pos)
          )}
| _1 = TokNil
    {          ( NilExpr _1 )}
| _1 = TokTrue
    {          ( BoolExpr (true, _1) )}
| _1 = TokFalse
    {          ( BoolExpr (false, _1) )}
| _1 = TokMinus _2 = expr %prec prec_unary
    {          ( make_unop UMinusOp _2 )}
| _1 = TokBang _2 = expr %prec prec_unary
    {          ( make_unop UNotOp _2 )}
| _1 = TokPlusPlus _2 = expr %prec prec_unary
    {          ( make_uarith_op _1 PreIncrOp _2 )}
| _1 = TokMinusMinus _2 = expr %prec prec_unary
    {          ( make_uarith_op _1 PreDecrOp _2 )}
| _1 = expr _2 = TokPlusPlus %prec prec_unary
    {          ( make_uarith_op _2 PostIncrOp _1 )}
| _1 = expr _2 = TokMinusMinus %prec prec_unary
    {          ( make_uarith_op _2 PostDecrOp _1 )}
| _1 = expr _2 = TokPlus _3 = expr
    {          ( make_binop PlusOp _1 _3 )}
| _1 = expr _2 = TokMinus _3 = expr
    {          ( make_binop MinusOp _1 _3 )}
| _1 = expr _2 = TokStar _3 = expr
    {          ( make_binop TimesOp _1 _3 )}
| _1 = expr _2 = TokSlash _3 = expr
    {          ( make_binop DivideOp _1 _3 )}
| _1 = expr _2 = TokPercent _3 = expr
    {          ( make_binop ModOp _1 _3 )}
| _1 = expr _2 = TokLsl _3 = expr
    {          ( make_binop LslOp _1 _3 )}
| _1 = expr _2 = TokLsr _3 = expr
    {          ( make_binop LsrOp _1 _3 )}
| _1 = expr _2 = TokAsr _3 = expr
    {          ( make_binop AsrOp _1 _3 )}
| _1 = expr _2 = TokLAnd _3 = expr
    {          ( make_boolop LAndOp _1 _3 )}
| _1 = expr _2 = TokLOr _3 = expr
    {          ( make_boolop LOrOp _1 _3 )}
| _1 = expr _2 = TokEqEq _3 = expr
    {          ( make_binop EqOp _1 _3 )}
| _1 = expr _2 = TokNotEq _3 = expr
    {          ( make_binop NeqOp _1 _3 )}
| _1 = expr _2 = TokLe _3 = expr
    {          ( make_binop LeOp _1 _3 )}
| _1 = expr _2 = TokLt _3 = expr
    {          ( make_binop LtOp _1 _3 )}
| _1 = expr _2 = TokGe _3 = expr
    {          ( make_binop GeOp _1 _3 )}
| _1 = expr _2 = TokGt _3 = expr
    {          ( make_binop GtOp _1 _3 )}
| _1 = expr _2 = TokEq _3 = expr
    {          ( let pos = union_pos (pos_of_expr _1) (pos_of_expr _3) in
               AssignExpr (None, _1, _3, pos)
          )}
| _1 = expr _2 = binop _3 = TokEq _4 = expr %prec TokEq
    {          ( let pos = union_pos (pos_of_expr _1) (pos_of_expr _4) in
               AssignExpr (Some _2, _1, _4, pos)
          )}
| _1 = expr _2 = TokInstanceof _3 = TokId
    {          ( let id, pos = _3 in
            let pos = union_pos (pos_of_expr _1) pos in
               InstanceofExpr (_1, id, pos)
          )}
| _1 = TokNew _2 = new_expr
    {          ( _2 )}
| _1 = TokThrow _2 = expr
    {          ( let pos = union_pos _1 (pos_of_expr _2) in
               ThrowExpr (_2, pos)
          )}

cast_expr:
  _1 = TokId
    {          ( let id, pos = _1 in
               VarExpr (id, pos)
          )}
| _1 = cast_expr _2 = TokDot _3 = TokId
    {          ( let pos = union_pos (pos_of_expr _1) (snd _3) in
               ProjectExpr (_1, fst _3, pos)
          )}
| _1 = cast_expr _2 = TokLeftBrack _3 = expr _4 = TokRightBrack %prec prec_subscript
    {          ( let pos = union_pos (pos_of_expr _1) _4 in
               SubscriptExpr (_1, _3, pos)
          )}
| _1 = cast_expr _2 = TokLeftParen _3 = arg_list _4 = TokRightParen %prec prec_apply
    {          ( let pos = union_pos (pos_of_expr _1) _4 in
               ApplyExpr (_1, _3, pos)
          )}
| _1 = TokLeftParen _2 = TokId _3 = TokRightParen _4 = cast_expr %prec prec_cast
    {          ( let id, pos2 = _2 in
            let ty = make_type id 0 pos2 in
            let pos = union_pos _1 (pos_of_expr _4) in
               CastExpr (ty, _4, pos)
          )}
| _1 = TokLeftParen _2 = TokId _3 = brackets _4 = TokRightParen _5 = cast_expr %prec prec_cast
    {          ( let id, pos2 = _2 in
            let nest, pos3 = _3 in
            let ty = make_type id nest (union_pos pos2 pos3) in
            let pos = union_pos _1 (pos_of_expr _5) in
               CastExpr (ty, _5, pos)
          )}
| _1 = TokLeftParen _2 = ncast_expr _3 = TokRightParen %prec prec_apply
    {          ( _2 )}
| _1 = TokLeftParen _2 = TokId _3 = TokRightParen %prec prec_apply
    {          ( let id, pos = _2 in
               VarExpr (id, pos)
          )}

new_expr:
  _1 = new_array _2 = rev_brackets
    {          ( let id, pos1 = var_of_var_name _1 in
            let dimens, pos2 = _2 in
            let pos = union_pos pos1 pos2 in
               NewArrayExpr (id, List.rev dimens, pos)
          )}
| _1 = TokId _2 = TokLeftParen _3 = rev_arg_list _4 = TokRightParen
    {          ( let id, pos1 = _1 in
            let pos = union_pos pos1 _4 in
               NewConstExpr (id, List.rev _3, pos)
          )}
| _1 = new_const
    {          ( let id, pos = _1 in
               NewConstExpr (id, [], pos)
          )}

new_array:
  _1 = new_type
    {           ( _1 )}
| _1 = TokId
    {           ( let id, pos = _1 in
                VarNameId (id, pos)
           )}

new_type:
  _1 = new_type _2 = TokDoubleBrack
    {           ( let pos = union_pos (pos_of_var_name _1) _2 in
               VarNameArray (_1, pos)
           )}
| _1 = new_type _2 = TokLeftParen _3 = opt_var_decl_list _4 = TokRightParen
    {           ( let pos = union_pos (pos_of_var_name _1) _4 in
               VarNameFun (_1, make_param_decls _3, pos)
           )}
| _1 = TokId _2 = TokDoubleBrack
    {           ( let id, pos1 = _1 in
             let pos = union_pos pos1 _2 in
                VarNameArray (VarNameId (id, pos1), pos)
           )}
| _1 = TokId _2 = TokLeftParen _3 = var_decl_list _4 = TokRightParen
    {           ( let id, pos1 = _1 in
             let pos = union_pos pos1 _4 in
                VarNameFun (VarNameId (id, pos1), make_param_decls _3, pos)
           )}
| _1 = new_const
    {           ( let id, pos = _1 in
               VarNameFun (VarNameId (id, pos), [], pos)
           )}

new_const:
  _1 = TokId _2 = TokLeftParen _3 = TokRightParen
    {           ( _1 )}

rev_brackets:
  _1 = TokLeftBrack _2 = expr _3 = TokRightBrack %prec prec_subscript
    {          ( let pos = union_pos _1 _3 in
               [_2], pos
          )}
| _1 = rev_brackets _2 = TokLeftBrack _3 = expr _4 = TokRightBrack %prec prec_subscript
    {          ( let args, pos1 = _1 in
            let pos = union_pos pos1 _4 in
               _3 :: args, pos
          )}

opt_label:
  
    {         ( None )}
| _1 = TokId
    {         ( Some (fst _1) )}

opt_expr:
  
    {          ( None )}
| _1 = expr
    {          ( Some _1 )}

stmt:
  _1 = TokSemi
    {          ( SeqExpr ([], _1) )}
| _1 = expr _2 = TokSemi
    {          ( _1 )}
| _1 = TokIf _2 = TokLeftParen _3 = expr _4 = TokRightParen _5 = stmt %prec prec_ifthen
    {          ( let pos = union_pos _1 (pos_of_expr _5) in
               IfExpr (_3, _5, None, pos)
          )}
| _1 = TokIf _2 = TokLeftParen _3 = expr _4 = TokRightParen _5 = stmt _6 = TokElse _7 = stmt %prec prec_ifthenelse
    {          ( let pos = union_pos _1 (pos_of_expr _7) in
               IfExpr (_3, _5, Some _7, pos)
          )}
| _1 = TokFor _2 = TokLeftParen _3 = opt_expr _4 = TokSemi _5 = opt_expr _6 = TokSemi _7 = opt_expr _8 = TokRightParen _9 = stmt %prec TokFor
    {          ( let pos = union_pos _1 (pos_of_expr _9) in
            let def_expr = IntExpr (1, pos) in
            let init = make_opt_expr _3 def_expr in
            let test = make_opt_expr _5 def_expr in
            let step = make_opt_expr _7 def_expr in
               ForExpr (init, test, step, _9, pos)
          )}
| _1 = TokWhile _2 = TokLeftParen _3 = expr _4 = TokRightParen _5 = stmt %prec TokWhile
    {          ( let pos = union_pos _1 (pos_of_expr _5) in
               WhileExpr (_3, _5, pos)
          )}
| _1 = TokDo _2 = stmt _3 = TokWhile _4 = TokLeftParen _5 = expr _6 = TokRightParen
    {          ( let pos = union_pos _1 _6 in
               DoExpr (_2, _5, pos)
          )}
| _1 = TokReturn _2 = expr _3 = TokSemi
    {          ( let pos = union_pos _1 (pos_of_expr _2) in
               ReturnExpr (_2, pos)
          )}
| _1 = TokBreak _2 = opt_label _3 = TokSemi
    {          ( let pos = union_pos _1 _3 in
               BreakExpr (_2, pos)
          )}
| _1 = TokContinue _2 = opt_label _3 = TokSemi
    {          ( let pos = union_pos _1 _3 in
               ContinueExpr (_2, pos)
          )}
| _1 = TokLeftBrace _2 = stmt_list _3 = TokRightBrace
    {          ( let pos = union_pos _1 _3 in
               SeqExpr (_2, pos)
          )}
| _1 = TokTry _2 = TokLeftBrace _3 = stmt_list _4 = TokRightBrace _5 = rev_catches _6 = opt_finally %prec TokTry
    {          ( let pos = union_pos _1 _4 in
               TryExpr (SeqExpr (_3, pos), _5, _6, pos)
          )}
| _1 = var_defs
    {          ( let pos = pos_of_def _1 in
               DefExpr (_1, pos)
          )}
| _1 = fun_def
    {          ( let pos = pos_of_def _1 in
               DefExpr (_1, pos)
          )}
| _1 = TokId _2 = TokColon _3 = stmt
    {          ( let sym, pos = _1 in
            let pos = union_pos (snd _1) (pos_of_expr _3) in
               LabeledExpr (sym, _3, pos)
          )}

rev_catches:
  
    {          ( [] )}
| _1 = rev_catches _2 = TokCatch _3 = TokLeftParen _4 = TokId _5 = TokId _6 = TokRightParen _7 = TokLeftBrace _8 = stmt_list _9 = TokRightBrace %prec TokCatch
    {          ( let pos = union_pos _7 _9 in
               (fst _4, fst _5, SeqExpr (_8, pos)) :: _1
          )}

opt_finally:
  
    {          ( None )}
| _1 = TokFinally _2 = TokLeftBrace _3 = stmt_list _4 = TokRightBrace %prec TokFinally
    {          ( let pos = union_pos _1 _4 in
               Some (SeqExpr (_3, pos))
          )}

stmt_list:
  _1 = rev_stmt_list
    {          ( List.rev _1 )}

rev_stmt_list:
  
    {          ( [] )}
| _1 = rev_stmt_list _2 = stmt
    {          ( _2 :: _1 )}

arg_list:
  
    {          ( [] )}
| _1 = rev_arg_list
    {          ( List.rev _1 )}

rev_arg_list:
  _1 = expr
    {          ( [_1] )}
| _1 = rev_arg_list _2 = TokComma _3 = expr
    {          ( _3 :: _1 )}

binop:
  _1 = TokPlus
    {          ( PlusOp )}
| _1 = TokMinus
    {          ( MinusOp )}
| _1 = TokStar
    {          ( TimesOp )}
| _1 = TokSlash
    {          ( DivideOp )}
| _1 = TokPercent
    {          ( ModOp )}
| _1 = TokAmp
    {          ( BAndOp )}
| _1 = TokPipe
    {          ( BOrOp )}
| _1 = TokHat
    {          ( BXorOp )}
| _1 = TokLsl
    {          ( LslOp )}
| _1 = TokLsr
    {          ( LsrOp )}
| _1 = TokAsr
    {          ( AsrOp )}

%%
