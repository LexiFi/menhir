File "mcc-moogle.mly", line 45, characters 29-37:
Warning: the token TokCaret is unused.
File "mcc-moogle.mly", line 56, characters 29-37:
Warning: the token TokQuery is unused.
%{
   open Symbol
   open Moogle_ast_type
   open Moogle_util
   open Moogle_exn
%}
%start prog
%token <Moogle_ast_type.pos> TokAbs
%token <Moogle_ast_type.pos> TokAmp
%token <Moogle_ast_type.pos> TokAmpAmp
%token <Moogle_ast_type.pos> TokArrow
%token <Moogle_ast_type.pos> TokAt
%token <Moogle_ast_type.pos> TokBang
%token <Symbol.symbol * Moogle_ast_type.pos> TokCapIdent
%token <Moogle_ast_type.pos> TokCaret
%token <Moogle_ast_type.pos> TokColon
%token <Moogle_ast_type.pos> TokComma
%token <Moogle_ast_type.pos> TokCopy
%token <Moogle_ast_type.pos> TokDead
%token <Moogle_ast_type.pos> TokDollar
%token <Moogle_ast_type.pos> TokEndscope
%token <Moogle_ast_type.pos> TokEof
%token <Moogle_ast_type.pos> TokEqual
%token <Moogle_ast_type.pos> TokGreaterEqual
%token <Moogle_ast_type.pos> TokGreaterThan
%token <Symbol.symbol * Moogle_ast_type.pos> TokIdent
%token <Moogle_ast_type.pos> TokIgnores
%token <Moogle_ast_type.pos> TokInput
%token <Moogle_ast_type.pos> TokInsts
%token <int32         * Moogle_ast_type.pos> TokInt
%token <Moogle_ast_type.pos> TokIrrelevant
%token <Moogle_ast_type.pos> TokIspower2
%token <Moogle_ast_type.pos> TokLBrack
%token <Moogle_ast_type.pos> TokLParen
%token <Moogle_ast_type.pos> TokLessEqual
%token <Moogle_ast_type.pos> TokLessThan
%token <Moogle_ast_type.pos> TokLog2
%token <Moogle_ast_type.pos> TokMemory
%token <Moogle_ast_type.pos> TokMinus
%token <Moogle_ast_type.pos> TokName
%token <Moogle_ast_type.pos> TokNew
%token <Moogle_ast_type.pos> TokNotEqual
%token <string        * Moogle_ast_type.pos> TokOCaml
%token <Moogle_ast_type.pos> TokOpen
%token <Moogle_ast_type.pos> TokOutput
%token <Moogle_ast_type.pos> TokPercent
%token <Moogle_ast_type.pos> TokPipe
%token <Moogle_ast_type.pos> TokPipePipe
%token <Moogle_ast_type.pos> TokPlus
%token <Moogle_ast_type.pos> TokPow2
%token <Moogle_ast_type.pos> TokPreserves
%token <Moogle_ast_type.pos> TokQuery
%token <Moogle_ast_type.pos> TokRBrack
%token <Moogle_ast_type.pos> TokRParen
%token <Moogle_ast_type.pos> TokRegisters
%token <Moogle_ast_type.pos> TokSar
%token <Moogle_ast_type.pos> TokSemi
%token <Moogle_ast_type.pos> TokShl
%token <Moogle_ast_type.pos> TokShr
%token <Moogle_ast_type.pos> TokSmall
%token <Moogle_ast_type.pos> TokStack
%token <Moogle_ast_type.pos> TokStar
%token <string        * Moogle_ast_type.pos> TokString
%token <Moogle_ast_type.pos> TokTilde
%token <Moogle_ast_type.pos> TokTrans
%token <Moogle_ast_type.pos> TokTrivial
%token <Moogle_ast_type.pos> TokUnder
%token <Moogle_ast_type.pos> TokWhen
%left TokSar TokShl TokShr shift_prec
%left TokAmp TokPipe logical_prec
%left TokMinus TokPlus plusminus_prec
%right TokAbs TokLog2 TokPow2 TokTilde unary_prec
%left TokAmpAmp TokPipePipe bool_prec
%type <Moogle_ast_type.expr list> prog
%%

prog:
  _1 = TokEof
    {               ( [] )}
| _1 = expr _2 = prog
    {               ( _1 :: _2 )}

expr:
  _1 = input_output_statement
    {                           ( _1 )}
| _1 = open_statement
    {                           ( _1 )}
| _1 = name_statement
    {                           ( _1 )}
| _1 = register_statement
    {                           ( _1 )}
| _1 = instruction_statement
    {                           ( _1 )}
| _1 = transform_statement
    {                           ( _1 )}
| _1 = trivial_statement
    {                           ( _1 )}

in_pattern_expr:
  _1 = opcode_name _2 = in_operand_list_opt _3 = inst_modifier_list_opt
    {                                                          (
      let opcode, pos = _1 in
      let operands = _2 in
      let modifiers = _3 in
      let pos = union_pos_inst_restriction_list pos modifiers in
         InInst (opcode, operands, modifiers, pos)
   )}
| _1 = TokUnder _2 = inst_modifier_list_opt
    {                                   (
      let modifiers = _2 in
      let pos = union_pos_inst_restriction_list _1 modifiers in
         InInst (underscore, [], modifiers, pos)
   )}
| _1 = TokStar _2 = inst_modifier_list_opt
    {                                  (
      let modifiers = _2 in
      let pos = union_pos_inst_restriction_list _1 modifiers in
         InStar (modifiers, pos)
   )}

out_pattern_expr:
  _1 = opcode_name _2 = out_operand_list_opt
    {                                    (
      let opcode, pos = _1 in
      let operands = _2 in
      let pos = union_pos_operand_list pos operands in
         OutInst (opcode, operands, pos)
   )}
| _1 = TokCopy _2 = out_integer_list
    {                            (
      let ls, pos = _2 in
      let pos = union_pos _1 pos in
         OutCopy (ls, pos)
   )}
| _1 = TokIdent _2 = TokInt _3 = TokComma _4 = arith_expr_list
    {                                            (
      let transform, pos = _1 in
      let i, _ = _2 in
      let operands = _4 in
      let pos = union_pos_arith_list pos operands in
         OutTransform (transform, i, operands, pos);
   )}
| _1 = TokIdent _2 = TokInt
    {                   (
      let transform, pos1 = _1 in
      let i, pos2 = _2 in
      let pos = union_pos pos1 pos2 in
         OutTransform (transform, i, [], pos)
   )}
| _1 = TokNew _2 = TokPercent _3 = TokIdent
    {                              (
      let v, pos = _3 in
      let pos = union_pos _1 pos in
         OutNew (v, TyReg, pos)
   )}

in_pattern_list:
  _1 = in_pattern_expr _2 = TokSemi _3 = in_pattern_list
    {                                           ( _1 :: _3 )}
| _1 = in_pattern_expr _2 = TokSemi
    {                           ( [_1] )}

out_pattern_list:
  _1 = out_pattern_expr _2 = TokSemi _3 = out_pattern_list
    {                                             ( _1 :: _3 )}
| _1 = out_pattern_expr _2 = TokSemi
    {                            ( [_1] )}

out_pattern_list_opt:
  _1 = out_pattern_list
    {                    ( _1 )}
| 
    {   ( [] )}

opcode_name:
  _1 = TokCapIdent
    {               ( _1 )}
| _1 = TokIdent
    {            ( _1 )}

out_integer_list:
  _1 = TokInt _2 = TokComma _3 = out_integer_list
    {                                    (
      let i, pos1 = _1 in
      let ls, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         i :: ls, pos
   )}
| _1 = TokInt
    {          (
      let i, pos = _1 in
         [i], pos
   )}

in_operand:
  _1 = TokCapIdent
    {               (
      let ident, pos = _1 in
         OpConstructor (ident, pos)
   )}
| _1 = in_operand_name _2 = operand_modifier_list_opt
    {                                             (
      let ident, pos = _1 in
      let modifiers = _2 in
      let pos = union_pos_op_restriction_list pos modifiers in
         Op (ident, modifiers, pos)
   )}
| _1 = TokPercent _2 = in_operand_name _3 = operand_modifier_list_opt
    {                                                        (
      let ident, _ = _2 in
      let modifiers = _3 in
      let pos = union_pos_op_restriction_list _1 modifiers in
         OpRegister (ident, modifiers, pos)
   )}
| _1 = TokAt _2 = in_operand_name _3 = operand_modifier_list_opt
    {                                                   (
      let ident, pos = _2 in
      let modifiers = _3 in
      let pos = union_pos_op_restriction_list _1 modifiers in
         OpFloatRegister (ident, modifiers, pos)
   )}
| _1 = TokAt _2 = TokStack _3 = in_operand_stack_index
    {                                         (
      let value = _3 in
      let pos = union_pos _1 _2 in
         OpFPStack (value, pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = in_operand_name _4 = TokComma _5 = in_operand_name _6 = TokComma _7 = value_reg _8 = TokComma _9 = value_reg _10 = TokRParen _11 = operand_modifier_list_opt
    {                                                                            (
      let ident_ptr, _ = _3 in
      let ident_reg, _ = _5 in
      let ident_off, _ = _7 in
      let ident_mul, _ = _9 in
      let modifiers = _11 in
      let pos = union_pos_op_restriction_list _1 modifiers in
         OpMemRegRegOffMul (ident_ptr, ident_reg, ident_off, ident_mul, modifiers, pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = in_operand_name _4 = TokComma _5 = value_reg _6 = TokRParen _7 = operand_modifier_list_opt
    {                                                                                            (
      let ident_ptr, _ = _3 in
      let ident_off, _ = _5 in
      let modifiers = _7 in
      let pos = union_pos_op_restriction_list _1 modifiers in
         OpMemRegOff (ident_ptr, ident_off, modifiers, pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = in_operand_name _4 = TokRParen _5 = operand_modifier_list_opt
    {                                                                         (
      let ident_ptr, _ = _3 in
      let modifiers = _5 in
      let pos = union_pos_op_restriction_list _1 modifiers in
         OpMemReg (ident_ptr, modifiers, pos)
   )}
| _1 = TokStar _2 = in_operand_name _3 = operand_modifier_list_opt
    {                                                     (
      let ident, _ = _2 in
      let modifiers = _3 in
      let modifiers = OpIsMem _1 :: modifiers in
      let pos = union_pos_op_restriction_list _1 modifiers in
         Op (ident, modifiers, pos)
   )}
| _1 = TokDollar _2 = value_reg
    {                       (
      let reg, pos = _2 in
      let pos = union_pos _1 pos in
         OpOffset (reg, pos)
   )}

out_operand:
  _1 = TokCapIdent
    {               (
      let ident, pos = _1 in
         OpConstructor (ident, pos)
   )}
| _1 = TokIdent
    {            (
      let ident, pos = _1 in
         Op (ident, (), pos)
   )}
| _1 = TokPercent _2 = TokIdent
    {                       (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         OpRegister (ident, (), pos)
   )}
| _1 = TokAt _2 = TokIdent
    {                  (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         OpFloatRegister (ident, (), pos)
   )}
| _1 = TokAt _2 = TokStack _3 = out_operand_stack_index
    {                                          (
      let value = _3 in
      let pos = union_pos _1 _2 in
         OpFPStack (value, pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = TokIdent _4 = TokComma _5 = TokIdent _6 = TokComma _7 = arith_expr _8 = TokComma _9 = arith_expr _10 = TokRParen
    {                                                                                                  (
      let ident_ptr, _ = _3 in
      let ident_reg, _ = _5 in
      let ident_off = _7 in
      let ident_mul = _9 in
      let pos = union_pos _1 _10 in
         OpMemRegRegOffMul (ident_ptr, ident_reg, ident_off, ident_mul, (), pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = TokIdent _4 = TokComma _5 = arith_expr _6 = TokRParen
    {                                                            (
      let ident_ptr, _ = _3 in
      let ident_off = _5 in
      let pos = union_pos _1 _6 in
         OpMemRegOff (ident_ptr, ident_off, (), pos)
   )}
| _1 = TokStar _2 = TokLParen _3 = TokIdent _4 = TokRParen
    {                                        (
      let ident_ptr, _ = _3 in
      let pos = union_pos _1 _4 in
         OpMemReg (ident_ptr, (), pos)
   )}
| _1 = TokDollar _2 = arith_expr
    {                        (
      let reg = _2 in
      let pos = union_pos _1 (pos_of_arith reg) in
         OpInteger (reg, pos)
   )}

in_operand_list:
  _1 = in_operand _2 = TokComma _3 = in_operand_list
    {                                       ( _1 :: _3 )}
| _1 = in_operand
    {              ( [_1] )}

out_operand_list:
  _1 = out_operand _2 = TokComma _3 = out_operand_list
    {                                         ( _1 :: _3 )}
| _1 = out_operand
    {               ( [_1] )}

in_operand_list_opt:
  _1 = in_operand_list
    {                   ( _1 )}
| 
    {   ( [] )}

out_operand_list_opt:
  _1 = out_operand_list
    {                    ( _1 )}
| 
    {   ( [] )}

in_operand_name:
  _1 = TokUnder
    {            ( new_symbol_string "wild", _1 )}
| _1 = TokIdent
    {            ( _1 )}

value_reg:
  _1 = in_operand_name
    {                   (
      let ident, pos = _1 in
         ValueReg ident, pos
   )}
| _1 = TokInt
    {          (
      let value, pos = _1 in
         ValueInt value, pos
   )}

in_operand_stack_index:
  _1 = TokLParen _2 = value_reg _3 = TokRParen
    {                                 (
      let value, _ = _2 in
         value
   )}
| 
    {   ( ValueInt Int32.zero )}

out_operand_stack_index:
  _1 = TokLParen _2 = arith_expr _3 = TokRParen
    {                                  ( _2 )}
| 
    {   ( ArithInt (Int32.zero, !Moogle_state.current_pos) )}

operand_modifier:
  _1 = TokBang _2 = TokIdent
    {                    (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         OpNotContains (ident, pos)
   )}
| _1 = TokBang _2 = TokStack
    {                    (
      let pos = union_pos _1 _2 in
         OpNotFPStack pos
   )}
| _1 = TokSmall
    {            (
      OpSmall _1
   )}

operand_modifier_list:
  _1 = operand_modifier _2 = operand_modifier_list
    {                                          ( _1 :: _2 )}
| _1 = operand_modifier
    {                    ( [_1] )}

operand_modifier_list_opt:
  _1 = operand_modifier_list
    {                         ( _1 )}
| 
    {   ( [] )}

inst_modifier:
  _1 = TokPreserves _2 = preserves_item
    {                               ( [_2] )}
| _1 = TokPreserves _2 = TokLBrack _3 = preserves_list _4 = TokRBrack
    {                                                   ( _3 )}
| _1 = TokIgnores _2 = ignores_item
    {                           ( [_2] )}
| _1 = TokIgnores _2 = TokLBrack _3 = ignores_list _4 = TokRBrack
    {                                               ( _3 )}
| _1 = TokDead _2 = dead_item
    {                     ( [_2] )}
| _1 = TokDead _2 = TokLBrack _3 = dead_list _4 = TokRBrack
    {                                         ( _3 )}
| _1 = TokEndscope _2 = TokIdent
    {                        (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         [InstEndscope (ident, pos)]
   )}
| _1 = TokIrrelevant
    {                 ( [InstIrrelevant _1] )}
| _1 = TokIdent
    {            (
      let ident, pos = _1 in
         [InstTag (ident, pos)]
   )}

inst_modifier_list:
  _1 = inst_modifier _2 = inst_modifier_list
    {                                    ( _1 @ _2 )}
| _1 = inst_modifier
    {                 ( _1 )}

inst_modifier_list_opt:
  _1 = TokColon _2 = inst_modifier_list
    {                               ( _2 )}
| 
    {   ( [] )}

preserves_list:
  _1 = preserves_item _2 = TokSemi _3 = preserves_list
    {                                         ( _1 :: _3 )}
| _1 = preserves_item
    {                  ( [_1] )}

preserves_item:
  _1 = TokMemory
    {             ( InstPreservesMem _1 )}
| _1 = TokIdent
    {            (
      let ident, pos = _1 in
         InstPreserves (ident, pos)
   )}

ignores_list:
  _1 = ignores_item _2 = TokSemi _3 = ignores_list
    {                                     ( _1 :: _3 )}
| _1 = ignores_item
    {                ( [_1] )}

ignores_item:
  _1 = TokMemory
    {             ( InstIgnoresMem _1 )}
| _1 = TokIdent
    {            (
      let ident, pos = _1 in
         InstIgnores (ident, pos)
   )}

dead_list:
  _1 = dead_item _2 = TokSemi _3 = dead_list
    {                               ( _1 :: _3 )}
| _1 = dead_item
    {             ( [_1] )}

dead_item:
  _1 = TokIdent
    {            (
      let ident, pos = _1 in
         InstNotLive (ident, pos)
   )}

input_output_statement:
  _1 = io_input_list _2 = io_output_list
    {                                (
      let inputs, pos1 = _1 in
      let outputs, pos2 = _2 in
      let pos = union_pos pos1 pos2 in
         Rule (inputs, outputs, pos)
   )}

io_input:
  _1 = TokInput _2 = io_name _3 = TokColon _4 = in_pattern_list _5 = TokWhen _6 = clause_expr
    {                                                                 (
      let name = _2 in
      let insts = _4 in
      let clause = _6 in
      let pos = union_pos _1 (pos_of_clause clause) in
      let input = InPattern (insts, Some clause, pos) in
         (name, input), pos
   )}
| _1 = TokInput _2 = io_name _3 = TokColon _4 = in_pattern_list
    {                                             (
      let name = _2 in
      let insts = _4 in
      let pos = union_pos_in_inst_list _1 insts in
      let input = InPattern (insts, None, pos) in
         (name, input), pos
   )}

io_input_list:
  _1 = io_input _2 = io_input_list
    {                          (
      let input, pos1 = _1 in
      let inputs, pos2 = _2 in
      let pos = union_pos pos1 pos2 in
         input :: inputs, pos
   )}
| _1 = io_input
    {            (
      let input, pos = _1 in
         [input], pos
   )}

io_name:
  _1 = TokString
    {             (
      let name, _ = _1 in
         Some name
   )}
| 
    {   ( None )}

io_output:
  _1 = TokOutput _2 = TokWhen _3 = clause_expr _4 = TokColon _5 = out_pattern_list_opt
    {                                                               (
      let clause = _3 in
      let pos = union_pos_out_inst_list _1 _5 in
         OutPattern (_5, Some clause, pos), pos
   )}
| _1 = TokOutput _2 = TokColon _3 = out_pattern_list_opt
    {                                           (
      let pos = union_pos_out_inst_list _1 _3 in
         OutPattern (_3, None, pos), pos
   )}

io_output_list:
  _1 = io_output _2 = io_output_list
    {                            (
      let output, pos1 = _1 in
      let outputs, pos2 = _2 in
      let pos = union_pos pos1 pos2 in
         output :: outputs, pos
   )}
| _1 = io_output
    {             (
      let output, pos = _1 in
         [output], pos
   )}

arith_expr:
  _1 = TokIdent
    {            (
      let ident, pos = _1 in
         ArithReg (ident, pos)
   )}
| _1 = TokInt
    {          (
      let value, pos = _1 in
         ArithInt (value, pos)
   )}
| _1 = TokLParen _2 = arith_expr _3 = TokRParen
    {                                  ( _2 )}
| _1 = arith_expr _2 = plus_minus_op _3 = arith_expr %prec plusminus_prec
    {                                                            (
      let v1 = _1 in
      let v2 = _3 in
      let pos = union_pos (pos_of_arith v1) (pos_of_arith v2) in
         ArithBinop (_2, v1, v2, pos)
   )}
| _1 = arith_expr _2 = logical_op _3 = arith_expr %prec logical_prec
    {                                                       (
      let v1 = _1 in
      let v2 = _3 in
      let pos = union_pos (pos_of_arith v1) (pos_of_arith v2) in
         ArithBinop (_2, v1, v2, pos)
   )}
| _1 = arith_expr _2 = shift_op _3 = arith_expr %prec shift_prec
    {                                                   (
      let v1 = _1 in
      let v2 = _3 in
      let pos = union_pos (pos_of_arith v1) (pos_of_arith v2) in
         ArithBinop (_2, v1, v2, pos)
   )}
| _1 = unary_op _2 = arith_expr %prec unary_prec
    {                                        (
      let op, pos = _1 in
      let v = _2 in
      let pos = union_pos pos (pos_of_arith v) in
         ArithUnop (op, v, pos)
   )}

arith_expr_list:
  _1 = arith_expr _2 = TokComma _3 = arith_expr_list
    {                                       ( _1 :: _3 )}
| _1 = arith_expr
    {              ( [_1] )}

plus_minus_op:
  _1 = TokPlus
    {           ( PlusOp )}
| _1 = TokMinus
    {            ( MinusOp )}

logical_op:
  _1 = TokAmp
    {          ( AndOp )}
| _1 = TokPipe
    {           ( OrOp )}

shift_op:
  _1 = TokShl
    {          ( ShlOp )}
| _1 = TokSar
    {          ( SarOp )}
| _1 = TokShr
    {          ( ShrOp )}

unary_op:
  _1 = TokMinus
    {            ( UMinusOp, _1 )}
| _1 = TokTilde
    {            ( UNotOp, _1 )}
| _1 = TokAbs
    {           ( UAbsOp, _1 )}
| _1 = TokPow2
    {           ( UPow2Op, _1 )}
| _1 = TokLog2
    {           ( ULog2Op, _1 )}

clause_expr:
  _1 = TokLParen _2 = clause_expr _3 = TokRParen
    {                                   ( _2 )}
| _1 = TokOCaml
    {            (
      let ml, pos = _1 in
         ClauseML (ml, pos)
   )}
| _1 = arith_expr _2 = relop _3 = arith_expr
    {                               (
      let a = _1 in
      let b = _3 in
      let pos = union_pos (pos_of_arith a) (pos_of_arith b) in
         ClauseCompare (_2, a, b, pos)
   )}
| _1 = TokIspower2 _2 = arith_expr
    {                          (
      let v = _2 in
      let pos = union_pos _1 (pos_of_arith v) in
         ClauseIspower2 (v, pos)
   )}
| _1 = clause_expr _2 = bool_op _3 = clause_expr %prec bool_prec
    {                                                   (
      let c1 = _1 in
      let c2 = _3 in
      let op = _2 in
      let pos = union_pos (pos_of_clause c1) (pos_of_clause c2) in
         ClauseBoolean (op, c1, c2, pos)
   )}

relop:
  _1 = TokEqual
    {                     ( EqOp )}
| _1 = TokNotEqual
    {                     ( NeqOp )}
| _1 = TokLessThan
    {                     ( LtOp )}
| _1 = TokLessEqual
    {                     ( LeOp )}
| _1 = TokGreaterThan
    {                     ( GtOp )}
| _1 = TokGreaterEqual
    {                     ( GeOp )}

bool_op:
  _1 = TokAmpAmp
    {                     ( BAndOp )}
| _1 = TokPipePipe
    {                     ( BOrOp )}

open_statement:
  _1 = TokOpen _2 = TokCapIdent
    {                       (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         Open (ident, pos)
   )}

name_statement:
  _1 = TokName _2 = TokString
    {                     (
      let name, pos = _2 in
      let pos = union_pos _1 pos in
         Name (name, pos)
   )}

register_statement:
  _1 = TokRegisters _2 = TokColon _3 = register_list
    {                                       (
      let regs, pos = _3 in
      let pos = union_pos _1 pos in
         Registers (regs, pos)
   )}

register_list:
  _1 = register _2 = TokSemi _3 = register_list
    {                                  (
      let r, pos1 = _1 in
      let regs, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         r :: regs, pos
   )}
| _1 = register _2 = TokSemi
    {                    (
      let r, pos = _1 in
      let pos = union_pos pos _2 in
         [r], pos
   )}

register:
  _1 = TokPercent _2 = TokIdent
    {                       (
      let r, pos = _2 in
      let pos = union_pos _1 pos in
         (r, TyReg), pos
   )}
| _1 = TokAt _2 = TokIdent
    {                  (
      let r, pos = _2 in
      let pos = union_pos _1 pos in
         (r, TyFlReg), pos
   )}

instruction_statement:
  _1 = TokInsts _2 = instruction_tags _3 = TokColon _4 = instruction_list
    {                                                       (
      let tags = List.map fst _2 in
      let insts, pos = _4 in
      let pos = union_pos _1 pos in
      let insts = List.map (fun (Instruction (name, op, cons, consop, itags, pos)) ->
         Instruction (name, op, cons, consop, itags @ tags, pos)) insts in
         Instructions (insts, pos)
   )}

instruction_tags:
  _1 = TokIdent _2 = instruction_tags
    {                             ( _1 :: _2 )}
| 
    {   ( [] )}

instruction_list:
  _1 = instruction _2 = TokSemi _3 = instruction_list
    {                                        (
      let Instruction (_, _, _, _, _, pos1) = _1 in
      let insts, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         _1 :: insts, pos
   )}
| _1 = instruction _2 = TokSemi
    {                       (
      let Instruction (_, _, _, _, _, pos1) = _1 in
      let pos = union_pos pos1 _2 in
         [_1], pos
   )}

instruction:
  _1 = instruction_data _2 = TokColon _3 = instruction_tag_list
    {                                                  (
      let name, op, cons, consop, pos1 = _1 in
      let tags, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         Instruction (name, op, cons, consop, tags, pos)
   )}
| _1 = instruction_data
    {                    (
      let name, op, cons, consop, pos = _1 in
         Instruction (name, op, cons, consop, [], pos)
   )}

instruction_data:
  _1 = TokIdent _2 = TokArrow _3 = TokCapIdent
    {                                 (
      let name, pos1 = _1 in
      let cons, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         name, [], cons, [], pos
   )}
| _1 = TokIdent _2 = in_operand_list _3 = TokArrow _4 = TokCapIdent _5 = in_operand
    {                                                            (
      let name, pos1 = _1 in
      let operands = _2 in
      let cons, _ = _4 in
      let cons_operand = _5 in
      let pos = union_pos pos1 (pos_of_operand cons_operand) in
         name, operands, cons, [cons_operand], pos
   )}
| _1 = TokIdent _2 = in_operand_list _3 = TokArrow _4 = TokCapIdent _5 = TokLParen _6 = in_operand_list _7 = TokRParen
    {                                                                                     (
      let name, pos1 = _1 in
      let operands = _2 in
      let cons, _ = _4 in
      let cons_operands = _6 in
      let pos = union_pos pos1 _7 in
         name, operands, cons, cons_operands, pos
   )}

instruction_tag_list:
  _1 = TokIdent _2 = instruction_tag_list
    {                                 (
      let tag, pos1 = _1 in
      let tags, pos2 = _2 in
         tag :: tags, union_pos pos1 pos2
   )}
| _1 = TokIdent
    {            (
      let tag, pos = _1 in
         [tag], pos
   )}

transform_statement:
  _1 = TokTrans _2 = TokIdent _3 = symbol_list_opt _4 = TokColon _5 = transform_list
    {                                                             (
      let name, _ = _2 in
      let args = _3 in
      let insts, pos = _5 in
      let pos = union_pos _1 pos in
         Transforms (name, args, insts, pos)
   )}

transform_list:
  _1 = transform _2 = TokSemi _3 = transform_list
    {                                    (
      let Transform (_, _, _, _, pos1) = _1 in
      let insts, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         _1 :: insts, pos
   )}
| _1 = transform _2 = TokSemi
    {                     (
      let Transform (_, _, _, _, pos1) = _1 in
      let pos = union_pos pos1 _2 in
         [_1], pos
   )}

transform:
  _1 = TokIdent _2 = in_operand_list_opt _3 = TokArrow _4 = TokIdent _5 = out_operand_list_opt
    {                                                                       (
      let opcode1, pos1 = _1 in
      let operand1 = _2 in
      let opcode2, pos2 = _4 in
      let operand2 = _5 in
      let pos = union_pos_operand_list pos1 operand2 in
         Transform (opcode1, operand1, opcode2, operand2, pos)
   )}

symbol_list:
  _1 = TokIdent _2 = TokComma _3 = symbol_list
    {                                 (
      let ident, _ = _1 in
         ident :: _3
   )}
| _1 = TokIdent
    {            (
      let ident, _ = _1 in
         [ident]
   )}

symbol_list_opt:
  _1 = symbol_list
    {               ( _1 )}
| 
    {   ( [] )}

trivial_statement:
  _1 = TokTrivial _2 = TokIdent
    {                       (
      let ident, pos = _2 in
      let pos = union_pos _1 pos in
         Trivial (ident, pos)
   )}

%%
