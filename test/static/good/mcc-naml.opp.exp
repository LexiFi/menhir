File "mcc-naml.mly", line 156, characters 22-31:
Warning: the token TokAssert is unused.
File "mcc-naml.mly", line 223, characters 10-23:
Warning: the token prec_expr_l11 is unused.
File "mcc-naml.mly", line 221, characters 10-23:
Warning: the token prec_expr_l13 is unused.
File "mcc-naml.mly", line 220, characters 10-23:
Warning: the token prec_expr_l14 is unused.
File "mcc-naml.mly", line 232, characters 10-22:
Warning: the token prec_expr_l3 is unused.
File "mcc-naml.mly", line 227, characters 10-22:
Warning: the token prec_expr_l7 is unused.
File "mcc-naml.mly", line 226, characters 10-22:
Warning: the token prec_expr_l8 is unused.
File "mcc-naml.mly", line 234, characters 12-24:
Warning: the token prec_expr_n1 is unused.
File "mcc-naml.mly", line 222, characters 12-25:
Warning: the token prec_expr_n12 is unused.
File "mcc-naml.mly", line 219, characters 11-24:
Warning: the token prec_expr_n15 is unused.
File "mcc-naml.mly", line 233, characters 12-24:
Warning: the token prec_expr_n2 is unused.
File "mcc-naml.mly", line 231, characters 12-24:
Warning: the token prec_expr_n4 is unused.
File "mcc-naml.mly", line 224, characters 11-24:
Warning: the token prec_expr_r10 is unused.
File "mcc-naml.mly", line 212, characters 11-24:
Warning: the token prec_expr_r18 is unused.
File "mcc-naml.mly", line 229, characters 11-23:
Warning: the token prec_expr_r6 is unused.
File "mcc-naml.mly", line 225, characters 11-23:
Warning: the token prec_expr_r9 is unused.
File "mcc-naml.mly", line 231, characters 39-51:
Warning: the token prec_ty_cons is unused.
File "mcc-naml.mly", line 217, characters 11-22:
Warning: the token prec_ty_fun is unused.
File "mcc-naml.mly", line 228, characters 12-25:
Warning: the token prec_ty_tuple is unused.
%{

open Naml_ast
open Naml_parse_misc
open Naml_ast_util
open Naml_ast_exn

let make_infix_expr op e1 e2 =
  let (op,p) = op in
  let up = union_pos (pos_of_expr e1) (pos_of_expr e2) in
    ApplyExpr (VarExpr (([],op,p),p), [e1; e2], up)

let make_prefix_expr op e =
  let (op,p) = op in
    ApplyExpr (VarExpr (([],op,p),p), [e], union_pos p (pos_of_expr e))

let make_function_nest p a w e =
  let p = union_pos p (pos_of_expr e) in
  let e = match w with
      None -> e
    | Some _ ->
        let u = CConsConst (([],unit_sym,p),p) in
          MatchExpr (ConstExpr (u,p), [ConstPat (u,p), w, e], p) in
  let e, a = Mc_list_util.fold_map
    (fun e -> function
         IdPat (s, _) -> e, s
       | pt ->
           let p = pos_of_pattern pt in
           let s = Symbol.new_symbol_string "x" in
             MatchExpr (VarExpr (([],s,p),p), [pt, None, e], p), s) e a
  in
    FunExpr (a, e, p)

let make_list_nil p = CConsConst (([],list_nil_sym,p), p)

let make_list_cons_expr_aux cp h t p =
  ConsExpr (([], list_cons_sym, cp), TupleExpr ([h; t], p), p)

let make_list_cons_expr cp h t =
  make_list_cons_expr_aux cp h t (union_pos (pos_of_expr h) (pos_of_expr t))

let rec make_list_expr = function
    SeqExpr (e1, e2, p) ->
	ConsExpr (([], list_cons_sym, p), TupleExpr ([e1; make_list_expr e2], p), p)
  | e -> let p = pos_of_expr e in
	ConsExpr (([], list_cons_sym, p), TupleExpr ([e; ConstExpr (CConsConst (([], list_nil_sym, p), p) ,p)], p), p)

let make_array_expr p e =
    let rec make_array_list = function
	SeqExpr (e1, e2, _) ->
	    e1 :: make_array_list e2
      | e ->
	    [e] in
    ArrayExpr (make_array_list e, p)

let make_list_cons_pat_aux cp h t p =
  ConsPat (([], list_cons_sym, cp), TuplePat ([h; t], p), p)

let make_list_cons_pat cp h t =
  make_list_cons_pat_aux cp h t (union_pos (pos_of_pattern h) (pos_of_pattern t))

let rec make_list_pat p = function
    [] -> ConstPat (make_list_nil p, p)
  | h :: t -> make_list_cons_pat_aux p h (make_list_pat p t) p

let rec make_functor_expr al e p =
  match al with
      [] -> e
    | (s, t) :: al -> FunctorMod (s, t, make_functor_expr al e p, p)

let rec make_functor_type al mt p =
  match al with
      [] -> mt
    | (s, t) :: al -> FunctorModtype (s, t, make_functor_type al mt p, p)

let make_constrain_expr e t p =
  match t with
      None -> e
    | Some t -> ConstrainMod (e, t, p)

let string_to_list s =
  let rec tol i l =
    let i = i - 1 in
      if i < 0 then
        l
      else
        tol i (s.[i] :: l)
  in
    tol (String.length s) ['\000']

%}
%start interface
%start prog
%start topstmt
%token <Naml_ast.pos> TokAlt
%token <Naml_ast.pos> TokAnd
%token <Naml_ast.pos> TokAny
%token <Naml_ast.pos> TokAs
%token <Naml_ast.pos> TokAssert
%token <Naml_ast.pos> TokBegin
%token <Symbol.symbol * Naml_ast.pos> TokCapId
%token <char * Naml_ast.pos> TokChar
%token <Naml_ast.pos> TokComma
%token <Naml_ast.pos> TokCons
%token <Naml_ast.pos> TokDo
%token <Naml_ast.pos> TokDone
%token <Naml_ast.pos> TokDot
%token <Naml_ast.pos> TokDotDot
%token <Naml_ast.pos> TokDownto
%token <Naml_ast.pos> TokEOF
%token <Naml_ast.pos> TokElse
%token <Naml_ast.pos> TokEnd
%token <Naml_ast.pos> TokEq
%token <Naml_ast.pos> TokException
%token <Naml_ast.pos> TokExternal
%token <float * Naml_ast.pos> TokFloat
%token <Naml_ast.pos> TokFor
%token <Naml_ast.pos> TokFun
%token <Naml_ast.pos> TokFunction
%token <Naml_ast.pos> TokFunctor
%token <Symbol.symbol * Naml_ast.pos> TokId
%token <Naml_ast.pos> TokIf
%token <Naml_ast.pos> TokIn
%token <Naml_ast.pos> TokInclude
%token <int * Naml_ast.pos> TokInt
%token <Naml_ast.pos> TokIs
%token <Naml_ast.pos> TokLArray
%token <Naml_ast.pos> TokLArrow
%token <Naml_ast.pos> TokLList
%token <Naml_ast.pos> TokLParen
%token <Naml_ast.pos> TokLRecord
%token <Naml_ast.pos> TokLet
%token <Naml_ast.pos> TokMatch
%token <Naml_ast.pos> TokMeta
%token <Naml_ast.pos> TokModule
%token <Naml_ast.pos> TokMutable
%token <Naml_ast.pos> TokOf
%token <Symbol.symbol * Naml_ast.pos> TokOpInL11
%token <Symbol.symbol * Naml_ast.pos> TokOpInL13
%token <Symbol.symbol * Naml_ast.pos> TokOpInL14
%token <Symbol.symbol * Naml_ast.pos> TokOpInL7
%token <Symbol.symbol * Naml_ast.pos> TokOpInL8
%token <Symbol.symbol * Naml_ast.pos> TokOpInN12
%token <Symbol.symbol * Naml_ast.pos> TokOpInR10
%token <Symbol.symbol * Naml_ast.pos> TokOpInR16
%token <Symbol.symbol * Naml_ast.pos> TokOpInR6
%token <Naml_ast.pos> TokOpMinus
%token <Naml_ast.pos> TokOpMinusDot
%token <Symbol.symbol * Naml_ast.pos> TokOpPreN1
%token <Naml_ast.pos> TokOpen
%token <Naml_ast.pos> TokRArray
%token <Naml_ast.pos> TokRArrow
%token <Naml_ast.pos> TokRList
%token <Naml_ast.pos> TokRParen
%token <Naml_ast.pos> TokRRecord
%token <Naml_ast.pos> TokRec
%token <Naml_ast.pos> TokSSAnd
%token <Naml_ast.pos> TokSSOr
%token <Naml_ast.pos> TokSemi
%token <Naml_ast.pos> TokSemiSemi
%token <Naml_ast.pos> TokSig
%token <Naml_ast.pos> TokStar
%token <string * Naml_ast.pos> TokString
%token <Naml_ast.pos> TokStruct
%token <Naml_ast.pos> TokThen
%token <Naml_ast.pos> TokTo
%token <Naml_ast.pos> TokTry
%token <Naml_ast.pos> TokType
%token <Naml_ast.pos> TokVal
%token <Naml_ast.pos> TokWhen
%token <Naml_ast.pos> TokWhile
%token <Naml_ast.pos> TokWith
%nonassoc prec_functor
%nonassoc TokWith
%nonassoc TokChar TokFloat TokId TokInt TokString prec_expr_const
%nonassoc TokFun TokFunction TokLet TokMatch TokTry prec_expr_n19
%right TokSemi prec_expr_r18
%nonassoc TokIf prec_expr_if
%nonassoc TokElse prec_expr_ifelse
%nonassoc TokAs prec_as
%left TokAlt prec_pat_alt
%right TokRArrow prec_ty_fun
%right TokLArrow TokOpInR16 prec_expr_r16
%right TokComma prec_expr_n15 prec_pat_tuple
%left TokOpInL14 TokSSOr prec_expr_l14
%left TokOpInL13 TokSSAnd prec_expr_l13
%nonassoc TokOpInN12 prec_expr_n12
%left TokEq TokOpInL11 prec_expr_l11
%right TokOpInR10 prec_expr_r10
%right TokCons prec_expr_r9 prec_pat_listcons
%left TokOpInL8 TokOpMinus TokOpMinusDot prec_expr_l8
%left TokOpInL7 TokStar prec_expr_l7
%nonassoc prec_ty_tuple
%right TokOpInR6 prec_expr_r6
%nonassoc prec_expr_n5
%nonassoc prec_expr_n4 prec_pat_cons prec_ty_cons
%left prec_expr_l3
%nonassoc TokDot prec_expr_n2
%nonassoc TokOpPreN1 prec_expr_n1
%nonassoc TokCapId
%nonassoc TokBegin TokLArray TokLList TokLParen TokLRecord
%type <Naml_ast.spec list> interface
%type <Naml_ast.def list> prog
%type <Naml_ast.def option> topstmt
%%

topstmt:
  _1 = def _2 = TokSemiSemi
    {                           ( Some _1 )}
| _1 = TokEOF
    {                   ( None )}

prog:
  _1 = def_list _2 = TokEOF
    {                           ( _1 )}

interface:
  _1 = spec_list _2 = TokEOF
    {                            ( _1 )}

ident:
  _1 = TokId
    {                  ( _1 )}
| _1 = TokLParen _2 = operator _3 = TokRParen
    {                                    ( _2 )}

cap_ident:
  _1 = TokCapId
    {                    ( _1 )}
| _1 = TokLParen _2 = TokRParen
    {                            ( unit_sym, union_pos _1 _2 )}
| _1 = TokLList _2 = TokRList
    {                            ( list_nil_sym, union_pos _1 _2 )}

mpath:
  _1 = TokCapId
    {                 ( [_1] )}
| _1 = TokCapId _2 = TokDot _3 = mpath
    {                            ( _1 :: _3 )}

vpath:
  _1 = ident
    {              ( let (s, p) = _1 in [], s, p )}
| _1 = TokCapId _2 = TokDot _3 = vpath
    {                            ( let (s, p) = _1 and (m, s2, p2) = _3 in ((s,p)::m, s2, union_pos p p2) )}

pure_vpath:
  _1 = TokId
    {                                ( let (s, p) = _1 in [], s, p )}
| _1 = TokCapId _2 = TokDot _3 = vpath
    {                                ( let (s, p) = _1 and (m, s2, p2) = _3 in ((s,p)::m, s2, union_pos p p2) )}

vpath_cap:
  _1 = cap_ident
    {                   ( let (s, p) = _1 in [], s, p )}
| _1 = TokCapId _2 = TokDot _3 = vpath_cap
    {                                ( let (s, p) = _1 and (m, s2, p2) = _3 in ((s,p)::m, s2, union_pos p p2) )}

operator:
  _1 = TokOpPreN1
    {                      ( _1 )}
| _1 = TokOpMinus
    {                      ( Symbol.add "-", _1 )}
| _1 = TokOpMinusDot
    {                         ( Symbol.add "-.", _1 )}
| _1 = TokOpInR6
    {                      ( _1 )}
| _1 = TokOpInL7
    {                      ( _1 )}
| _1 = TokOpInL8
    {                      ( _1 )}
| _1 = TokOpInR10
    {                      ( _1 )}
| _1 = TokOpInL11
    {                      ( _1 )}
| _1 = TokOpInN12
    {                      ( _1 )}
| _1 = TokOpInL13
    {                      ( _1 )}
| _1 = TokOpInL14
    {                      ( _1 )}
| _1 = TokOpInR16
    {                      ( _1 )}
| _1 = TokEq
    {                  ( Symbol.add "=", _1 )}
| _1 = TokStar
    {                    ( Symbol.add "*", _1 )}

ext_mpath:
  _1 = TokCapId
    {                   ( let (s,p) = _1 in VarEmpath (s,p) )}
| _1 = ext_mpath _2 = TokDot _3 = ext_mpath
    {                                  ( ProjEmpath (_1, _3, union_pos (pos_of_empath _1) (pos_of_empath _3)) )}
| _1 = ext_mpath _2 = TokLParen _3 = ext_mpath _4 = TokRParen
    {                                              ( ApplyEmpath (_1, _3, union_pos (pos_of_empath _1) _4) )}

module_type:
  _1 = mpath
    {               ( VarModtype (_1, pos_of_mpath _1) )}
| _1 = TokLParen _2 = module_type _3 = TokRParen
    {                                        ( _2 )}
| _1 = TokSig _2 = spec_list _3 = TokEnd
    {                               ( SigModtype (_2, union_pos _1 _3) )}
| _1 = module_type_constraints
    {                               ( _1 )}
| _1 = TokFunctor _2 = TokLParen _3 = TokCapId _4 = TokIs _5 = module_type _6 = TokRParen _7 = TokRArrow _8 = module_type %prec prec_functor
    {        ( FunctorModtype (fst _3, _5, _8, union_pos _1 (pos_of_modtype _8)) )}

module_type_constraints:
  _1 = module_type _2 = TokWith _3 = TokType _4 = type_params _5 = pure_vpath _6 = TokEq _7 = type_expr
    {        ( ConstraintTypeModtype (_1, fst _4, _5, _7, union_pos (pos_of_modtype _1) (pos_of_type _7)) )}
| _1 = module_type _2 = TokWith _3 = mpath _4 = TokEq _5 = ext_mpath
    { ( ConstraintModModtype (_1, _3, _5, union_pos (pos_of_modtype _1) (pos_of_empath _5)) )}
| _1 = module_type_constraints _2 = TokAnd _3 = TokType _4 = type_params _5 = pure_vpath _6 = TokEq _7 = type_expr
    {        ( ConstraintTypeModtype (_1, fst _4, _5, _7, union_pos (pos_of_modtype _1) (pos_of_type _7)) )}
| _1 = module_type_constraints _2 = TokAnd _3 = mpath _4 = TokEq _5 = ext_mpath
    {        ( ConstraintModModtype (_1, _3, _5, union_pos (pos_of_modtype _1) (pos_of_empath _5)) )}

spec_list:
  
    {        ( [] )}
| _1 = spec_list _2 = spec
    {                          ( _1 @ [_2] )}
| _1 = spec_list _2 = TokSemiSemi _3 = spec
    {                                    ( _1 @ [_3] )}

spec:
  _1 = TokVal _2 = ident _3 = TokIs _4 = type_expr
    {                                     ( ValSpec (fst _2, _4, union_pos _1 (pos_of_type _4)) )}
| _1 = TokExternal _2 = ident _3 = TokIs _4 = type_expr _5 = TokEq _6 = TokString
    {                                                        ( let  (s, p) = _6 in ExternSpec (fst _2, _4, s, union_pos _1 p) )}
| _1 = TokExternal _2 = TokType _3 = type_params _4 = TokId _5 = TokEq _6 = TokString
    {        ( let (s, p) = _6 in ExternTypeSpec (fst _3, fst _4, s, union_pos _1 p) )}
| _1 = type_definition
    {                          ( let (l, p) = _1 in TypeSpec (l, p) )}
| _1 = exception_def_simp
    {                            ( let (s, t, p) = _1 in ExnSpec (s, t, p) )}
| _1 = TokModule _2 = TokCapId _3 = module_args _4 = TokIs _5 = module_type
    {        ( let p = union_pos _1 (pos_of_modtype _5) in
            ModSpec (fst _2, make_functor_type _3 _5 p, p) )}
| _1 = TokModule _2 = TokType _3 = TokCapId
    {                                   ( let (s, p) = _3 in ModtypeSpec (s, None, union_pos _1 p) )}
| _1 = TokModule _2 = TokType _3 = TokCapId _4 = TokEq _5 = module_type
    {                                                   ( ModtypeSpec (fst _3, Some _5, union_pos _1 (pos_of_modtype _5)) )}
| _1 = TokOpen _2 = mpath
    {                        ( OpenSpec (_2, union_pos _1 (pos_of_mpath _2)) )}
| _1 = TokInclude _2 = ext_mpath
    {                              ( IncludeSpec (_2, union_pos _1 (pos_of_empath _2)) )}

module_args:
  
    {            ( [] )}
| _1 = module_args _2 = TokLParen _3 = TokCapId _4 = TokIs _5 = module_type _6 = TokRParen
    {                                                                   ( _1 @ [fst _3, _5] )}

module_expr:
  _1 = mpath
    {                 ( VarMod (_1, pos_of_mpath _1) )}
| _1 = TokLParen _2 = module_expr _3 = TokRParen
    {                                        ( _2 )}
| _1 = TokStruct _2 = def_list _3 = TokEnd
    {                                   ( StructMod (_2, union_pos _1 _3) )}
| _1 = module_expr _2 = TokLParen _3 = module_expr _4 = TokRParen
    {                                                  ( ApplyMod (_1, _3, union_pos (pos_of_modexp _1) _4) )}
| _1 = TokLParen _2 = module_expr _3 = TokIs _4 = module_type _5 = TokRParen
    {                                                        ( ConstrainMod (_2, _4, union_pos _1  _5) )}
| _1 = TokFunctor _2 = TokLParen _3 = TokCapId _4 = TokIs _5 = module_type _6 = TokRParen _7 = TokRArrow _8 = module_expr %prec prec_functor
    {        ( FunctorMod (fst _3, _5, _8, union_pos _1 (pos_of_modexp _8)) )}

def_list:
  
    {        ([])}
| _1 = def _2 = def_list
    {                        ( _1 :: _2 )}
| _1 = def _2 = TokSemiSemi _3 = def_list
    {                                   ( _1 :: _3 )}

def:
  _1 = TokLet _2 = let_rec_opt _3 = let_binding_list
    {                                           ( let (_,_,p) = list_last _3 in LetMod (_2, _3, union_pos _1 p) )}
| _1 = TokExternal _2 = ident _3 = TokIs _4 = type_expr _5 = TokEq _6 = TokString
    {                                                        ( let (s, p) = _6 in ExternMod (fst _2, _4, s, union_pos _1 p) )}
| _1 = TokExternal _2 = TokType _3 = type_params _4 = TokId _5 = TokEq _6 = TokString
    {        ( let (s, p) = _6 in ExternTypeMod (fst _3, fst _4, s, union_pos _1 p) )}
| _1 = type_definition
    {                          ( let (l, p) = _1 in TypeMod (l, p) )}
| _1 = exception_def
    {                        ( _1 )}
| _1 = TokOpen _2 = mpath
    {                        ( OpenMod (_2, union_pos _1 (pos_of_mpath _2)) )}
| _1 = TokInclude _2 = module_expr
    {                                ( IncludeMod (_2, union_pos _1 (pos_of_modexp _2)) )}
| _1 = TokModule _2 = TokType _3 = TokCapId _4 = TokEq _5 = module_type
    {                                                   ( ModtypeMod (fst _3, _5, union_pos _1 (pos_of_modtype _5)) )}
| _1 = TokModule _2 = TokCapId _3 = module_args _4 = module_contrain_opt _5 = TokEq _6 = module_expr
    {        ( let p = union_pos _1 (pos_of_modexp _6) in
            ModMod (fst _2, make_functor_expr _3 (make_constrain_expr _6 _4 p) p, p) )}

module_contrain_opt:
  
    {       ( None )}
| _1 = TokIs _2 = module_type
    {                            ( Some _2 )}

type_definition:
  _1 = TokType _2 = type_def_list
    {                            ( let (_, _, _, _, p) = list_last _2 in _2, union_pos _1 p )}

type_def_list:
  _1 = type_def
    {                     ( [_1] )}
| _1 = type_def _2 = TokAnd _3 = type_def_list
    {                                    ( _1::_3 )}

type_def:
  _1 = type_params _2 = TokId _3 = type_info
    { (
	    let (pl, p) = _1 in
	    let (s, _) = _2 in
	    let (t, r, p2) = _3 in
		pl, s, t, r, union_pos p p2
	)}

type_params:
  
    {       ( [], Naml_parse_state.current_position () )}
| _1 = TokMeta _2 = TokId
    {                        ( let (s, p) = _2 in [s], union_pos _1 p )}
| _1 = TokLParen _2 = type_param_list _3 = TokRParen
    {                                          ( _2, union_pos _1 _3 )}

type_param_list:
  _1 = TokMeta _2 = TokId
    {                       ( [fst _2] )}
| _1 = type_param_list _2 = TokComma _3 = TokMeta _4 = TokId
    {                                             ( _1 @ [fst _4] )}

type_info:
  
    {            ( None, None, Naml_parse_state.current_position () )}
| _1 = TokEq _2 = type_expr
    {                               ( Some _2, None, pos_of_type _2 )}
| _1 = TokEq _2 = constr_decl_list
    {                                     ( let l,p = _2 in None, Some (TypeCons (l,p)), p )}
| _1 = TokEq _2 = type_expr _3 = TokEq _4 = constr_decl_list
    {                                                   ( let l,p = _4 in Some _2, Some (TypeCons (l,p)), p )}
| _1 = TokEq _2 = TokLRecord _3 = field_decl_list _4 = TokRRecord
    {                                                           ( let p = union_pos _2 _4 in None, Some (TypeRecord (_3, p)), p )}
| _1 = TokEq _2 = type_expr _3 = TokEq _4 = TokLRecord _5 = field_decl_list _6 = TokRRecord
    {                                                                    ( let p = union_pos _4 _6 in (Some _2, Some (TypeRecord (_5, p)), p) )}

constr_decl_list:
  _1 = constr_decl
    {                      ( let (s, t, p) = _1 in [s, t], p )}
| _1 = constr_decl_list _2 = TokAlt _3 = constr_decl
    { (
	    let (s, t, p) = _3 in
            let l, p2 = _1 in
	      l @ [s, t], union_pos p p2
	)}

field_decl_list:
  _1 = field_decl_list_aux
    {                              ( _1 )}
| _1 = field_decl_list_aux _2 = TokSemi
    {                                    ( _1 )}

field_decl_list_aux:
  _1 = mutable_opt _2 = TokId _3 = TokIs _4 = type_expr
    {                                               ( [_1, fst _2, _4] )}
| _1 = field_decl_list_aux _2 = TokSemi _3 = mutable_opt _4 = TokId _5 = TokIs _6 = type_expr
    {                                                                    ( _1 @ [_3, fst _4, _6] )}

constr_decl:
  _1 = cap_ident
    {        ( let (s, p) = _1 in s, [], p )}
| _1 = constr_cap_ident _2 = TokOf _3 = type_tuple_aux
    {        ( let (s, p) = _1 in s, _3, union_pos p (pos_of_type (list_last _3)) )}

constr_cap_ident:
  _1 = cap_ident
    {                  ( _1 )}
| _1 = TokCons
    {                ( list_cons_sym, _1 )}

mutable_opt:
  
    {                    ( false )}
| _1 = TokMutable
    {                    ( true )}

exception_def:
  _1 = exception_def_simp
    {                            ( let (s, t, p) = _1 in ExnMod (ExnCons (s, t, p), p) )}
| _1 = TokException _2 = cap_ident _3 = TokEq _4 = vpath_cap
    { (
	    let (id, _) = _2 in
	    let (_, _, p) = _4 in
	    let p = union_pos _1 p in
		ExnMod (ExnVar (id, _4, p), p)
	)}

exception_def_simp:
  _1 = TokException _2 = cap_ident
    {        (
            let (id, p) = _2 in
            let p = union_pos _1 p in
                id, [], p
        )}
| _1 = TokException _2 = cap_ident _3 = TokOf _4 = type_tuple_aux
    {        (
            let (id, _) = _2 in
            let p = union_pos _1 (pos_of_type (list_last _4)) in
                id, _4, p
        )}

let_rec_opt:
  
    {   ( false )}
| _1 = TokRec
    {              ( true )}

type_expr:
  _1 = type_tuple _2 = TokRArrow _3 = type_expr
    {                                     ( TypeFun (_1, _3, union_pos (pos_of_type _1) (pos_of_type _3)) )}
| _1 = type_tuple
    {                       ( _1 )}

type_tuple:
  _1 = type_tuple_aux _2 = TokStar _3 = type_expr_limited
    {                                               ( TypeTuple (_1 @ [_3], union_pos (pos_of_type (List.hd _1)) (pos_of_type _3)) )}
| _1 = type_expr_limited
    {                           ( _1 )}

type_tuple_aux:
  _1 = type_tuple_aux _2 = TokStar _3 = type_expr_limited
    {                                               ( _1 @ [_3] )}
| _1 = type_expr_limited
    {                           ( [_1] )}

type_expr_limited:
  _1 = TokMeta _2 = TokId
    {                             ( let (s, p) = _2 in TypeVar (s, union_pos _1 p) )}
| _1 = TokAny
    {                       ( TypeAny _1 )}
| _1 = vpath
    {                      ( let (_, _, p) = _1 in TypeId ([], _1, p) )}
| _1 = type_expr_limited _2 = vpath
    {                                      ( let (_, _, p) = _2 in TypeId ([_1], _2, union_pos (pos_of_type _1) p) )}
| _1 = TokLParen _2 = type_expr _3 = TokRParen
    {                                           ( _2 )}
| _1 = TokLParen _2 = type_expr_list _3 = TokComma _4 = type_expr _5 = TokRParen _6 = vpath
    {                                                                    ( TypeId (_2 @ [_4], _6, union_pos _1 _5) )}

type_expr_list:
  _1 = type_expr
    {                   ( [_1] )}
| _1 = type_expr_list _2 = TokComma _3 = type_expr
    {                                        ( _1 @ [_3] )}

pattern:
  _1 = pattern_no_tuple
    {                          ( _1 )}
| _1 = pattern_no_tuple _2 = TokComma _3 = pattern_tuple %prec prec_pat_tuple
    {                                                                   ( TuplePat (_1 :: _3, union_pos (pos_of_pattern _1) (pos_of_pattern (list_last _3))) )}
| _1 = pattern _2 = TokAlt _3 = pattern %prec prec_pat_alt
    {                                                  ( AltPat (_1, _3, union_pos (pos_of_pattern _1) (pos_of_pattern _3)) )}
| _1 = pattern _2 = TokAs _3 = ident %prec prec_as
    {                                           ( let s,p = _3 in AsPat (_1, s, union_pos (pos_of_pattern _1) p) )}
| _1 = pattern _2 = TokAs _3 = ident _4 = TokComma _5 = pattern_tuple %prec prec_as
    {        ( let s,p = _3 in
          let ap = AsPat (_1, s, union_pos (pos_of_pattern _1) p) in
            TuplePat (ap :: _5, union_pos p (pos_of_pattern (list_last _5))) )}
| _1 = pattern _2 = TokAs _3 = ident _4 = TokCons _5 = pattern_no_tuple %prec prec_as
    {        ( let s,p = _3 in
          let ap = AsPat (_1, s, union_pos (pos_of_pattern _1) p) in
          let p2 = union_pos p (pos_of_pattern _5) in
            ConsPat (([],list_cons_sym,_4), TuplePat ([ap; _5], p2), p2) )}

pattern_no_tuple:
  _1 = pattern_limited
    {                         ( _1 )}
| _1 = vpath_cap _2 = pattern_no_tuple %prec prec_pat_cons
    {                                                      ( let (_,_,p) = _1 in ConsPat (_1, _2, union_pos p (pos_of_pattern _2)) )}
| _1 = pattern_no_tuple _2 = TokCons _3 = pattern_no_tuple %prec prec_pat_listcons
    {        ( let p = union_pos (pos_of_pattern _1) (pos_of_pattern _3) in
            ConsPat (([],list_cons_sym,_2), TuplePat ([_1; _3], p), p) )}

pattern_limited:
  _1 = ident
    {                 ( let s,p = _1 in IdPat (s, p) )}
| _1 = TokAny
    {                  ( AnyPat _1 )}
| _1 = const_expr
    {                     ( ConstPat (_1, pos_of_const _1) )}
| _1 = const_expr _2 = TokDotDot _3 = const_expr
    {                                        ( RangePat (_1, _3, union_pos (pos_of_const _1) (pos_of_const _3)) )}
| _1 = TokLParen _2 = pattern _3 = TokRParen
    {                                    ( _2 )}
| _1 = TokLParen _2 = pattern _3 = TokIs _4 = type_expr _5 = TokRParen
    {                                                  ( TySpecPat (_2, _4, union_pos _1 _5) )}
| _1 = TokLRecord _2 = pattern_record _3 = TokRRecord
    {                                            ( RecordPat (_2, union_pos _1 _3) )}
| _1 = TokLList _2 = pattern_list _3 = TokRList
    {                                       ( make_list_pat (union_pos _1 _3) _2 )}
| _1 = TokString
    {        ( let s,p = _1 in ArrayPat (List.map (fun c -> ConstPat (CharConst (c,p),p)) (string_to_list s), p) )}

pattern_tuple:
  _1 = pattern_no_tuple
    {                          ( [_1] )}
| _1 = pattern_no_tuple _2 = TokComma _3 = pattern_tuple
    {                                              ( _1 :: _3 )}

pattern_record:
  _1 = vpath _2 = TokEq _3 = pattern
    {                                ( [_1, _3] )}
| _1 = vpath _2 = TokEq _3 = pattern _4 = TokSemi
    {                                       ( [_1, _3] )}
| _1 = vpath _2 = TokEq _3 = pattern _4 = TokSemi _5 = pattern_record
    {                                                    ( (_1, _3) :: _5 )}

pattern_list:
  _1 = pattern
    {                 ( [_1] )}
| _1 = pattern _2 = TokSemi _3 = pattern_list
    {                                   ( (_1) :: _3 )}

let_binding_list:
  _1 = let_binding
    {                        ( [_1] )}
| _1 = let_binding _2 = TokAnd _3 = let_binding_list
    {                                            ( _1 :: _3 )}

let_binding:
  _1 = pattern _2 = TokEq _3 = expr
    {                              ( _1, _3, union_pos (pos_of_pattern _1) (pos_of_expr _3) )}
| _1 = pattern _2 = TokIs _3 = type_expr _4 = TokEq _5 = expr
    {                                            ( let p = pos_of_pattern _1 in (TySpecPat (_1, _3, union_pos p (pos_of_type _3)), _5, union_pos p (pos_of_expr _5)) )}
| _1 = ident _2 = param_list _3 = TokEq _4 = expr
    {        ( let (s,p) = _1 in IdPat (s,p), make_function_nest p _2 None _4, union_pos p (pos_of_expr _4) )}
| _1 = ident _2 = param_list _3 = TokIs _4 = type_expr _5 = TokEq _6 = expr
    {        ( let (s,p) = _1 in
          let p2 = union_pos p (pos_of_expr _6) in
            IdPat (s,p), make_function_nest p _2 None (TySpecExpr (_6, _4, p)), p )}

param_list:
  _1 = pattern_limited
    {                        ( [_1] )}
| _1 = pattern_limited _2 = param_list
    {                                 ( (_1) :: _2 )}

pattern_match_list:
  _1 = pattern_match %prec prec_expr_n19
    {                                           ( let (m, p) = _1 in [m], p )}
| _1 = pattern_match _2 = TokAlt _3 = pattern_match_list %prec prec_expr_n19
    {                                                                  ( let (m, p) = _1 and (l, p2) = _3 in m :: l, union_pos p p2 )}

pattern_match:
  _1 = pattern _2 = when_opt _3 = TokRArrow _4 = expr %prec prec_expr_n19
    {                                                           ( (_1, _2, _4), union_pos (pos_of_pattern _1) (pos_of_expr _4) )}

when_opt:
  
    {      ( None )}
| _1 = TokWhen _2 = expr
    {                      ( Some _2 )}

const_expr:
  _1 = vpath_cap
    {                   ( let (_,_,p) = _1 in CConsConst (_1, p) )}
| _1 = const_expr_not_cons
    {                           ( _1 )}

const_expr_not_cons:
  _1 = TokInt
    {                ( let (v, p) = _1 in IntConst (v, p) )}
| _1 = TokFloat
    {                  ( let (v, p) = _1 in FloatConst (v, p) )}
| _1 = TokChar
    {                 ( let (v, p) = _1 in CharConst (v, p) )}

expr:
  _1 = expr _2 = TokCons _3 = expr
    { ( let p = union_pos (pos_of_expr _1) (pos_of_expr _3) in
            ConsExpr (([],list_cons_sym,_2), TupleExpr ([_1; _3], p), p) )}
| _1 = TokOpMinus _2 = expr %prec prec_expr_n5
    {                                               ( make_prefix_expr (Symbol.add "~-",_1) _2 )}
| _1 = TokOpMinusDot _2 = expr %prec prec_expr_n5
    {                                               ( make_prefix_expr (Symbol.add "~-.",_1) _2 )}
| _1 = expr _2 = TokOpInR6 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpInL7 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokStar _3 = expr
    {                                 ( make_infix_expr (Symbol.add "*",_2) _1 _3 )}
| _1 = expr _2 = TokOpInL8 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpMinus _3 = expr
    {                                 ( make_infix_expr (Symbol.add "-",_2) _1 _3 )}
| _1 = expr _2 = TokOpMinusDot _3 = expr
    {                                    ( make_infix_expr (Symbol.add "-.",_2) _1 _3 )}
| _1 = expr _2 = TokOpInR10 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpInL11 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokEq _3 = expr
    {                                 ( make_infix_expr (Symbol.add "=",_2) _1 _3 )}
| _1 = expr _2 = TokOpInN12 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpInL13 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpInL14 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokOpInR16 _3 = expr
    {                                 ( make_infix_expr _2 _1 _3 )}
| _1 = expr _2 = TokSSOr _3 = expr
    {                               ( IfExpr (_1, ConstExpr (CConsConst (([], Naml_parse_misc.true_sym,  _2), _2), _2), Some (_3), union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = expr _2 = TokSSAnd _3 = expr
    {                               ( IfExpr (_1, _3, Some (ConstExpr (CConsConst (([], Naml_parse_misc.false_sym, _2), _2), _2)), union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = expr_simp _2 = TokDot _3 = vpath _4 = TokLArrow _5 = expr %prec prec_expr_r16
    { ( AssignProjExpr (_1, _3, _5, union_pos (pos_of_expr _1) (pos_of_expr _5)) )}
| _1 = expr_simp _2 = TokDot _3 = TokLParen _4 = expr _5 = TokRParen _6 = TokLArrow _7 = expr %prec prec_expr_r16
    { ( AssignArrayEltExpr (_1, _4, _7, union_pos (pos_of_expr _1) (pos_of_expr _7)) )}
| _1 = expr_simp _2 = TokDot _3 = TokLList _4 = expr _5 = TokRList _6 = TokLArrow _7 = expr %prec prec_expr_r16
    { ( AssignArrayEltExpr (_1, _4, _7, union_pos (pos_of_expr _1) (pos_of_expr _7)) )}
| _1 = TokIf _2 = expr _3 = TokThen _4 = expr _5 = TokElse _6 = expr %prec prec_expr_ifelse
    { ( IfExpr (_2, _4, Some _6, union_pos _1 (pos_of_expr _6)) )}
| _1 = TokIf _2 = expr _3 = TokThen _4 = expr %prec prec_expr_if
    { ( IfExpr (_2, _4, None, union_pos _1 (pos_of_expr _4)) )}
| _1 = TokMatch _2 = expr _3 = TokWith _4 = pattern_match_list %prec prec_expr_n19
    { ( let (m, p) = _4 in MatchExpr (_2, m, union_pos _1 p) )}
| _1 = TokFunction _2 = pattern_match_list %prec prec_expr_n19
    { ( let (m, p) = _2 in
          let s = Symbol.new_symbol_string "x" in
          let e = MatchExpr (VarExpr (([],s,p),p), m, p) in
            FunExpr ([s], e, union_pos _1 p) )}
| _1 = TokTry _2 = expr _3 = TokWith _4 = pattern_match_list %prec prec_expr_n19
    { ( let (m, p) = _4 in TryExpr (_2, m, union_pos _1 p) )}
| _1 = TokFun _2 = param_list _3 = when_opt _4 = TokRArrow _5 = expr %prec prec_expr_n19
    { ( make_function_nest _1 _2 _3 _5 )}
| _1 = TokLet _2 = let_rec_opt _3 = let_binding_list _4 = TokIn _5 = expr %prec prec_expr_n19
    { ( LetExpr (_2, _3, _5, union_pos _1 (pos_of_expr _5)) )}
| _1 = expr _2 = TokSemi _3 = expr
    { ( SeqExpr (_1, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = expr _2 = TokComma _3 = expr
    { ( match _3 with
	      TupleExpr (l, p) ->
		TupleExpr (_1 :: l, union_pos (pos_of_expr _1) p)
	    | _ ->
		TupleExpr ([_1; _3], union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = expr_fun
    {               ( _1 )}
| _1 = vpath_cap
    {                   ( let (_,_,p) = _1 in ConstExpr (CConsConst (_1, p), p) )}

expr_fun:
  _1 = expr_fun _2 = expr_arg
    { ( let p = union_pos (pos_of_expr _1) (pos_of_expr _2) in
          match _1 with
              ApplyExpr (f, al, _) -> ApplyExpr (f, al @ [_2], p)
            | _ -> ApplyExpr (_1, [_2], p) )}
| _1 = vpath_cap _2 = expr_arg
    { ( let (_,_,p) = _1 in ConsExpr (_1, _2, union_pos p (pos_of_expr _2)) )}
| _1 = expr_simp
    {                   ( _1 )}

expr_arg:
  _1 = expr_simp
    {                ( _1 )}
| _1 = vpath_cap
    {                ( let (_,_,p) = _1 in ConstExpr (CConsConst (_1, p), p) )}

expr_simp:
  _1 = const_expr_not_cons %prec prec_expr_const
    { ( ConstExpr (_1, pos_of_const _1) )}
| _1 = vpath
    {                      ( let (_,_,p) = _1 in VarExpr (_1, p) )}
| _1 = TokOpPreN1 _2 = expr_simp
    { ( make_prefix_expr _1 _2 )}
| _1 = TokLParen _2 = expr _3 = TokRParen
    {                                   ( GroupExpr (_2, union_pos _1 _3) )}
| _1 = TokBegin _2 = expr _3 = TokEnd
    {                               ( GroupExpr (_2, union_pos _1 _3) )}
| _1 = TokLParen _2 = expr _3 = TokIs _4 = type_expr _5 = TokRParen
    {                                                 ( TySpecExpr (_2, _4, union_pos _1 _5) )}
| _1 = TokLList _2 = expr _3 = TokRList
    {                                 ( make_list_expr _2 )}
| _1 = TokLArray _2 = expr _3 = TokRArray
    {                                   ( make_array_expr (union_pos _1 _3) _2 )}
| _1 = TokLArray _2 = TokRArray
    {                              ( ArrayExpr ([], union_pos _1 _2) )}
| _1 = TokLRecord _2 = expr_record _3 = TokRRecord
    {                                           ( RecordExpr (None, _2, union_pos _1 _3) )}
| _1 = TokLRecord _2 = expr_simp _3 = TokWith _4 = expr_record _5 = TokRRecord
    {                                                          ( RecordExpr (Some _2, _4, union_pos _1 _5) )}
| _1 = TokString
    {        ( let s,p = _1 in ArrayExpr (List.map (fun c -> ConstExpr (CharConst (c,p),p)) (string_to_list s), p) )}
| _1 = TokWhile _2 = expr _3 = TokDo _4 = expr _5 = TokDone
    { ( WhileExpr (_2, _4, union_pos _1 _5) )}
| _1 = TokFor _2 = ident _3 = TokEq _4 = expr _5 = TokTo _6 = expr _7 = TokDo _8 = expr _9 = TokDone
    { ( let (id, _) = _2 in ForExpr (id, _4, true, _6, _8, union_pos _1 _9) )}
| _1 = TokFor _2 = ident _3 = TokEq _4 = expr _5 = TokDownto _6 = expr _7 = TokDo _8 = expr _9 = TokDone
    { ( let (id, _) = _2 in ForExpr (id, _4, false, _6, _8, union_pos _1 _9) )}
| _1 = expr_simp _2 = TokDot _3 = vpath
    {        ( let (_,_,p) = _3 in ProjExpr (_1, _3, union_pos (pos_of_expr _1) p) )}
| _1 = expr_simp _2 = TokDot _3 = TokLParen _4 = expr _5 = TokRParen
    {        ( ArrayEltExpr (_1, _4, union_pos (pos_of_expr _1) _5) )}
| _1 = expr_simp _2 = TokDot _3 = TokLList _4 = expr _5 = TokRList
    {        ( ArrayEltExpr (_1, _4, union_pos (pos_of_expr _1) _5) )}

expr_record_aux:
  _1 = vpath _2 = TokEq _3 = expr
    {                              ( [_1, _3] )}
| _1 = expr_record_aux _2 = TokSemi _3 = vpath _4 = TokEq _5 = expr
    {                                                   ( (_3, _5) :: _1 )}

expr_record:
  _1 = expr_record_aux
    {                       ( _1 )}
| _1 = expr_record_aux _2 = TokSemi
    {                              ( _1 )}

%%
