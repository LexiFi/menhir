File "mcc-pascal.mly", line 92, characters 29-37:
Warning: the token TokBreak is unused.
File "mcc-pascal.mly", line 103, characters 29-37:
Warning: the token TokConst is unused.
File "mcc-pascal.mly", line 54, characters 29-38:
Warning: the token TokLShift is unused.
File "mcc-pascal.mly", line 75, characters 29-41:
Warning: the token TokLeftBrace is unused.
File "mcc-pascal.mly", line 55, characters 29-38:
Warning: the token TokRShift is unused.
File "mcc-pascal.mly", line 76, characters 29-42:
Warning: the token TokRightBrace is unused.
File "mcc-pascal.mly", line 152, characters 6-14:
Warning: the token TokStart is unused.
%{
open Symbol
open Pascal_ast_type
open Pascal_ast_util

let make_unop op expr =
   UnOpExpr(op, expr, pos_of_expr expr)

let make_binop expr1 op expr2 =
   let pos = union_pos (pos_of_expr expr1) (pos_of_expr expr2) in
      BinOpExpr(op, expr1, expr2, pos)

let make_string_out_of_char_list charpos_list =
    "not yet implemented"

let rec make_case_statement expr1 case_expr_list else_expr pos =
   match case_expr_list with
      (head_case, head_what) :: l -> IfExpr(BinOpExpr(EqOp, expr1, head_case, pos), head_what, Some (make_case_statement expr1 l else_expr pos), pos)
    | _ -> SeqExpr([else_expr], pos)

%}
%start console
%start program
%start unit_body
%token <Pascal_ast_type.pos> TokAmp
%token <Pascal_ast_type.pos> TokAnd
%token <Pascal_ast_type.pos> TokArray
%token <Pascal_ast_type.pos> TokAssignEq
%token <Pascal_ast_type.pos> TokBegin
%token <Pascal_ast_type.pos> TokBreak
%token <Pascal_ast_type.pos> TokCase
%token <char * Pascal_ast_type.pos> TokChar
%token <Pascal_ast_type.pos> TokColon
%token <Pascal_ast_type.pos> TokComma
%token <Pascal_ast_type.pos> TokConst
%token <Pascal_ast_type.pos> TokDec
%token <Pascal_ast_type.pos> TokDiv
%token <Pascal_ast_type.pos> TokDo
%token <Pascal_ast_type.pos> TokDot
%token <Pascal_ast_type.pos> TokDownTo
%token <Pascal_ast_type.pos> TokElse
%token <Pascal_ast_type.pos> TokEnd
%token TokEof
%token <Pascal_ast_type.pos> TokEq
%token <Pascal_ast_type.pos> TokExternal
%token <Pascal_ast_type.pos> TokFalse
%token <float * Pascal_ast_type.pos> TokFloat
%token <Pascal_ast_type.pos> TokFor
%token <Pascal_ast_type.pos> TokForward
%token <Pascal_ast_type.pos> TokFunction
%token <Pascal_ast_type.pos> TokGe
%token <Pascal_ast_type.pos> TokGt
%token <Pascal_ast_type.pos> TokHat
%token <Symbol.symbol * Pascal_ast_type.pos> TokId
%token <Pascal_ast_type.pos> TokIf
%token <Pascal_ast_type.pos> TokImplementation
%token <Pascal_ast_type.pos> TokInc
%token <int * Pascal_ast_type.pos> TokInt
%token <Pascal_ast_type.pos> TokInterface
%token <Pascal_ast_type.pos> TokLShift
%token <Pascal_ast_type.pos> TokLe
%token <Pascal_ast_type.pos> TokLeftBrace
%token <Pascal_ast_type.pos> TokLeftBrack
%token <Pascal_ast_type.pos> TokLeftParen
%token <Pascal_ast_type.pos> TokLt
%token <Pascal_ast_type.pos> TokMinus
%token <Pascal_ast_type.pos> TokMod
%token <Pascal_ast_type.pos> TokNil
%token <Pascal_ast_type.pos> TokNot
%token <Pascal_ast_type.pos> TokNotEq
%token <Pascal_ast_type.pos> TokOf
%token <Pascal_ast_type.pos> TokOr
%token <Pascal_ast_type.pos> TokPlus
%token <Pascal_ast_type.pos> TokProcedure
%token <Pascal_ast_type.pos> TokProgram
%token <Pascal_ast_type.pos> TokRShift
%token <Pascal_ast_type.pos> TokRecord
%token <Pascal_ast_type.pos> TokRepeat
%token <Pascal_ast_type.pos> TokRightBrace
%token <Pascal_ast_type.pos> TokRightBrack
%token <Pascal_ast_type.pos> TokRightParen
%token <Pascal_ast_type.pos> TokSemi
%token <Pascal_ast_type.pos> TokShl
%token <Pascal_ast_type.pos> TokShr
%token <Pascal_ast_type.pos> TokSlash
%token <Pascal_ast_type.pos> TokStar
%token <string * Pascal_ast_type.pos> TokString
%token <Pascal_ast_type.pos> TokThen
%token <Pascal_ast_type.pos> TokTo
%token <Pascal_ast_type.pos> TokTrue
%token <Pascal_ast_type.pos> TokTwoDots
%token <Pascal_ast_type.pos> TokType
%token <Pascal_ast_type.pos> TokTypeChar
%token <Pascal_ast_type.pos> TokTypeInteger
%token <Pascal_ast_type.pos> TokTypeSingle
%token <Pascal_ast_type.pos> TokTypeString
%token <Pascal_ast_type.pos> TokUnit
%token <Pascal_ast_type.pos> TokUntil
%token <Pascal_ast_type.pos> TokUses
%token <Pascal_ast_type.pos> TokVar
%token <Pascal_ast_type.pos> TokWhile
%token <Pascal_ast_type.pos> TokXor
%left TokComma
%right TokEq
%left TokMod
%left TokNotEq
%left TokGe TokGt TokLe TokLt
%left TokLShift TokRShift
%left TokMinus TokPlus
%left TokSlash TokStart
%left TokAmp
%left TokHat
%type <Pascal_ast_type.expr> add_term
%type <Pascal_ast_type.binop> addop
%type <Pascal_ast_type.ty> array_type
%type <Pascal_ast_type.expr * Pascal_ast_type.pos> block
%type <Pascal_ast_type.expr list * Pascal_ast_type.pos> block_list
%type <Pascal_ast_type.expr list * Pascal_ast_type.pos> block_list_rev
%type <Pascal_ast_type.expr list> body
%type <Pascal_ast_type.expr> boolean_expression
%type <Pascal_ast_type.expr> boolean_value
%type <Pascal_ast_type.expr * Pascal_ast_type.expr> case_element
%type <(Pascal_ast_type.expr * Pascal_ast_type.expr) list> case_element_list
%type <(Pascal_ast_type.expr * Pascal_ast_type.expr) list> case_element_list_rev
%type <Pascal_ast_type.expr> case_statement
%type <char list * Pascal_ast_type.pos> character_string
%type <char list * Pascal_ast_type.pos> character_string_rev
%type <Pascal_ast_type.prog option> console
%type <Pascal_ast_type.expr> constant_add_term
%type <Pascal_ast_type.expr> constant_exponentiation
%type <Pascal_ast_type.expr> constant_expression
%type <Pascal_ast_type.expr> constant_factor
%type <Pascal_ast_type.expr> constant_primary
%type <Pascal_ast_type.expr> constant_simple_expression
%type <Pascal_ast_type.expr> constant_term
%type <Pascal_ast_type.expr> constant_unsigned_constant
%type <Pascal_ast_type.pos> directive
%type <Pascal_ast_type.expr> exponentiation
%type <Pascal_ast_type.expr> expression
%type <Pascal_ast_type.expr list> expression_list
%type <Pascal_ast_type.expr list> expression_list_rev
%type <Pascal_ast_type.expr> factor
%type <Pascal_ast_type.expr> for_statement
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> formal_parameters
%type <Pascal_ast_type.expr list> function_body
%type <Pascal_ast_type.expr> function_call
%type <Pascal_ast_type.expr> function_decl
%type <Symbol.symbol * (Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list * Pascal_ast_type.ty> function_heading
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list * Pascal_ast_type.ty * Pascal_ast_type.pos> function_type_heading
%type <Symbol.symbol * Pascal_ast_type.pos> identifier
%type <Symbol.symbol list * Pascal_ast_type.pos> identifier_list
%type <Symbol.symbol list * Pascal_ast_type.pos> identifier_list_rev
%type <Pascal_ast_type.expr> if_statement
%type <Pascal_ast_type.expr * Pascal_ast_type.expr> index
%type <(Pascal_ast_type.expr * Pascal_ast_type.expr) list> index_list
%type <(Pascal_ast_type.expr * Pascal_ast_type.expr) list> index_list_rev
%type <Pascal_ast_type.expr list> interface_body
%type <Pascal_ast_type.expr> interface_body_element
%type <Pascal_ast_type.expr list> interface_body_rev
%type <Pascal_ast_type.binop> logop
%type <Pascal_ast_type.binop> mulop
%type <Pascal_ast_type.ty> new_pointer_type
%type <Pascal_ast_type.ty> new_structured_type
%type <Pascal_ast_type.ty> new_type
%type <Pascal_ast_type.expr> primary
%type <Pascal_ast_type.expr list> procedure_body
%type <Pascal_ast_type.expr> procedure_decl
%type <Symbol.symbol * (Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> procedure_heading
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list * Pascal_ast_type.pos> procedure_type_heading
%type <Pascal_ast_type.prog> program
%type <Symbol.symbol * Pascal_ast_type.pos * Symbol.symbol list * Pascal_ast_type.pos> program_header
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> record_section
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> record_section_list
%type <Pascal_ast_type.ty> record_type
%type <Pascal_ast_type.binop> relop
%type <Pascal_ast_type.expr> repeat_statement
%type <Pascal_ast_type.sign> sign
%type <Pascal_ast_type.expr> simple_expression
%type <Pascal_ast_type.expr> statement
%type <Pascal_ast_type.expr list * Pascal_ast_type.pos> statement_list
%type <Pascal_ast_type.expr list * Pascal_ast_type.pos> statement_list_rev
%type <Pascal_ast_type.expr> statements
%type <Pascal_ast_type.expr> term
%type <Pascal_ast_type.expr> type_def
%type <Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos> type_definition
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> type_definition_list
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> type_definition_list_rev
%type <Pascal_ast_type.ty> type_denoter
%type <Pascal_ast_type.prog> unit_body
%type <(symbol * pos) * (Symbol.symbol list * Pascal_ast_type.pos)> unit_header
%type <Pascal_ast_type.expr> unsigned_constant
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> value_parameter_set
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> var_parameter_set
%type <Pascal_ast_type.expr> variable_decl
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> variable_declaration
%type <(Symbol.symbol * Pascal_ast_type.ty * Pascal_ast_type.pos) list> variable_declaration_list
%type <Pascal_ast_type.expr> while_statement
%%

console:
  _1 = statement
    {             ( Some [_1] )}
| _1 = program
    {           ( Some _1 )}
| _1 = unit_body
    {             ( Some _1 )}
| _1 = TokEof
    {          ( None )}

program:
  _1 = program_header _2 = body _3 = TokDot
    {                              ( _2 )}

unit_body:
  _1 = unit_header _2 = interface_body _3 = implementation_body _4 = statements _5 = TokDot
    {                                                                    ( (_2 @ _3) @ [_4] )}
| _1 = unit_header _2 = interface_body _3 = implementation_body _4 = TokEnd _5 = TokDot
    {                                                                ( _2 @ _3 )}

unit_header:
  _1 = TokUnit _2 = identifier _3 = TokSemi
    {                              ( _2, ([],union_pos _1 _3) )}
| _1 = TokUnit _2 = identifier _3 = TokSemi _4 = TokUses _5 = identifier_list _6 = TokSemi
    {                                                              ( _2, _5 )}

interface_body:
  _1 = TokInterface _2 = interface_body_rev
    {                                   ( List.rev _2 )}

interface_body_rev:
  _1 = interface_body_rev _2 = interface_body_element
    {                                             ( _2 :: _1 )}
| _1 = interface_body_element
    {                          ( [_1] )}

interface_body_element:
  _1 = function_heading _2 = TokSemi
    {                            (
      let sym, sym_ty_pos_list, ty = _1 in
         FunDef(sym, sym_ty_pos_list, ty, SeqExpr([], _2), _2)
   )}
| _1 = function_heading _2 = TokSemi _3 = directive _4 = TokSemi
    {                                              (
      let sym, sym_ty_pos_list, ty = _1 in
      let pos = union_pos _2 _4 in
         FunDef(sym, sym_ty_pos_list, ty, SeqExpr([], pos), pos)
   )}
| _1 = procedure_heading _2 = TokSemi
    {                             (
      let sym, sym_ty_pos_list = _1 in
         FunDef(sym, sym_ty_pos_list, TypeUnit(_2), SeqExpr([], _2), _2)
   )}
| _1 = procedure_heading _2 = TokSemi _3 = directive _4 = TokSemi
    {                                               (
      let sym, sym_ty_pos_list = _1 in
      let pos = union_pos _2 _4 in
         FunDef(sym, sym_ty_pos_list, TypeUnit(_2), SeqExpr([], pos), pos)
   )}
| _1 = type_def
    {            ( _1  )}
| _1 = variable_decl
    {                 ( _1 )}

implementation_body:
  _1 = TokImplementation _2 = block_list
    {                                (
      let expr_list, pos = _2 in
         expr_list
   )}

program_header:
  _1 = TokProgram _2 = identifier _3 = TokSemi
    {                                 (
      let sym, pos = _2 in
         sym, pos, [], _3
   )}
| _1 = TokProgram _2 = identifier _3 = TokLeftParen _4 = identifier_list _5 = TokRightParen _6 = TokSemi
    {                                                                            (
      let sym, pos = _2 in
      let syms, pos = _4 in
         sym, pos, syms, pos
   )}

identifier:
  _1 = TokId
    {         ( _1 )}

identifier_list:
  _1 = identifier_list_rev
    {                       (
      let syms, pos = _1 in
         List.rev syms, pos
   )}

identifier_list_rev:
  _1 = identifier_list_rev _2 = TokComma _3 = identifier
    {                                           (
      let syms, pos1 = _1 in
      let sym, pos2 = _3 in
         sym :: syms, union_pos pos1 pos2
   )}
| _1 = identifier
    {              (
      let sym, pos = _1 in
        [sym], pos
   )}

block_list:
  _1 = block_list_rev
    {                  (
      let syms, pos = _1 in
         List.rev syms, pos
   )}

block_list_rev:
  _1 = block_list_rev _2 = block
    {                        (
      let exps1, pos1 = _1 in
      let exp2, pos2 = _2 in
         exp2 :: exps1, union_pos pos1 pos2
   )}
| _1 = block
    {         (
      let exp, pos = _1 in
         [exp], pos
   )}

block:
  _1 = type_def
    {            ( _1, pos_of_expr _1 )}
| _1 = variable_decl
    {                 ( _1, pos_of_expr _1 )}
| _1 = function_decl
    {                 ( _1, pos_of_expr _1 )}
| _1 = procedure_decl
    {                  ( _1, pos_of_expr _1 )}

body:
  _1 = block_list _2 = statements
    {                         (
      let exps, pos = _1 in
         exps @ [_2]
   )}
| _1 = statements
    {              ( [_1] )}

type_def:
  _1 = TokType _2 = type_definition_list
    {                                ( TypeDefs(_2, _1) )}

type_definition_list:
  _1 = type_definition_list_rev
    {                            ( List.rev _1 )}

type_definition_list_rev:
  _1 = type_definition_list_rev _2 = type_definition
    {                                            ( _2 :: _1 )}
| _1 = type_definition
    {                   ( [_1] )}

type_definition:
  _1 = identifier _2 = TokEq _3 = type_denoter _4 = TokSemi
    {                                         (
      let sym, pos = _1 in
         sym, _3, union_pos pos _4
   )}

type_denoter:
  _1 = TokTypeInteger
    {                  ( TypeInt(_1) )}
| _1 = TokTypeString
    {                  ( TypeArray(TypeChar(_1), [IntExpr(0, _1), IntExpr(255, _1)], _1) )}
| _1 = TokTypeSingle
    {                  ( TypeFloat(_1) )}
| _1 = TokTypeChar
    {                  ( TypeChar(_1) )}
| _1 = identifier
    {              (
      let sym, pos = _1 in
         TypeVar(sym, pos)
   )}
| _1 = new_type
    {            ( _1 )}
| _1 = function_type_heading
    {                         (
      (* bogus position .... *)
      let sym_ty_pos_list, ty, pos = _1 in
      let ty_list = List.map (fun (sym, ty, pos) -> ty) sym_ty_pos_list in
         TypeFun(ty_list, ty, pos)
   )}
| _1 = procedure_type_heading
    {                          (
      let sym_ty_pos_list, pos = _1 in
      let ty_list = List.map (fun (sym, ty, pos) -> ty) sym_ty_pos_list in
         TypeFun(ty_list, TypeUnit(pos), pos)
   )}

new_type:
  _1 = new_structured_type
    {                       ( _1 )}
| _1 = new_pointer_type
    {                    ( _1 )}

new_structured_type:
  _1 = array_type
    {              ( _1 )}
| _1 = record_type
    {               ( _1 )}

array_type:
  _1 = TokArray _2 = TokLeftBrack _3 = index_list _4 = TokRightBrack _5 = TokOf _6 = type_denoter
    {                                                                     (
      TypeArray(_6, _3, union_pos _1 _5)
   )}

index_list:
  _1 = index_list_rev
    {                  ( List.rev _1 )}

index_list_rev:
  _1 = index_list_rev _2 = TokComma _3 = index
    {                                 ( _3 :: _1 )}
| _1 = index
    {         ( [_1] )}

index:
  _1 = TokInt _2 = TokTwoDots _3 = TokInt
    {                            (
      let int1, pos1 = _1 in
      let int2, pos2 = _3 in
         IntExpr(int1, pos1), IntExpr(int2, pos2)
   )}

record_type:
  _1 = TokRecord _2 = record_section_list _3 = TokSemi _4 = TokEnd
    {                                                (
      TypeStruct(_2, union_pos _1 _4)
   )}

record_section_list:
  _1 = record_section_list _2 = TokSemi _3 = record_section
    {                                              ( _1 @ _3 )}
| _1 = record_section
    {                  ( _1 )}

record_section:
  _1 = identifier_list _2 = TokColon _3 = type_denoter
    {                                         (
      let syms, pos = _1 in
      let res = List.map (fun sym -> sym, _3, pos) syms in
         res
   )}

new_pointer_type:
  _1 = TokHat _2 = type_denoter
    {                       (
     TypePointer(_2, union_pos _1 (pos_of_type _2))
   )}

variable_decl:
  _1 = TokVar _2 = variable_declaration_list _3 = TokSemi
    {                                            (
      let vars = List.map (fun (sym, ty, pos) -> sym, ty, None, pos) _2 in
         VarDefs(vars, union_pos _1 _3)
   )}

variable_declaration_list:
  _1 = variable_declaration_list _2 = TokSemi _3 = variable_declaration
    {                                                          ( _1 @ _3 )}
| _1 = variable_declaration
    {                        ( _1 )}

variable_declaration:
  _1 = identifier_list _2 = TokColon _3 = type_denoter
    {                                         (
      let ty = _3 in
      let syms, pos = _1 in
      let res = List.map (fun sym -> (sym, ty, pos)) syms in
         res
   )}

function_heading:
  _1 = TokFunction _2 = identifier _3 = TokColon _4 = type_denoter
    {                                                (
      let sym, pos = _2 in
      let typ = _4 in
         sym, [], typ
   )}
| _1 = TokFunction _2 = identifier _3 = TokLeftParen _4 = formal_parameters _5 = TokRightParen _6 = TokColon _7 = type_denoter
    {                                                                                             (
      let sym, pos = _2 in
      let symtypos_list = _4 in
         sym, symtypos_list, _7
   )}

function_type_heading:
  _1 = TokFunction _2 = TokColon _3 = type_denoter
    {                                     ( [], _3, union_pos _1 _2 )}
| _1 = TokFunction _2 = TokLeftParen _3 = formal_parameters _4 = TokRightParen _5 = TokColon _6 = type_denoter
    {                                                                                  ( _3, _6, union_pos _1 _5 )}

formal_parameters:
  _1 = formal_parameters _2 = TokSemi _3 = value_parameter_set
    {                                                 ( _1 @ _3 )}
| _1 = formal_parameters _2 = TokSemi _3 = var_parameter_set
    {                                               ( _1 @ _3 )}
| _1 = value_parameter_set
    {                       ( _1 )}
| _1 = var_parameter_set
    {                     ( _1 )}

value_parameter_set:
  _1 = identifier_list _2 = TokColon _3 = type_denoter
    {                                         (
      let syms, pos = _1 in
      let ty = _3 in
      let syms = List.map (fun sym -> sym, ty, pos) syms in
         syms
   )}

var_parameter_set:
  _1 = TokVar _2 = value_parameter_set
    {                              (
      let param_set = List.map (fun (sym, ty, pos) -> sym, TypeReference(ty, pos), pos) _2 in
         param_set
   )}

directive:
  _1 = TokForward
    {              ( _1 )}
| _1 = TokExternal
    {               ( _1 )}

function_decl:
  _1 = function_heading _2 = TokSemi _3 = directive _4 = TokSemi
    {                                              (
      let sym, params, typ = _1 in
         FunDef(sym, params, typ, SeqExpr([], _4), _4)
   )}
| _1 = function_heading _2 = TokSemi _3 = function_body _4 = TokSemi
    {                                                  (
      let pos = _2 in
      let sym, params, ty = _1 in
         FunDef(sym, params, ty, SeqExpr(_3, pos), _2)
   )}

function_body:
  _1 = body
    {        ( _1 )}

procedure_decl:
  _1 = procedure_heading _2 = TokSemi _3 = directive _4 = TokSemi
    {                                               (
     let name, params = _1 in
     let pos = _4 in
     let typ = TypeUnit(pos) in
        FunDef(name, params, typ, SeqExpr([], pos), pos)
   )}
| _1 = procedure_heading _2 = TokSemi _3 = procedure_body _4 = TokSemi
    {                                                    (
     let name, params = _1 in
     let pos = _2 in
     let typ = TypeUnit(pos) in
        FunDef(name, params, typ, SeqExpr(_3, pos), pos)
   )}

procedure_heading:
  _1 = TokProcedure _2 = identifier
    {                           (
      let sym, pos = _2 in
         sym, []
   )}
| _1 = TokProcedure _2 = identifier _3 = TokLeftParen _4 = formal_parameters _5 = TokRightParen
    {                                                                        (
      let sym, pos = _2 in
         sym, _4
   )}

procedure_type_heading:
  _1 = TokProcedure _2 = identifier
    {                           (
      let sym, pos = _2 in
         [], union_pos _1 pos
   )}
| _1 = TokProcedure _2 = TokLeftParen _3 = formal_parameters _4 = TokRightParen
    {                                                             ( _3, union_pos _1 _4 )}

procedure_body:
  _1 = body
    {        ( _1 )}

statements:
  _1 = TokBegin _2 = statement_list _3 = TokEnd
    {                                  (
      let exprs, pos = _2 in
         SeqExpr(exprs, pos)
   )}

statement_list:
  _1 = statement_list_rev
    {                      (
      let explist, pos = _1 in
         List.rev explist, pos
   )}

statement_list_rev:
  _1 = statement_list_rev _2 = statement
    {                                (
      let sts1, pos1 = _1 in
      let pos = union_pos pos1 (pos_of_expr _2) in
         _2 :: sts1, pos
   )}
| _1 = statement
    {             (
      let pos = pos_of_expr _1 in
         [_1], pos
   )}

statement:
  _1 = case_statement
    {                  ( _1 )}
| _1 = repeat_statement
    {                    ( _1 )}
| _1 = if_statement
    {                ( _1 )}
| _1 = while_statement
    {                   ( _1 )}
| _1 = for_statement
    {                 ( _1 )}
| _1 = unsigned_constant _2 = TokAssignEq _3 = expression _4 = TokSemi
    {                                                    (
      AssignExpr(None, _1, _3, union_pos (pos_of_expr _1) _4)
   )}
| _1 = unsigned_constant _2 = TokHat _3 = TokAssignEq _4 = expression _5 = TokSemi
    {                                                           (
      AssignExpr(None, make_unop UHatOp _1, _4, union_pos (pos_of_expr _1) _5)
   )}
| _1 = expression _2 = TokSemi
    {                      ( _1 )}

case_statement:
  _1 = TokCase _2 = expression _3 = TokOf _4 = case_element_list _5 = TokEnd _6 = TokSemi
    {                                                             (
      let pos = union_pos _1 _6 in
      let else_expr = SeqExpr([], pos) in
      let exp = make_case_statement _2 _4 else_expr pos in
      match exp with
         SeqExpr([],_) -> raise (ParseError (pos, "No case specified in 'case' statement"))
       | _ -> exp
   )}
| _1 = TokCase _2 = expression _3 = TokOf _4 = case_element_list _5 = TokElse _6 = statement _7 = TokEnd _8 = TokSemi
    {                                                                               (
      let pos = union_pos _1 _8 in
      let else_expr = _6 in
      let exp = make_case_statement _2 _4 else_expr pos in
      match exp with
         SeqExpr([],_) -> raise (ParseError (pos, "No case specified in 'case' statement"))
       | _ -> exp
   )}

case_element_list:
  _1 = case_element_list_rev
    {                         ( List.rev _1 )}

case_element_list_rev:
  _1 = case_element_list_rev _2 = case_element
    {                                      ( _2 :: _1 )}
| _1 = case_element
    {                ( [_1] )}

case_element:
  _1 = constant_expression _2 = TokColon _3 = statement
    {                                          ( _1, _3 )}
| _1 = constant_expression _2 = TokColon _3 = statements _4 = TokSemi
    {                                                   ( _1, _3 )}

repeat_statement:
  _1 = TokRepeat _2 = statement_list _3 = TokUntil _4 = boolean_expression _5 = TokSemi
    {                                                                (
      let stmts, pos = _2 in
      let pos = union_pos _1 (pos_of_expr _4) in
         SeqExpr(WhileExpr(_4, SeqExpr(stmts, pos), pos) :: stmts, pos)
   )}

if_statement:
  _1 = TokIf _2 = boolean_expression _3 = TokThen _4 = statements _5 = TokSemi
    {                                                       (
      let pos = union_pos _1 _5 in
         IfExpr(_2, _4, None, pos)
   )}
| _1 = TokIf _2 = boolean_expression _3 = TokThen _4 = statements _5 = TokElse _6 = statements _7 = TokSemi
    {                                                                          (
      let pos = union_pos _1 _7 in
         IfExpr(_2, _4, Some _6, pos)
   )}

while_statement:
  _1 = TokWhile _2 = boolean_expression _3 = TokDo _4 = statement _5 = TokSemi
    {                                                       (
      let pos = union_pos _1 _5 in
         WhileExpr(_2, _4, pos)
   )}
| _1 = TokWhile _2 = boolean_expression _3 = TokDo _4 = statements _5 = TokSemi
    {                                                        (
      let pos = union_pos _1 _5 in
         WhileExpr(_2, _4, pos)
   )}

for_statement:
  _1 = TokFor _2 = identifier _3 = TokAssignEq _4 = expression _5 = TokTo _6 = expression _7 = TokDo _8 = statement _9 = TokSemi
    {                                                                                     (
      let pos = union_pos _1 _9 in
      let default_expr = IntExpr(1, pos) in
      let sym, p = _2 in
      let init = AssignExpr(None, VarExpr(sym,p), _4, pos) in
      let test = BinOpExpr(LeOp, VarExpr(sym, p), _6, pos) in
      let step = AssignExpr(Some PlusOp, VarExpr(sym, p), IntExpr(1, pos), pos) in
         ForExpr(init, test, step, _8, pos)
   )}
| _1 = TokFor _2 = identifier _3 = TokAssignEq _4 = expression _5 = TokTo _6 = expression _7 = TokDo _8 = statements _9 = TokSemi
    {                                                                                      (
      let pos = union_pos _1 _9 in
      let default_expr = IntExpr(1, pos) in
      let sym, p = _2 in
      let init = AssignExpr(None, VarExpr(sym, p), _4, pos) in
      let test = BinOpExpr(LeOp, VarExpr(sym, p), _6, pos) in
      let step = AssignExpr(Some PlusOp, VarExpr(sym, p), IntExpr(1, pos), pos) in
         ForExpr(init, test, step, _8, pos)
   )}
| _1 = TokFor _2 = identifier _3 = TokAssignEq _4 = expression _5 = TokDownTo _6 = expression _7 = TokDo _8 = statement _9 = TokSemi
    {                                                                                         (
      let pos = union_pos _1 _9 in
      let default_expr = IntExpr(1, pos) in
      let sym, p = _2 in
      let init = AssignExpr(None, VarExpr(sym, p), _4, pos) in
      let test = BinOpExpr(GeOp, VarExpr(sym, p), _6, pos) in
      let step = AssignExpr(Some MinusOp, VarExpr(sym, p), IntExpr(1, pos), pos) in
         ForExpr(init, test, step, _8, pos)
   )}
| _1 = TokFor _2 = identifier _3 = TokAssignEq _4 = expression _5 = TokDownTo _6 = expression _7 = TokDo _8 = statements _9 = TokSemi
    {                                                                                          (
      let pos = union_pos _1 _9 in
      let default_expr = IntExpr(1, pos) in
      let sym, p = _2 in
      let init = AssignExpr(None, VarExpr(sym, p), _4, pos) in
      let test = BinOpExpr(GeOp, VarExpr(sym, p), _6, pos) in
      let step = AssignExpr(Some MinusOp, VarExpr(sym, p), IntExpr(1, pos), pos) in
         ForExpr(init, test, step, _8, pos)
   )}

constant_expression:
  _1 = constant_simple_expression _2 = relop _3 = constant_simple_expression
    {                                                               ( make_binop _1 _2 _3 )}
| _1 = constant_simple_expression
    {                              ( _1 )}

constant_simple_expression:
  _1 = constant_add_term
    {                     ( _1 )}
| _1 = constant_simple_expression _2 = logop _3 = constant_add_term
    {                                                      ( make_binop _1 _2 _3 )}

constant_add_term:
  _1 = constant_term
    {                 ( _1 )}
| _1 = constant_add_term _2 = addop _3 = constant_term
    {                                         ( make_binop _1 _2 _3 )}

constant_term:
  _1 = constant_factor
    {                   ( _1 )}
| _1 = constant_term _2 = mulop _3 = constant_factor
    {                                       ( make_binop _1 _2 _3 )}

constant_factor:
  _1 = sign _2 = constant_factor
    {                        (
      match _1 with
         SiMinus -> make_unop UMinusOp _2
       | SiPlus -> _2
   )}
| _1 = constant_exponentiation
    {                           ( _1 )}

constant_exponentiation:
  _1 = constant_primary
    {                    ( _1 )}

constant_primary:
  _1 = TokLeftParen _2 = constant_expression _3 = TokRightParen
    {                                                  ( _2 )}
| _1 = constant_unsigned_constant
    {                              ( _1 )}
| _1 = TokNot _2 = constant_primary
    {                           ( make_unop UNotOp _2 )}

constant_unsigned_constant:
  _1 = TokInt
    {          (
      let i, pos = _1 in
         IntExpr(i, pos)
   )}
| _1 = character_string
    {                    (
      let char_list, pos = _1 in
      StringExpr(make_string_out_of_char_list char_list, pos)
   )}
| _1 = TokChar
    {           (
      let c, pos = _1 in
         CharExpr(c, pos)
   )}
| _1 = TokFloat
    {            (
      let f, pos = _1 in
         FloatExpr(f, pos)
   )}
| _1 = TokString
    {             (
      let s, pos = _1 in
         StringExpr(s, pos)
   )}
| _1 = TokNil
    {          ( IntExpr(0, _1) )}
| _1 = boolean_value
    {                 ( _1 )}

boolean_value:
  _1 = TokTrue
    {           ( IntExpr(1, _1) )}
| _1 = TokFalse
    {            ( IntExpr(0, _1) )}

relop:
  _1 = TokLe
    {         ( LeOp )}
| _1 = TokLt
    {         ( LtOp )}
| _1 = TokGe
    {         ( GeOp )}
| _1 = TokGt
    {         ( GtOp )}
| _1 = TokEq
    {         ( EqOp )}
| _1 = TokNotEq
    {            ( NotEqOp )}

logop:
  _1 = TokAnd
    {          ( AndOp )}
| _1 = TokOr
    {         ( OrOp )}
| _1 = TokXor
    {          ( XorOp )}
| _1 = TokShl
    {          ( LShiftOp )}
| _1 = TokShr
    {          ( RShiftOp )}

addop:
  _1 = TokPlus
    {           ( PlusOp )}
| _1 = TokMinus
    {            ( MinusOp )}

mulop:
  _1 = TokStar
    {           ( TimesOp )}
| _1 = TokSlash
    {            ( DivideOp )}
| _1 = TokMod
    {          ( ModOp )}
| _1 = TokDiv
    {          ( IntDivideOp )}

sign:
  _1 = TokMinus
    {            ( SiMinus )}
| _1 = TokPlus
    {           ( SiPlus )}

boolean_expression:
  _1 = expression
    {              ( _1 )}

expression_list:
  _1 = expression_list_rev
    {                       ( List.rev _1 )}

expression_list_rev:
  _1 = expression_list_rev _2 = TokComma _3 = expression
    {                                           ( _3 :: _1 )}
| _1 = expression
    {              ( [_1] )}

expression:
  _1 = simple_expression _2 = relop _3 = simple_expression
    {                                             ( make_binop _1 _2 _3 )}
| _1 = simple_expression
    {                     ( _1 )}

simple_expression:
  _1 = add_term
    {            ( _1 )}
| _1 = simple_expression _2 = logop _3 = add_term
    {                                    ( make_binop _1 _2 _3 )}

add_term:
  _1 = term
    {        ( _1 )}
| _1 = add_term _2 = addop _3 = term
    {                       ( make_binop _1 _2 _3 )}

term:
  _1 = factor
    {          ( _1 )}
| _1 = term _2 = mulop _3 = factor
    {                     ( make_binop _1 _2 _3 )}

factor:
  _1 = sign _2 = factor
    {               (
      match _1 with
         SiMinus -> make_unop UMinusOp _2
       | SiPlus -> _2
   )}
| _1 = exponentiation
    {                  ( _1 )}

exponentiation:
  _1 = primary
    {           ( _1 )}

primary:
  _1 = TokLeftParen _2 = expression _3 = TokRightParen
    {                                         ( _2 )}
| _1 = unsigned_constant
    {                     ( _1 )}
| _1 = TokNot _2 = primary
    {                  ( make_unop UMinusOp _2 )}

unsigned_constant:
  _1 = TokInt
    {          (
      let i, pos = _1 in
         IntExpr(i, pos)
   )}
| _1 = character_string
    {                    (
      let char_list, pos = _1 in
      StringExpr(make_string_out_of_char_list char_list, pos)
   )}
| _1 = TokChar
    {           (
      let c, pos = _1 in
         CharExpr(c, pos)
   )}
| _1 = TokFloat
    {            (
      let f, pos = _1 in
         FloatExpr(f, pos)
   )}
| _1 = TokString
    {             (
      let s, pos = _1 in
         StringExpr(s, pos)
   )}
| _1 = TokNil
    {          ( IntExpr(0, _1) )}
| _1 = boolean_value
    {                 ( _1 )}
| _1 = TokAmp _2 = identifier
    {                     (
      let sym, pos = _2 in
         AddrOfExpr(VarExpr(sym, pos), pos)
   )}
| _1 = unsigned_constant _2 = TokHat
    {                            ( make_unop UHatOp _1 )}
| _1 = identifier
    {              (
      let v, pos = _1 in
         VarExpr(v, pos)
   )}
| _1 = identifier _2 = TokDot _3 = identifier
    {                                (
      let sym1, pos1 = _1 in
      let sym2, pos2 = _3 in
      let pos = union_pos pos1 pos2 in
         ProjectExpr(VarExpr(sym1, pos1), sym2, pos)
   )}
| _1 = TokInc _2 = TokLeftParen _3 = identifier _4 = TokRightParen
    {                                                (
      let sym, pos = _3 in
         UArithExpr(PreIncrOp, VarExpr(sym, pos), pos)
   )}
| _1 = TokDec _2 = TokLeftParen _3 = identifier _4 = TokRightParen
    {                                                (
      let sym, pos = _3 in
         UArithExpr(PreDecrOp, VarExpr(sym, pos), pos)
   )}
| _1 = TokInc _2 = TokLeftParen _3 = identifier _4 = TokComma _5 = expression _6 = TokRightParen
    {                                                                    (
      let sym, pos = _3 in
         AssignExpr(Some PlusOp, VarExpr(sym, pos), _5, pos)
   )}
| _1 = TokDec _2 = TokLeftParen _3 = identifier _4 = TokComma _5 = expression _6 = TokRightParen
    {                                                                    (
      let sym, pos = _3 in
         AssignExpr(Some MinusOp, VarExpr(sym, pos), _5, pos)
   )}
| _1 = function_call
    {                 ( _1 )}

character_string:
  _1 = character_string_rev
    {                        (
      let chars, pos = _1 in
         List.rev chars, pos
   )}

character_string_rev:
  _1 = character_string_rev _2 = TokChar
    {                                (
      let chars, pos1 = _1 in
	      let ch, pos2 = _2 in
         ch :: chars, union_pos pos1 pos2
   )}

function_call:
  _1 = identifier _2 = TokLeftParen _3 = expression_list _4 = TokRightParen
    {                                                         (
      let sym, pos1 = _1 in
      let pos = union_pos pos1 _4 in
         ApplyExpr(VarExpr(sym, pos1), _3, pos)
   )}

%%
