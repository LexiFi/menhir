File "mcc-prof.mly", line 50, characters 23-32:
Warning: the token TokOutput is unused.
%{
open Prof_parse_state
open Prof_type

let pos_of_single = function
     VarExpr (_, pos)
   | NumExpr (_, pos)
   | PlusExpr (_, _, pos)
   | MinusExpr (_, _, pos)
   | DivExpr (_, _, pos)
   | MultExpr (_, _, pos)
   | Average (_, pos)
   | PrintExpr (_, pos) ->
      pos

%}
%start main
%token <Prof_type.pos> TokAverage
%token <Prof_type.pos> TokComma
%token <Prof_type.pos> TokDiv
%token TokEof
%token <float * Prof_type.pos> TokFloat
%token <Symbol.symbol * Prof_type.pos> TokId
%token <int * Prof_type.pos> TokInt
%token <Prof_type.pos> TokLeftBrack
%token <Prof_type.pos> TokLeftParen
%token <Prof_type.pos> TokMinus
%token <Prof_type.pos> TokMult
%token <Prof_type.pos> TokOutput
%token <Prof_type.pos> TokPercentages
%token <Prof_type.pos> TokPlus
%token <Prof_type.pos> TokPrint
%token <Prof_type.pos> TokRightBrack
%token <Prof_type.pos> TokRightParen
%token <Prof_type.pos> TokSemi
%token <string * Prof_type.pos> TokString
%left TokMinus TokPlus
%left TokDiv TokMult
%type <Prof_type.expr list> main
%%

main:
  _1 = expr_list _2 = TokEof
    {                              ( _1 )}

expr_list:
  _1 = expr
    {                              ( [_1] )}
| _1 = expr_list _2 = TokSemi _3 = expr
    {                              ( _1 @ [_3] )}

expr:
  _1 = item
    {                              ( Single _1 )}
| _1 = multi
    {                              ( Multi _1 )}

item:
  _1 = TokId
    {                              ( VarExpr (fst _1, snd _1) )}
| _1 = item _2 = TokPlus _3 = item
    {                              ( PlusExpr (_1, _3, union_pos (pos_of_single _1) (pos_of_single _3)) )}
| _1 = item _2 = TokMinus _3 = item
    {                              ( MinusExpr (_1, _3, union_pos (pos_of_single _1) (pos_of_single _3)) )}
| _1 = item _2 = TokDiv _3 = item
    {                              ( DivExpr (_1, _3, union_pos (pos_of_single _1) (pos_of_single _3)) )}
| _1 = item _2 = TokMult _3 = item
    {                              ( MultExpr (_1, _3, union_pos (pos_of_single _1) (pos_of_single _3)) )}
| _1 = TokLeftParen _2 = item _3 = TokRightParen
    {                              ( _2 )}
| _1 = item_result
    {                              ( _1 )}
| _1 = TokInt
    {                              ( NumExpr (float_of_int (fst _1), snd _1) )}
| _1 = TokFloat
    {                              ( NumExpr (fst _1, snd _1) )}

item_list:
  _1 = item
    {                              ( [_1] )}
| _1 = item_list _2 = TokComma _3 = item
    {                              ( _1 @ [_3] )}

item_result:
  _1 = TokAverage _2 = TokLeftParen _3 = multi _4 = TokRightParen
    {                              ( Average (_3, union_pos _1 _4) )}
| _1 = TokPrint _2 = TokLeftParen _3 = TokString _4 = TokRightParen
    {                              ( PrintExpr (fst _3, snd _3) )}

multi:
  _1 = TokPercentages _2 = TokLeftParen _3 = multi _4 = TokRightParen
    {                              ( Percentages (_3, union_pos _1 _4) )}
| _1 = TokLeftBrack _2 = item_list _3 = TokRightBrack
    {                              ( ListExpr (_2, union_pos _1 _3) )}

%%
