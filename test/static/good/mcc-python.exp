File "mcc-python.mly", line 144, characters 24-27:
Warning: the token EOF is unused.
File "mcc-python.mly", line 75, characters 24-28:
Warning: the token Exec is unused.
Grammar has 87 nonterminal symbols, among which 1 start symbols.
Grammar has 80 terminal symbols.
Grammar has 232 productions.
nullable(xor_expr) = false
nullable(while_stmt) = false
nullable(u_expr) = false
nullable(try_stmt) = false
nullable(try_fin_stmt) = false
nullable(try_exc_stmt) = false
nullable(target_list_without_comma) = false
nullable(target_list) = false
nullable(suite) = false
nullable(sublist_without_comma) = false
nullable(sublist) = false
nullable(string_conversion) = false
nullable(stmt_list_without_semicolon) = false
nullable(stmt_list) = false
nullable(statement_plus) = false
nullable(statement) = false
nullable(slicing) = false
nullable(slice_list_without_comma) = false
nullable(slice_list) = false
nullable(slice_item) = false
nullable(simple_stmt) = false
nullable(short_slice) = false
nullable(shift_expr) = false
nullable(return_stmt) = false
nullable(raise_stmt) = false
nullable(print_stmt) = false
nullable(primary) = false
nullable(power) = false
nullable(pass_stmt) = false
nullable(parenth_form) = false
nullable(parameter_list) = false
nullable(parameter) = false
nullable(or_test) = false
nullable(or_expr) = false
nullable(optional_comma) = true
nullable(not_test) = false
nullable(module_name) = false
nullable(module_list) = false
nullable(m_expr) = false
nullable(literal) = false
nullable(listmaker) = false
nullable(list_display) = false
nullable(lambda_form) = false
nullable(key_datum_list_without_comma) = false
nullable(key_datum_list) = false
nullable(key_datum) = false
nullable(inheritance) = false
nullable(import_stmt) = false
nullable(import_ident_list) = false
nullable(if_stmt) = false
nullable(identifier_list) = false
nullable(global_stmt) = false
nullable(funcdef) = false
nullable(for_stmt) = false
nullable(file_input_list) = false
nullable(file_input) = false
nullable(expression_stmt) = false
nullable(expression) = false
nullable(expr_list_without_comma) = false
nullable(expr_list) = false
nullable(exc_list) = false
nullable(exc_item) = false
nullable(enclosure) = false
nullable(elif_list) = false
nullable(dict_display) = false
nullable(del_stmt) = false
nullable(defparams) = false
nullable(defparam) = false
nullable(continue_stmt) = false
nullable(compound_stmt) = false
nullable(comparison) = false
nullable(comp_operator) = false
nullable(classdef) = false
nullable(call) = false
nullable(break_stmt) = false
nullable(augop) = false
nullable(augmented_assignment_stmt) = false
nullable(attributeref) = false
nullable(atom) = false
nullable(assignment_stmt) = false
nullable(assert_stmt) = false
nullable(argument) = false
nullable(arg_list) = false
nullable(arg_comma_star) = true
nullable(and_test) = false
nullable(and_expr) = false
nullable(a_expr) = false
first(xor_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(while_stmt) = While
first(u_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(try_stmt) = Try
first(try_fin_stmt) = Try
first(try_exc_stmt) = Try
first(target_list_without_comma) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(target_list) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(suite) = Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary Identifier Global From Float Del Dash Continue Break Backquote Assert
first(sublist_without_comma) = Leftparen Identifier
first(sublist) = Leftparen Identifier
first(string_conversion) = Backquote
first(stmt_list_without_semicolon) = Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary Identifier Global From Float Del Dash Continue Break Backquote Assert
first(stmt_list) = Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary Identifier Global From Float Del Dash Continue Break Backquote Assert
first(statement_plus) = While Try Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dash Continue Class Break Backquote Assert
first(statement) = While Try Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dash Continue Class Break Backquote Assert
first(slicing) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(slice_list_without_comma) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Ellipsis Dash Colon Backquote
first(slice_list) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Ellipsis Dash Colon Backquote
first(slice_item) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Ellipsis Dash Colon Backquote
first(simple_stmt) = Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary Identifier Global From Float Del Dash Continue Break Backquote Assert
first(short_slice) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Colon Backquote
first(shift_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(return_stmt) = Return
first(raise_stmt) = Raise
first(print_stmt) = Print
first(primary) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(power) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(pass_stmt) = Pass
first(parenth_form) = Leftparen
first(parameter_list) = StarStar Star Leftparen Identifier
first(parameter) = Leftparen Identifier
first(or_test) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(or_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(optional_comma) = Comma
first(not_test) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(module_name) = Identifier
first(module_list) = Identifier
first(m_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(literal) = String Longinteger Integer Imaginary Float
first(listmaker) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(list_display) = Leftbracket
first(lambda_form) = Lambda
first(key_datum_list_without_comma) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(key_datum_list) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(key_datum) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(inheritance) = Leftparen
first(import_stmt) = Import From
first(import_ident_list) = Identifier
first(if_stmt) = If
first(identifier_list) = Identifier
first(global_stmt) = Global
first(funcdef) = Def
first(for_stmt) = For
first(file_input_list) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dash Continue Class Break Backquote Assert
first(file_input) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dash Continue Class Break Backquote Assert
first(expression_stmt) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(expression) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(expr_list_without_comma) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(expr_list) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(exc_list) = Except
first(exc_item) = Except
first(enclosure) = Leftparen Leftbracket Leftbrace Backquote
first(elif_list) = Else Elif
first(dict_display) = Leftbrace
first(del_stmt) = Del
first(defparams) = Leftparen Identifier
first(defparam) = Leftparen Identifier
first(continue_stmt) = Continue
first(compound_stmt) = While Try If For Def Class
first(comparison) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(comp_operator) = NotEqual Not LessthanEq Lessthan Is In GreaterthanEq Greaterthan EqualEqual
first(classdef) = Class
first(call) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(break_stmt) = Break
first(augop) = StarStarEqual StarEqual SlashEqual RightshiftEqual PlusEqual PercentEqual LeftshiftEqual DashEqual CaretEqual BarEqual AmpersandEqual
first(augmented_assignment_stmt) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(attributeref) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(atom) = String Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Backquote
first(assignment_stmt) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(assert_stmt) = Assert
first(argument) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(arg_list) = Tilde String StarStar Star Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(arg_comma_star) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
first(and_test) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(and_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
first(a_expr) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
minimal(xor_expr) = (* 1 *) Identifier
minimal(while_stmt) = (* 5 *) While Identifier Colon Identifier Newline
minimal(u_expr) = (* 1 *) Identifier
minimal(try_stmt) = (* 8 *) Try Colon Identifier Newline Except Colon Identifier Newline
minimal(try_fin_stmt) = (* 8 *) Try Colon Identifier Newline Finally Colon Identifier Newline
minimal(try_exc_stmt) = (* 8 *) Try Colon Identifier Newline Except Colon Identifier Newline
minimal(target_list_without_comma) = (* 1 *) Identifier
minimal(target_list) = (* 1 *) Identifier
minimal(suite) = (* 2 *) Identifier Newline
minimal(sublist_without_comma) = (* 1 *) Identifier
minimal(sublist) = (* 1 *) Identifier
minimal(string_conversion) = (* 3 *) Backquote Identifier Backquote
minimal(stmt_list_without_semicolon) = (* 1 *) Identifier
minimal(stmt_list) = (* 1 *) Identifier
minimal(statement_plus) = (* 2 *) Identifier Newline
minimal(statement) = (* 2 *) Identifier Newline
minimal(slicing) = (* 4 *) Identifier Leftbracket Colon Rightbracket
minimal(slice_list_without_comma) = (* 1 *) Colon
minimal(slice_list) = (* 1 *) Colon
minimal(slice_item) = (* 1 *) Colon
minimal(simple_stmt) = (* 1 *) Identifier
minimal(short_slice) = (* 1 *) Colon
minimal(shift_expr) = (* 1 *) Identifier
minimal(return_stmt) = (* 1 *) Return
minimal(raise_stmt) = (* 1 *) Raise
minimal(print_stmt) = (* 1 *) Print
minimal(primary) = (* 1 *) Identifier
minimal(power) = (* 1 *) Identifier
minimal(pass_stmt) = (* 1 *) Pass
minimal(parenth_form) = (* 2 *) Leftparen Rightparen
minimal(parameter_list) = (* 1 *) Identifier
minimal(parameter) = (* 1 *) Identifier
minimal(or_test) = (* 1 *) Identifier
minimal(or_expr) = (* 1 *) Identifier
minimal(optional_comma) = (* 0 *) 
minimal(not_test) = (* 1 *) Identifier
minimal(module_name) = (* 1 *) Identifier
minimal(module_list) = (* 1 *) Identifier
minimal(m_expr) = (* 1 *) Identifier
minimal(literal) = (* 1 *) String
minimal(listmaker) = (* 1 *) Identifier
minimal(list_display) = (* 2 *) Leftbracket Rightbracket
minimal(lambda_form) = (* 3 *) Lambda Colon Identifier
minimal(key_datum_list_without_comma) = (* 3 *) Identifier Colon Identifier
minimal(key_datum_list) = (* 3 *) Identifier Colon Identifier
minimal(key_datum) = (* 3 *) Identifier Colon Identifier
minimal(inheritance) = (* 2 *) Leftparen Rightparen
minimal(import_stmt) = (* 2 *) Import Identifier
minimal(import_ident_list) = (* 1 *) Identifier
minimal(if_stmt) = (* 5 *) If Identifier Colon Identifier Newline
minimal(identifier_list) = (* 1 *) Identifier
minimal(global_stmt) = (* 2 *) Global Identifier
minimal(funcdef) = (* 7 *) Def Identifier Leftparen Rightparen Colon Identifier Newline
minimal(for_stmt) = (* 7 *) For Identifier In Identifier Colon Identifier Newline
minimal(file_input_list) = (* 1 *) Newline
minimal(file_input) = (* 1 *) Newline
minimal(expression_stmt) = (* 1 *) Identifier
minimal(expression) = (* 1 *) Identifier
minimal(expr_list_without_comma) = (* 1 *) Identifier
minimal(expr_list) = (* 1 *) Identifier
minimal(exc_list) = (* 4 *) Except Colon Identifier Newline
minimal(exc_item) = (* 4 *) Except Colon Identifier Newline
minimal(enclosure) = (* 2 *) Leftparen Rightparen
minimal(elif_list) = (* 4 *) Else Colon Identifier Newline
minimal(dict_display) = (* 2 *) Leftbrace Rightbrace
minimal(del_stmt) = (* 2 *) Del Identifier
minimal(defparams) = (* 1 *) Identifier
minimal(defparam) = (* 1 *) Identifier
minimal(continue_stmt) = (* 1 *) Continue
minimal(compound_stmt) = (* 5 *) If Identifier Colon Identifier Newline
minimal(comparison) = (* 1 *) Identifier
minimal(comp_operator) = (* 1 *) Lessthan
minimal(classdef) = (* 5 *) Class Identifier Colon Identifier Newline
minimal(call) = (* 3 *) Identifier Leftparen Rightparen
minimal(break_stmt) = (* 1 *) Break
minimal(augop) = (* 1 *) PlusEqual
minimal(augmented_assignment_stmt) = (* 3 *) Identifier PlusEqual Identifier
minimal(attributeref) = (* 3 *) Identifier Period Identifier
minimal(atom) = (* 1 *) Identifier
minimal(assignment_stmt) = (* 3 *) Identifier Equal Identifier
minimal(assert_stmt) = (* 2 *) Assert Identifier
minimal(argument) = (* 1 *) Identifier
minimal(arg_list) = (* 1 *) Identifier
minimal(arg_comma_star) = (* 0 *) 
minimal(and_test) = (* 1 *) Identifier
minimal(and_expr) = (* 1 *) Identifier
minimal(a_expr) = (* 1 *) Identifier
follow(xor_expr) = Semicolon Rightparen Rightbracket Rightbrace Or NotEqual Not Newline LessthanEq Lessthan Is In GreaterthanEq Greaterthan EqualEqual Equal Comma Colon Caret Bar Backquote And
follow(while_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(u_expr) = Star Slash Semicolon Rightshift Rightparen Rightbracket Rightbrace Plus Percent Or NotEqual Not Newline LessthanEq Lessthan Leftshift Is In GreaterthanEq Greaterthan EqualEqual Equal Dash Comma Colon Caret Bar Backquote And Ampersand
follow(try_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(try_fin_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(try_exc_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(target_list_without_comma) = Semicolon Newline In Comma
follow(target_list) = Semicolon Newline In
follow(suite) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Finally Except Else Elif Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(sublist_without_comma) = Rightparen Comma
follow(sublist) = Rightparen
follow(string_conversion) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(stmt_list_without_semicolon) = Semicolon Newline
follow(stmt_list) = Newline
follow(statement_plus) = While Try Tilde String Return Raise Print Plus Pass Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert
follow(statement) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(slicing) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(slice_list_without_comma) = Rightbracket Comma
follow(slice_list) = Rightbracket
follow(slice_item) = Rightbracket Comma
follow(simple_stmt) = Semicolon Newline
follow(short_slice) = Rightbracket Comma Colon
follow(shift_expr) = Semicolon Rightshift Rightparen Rightbracket Rightbrace Or NotEqual Not Newline LessthanEq Lessthan Leftshift Is In GreaterthanEq Greaterthan EqualEqual Equal Comma Colon Caret Bar Backquote And Ampersand
follow(return_stmt) = Semicolon Newline
follow(raise_stmt) = Semicolon Newline
follow(print_stmt) = Semicolon Newline
follow(primary) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(power) = Star Slash Semicolon Rightshift Rightparen Rightbracket Rightbrace Plus Percent Or NotEqual Not Newline LessthanEq Lessthan Leftshift Is In GreaterthanEq Greaterthan EqualEqual Equal Dash Comma Colon Caret Bar Backquote And Ampersand
follow(pass_stmt) = Semicolon Newline
follow(parenth_form) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(parameter_list) = Rightparen Colon
follow(parameter) = Rightparen Equal Comma Colon
follow(or_test) = Semicolon Rightparen Rightbracket Rightbrace Or Newline Equal Comma Colon Backquote
follow(or_expr) = Semicolon Rightparen Rightbracket Rightbrace Or NotEqual Not Newline LessthanEq Lessthan Is In GreaterthanEq Greaterthan EqualEqual Equal Comma Colon Bar Backquote And
follow(optional_comma) = Rightparen Colon
follow(not_test) = Semicolon Rightparen Rightbracket Rightbrace Or Newline Equal Comma Colon Backquote And
follow(module_name) = Semicolon Period Newline Import Identifier Comma
follow(module_list) = Semicolon Newline Comma
follow(m_expr) = Star Slash Semicolon Rightshift Rightparen Rightbracket Rightbrace Plus Percent Or NotEqual Not Newline LessthanEq Lessthan Leftshift Is In GreaterthanEq Greaterthan EqualEqual Equal Dash Comma Colon Caret Bar Backquote And Ampersand
follow(literal) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(listmaker) = Rightbracket
follow(list_display) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(lambda_form) = Semicolon Rightparen Rightbracket Rightbrace Newline Equal Comma Colon Backquote
follow(key_datum_list_without_comma) = Rightbrace Comma
follow(key_datum_list) = Rightbrace
follow(key_datum) = Rightbrace Comma
follow(inheritance) = Colon
follow(import_stmt) = Semicolon Newline
follow(import_ident_list) = Semicolon Newline Comma
follow(if_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(identifier_list) = Semicolon Newline Comma
follow(global_stmt) = Semicolon Newline
follow(funcdef) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(for_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(file_input_list) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dash Continue Class Break Backquote Assert #
follow(file_input) = #
follow(expression_stmt) = Semicolon Newline
follow(expression) = Semicolon Rightparen Rightbracket Rightbrace Newline Equal Comma Colon Backquote
follow(expr_list_without_comma) = Semicolon Rightparen Rightbracket Newline Equal Comma Colon Backquote
follow(expr_list) = Semicolon Rightparen Rightbracket Newline Equal Colon
follow(exc_list) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Except Else Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(exc_item) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Except Else Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(enclosure) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(elif_list) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(dict_display) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(del_stmt) = Semicolon Newline
follow(defparams) = Rightparen Comma Colon
follow(defparam) = Rightparen Comma Colon
follow(continue_stmt) = Semicolon Newline
follow(compound_stmt) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(comparison) = Semicolon Rightparen Rightbracket Rightbrace Or NotEqual Not Newline LessthanEq Lessthan Is In GreaterthanEq Greaterthan EqualEqual Equal Comma Colon Backquote And
follow(comp_operator) = Tilde String Plus Longinteger Leftparen Leftbracket Leftbrace Integer Imaginary Identifier Float Dash Backquote
follow(classdef) = While Try Tilde String Return Raise Print Plus Pass Not Newline Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Import Imaginary If Identifier Global From For Float Del Def Dedent Dash Continue Class Break Backquote Assert #
follow(call) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(break_stmt) = Semicolon Newline
follow(augop) = Tilde String Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
follow(augmented_assignment_stmt) = Semicolon Newline
follow(attributeref) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(atom) = StarStarEqual StarStar StarEqual Star SlashEqual Slash Semicolon RightshiftEqual Rightshift Rightparen Rightbracket Rightbrace PlusEqual Plus Period PercentEqual Percent Or NotEqual Not Newline LessthanEq Lessthan LeftshiftEqual Leftshift Leftparen Leftbracket Is In GreaterthanEq Greaterthan EqualEqual Equal DashEqual Dash Comma Colon CaretEqual Caret BarEqual Bar Backquote And AmpersandEqual Ampersand
follow(assignment_stmt) = Semicolon Newline
follow(assert_stmt) = Semicolon Newline
follow(argument) = Rightparen Comma
follow(arg_list) = Rightparen
follow(arg_comma_star) = Tilde String StarStar Star Plus Not Longinteger Leftparen Leftbracket Leftbrace Lambda Integer Imaginary Identifier Float Dash Backquote
follow(and_test) = Semicolon Rightparen Rightbracket Rightbrace Or Newline Equal Comma Colon Backquote And
follow(and_expr) = Semicolon Rightparen Rightbracket Rightbrace Or NotEqual Not Newline LessthanEq Lessthan Is In GreaterthanEq Greaterthan EqualEqual Equal Comma Colon Caret Bar Backquote And Ampersand
follow(a_expr) = Semicolon Rightshift Rightparen Rightbracket Rightbrace Plus Or NotEqual Not Newline LessthanEq Lessthan Leftshift Is In GreaterthanEq Greaterthan EqualEqual Equal Dash Comma Colon Caret Bar Backquote And Ampersand
Built an LR(0) automaton with 369 states.
The grammar is not SLR(1) -- 1 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 369 states.
File "mcc-python.mly", line 148, characters 0-9:
Warning: the precedence level assigned to Backquote is never useful.
File "mcc-python.mly", line 149, characters 0-9:
Warning: the precedence level assigned to Dash is never useful.
File "mcc-python.mly", line 149, characters 0-9:
Warning: the precedence level assigned to Leftbracket is never useful.
File "mcc-python.mly", line 149, characters 0-9:
Warning: the precedence level assigned to Leftparen is never useful.
File "mcc-python.mly", line 149, characters 0-9:
Warning: the precedence level assigned to Not is never useful.
File "mcc-python.mly", line 149, characters 0-9:
Warning: the precedence level assigned to Plus is never useful.
Warning: 38 end-of-stream conflicts were arbitrarily resolved.
File "mcc-python.mly", line 1164, characters 3-18:
Warning: production file_input -> file_input_list is never reduced.
Warning: in total, 1 production is never reduced.
164 out of 369 states have a default reduction.
97 out of 369 states are represented.
0 out of 170 symbols keep track of their start position.
0 out of 170 symbols keep track of their end position.
128 out of 233 productions exploit shiftreduce optimization.
0 out of 369 states can peek at an error.
1063 functions before inlining, 141 functions after inlining.
