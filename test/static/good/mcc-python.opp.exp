File "mcc-python.mly", line 144, characters 24-27:
Warning: the token EOF is unused.
File "mcc-python.mly", line 75, characters 24-28:
Warning: the token Exec is unused.
%{
open Python_ast
open Python_ast_util

let no_pos = ("", 0, 0, 0, 0)
let sys_maxint = Symbol.add "sys.maxint"
let ellipsis = Symbol.add "Ellipsis"
let zero = LiteralExpr ((IntLiteral (0, no_pos)), no_pos)
let none = Symbol.add "None"
let none_expr = IdExpr (none, no_pos)

exception Impossible
exception InconsistentDedent

(********** Position stuff **********)
(*
 * Combine two positions.
 *)
let union_pos
    (file1, sline1, schar1, eline1, echar1)
    (file2, sline2, schar2, eline2, echar2) =
   if file1 <> file2 then
      raise (Invalid_argument (**)
                (Printf.sprintf "union_pos: file mistmatch: \"%s\":\"%s\"" (**)
                    (String.escaped file1) (String.escaped file2)));
   let sline, schar =
      if sline1 < sline2 then
         sline1, schar1
      else if sline1 > sline2 then
         sline2, schar2
      else
         sline1, min schar1 schar2
   in
   let eline, echar =
      if eline1 > eline2 then
         eline1, echar1
      else if eline1 < eline2 then
         eline2, echar2
      else
         eline1, max echar1 echar2
   in
      file1, sline, schar, eline, echar

let fatal_error pos str =
   Python_position.print_pos pos;
   print_endline str;
   exit 1

let parse_error str =
   fatal_error
       !Python_position.position
       (Printf.sprintf "ParseError: `%s'" str)

%}
%start file_input
%token <Python_ast.pos> Ampersand
%token <Python_ast.pos> AmpersandEqual
%token <Python_ast.pos> And
%token <Python_ast.pos> Assert
%token <Python_ast.pos> Backquote
%token <Python_ast.pos> Bar
%token <Python_ast.pos> BarEqual
%token <Python_ast.pos> Break
%token <Python_ast.pos> Caret
%token <Python_ast.pos> CaretEqual
%token <Python_ast.pos> Class
%token <Python_ast.pos> Colon
%token <Python_ast.pos> Comma
%token <Python_ast.pos> Continue
%token <Python_ast.pos> Dash
%token <Python_ast.pos> DashEqual
%token <Python_ast.pos> Dedent
%token <Python_ast.pos> Def
%token <Python_ast.pos> Del
%token <Python_ast.pos> EOF
%token <Python_ast.pos> Elif
%token <Python_ast.pos> Ellipsis
%token <Python_ast.pos> Else
%token <Python_ast.pos> Equal
%token <Python_ast.pos> EqualEqual
%token <Python_ast.pos> Except
%token <Python_ast.pos> Exec
%token <Python_ast.pos> Finally
%token <float  * Python_ast.pos> Float
%token <Python_ast.pos> For
%token <Python_ast.pos> From
%token <Python_ast.pos> Global
%token <Python_ast.pos> Greaterthan
%token <Python_ast.pos> GreaterthanEq
%token <Symbol.symbol * Python_ast.pos> Identifier
%token <Python_ast.pos> If
%token <float  * Python_ast.pos> Imaginary
%token <Python_ast.pos> Import
%token <Python_ast.pos> In
%token <Python_ast.pos> Indent
%token <int    * Python_ast.pos> Integer
%token <Python_ast.pos> Is
%token <Python_ast.pos> Lambda
%token <Python_ast.pos> Leftbrace
%token <Python_ast.pos> Leftbracket
%token <Python_ast.pos> Leftparen
%token <Python_ast.pos> Leftshift
%token <Python_ast.pos> LeftshiftEqual
%token <Python_ast.pos> Lessthan
%token <Python_ast.pos> LessthanEq
%token <string * Python_ast.pos> Longinteger
%token <Python_ast.pos> Newline
%token <Python_ast.pos> Not
%token <Python_ast.pos> NotEqual
%token <Python_ast.pos> Or
%token <Python_ast.pos> Pass
%token <Python_ast.pos> Percent
%token <Python_ast.pos> PercentEqual
%token <Python_ast.pos> Period
%token <Python_ast.pos> Plus
%token <Python_ast.pos> PlusEqual
%token <Python_ast.pos> Print
%token <Python_ast.pos> Raise
%token <Python_ast.pos> Return
%token <Python_ast.pos> Rightbrace
%token <Python_ast.pos> Rightbracket
%token <Python_ast.pos> Rightparen
%token <Python_ast.pos> Rightshift
%token <Python_ast.pos> RightshiftEqual
%token <Python_ast.pos> Semicolon
%token <Python_ast.pos> Slash
%token <Python_ast.pos> SlashEqual
%token <Python_ast.pos> Star
%token <Python_ast.pos> StarEqual
%token <Python_ast.pos> StarStar
%token <Python_ast.pos> StarStarEqual
%token <string * Python_ast.pos> String
%token <Python_ast.pos> Tilde
%token <Python_ast.pos> Try
%token <Python_ast.pos> While
%nonassoc Backquote
%nonassoc Dash Leftbracket Leftparen Not Plus
%type <Python_ast.stmt list> file_input
%%

atom:
  _1 = Identifier
    {               ( IdExpr (fst _1, snd _1)      )}
| _1 = literal
    {            ( LiteralExpr (fst _1, snd _1) )}
| _1 = enclosure
    {              ( _1			       )}

enclosure:
  _1 = parenth_form
    {                 ( _1 )}
| _1 = list_display
    {                 ( _1 )}
| _1 = dict_display
    {                 ( _1 )}
| _1 = string_conversion
    {                     ( _1 )}

literal:
  _1 = String
    {           ( StrLiteral     (fst _1, snd _1), snd _1 )}
| _1 = Integer
    {            ( IntLiteral     (fst _1, snd _1), snd _1 )}
| _1 = Longinteger
    {                ( LongIntLiteral (fst _1, snd _1), snd _1 )}
| _1 = Float
    {          ( FloatLiteral   (fst _1, snd _1), snd _1 )}
| _1 = Imaginary
    {              ( ImagLiteral    (fst _1, snd _1), snd _1 )}

parenth_form:
  _1 = Leftparen _2 = Rightparen
    {                         ( TupleExpr ([], union_pos _1 _2) )}
| _1 = Leftparen _2 = expr_list_without_comma _3 = Rightparen
    {      (  let (el,_) = _2 in
	 if List.length el = 1		(* If there was only one expression,  *)
	    then List.hd el		(* then this is just that expression. *)
				        (* Otherwise, it's a tuple.           *)
	    else TupleExpr (el, union_pos _1 _3)
      )}
| _1 = Leftparen _2 = expr_list_without_comma _3 = Comma _4 = Rightparen
    {      ( TupleExpr (fst _2, union_pos _1 _4) )}

list_display:
  _1 = Leftbracket _2 = Rightbracket
    {                             ( ListExpr (List [], union_pos _1 _2) )}
| _1 = Leftbracket _2 = listmaker _3 = Rightbracket
    {                                      ( ListExpr (_2, union_pos _1 _3)      )}

listmaker:
  _1 = expr_list
    {              ( List (fst _1) )}

dict_display:
  _1 = Leftbrace _2 = Rightbrace
    {                          ( DictExpr ([], union_pos _1 _2)     )}
| _1 = Leftbrace _2 = key_datum_list _3 = Rightbrace
    {                                       ( DictExpr (fst _2, union_pos _1 _3) )}

key_datum_list:
  _1 = key_datum_list_without_comma
    {                                       ( _1				 )}
| _1 = key_datum_list_without_comma _2 = Comma
    {                                       ( (fst _1, union_pos (snd _1) _2) )}

key_datum_list_without_comma:
  _1 = key_datum
    {               ( let (e1,e2,p) = _1 in ([(e1, e2)], p) )}
| _1 = key_datum_list_without_comma _2 = Comma _3 = key_datum
    {      (  let (kdl,p1) = _1 in
	 let (kd1,kd2,p2) = _3 in
	 (kdl @ [(kd1, kd2)], union_pos p1 p2)
      )}

key_datum:
  _1 = expression _2 = Colon _3 = expression
    {      ( (_1, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

string_conversion:
  _1 = Backquote _2 = expr_list_without_comma _3 = Backquote
    {      ( StrConvExpr (fst _2, union_pos _1 _3) )}

primary:
  _1 = atom
    {          ( _1 )}
| _1 = attributeref
    {                 ( _1 )}
| _1 = slicing
    {             ( _1 )}
| _1 = call
    {          ( _1 )}

attributeref:
  _1 = primary _2 = Period _3 = Identifier
    {      ( AttrRefExpr (_1, fst _3, union_pos (pos_of_expr _1) (snd _3)) )}

slicing:
  _1 = primary _2 = Leftbracket _3 = slice_list _4 = Rightbracket
    {      ( SliceExpr (_1, fst _3, union_pos (pos_of_expr _1) _4) )}

slice_list:
  _1 = slice_list_without_comma
    {                               ( _1                              )}
| _1 = slice_list_without_comma _2 = Comma
    {                                   ( (fst _1, union_pos (snd _1) _2) )}

slice_list_without_comma:
  _1 = slice_item
    {                   ( ([fst _1], snd _1) )}
| _1 = slice_list_without_comma _2 = Comma _3 = slice_item
    {      ( ((fst _1) @ [fst _3], union_pos (snd _1) (snd _3)) )}

slice_item:
  _1 = expression
    {                ( ExprSlice (_1), pos_of_expr _1 )}
| _1 = short_slice
    {                 ( _1 )}
| _1 = short_slice _2 = Colon
    {      (  let ss, pos = _1 in
	 match ss with
	    SimpleSlice(lower, upper) ->
	       ExtSlice([lower; upper; IdExpr (none, no_pos)]), pos
	  | _ ->
	    fatal_error pos "InternalParserError: unexpected short_slice"
      )}
| _1 = short_slice _2 = Colon _3 = expression
    {      (  let ss, pos = _1 in
	 match ss with
	    SimpleSlice(lower, upper) -> ExtSlice([lower; upper; _3]), pos
	  | _ ->
	    fatal_error pos "InternalParserError: unexpected short_slice"
      )}
| _1 = Ellipsis
    {              ( ExtSlice ([IdExpr (ellipsis, no_pos)]), _1 )}

short_slice:
  _1 = Colon
    {          ( SimpleSlice(zero, IdExpr(sys_maxint, no_pos)), _1 )}
| _1 = expression _2 = Colon
    {                    ( SimpleSlice(_1, IdExpr(sys_maxint, no_pos)), union_pos (pos_of_expr _1) _2 )}
| _1 = Colon _2 = expression
    {                    ( SimpleSlice(zero, _2), union_pos _1 (pos_of_expr _2) )}
| _1 = expression _2 = Colon _3 = expression
    {      ( SimpleSlice(_1, _3), union_pos (pos_of_expr _1) (pos_of_expr _3) )}

call:
  _1 = primary _2 = Leftparen _3 = Rightparen
    {      ( CallExpr(_1, [], union_pos (pos_of_expr _1) _3) )}
| _1 = primary _2 = Leftparen _3 = arg_list _4 = Rightparen
    {      ( CallExpr (_1, List.rev _3, union_pos (pos_of_expr _1) _4) )}

arg_list:
  _1 = arg_comma_star _2 = argument _3 = optional_comma
    {                                          ( _2 :: _1 )}
| _1 = arg_comma_star _2 = Star _3 = atom
    {      ( StarArg (_3, pos_of_expr _3) :: _1 )}
| _1 = arg_comma_star _2 = Star _3 = atom _4 = Comma _5 = StarStar _6 = atom
    {      ( StarStarArg (_6, pos_of_expr _6) :: StarArg (_3, pos_of_expr _3) :: _1 )}
| _1 = arg_comma_star _2 = StarStar _3 = atom
    {      ( StarStarArg (_3, pos_of_expr _3) :: _1 )}

arg_comma_star:
  
    {     ( [] )}
| _1 = arg_comma_star _2 = argument _3 = Comma
    {                                 ( _2 :: _1 )}

argument:
  _1 = expression
    {                ( let p = pos_of_expr _1 in PosArg (_1, p) )}
| _1 = Identifier _2 = Equal _3 = expression
    {      (  let pos = union_pos (snd _1) (pos_of_expr _3) in
	 KeywordArg (fst _1, _3, pos)
      )}

optional_comma:
  
    {         ( () )}
| _1 = Comma
    {         ( () )}

power:
  _1 = primary
    {              ( _1 )}
| _1 = primary _2 = StarStar _3 = u_expr
    {      ( OpExpr (_1, StarStar, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

u_expr:
  _1 = power
    {            ( _1                                                      )}
| _1 = Dash _2 = u_expr
    {                  ( OpExpr (zero, Dash, _2, union_pos _1 (pos_of_expr _2))  )}
| _1 = Plus _2 = u_expr
    {                  ( OpExpr (zero, Plus, _2, union_pos _1 (pos_of_expr _2))  )}
| _1 = Tilde _2 = u_expr
    {                  ( OpExpr (zero, Tilde, _2, union_pos _1 (pos_of_expr _2)) )}

m_expr:
  _1 = u_expr
    {           ( _1 )}
| _1 = m_expr _2 = Star _3 = u_expr
    {      ( OpExpr (_1, Star, _3, union_pos (pos_of_expr _1) (pos_of_expr _3))    )}
| _1 = m_expr _2 = Slash _3 = u_expr
    {      ( OpExpr (_1, Slash, _3, union_pos (pos_of_expr _1) (pos_of_expr _3))   )}
| _1 = m_expr _2 = Percent _3 = u_expr
    {      ( OpExpr (_1, Percent, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

a_expr:
  _1 = m_expr
    {           ( _1 )}
| _1 = a_expr _2 = Plus _3 = m_expr
    {      ( OpExpr (_1, Plus, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = a_expr _2 = Dash _3 = m_expr
    {      ( OpExpr (_1, Dash, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

shift_expr:
  _1 = a_expr
    {            ( _1 )}
| _1 = shift_expr _2 = Leftshift _3 = a_expr
    {      ( OpExpr (_1, Leftshift, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}
| _1 = shift_expr _2 = Rightshift _3 = a_expr
    {      ( OpExpr (_1, Rightshift, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

and_expr:
  _1 = shift_expr
    {                 ( _1 )}
| _1 = and_expr _2 = Ampersand _3 = shift_expr
    {      ( OpExpr (_1, Ampersand, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

xor_expr:
  _1 = and_expr
    {              ( _1 )}
| _1 = xor_expr _2 = Caret _3 = and_expr
    {      ( OpExpr (_1, Caret, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

or_expr:
  _1 = xor_expr
    {             ( _1 )}
| _1 = or_expr _2 = Bar _3 = xor_expr
    {      ( OpExpr (_1, Bar, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

comparison:
  _1 = or_expr
    {               ( _1 )}
| _1 = comparison _2 = comp_operator _3 = or_expr
    {      ( OpExpr(_1, _2, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

comp_operator:
  _1 = Lessthan
    {              ( Lessthan	)}
| _1 = Greaterthan
    {                 ( Greaterthan	)}
| _1 = EqualEqual
    {                ( EqualEqual	)}
| _1 = GreaterthanEq
    {                  ( GreaterthanEq	)}
| _1 = LessthanEq
    {                ( LessthanEq	)}
| _1 = NotEqual
    {              ( NotEqual	)}
| _1 = Is
    {         ( Is		)}
| _1 = Is _2 = Not
    {            ( IsNot		)}
| _1 = In
    {         ( In		)}
| _1 = Not _2 = In
    {            ( NotIn		)}

expression:
  _1 = or_test
    {           ( _1 )}
| _1 = lambda_form
    {               ( _1 )}

or_test:
  _1 = and_test
    {              ( _1 )}
| _1 = or_test _2 = Or _3 = and_test
    {      ( OpExpr(_1, Or, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

and_test:
  _1 = not_test
    {               ( _1 )}
| _1 = and_test _2 = And _3 = not_test
    {      ( OpExpr(_1, And, _3, union_pos (pos_of_expr _1) (pos_of_expr _3)) )}

not_test:
  _1 = comparison
    {                ( _1 )}
| _1 = Not _2 = not_test
    {                 ( OpExpr(zero, Not, _2, union_pos _1 (pos_of_expr _2)) )}

lambda_form:
  _1 = Lambda _2 = Colon _3 = expression
    {      ( FuncExpr([], [ReturnStmt(_3, no_pos)], union_pos _1 (pos_of_expr _3)) )}
| _1 = Lambda _2 = parameter_list _3 = Colon _4 = expression
    {      ( FuncExpr(fst _2, [ReturnStmt(_4, no_pos)], union_pos _1 (pos_of_expr _4)) )}

expr_list_without_comma:
  _1 = expression
    {                  ( [_1], pos_of_expr _1 )}
| _1 = expr_list_without_comma _2 = Comma _3 = expression
    {      (  let (el,elp) = _1 in
	 el @ [_3], union_pos elp (pos_of_expr _3)
      )}

expr_list:
  _1 = expr_list_without_comma
    {                             ( _1				    )}
| _1 = expr_list_without_comma _2 = Comma
    {                                  ( (fst _1), union_pos (snd _1) _2 )}

simple_stmt:
  _1 = expression_stmt
    {                     ( _1 )}
| _1 = assert_stmt
    {                  ( _1 )}
| _1 = assignment_stmt
    {                     ( _1 )}
| _1 = augmented_assignment_stmt
    {                              ( _1 )}
| _1 = pass_stmt
    {                ( _1 )}
| _1 = del_stmt
    {               ( _1 )}
| _1 = print_stmt
    {                 ( _1 )}
| _1 = return_stmt
    {                  ( _1 )}
| _1 = raise_stmt
    {                 ( _1 )}
| _1 = break_stmt
    {                 ( _1 )}
| _1 = continue_stmt
    {                   ( _1 )}
| _1 = import_stmt
    {                  ( _1 )}
| _1 = global_stmt
    {                  ( _1 )}

expression_stmt:
  _1 = expr_list
    {             ( let (el,elp) = _1 in ExprList (el, elp) )}

assert_stmt:
  _1 = Assert _2 = expression
    {      ( AssertStmt(_2, None, union_pos _1 (pos_of_expr _2)) )}
| _1 = Assert _2 = expression _3 = Comma _4 = expression
    {      ( AssertStmt(_2, Some _4, union_pos _1 (pos_of_expr _4)) )}

assignment_stmt:
  _1 = expr_list _2 = Equal _3 = expr_list
    {      (  let (el1,p1) = _1 in
	 let (el2,p2) = _3 in
	 AssignStmt ([el1], el2, union_pos p1 p2)
      )}
| _1 = expr_list _2 = Equal _3 = assignment_stmt
    {      (  let (el,elp) = _1 in
         match _3 with
	    AssignStmt (dst,src,pos) ->
	       AssignStmt(dst @ [el], src, union_pos elp pos)
	  | _ ->
	    fatal_error _2 "InternalParserError: unexpected assignment_stmt"
      )}

target_list:
  _1 = target_list_without_comma
    {                                 ( _1 )}
| _1 = target_list_without_comma _2 = Comma
    {                                    ( let (tl,tlp) = _1 in (tl, union_pos tlp _2) )}

target_list_without_comma:
  _1 = primary
    {              ( [_1], pos_of_expr _1 )}
| _1 = target_list_without_comma _2 = Comma _3 = primary
    {      (  let (tl,tlp) = _1 in
	 (tl @ [_3], union_pos tlp (pos_of_expr _3))
      )}

augmented_assignment_stmt:
  _1 = primary _2 = augop _3 = expr_list
    {      (  let (el,elp) = _3 in
	 AugAssignStmt (_1, _2, el, union_pos (pos_of_expr _1) elp)
      )}

augop:
  _1 = PlusEqual
    {              ( PlusEqual       )}
| _1 = DashEqual
    {              ( DashEqual       )}
| _1 = StarEqual
    {              ( StarEqual       )}
| _1 = SlashEqual
    {               ( SlashEqual      )}
| _1 = PercentEqual
    {                 ( PercentEqual    )}
| _1 = StarStarEqual
    {                 ( StarStarEqual   )}
| _1 = RightshiftEqual
    {                   ( RightshiftEqual )}
| _1 = LeftshiftEqual
    {                  ( LeftshiftEqual  )}
| _1 = AmpersandEqual
    {                  ( AmpersandEqual  )}
| _1 = CaretEqual
    {               ( CaretEqual      )}
| _1 = BarEqual
    {             ( BarEqual        )}

pass_stmt:
  _1 = Pass
    {         ( PassStmt _1 )}

del_stmt:
  _1 = Del _2 = target_list
    {                   ( let (tl,tlp) = _2 in DelStmt (tl, union_pos _1 tlp) )}

print_stmt:
  _1 = Print
    {           ( PrintStmt (none_expr, [], _1) )}
| _1 = Print _2 = expr_list
    {      ( let (el,elp) = _2 in PrintStmt (none_expr, el, union_pos _1 elp) )}
| _1 = Print _2 = Rightshift _3 = expression
    {      ( PrintStmt (_3, [], union_pos _1 (pos_of_expr _3)) )}
| _1 = Print _2 = Rightshift _3 = expression _4 = Comma _5 = expr_list
    {      ( let (el,elp) = _5 in PrintStmt (_3, el, union_pos _1 elp) )}

return_stmt:
  _1 = Return
    {           ( ReturnStmt (none_expr, _1) )}
| _1 = Return _2 = expr_list
    {      (  let (el,elp) = _2 in
	 let pos = union_pos _1 elp in
	 if List.length el = 1
	    then ReturnStmt (List.hd el, pos)
	    else ReturnStmt (TupleExpr (el, elp), pos)
      )}

raise_stmt:
  _1 = Raise
    {           ( RaiseStmt (none_expr, none_expr, none_expr, _1) )}
| _1 = Raise _2 = expression
    {      ( RaiseStmt (_2, none_expr, none_expr, union_pos _1 (pos_of_expr _2)) )}
| _1 = Raise _2 = expression _3 = Comma _4 = expression
    {      ( RaiseStmt (_2, _4, none_expr, union_pos _1 (pos_of_expr _4)) )}
| _1 = Raise _2 = expression _3 = Comma _4 = expression _5 = Comma _6 = expression
    {      ( RaiseStmt (_2, _4, _6, union_pos _1 (pos_of_expr _6)) )}

break_stmt:
  _1 = Break
    {         ( BreakStmt _1 )}

continue_stmt:
  _1 = Continue
    {            ( ContStmt _1 )}

import_stmt:
  _1 = Import _2 = module_list
    {      (  let (ml,mlp) = _2 in
	 ImportStmt ([], ml, union_pos _1 mlp)
      )}
| _1 = From _2 = module_name _3 = Import _4 = Star
    {      (  let (mn,mnp) = _2 in
	 ImportStmt (mn, [], union_pos _1 _4)
      )}
| _1 = From _2 = module_name _3 = Import _4 = import_ident_list
    {      (  let (mn,mnp) = _2 in
	 let (il,ilp) = _4 in
	 ImportStmt (mn, il, union_pos _1 ilp)
      )}

module_list:
  _1 = module_name
    {                 ( let (mn,mnp) = _1 in [mn, none], mnp )}
| _1 = module_name _2 = Identifier _3 = Identifier
    {      (  let (s,_) = _2 in
	 if Symbol.to_string s = "as"
	    then
	       let (mn,mnp) = _1 in
	       let (id,idp) = _3 in
	       [mn, id], union_pos mnp idp
	    else raise Parsing.Parse_error
      )}
| _1 = module_list _2 = Comma _3 = module_name
    {      (  let (ml,mlp) = _1 in
	 let (mn,mnp) = _3 in
	 ml @ [mn, none], union_pos mlp mnp
      )}
| _1 = module_list _2 = Comma _3 = module_name _4 = Identifier _5 = Identifier
    {      (  let (s,_) = _4 in
	 if Symbol.to_string s = "as"
	    then
	       let (ml,mlp) = _1 in
	       let (mn,mnp) = _3 in
	       let (id,idp) = _5 in
	       ml @ [mn, id], union_pos mlp idp

	    else raise Parsing.Parse_error
      )}

module_name:
  _1 = Identifier
    {               ( let (s,p) = _1 in [s], p )}
| _1 = module_name _2 = Period _3 = Identifier
    {      (  let (mn,mnp) = _1 in
	 let (s,p) = _3 in
	 mn @ [s], union_pos mnp p
      )}

import_ident_list:
  _1 = Identifier
    {              ( let (id,idp) = _1 in [[id], none], idp )}
| _1 = Identifier _2 = Identifier _3 = Identifier
    {      (  let (s,_) = _2 in
	 if Symbol.to_string s = "as"
	    then
	       let (id1,idp1) = _1 in
	       let (id2,idp2) = _3 in
	       [[id1], id2], union_pos idp1 idp2
	    else raise Parsing.Parse_error
      )}
| _1 = import_ident_list _2 = Comma _3 = Identifier
    {      (  let (il,ilp) = _1 in
	 let (id,idp) = _3 in
	 il @ [[id], none], union_pos ilp idp
      )}
| _1 = import_ident_list _2 = Comma _3 = Identifier _4 = Identifier _5 = Identifier
    {      (  let (s,_) = _4 in
	 if Symbol.to_string s = "as"
	    then
	       let (il,ilp) = _1 in
	       let (id1,idp1) = _3 in
	       let (id2,idp2) = _5 in
	       il @ [[id1], id2], union_pos ilp idp2
	    else raise Parsing.Parse_error
      )}

global_stmt:
  _1 = Global _2 = identifier_list
    {      ( let (il,ilp) = _2 in GlobalStmt (il, union_pos _1 ilp) )}

identifier_list:
  _1 = Identifier
    {                 ( let (id,idp) = _1 in [id], idp )}
| _1 = identifier_list _2 = Comma _3 = Identifier
    {      (  let (il,ilp) = _1 in
	 let (id,idp) = _3 in
	 il @ [id], union_pos ilp idp
      )}

compound_stmt:
  _1 = if_stmt
    {           ( _1 )}
| _1 = while_stmt
    {              ( _1 )}
| _1 = for_stmt
    {            ( _1 )}
| _1 = try_stmt
    {            ( _1 )}
| _1 = funcdef
    {           ( _1 )}
| _1 = classdef
    {            ( _1 )}

suite:
  _1 = stmt_list _2 = Newline
    {                         ( _1 )}
| _1 = Newline _2 = Indent _3 = statement_plus _4 = Dedent
    {                                         ( _3 )}

statement_plus:
  _1 = statement
    {               ( [_1], pos_of_stmt _1 )}
| _1 = statement_plus _2 = statement
    {      (  let (stp,stpp) = _1 in
	 stp @ [_2], union_pos stpp (pos_of_stmt _2)
      )}

statement:
  _1 = stmt_list _2 = Newline
    {                      ( let (sl,slp) = _1 in StmtList (sl, slp) )}
| _1 = compound_stmt
    {                  ( _1                                      )}

stmt_list:
  _1 = stmt_list_without_semicolon
    {                                 ( _1 )}
| _1 = stmt_list_without_semicolon _2 = Semicolon
    {      ( let (sl,slp) = _1 in sl, union_pos slp _2 )}

stmt_list_without_semicolon:
  _1 = simple_stmt
    {                ( [_1], pos_of_stmt _1 )}
| _1 = stmt_list_without_semicolon _2 = Semicolon _3 = simple_stmt
    {      ( let (sl,slp) = _1 in _3 :: sl, union_pos slp (pos_of_stmt _3) )}

if_stmt:
  _1 = If _2 = expression _3 = Colon _4 = suite
    {      ( let (s,sp) = _4 in IfStmt (_2, s, [], union_pos _1 sp) )}
| _1 = If _2 = expression _3 = Colon _4 = suite _5 = elif_list
    {      (  let (s,sp) = _4 in
	 let (el,elp) = _5 in
	 IfStmt (_2, s, el, union_pos _1 elp)
      )}

elif_list:
  _1 = Else _2 = Colon _3 = suite
    {                     ( let (s,sp) = _3 in s, union_pos _1 sp )}
| _1 = Elif _2 = expression _3 = Colon _4 = suite
    {      (  let (s,sp) = _4 in
	 let pos = union_pos _1 sp in
	 [IfStmt (_2, s, [], pos)], pos
      )}
| _1 = Elif _2 = expression _3 = Colon _4 = suite _5 = elif_list
    {      (  let (s,sp) = _4 in
	 let (el,elp) = _5 in
	 let pos = union_pos _1 elp in
	 [IfStmt (_2, s, el, pos)], pos
      )}

while_stmt:
  _1 = While _2 = expression _3 = Colon _4 = suite
    {      ( let (s,sp) = _4 in WhileStmt (_2, s, [], sp) )}
| _1 = While _2 = expression _3 = Colon _4 = suite _5 = Else _6 = Colon _7 = suite
    {      (  let (s1,sp1) = _4 in
	 let (s2,sp2) = _7 in
	 WhileStmt (_2, s1, s2, union_pos _1 sp2)
      )}

for_stmt:
  _1 = For _2 = target_list _3 = In _4 = expr_list _5 = Colon _6 = suite
    {      (  let (tl,tlp) = _2 in
	 let (el,elp) = _4 in
	 let (s,sp) = _6 in
	 ForStmt (tl, el, s, [], union_pos _1 sp)
      )}
| _1 = For _2 = target_list _3 = In _4 = expr_list _5 = Colon _6 = suite _7 = Else _8 = Colon _9 = suite
    {      (  let (tl,tlp) = _2 in
	 let (el,elp) = _4 in
	 let (s1,sp1) = _6 in
	 let (s2,sp2) = _9 in
	 ForStmt (tl, el, s1, s2, union_pos _1 sp2)
      )}

try_stmt:
  _1 = try_exc_stmt
    {                 ( _1 )}
| _1 = try_fin_stmt
    {                 ( _1 )}

try_exc_stmt:
  _1 = Try _2 = Colon _3 = suite _4 = exc_list
    {      (  let (s,sp) = _3 in
	 let (el,elp) = _4 in
	 TryStmt (s, el, [], union_pos _1 elp)
      )}
| _1 = Try _2 = Colon _3 = suite _4 = exc_list _5 = Else _6 = Colon _7 = suite
    {      (  let (s1,sp1) = _3 in
	 let (el,elp) = _4 in
	 let (s2,sp2) = _7 in
	 TryStmt (s1, el, s2, union_pos _1 sp2)
      )}

exc_list:
  _1 = exc_item
    {             ( let a, b, c, d = _1 in [a, b, c], d )}
| _1 = exc_list _2 = exc_item
    {      (  let (el,elp) = _1 in
	 let (a,b,c,d) = _2 in
	 el @ [a, b, c], union_pos elp d
      )}

exc_item:
  _1 = Except _2 = Colon _3 = suite
    {      ( let (s,sp) = _3 in none_expr, none_expr, s, union_pos _1 sp )}
| _1 = Except _2 = expression _3 = Colon _4 = suite
    {      ( let (s,sp) = _4 in _2, none_expr, s, union_pos _1 sp )}
| _1 = Except _2 = expression _3 = Comma _4 = primary _5 = Colon _6 = suite
    {      ( let (s,sp) = _6 in _2, _4, s, union_pos _1 sp )}

try_fin_stmt:
  _1 = Try _2 = Colon _3 = suite _4 = Finally _5 = Colon _6 = suite
    {      (  let (s1,sp1) = _3 in
	 let (s2,sp2) = _6 in
	 TryStmt (s1, [], s2, union_pos _1 sp2)
      )}

funcdef:
  _1 = Def _2 = Identifier _3 = Leftparen _4 = Rightparen _5 = Colon _6 = suite
    {      (  let (id,idp) = _2 in
	 let (s,sp) = _6 in
	 FuncDef (id, [], s, union_pos _1 sp)
      )}
| _1 = Def _2 = Identifier _3 = Leftparen _4 = parameter_list _5 = Rightparen _6 = Colon _7 = suite
    {      (  let (id,idp) = _2 in
	 let (pl,plp) = _4 in
	 let (s,sp) = _7 in
	 FuncDef (id, pl, s, union_pos _1 sp)
      )}

parameter_list:
  _1 = defparams _2 = optional_comma
    {                             ( _1 )}
| _1 = defparams _2 = Comma _3 = Star _4 = Identifier
    {      (  let (dp,dpp) = _1 in
	 let (id,idp) = _4 in
	 dp @ [ExtraPosParam (id, idp)], union_pos dpp idp
      )}
| _1 = defparams _2 = Comma _3 = StarStar _4 = Identifier
    {      (  let (dp,dpp) = _1 in
	 let (id,idp) = _4 in
	 dp @ [ExtraKwParam (id, idp)], union_pos dpp idp
      )}
| _1 = Star _2 = Identifier
    {      ( let (id,idp) = _2 in [ExtraPosParam (id, idp)], union_pos _1 idp )}
| _1 = StarStar _2 = Identifier
    {      ( let (id,idp) = _2 in [ExtraKwParam (id, idp)], union_pos _1 idp )}
| _1 = Star _2 = Identifier _3 = Comma _4 = StarStar _5 = Identifier
    {      (  let (id1,idp1) = _2 in
	 let (id2,idp2) = _5 in
	 [ExtraPosParam (id1, idp1); ExtraPosParam (id2, idp2)],
	    union_pos _1 idp2
      )}
| _1 = defparams _2 = Comma _3 = Star _4 = Identifier _5 = Comma _6 = StarStar _7 = Identifier
    {      (  let (dp,dpp) = _1 in
	 let (id1,idp1) = _4 in
	 let (id2,idp2) = _7 in
	 dp @ [ExtraPosParam (id1, idp1); ExtraKwParam (id2, idp2)],
	    union_pos dpp idp2
      )}

defparams:
  _1 = defparam
    {              ( [_1], pos_of_param _1 )}
| _1 = defparams _2 = Comma _3 = defparam
    {      ( let (pl,plp) = _1 in pl @ [_3], union_pos plp (pos_of_param _3) )}

defparam:
  _1 = parameter
    {               ( _1 )}
| _1 = parameter _2 = Equal _3 = expression
    {      (  DefParam (_1, _3, union_pos (pos_of_param _1) (pos_of_expr _3)) )}

parameter:
  _1 = Identifier
    {                ( let (id,idp) = _1 in IdParam (id, idp) )}
| _1 = Leftparen _2 = sublist _3 = Rightparen
    {      ( let (sl,slp) = _2 in SublistParam (sl, union_pos _1 _3) )}

sublist:
  _1 = sublist_without_comma
    {                         ( _1 )}
| _1 = sublist_without_comma _2 = Comma
    {                               ( _1 )}

sublist_without_comma:
  _1 = parameter
    {                 ( [_1], pos_of_param _1 )}
| _1 = sublist_without_comma _2 = Comma _3 = parameter
    {      ( let (sl,slp) = _1 in sl @ [_3], union_pos slp (pos_of_param _3) )}

classdef:
  _1 = Class _2 = Identifier _3 = Colon _4 = suite
    {      (  let (id,idp) = _2 in
	 let (s,sp) = _4 in
	 ClassDef (id, [], s, union_pos _1 sp)
      )}
| _1 = Class _2 = Identifier _3 = inheritance _4 = Colon _5 = suite
    {      (  let (id,idp) = _2 in
	 let (s,sp) = _5 in
	 ClassDef (id, _3, s, union_pos _1 sp)
      )}

inheritance:
  _1 = Leftparen _2 = Rightparen
    {                          ( []     )}
| _1 = Leftparen _2 = expr_list _3 = Rightparen
    {                                  ( fst _2 )}

file_input:
  _1 = file_input_list
    {                     ( List.rev _1 )}

file_input_list:
  _1 = Newline
    {             ( []        )}
| _1 = statement
    {               ( [_1]      )}
| _1 = file_input_list _2 = Newline
    {                           ( _1        )}
| _1 = file_input_list _2 = statement
    {                             ( _2 :: _1  )}

%%
