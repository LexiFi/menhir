File "metaocaml.mly", line 303, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "metaocaml.mly", line 349, characters 7-23:
Warning: the token QUESTIONQUESTION is unused.
Grammar has 144 nonterminal symbols, among which 4 start symbols.
Grammar has 122 terminal symbols.
Grammar has 524 productions.
nullable(with_constraints) = false
nullable(with_constraint) = false
nullable(virtual_method) = false
nullable(virtual_flag) = true
nullable(value_type) = false
nullable(value) = false
nullable(val_longident) = false
nullable(val_ident_colon) = false
nullable(val_ident) = false
nullable(use_file_tail) = false
nullable(use_file) = false
nullable(typevar_list) = false
nullable(type_variance) = true
nullable(type_parameters) = true
nullable(type_parameter_list) = false
nullable(type_parameter) = false
nullable(type_longident) = false
nullable(type_kind) = true
nullable(type_declarations) = false
nullable(type_declaration) = false
nullable(type_constraint) = false
nullable(toplevel_phrase) = false
nullable(toplevel_directive) = false
nullable(top_structure) = false
nullable(tag_field) = false
nullable(subtractive) = false
nullable(structure_tail) = true
nullable(structure_item) = false
nullable(structure) = true
nullable(strict_binding) = false
nullable(simple_pattern) = false
nullable(simple_labeled_expr_list) = false
nullable(simple_expr) = false
nullable(simple_core_type_or_tuple) = false
nullable(simple_core_type2) = false
nullable(simple_core_type) = false
nullable(signed_constant) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(seq_expr) = false
nullable(row_field_list) = false
nullable(row_field) = false
nullable(record_expr_icc) = false
nullable(record_expr_gcc) = false
nullable(record_expr_f90) = false
nullable(record_expr) = false
nullable(rec_flag) = true
nullable(private_flag) = true
nullable(primitive_declaration) = false
nullable(poly_type) = false
nullable(pattern_var) = false
nullable(pattern_semi_list) = false
nullable(pattern_comma_list) = false
nullable(pattern) = false
nullable(parent_binder) = true
nullable(opt_semi) = true
nullable(opt_present) = true
nullable(opt_default) = true
nullable(opt_bar) = true
nullable(opt_ampersand) = true
nullable(operator) = false
nullable(name_tag_list) = false
nullable(name_tag) = false
nullable(mutable_flag) = true
nullable(mty_longident) = false
nullable(module_type) = false
nullable(module_rec_declarations) = false
nullable(module_rec_declaration) = false
nullable(module_rec_bindings) = false
nullable(module_rec_binding) = false
nullable(module_expr) = false
nullable(module_declaration) = false
nullable(module_binding) = false
nullable(mod_longident) = false
nullable(mod_ext_longident) = false
nullable(method_type) = false
nullable(meth_list) = false
nullable(match_cases) = false
nullable(match_action) = false
nullable(let_pattern) = false
nullable(let_bindings) = false
nullable(let_binding) = false
nullable(lbl_pattern_list) = false
nullable(lbl_expr_list) = false
nullable(labeled_simple_pattern) = false
nullable(labeled_simple_expr) = false
nullable(label_var) = false
nullable(label_longident) = false
nullable(label_let_pattern) = false
nullable(label_ident) = false
nullable(label_expr) = false
nullable(label_declarations) = false
nullable(label_declaration) = false
nullable(label) = false
nullable(interface) = false
nullable(implementation) = false
nullable(ident) = false
nullable(fun_def) = false
nullable(fun_binding) = false
nullable(field_expr_list) = false
nullable(field) = false
nullable(expr_semi_list) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(emod_longident) = false
nullable(edestr_longident) = false
nullable(econstr_longident) = false
nullable(direction_flag) = false
nullable(destr_longident) = false
nullable(core_type_list) = false
nullable(core_type_comma_list) = false
nullable(core_type2) = false
nullable(core_type) = false
nullable(constructor_declarations) = false
nullable(constructor_declaration) = false
nullable(constructor_arguments) = true
nullable(constraints) = true
nullable(constrain) = false
nullable(constr_longident) = false
nullable(constr_ident) = false
nullable(constant) = false
nullable(concrete_method) = false
nullable(clty_longident) = false
nullable(class_type_parameters) = true
nullable(class_type_declarations) = false
nullable(class_type_declaration) = false
nullable(class_type) = false
nullable(class_structure) = true
nullable(class_simple_expr) = false
nullable(class_signature) = false
nullable(class_sig_fields) = true
nullable(class_sig_body) = true
nullable(class_self_type) = true
nullable(class_self_pattern) = true
nullable(class_longident) = false
nullable(class_fun_def) = false
nullable(class_fun_binding) = false
nullable(class_fields) = true
nullable(class_expr) = false
nullable(class_descriptions) = false
nullable(class_description) = false
nullable(class_declarations) = false
nullable(class_declaration) = false
nullable(amper_type_list) = false
first(with_constraints) = TYPE MODULE
first(with_constraint) = TYPE MODULE
first(virtual_method) = METHOD
first(virtual_flag) = VIRTUAL
first(value_type) = MUTABLE LIDENT
first(value) = MUTABLE LIDENT
first(val_longident) = UIDENT LPAREN LIDENT
first(val_ident_colon) = LPAREN LIDENT LABEL
first(val_ident) = LPAREN LIDENT
first(use_file_tail) = TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(use_file) = WHILE UIDENTI UIDENT TYPE TRY TRUE STRING SHARP SEMISEMI PREFIXOP OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EUIDENTI EUIDENT EOF DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CLASS CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(typevar_list) = QUOTE
first(type_variance) = PLUS MINUS
first(type_parameters) = QUOTE PLUS MINUS LPAREN
first(type_parameter_list) = QUOTE PLUS MINUS
first(type_parameter) = QUOTE PLUS MINUS
first(type_longident) = UIDENT LIDENT
first(type_kind) = EQUAL
first(type_declarations) = QUOTE PLUS MINUS LPAREN LIDENT
first(type_declaration) = QUOTE PLUS MINUS LPAREN LIDENT
first(type_constraint) = COLONGREATER COLON
first(toplevel_phrase) = WHILE UIDENTI UIDENT TYPE TRY TRUE STRING SHARP PREFIXOP OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EUIDENTI EUIDENT EOF DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CLASS CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(toplevel_directive) = SHARP
first(top_structure) = TYPE OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION CLASS
first(tag_field) = BACKQUOTE
first(subtractive) = MINUSDOT MINUS
first(structure_tail) = TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION CLASS
first(structure_item) = TYPE OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION CLASS
first(structure) = WHILE UIDENTI UIDENT TYPE TRY TRUE STRING SEMISEMI PREFIXOP OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CLASS CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(strict_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL CHAR BACKQUOTE
first(simple_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(simple_labeled_expr_list) = UIDENT TRUE TILDE STRING QUESTION PREFIXOP OPTLABEL NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
first(simple_expr) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
first(simple_core_type_or_tuple) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type2) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(simple_core_type) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(signed_constant) = STRING NATIVEINT MINUS INT64 INT32 INT FLOAT CHAR
first(signature_item) = VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION CLASS
first(signature) = VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION CLASS
first(seq_expr) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(row_field_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(row_field) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET BACKQUOTE
first(record_expr_icc) = UIDENT RUN_ICC LIDENT
first(record_expr_gcc) = UIDENT RUN_GCC LIDENT
first(record_expr_f90) = UIDENT RUN_F90 LIDENT
first(record_expr) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
first(rec_flag) = REC
first(private_flag) = PRIVATE
first(primitive_declaration) = STRING
first(poly_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(pattern_var) = LIDENT
first(pattern_semi_list) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(pattern_comma_list) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(pattern) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(parent_binder) = AS
first(opt_semi) = SEMI
first(opt_present) = LBRACKETGREATER
first(opt_default) = EQUAL
first(opt_bar) = BAR
first(opt_ampersand) = AMPERSAND
first(operator) = STAR PREFIXOP PLUS OR MINUSDOT MINUS LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL BARBAR AMPERSAND AMPERAMPER
first(name_tag_list) = BACKQUOTE
first(name_tag) = BACKQUOTE
first(mutable_flag) = MUTABLE
first(mty_longident) = UIDENT LIDENT
first(module_type) = UIDENT SIG LPAREN LIDENT FUNCTOR
first(module_rec_declarations) = UIDENT
first(module_rec_declaration) = UIDENT
first(module_rec_bindings) = UIDENT
first(module_rec_binding) = UIDENT
first(module_expr) = UIDENT STRUCT LPAREN FUNCTOR
first(module_declaration) = LPAREN COLON
first(module_binding) = LPAREN EQUAL COLON
first(mod_longident) = UIDENT
first(mod_ext_longident) = UIDENT
first(method_type) = METHOD
first(meth_list) = LIDENT DOTDOT
first(match_cases) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(match_action) = WHEN MINUSGREATER
first(let_pattern) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(let_bindings) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(let_binding) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(lbl_pattern_list) = UIDENT LIDENT
first(lbl_expr_list) = UIDENT LIDENT
first(labeled_simple_pattern) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(labeled_simple_expr) = UIDENT TRUE TILDE STRING QUESTION PREFIXOP OPTLABEL NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
first(label_var) = LIDENT
first(label_longident) = UIDENT LIDENT
first(label_let_pattern) = LIDENT
first(label_ident) = LIDENT
first(label_expr) = TILDE QUESTION OPTLABEL LABEL
first(label_declarations) = MUTABLE LIDENT
first(label_declaration) = MUTABLE LIDENT
first(label) = LIDENT
first(interface) = VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
first(implementation) = WHILE UIDENTI UIDENT TYPE TRY TRUE STRING SEMISEMI PREFIXOP OPEN OBJECT NEW NATIVEINT MODULE MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT INCLUDE IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EUIDENTI EUIDENT EOF DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CLASS CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(ident) = UIDENT LIDENT
first(fun_def) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
first(field_expr_list) = LIDENT
first(field) = LIDENT
first(expr_semi_list) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(expr_comma_list) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(expr) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
first(emod_longident) = UIDENT EUIDENT
first(edestr_longident) = UIDENT EUIDENTI
first(econstr_longident) = UIDENT EUIDENT
first(direction_flag) = TO DOWNTO
first(destr_longident) = UIDENTI UIDENT
first(core_type_list) = UNDERSCORE UIDENT SHARP QUOTE LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type_comma_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type2) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(core_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(constructor_declarations) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(constructor_declaration) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(constructor_arguments) = OF
first(constraints) = CONSTRAINT
first(constrain) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(constr_longident) = UIDENT TRUE LPAREN LBRACKET FALSE
first(constr_ident) = UIDENT TRUE LPAREN FALSE COLONCOLON
first(constant) = STRING NATIVEINT INT64 INT32 INT FLOAT CHAR
first(concrete_method) = METHOD
first(clty_longident) = UIDENT LIDENT
first(class_type_parameters) = LBRACKET
first(class_type_declarations) = VIRTUAL LIDENT LBRACKET
first(class_type_declaration) = VIRTUAL LIDENT LBRACKET
first(class_type) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL OBJECT LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
first(class_structure) = VAL METHOD LPAREN INITIALIZER INHERIT CONSTRAINT
first(class_simple_expr) = UIDENT OBJECT LPAREN LIDENT LBRACKET
first(class_signature) = UIDENT OBJECT LIDENT LBRACKET
first(class_sig_fields) = VAL METHOD INHERIT CONSTRAINT
first(class_sig_body) = VAL METHOD LPAREN INHERIT CONSTRAINT
first(class_self_type) = LPAREN
first(class_self_pattern) = LPAREN
first(class_longident) = UIDENT LIDENT
first(class_fun_def) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
first(class_fun_binding) = UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLON CHAR BACKQUOTE
first(class_fields) = VAL METHOD INITIALIZER INHERIT CONSTRAINT
first(class_expr) = UIDENT OBJECT LPAREN LIDENT LET LBRACKET FUN
first(class_descriptions) = VIRTUAL LIDENT LBRACKET
first(class_description) = VIRTUAL LIDENT LBRACKET
first(class_declarations) = VIRTUAL LIDENT LBRACKET
first(class_declaration) = VIRTUAL LIDENT LBRACKET
first(amper_type_list) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
minimal(with_constraints) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(with_constraint) = (* 4 *) TYPE LIDENT EQUAL UNDERSCORE
minimal(virtual_method) = (* 5 *) METHOD VIRTUAL LIDENT COLON UNDERSCORE
minimal(virtual_flag) = (* 0 *)
minimal(value_type) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(value) = (* 3 *) LIDENT EQUAL LIDENT
minimal(val_longident) = (* 1 *) LIDENT
minimal(val_ident_colon) = (* 1 *) LABEL
minimal(val_ident) = (* 1 *) LIDENT
minimal(use_file_tail) = (* 1 *) EOF
minimal(use_file) = (* 1 *) EOF
minimal(typevar_list) = (* 2 *) QUOTE UIDENT
minimal(type_variance) = (* 0 *)
minimal(type_parameters) = (* 0 *)
minimal(type_parameter_list) = (* 2 *) QUOTE UIDENT
minimal(type_parameter) = (* 2 *) QUOTE UIDENT
minimal(type_longident) = (* 1 *) LIDENT
minimal(type_kind) = (* 0 *)
minimal(type_declarations) = (* 1 *) LIDENT
minimal(type_declaration) = (* 1 *) LIDENT
minimal(type_constraint) = (* 2 *) COLON UNDERSCORE
minimal(toplevel_phrase) = (* 1 *) EOF
minimal(toplevel_directive) = (* 2 *) SHARP UIDENT
minimal(top_structure) = (* 2 *) TYPE LIDENT
minimal(tag_field) = (* 2 *) BACKQUOTE UIDENT
minimal(subtractive) = (* 1 *) MINUS
minimal(structure_tail) = (* 0 *)
minimal(structure_item) = (* 2 *) TYPE LIDENT
minimal(structure) = (* 0 *)
minimal(strict_binding) = (* 2 *) EQUAL LIDENT
minimal(simple_pattern) = (* 1 *) LIDENT
minimal(simple_labeled_expr_list) = (* 1 *) LIDENT
minimal(simple_expr) = (* 1 *) LIDENT
minimal(simple_core_type_or_tuple) = (* 1 *) UNDERSCORE
minimal(simple_core_type2) = (* 1 *) UNDERSCORE
minimal(simple_core_type) = (* 1 *) UNDERSCORE
minimal(signed_constant) = (* 1 *) INT
minimal(signature_item) = (* 2 *) TYPE LIDENT
minimal(signature) = (* 0 *)
minimal(seq_expr) = (* 1 *) LIDENT
minimal(row_field_list) = (* 1 *) UNDERSCORE
minimal(row_field) = (* 1 *) UNDERSCORE
minimal(record_expr_icc) = (* 1 *) RUN_ICC
minimal(record_expr_gcc) = (* 1 *) RUN_GCC
minimal(record_expr_f90) = (* 1 *) RUN_F90
minimal(record_expr) = (* 3 *) LIDENT EQUAL LIDENT
minimal(rec_flag) = (* 0 *)
minimal(private_flag) = (* 0 *)
minimal(primitive_declaration) = (* 1 *) STRING
minimal(poly_type) = (* 1 *) UNDERSCORE
minimal(pattern_var) = (* 1 *) LIDENT
minimal(pattern_semi_list) = (* 1 *) LIDENT
minimal(pattern_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(pattern) = (* 1 *) LIDENT
minimal(parent_binder) = (* 0 *)
minimal(opt_semi) = (* 0 *)
minimal(opt_present) = (* 0 *)
minimal(opt_default) = (* 0 *)
minimal(opt_bar) = (* 0 *)
minimal(opt_ampersand) = (* 0 *)
minimal(operator) = (* 1 *) PREFIXOP
minimal(name_tag_list) = (* 2 *) BACKQUOTE UIDENT
minimal(name_tag) = (* 2 *) BACKQUOTE UIDENT
minimal(mutable_flag) = (* 0 *)
minimal(mty_longident) = (* 1 *) UIDENT
minimal(module_type) = (* 1 *) UIDENT
minimal(module_rec_declarations) = (* 3 *) UIDENT COLON UIDENT
minimal(module_rec_declaration) = (* 3 *) UIDENT COLON UIDENT
minimal(module_rec_bindings) = (* 5 *) UIDENT COLON UIDENT EQUAL UIDENT
minimal(module_rec_binding) = (* 5 *) UIDENT COLON UIDENT EQUAL UIDENT
minimal(module_expr) = (* 1 *) UIDENT
minimal(module_declaration) = (* 2 *) COLON UIDENT
minimal(module_binding) = (* 2 *) EQUAL UIDENT
minimal(mod_longident) = (* 1 *) UIDENT
minimal(mod_ext_longident) = (* 1 *) UIDENT
minimal(method_type) = (* 4 *) METHOD LIDENT COLON UNDERSCORE
minimal(meth_list) = (* 1 *) DOTDOT
minimal(match_cases) = (* 3 *) LIDENT MINUSGREATER LIDENT
minimal(match_action) = (* 2 *) MINUSGREATER LIDENT
minimal(let_pattern) = (* 1 *) LIDENT
minimal(let_bindings) = (* 3 *) LIDENT EQUAL LIDENT
minimal(let_binding) = (* 3 *) LIDENT EQUAL LIDENT
minimal(lbl_pattern_list) = (* 3 *) LIDENT EQUAL LIDENT
minimal(lbl_expr_list) = (* 3 *) LIDENT EQUAL LIDENT
minimal(labeled_simple_pattern) = (* 1 *) LIDENT
minimal(labeled_simple_expr) = (* 1 *) LIDENT
minimal(label_var) = (* 1 *) LIDENT
minimal(label_longident) = (* 1 *) LIDENT
minimal(label_let_pattern) = (* 1 *) LIDENT
minimal(label_ident) = (* 1 *) LIDENT
minimal(label_expr) = (* 2 *) LABEL LIDENT
minimal(label_declarations) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label_declaration) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(label) = (* 1 *) LIDENT
minimal(interface) = (* 1 *) EOF
minimal(implementation) = (* 1 *) EOF
minimal(ident) = (* 1 *) UIDENT
minimal(fun_def) = (* 2 *) MINUSGREATER LIDENT
minimal(fun_binding) = (* 2 *) EQUAL LIDENT
minimal(field_expr_list) = (* 3 *) LIDENT EQUAL LIDENT
minimal(field) = (* 3 *) LIDENT COLON UNDERSCORE
minimal(expr_semi_list) = (* 1 *) LIDENT
minimal(expr_comma_list) = (* 3 *) LIDENT COMMA LIDENT
minimal(expr) = (* 1 *) LIDENT
minimal(emod_longident) = (* 1 *) EUIDENT
minimal(edestr_longident) = (* 1 *) EUIDENTI
minimal(econstr_longident) = (* 1 *) EUIDENT
minimal(direction_flag) = (* 1 *) TO
minimal(destr_longident) = (* 1 *) UIDENTI
minimal(core_type_list) = (* 1 *) UNDERSCORE
minimal(core_type_comma_list) = (* 1 *) UNDERSCORE
minimal(core_type2) = (* 1 *) UNDERSCORE
minimal(core_type) = (* 1 *) UNDERSCORE
minimal(constructor_declarations) = (* 1 *) UIDENT
minimal(constructor_declaration) = (* 1 *) UIDENT
minimal(constructor_arguments) = (* 0 *)
minimal(constraints) = (* 0 *)
minimal(constrain) = (* 3 *) UNDERSCORE EQUAL UNDERSCORE
minimal(constr_longident) = (* 1 *) UIDENT
minimal(constr_ident) = (* 1 *) UIDENT
minimal(constant) = (* 1 *) INT
minimal(concrete_method) = (* 4 *) METHOD LIDENT EQUAL LIDENT
minimal(clty_longident) = (* 1 *) LIDENT
minimal(class_type_parameters) = (* 0 *)
minimal(class_type_declarations) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_type_declaration) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_type) = (* 1 *) LIDENT
minimal(class_structure) = (* 0 *)
minimal(class_simple_expr) = (* 1 *) LIDENT
minimal(class_signature) = (* 1 *) LIDENT
minimal(class_sig_fields) = (* 0 *)
minimal(class_sig_body) = (* 0 *)
minimal(class_self_type) = (* 0 *)
minimal(class_self_pattern) = (* 0 *)
minimal(class_longident) = (* 1 *) LIDENT
minimal(class_fun_def) = (* 3 *) LIDENT MINUSGREATER LIDENT
minimal(class_fun_binding) = (* 2 *) EQUAL LIDENT
minimal(class_fields) = (* 0 *)
minimal(class_expr) = (* 1 *) LIDENT
minimal(class_descriptions) = (* 3 *) LIDENT COLON LIDENT
minimal(class_description) = (* 3 *) LIDENT COLON LIDENT
minimal(class_declarations) = (* 3 *) LIDENT EQUAL LIDENT
minimal(class_declaration) = (* 3 *) LIDENT EQUAL LIDENT
minimal(amper_type_list) = (* 1 *) UNDERSCORE
follow(with_constraints) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(with_constraint) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(virtual_method) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(virtual_flag) = LIDENT LBRACKET
follow(value_type) = error VAL METHOD INHERIT END CONSTRAINT
follow(value) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(val_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(val_ident_colon) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
follow(val_ident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(use_file_tail) = #
follow(use_file) = #
follow(typevar_list) = QUOTE DOT
follow(type_variance) = QUOTE
follow(type_parameters) = UIDENT LIDENT
follow(type_parameter_list) = RPAREN RBRACKET COMMA
follow(type_parameter) = UIDENT RPAREN RBRACKET LIDENT COMMA
follow(type_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TILDE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL OPEN NATIVEINT MODULE MINUSGREATER MINUS METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER COLONCOLON COLON CLASS CHAR BARRBRACKET BAR BACKQUOTE AS AND AMPERSAND
follow(type_kind) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(type_declarations) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_declaration) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(type_constraint) = RPAREN EQUAL
follow(toplevel_phrase) = #
follow(toplevel_directive) = TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
follow(top_structure) = SEMISEMI
follow(tag_field) = RBRACKET GREATER BAR
follow(subtractive) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
follow(structure_tail) = error EOF END
follow(structure_item) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(structure) = error EOF END
follow(strict_binding) = error VAL TYPE SHARP SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(simple_pattern) = error WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(simple_labeled_expr_list) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(simple_core_type_or_tuple) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type2) = error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(simple_core_type) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(signed_constant) = error WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP SEMI RPAREN RBRACKET RBRACE QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONCOLON COLON CHAR BARRBRACKET BAR BACKQUOTE AS
follow(signature_item) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(signature) = error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(seq_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(row_field_list) = RBRACKET GREATER BAR
follow(row_field) = RBRACKET GREATER BAR
follow(record_expr_icc) = error RBRACE
follow(record_expr_gcc) = error RBRACE
follow(record_expr_f90) = error RBRACE
follow(record_expr) = error RBRACE
follow(rec_flag) = UNDERSCORE UIDENT TRUE STRING SHARP NATIVEINT MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE CHAR BACKQUOTE
follow(private_flag) = UIDENT TRUE LPAREN LIDENT LBRACE LABEL FALSE COLONCOLON BAR
follow(primitive_declaration) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(poly_type) = error VAL SEMI RBRACE METHOD INITIALIZER INHERIT GREATER EQUAL END CONSTRAINT
follow(pattern_var) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(pattern_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(pattern_comma_list) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(pattern) = error WHEN SEMI RPAREN RBRACKET RBRACE MINUSGREATER EQUAL COMMA COLONCOLON COLON BARRBRACKET BAR AS
follow(parent_binder) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(opt_semi) = error RBRACKET RBRACE GREATERRBRACE GREATER BARRBRACKET
follow(opt_present) = error WITH VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(opt_default) = RPAREN
follow(opt_bar) = UNDERSCORE UIDENT TRUE STRING SHARP QUOTE NATIVEINT MINUS LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACE INT64 INT32 INT FLOAT FALSE COLONCOLON CHAR BACKQUOTE
follow(opt_ampersand) = UNDERSCORE UIDENT SHARP QUOTE QUESTION OPTLABEL LPAREN LIDENT LESS LBRACKETLESS LBRACKETGREATER LBRACKET
follow(operator) = RPAREN
follow(name_tag_list) = RBRACKET BACKQUOTE
follow(name_tag) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mutable_flag) = LIDENT
follow(mty_longident) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(module_type) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(module_rec_declarations) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_rec_declaration) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_rec_bindings) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_rec_binding) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(module_expr) = error TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE IN EXTERNAL EXCEPTION EOF END COLON CLASS AND
follow(module_declaration) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS
follow(module_binding) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS
follow(mod_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(mod_ext_longident) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DOT CLASS AND
follow(method_type) = error VAL METHOD INHERIT END CONSTRAINT
follow(meth_list) = GREATER
follow(match_cases) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(match_action) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(let_pattern) = RPAREN EQUAL
follow(let_bindings) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(let_binding) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE IN EXTERNAL EXCEPTION EOF END CLASS AND
follow(lbl_pattern_list) = error SEMI RBRACE
follow(lbl_expr_list) = error SEMI RBRACE
follow(labeled_simple_pattern) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(labeled_simple_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_var) = WHEN UNDERSCORE UIDENT TRUE TILDE STRING SHARP RPAREN QUESTION OPTLABEL NATIVEINT MINUSGREATER MINUS LPAREN LIDENT LBRACKETBAR LBRACKET LBRACE LABEL INT64 INT32 INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BACKQUOTE
follow(label_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_let_pattern) = RPAREN EQUAL
follow(label_ident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(label_declarations) = SEMI RBRACE
follow(label_declaration) = SEMI RBRACE
follow(label) = error WITH VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESSMINUS LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(interface) = #
follow(implementation) = #
follow(ident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN OF NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(fun_def) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(fun_binding) = error VAL TYPE SHARP SEMISEMI OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE IN EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS AND
follow(field_expr_list) = error SEMI GREATERRBRACE
follow(field) = SEMI GREATER
follow(expr_semi_list) = error SEMI RBRACKET BARRBRACKET
follow(expr_comma_list) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(expr) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(emod_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(edestr_longident) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
follow(econstr_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(direction_flag) = WHILE UIDENTI UIDENT TRY TRUE STRING PREFIXOP OBJECT NEW NATIVEINT MINUSDOT MINUS MATCH LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT64 INT32 INT IF FUNCTION FUN FOR FLOAT FALSE EUIDENTI EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE ASSERT
follow(destr_longident) = UIDENT TRUE STRING PREFIXOP NEW NATIVEINT LPAREN LIDENT LBRACKETBAR LBRACKET LBRACELESS LBRACE INT64 INT32 INT FLOAT FALSE EUIDENT DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CHAR BEGIN BANGLBRACE BACKQUOTE
follow(core_type_list) = error WITH VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type_comma_list) = RPAREN RBRACKET COMMA
follow(core_type2) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE MINUSGREATER METHOD LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND AMPERSAND
follow(core_type) = error WITH VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AND AMPERSAND
follow(constructor_declarations) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_declaration) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constructor_arguments) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constraints) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(constrain) = error WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(constr_longident) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUOTE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETLESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(constr_ident) = error VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT CLASS BAR AND
follow(constant) = error WITH WHEN VAL UNDERSCORE UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(concrete_method) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(clty_longident) = error VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_type_parameters) = LIDENT
follow(class_type_declarations) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type_declaration) = error VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_type) = error VAL TYPE SEMISEMI RPAREN OPEN MODULE INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CLASS AND
follow(class_structure) = error END
follow(class_simple_expr) = error VAL UIDENT TYPE TRUE TILDE STRING SHARP SEMISEMI RPAREN QUESTION PREFIXOP OPTLABEL OPEN NEW NATIVEINT MODULE METHOD LPAREN LIDENT LET LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EOF END DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG CONSTRAINT COLON CLASS CHAR BEGIN BANGLBRACE BACKQUOTE AS AND
follow(class_signature) = error VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
follow(class_sig_fields) = error VAL METHOD INHERIT END CONSTRAINT
follow(class_sig_body) = error END
follow(class_self_type) = error VAL METHOD INHERIT END CONSTRAINT
follow(class_self_pattern) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(class_longident) = error WITH VAL UIDENT TYPE TRUE TO TILDE THEN STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PLUS OR OPTLABEL OPEN NEW NATIVEINT MODULE MINUSGREATER MINUSDOT MINUS METHOD LPAREN LIDENT LET LESS LBRACKETGREATER LBRACKETBAR LBRACKET LBRACELESS LBRACE LABEL INT64 INT32 INT INITIALIZER INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACE GREATERDOT GREATER FLOAT FALSE EXTERNAL EXCEPTION EUIDENT EQUAL EOF END ELSE DOWNTO DOTTILDE DOTPOND DOTLESS DOTBANGF DOTBANGC DOTBANG DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR BANGLBRACE BACKQUOTE AS AND AMPERSAND AMPERAMPER
follow(class_fun_def) = error VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_fun_binding) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_fields) = error VAL METHOD INITIALIZER INHERIT END CONSTRAINT
follow(class_expr) = error VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INITIALIZER INHERIT INCLUDE EXTERNAL EXCEPTION EOF END CONSTRAINT COLON CLASS AS AND
follow(class_descriptions) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_description) = error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declarations) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(class_declaration) = error TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF END CLASS AND
follow(amper_type_list) = RBRACKET GREATER BAR AMPERSAND
Built an LR(0) automaton with 1089 states.
The grammar is not SLR(1) -- 100 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 1875 states.
1769 shift/reduce conflicts were silently solved.
File "metaocaml.mly", line 437, characters 0-9:
Warning: the precedence level assigned to EUIDENTI is never useful.
File "metaocaml.mly", line 402, characters 0-9:
Warning: the precedence level assigned to IN is never useful.
File "metaocaml.mly", line 437, characters 0-9:
Warning: the precedence level assigned to UIDENTI is never useful.
File "metaocaml.mly", line 1577, characters 25-34:
Warning: this %prec declaration is never useful.
Warning: 12 states have shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: 142 shift/reduce conflicts were arbitrarily resolved.
Warning: 6 reduce/reduce conflicts were arbitrarily resolved.
File "metaocaml.mly", line 1164, characters 5-27:
Warning: production record_expr_f90 -> lbl_expr_list opt_semi is never reduced.
File "metaocaml.mly", line 1146, characters 4-26:
Warning: production record_expr_gcc -> lbl_expr_list opt_semi is never reduced.
File "metaocaml.mly", line 1155, characters 4-26:
Warning: production record_expr_icc -> lbl_expr_list opt_semi is never reduced.
Warning: in total, 3 productions are never reduced.
633 out of 1875 states have a default reduction.
955 out of 1875 states are represented.
0 out of 272 symbols keep track of their start position.
0 out of 272 symbols keep track of their end position.
263 out of 528 productions exploit shiftreduce optimization.
463 out of 1875 states can peek at an error.
4427 functions before inlining, 1112 functions after inlining.
