State 0:
## Known stack suffix:
##
## LR(1) items:
implementation' -> . implementation [ # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 190
-- On implementation shift to state 192
## Reductions:

State 1:
## Known stack suffix:
## UIDENT
## LR(1) items:
upath -> UIDENT . [ UIDENT STAR SEMI RPAREN LPAREN LIDENT EOF DOT COMMA COLON ]
## Transitions:
## Reductions:
-- On UIDENT reduce production upath -> UIDENT
-- On STAR reduce production upath -> UIDENT
-- On SEMI reduce production upath -> UIDENT
-- On RPAREN reduce production upath -> UIDENT
-- On LPAREN reduce production upath -> UIDENT
-- On LIDENT reduce production upath -> UIDENT
-- On EOF reduce production upath -> UIDENT
-- On DOT reduce production upath -> UIDENT
-- On COMMA reduce production upath -> UIDENT
-- On COLON reduce production upath -> UIDENT

State 2:
## Known stack suffix:
## STRUCT
## LR(1) items:
modulexpr -> STRUCT . structure END [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On structure shift to state 3
## Reductions:
-- On VOID reduce production structure ->
-- On UIDENT reduce production structure ->
-- On TYPEDEF reduce production structure ->
-- On MODULE reduce production structure ->
-- On INT reduce production structure ->
-- On FLOAT reduce production structure ->
-- On END reduce production structure ->

State 3:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
modulexpr -> STRUCT structure . END [ SEMI RPAREN LPAREN EOF COLON ]
structure -> structure . structure_item [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On TYPEDEF shift to state 5
-- On MODULE shift to state 31
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On END shift to state 95
-- On upath shift to state 8
-- On term shift to state 96
-- On structure_item shift to state 97
-- On ctype shift to state 98
## Reductions:

State 4:
## Known stack suffix:
## VOID
## LR(1) items:
ctype -> VOID . [ UIDENT STAR RPAREN LPAREN LIDENT COMMA ]
## Transitions:
## Reductions:
-- On UIDENT reduce production ctype -> VOID
-- On STAR reduce production ctype -> VOID
-- On RPAREN reduce production ctype -> VOID
-- On LPAREN reduce production ctype -> VOID
-- On LIDENT reduce production ctype -> VOID
-- On COMMA reduce production ctype -> VOID

State 5:
## Known stack suffix:
## TYPEDEF
## LR(1) items:
structure_item -> TYPEDEF . typedef SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On typedef shift to state 11
-- On ctype shift to state 13
## Reductions:

State 6:
## Known stack suffix:
## INT
## LR(1) items:
ctype -> INT . [ UIDENT STAR RPAREN LPAREN LIDENT COMMA ]
## Transitions:
## Reductions:
-- On UIDENT reduce production ctype -> INT
-- On STAR reduce production ctype -> INT
-- On RPAREN reduce production ctype -> INT
-- On LPAREN reduce production ctype -> INT
-- On LIDENT reduce production ctype -> INT
-- On COMMA reduce production ctype -> INT

State 7:
## Known stack suffix:
## FLOAT
## LR(1) items:
ctype -> FLOAT . [ UIDENT STAR RPAREN LPAREN LIDENT COMMA ]
## Transitions:
## Reductions:
-- On UIDENT reduce production ctype -> FLOAT
-- On STAR reduce production ctype -> FLOAT
-- On RPAREN reduce production ctype -> FLOAT
-- On LPAREN reduce production ctype -> FLOAT
-- On LIDENT reduce production ctype -> FLOAT
-- On COMMA reduce production ctype -> FLOAT

State 8:
## Known stack suffix:
## upath
## LR(1) items:
ctype -> upath . [ UIDENT STAR RPAREN LPAREN LIDENT COMMA ]
upath -> upath . DOT UIDENT [ UIDENT STAR RPAREN LPAREN LIDENT DOT COMMA ]
## Transitions:
-- On DOT shift to state 9
## Reductions:
-- On UIDENT reduce production ctype -> upath
-- On STAR reduce production ctype -> upath
-- On RPAREN reduce production ctype -> upath
-- On LPAREN reduce production ctype -> upath
-- On LIDENT reduce production ctype -> upath
-- On COMMA reduce production ctype -> upath

State 9:
## Known stack suffix:
## upath DOT
## LR(1) items:
upath -> upath DOT . UIDENT [ UIDENT STAR SEMI RPAREN LPAREN LIDENT EOF DOT COMMA COLON ]
## Transitions:
-- On UIDENT shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## upath DOT UIDENT
## LR(1) items:
upath -> upath DOT UIDENT . [ UIDENT STAR SEMI RPAREN LPAREN LIDENT EOF DOT COMMA COLON ]
## Transitions:
## Reductions:
-- On UIDENT reduce production upath -> upath DOT UIDENT
-- On STAR reduce production upath -> upath DOT UIDENT
-- On SEMI reduce production upath -> upath DOT UIDENT
-- On RPAREN reduce production upath -> upath DOT UIDENT
-- On LPAREN reduce production upath -> upath DOT UIDENT
-- On LIDENT reduce production upath -> upath DOT UIDENT
-- On EOF reduce production upath -> upath DOT UIDENT
-- On DOT reduce production upath -> upath DOT UIDENT
-- On COMMA reduce production upath -> upath DOT UIDENT
-- On COLON reduce production upath -> upath DOT UIDENT

State 11:
## Known stack suffix:
## TYPEDEF typedef
## LR(1) items:
structure_item -> TYPEDEF typedef . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## TYPEDEF typedef SEMI
## LR(1) items:
structure_item -> TYPEDEF typedef SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production structure_item -> TYPEDEF typedef SEMI
-- On UIDENT reduce production structure_item -> TYPEDEF typedef SEMI
-- On TYPEDEF reduce production structure_item -> TYPEDEF typedef SEMI
-- On MODULE reduce production structure_item -> TYPEDEF typedef SEMI
-- On INT reduce production structure_item -> TYPEDEF typedef SEMI
-- On FLOAT reduce production structure_item -> TYPEDEF typedef SEMI
-- On END reduce production structure_item -> TYPEDEF typedef SEMI

State 13:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ UIDENT STAR LPAREN ]
typedef -> ctype . typedef_cont [ SEMI ]
## Transitions:
-- On UIDENT shift to state 14
-- On STAR shift to state 15
-- On LPAREN shift to state 16
-- On typedef_cont shift to state 30
## Reductions:

State 14:
## Known stack suffix:
## UIDENT
## LR(1) items:
typedef_cont -> UIDENT . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production typedef_cont -> UIDENT
-- On RPAREN reduce production typedef_cont -> UIDENT
-- On LPAREN reduce production typedef_cont -> UIDENT

State 15:
## Known stack suffix:
## ctype STAR
## LR(1) items:
ctype -> ctype STAR . [ UIDENT STAR LPAREN ]
typedef_cont -> STAR . typedef_cont [ SEMI LPAREN ]
## Transitions:
-- On UIDENT shift to state 14
-- On LPAREN shift to state 16
-- On typedef_cont shift to state 18
## Reductions:
-- On UIDENT reduce production ctype -> ctype STAR
-- On STAR reduce production ctype -> ctype STAR
** Conflict on UIDENT

State 16:
## Known stack suffix:
## LPAREN
## LR(1) items:
typedef_cont -> LPAREN . typedef_cont RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On UIDENT shift to state 14
-- On STAR shift to state 17
-- On LPAREN shift to state 16
-- On typedef_cont shift to state 28
## Reductions:

State 17:
## Known stack suffix:
## STAR
## LR(1) items:
typedef_cont -> STAR . typedef_cont [ SEMI RPAREN LPAREN ]
## Transitions:
-- On UIDENT shift to state 14
-- On STAR shift to state 17
-- On LPAREN shift to state 16
-- On typedef_cont shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## STAR typedef_cont
## LR(1) items:
typedef_cont -> STAR typedef_cont . [ SEMI RPAREN LPAREN ]
typedef_cont -> typedef_cont . LPAREN ty_params RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On LPAREN shift to state 19
## Reductions:
-- On SEMI reduce production typedef_cont -> STAR typedef_cont
-- On RPAREN reduce production typedef_cont -> STAR typedef_cont

State 19:
## Known stack suffix:
## typedef_cont LPAREN
## LR(1) items:
typedef_cont -> typedef_cont LPAREN . ty_params RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On ty_params shift to state 20
-- On ty_param shift to state 27
-- On ctype shift to state 24
## Reductions:

State 20:
## Known stack suffix:
## typedef_cont LPAREN ty_params
## LR(1) items:
ty_params -> ty_params . COMMA ty_param [ RPAREN COMMA ]
typedef_cont -> typedef_cont LPAREN ty_params . RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On RPAREN shift to state 21
-- On COMMA shift to state 22
## Reductions:

State 21:
## Known stack suffix:
## typedef_cont LPAREN ty_params RPAREN
## LR(1) items:
typedef_cont -> typedef_cont LPAREN ty_params RPAREN . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production typedef_cont -> typedef_cont LPAREN ty_params RPAREN
-- On RPAREN reduce production typedef_cont -> typedef_cont LPAREN ty_params RPAREN
-- On LPAREN reduce production typedef_cont -> typedef_cont LPAREN ty_params RPAREN

State 22:
## Known stack suffix:
## ty_params COMMA
## LR(1) items:
ty_params -> ty_params COMMA . ty_param [ RPAREN COMMA ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On ty_param shift to state 23
-- On ctype shift to state 24
## Reductions:

State 23:
## Known stack suffix:
## ty_params COMMA ty_param
## LR(1) items:
ty_params -> ty_params COMMA ty_param . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ty_params -> ty_params COMMA ty_param
-- On COMMA reduce production ty_params -> ty_params COMMA ty_param

State 24:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR RPAREN LIDENT COMMA ]
ty_param -> ctype . [ RPAREN COMMA ]
ty_param -> ctype . LIDENT [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 26
## Reductions:
-- On RPAREN reduce production ty_param -> ctype
-- On COMMA reduce production ty_param -> ctype

State 25:
## Known stack suffix:
## ctype STAR
## LR(1) items:
ctype -> ctype STAR . [ STAR RPAREN LIDENT COMMA ]
## Transitions:
## Reductions:
-- On STAR reduce production ctype -> ctype STAR
-- On RPAREN reduce production ctype -> ctype STAR
-- On LIDENT reduce production ctype -> ctype STAR
-- On COMMA reduce production ctype -> ctype STAR

State 26:
## Known stack suffix:
## ctype LIDENT
## LR(1) items:
ty_param -> ctype LIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ty_param -> ctype LIDENT
-- On COMMA reduce production ty_param -> ctype LIDENT

State 27:
## Known stack suffix:
## ty_param
## LR(1) items:
ty_params -> ty_param . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production ty_params -> ty_param
-- On COMMA reduce production ty_params -> ty_param

State 28:
## Known stack suffix:
## LPAREN typedef_cont
## LR(1) items:
typedef_cont -> LPAREN typedef_cont . RPAREN [ SEMI RPAREN LPAREN ]
typedef_cont -> typedef_cont . LPAREN ty_params RPAREN [ RPAREN LPAREN ]
## Transitions:
-- On RPAREN shift to state 29
-- On LPAREN shift to state 19
## Reductions:

State 29:
## Known stack suffix:
## LPAREN typedef_cont RPAREN
## LR(1) items:
typedef_cont -> LPAREN typedef_cont RPAREN . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production typedef_cont -> LPAREN typedef_cont RPAREN
-- On RPAREN reduce production typedef_cont -> LPAREN typedef_cont RPAREN
-- On LPAREN reduce production typedef_cont -> LPAREN typedef_cont RPAREN

State 30:
## Known stack suffix:
## ctype typedef_cont
## LR(1) items:
typedef -> ctype typedef_cont . [ SEMI ]
typedef_cont -> typedef_cont . LPAREN ty_params RPAREN [ SEMI LPAREN ]
## Transitions:
-- On LPAREN shift to state 19
## Reductions:
-- On SEMI reduce production typedef -> ctype typedef_cont

State 31:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT COLON moduletype EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
structure_item -> MODULE . UIDENT EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On UIDENT shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . COLON moduletype EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
structure_item -> MODULE UIDENT . EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On EQUAL shift to state 33
-- On COLON shift to state 90
## Reductions:

State 33:
## Known stack suffix:
## MODULE UIDENT EQUAL
## LR(1) items:
structure_item -> MODULE UIDENT EQUAL . modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 88
## Reductions:

State 34:
## Known stack suffix:
## LPAREN
## LR(1) items:
modulexpr -> LPAREN . modulexpr RPAREN [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 83
## Reductions:

State 35:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
modulexpr -> FUNCTOR . LPAREN UIDENT COLON moduletype RPAREN modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On LPAREN shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
modulexpr -> FUNCTOR LPAREN . UIDENT COLON moduletype RPAREN modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On UIDENT shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
modulexpr -> FUNCTOR LPAREN UIDENT . COLON moduletype RPAREN modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On COLON shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
modulexpr -> FUNCTOR LPAREN UIDENT COLON . moduletype RPAREN modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 77
## Reductions:

State 39:
## Known stack suffix:
## SIG
## LR(1) items:
moduletype -> SIG . signature END [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On signature shift to state 40
## Reductions:
-- On VOID reduce production signature ->
-- On UIDENT reduce production signature ->
-- On TYPEDEF reduce production signature ->
-- On MODULE reduce production signature ->
-- On INT reduce production signature ->
-- On FLOAT reduce production signature ->
-- On END reduce production signature ->

State 40:
## Known stack suffix:
## SIG signature
## LR(1) items:
moduletype -> SIG signature . END [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
signature -> signature . signature_item [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On TYPEDEF shift to state 41
-- On MODULE shift to state 46
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On END shift to state 61
-- On valuedecl shift to state 62
-- On upath shift to state 8
-- On signature_item shift to state 64
-- On ctype shift to state 65
## Reductions:

State 41:
## Known stack suffix:
## TYPEDEF
## LR(1) items:
signature_item -> TYPEDEF . typedef SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
signature_item -> TYPEDEF . UIDENT SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 42
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On typedef shift to state 44
-- On ctype shift to state 13
## Reductions:

State 42:
## Known stack suffix:
## TYPEDEF UIDENT
## LR(1) items:
signature_item -> TYPEDEF UIDENT . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
upath -> UIDENT . [ UIDENT STAR LPAREN DOT ]
## Transitions:
-- On SEMI shift to state 43
## Reductions:
-- On UIDENT reduce production upath -> UIDENT
-- On STAR reduce production upath -> UIDENT
-- On LPAREN reduce production upath -> UIDENT
-- On DOT reduce production upath -> UIDENT

State 43:
## Known stack suffix:
## TYPEDEF UIDENT SEMI
## LR(1) items:
signature_item -> TYPEDEF UIDENT SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On UIDENT reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On TYPEDEF reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On MODULE reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On INT reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On FLOAT reduce production signature_item -> TYPEDEF UIDENT SEMI
-- On END reduce production signature_item -> TYPEDEF UIDENT SEMI

State 44:
## Known stack suffix:
## TYPEDEF typedef
## LR(1) items:
signature_item -> TYPEDEF typedef . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## TYPEDEF typedef SEMI
## LR(1) items:
signature_item -> TYPEDEF typedef SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production signature_item -> TYPEDEF typedef SEMI
-- On UIDENT reduce production signature_item -> TYPEDEF typedef SEMI
-- On TYPEDEF reduce production signature_item -> TYPEDEF typedef SEMI
-- On MODULE reduce production signature_item -> TYPEDEF typedef SEMI
-- On INT reduce production signature_item -> TYPEDEF typedef SEMI
-- On FLOAT reduce production signature_item -> TYPEDEF typedef SEMI
-- On END reduce production signature_item -> TYPEDEF typedef SEMI

State 46:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT COLON moduletype SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On UIDENT shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . COLON moduletype SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On COLON shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## MODULE UIDENT COLON
## LR(1) items:
signature_item -> MODULE UIDENT COLON . moduletype SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 59
## Reductions:

State 49:
## Known stack suffix:
## LPAREN
## LR(1) items:
moduletype -> LPAREN . moduletype RPAREN [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 57
## Reductions:

State 50:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
moduletype -> FUNCTOR . LPAREN UIDENT COLON moduletype RPAREN moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On LPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
moduletype -> FUNCTOR LPAREN . UIDENT COLON moduletype RPAREN moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On UIDENT shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
moduletype -> FUNCTOR LPAREN UIDENT . COLON moduletype RPAREN moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On COLON shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
moduletype -> FUNCTOR LPAREN UIDENT COLON . moduletype RPAREN moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype
## LR(1) items:
moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype . RPAREN moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On RPAREN shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype RPAREN
## LR(1) items:
moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN . moduletype [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
## LR(1) items:
moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype . [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
-- On RPAREN reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
-- On LPAREN reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
-- On EQUAL reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
-- On EOF reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype
-- On COLON reduce production moduletype -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN moduletype

State 57:
## Known stack suffix:
## LPAREN moduletype
## LR(1) items:
moduletype -> LPAREN moduletype . RPAREN [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
-- On RPAREN shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## LPAREN moduletype RPAREN
## LR(1) items:
moduletype -> LPAREN moduletype RPAREN . [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production moduletype -> LPAREN moduletype RPAREN
-- On RPAREN reduce production moduletype -> LPAREN moduletype RPAREN
-- On LPAREN reduce production moduletype -> LPAREN moduletype RPAREN
-- On EQUAL reduce production moduletype -> LPAREN moduletype RPAREN
-- On EOF reduce production moduletype -> LPAREN moduletype RPAREN
-- On COLON reduce production moduletype -> LPAREN moduletype RPAREN

State 59:
## Known stack suffix:
## MODULE UIDENT COLON moduletype
## LR(1) items:
signature_item -> MODULE UIDENT COLON moduletype . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## MODULE UIDENT COLON moduletype SEMI
## LR(1) items:
signature_item -> MODULE UIDENT COLON moduletype SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On UIDENT reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On TYPEDEF reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On MODULE reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On INT reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On FLOAT reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI
-- On END reduce production signature_item -> MODULE UIDENT COLON moduletype SEMI

State 61:
## Known stack suffix:
## SIG signature END
## LR(1) items:
moduletype -> SIG signature END . [ SEMI RPAREN LPAREN EQUAL EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production moduletype -> SIG signature END
-- On RPAREN reduce production moduletype -> SIG signature END
-- On LPAREN reduce production moduletype -> SIG signature END
-- On EQUAL reduce production moduletype -> SIG signature END
-- On EOF reduce production moduletype -> SIG signature END
-- On COLON reduce production moduletype -> SIG signature END

State 62:
## Known stack suffix:
## valuedecl
## LR(1) items:
signature_item -> valuedecl . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## valuedecl SEMI
## LR(1) items:
signature_item -> valuedecl SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production signature_item -> valuedecl SEMI
-- On UIDENT reduce production signature_item -> valuedecl SEMI
-- On TYPEDEF reduce production signature_item -> valuedecl SEMI
-- On MODULE reduce production signature_item -> valuedecl SEMI
-- On INT reduce production signature_item -> valuedecl SEMI
-- On FLOAT reduce production signature_item -> valuedecl SEMI
-- On END reduce production signature_item -> valuedecl SEMI

State 64:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production signature -> signature signature_item
-- On UIDENT reduce production signature -> signature signature_item
-- On TYPEDEF reduce production signature -> signature signature_item
-- On MODULE reduce production signature -> signature signature_item
-- On INT reduce production signature -> signature signature_item
-- On FLOAT reduce production signature -> signature signature_item
-- On END reduce production signature -> signature signature_item

State 65:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LPAREN LIDENT ]
valuedecl -> ctype . valuedecl_cont [ SEMI ]
## Transitions:
-- On STAR shift to state 66
-- On LPAREN shift to state 67
-- On LIDENT shift to state 69
-- On valuedecl_cont shift to state 76
## Reductions:

State 66:
## Known stack suffix:
## ctype STAR
## LR(1) items:
ctype -> ctype STAR . [ STAR LPAREN LIDENT ]
valuedecl_cont -> STAR . valuedecl_cont [ SEMI LPAREN ]
## Transitions:
-- On LPAREN shift to state 67
-- On LIDENT shift to state 69
-- On valuedecl_cont shift to state 70
## Reductions:
-- On STAR reduce production ctype -> ctype STAR
-- On LIDENT reduce production ctype -> ctype STAR
** Conflict on LIDENT

State 67:
## Known stack suffix:
## LPAREN
## LR(1) items:
valuedecl_cont -> LPAREN . valuedecl_cont RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On STAR shift to state 68
-- On LPAREN shift to state 67
-- On LIDENT shift to state 69
-- On valuedecl_cont shift to state 74
## Reductions:

State 68:
## Known stack suffix:
## STAR
## LR(1) items:
valuedecl_cont -> STAR . valuedecl_cont [ SEMI RPAREN LPAREN ]
## Transitions:
-- On STAR shift to state 68
-- On LPAREN shift to state 67
-- On LIDENT shift to state 69
-- On valuedecl_cont shift to state 70
## Reductions:

State 69:
## Known stack suffix:
## LIDENT
## LR(1) items:
valuedecl_cont -> LIDENT . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production valuedecl_cont -> LIDENT
-- On RPAREN reduce production valuedecl_cont -> LIDENT
-- On LPAREN reduce production valuedecl_cont -> LIDENT

State 70:
## Known stack suffix:
## STAR valuedecl_cont
## LR(1) items:
valuedecl_cont -> STAR valuedecl_cont . [ SEMI RPAREN LPAREN ]
valuedecl_cont -> valuedecl_cont . LPAREN ty_params RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On LPAREN shift to state 71
## Reductions:
-- On SEMI reduce production valuedecl_cont -> STAR valuedecl_cont
-- On RPAREN reduce production valuedecl_cont -> STAR valuedecl_cont

State 71:
## Known stack suffix:
## valuedecl_cont LPAREN
## LR(1) items:
valuedecl_cont -> valuedecl_cont LPAREN . ty_params RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On ty_params shift to state 72
-- On ty_param shift to state 27
-- On ctype shift to state 24
## Reductions:

State 72:
## Known stack suffix:
## valuedecl_cont LPAREN ty_params
## LR(1) items:
ty_params -> ty_params . COMMA ty_param [ RPAREN COMMA ]
valuedecl_cont -> valuedecl_cont LPAREN ty_params . RPAREN [ SEMI RPAREN LPAREN ]
## Transitions:
-- On RPAREN shift to state 73
-- On COMMA shift to state 22
## Reductions:

State 73:
## Known stack suffix:
## valuedecl_cont LPAREN ty_params RPAREN
## LR(1) items:
valuedecl_cont -> valuedecl_cont LPAREN ty_params RPAREN . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production valuedecl_cont -> valuedecl_cont LPAREN ty_params RPAREN
-- On RPAREN reduce production valuedecl_cont -> valuedecl_cont LPAREN ty_params RPAREN
-- On LPAREN reduce production valuedecl_cont -> valuedecl_cont LPAREN ty_params RPAREN

State 74:
## Known stack suffix:
## LPAREN valuedecl_cont
## LR(1) items:
valuedecl_cont -> LPAREN valuedecl_cont . RPAREN [ SEMI RPAREN LPAREN ]
valuedecl_cont -> valuedecl_cont . LPAREN ty_params RPAREN [ RPAREN LPAREN ]
## Transitions:
-- On RPAREN shift to state 75
-- On LPAREN shift to state 71
## Reductions:

State 75:
## Known stack suffix:
## LPAREN valuedecl_cont RPAREN
## LR(1) items:
valuedecl_cont -> LPAREN valuedecl_cont RPAREN . [ SEMI RPAREN LPAREN ]
## Transitions:
## Reductions:
-- On SEMI reduce production valuedecl_cont -> LPAREN valuedecl_cont RPAREN
-- On RPAREN reduce production valuedecl_cont -> LPAREN valuedecl_cont RPAREN
-- On LPAREN reduce production valuedecl_cont -> LPAREN valuedecl_cont RPAREN

State 76:
## Known stack suffix:
## ctype valuedecl_cont
## LR(1) items:
valuedecl -> ctype valuedecl_cont . [ SEMI ]
valuedecl_cont -> valuedecl_cont . LPAREN ty_params RPAREN [ SEMI LPAREN ]
## Transitions:
-- On LPAREN shift to state 71
## Reductions:
-- On SEMI reduce production valuedecl -> ctype valuedecl_cont

State 77:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype
## LR(1) items:
modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype . RPAREN modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On RPAREN shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype RPAREN
## LR(1) items:
modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN . modulexpr [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## upath
## LR(1) items:
modulexpr -> upath . [ SEMI RPAREN LPAREN EOF COLON ]
upath -> upath . DOT UIDENT [ SEMI RPAREN LPAREN EOF DOT COLON ]
## Transitions:
-- On DOT shift to state 9
## Reductions:
-- On SEMI reduce production modulexpr -> upath
-- On RPAREN reduce production modulexpr -> upath
-- On LPAREN reduce production modulexpr -> upath
-- On EOF reduce production modulexpr -> upath
-- On COLON reduce production modulexpr -> upath

State 80:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
## LR(1) items:
modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr . [ SEMI RPAREN LPAREN EOF COLON ]
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ SEMI RPAREN LPAREN EOF COLON ]
modulexpr -> modulexpr . COLON moduletype [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On COLON shift to state 81
## Reductions:
-- On SEMI reduce production modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
-- On RPAREN reduce production modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
-- On LPAREN reduce production modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
-- On EOF reduce production modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
-- On COLON reduce production modulexpr -> FUNCTOR LPAREN UIDENT COLON moduletype RPAREN modulexpr
** Conflict on COLON

State 81:
## Known stack suffix:
## modulexpr COLON
## LR(1) items:
modulexpr -> modulexpr COLON . moduletype [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## modulexpr COLON moduletype
## LR(1) items:
modulexpr -> modulexpr COLON moduletype . [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production modulexpr -> modulexpr COLON moduletype
-- On RPAREN reduce production modulexpr -> modulexpr COLON moduletype
-- On LPAREN reduce production modulexpr -> modulexpr COLON moduletype
-- On EOF reduce production modulexpr -> modulexpr COLON moduletype
-- On COLON reduce production modulexpr -> modulexpr COLON moduletype

State 83:
## Known stack suffix:
## LPAREN modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ RPAREN LPAREN COLON ]
modulexpr -> LPAREN modulexpr . RPAREN [ SEMI RPAREN LPAREN EOF COLON ]
modulexpr -> modulexpr . COLON moduletype [ RPAREN LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 84
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 84:
## Known stack suffix:
## LPAREN modulexpr RPAREN
## LR(1) items:
modulexpr -> LPAREN modulexpr RPAREN . [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production modulexpr -> LPAREN modulexpr RPAREN
-- On RPAREN reduce production modulexpr -> LPAREN modulexpr RPAREN
-- On LPAREN reduce production modulexpr -> LPAREN modulexpr RPAREN
-- On EOF reduce production modulexpr -> LPAREN modulexpr RPAREN
-- On COLON reduce production modulexpr -> LPAREN modulexpr RPAREN

State 85:
## Known stack suffix:
## modulexpr LPAREN
## LR(1) items:
modulexpr -> modulexpr LPAREN . modulexpr RPAREN [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## modulexpr LPAREN modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ RPAREN LPAREN COLON ]
modulexpr -> modulexpr LPAREN modulexpr . RPAREN [ SEMI RPAREN LPAREN EOF COLON ]
modulexpr -> modulexpr . COLON moduletype [ RPAREN LPAREN COLON ]
## Transitions:
-- On RPAREN shift to state 87
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 87:
## Known stack suffix:
## modulexpr LPAREN modulexpr RPAREN
## LR(1) items:
modulexpr -> modulexpr LPAREN modulexpr RPAREN . [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production modulexpr -> modulexpr LPAREN modulexpr RPAREN
-- On RPAREN reduce production modulexpr -> modulexpr LPAREN modulexpr RPAREN
-- On LPAREN reduce production modulexpr -> modulexpr LPAREN modulexpr RPAREN
-- On EOF reduce production modulexpr -> modulexpr LPAREN modulexpr RPAREN
-- On COLON reduce production modulexpr -> modulexpr LPAREN modulexpr RPAREN

State 88:
## Known stack suffix:
## MODULE UIDENT EQUAL modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ SEMI LPAREN COLON ]
modulexpr -> modulexpr . COLON moduletype [ SEMI LPAREN COLON ]
structure_item -> MODULE UIDENT EQUAL modulexpr . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 89
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 89:
## Known stack suffix:
## MODULE UIDENT EQUAL modulexpr SEMI
## LR(1) items:
structure_item -> MODULE UIDENT EQUAL modulexpr SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On UIDENT reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On TYPEDEF reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On MODULE reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On INT reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On FLOAT reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI
-- On END reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI

State 90:
## Known stack suffix:
## MODULE UIDENT COLON
## LR(1) items:
structure_item -> MODULE UIDENT COLON . moduletype EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## MODULE UIDENT COLON moduletype
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype . EQUAL modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On EQUAL shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype EQUAL . modulexpr SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ SEMI LPAREN COLON ]
modulexpr -> modulexpr . COLON moduletype [ SEMI LPAREN COLON ]
structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 94
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 94:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On UIDENT reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On TYPEDEF reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On MODULE reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On INT reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On FLOAT reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
-- On END reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI

State 95:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
modulexpr -> STRUCT structure END . [ SEMI RPAREN LPAREN EOF COLON ]
## Transitions:
## Reductions:
-- On SEMI reduce production modulexpr -> STRUCT structure END
-- On RPAREN reduce production modulexpr -> STRUCT structure END
-- On LPAREN reduce production modulexpr -> STRUCT structure END
-- On EOF reduce production modulexpr -> STRUCT structure END
-- On COLON reduce production modulexpr -> STRUCT structure END

State 96:
## Known stack suffix:
## term
## LR(1) items:
structure_item -> term . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production structure_item -> term
-- On UIDENT reduce production structure_item -> term
-- On TYPEDEF reduce production structure_item -> term
-- On MODULE reduce production structure_item -> term
-- On INT reduce production structure_item -> term
-- On FLOAT reduce production structure_item -> term
-- On END reduce production structure_item -> term

State 97:
## Known stack suffix:
## structure structure_item
## LR(1) items:
structure -> structure structure_item . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production structure -> structure structure_item
-- On UIDENT reduce production structure -> structure structure_item
-- On TYPEDEF reduce production structure -> structure structure_item
-- On MODULE reduce production structure -> structure structure_item
-- On INT reduce production structure -> structure structure_item
-- On FLOAT reduce production structure -> structure structure_item
-- On END reduce production structure -> structure structure_item

State 98:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LIDENT ]
term -> ctype . LIDENT SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
term -> ctype . LIDENT LPAREN parameters RPAREN statement [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## ctype LIDENT
## LR(1) items:
term -> ctype LIDENT . SEMI [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
term -> ctype LIDENT . LPAREN parameters RPAREN statement [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On SEMI shift to state 100
-- On LPAREN shift to state 101
## Reductions:

State 100:
## Known stack suffix:
## ctype LIDENT SEMI
## LR(1) items:
term -> ctype LIDENT SEMI . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production term -> ctype LIDENT SEMI
-- On UIDENT reduce production term -> ctype LIDENT SEMI
-- On TYPEDEF reduce production term -> ctype LIDENT SEMI
-- On MODULE reduce production term -> ctype LIDENT SEMI
-- On INT reduce production term -> ctype LIDENT SEMI
-- On FLOAT reduce production term -> ctype LIDENT SEMI
-- On END reduce production term -> ctype LIDENT SEMI

State 101:
## Known stack suffix:
## ctype LIDENT LPAREN
## LR(1) items:
term -> ctype LIDENT LPAREN . parameters RPAREN statement [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On parameters shift to state 102
-- On ctype shift to state 188
## Reductions:
-- On RPAREN reduce production parameters ->
-- On COMMA reduce production parameters ->

State 102:
## Known stack suffix:
## ctype LIDENT LPAREN parameters
## LR(1) items:
parameters -> parameters . COMMA ctype LIDENT [ RPAREN COMMA ]
term -> ctype LIDENT LPAREN parameters . RPAREN statement [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On RPAREN shift to state 103
-- On COMMA shift to state 185
## Reductions:

State 103:
## Known stack suffix:
## ctype LIDENT LPAREN parameters RPAREN
## LR(1) items:
term -> ctype LIDENT LPAREN parameters RPAREN . statement [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 184
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 104:
## Known stack suffix:
## STAR
## LR(1) items:
expr -> STAR . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 154
## Reductions:

State 105:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 153
## Reductions:

State 106:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . ctype RPAREN expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> LPAREN . expr RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On INT shift to state 6
-- On FLOATCONST shift to state 109
-- On FLOAT shift to state 7
-- On BANG shift to state 110
-- On upath shift to state 147
-- On lpath shift to state 114
-- On expr shift to state 148
-- On ctype shift to state 150
## Reductions:

State 107:
## Known stack suffix:
## LIDENT
## LR(1) items:
lpath -> LIDENT . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production lpath -> LIDENT
-- On SLASH reduce production lpath -> LIDENT
-- On SEMI reduce production lpath -> LIDENT
-- On RPAREN reduce production lpath -> LIDENT
-- On RBRACKET reduce production lpath -> LIDENT
-- On PLUS reduce production lpath -> LIDENT
-- On MINUS reduce production lpath -> LIDENT
-- On LPAREN reduce production lpath -> LIDENT
-- On LESSEQUAL reduce production lpath -> LIDENT
-- On LESS reduce production lpath -> LIDENT
-- On LBRACKET reduce production lpath -> LIDENT
-- On GREATEREQUAL reduce production lpath -> LIDENT
-- On GREATER reduce production lpath -> LIDENT
-- On EQUALEQUAL reduce production lpath -> LIDENT
-- On EQUAL reduce production lpath -> LIDENT
-- On COMMA reduce production lpath -> LIDENT
-- On BANGEQUAL reduce production lpath -> LIDENT

State 108:
## Known stack suffix:
## INTCONST
## LR(1) items:
expr -> INTCONST . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> INTCONST
-- On SLASH reduce production expr -> INTCONST
-- On SEMI reduce production expr -> INTCONST
-- On RPAREN reduce production expr -> INTCONST
-- On RBRACKET reduce production expr -> INTCONST
-- On PLUS reduce production expr -> INTCONST
-- On MINUS reduce production expr -> INTCONST
-- On LPAREN reduce production expr -> INTCONST
-- On LESSEQUAL reduce production expr -> INTCONST
-- On LESS reduce production expr -> INTCONST
-- On LBRACKET reduce production expr -> INTCONST
-- On GREATEREQUAL reduce production expr -> INTCONST
-- On GREATER reduce production expr -> INTCONST
-- On EQUALEQUAL reduce production expr -> INTCONST
-- On EQUAL reduce production expr -> INTCONST
-- On COMMA reduce production expr -> INTCONST
-- On BANGEQUAL reduce production expr -> INTCONST

State 109:
## Known stack suffix:
## FLOATCONST
## LR(1) items:
expr -> FLOATCONST . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> FLOATCONST
-- On SLASH reduce production expr -> FLOATCONST
-- On SEMI reduce production expr -> FLOATCONST
-- On RPAREN reduce production expr -> FLOATCONST
-- On RBRACKET reduce production expr -> FLOATCONST
-- On PLUS reduce production expr -> FLOATCONST
-- On MINUS reduce production expr -> FLOATCONST
-- On LPAREN reduce production expr -> FLOATCONST
-- On LESSEQUAL reduce production expr -> FLOATCONST
-- On LESS reduce production expr -> FLOATCONST
-- On LBRACKET reduce production expr -> FLOATCONST
-- On GREATEREQUAL reduce production expr -> FLOATCONST
-- On GREATER reduce production expr -> FLOATCONST
-- On EQUALEQUAL reduce production expr -> FLOATCONST
-- On EQUAL reduce production expr -> FLOATCONST
-- On COMMA reduce production expr -> FLOATCONST
-- On BANGEQUAL reduce production expr -> FLOATCONST

State 110:
## Known stack suffix:
## BANG
## LR(1) items:
expr -> BANG . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 115
## Reductions:

State 111:
## Known stack suffix:
## upath
## LR(1) items:
lpath -> upath . DOT LIDENT [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
upath -> upath . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## upath DOT
## LR(1) items:
lpath -> upath DOT . LIDENT [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
upath -> upath DOT . UIDENT [ STAR RPAREN DOT ]
## Transitions:
-- On UIDENT shift to state 10
-- On LIDENT shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## upath DOT LIDENT
## LR(1) items:
lpath -> upath DOT LIDENT . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production lpath -> upath DOT LIDENT
-- On SLASH reduce production lpath -> upath DOT LIDENT
-- On SEMI reduce production lpath -> upath DOT LIDENT
-- On RPAREN reduce production lpath -> upath DOT LIDENT
-- On RBRACKET reduce production lpath -> upath DOT LIDENT
-- On PLUS reduce production lpath -> upath DOT LIDENT
-- On MINUS reduce production lpath -> upath DOT LIDENT
-- On LPAREN reduce production lpath -> upath DOT LIDENT
-- On LESSEQUAL reduce production lpath -> upath DOT LIDENT
-- On LESS reduce production lpath -> upath DOT LIDENT
-- On LBRACKET reduce production lpath -> upath DOT LIDENT
-- On GREATEREQUAL reduce production lpath -> upath DOT LIDENT
-- On GREATER reduce production lpath -> upath DOT LIDENT
-- On EQUALEQUAL reduce production lpath -> upath DOT LIDENT
-- On EQUAL reduce production lpath -> upath DOT LIDENT
-- On COMMA reduce production lpath -> upath DOT LIDENT
-- On BANGEQUAL reduce production lpath -> upath DOT LIDENT

State 114:
## Known stack suffix:
## lpath
## LR(1) items:
expr -> lpath . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> lpath
-- On SLASH reduce production expr -> lpath
-- On SEMI reduce production expr -> lpath
-- On RPAREN reduce production expr -> lpath
-- On RBRACKET reduce production expr -> lpath
-- On PLUS reduce production expr -> lpath
-- On MINUS reduce production expr -> lpath
-- On LPAREN reduce production expr -> lpath
-- On LESSEQUAL reduce production expr -> lpath
-- On LESS reduce production expr -> lpath
-- On LBRACKET reduce production expr -> lpath
-- On GREATEREQUAL reduce production expr -> lpath
-- On GREATER reduce production expr -> lpath
-- On EQUALEQUAL reduce production expr -> lpath
-- On EQUAL reduce production expr -> lpath
-- On COMMA reduce production expr -> lpath
-- On BANGEQUAL reduce production expr -> lpath

State 115:
## Known stack suffix:
## BANG expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> BANG expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On STAR reduce production expr -> BANG expr
-- On SLASH reduce production expr -> BANG expr
-- On SEMI reduce production expr -> BANG expr
-- On RPAREN reduce production expr -> BANG expr
-- On RBRACKET reduce production expr -> BANG expr
-- On PLUS reduce production expr -> BANG expr
-- On MINUS reduce production expr -> BANG expr
-- On LESSEQUAL reduce production expr -> BANG expr
-- On LESS reduce production expr -> BANG expr
-- On GREATEREQUAL reduce production expr -> BANG expr
-- On GREATER reduce production expr -> BANG expr
-- On EQUALEQUAL reduce production expr -> BANG expr
-- On EQUAL reduce production expr -> BANG expr
-- On COMMA reduce production expr -> BANG expr
-- On BANGEQUAL reduce production expr -> BANG expr

State 116:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr_comma_list shift to state 117
-- On expr shift to state 146
## Reductions:
-- On RPAREN reduce production expr_comma_list ->
-- On COMMA reduce production expr_comma_list ->

State 117:
## Known stack suffix:
## expr LPAREN expr_comma_list
## LR(1) items:
expr -> expr LPAREN expr_comma_list . RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr_comma_list -> expr_comma_list . COMMA expr [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 118
-- On COMMA shift to state 119
## Reductions:

State 118:
## Known stack suffix:
## expr LPAREN expr_comma_list RPAREN
## LR(1) items:
expr -> expr LPAREN expr_comma_list RPAREN . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On SLASH reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On SEMI reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On RPAREN reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On RBRACKET reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On PLUS reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On MINUS reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On LPAREN reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On LESSEQUAL reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On LESS reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On LBRACKET reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On GREATEREQUAL reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On GREATER reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On EQUALEQUAL reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On EQUAL reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On COMMA reduce production expr -> expr LPAREN expr_comma_list RPAREN
-- On BANGEQUAL reduce production expr -> expr LPAREN expr_comma_list RPAREN

State 119:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr_comma_list -> expr_comma_list COMMA expr . [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:
-- On RPAREN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COMMA reduce production expr_comma_list -> expr_comma_list COMMA expr

State 121:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr STAR expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On STAR reduce production expr -> expr STAR expr
-- On SLASH reduce production expr -> expr STAR expr
-- On SEMI reduce production expr -> expr STAR expr
-- On RPAREN reduce production expr -> expr STAR expr
-- On RBRACKET reduce production expr -> expr STAR expr
-- On PLUS reduce production expr -> expr STAR expr
-- On MINUS reduce production expr -> expr STAR expr
-- On LESSEQUAL reduce production expr -> expr STAR expr
-- On LESS reduce production expr -> expr STAR expr
-- On GREATEREQUAL reduce production expr -> expr STAR expr
-- On GREATER reduce production expr -> expr STAR expr
-- On EQUALEQUAL reduce production expr -> expr STAR expr
-- On EQUAL reduce production expr -> expr STAR expr
-- On COMMA reduce production expr -> expr STAR expr
-- On BANGEQUAL reduce production expr -> expr STAR expr

State 123:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## expr LBRACKET expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr LBRACKET expr . RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On RBRACKET shift to state 127
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 125:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr -> expr SLASH . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr SLASH expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On STAR reduce production expr -> expr SLASH expr
-- On SLASH reduce production expr -> expr SLASH expr
-- On SEMI reduce production expr -> expr SLASH expr
-- On RPAREN reduce production expr -> expr SLASH expr
-- On RBRACKET reduce production expr -> expr SLASH expr
-- On PLUS reduce production expr -> expr SLASH expr
-- On MINUS reduce production expr -> expr SLASH expr
-- On LESSEQUAL reduce production expr -> expr SLASH expr
-- On LESS reduce production expr -> expr SLASH expr
-- On GREATEREQUAL reduce production expr -> expr SLASH expr
-- On GREATER reduce production expr -> expr SLASH expr
-- On EQUALEQUAL reduce production expr -> expr SLASH expr
-- On EQUAL reduce production expr -> expr SLASH expr
-- On COMMA reduce production expr -> expr SLASH expr
-- On BANGEQUAL reduce production expr -> expr SLASH expr

State 127:
## Known stack suffix:
## expr LBRACKET expr RBRACKET
## LR(1) items:
expr -> expr LBRACKET expr RBRACKET . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> expr LBRACKET expr RBRACKET
-- On SLASH reduce production expr -> expr LBRACKET expr RBRACKET
-- On SEMI reduce production expr -> expr LBRACKET expr RBRACKET
-- On RPAREN reduce production expr -> expr LBRACKET expr RBRACKET
-- On RBRACKET reduce production expr -> expr LBRACKET expr RBRACKET
-- On PLUS reduce production expr -> expr LBRACKET expr RBRACKET
-- On MINUS reduce production expr -> expr LBRACKET expr RBRACKET
-- On LPAREN reduce production expr -> expr LBRACKET expr RBRACKET
-- On LESSEQUAL reduce production expr -> expr LBRACKET expr RBRACKET
-- On LESS reduce production expr -> expr LBRACKET expr RBRACKET
-- On LBRACKET reduce production expr -> expr LBRACKET expr RBRACKET
-- On GREATEREQUAL reduce production expr -> expr LBRACKET expr RBRACKET
-- On GREATER reduce production expr -> expr LBRACKET expr RBRACKET
-- On EQUALEQUAL reduce production expr -> expr LBRACKET expr RBRACKET
-- On EQUAL reduce production expr -> expr LBRACKET expr RBRACKET
-- On COMMA reduce production expr -> expr LBRACKET expr RBRACKET
-- On BANGEQUAL reduce production expr -> expr LBRACKET expr RBRACKET

State 128:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr PLUS expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr PLUS expr
-- On RPAREN reduce production expr -> expr PLUS expr
-- On RBRACKET reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On LESSEQUAL reduce production expr -> expr PLUS expr
-- On LESS reduce production expr -> expr PLUS expr
-- On GREATEREQUAL reduce production expr -> expr PLUS expr
-- On GREATER reduce production expr -> expr PLUS expr
-- On EQUALEQUAL reduce production expr -> expr PLUS expr
-- On EQUAL reduce production expr -> expr PLUS expr
-- On COMMA reduce production expr -> expr PLUS expr
-- On BANGEQUAL reduce production expr -> expr PLUS expr

State 130:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr MINUS expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr MINUS expr
-- On RPAREN reduce production expr -> expr MINUS expr
-- On RBRACKET reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On LESSEQUAL reduce production expr -> expr MINUS expr
-- On LESS reduce production expr -> expr MINUS expr
-- On GREATEREQUAL reduce production expr -> expr MINUS expr
-- On GREATER reduce production expr -> expr MINUS expr
-- On EQUALEQUAL reduce production expr -> expr MINUS expr
-- On EQUAL reduce production expr -> expr MINUS expr
-- On COMMA reduce production expr -> expr MINUS expr
-- On BANGEQUAL reduce production expr -> expr MINUS expr

State 132:
## Known stack suffix:
## expr LESSEQUAL
## LR(1) items:
expr -> expr LESSEQUAL . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## expr LESSEQUAL expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr LESSEQUAL expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr LESSEQUAL expr
-- On RPAREN reduce production expr -> expr LESSEQUAL expr
-- On RBRACKET reduce production expr -> expr LESSEQUAL expr
-- On LESSEQUAL reduce production expr -> expr LESSEQUAL expr
-- On LESS reduce production expr -> expr LESSEQUAL expr
-- On GREATEREQUAL reduce production expr -> expr LESSEQUAL expr
-- On GREATER reduce production expr -> expr LESSEQUAL expr
-- On EQUALEQUAL reduce production expr -> expr LESSEQUAL expr
-- On EQUAL reduce production expr -> expr LESSEQUAL expr
-- On COMMA reduce production expr -> expr LESSEQUAL expr
-- On BANGEQUAL reduce production expr -> expr LESSEQUAL expr

State 134:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr LESS expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr LESS expr
-- On RPAREN reduce production expr -> expr LESS expr
-- On RBRACKET reduce production expr -> expr LESS expr
-- On LESSEQUAL reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On GREATEREQUAL reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On EQUALEQUAL reduce production expr -> expr LESS expr
-- On EQUAL reduce production expr -> expr LESS expr
-- On COMMA reduce production expr -> expr LESS expr
-- On BANGEQUAL reduce production expr -> expr LESS expr

State 136:
## Known stack suffix:
## expr GREATEREQUAL
## LR(1) items:
expr -> expr GREATEREQUAL . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## expr GREATEREQUAL expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr GREATEREQUAL expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr GREATEREQUAL expr
-- On RPAREN reduce production expr -> expr GREATEREQUAL expr
-- On RBRACKET reduce production expr -> expr GREATEREQUAL expr
-- On LESSEQUAL reduce production expr -> expr GREATEREQUAL expr
-- On LESS reduce production expr -> expr GREATEREQUAL expr
-- On GREATEREQUAL reduce production expr -> expr GREATEREQUAL expr
-- On GREATER reduce production expr -> expr GREATEREQUAL expr
-- On EQUALEQUAL reduce production expr -> expr GREATEREQUAL expr
-- On EQUAL reduce production expr -> expr GREATEREQUAL expr
-- On COMMA reduce production expr -> expr GREATEREQUAL expr
-- On BANGEQUAL reduce production expr -> expr GREATEREQUAL expr

State 138:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr GREATER expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On SEMI reduce production expr -> expr GREATER expr
-- On RPAREN reduce production expr -> expr GREATER expr
-- On RBRACKET reduce production expr -> expr GREATER expr
-- On LESSEQUAL reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On GREATEREQUAL reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On EQUALEQUAL reduce production expr -> expr GREATER expr
-- On EQUAL reduce production expr -> expr GREATER expr
-- On COMMA reduce production expr -> expr GREATER expr
-- On BANGEQUAL reduce production expr -> expr GREATER expr

State 140:
## Known stack suffix:
## expr EQUALEQUAL
## LR(1) items:
expr -> expr EQUALEQUAL . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## expr EQUALEQUAL expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr EQUALEQUAL expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
## Reductions:
-- On SEMI reduce production expr -> expr EQUALEQUAL expr
-- On RPAREN reduce production expr -> expr EQUALEQUAL expr
-- On RBRACKET reduce production expr -> expr EQUALEQUAL expr
-- On EQUALEQUAL reduce production expr -> expr EQUALEQUAL expr
-- On EQUAL reduce production expr -> expr EQUALEQUAL expr
-- On COMMA reduce production expr -> expr EQUALEQUAL expr
-- On BANGEQUAL reduce production expr -> expr EQUALEQUAL expr

State 142:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr EQUAL expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:
-- On SEMI reduce production expr -> expr EQUAL expr
-- On RPAREN reduce production expr -> expr EQUAL expr
-- On RBRACKET reduce production expr -> expr EQUAL expr
-- On COMMA reduce production expr -> expr EQUAL expr

State 144:
## Known stack suffix:
## expr BANGEQUAL
## LR(1) items:
expr -> expr BANGEQUAL . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## expr BANGEQUAL expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr BANGEQUAL expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
## Reductions:
-- On SEMI reduce production expr -> expr BANGEQUAL expr
-- On RPAREN reduce production expr -> expr BANGEQUAL expr
-- On RBRACKET reduce production expr -> expr BANGEQUAL expr
-- On EQUALEQUAL reduce production expr -> expr BANGEQUAL expr
-- On EQUAL reduce production expr -> expr BANGEQUAL expr
-- On COMMA reduce production expr -> expr BANGEQUAL expr
-- On BANGEQUAL reduce production expr -> expr BANGEQUAL expr

State 146:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr_comma_list -> expr . [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:
-- On RPAREN reduce production expr_comma_list -> expr
-- On COMMA reduce production expr_comma_list -> expr

State 147:
## Known stack suffix:
## upath
## LR(1) items:
ctype -> upath . [ STAR RPAREN ]
lpath -> upath . DOT LIDENT [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
upath -> upath . DOT UIDENT [ STAR RPAREN DOT ]
## Transitions:
-- On DOT shift to state 112
## Reductions:
-- On STAR reduce production ctype -> upath
-- On RPAREN reduce production ctype -> upath

State 148:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> LPAREN expr . RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On RPAREN shift to state 149
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 149:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> LPAREN expr RPAREN
-- On SLASH reduce production expr -> LPAREN expr RPAREN
-- On SEMI reduce production expr -> LPAREN expr RPAREN
-- On RPAREN reduce production expr -> LPAREN expr RPAREN
-- On RBRACKET reduce production expr -> LPAREN expr RPAREN
-- On PLUS reduce production expr -> LPAREN expr RPAREN
-- On MINUS reduce production expr -> LPAREN expr RPAREN
-- On LPAREN reduce production expr -> LPAREN expr RPAREN
-- On LESSEQUAL reduce production expr -> LPAREN expr RPAREN
-- On LESS reduce production expr -> LPAREN expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN expr RPAREN
-- On GREATEREQUAL reduce production expr -> LPAREN expr RPAREN
-- On GREATER reduce production expr -> LPAREN expr RPAREN
-- On EQUALEQUAL reduce production expr -> LPAREN expr RPAREN
-- On EQUAL reduce production expr -> LPAREN expr RPAREN
-- On COMMA reduce production expr -> LPAREN expr RPAREN
-- On BANGEQUAL reduce production expr -> LPAREN expr RPAREN

State 150:
## Known stack suffix:
## LPAREN ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR RPAREN ]
expr -> LPAREN ctype . RPAREN expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On STAR shift to state 25
-- On RPAREN shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## LPAREN ctype RPAREN
## LR(1) items:
expr -> LPAREN ctype RPAREN . expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## LPAREN ctype RPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> LPAREN ctype RPAREN expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
## Reductions:
-- On STAR reduce production expr -> LPAREN ctype RPAREN expr
-- On SLASH reduce production expr -> LPAREN ctype RPAREN expr
-- On SEMI reduce production expr -> LPAREN ctype RPAREN expr
-- On RPAREN reduce production expr -> LPAREN ctype RPAREN expr
-- On RBRACKET reduce production expr -> LPAREN ctype RPAREN expr
-- On PLUS reduce production expr -> LPAREN ctype RPAREN expr
-- On MINUS reduce production expr -> LPAREN ctype RPAREN expr
-- On LPAREN reduce production expr -> LPAREN ctype RPAREN expr
-- On LESSEQUAL reduce production expr -> LPAREN ctype RPAREN expr
-- On LESS reduce production expr -> LPAREN ctype RPAREN expr
-- On LBRACKET reduce production expr -> LPAREN ctype RPAREN expr
-- On GREATEREQUAL reduce production expr -> LPAREN ctype RPAREN expr
-- On GREATER reduce production expr -> LPAREN ctype RPAREN expr
-- On EQUALEQUAL reduce production expr -> LPAREN ctype RPAREN expr
-- On EQUAL reduce production expr -> LPAREN ctype RPAREN expr
-- On COMMA reduce production expr -> LPAREN ctype RPAREN expr
-- On BANGEQUAL reduce production expr -> LPAREN ctype RPAREN expr

State 153:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> MINUS expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On STAR reduce production expr -> MINUS expr
-- On SLASH reduce production expr -> MINUS expr
-- On SEMI reduce production expr -> MINUS expr
-- On RPAREN reduce production expr -> MINUS expr
-- On RBRACKET reduce production expr -> MINUS expr
-- On PLUS reduce production expr -> MINUS expr
-- On MINUS reduce production expr -> MINUS expr
-- On LESSEQUAL reduce production expr -> MINUS expr
-- On LESS reduce production expr -> MINUS expr
-- On GREATEREQUAL reduce production expr -> MINUS expr
-- On GREATER reduce production expr -> MINUS expr
-- On EQUALEQUAL reduce production expr -> MINUS expr
-- On EQUAL reduce production expr -> MINUS expr
-- On COMMA reduce production expr -> MINUS expr
-- On BANGEQUAL reduce production expr -> MINUS expr

State 154:
## Known stack suffix:
## STAR expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> STAR expr . [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL ]
## Transitions:
-- On LPAREN shift to state 116
-- On LBRACKET shift to state 123
## Reductions:
-- On STAR reduce production expr -> STAR expr
-- On SLASH reduce production expr -> STAR expr
-- On SEMI reduce production expr -> STAR expr
-- On RPAREN reduce production expr -> STAR expr
-- On RBRACKET reduce production expr -> STAR expr
-- On PLUS reduce production expr -> STAR expr
-- On MINUS reduce production expr -> STAR expr
-- On LESSEQUAL reduce production expr -> STAR expr
-- On LESS reduce production expr -> STAR expr
-- On GREATEREQUAL reduce production expr -> STAR expr
-- On GREATER reduce production expr -> STAR expr
-- On EQUALEQUAL reduce production expr -> STAR expr
-- On EQUAL reduce production expr -> STAR expr
-- On COMMA reduce production expr -> STAR expr
-- On BANGEQUAL reduce production expr -> STAR expr

State 155:
## Known stack suffix:
## RETURN
## LR(1) items:
statement -> RETURN . expr SEMI [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> RETURN expr . SEMI [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On SEMI shift to state 157
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 157:
## Known stack suffix:
## RETURN expr SEMI
## LR(1) items:
statement -> RETURN expr SEMI . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
## Reductions:
-- On VOID reduce production statement -> RETURN expr SEMI
-- On UIDENT reduce production statement -> RETURN expr SEMI
-- On TYPEDEF reduce production statement -> RETURN expr SEMI
-- On STAR reduce production statement -> RETURN expr SEMI
-- On RETURN reduce production statement -> RETURN expr SEMI
-- On RBRACE reduce production statement -> RETURN expr SEMI
-- On MODULE reduce production statement -> RETURN expr SEMI
-- On MINUS reduce production statement -> RETURN expr SEMI
-- On LPAREN reduce production statement -> RETURN expr SEMI
-- On LIDENT reduce production statement -> RETURN expr SEMI
-- On LBRACE reduce production statement -> RETURN expr SEMI
-- On INTCONST reduce production statement -> RETURN expr SEMI
-- On INT reduce production statement -> RETURN expr SEMI
-- On IF reduce production statement -> RETURN expr SEMI
-- On FOR reduce production statement -> RETURN expr SEMI
-- On FLOATCONST reduce production statement -> RETURN expr SEMI
-- On FLOAT reduce production statement -> RETURN expr SEMI
-- On END reduce production statement -> RETURN expr SEMI
-- On ELSE reduce production statement -> RETURN expr SEMI
-- On BANG reduce production statement -> RETURN expr SEMI
-- On # reduce production statement -> RETURN expr SEMI
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> RETURN expr SEMI
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 158:
## Known stack suffix:
## LBRACE
## LR(1) items:
statement -> LBRACE . decl_list statement_list RBRACE [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On decl_list shift to state 159
## Reductions:
-- On VOID reduce production decl_list ->
-- On UIDENT reduce production decl_list ->
-- On STAR reduce production decl_list ->
-- On RETURN reduce production decl_list ->
-- On RBRACE reduce production decl_list ->
-- On MINUS reduce production decl_list ->
-- On LPAREN reduce production decl_list ->
-- On LIDENT reduce production decl_list ->
-- On LBRACE reduce production decl_list ->
-- On INTCONST reduce production decl_list ->
-- On INT reduce production decl_list ->
-- On IF reduce production decl_list ->
-- On FOR reduce production decl_list ->
-- On FLOATCONST reduce production decl_list ->
-- On FLOAT reduce production decl_list ->
-- On BANG reduce production decl_list ->

State 159:
## Known stack suffix:
## LBRACE decl_list
## LR(1) items:
decl_list -> decl_list . ctype LIDENT SEMI [ VOID UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT BANG ]
statement -> LBRACE decl_list . statement_list RBRACE [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On statement_list shift to state 160
-- On ctype shift to state 181
## Reductions:
-- On UIDENT reduce production statement_list ->
-- On STAR reduce production statement_list ->
-- On RETURN reduce production statement_list ->
-- On RBRACE reduce production statement_list ->
-- On MINUS reduce production statement_list ->
-- On LPAREN reduce production statement_list ->
-- On LIDENT reduce production statement_list ->
-- On LBRACE reduce production statement_list ->
-- On INTCONST reduce production statement_list ->
-- On IF reduce production statement_list ->
-- On FOR reduce production statement_list ->
-- On FLOATCONST reduce production statement_list ->
-- On BANG reduce production statement_list ->
** Conflict on UIDENT

State 160:
## Known stack suffix:
## LBRACE decl_list statement_list
## LR(1) items:
statement -> LBRACE decl_list statement_list . RBRACE [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement_list -> statement_list . statement [ UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST IF FOR FLOATCONST BANG ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On RBRACE shift to state 161
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 180
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 161:
## Known stack suffix:
## LBRACE decl_list statement_list RBRACE
## LR(1) items:
statement -> LBRACE decl_list statement_list RBRACE . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
## Reductions:
-- On VOID reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On UIDENT reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On TYPEDEF reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On STAR reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On RETURN reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On RBRACE reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On MODULE reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On MINUS reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On LPAREN reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On LIDENT reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On LBRACE reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On INTCONST reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On INT reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On IF reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On FOR reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On FLOATCONST reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On FLOAT reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On END reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On ELSE reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On BANG reduce production statement -> LBRACE decl_list statement_list RBRACE
-- On # reduce production statement -> LBRACE decl_list statement_list RBRACE
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> LBRACE decl_list statement_list RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 162:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . LPAREN expr RPAREN statement ELSE statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement -> IF . LPAREN expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On LPAREN shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
statement -> IF LPAREN . expr RPAREN statement ELSE statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement -> IF LPAREN . expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## IF LPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> IF LPAREN expr . RPAREN statement ELSE statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement -> IF LPAREN expr . RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On RPAREN shift to state 165
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 165:
## Known stack suffix:
## IF LPAREN expr RPAREN
## LR(1) items:
statement -> IF LPAREN expr RPAREN . statement ELSE statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement -> IF LPAREN expr RPAREN . statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 177
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 166:
## Known stack suffix:
## FOR
## LR(1) items:
statement -> FOR . LPAREN expr SEMI expr SEMI expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On LPAREN shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
statement -> FOR LPAREN . expr SEMI expr SEMI expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## FOR LPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> FOR LPAREN expr . SEMI expr SEMI expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On SEMI shift to state 169
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 169:
## Known stack suffix:
## FOR LPAREN expr SEMI
## LR(1) items:
statement -> FOR LPAREN expr SEMI . expr SEMI expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## FOR LPAREN expr SEMI expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> FOR LPAREN expr SEMI expr . SEMI expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On SEMI shift to state 171
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 171:
## Known stack suffix:
## FOR LPAREN expr SEMI expr SEMI
## LR(1) items:
statement -> FOR LPAREN expr SEMI expr SEMI . expr RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On INTCONST shift to state 108
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On lpath shift to state 114
-- On expr shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## FOR LPAREN expr SEMI expr SEMI expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH RPAREN PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> FOR LPAREN expr SEMI expr SEMI expr . RPAREN statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On RPAREN shift to state 173
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 173:
## Known stack suffix:
## FOR LPAREN expr SEMI expr SEMI expr RPAREN
## LR(1) items:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN . statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 174
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 174:
## Known stack suffix:
## FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
## LR(1) items:
statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
## Reductions:
-- On VOID reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On UIDENT reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On TYPEDEF reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On STAR reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On RETURN reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On RBRACE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On MODULE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On MINUS reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On LPAREN reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On LIDENT reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On LBRACE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On INTCONST reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On INT reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On IF reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On FOR reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On FLOATCONST reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On FLOAT reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On END reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On ELSE reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On BANG reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
-- On # reduce production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> FOR LPAREN expr SEMI expr SEMI expr RPAREN statement
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 175:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_comma_list RPAREN [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . PLUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . MINUS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . STAR expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . SLASH expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . EQUALEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . BANGEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESS expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LESSEQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATER expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . GREATEREQUAL expr [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
expr -> expr . LBRACKET expr RBRACKET [ STAR SLASH SEMI PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL BANGEQUAL ]
statement -> expr . SEMI [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On STAR shift to state 121
-- On SLASH shift to state 125
-- On SEMI shift to state 176
-- On PLUS shift to state 128
-- On MINUS shift to state 130
-- On LPAREN shift to state 116
-- On LESSEQUAL shift to state 132
-- On LESS shift to state 134
-- On LBRACKET shift to state 123
-- On GREATEREQUAL shift to state 136
-- On GREATER shift to state 138
-- On EQUALEQUAL shift to state 140
-- On EQUAL shift to state 142
-- On BANGEQUAL shift to state 144
## Reductions:

State 176:
## Known stack suffix:
## expr SEMI
## LR(1) items:
statement -> expr SEMI . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
## Reductions:
-- On VOID reduce production statement -> expr SEMI
-- On UIDENT reduce production statement -> expr SEMI
-- On TYPEDEF reduce production statement -> expr SEMI
-- On STAR reduce production statement -> expr SEMI
-- On RETURN reduce production statement -> expr SEMI
-- On RBRACE reduce production statement -> expr SEMI
-- On MODULE reduce production statement -> expr SEMI
-- On MINUS reduce production statement -> expr SEMI
-- On LPAREN reduce production statement -> expr SEMI
-- On LIDENT reduce production statement -> expr SEMI
-- On LBRACE reduce production statement -> expr SEMI
-- On INTCONST reduce production statement -> expr SEMI
-- On INT reduce production statement -> expr SEMI
-- On IF reduce production statement -> expr SEMI
-- On FOR reduce production statement -> expr SEMI
-- On FLOATCONST reduce production statement -> expr SEMI
-- On FLOAT reduce production statement -> expr SEMI
-- On END reduce production statement -> expr SEMI
-- On ELSE reduce production statement -> expr SEMI
-- On BANG reduce production statement -> expr SEMI
-- On # reduce production statement -> expr SEMI
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> expr SEMI
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 177:
## Known stack suffix:
## IF LPAREN expr RPAREN statement
## LR(1) items:
statement -> IF LPAREN expr RPAREN statement . ELSE statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
statement -> IF LPAREN expr RPAREN statement . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On ELSE shift to state 178
## Reductions:
-- On VOID reduce production statement -> IF LPAREN expr RPAREN statement
-- On UIDENT reduce production statement -> IF LPAREN expr RPAREN statement
-- On TYPEDEF reduce production statement -> IF LPAREN expr RPAREN statement
-- On STAR reduce production statement -> IF LPAREN expr RPAREN statement
-- On RETURN reduce production statement -> IF LPAREN expr RPAREN statement
-- On RBRACE reduce production statement -> IF LPAREN expr RPAREN statement
-- On MODULE reduce production statement -> IF LPAREN expr RPAREN statement
-- On MINUS reduce production statement -> IF LPAREN expr RPAREN statement
-- On LPAREN reduce production statement -> IF LPAREN expr RPAREN statement
-- On LIDENT reduce production statement -> IF LPAREN expr RPAREN statement
-- On LBRACE reduce production statement -> IF LPAREN expr RPAREN statement
-- On INTCONST reduce production statement -> IF LPAREN expr RPAREN statement
-- On INT reduce production statement -> IF LPAREN expr RPAREN statement
-- On IF reduce production statement -> IF LPAREN expr RPAREN statement
-- On FOR reduce production statement -> IF LPAREN expr RPAREN statement
-- On FLOATCONST reduce production statement -> IF LPAREN expr RPAREN statement
-- On FLOAT reduce production statement -> IF LPAREN expr RPAREN statement
-- On END reduce production statement -> IF LPAREN expr RPAREN statement
-- On ELSE reduce production statement -> IF LPAREN expr RPAREN statement
-- On BANG reduce production statement -> IF LPAREN expr RPAREN statement
-- On # reduce production statement -> IF LPAREN expr RPAREN statement
** Conflict on ELSE
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> IF LPAREN expr RPAREN statement
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 178:
## Known stack suffix:
## IF LPAREN expr RPAREN statement ELSE
## LR(1) items:
statement -> IF LPAREN expr RPAREN statement ELSE . statement [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 179
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 179:
## Known stack suffix:
## IF LPAREN expr RPAREN statement ELSE statement
## LR(1) items:
statement -> IF LPAREN expr RPAREN statement ELSE statement . [ VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG # ]
## Transitions:
## Reductions:
-- On VOID reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On UIDENT reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On TYPEDEF reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On STAR reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On RETURN reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On RBRACE reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On MODULE reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On MINUS reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On LPAREN reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On LIDENT reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On LBRACE reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On INTCONST reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On INT reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On IF reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On FOR reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On FLOATCONST reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On FLOAT reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On END reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On ELSE reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On BANG reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
-- On # reduce production statement -> IF LPAREN expr RPAREN statement ELSE statement
** End-of-stream conflict on VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG
**   There is a tension between
**   (1) reducing production statement -> IF LPAREN expr RPAREN statement ELSE statement
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 180:
## Known stack suffix:
## statement_list statement
## LR(1) items:
statement_list -> statement_list statement . [ UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST IF FOR FLOATCONST BANG ]
## Transitions:
## Reductions:
-- On UIDENT reduce production statement_list -> statement_list statement
-- On STAR reduce production statement_list -> statement_list statement
-- On RETURN reduce production statement_list -> statement_list statement
-- On RBRACE reduce production statement_list -> statement_list statement
-- On MINUS reduce production statement_list -> statement_list statement
-- On LPAREN reduce production statement_list -> statement_list statement
-- On LIDENT reduce production statement_list -> statement_list statement
-- On LBRACE reduce production statement_list -> statement_list statement
-- On INTCONST reduce production statement_list -> statement_list statement
-- On IF reduce production statement_list -> statement_list statement
-- On FOR reduce production statement_list -> statement_list statement
-- On FLOATCONST reduce production statement_list -> statement_list statement
-- On BANG reduce production statement_list -> statement_list statement

State 181:
## Known stack suffix:
## decl_list ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LIDENT ]
decl_list -> decl_list ctype . LIDENT SEMI [ VOID UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT BANG ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## decl_list ctype LIDENT
## LR(1) items:
decl_list -> decl_list ctype LIDENT . SEMI [ VOID UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT BANG ]
## Transitions:
-- On SEMI shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## decl_list ctype LIDENT SEMI
## LR(1) items:
decl_list -> decl_list ctype LIDENT SEMI . [ VOID UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On UIDENT reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On STAR reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On RETURN reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On RBRACE reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On MINUS reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On LPAREN reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On LIDENT reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On LBRACE reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On INTCONST reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On INT reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On IF reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On FOR reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On FLOATCONST reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On FLOAT reduce production decl_list -> decl_list ctype LIDENT SEMI
-- On BANG reduce production decl_list -> decl_list ctype LIDENT SEMI

State 184:
## Known stack suffix:
## ctype LIDENT LPAREN parameters RPAREN statement
## LR(1) items:
term -> ctype LIDENT LPAREN parameters RPAREN statement . [ VOID UIDENT TYPEDEF MODULE INT FLOAT END ]
## Transitions:
## Reductions:
-- On VOID reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On UIDENT reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On TYPEDEF reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On MODULE reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On INT reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On FLOAT reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement
-- On END reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement

State 185:
## Known stack suffix:
## parameters COMMA
## LR(1) items:
parameters -> parameters COMMA . ctype LIDENT [ RPAREN COMMA ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On ctype shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## parameters COMMA ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LIDENT ]
parameters -> parameters COMMA ctype . LIDENT [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## parameters COMMA ctype LIDENT
## LR(1) items:
parameters -> parameters COMMA ctype LIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameters -> parameters COMMA ctype LIDENT
-- On COMMA reduce production parameters -> parameters COMMA ctype LIDENT

State 188:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LIDENT ]
parameters -> ctype . LIDENT [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## ctype LIDENT
## LR(1) items:
parameters -> ctype LIDENT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameters -> ctype LIDENT
-- On COMMA reduce production parameters -> ctype LIDENT

State 190:
## Known stack suffix:
## modulexpr
## LR(1) items:
implementation -> modulexpr . EOF [ # ]
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ LPAREN EOF COLON ]
modulexpr -> modulexpr . COLON moduletype [ LPAREN EOF COLON ]
## Transitions:
-- On LPAREN shift to state 85
-- On EOF shift to state 191
-- On COLON shift to state 81
## Reductions:

State 191:
## Known stack suffix:
## modulexpr EOF
## LR(1) items:
implementation -> modulexpr EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production implementation -> modulexpr EOF

State 192:
## Known stack suffix:
## implementation
## LR(1) items:
implementation' -> implementation . [ # ]
## Transitions:
## Reductions:
-- On # accept implementation

State 193:
## Known stack suffix:
##
## LR(1) items:
phrase' -> . phrase [ # ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On TYPEDEF shift to state 194
-- On MODULE shift to state 197
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On EOF shift to state 207
-- On upath shift to state 8
-- On term shift to state 208
-- On structure_item shift to state 209
-- On phrase shift to state 210
-- On ctype shift to state 211
## Reductions:

State 194:
## Known stack suffix:
## TYPEDEF
## LR(1) items:
structure_item -> TYPEDEF . typedef SEMI [ # ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On typedef shift to state 195
-- On ctype shift to state 13
## Reductions:

State 195:
## Known stack suffix:
## TYPEDEF typedef
## LR(1) items:
structure_item -> TYPEDEF typedef . SEMI [ # ]
## Transitions:
-- On SEMI shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## TYPEDEF typedef SEMI
## LR(1) items:
structure_item -> TYPEDEF typedef SEMI . [ # ]
## Transitions:
## Reductions:
-- On # reduce production structure_item -> TYPEDEF typedef SEMI

State 197:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT COLON moduletype EQUAL modulexpr SEMI [ # ]
structure_item -> MODULE . UIDENT EQUAL modulexpr SEMI [ # ]
## Transitions:
-- On UIDENT shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . COLON moduletype EQUAL modulexpr SEMI [ # ]
structure_item -> MODULE UIDENT . EQUAL modulexpr SEMI [ # ]
## Transitions:
-- On EQUAL shift to state 199
-- On COLON shift to state 202
## Reductions:

State 199:
## Known stack suffix:
## MODULE UIDENT EQUAL
## LR(1) items:
structure_item -> MODULE UIDENT EQUAL . modulexpr SEMI [ # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## MODULE UIDENT EQUAL modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ SEMI LPAREN COLON ]
modulexpr -> modulexpr . COLON moduletype [ SEMI LPAREN COLON ]
structure_item -> MODULE UIDENT EQUAL modulexpr . SEMI [ # ]
## Transitions:
-- On SEMI shift to state 201
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 201:
## Known stack suffix:
## MODULE UIDENT EQUAL modulexpr SEMI
## LR(1) items:
structure_item -> MODULE UIDENT EQUAL modulexpr SEMI . [ # ]
## Transitions:
## Reductions:
-- On # reduce production structure_item -> MODULE UIDENT EQUAL modulexpr SEMI

State 202:
## Known stack suffix:
## MODULE UIDENT COLON
## LR(1) items:
structure_item -> MODULE UIDENT COLON . moduletype EQUAL modulexpr SEMI [ # ]
## Transitions:
-- On SIG shift to state 39
-- On LPAREN shift to state 49
-- On FUNCTOR shift to state 50
-- On moduletype shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## MODULE UIDENT COLON moduletype
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype . EQUAL modulexpr SEMI [ # ]
## Transitions:
-- On EQUAL shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype EQUAL . modulexpr SEMI [ # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STRUCT shift to state 2
-- On LPAREN shift to state 34
-- On FUNCTOR shift to state 35
-- On upath shift to state 79
-- On modulexpr shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL modulexpr
## LR(1) items:
modulexpr -> modulexpr . LPAREN modulexpr RPAREN [ SEMI LPAREN COLON ]
modulexpr -> modulexpr . COLON moduletype [ SEMI LPAREN COLON ]
structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr . SEMI [ # ]
## Transitions:
-- On SEMI shift to state 206
-- On LPAREN shift to state 85
-- On COLON shift to state 81
## Reductions:

State 206:
## Known stack suffix:
## MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI
## LR(1) items:
structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI . [ # ]
## Transitions:
## Reductions:
-- On # reduce production structure_item -> MODULE UIDENT COLON moduletype EQUAL modulexpr SEMI

State 207:
## Known stack suffix:
## EOF
## LR(1) items:
phrase -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> EOF

State 208:
## Known stack suffix:
## term
## LR(1) items:
structure_item -> term . [ # ]
## Transitions:
## Reductions:
-- On # reduce production structure_item -> term

State 209:
## Known stack suffix:
## structure_item
## LR(1) items:
phrase -> structure_item . [ # ]
## Transitions:
## Reductions:
-- On # reduce production phrase -> structure_item

State 210:
## Known stack suffix:
## phrase
## LR(1) items:
phrase' -> phrase . [ # ]
## Transitions:
## Reductions:
-- On # accept phrase

State 211:
## Known stack suffix:
## ctype
## LR(1) items:
ctype -> ctype . STAR [ STAR LIDENT ]
term -> ctype . LIDENT SEMI [ # ]
term -> ctype . LIDENT LPAREN parameters RPAREN statement [ # ]
## Transitions:
-- On STAR shift to state 25
-- On LIDENT shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## ctype LIDENT
## LR(1) items:
term -> ctype LIDENT . SEMI [ # ]
term -> ctype LIDENT . LPAREN parameters RPAREN statement [ # ]
## Transitions:
-- On SEMI shift to state 213
-- On LPAREN shift to state 214
## Reductions:

State 213:
## Known stack suffix:
## ctype LIDENT SEMI
## LR(1) items:
term -> ctype LIDENT SEMI . [ # ]
## Transitions:
## Reductions:
-- On # reduce production term -> ctype LIDENT SEMI

State 214:
## Known stack suffix:
## ctype LIDENT LPAREN
## LR(1) items:
term -> ctype LIDENT LPAREN . parameters RPAREN statement [ # ]
## Transitions:
-- On VOID shift to state 4
-- On UIDENT shift to state 1
-- On INT shift to state 6
-- On FLOAT shift to state 7
-- On upath shift to state 8
-- On parameters shift to state 215
-- On ctype shift to state 188
## Reductions:
-- On RPAREN reduce production parameters ->
-- On COMMA reduce production parameters ->

State 215:
## Known stack suffix:
## ctype LIDENT LPAREN parameters
## LR(1) items:
parameters -> parameters . COMMA ctype LIDENT [ RPAREN COMMA ]
term -> ctype LIDENT LPAREN parameters . RPAREN statement [ # ]
## Transitions:
-- On RPAREN shift to state 216
-- On COMMA shift to state 185
## Reductions:

State 216:
## Known stack suffix:
## ctype LIDENT LPAREN parameters RPAREN
## LR(1) items:
term -> ctype LIDENT LPAREN parameters RPAREN . statement [ # ]
## Transitions:
-- On UIDENT shift to state 1
-- On STAR shift to state 104
-- On RETURN shift to state 155
-- On MINUS shift to state 105
-- On LPAREN shift to state 106
-- On LIDENT shift to state 107
-- On LBRACE shift to state 158
-- On INTCONST shift to state 108
-- On IF shift to state 162
-- On FOR shift to state 166
-- On FLOATCONST shift to state 109
-- On BANG shift to state 110
-- On upath shift to state 111
-- On statement shift to state 217
-- On lpath shift to state 114
-- On expr shift to state 175
## Reductions:

State 217:
## Known stack suffix:
## ctype LIDENT LPAREN parameters RPAREN statement
## LR(1) items:
term -> ctype LIDENT LPAREN parameters RPAREN statement . [ # ]
## Transitions:
## Reductions:
-- On # reduce production term -> ctype LIDENT LPAREN parameters RPAREN statement

