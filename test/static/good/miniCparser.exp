Grammar has 24 nonterminal symbols, among which 2 start symbols.
Grammar has 40 terminal symbols.
Grammar has 86 productions.
nullable(valuedecl_cont) = false
nullable(valuedecl) = false
nullable(upath) = false
nullable(typedef_cont) = false
nullable(typedef) = false
nullable(ty_params) = false
nullable(ty_param) = false
nullable(term) = false
nullable(structure_item) = false
nullable(structure) = true
nullable(statement_list) = true
nullable(statement) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(phrase) = false
nullable(parameters) = true
nullable(modulexpr) = false
nullable(moduletype) = false
nullable(lpath) = false
nullable(implementation) = false
nullable(expr_comma_list) = true
nullable(expr) = false
nullable(decl_list) = true
nullable(ctype) = false
first(valuedecl_cont) = STAR LPAREN LIDENT
first(valuedecl) = VOID UIDENT INT FLOAT
first(upath) = UIDENT
first(typedef_cont) = UIDENT STAR LPAREN
first(typedef) = VOID UIDENT INT FLOAT
first(ty_params) = VOID UIDENT INT FLOAT
first(ty_param) = VOID UIDENT INT FLOAT
first(term) = VOID UIDENT INT FLOAT
first(structure_item) = VOID UIDENT TYPEDEF MODULE INT FLOAT
first(structure) = VOID UIDENT TYPEDEF MODULE INT FLOAT
first(statement_list) = UIDENT STAR RETURN MINUS LPAREN LIDENT LBRACE INTCONST IF FOR FLOATCONST BANG
first(statement) = UIDENT STAR RETURN MINUS LPAREN LIDENT LBRACE INTCONST IF FOR FLOATCONST BANG
first(signature_item) = VOID UIDENT TYPEDEF MODULE INT FLOAT
first(signature) = VOID UIDENT TYPEDEF MODULE INT FLOAT
first(phrase) = VOID UIDENT TYPEDEF MODULE INT FLOAT EOF
first(parameters) = VOID UIDENT INT FLOAT COMMA
first(modulexpr) = UIDENT STRUCT LPAREN FUNCTOR
first(moduletype) = SIG LPAREN FUNCTOR
first(lpath) = UIDENT LIDENT
first(implementation) = UIDENT STRUCT LPAREN FUNCTOR
first(expr_comma_list) = UIDENT STAR MINUS LPAREN LIDENT INTCONST FLOATCONST COMMA BANG
first(expr) = UIDENT STAR MINUS LPAREN LIDENT INTCONST FLOATCONST BANG
first(decl_list) = VOID UIDENT INT FLOAT
first(ctype) = VOID UIDENT INT FLOAT
minimal(valuedecl_cont) = (* 1 *) LIDENT
minimal(valuedecl) = (* 2 *) VOID LIDENT
minimal(upath) = (* 1 *) UIDENT
minimal(typedef_cont) = (* 1 *) UIDENT
minimal(typedef) = (* 2 *) VOID UIDENT
minimal(ty_params) = (* 1 *) VOID
minimal(ty_param) = (* 1 *) VOID
minimal(term) = (* 3 *) VOID LIDENT SEMI
minimal(structure_item) = (* 3 *) VOID LIDENT SEMI
minimal(structure) = (* 0 *)
minimal(statement_list) = (* 0 *)
minimal(statement) = (* 2 *) INTCONST SEMI
minimal(signature_item) = (* 3 *) VOID LIDENT SEMI
minimal(signature) = (* 0 *)
minimal(phrase) = (* 1 *) EOF
minimal(parameters) = (* 0 *)
minimal(modulexpr) = (* 1 *) UIDENT
minimal(moduletype) = (* 2 *) SIG END
minimal(lpath) = (* 1 *) LIDENT
minimal(implementation) = (* 2 *) UIDENT EOF
minimal(expr_comma_list) = (* 0 *)
minimal(expr) = (* 1 *) INTCONST
minimal(decl_list) = (* 0 *)
minimal(ctype) = (* 1 *) VOID
maximal(valuedecl_cont) = infinity
maximal(valuedecl) = infinity
maximal(upath) = infinity
maximal(typedef_cont) = infinity
maximal(typedef) = infinity
maximal(ty_params) = infinity
maximal(ty_param) = infinity
maximal(term) = infinity
maximal(structure_item) = infinity
maximal(structure) = infinity
maximal(statement_list) = infinity
maximal(statement) = infinity
maximal(signature_item) = infinity
maximal(signature) = infinity
maximal(phrase) = infinity
maximal(parameters) = infinity
maximal(modulexpr) = infinity
maximal(moduletype) = infinity
maximal(lpath) = infinity
maximal(implementation) = infinity
maximal(expr_comma_list) = infinity
maximal(expr) = infinity
maximal(decl_list) = infinity
maximal(ctype) = infinity
follow(valuedecl_cont) = SEMI RPAREN LPAREN
follow(valuedecl) = SEMI
follow(upath) = UIDENT STAR SEMI RPAREN LPAREN LIDENT EOF DOT COMMA COLON
follow(typedef_cont) = SEMI RPAREN LPAREN
follow(typedef) = SEMI
follow(ty_params) = RPAREN COMMA
follow(ty_param) = RPAREN COMMA
follow(term) = VOID UIDENT TYPEDEF MODULE INT FLOAT END #
follow(structure_item) = VOID UIDENT TYPEDEF MODULE INT FLOAT END #
follow(structure) = VOID UIDENT TYPEDEF MODULE INT FLOAT END
follow(statement_list) = UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST IF FOR FLOATCONST BANG
follow(statement) = VOID UIDENT TYPEDEF STAR RETURN RBRACE MODULE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT END ELSE BANG #
follow(signature_item) = VOID UIDENT TYPEDEF MODULE INT FLOAT END
follow(signature) = VOID UIDENT TYPEDEF MODULE INT FLOAT END
follow(phrase) = #
follow(parameters) = RPAREN COMMA
follow(modulexpr) = SEMI RPAREN LPAREN EOF COLON
follow(moduletype) = SEMI RPAREN LPAREN EQUAL EOF COLON
follow(lpath) = STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL
follow(implementation) = #
follow(expr_comma_list) = RPAREN COMMA
follow(expr) = STAR SLASH SEMI RPAREN RBRACKET PLUS MINUS LPAREN LESSEQUAL LESS LBRACKET GREATEREQUAL GREATER EQUALEQUAL EQUAL COMMA BANGEQUAL
follow(decl_list) = VOID UIDENT STAR RETURN RBRACE MINUS LPAREN LIDENT LBRACE INTCONST INT IF FOR FLOATCONST FLOAT BANG
follow(ctype) = UIDENT STAR RPAREN LPAREN LIDENT COMMA
Built an LR(0) automaton with 197 states.
The grammar is not SLR(1) -- 23 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 218 states.
202 shift/reduce conflicts were silently solved.
File "miniCparser.mly", line 64, characters 0-5:
Warning: the precedence level assigned to RBRACKET is never useful.
Warning: 5 states have shift/reduce conflicts.
Warning: 5 shift/reduce conflicts were arbitrarily resolved.
Warning: 6 end-of-stream conflicts were arbitrarily resolved.
66 out of 218 states have a default reduction.
The action table is 8938 entries; 949 non-zero; 993 compressed.
The action table occupies roughly 2080 bytes.
The goto table is 5668 entries; 178 non-zero; 394 compressed.
The goto table occupies roughly 704 bytes.
The error table occupies roughly 1152 bytes.
The default_reduction table occupies roughly 256 bytes.
The lhs table occupies roughly 120 bytes.
The trace table occupies roughly 8 bytes.
