%{

open Modules
open MiniC
open C

%}
%start implementation
%start phrase
%token BANG
%token BANGEQUAL
%token COLON
%token COMMA
%token DOT
%token ELSE
%token END
%token EOF
%token EQUAL
%token EQUALEQUAL
%token FLOAT
%token <float> FLOATCONST
%token FOR
%token FUNCTOR
%token GREATER
%token GREATEREQUAL
%token IF
%token INT
%token <int> INTCONST
%token LBRACE
%token LBRACKET
%token LESS
%token LESSEQUAL
%token <string> LIDENT
%token LPAREN
%token MINUS
%token MODULE
%token PLUS
%token RBRACE
%token RBRACKET
%token RETURN
%token RPAREN
%token SEMI
%token SIG
%token SLASH
%token STAR
%token STRUCT
%token TYPEDEF
%token <string> UIDENT
%token VOID
%right EQUAL
%left BANGEQUAL EQUALEQUAL
%left GREATER GREATEREQUAL LESS LESSEQUAL
%left MINUS PLUS
%left SLASH STAR
%left prec_uminus
%right BANG prec_deref
%left LBRACKET LPAREN RBRACKET RPAREN
%type <MiniC.CMod.mod_term> implementation
%type <MiniC.CMod.definition> phrase
%%

upath:
  _1 = UIDENT
    {                     ( Pident(Ident.create _1) )}
| _1 = upath _2 = DOT _3 = UIDENT
    {                     ( Pdot(_1, _3) )}

lpath:
  _1 = LIDENT
    {                     ( Pident(Ident.create _1) )}
| _1 = upath _2 = DOT _3 = LIDENT
    {                     ( Pdot(_1, _3) )}

expr:
  _1 = INTCONST
    {                                        ( Intconst _1 )}
| _1 = FLOATCONST
    {                                        ( Floatconst _1 )}
| _1 = lpath
    {                                        ( Variable _1 )}
| _1 = expr _2 = LPAREN _3 = expr_comma_list _4 = RPAREN
    {                                        ( Apply(_1, List.rev _3) )}
| _1 = expr _2 = EQUAL _3 = expr
    {                                        ( Assign(_1, _3) )}
| _1 = STAR _2 = expr %prec prec_deref
    {                                        ( Unary_op("*", _2) )}
| _1 = MINUS _2 = expr %prec prec_uminus
    {                                        ( Unary_op("-", _2) )}
| _1 = BANG _2 = expr
    {                                        ( Unary_op("!", _2) )}
| _1 = expr _2 = PLUS _3 = expr
    {                                        ( Binary_op("+", _1, _3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                                        ( Binary_op("-", _1, _3) )}
| _1 = expr _2 = STAR _3 = expr
    {                                        ( Binary_op("*", _1, _3) )}
| _1 = expr _2 = SLASH _3 = expr
    {                                        ( Binary_op("/", _1, _3) )}
| _1 = expr _2 = EQUALEQUAL _3 = expr
    {                                        ( Binary_op("==", _1, _3) )}
| _1 = expr _2 = BANGEQUAL _3 = expr
    {                                        ( Binary_op("!=", _1, _3) )}
| _1 = expr _2 = LESS _3 = expr
    {                                        ( Binary_op("<", _1, _3) )}
| _1 = expr _2 = LESSEQUAL _3 = expr
    {                                        ( Binary_op("<=", _1, _3) )}
| _1 = expr _2 = GREATER _3 = expr
    {                                        ( Binary_op(">", _1, _3) )}
| _1 = expr _2 = GREATEREQUAL _3 = expr
    {                                        ( Binary_op(">=", _1, _3) )}
| _1 = expr _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                        ( Unary_op("*", Binary_op("+", _1, _3)) )}
| _1 = LPAREN _2 = ctype _3 = RPAREN _4 = expr
    {                                        ( Cast(_4, _2) )}
| _1 = LPAREN _2 = expr _3 = RPAREN
    {                                        ( _2 )}

expr_comma_list:
  
    {                                        ( [] )}
| _1 = expr
    {                                        ( [_1] )}
| _1 = expr_comma_list _2 = COMMA _3 = expr
    {                                        ( _3 :: _1 )}

statement:
  _1 = expr _2 = SEMI
    {                                           ( Expr _1 )}
| _1 = IF _2 = LPAREN _3 = expr _4 = RPAREN _5 = statement _6 = ELSE _7 = statement
    {                                                   ( If(_3, _5, _7) )}
| _1 = IF _2 = LPAREN _3 = expr _4 = RPAREN _5 = statement
    {                                           ( If(_3, _5, Block([], [])) )}
| _1 = FOR _2 = LPAREN _3 = expr _4 = SEMI _5 = expr _6 = SEMI _7 = expr _8 = RPAREN _9 = statement
    {                                           ( For(_3, _5, _7, _9) )}
| _1 = RETURN _2 = expr _3 = SEMI
    {                                           ( Return _2 )}
| _1 = LBRACE _2 = decl_list _3 = statement_list _4 = RBRACE
    {                                           ( Block(List.rev _2, List.rev _3) )}

statement_list:
  
    {                                        ( [] )}
| _1 = statement_list _2 = statement
    {                                        ( _2 :: _1 )}

decl_list:
  
    {                                        ( [] )}
| _1 = decl_list _2 = ctype _3 = LIDENT _4 = SEMI
    {                                        ( (Ident.create _3, _2) :: _1 )}

term:
  _1 = ctype _2 = LIDENT _3 = SEMI
    {      ( (Ident.create _2, Var_decl _1) )}
| _1 = ctype _2 = LIDENT _3 = LPAREN _4 = parameters _5 = RPAREN _6 = statement
    {      ( (Ident.create _2, Fun_def(List.rev _4, _1, _6)) )}

parameters:
  
    {                                        ( [] )}
| _1 = ctype _2 = LIDENT
    {                                        ( [Ident.create _2, _1] )}
| _1 = parameters _2 = COMMA _3 = ctype _4 = LIDENT
    {                                        ( (Ident.create _4, _3) :: _1 )}

ctype:
  _1 = VOID
    {                                        ( Void )}
| _1 = INT
    {                                        ( Int )}
| _1 = FLOAT
    {                                        ( Float )}
| _1 = upath
    {                                        ( Typename _1 )}
| _1 = ctype _2 = STAR
    {                                        ( Pointer _1 )}

typedef:
  _1 = ctype _2 = typedef_cont
    {                                        ( _2(_1) )}

typedef_cont:
  _1 = UIDENT
    {      ( let id = Ident.create _1 in (fun ty -> (id, ty)) )}
| _1 = STAR _2 = typedef_cont
    {      ( let f = _2 in fun ty -> let (id, ty') = f ty in (id, Pointer ty') )}
| _1 = LPAREN _2 = typedef_cont _3 = RPAREN
    {      ( _2 )}
| _1 = typedef_cont _2 = LPAREN _3 = ty_params _4 = RPAREN
    {      ( let f = _1 in
        let ty_args = List.rev _3 in
        fun ty -> let (id, ty_res) = f ty in (id, Function(ty_args, ty_res)) )}

ty_params:
  _1 = ty_param
    {                                ( [_1] )}
| _1 = ty_params _2 = COMMA _3 = ty_param
    {                                ( _3 :: _1 )}

ty_param:
  _1 = ctype
    {                                ( _1 )}
| _1 = ctype _2 = LIDENT
    {                                ( _1 )}

valuedecl:
  _1 = ctype _2 = valuedecl_cont
    {                                          ( _2(_1) )}

valuedecl_cont:
  _1 = LIDENT
    {      ( let id = Ident.create _1 in (fun ty -> (id, ty)) )}
| _1 = STAR _2 = valuedecl_cont
    {      ( let f = _2 in fun ty -> let (id, ty') = f ty in (id, Pointer ty') )}
| _1 = LPAREN _2 = valuedecl_cont _3 = RPAREN
    {      ( _2 )}
| _1 = valuedecl_cont _2 = LPAREN _3 = ty_params _4 = RPAREN
    {      ( let f = _1 in
        let ty_args = List.rev _3 in
        fun ty -> let (id, ty_res) = f ty in (id, Function(ty_args, ty_res)) )}

modulexpr:
  _1 = upath
    {                                      ( CMod.Longident _1 )}
| _1 = STRUCT _2 = structure _3 = END
    {                                      ( CMod.Structure(List.rev _2) )}
| _1 = FUNCTOR _2 = LPAREN _3 = UIDENT _4 = COLON _5 = moduletype _6 = RPAREN _7 = modulexpr
    {                                      ( CMod.Functor(Ident.create _3, _5, _7) )}
| _1 = modulexpr _2 = LPAREN _3 = modulexpr _4 = RPAREN
    {                                      ( CMod.Apply(_1, _3) )}
| _1 = LPAREN _2 = modulexpr _3 = RPAREN
    {                                      ( _2 )}
| _1 = modulexpr _2 = COLON _3 = moduletype
    {                                      ( CMod.Constraint(_1, _3) )}

structure:
  
    {                                      ( [] )}
| _1 = structure _2 = structure_item
    {                                      ( _2 :: _1 )}

structure_item:
  _1 = term
    {      ( let (id, term) = _1 in CMod.Value_str(id, term) )}
| _1 = TYPEDEF _2 = typedef _3 = SEMI
    {      ( let (id, ty) = _2 in CMod.Type_str(id, (), ty) )}
| _1 = MODULE _2 = UIDENT _3 = COLON _4 = moduletype _5 = EQUAL _6 = modulexpr _7 = SEMI
    {      ( CMod.Module_str(Ident.create _2, CMod.Constraint(_6, _4)) )}
| _1 = MODULE _2 = UIDENT _3 = EQUAL _4 = modulexpr _5 = SEMI
    {      ( CMod.Module_str(Ident.create _2, _4) )}

moduletype:
  _1 = SIG _2 = signature _3 = END
    {                                    ( CMod.Signature(List.rev _2) )}
| _1 = FUNCTOR _2 = LPAREN _3 = UIDENT _4 = COLON _5 = moduletype _6 = RPAREN _7 = moduletype
    {                                    ( CMod.Functor_type(Ident.create _3, _5, _7) )}
| _1 = LPAREN _2 = moduletype _3 = RPAREN
    {                                    ( _2 )}

signature:
  
    {                                    ( [] )}
| _1 = signature _2 = signature_item
    {                                    ( _2 :: _1 )}

signature_item:
  _1 = valuedecl _2 = SEMI
    {      ( let (id, ty) = _1 in CMod.Value_sig(id, ty) )}
| _1 = TYPEDEF _2 = typedef _3 = SEMI
    {      ( let (id, ty) = _2 in
        CMod.Type_sig(id, {CMod.kind = (); CMod.manifest = Some ty}) )}
| _1 = TYPEDEF _2 = UIDENT _3 = SEMI
    {      ( CMod.Type_sig(Ident.create _2, {CMod.kind = (); CMod.manifest = None}) )}
| _1 = MODULE _2 = UIDENT _3 = COLON _4 = moduletype _5 = SEMI
    {      ( CMod.Module_sig(Ident.create _2, _4) )}

phrase:
  _1 = structure_item
    {                                      ( _1 )}
| _1 = EOF
    {                                      ( raise End_of_file )}

implementation:
  _1 = modulexpr _2 = EOF
    {                                      ( _1 )}

%%
