
** Conflict (shift/reduce) in state 131.
** Tokens involved: LPAREN COLON
** The following explanations concentrate on token LPAREN.
** This state is reached from implementation after reading:

FUNCTOR LPAREN IDENT COLON moduletype RPAREN modulexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

implementation 
modulexpr EOF 
(?)

** In state 131, looking ahead at LPAREN, reducing production
** modulexpr -> FUNCTOR LPAREN IDENT COLON moduletype RPAREN modulexpr 
** is permitted because of the following sub-derivation:

modulexpr LPAREN modulexpr RPAREN // lookahead token appears
FUNCTOR LPAREN IDENT COLON moduletype RPAREN modulexpr . 

** In state 131, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

FUNCTOR LPAREN IDENT COLON moduletype RPAREN modulexpr 
                                             modulexpr . LPAREN modulexpr RPAREN 

** Conflict (shift/reduce) in state 83.
** Token involved: IDENT
** This state is reached from phrase after reading:

TYPE typeparams IDENT EQUAL simpletype ARROW simpletype 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
TYPE typedef 
     typeparams IDENT EQUAL simpletype 
                            (?)

** In state 83, looking ahead at IDENT, shifting is permitted
** because of the following sub-derivation:

simpletype ARROW simpletype 
                 simpletype path 
                            . IDENT 

** In state 83, looking ahead at IDENT, reducing production
** simpletype -> simpletype ARROW simpletype 
** is permitted because of the following sub-derivation:

simpletype path // lookahead token appears because path can begin with IDENT
simpletype ARROW simpletype . 

** Conflict (shift/reduce) in state 79.
** Token involved: IDENT
** This state is reached from phrase after reading:

TYPE typeparams IDENT EQUAL simpletype STAR simpletype 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
TYPE typedef 
     typeparams IDENT EQUAL simpletype 
                            (?)

** In state 79, looking ahead at IDENT, shifting is permitted
** because of the following sub-derivation:

simpletype STAR simpletype 
                simpletype path 
                           . IDENT 

** In state 79, looking ahead at IDENT, reducing production
** simpletype -> simpletype STAR simpletype 
** is permitted because of the following sub-derivation:

simpletype path // lookahead token appears because path can begin with IDENT
simpletype STAR simpletype . 

** Conflict (shift/reduce) in state 52.
** Tokens involved: STAR SLASH PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUALEQUAL COMMA
** The following explanations concentrate on token STAR.
** This state is reached from phrase after reading:

VALUE IDENT EQUAL LET IDENT valbind IN valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 52, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

LET IDENT valbind IN valexpr 
                     valexpr . STAR valexpr 

** In state 52, looking ahead at STAR, reducing production
** valexpr -> LET IDENT valbind IN valexpr 
** is permitted because of the following sub-derivation:

valexpr STAR valexpr // lookahead token appears
LET IDENT valbind IN valexpr . 

** Conflict (shift/reduce) in state 51.
** Tokens involved: STAR SLASH PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUALEQUAL COMMA
** The following explanations concentrate on token STAR.
** This state is reached from phrase after reading:

VALUE IDENT EQUAL IF valexpr THEN valexpr ELSE valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 51, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

IF valexpr THEN valexpr ELSE valexpr 
                             valexpr . STAR valexpr 

** In state 51, looking ahead at STAR, reducing production
** valexpr -> IF valexpr THEN valexpr ELSE valexpr 
** is permitted because of the following sub-derivation:

valexpr STAR valexpr // lookahead token appears
IF valexpr THEN valexpr ELSE valexpr . 

** Conflict (shift/reduce) in state 46.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr COMMA valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 46, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr COMMA valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr COMMA valexpr . 

** In state 46, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr COMMA valexpr 
              valexpr . EQUALEQUAL valexpr 

** Conflict (shift/reduce) in state 44.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr GREATER valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 44, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr GREATER valexpr 
                valexpr . EQUALEQUAL valexpr 

** In state 44, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr GREATER valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr GREATER valexpr . 

** Conflict (shift/reduce) in state 42.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr GREATEREQUAL valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 42, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr GREATEREQUAL valexpr 
                     valexpr . EQUALEQUAL valexpr 

** In state 42, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr GREATEREQUAL valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr GREATEREQUAL valexpr . 

** Conflict (shift/reduce) in state 40.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr LESS valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 40, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr LESS valexpr 
             valexpr . EQUALEQUAL valexpr 

** In state 40, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr LESS valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr LESS valexpr . 

** Conflict (shift/reduce) in state 38.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr LESSEQUAL valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 38, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr LESSEQUAL valexpr 
                  valexpr . EQUALEQUAL valexpr 

** In state 38, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr LESSEQUAL valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr LESSEQUAL valexpr . 

** Conflict (shift/reduce) in state 36.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr LESSGREATER valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 36, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr LESSGREATER valexpr 
                    valexpr . EQUALEQUAL valexpr 

** In state 36, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr LESSGREATER valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr LESSGREATER valexpr . 

** Conflict (shift/reduce) in state 34.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr MINUS valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 34, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr MINUS valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr MINUS valexpr . 

** In state 34, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr MINUS valexpr 
              valexpr . EQUALEQUAL valexpr 

** Conflict (shift/reduce) in state 32.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr PLUS valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 32, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr PLUS valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr PLUS valexpr . 

** In state 32, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr PLUS valexpr 
             valexpr . EQUALEQUAL valexpr 

** Conflict (shift/reduce) in state 30.
** Tokens involved: STAR SLASH PLUS MINUS LESSGREATER LESSEQUAL LESS GREATEREQUAL GREATER EQUALEQUAL COMMA
** The following explanations concentrate on token STAR.
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr EQUALEQUAL valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 30, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

valexpr EQUALEQUAL valexpr 
                   valexpr . STAR valexpr 

** In state 30, looking ahead at STAR, reducing production
** valexpr -> valexpr EQUALEQUAL valexpr 
** is permitted because of the following sub-derivation:

valexpr STAR valexpr // lookahead token appears
valexpr EQUALEQUAL valexpr . 

** Conflict (shift/reduce) in state 28.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr SLASH valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 28, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr SLASH valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr SLASH valexpr . 

** In state 28, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr SLASH valexpr 
              valexpr . EQUALEQUAL valexpr 

** Conflict (shift/reduce) in state 26.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL valexpr STAR valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 26, looking ahead at EQUALEQUAL, reducing production
** valexpr -> valexpr STAR valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
valexpr STAR valexpr . 

** In state 26, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

valexpr STAR valexpr 
             valexpr . EQUALEQUAL valexpr 

** Conflict (shift/reduce) in state 24.
** Token involved: EQUALEQUAL
** This state is reached from phrase after reading:

VALUE IDENT EQUAL FUNCTION IDENT ARROW valexpr 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

phrase 
structure_item SEMISEMI 
VALUE IDENT valbind 
            EQUAL valexpr 
                  (?)

** In state 24, looking ahead at EQUALEQUAL, shifting is permitted
** because of the following sub-derivation:

FUNCTION IDENT ARROW valexpr 
                     valexpr . EQUALEQUAL valexpr 

** In state 24, looking ahead at EQUALEQUAL, reducing production
** valexpr -> FUNCTION IDENT ARROW valexpr 
** is permitted because of the following sub-derivation:

valexpr EQUALEQUAL valexpr // lookahead token appears
FUNCTION IDENT ARROW valexpr . 
