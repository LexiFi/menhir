File "miniMLparser.mly", line 55, characters 7-13:
Warning: the token LIDENT is unused.
Grammar has 24 nonterminal symbols, among which 2 start symbols.
Grammar has 37 terminal symbols.
Grammar has 69 productions.
nullable(valuedecl) = false
nullable(valexpr1) = false
nullable(valexpr0) = false
nullable(valexpr) = false
nullable(valbind) = false
nullable(typeparams) = true
nullable(typeparamlist) = false
nullable(typeparam) = false
nullable(typeinfo) = false
nullable(typedef) = false
nullable(typedecl) = false
nullable(structure_item) = false
nullable(structure) = true
nullable(simpletypelist) = false
nullable(simpletype) = false
nullable(signature_item) = false
nullable(signature) = true
nullable(phrase) = false
nullable(path) = false
nullable(opt_semi) = true
nullable(modulexpr) = false
nullable(moduletype) = false
nullable(implementation) = false
nullable(colon_begin_scheme) = false
first(valuedecl) = COLON
first(valexpr1) = LPAREN INT IDENT
first(valexpr0) = LPAREN INT IDENT
first(valexpr) = LPAREN LET INT IF IDENT FUNCTION
first(valbind) = IDENT EQUAL
first(typeparams) = QUOTE LPAREN
first(typeparamlist) = QUOTE
first(typeparam) = QUOTE
first(typeinfo) = QUOTE LPAREN IDENT
first(typedef) = QUOTE LPAREN IDENT
first(typedecl) = QUOTE LPAREN IDENT
first(structure_item) = VALUE TYPE MODULE
first(structure) = VALUE TYPE MODULE
first(simpletypelist) = QUOTE LPAREN IDENT
first(simpletype) = QUOTE LPAREN IDENT
first(signature_item) = VALUE TYPE MODULE
first(signature) = VALUE TYPE MODULE
first(phrase) = VALUE TYPE MODULE EOF
first(path) = IDENT
first(opt_semi) = SEMICOLON
first(modulexpr) = STRUCT LPAREN IDENT FUNCTOR
first(moduletype) = SIG LPAREN FUNCTOR
first(implementation) = STRUCT LPAREN IDENT FUNCTOR
first(colon_begin_scheme) = COLON
minimal(valuedecl) = (* 2 *) COLON IDENT
minimal(valexpr1) = (* 1 *) IDENT
minimal(valexpr0) = (* 1 *) IDENT
minimal(valexpr) = (* 1 *) IDENT
minimal(valbind) = (* 2 *) EQUAL IDENT
minimal(typeparams) = (* 0 *)
minimal(typeparamlist) = (* 2 *) QUOTE IDENT
minimal(typeparam) = (* 2 *) QUOTE IDENT
minimal(typeinfo) = (* 1 *) IDENT
minimal(typedef) = (* 3 *) IDENT EQUAL IDENT
minimal(typedecl) = (* 1 *) IDENT
minimal(structure_item) = (* 4 *) VALUE IDENT EQUAL IDENT
minimal(structure) = (* 0 *)
minimal(simpletypelist) = (* 1 *) IDENT
minimal(simpletype) = (* 1 *) IDENT
minimal(signature_item) = (* 2 *) TYPE IDENT
minimal(signature) = (* 0 *)
minimal(phrase) = (* 1 *) EOF
minimal(path) = (* 1 *) IDENT
minimal(opt_semi) = (* 0 *)
minimal(modulexpr) = (* 1 *) IDENT
minimal(moduletype) = (* 2 *) SIG END
minimal(implementation) = (* 2 *) IDENT EOF
minimal(colon_begin_scheme) = (* 1 *) COLON
follow(valuedecl) = VALUE TYPE SEMICOLON MODULE END
follow(valexpr1) = VALUE TYPE THEN STAR SLASH SEMISEMI SEMICOLON RPAREN PLUS MODULE MINUS LPAREN LESSGREATER LESSEQUAL LESS INT IN IDENT GREATEREQUAL GREATER EQUALEQUAL END ELSE COMMA
follow(valexpr0) = VALUE TYPE THEN STAR SLASH SEMISEMI SEMICOLON RPAREN PLUS MODULE MINUS LPAREN LESSGREATER LESSEQUAL LESS INT IN IDENT GREATEREQUAL GREATER EQUALEQUAL END ELSE COMMA
follow(valexpr) = VALUE TYPE THEN STAR SLASH SEMISEMI SEMICOLON RPAREN PLUS MODULE MINUS LESSGREATER LESSEQUAL LESS IN GREATEREQUAL GREATER EQUALEQUAL END ELSE COMMA
follow(valbind) = VALUE TYPE SEMISEMI SEMICOLON MODULE IN END
follow(typeparams) = IDENT
follow(typeparamlist) = RPAREN COMMA
follow(typeparam) = RPAREN IDENT COMMA
follow(typeinfo) = VALUE TYPE SEMICOLON MODULE END
follow(typedef) = VALUE TYPE SEMISEMI SEMICOLON MODULE END
follow(typedecl) = VALUE TYPE SEMICOLON MODULE END
follow(structure_item) = VALUE TYPE SEMISEMI SEMICOLON MODULE END
follow(structure) = VALUE TYPE MODULE END
follow(simpletypelist) = RPAREN COMMA
follow(simpletype) = VALUE TYPE STAR SEMISEMI SEMICOLON RPAREN MODULE IDENT END COMMA ARROW
follow(signature_item) = VALUE TYPE SEMICOLON MODULE END
follow(signature) = VALUE TYPE MODULE END
follow(phrase) = #
follow(path) = VALUE TYPE THEN STAR SLASH SEMISEMI SEMICOLON RPAREN PLUS MODULE MINUS LPAREN LESSGREATER LESSEQUAL LESS INT IN IDENT GREATEREQUAL GREATER EQUALEQUAL EOF END ELSE DOT COMMA COLON ARROW
follow(opt_semi) = VALUE TYPE MODULE END
follow(modulexpr) = VALUE TYPE SEMISEMI SEMICOLON RPAREN MODULE LPAREN EOF END COLON
follow(moduletype) = VALUE TYPE SEMISEMI SEMICOLON RPAREN MODULE LPAREN EQUAL EOF END COLON
follow(implementation) = #
follow(colon_begin_scheme) = QUOTE LPAREN IDENT
Built an LR(0) automaton with 155 states.
The grammar is not SLR(1) -- 17 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 155 states.
114 shift/reduce conflicts were silently solved.
Warning: 17 states have shift/reduce conflicts.
Warning: 48 shift/reduce conflicts were arbitrarily resolved.
38 out of 155 states have a default reduction.
56 out of 155 states are represented.
0 out of 65 symbols keep track of their start position.
0 out of 65 symbols keep track of their end position.
31 out of 71 productions exploit shiftreduce optimization.
255 functions before inlining, 63 functions after inlining.
