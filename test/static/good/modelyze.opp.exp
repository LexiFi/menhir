File "modelyze.mly", line 88, characters 28-34:
Warning: the token IFELSE is unused.
File "modelyze.mly", line 86, characters 28-35:
Warning: the token IFGUARD is unused.
File "modelyze.mly", line 87, characters 28-34:
Warning: the token IFTHEN is unused.
File "modelyze.mly", line 64, characters 28-30:
Warning: the token IN is unused.
File "modelyze.mly", line 167, characters 10-15:
Warning: the token MYAPP is unused.
%{

  open Ustring.Op
  open Utils
  open Ast
  open Info


  let mktminfo t1 t2 = mkinfo (tm_info t1) (tm_info t2)

  let mkpatinfo t1 t2 = mkinfo (pat_info t1) (pat_info t2)

  let rec metastr n = if n = 0 then us"" else us"#" ^. metastr (n-1)

  let mk_binop fi l op t1 t2 =
    TmApp(fi,l,TmApp(fi,l,(TmVar(fi,Symtbl.add (us op),0)),t1,false),t2,false)
  let mk_unop fi l op t1 =
    TmApp(fi,l,(TmVar(fi,Symtbl.add (us op),0)),t1,false)

  let mk_binpat_op fi l op t1 t2 =
    PatSymApp(fi,PatSymApp(fi,PatExpr(fi,TmVar(fi,Symtbl.add (us op),0)),t1),t2)

  let mk_unpat_op fi l op t1 =
    PatSymApp(fi,PatExpr(fi,TmVar(fi,Symtbl.add (us op),0)),t1)

  let wildcard = Symtbl.add (us"@@wildcard")

  let floatval v = TmConst(NoInfo,0,ConstReal(v))


%}
%start main
%token <unit Ast.tokendata> ADD
%token <unit Ast.tokendata> AND
%token <unit Ast.tokendata> APXEQ
%token <unit Ast.tokendata> ARRAY
%token <unit Ast.tokendata> ARROW
%token <unit Ast.tokendata> BAR
%token <unit Ast.tokendata> BEGIN
%token <unit Ast.tokendata> BOOL
%token <unit Ast.tokendata> COLON
%token <unit Ast.tokendata> COMMA
%token <unit Ast.tokendata> CONS
%token <unit Ast.tokendata> DAESOLVER
%token <unit Ast.tokendata> DARROW
%token <unit Ast.tokendata> DECON
%token <unit Ast.tokendata> DEF
%token <unit Ast.tokendata> DIV
%token <unit Ast.tokendata> DOT
%token <unit Ast.tokendata> DOTADD
%token <unit Ast.tokendata> DOTDIV
%token <unit Ast.tokendata> DOTEQUAL
%token <unit Ast.tokendata> DOTEXP
%token <unit Ast.tokendata> DOTGREAT
%token <unit Ast.tokendata> DOTGREATEQUAL
%token <unit Ast.tokendata> DOTLESS
%token <unit Ast.tokendata> DOTLESSEQUAL
%token <unit Ast.tokendata> DOTMUL
%token <unit Ast.tokendata> DOTNOTEQUAL
%token <unit Ast.tokendata> DOTSUB
%token <unit Ast.tokendata> DPRINT
%token <unit Ast.tokendata> DPRINTTYPE
%token <unit Ast.tokendata> ELSE
%token <unit Ast.tokendata> END
%token EOF
%token <unit Ast.tokendata> EQ
%token <unit Ast.tokendata> EQSEMI
%token <unit Ast.tokendata> EQUAL
%token <unit Ast.tokendata> ERROR
%token <unit Ast.tokendata> ESCAPE
%token <unit Ast.tokendata> EXP
%token <unit Ast.tokendata> FALSE
%token <unit Ast.tokendata> FROM
%token <unit Ast.tokendata> FST
%token <unit Ast.tokendata> FUN
%token <unit Ast.tokendata> GREAT
%token <unit Ast.tokendata> GREATEQUAL
%token <int Ast.tokendata> IDENT
%token <int Ast.tokendata> IDENTPAREN
%token <unit Ast.tokendata> IF
%token <unit Ast.tokendata> IFELSE
%token <unit Ast.tokendata> IFGUARD
%token <unit Ast.tokendata> IFTHEN
%token <unit Ast.tokendata> IN
%token <unit Ast.tokendata> INCLUDE
%token <unit Ast.tokendata> INT
%token <unit Ast.tokendata> LCASE
%token <unit Ast.tokendata> LCURLY
%token <unit Ast.tokendata> LEFTARROW
%token <unit Ast.tokendata> LESS
%token <unit Ast.tokendata> LESSEQUAL
%token <unit Ast.tokendata> LIFT
%token <unit Ast.tokendata> LIST
%token <unit Ast.tokendata> LONGARROW
%token <unit Ast.tokendata> LPAREN
%token <unit Ast.tokendata> LSQUARE
%token <unit Ast.tokendata> MAP
%token <unit Ast.tokendata> MATCH
%token <unit Ast.tokendata> METAAPP
%token <unit Ast.tokendata> MOD
%token <unit Ast.tokendata> MUL
%token <unit Ast.tokendata> NOT
%token <unit Ast.tokendata> NOTEQUAL
%token <unit Ast.tokendata> OF
%token <unit Ast.tokendata> OR
%token <unit Ast.tokendata> PARENAPP
%token <unit Ast.tokendata> PLUSPLUS
%token <unit Ast.tokendata> POLYEQUAL
%token <Ast.primitive Ast.tokendata> PRIMITIVE
%token <unit Ast.tokendata> PROJ
%token <unit Ast.tokendata> QUESTIONMARK
%token <unit Ast.tokendata> RCURLY
%token <unit Ast.tokendata> REAL
%token <unit Ast.tokendata> RPAREN
%token <unit Ast.tokendata> RSQUARE
%token <unit Ast.tokendata> SEMI
%token <unit Ast.tokendata> SET
%token <unit Ast.tokendata> SND
%token <unit Ast.tokendata> SPECIALIZE
%token <unit Ast.tokendata> SQUOTE
%token <Ustring.ustring Ast.tokendata> STRING
%token <unit Ast.tokendata> SUB
%token <unit Ast.tokendata> SYM
%token <unit Ast.tokendata> SYMSTR
%token <unit Ast.tokendata> THEN
%token <unit Ast.tokendata> TRUE
%token <unit Ast.tokendata> TYPE
%token <unit Ast.tokendata> TYSTRING
%token <float Ast.tokendata> UFLOAT
%token <int Ast.tokendata> UINT
%token <unit Ast.tokendata> USCORE
%token <unit Ast.tokendata> WITH
%nonassoc WITH
%nonassoc BAR
%nonassoc DEFUK
%left EQSEMI SEMI
%nonassoc MYAPP
%left OR
%left AND
%left APXEQ EQ LEFTARROW PLUSPLUS
%left EQUAL GREAT GREATEQUAL LESS LESSEQUAL LONGARROW NOTEQUAL POLYEQUAL
%left DOTEQUAL DOTGREAT DOTGREATEQUAL DOTLESS DOTLESSEQUAL DOTNOTEQUAL
%nonassoc NOT
%left ADD DOTADD DOTSUB SUB
%left DIV DOTDIV DOTMUL MUL
%left MOD
%left DOTEXP EXP
%nonassoc UNARYMINUS
%left SQUOTE
%type <Ast.top list> main
%%

main:
  _1 = top
    {      ( _1 )}

top:
  _1 = EOF
    {      ( [] )}
| _1 = DEF _2 = identparen _3 = parenparamlist _4 = EQ _5 = term _6 = top
    {      ( let fi = mkinfo _1.i (tm_info _5) in
        let (plst,endty) = _3 in
        TopLet(fi,_2,endty,List.rev plst,_5,freein_tm _2 _5)::_6 )}
| _1 = DEF _2 = letpat _3 = EQ _4 = term _5 = top
    {      ( let fi = mkinfo _1.i (tm_info _4) in
        TopLet(fi,_2,None,[],_4,freein_tm _2 _4)::_5 )}
| _1 = DEF _2 = letpat _3 = COLON _4 = ty _5 = EQ _6 = term _7 = top
    {      ( let fi = mkinfo _1.i (tm_info _6) in
        TopLet(fi,_2,Some _4,[],_6,freein_tm _2 _6)::_7 )}
| _1 = DEF _2 = letpat _3 = COLON _4 = ty _5 = top %prec DEFUK
    {      ( let fi = mkinfo _1.i (ty_info _4) in
        TopNu(fi,_2,_4)::_5 )}
| _1 = DEF _2 = IDENT _3 = COMMA _4 = revidentseq _5 = COLON _6 = ty _7 = top %prec DEFUK
    {      ( let fi = mkinfo _1.i (ty_info _6) in
        let nulst = List.map (fun x -> TopNu(fi,x,_6)) (List.rev _4) in
        TopNu(fi,_2.v,_6)::(List.append nulst _7) )}
| _1 = TYPE _2 = IDENT _3 = top
    {      ( let fi = mkinfo _1.i _2.i in
        TopNewType(fi,_2.v)::_3 )}
| _1 = TYPE _2 = IDENT _3 = EQ _4 = ty _5 = top
    {      ( let fi = mkinfo _1.i (ty_info _4) in
        TopNameType(fi,_2.v,_4)::_5 )}
| _1 = INCLUDE _2 = IDENT _3 = top
    {      ( let fi = mkinfo _1.i _2.i in
        let modname = _2.v |> Symtbl.get |> Ustring.to_latin1
                      |> String.lowercase |> us in
        TopInclude(fi,Symtbl.add (modname ^. us".moz"))::_3 )}

identparen:
  _1 = IDENT _2 = LPAREN
    {    ( _1.v )}
| _1 = IDENTPAREN
    {    ( _1.v )}

ty:
  _1 = tyarrow
    {      ( _1 )}
| _1 = tyarrow _2 = DARROW _3 = ty
    {      ( let fi = mkinfo (ty_info _1) (ty_info _3) in
	TyMap(fi,_2.l,_1,_3) )}

tyarrow:
  _1 = tyatom
    {      ( _1 )}
| _1 = tyatom _2 = ARROW _3 = tyarrow
    {      ( let fi = mkinfo (ty_info _1) (ty_info _3) in
	TyArrow(fi,_2.l,_1,_3) )}

tyatom:
  _1 = IDENT
    {      ( TyIdent(_1.i,_1.l,_1.v) )}
| _1 = INT
    {      ( TyInt(_1.i,_1.l) )}
| _1 = REAL
    {      ( TyReal(_1.i,_1.l) )}
| _1 = BOOL
    {      ( TyBool(_1.i,_1.l) )}
| _1 = TYSTRING
    {      ( TyString(_1.i,_1.l) )}
| _1 = LPAREN _2 = RPAREN
    {      ( TyUnit(mkinfo _1.i _2.i,_1.l) )}
| _1 = LSQUARE _2 = ty _3 = RSQUARE
    {      ( TyList(mkinfo _1.i _3.i,_1.l,_2) )}
| _1 = LIST _2 = tyatom
    {      ( TyList(mkinfo _1.i (ty_info _2),_1.l,_2) )}
| _1 = LCURLY _2 = ty _3 = RCURLY
    {      ( TyArray(mkinfo _1.i _3.i,_1.l,_2) )}
| _1 = ARRAY _2 = tyatom
    {      ( TyArray(mkinfo _1.i (ty_info _2),_1.l,_2) )}
| _1 = LPAREN _2 = revtypetupleseq _3 = RPAREN
    {      ( let fi = mkinfo _1.i _3.i in
        match _2 with
	  | [ty] -> ty
	  | tys ->  TyTuple(fi,_1.l,List.rev tys) )}
| _1 = LESS _2 = GREAT
    {      ( TySym(mkinfo _1.i _2.i,_1.l,TyDyn(mkinfo _1.i _2.i,_1.l)))}
| _1 = LESS _2 = ty _3 = GREAT
    {      ( TySym(mkinfo _1.i _3.i,_1.l,_2) )}
| _1 = QUESTIONMARK
    {      ( TyDyn(_1.i, _1.l) )}
| _1 = MAP _2 = tyatom _3 = tyatom
    {      ( TyMap(mkinfo _1.i (ty_info _3),_1.l,_2,_3) )}
| _1 = SET _2 = tyatom
    {      ( TySet(mkinfo _1.i (ty_info _2),_1.l,_2) )}
| _1 = DAESOLVER
    {      ( TyDAESolver(_1.i,_1.l) )}

revtypetupleseq:
  _1 = ty
    {        ([_1])}
| _1 = revtypetupleseq _2 = COMMA _3 = ty
    {        (_3::_1)}

deconpat:
  _1 = SYM _2 = COLON _3 = ty
    {      ( let fi = mkinfo _1.i (ty_info _3) in
        MPatSym(fi,TySym(_1.i, 0, _3)) )}
| _1 = IDENT _2 = IDENT
    {      ( MPatSymApp(mkinfo _1.i _2.i,_1.v,_2.v) )}
| _1 = LIFT _2 = IDENT _3 = COLON _4 = ty
    {      ( let fi = mkinfo _1.i (ty_info _4) in
        MPatLift(fi,_2.v,_4) )}

letpat:
  _1 = IDENT
    {      ( _1.v )}
| _1 = USCORE
    {      ( wildcard )}

term:
  _1 = semi_op
    {      ( _1 )}
| _1 = FUN _2 = IDENT _3 = COLON _4 = tyatom _5 = ARROW _6 = term
    {      ( let fi = mkinfo _1.i (tm_info _6) in
        TmLam(fi,_1.l,_2.v,_4,_6) )}
| _1 = DEF _2 = identparen _3 = parenparamlist _4 = EQ _5 = cons _6 = SEMI _7 = term
    {      ( let fi = mkinfo _1.i (tm_info _7) in
        let (plst,endty) = _3 in
        TmLet(fi,_1.l,_2,endty,List.rev plst,_5,_7,freein_tm _2 _5) )}
| _1 = DEF _2 = pat_atom _3 = EQ _4 = cons _5 = SEMI _6 = term
    {      ( let fi = mkinfo _1.i (tm_info _6) in
        TmMatch(fi,_1.l,_4,[PCase(fi,[Ast.no_auto_esc _2],None,[],_6)]) )}
| _1 = DEF _2 = letpat _3 = COLON _4 = ty _5 = EQ _6 = cons _7 = SEMI _8 = term
    {      ( let fi = mkinfo _1.i (tm_info _8) in
        TmLet(fi,_1.l,_2,Some _4,[],_6,_8,freein_tm _2 _6) )}
| _1 = DEF _2 = letpat _3 = COLON _4 = ty _5 = SEMI _6 = term
    {      ( let fi = mkinfo _1.i (ty_info _4) in
        TmNu(fi,_1.l,_2,_4,_6) )}
| _1 = DEF _2 = IDENT _3 = COMMA _4 = revidentseq _5 = COLON _6 = ty _7 = SEMI _8 = term
    {      ( let fi = mkinfo _1.i (ty_info _6) in
        List.fold_left (fun a x -> TmNu(fi,_1.l,x,_6,a)) _8
                       (_2.v::(List.rev _4)) )}
| _1 = IF _2 = term _3 = THEN _4 = term _5 = ELSE _6 = term
    {      ( let fi = mkinfo _1.i (tm_info _6) in
        TmIf(fi,_1.l,_2,_4,_6) )}
| _1 = LCASE _2 = term _3 = OF _4 = BAR _5 = IDENT _6 = CONS _7 = IDENT _8 = ARROW _9 = term _10 = BAR _11 = LSQUARE _12 = RSQUARE _13 = ARROW _14 = term
    {      ( let fi = mkinfo _1.i (tm_info _14) in
        TmLcase(fi,_1.l,_2,_5.v,_7.v,_9,_14) )}
| _1 = DECON _2 = term _3 = WITH _4 = deconpat _5 = THEN _6 = term _7 = ELSE _8 = term
    {      ( let fi = mkinfo _1.i (tm_info _8) in
	TmCase(fi,_1.l,_2,_4,_6,_8) )}
| _1 = PROJ _2 = UINT _3 = FROM _4 = term
    {      ( let fi = mkinfo _1.i (tm_info _4) in
        TmProj(fi,_1.l,_2.v,_4) )}
| _1 = MATCH _2 = term _3 = WITH _4 = matchcases
    {     ( let fi = mkinfo _1.i _3.i in
       TmMatch(fi,_1.l,_2,List.rev _4) )}
| _1 = ARRAY _2 = DOT _3 = IDENT _4 = atom_list_rev
    {     ( let fi = mkinfo _1.i (tm_info (List.hd _4)) in
       let op = mk_arrayop _3.i _3.v in
       TmArrayOp(fi,_1.l,op,List.rev _4) )}
| _1 = MAP _2 = DOT _3 = IDENT _4 = op_atom_list_rev
    {     ( let fi = if _4 = [] then mkinfo _1.i _3.i
                else mkinfo _1.i (tm_info (List.hd _4)) in
       let op = mk_mapop _3.i _3.v in
       TmMapOp(fi,_1.l,op,List.rev _4) )}
| _1 = SET _2 = DOT _3 = IDENT _4 = op_atom_list_rev
    {     ( let fi = if _4 = [] then mkinfo _1.i _3.i
                else mkinfo _1.i (tm_info (List.hd _4)) in
       let op = mk_setop _3.i _3.v in
       TmSetOp(fi,_1.l,op,List.rev _4) )}
| _1 = DAESOLVER _2 = DOT _3 = IDENT _4 = op_atom_list_rev
    {     ( let fi = if _4 = [] then mkinfo _1.i _3.i
                else mkinfo _1.i (tm_info (List.hd _4)) in
       let op = mk_daesolverop _3.i _3.v in
       TmDAESolverOp(fi,_1.l,op,List.rev _4) )}

op_atom_list_rev:
  
    {     ( [] )}
| _1 = atom_list_rev
    {     ( _1 )}

atom_list_rev:
  _1 = atom
    {      ( [_1] )}
| _1 = atom_list_rev _2 = atom
    {      ( _2::_1 )}

matchcases:
  _1 = BAR _2 = pattern _3 = op_guard _4 = ARROW _5 = term
    {      ( let fi = mkinfo _1.i (tm_info _5) in
	[PCase(fi,[_2],_3,[],_5)] )}
| _1 = matchcases _2 = BAR _3 = pattern _4 = op_guard _5 = ARROW _6 = term
    {      ( let fi = mkinfo _2.i (tm_info _6) in
	(PCase(fi,[_3],_4,[],_6))::_1 )}

op_guard:
  
    {      ( None )}
| _1 = IF _2 = term
    {      ( Some _2 )}

pattern:
  _1 = pat_cons
    {      ( _1 )}

pat_cons:
  _1 = pat_op
    {      ( _1 )}
| _1 = pat_op _2 = CONS _3 = pat_cons
    {      ( let fi = mkinfo (pat_info _1) (pat_info _3) in
	PatCons(fi,_1,_3) )}

pat_op:
  _1 = pat_left
    {      ( _1 )}
| _1 = pat_op _2 = EQ _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(=)" _1 _3 )}
| _1 = pat_op _2 = APXEQ _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(~=)" _1 _3 )}
| _1 = pat_op _2 = MOD _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(mod)" _1 _3 )}
| _1 = pat_op _2 = ADD _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(+)" _1 _3 )}
| _1 = pat_op _2 = SUB _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(-)" _1 _3 )}
| _1 = pat_op _2 = MUL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(*)" _1 _3 )}
| _1 = pat_op _2 = DIV _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(/)" _1 _3 )}
| _1 = pat_op _2 = LESS _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(<)" _1 _3 )}
| _1 = pat_op _2 = LESSEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(<=)" _1 _3 )}
| _1 = pat_op _2 = GREAT _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(>)" _1 _3 )}
| _1 = pat_op _2 = GREATEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(>=)" _1 _3 )}
| _1 = pat_op _2 = EQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(==)" _1 _3 )}
| _1 = pat_op _2 = NOTEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(!=)" _1 _3 )}
| _1 = pat_op _2 = DOTADD _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(+.)" _1 _3 )}
| _1 = pat_op _2 = DOTSUB _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(-.)" _1 _3 )}
| _1 = pat_op _2 = DOTMUL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(*.)" _1 _3 )}
| _1 = pat_op _2 = DOTDIV _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(/.)" _1 _3 )}
| _1 = pat_op _2 = DOTLESS _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(<.)" _1 _3 )}
| _1 = pat_op _2 = DOTLESSEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(<=.)" _1 _3 )}
| _1 = pat_op _2 = DOTGREAT _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(>.)" _1 _3 )}
| _1 = pat_op _2 = DOTGREATEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(>=.)" _1 _3 )}
| _1 = pat_op _2 = DOTEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(==.)" _1 _3 )}
| _1 = pat_op _2 = DOTNOTEQUAL _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(!=.)" _1 _3 )}
| _1 = NOT _2 = pat_op
    {      ( mk_unpat_op (mkinfo _1.i (pat_info _2)) _1.l "(!)" _2 )}
| _1 = pat_op _2 = AND _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(&&)" _1 _3 )}
| _1 = pat_op _2 = OR _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(||)" _1 _3 )}
| _1 = pat_op _2 = SEMI _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(;)" _1 _3 )}
| _1 = pat_op _2 = EQSEMI _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(;;)" _1 _3 )}
| _1 = pat_op _2 = PLUSPLUS _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(++)" _1 _3 )}
| _1 = pat_op _2 = EXP _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(^)" _1 _3 )}
| _1 = pat_op _2 = DOTEXP _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(^.)" _1 _3 )}
| _1 = pat_op _2 = LONGARROW _3 = pat_op
    {      ( mk_binpat_op (mkpatinfo _1 _3) _2.l "(-->)" _1 _3 )}
| _1 = pat_op _2 = SQUOTE
    {      ( mk_unpat_op (mkinfo (pat_info _1) _2.i) _2.l "(')" _1 )}
| _1 = SUB _2 = pat_op %prec UNARYMINUS
    {      ( mk_unpat_op (mkinfo _1.i (pat_info _2)) _1.l "(--)" _2 )}
| _1 = DOTSUB _2 = pat_op %prec UNARYMINUS
    {      ( mk_unpat_op (mkinfo _1.i (pat_info _2)) _1.l "(--.)" _2 )}

pat_left:
  _1 = pat_atom
    {      ( _1 )}
| _1 = pat_left _2 = pat_atom
    {      ( let fi = mkinfo (pat_info _1) (pat_info _2) in
	PatSymApp(fi,_1,_2) )}
| _1 = LIFT _2 = IDENT _3 = COLON _4 = tyatom
    {      ( let fi = mkinfo _1.i (ty_info _4) in
        PatLift(fi,_2.v,_4) )}

pat_atom:
  _1 = IDENT
    {      ( PatVar(_1.i,_1.v,true) )}
| _1 = TRUE
    {      ( PatExpr(_1.i,TmConst(_1.i,_1.l,ConstBool(true))) )}
| _1 = FALSE
    {      ( PatExpr(_1.i,TmConst(_1.i,_1.l,ConstBool(false))) )}
| _1 = UINT
    {      ( PatExpr(_1.i,TmConst(_1.i,_1.l,ConstInt(_1.v))) )}
| _1 = UFLOAT
    {      ( PatExpr(_1.i,TmConst(_1.i,_1.l,ConstReal(_1.v))) )}
| _1 = STRING
    {      ( PatExpr(_1.i,TmConst(_1.i,_1.l,ConstString(_1.v))) )}
| _1 = LPAREN _2 = RPAREN
    {      ( PatExpr(mkinfo _1.i _2.i,TmConst(_1.i,_1.l,ConstUnit)) )}
| _1 = ESCAPE _2 = atom
    {      ( PatExpr(mkinfo _1.i (tm_info _2),_2) )}
| _1 = LSQUARE _2 = RSQUARE
    {      ( let fi = mkinfo _1.i _2.i in
	PatNil(fi) )}
| _1 = LSQUARE _2 = revpatseq _3 = RSQUARE
    {      ( let fi = mkinfo _1.i _3.i in
        List.fold_right (fun p a -> PatCons(fi,p,a))
          (List.rev _2) (PatNil(fi)) )}
| _1 = SYM _2 = COLON _3 = tyatom
    {      ( PatSym(mkinfo _1.i (ty_info _3),TySym(ty_info _3, 0, _3)) )}
| _1 = LPAREN _2 = revpatseq _3 = RPAREN
    {      ( let fi = mkinfo _1.i _3.i in
        match _2 with
	  | [] -> assert false
	  | [p] -> p
	  | ps -> PatTuple(fi,List.rev ps) )}
| _1 = USCORE
    {      ( PatWildcard(_1.i) )}

revpatseq:
  _1 = pattern
    {        ([_1])}
| _1 = revpatseq _2 = COMMA _3 = pattern
    {        (_3::_1)}

parenparamlist:
  _1 = revtmtyseq _2 = RPAREN _3 = rettype
    {      ( (_1,_3) )}
| _1 = RPAREN
    {      ( ([wildcard,TyUnit(_1.i,_1.l)],None) )}

rettype:
  
    {    ( None )}
| _1 = COLON _2 = tyatom
    {    ( Some(_2) )}
| _1 = ARROW _2 = tyatom
    {    ( Some(_2) )}

revtmtyseq:
  _1 = param
    {        ([_1])}
| _1 = revtmtyseq _2 = COMMA _3 = param
    {        (_3::_1)}

param:
  _1 = IDENT _2 = COLON _3 = tyatom
    {      ( (_1.v,_3) )}

semi_op:
  _1 = cons
    {      ( _1 )}
| _1 = cons _2 = SEMI _3 = semi_op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(;)" _1 _3 )}

cons:
  _1 = op
    {      ( _1 )}
| _1 = op _2 = CONS _3 = cons
    {      ( TmCons(mktminfo _1 _3,_2.l,_1,_3) )}

op:
  _1 = app_left
    {      ( _1 )}
| _1 = op _2 = EQ _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(=)" _1 _3 )}
| _1 = op _2 = APXEQ _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(~=)" _1 _3 )}
| _1 = op _2 = LEFTARROW _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(<-)" _1 _3 )}
| _1 = op _2 = MOD _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(mod)" _1 _3 )}
| _1 = op _2 = ADD _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(+)" _1 _3 )}
| _1 = op _2 = SUB _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(-)" _1 _3 )}
| _1 = op _2 = MUL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(*)" _1 _3 )}
| _1 = op _2 = DIV _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(/)" _1 _3 )}
| _1 = op _2 = LESS _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(<)" _1 _3 )}
| _1 = op _2 = LESSEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(<=)" _1 _3 )}
| _1 = op _2 = GREAT _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(>)" _1 _3 )}
| _1 = op _2 = GREATEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(>=)" _1 _3 )}
| _1 = op _2 = EQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(==)" _1 _3 )}
| _1 = op _2 = NOTEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(!=)" _1 _3 )}
| _1 = op _2 = DOTADD _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(+.)" _1 _3 )}
| _1 = op _2 = DOTSUB _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(-.)" _1 _3 )}
| _1 = op _2 = DOTMUL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(*.)" _1 _3 )}
| _1 = op _2 = DOTDIV _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(/.)" _1 _3 )}
| _1 = op _2 = DOTLESS _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(<.)" _1 _3 )}
| _1 = op _2 = DOTLESSEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(<=.)" _1 _3 )}
| _1 = op _2 = DOTGREAT _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(>.)" _1 _3 )}
| _1 = op _2 = DOTGREATEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(>=.)" _1 _3 )}
| _1 = op _2 = DOTEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(==.)" _1 _3 )}
| _1 = op _2 = DOTNOTEQUAL _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(!=.)" _1 _3 )}
| _1 = NOT _2 = op
    {      ( mk_unop (mkinfo _1.i (tm_info _2)) _1.l "(!)" _2 )}
| _1 = op _2 = AND _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(&&)" _1 _3 )}
| _1 = op _2 = OR _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(||)" _1 _3 )}
| _1 = op _2 = EQSEMI _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(;;)" _1 _3 )}
| _1 = op _2 = PLUSPLUS _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(++)" _1 _3 )}
| _1 = op _2 = EXP _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(^)" _1 _3 )}
| _1 = op _2 = DOTEXP _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(^.)" _1 _3 )}
| _1 = op _2 = LONGARROW _3 = op
    {      ( mk_binop (mktminfo _1 _3) _2.l "(-->)" _1 _3 )}
| _1 = op _2 = SQUOTE
    {      ( mk_unop (mkinfo (tm_info _1) _2.i) _2.l "(')" _1 )}
| _1 = SUB _2 = op %prec UNARYMINUS
    {      ( mk_unop (mkinfo _1.i (tm_info _2)) _1.l "(--)" _2 )}
| _1 = DOTSUB _2 = op %prec UNARYMINUS
    {      ( mk_unop (mkinfo _1.i (tm_info _2)) _1.l "(--.)" _2 )}
| _1 = op _2 = POLYEQUAL _3 = op
    {      ( let fi = mktminfo _1 _3 in
        TmEqual(fi,_2.l,_1,_3) )}

app_left:
  _1 = atom
    {      ( _1 )}
| _1 = IDENTPAREN _2 = RPAREN
    {      ( let t1 = TmVar(_1.i,_1.v,0) in
        let t2 = TmConst(_2.i,0,ConstUnit) in
        TmApp(mkinfo _1.i _2.i,0,t1,t2,false) )}
| _1 = IDENTPAREN _2 = revtmseq _3 = RPAREN
    {      ( let tm_ident = TmVar(_1.i,_1.v,0) in
        let fi = mkinfo _1.i _3.i in
        let rec mkapps lst =
          match lst with
          | t::ts -> TmApp(fi,0,mkapps ts,t,false)
          | [] -> tm_ident
        in mkapps _2 )}
| _1 = LPAREN _2 = app_left _3 = PARENAPP _4 = RPAREN
    {      ( let t2 = TmConst(_4.i,0,ConstUnit) in
        TmApp(mkinfo _1.i _4.i,0,_2,t2,false) )}
| _1 = LPAREN _2 = app_left _3 = PARENAPP _4 = revtmseq _5 = RPAREN
    {      ( let fi = mkinfo _1.i _5.i in
        let rec mkapps lst =
          match lst with
          | t::ts -> TmApp(fi,0,mkapps ts,t,false)
          | [] -> _2
        in mkapps _4 )}
| _1 = app_left _2 = app_right
    {      ( let (l,t) = _2 in
        TmApp(mktminfo _1 t,l,_1,t,false) )}
| _1 = FST _2 = atom
    {      ( let fi = mkinfo _1.i (tm_info _2) in
        TmProj(fi,_1.l,0,_2) )}
| _1 = SND _2 = atom
    {      ( let fi = mkinfo _1.i (tm_info _2) in
        TmProj(fi,_1.l,1,_2) )}
| _1 = ERROR _2 = atom
    {      ( let fi = mkinfo _1.i (tm_info _2) in
        TmError(fi,_1.l,_2) )}
| _1 = SPECIALIZE _2 = atom _3 = atom
    {      ( TmApp(mktminfo _2 _3,0,_2,_3,true) )}
| _1 = SPECIALIZE _2 = IDENTPAREN _3 = atom _4 = RPAREN
    {      ( let tm_ident = TmVar(_2.i,_2.v,0) in
        TmApp(mkinfo _1.i _4.i,0,tm_ident,_3,true) )}
| _1 = SPECIALIZE _2 = LPAREN _3 = atom _4 = PARENAPP _5 = atom _6 = RPAREN
    {      ( TmApp(mktminfo _3 _5,0,_3,_5,true) )}

app_right:
  _1 = atom
    {      ( (0,_1) )}
| _1 = METAAPP _2 = atom
    {      ( (_1.l,_2) )}

atom:
  _1 = IDENT
    {      ( if _1.l = 0 then TmVar(_1.i,_1.v,0)
        else  (TmVar(_1.i,_1.v,0)) )}
| _1 = TRUE
    {      ( TmConst(_1.i,_1.l,ConstBool(true)) )}
| _1 = FALSE
    {      ( TmConst(_1.i,_1.l,ConstBool(false)) )}
| _1 = UINT
    {      ( TmConst(_1.i,_1.l,ConstInt(_1.v)) )}
| _1 = UFLOAT
    {      ( TmConst(_1.i,_1.l,ConstReal(_1.v)) )}
| _1 = STRING
    {      ( TmConst(_1.i,_1.l,ConstString(_1.v)) )}
| _1 = PRIMITIVE
    {      ( TmConst(_1.i,_1.l,ConstPrim(_1.v,[])) )}
| _1 = LSQUARE _2 = RSQUARE
    {      ( let fi = mkinfo _1.i _2.i in
	TmNil(fi,_1.l,TyDyn(fi,_1.l)) )}
| _1 = LSQUARE _2 = revtmseq _3 = RSQUARE
    {      ( let fi = mkinfo _1.i _3.i in
        TmList(fi,_1.l,_2) )}
| _1 = LCURLY _2 = term _3 = RCURLY
    {      ( _2 )}
| _1 = LPAREN _2 = RPAREN
    {      ( TmConst(mkinfo _1.i _2.i,_1.l,ConstUnit) )}
| _1 = LPAREN _2 = revtmseq _3 = RPAREN
    {      ( let fi = mkinfo _1.i _3.i in
        match _2 with
	  | [] -> TmConst(fi,_1.l,ConstUnit)
	  | [t] -> if _1.l = 0 then t else  t
	  | ts ->  TmTuple(fi,_1.l,List.rev ts) )}
| _1 = BEGIN _2 = term _3 = END
    {      ( _2 )}
| _1 = DPRINT _2 = LPAREN _3 = term _4 = RPAREN
    {      ( TmDPrint(_3) )}
| _1 = DPRINTTYPE _2 = LPAREN _3 = term _4 = RPAREN
    {      ( TmDPrintType(_3) )}
| _1 = SYMSTR _2 = LPAREN _3 = term _4 = RPAREN
    {      ( TmSymStr(tm_info _3,_3) )}

revidentseq:
  _1 = IDENT
    {        ([_1.v])}
| _1 = revidentseq _2 = COMMA _3 = IDENT
    {        ((_3.v)::_1)}

revtmseq:
  _1 = term
    {        ([_1])}
| _1 = revtmseq _2 = COMMA _3 = term
    {        (_3::_1)}

%%
