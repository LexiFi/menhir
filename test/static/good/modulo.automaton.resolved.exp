State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On FIELD shift to state 1
-- On DATA shift to state 86
-- On program shift to state 100
-- On declarations shift to state 101
-- On declaration shift to state 270
## Reductions:
-- On PROG reduce production declarations ->

State 1:
## Known stack suffix:
## FIELD
## LR(1) items:
declaration -> FIELD . LID formals EQUAL scheme [ PROG FIELD DATA ]
declaration -> FIELD . MUTABLE LID formals EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On MUTABLE shift to state 2
-- On LID shift to state 82
## Reductions:

State 2:
## Known stack suffix:
## FIELD MUTABLE
## LR(1) items:
declaration -> FIELD MUTABLE . LID formals EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On LID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## FIELD MUTABLE LID
## LR(1) items:
declaration -> FIELD MUTABLE LID . formals EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formals shift to state 18
-- On formal shift to state 80
## Reductions:
-- On EQUAL reduce production formals ->

State 4:
## Known stack suffix:
## LPAREN
## LR(1) items:
formal -> LPAREN . LID COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On LID shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LPAREN LID
## LR(1) items:
formal -> LPAREN LID . COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On COLONCOLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## LPAREN LID COLONCOLON
## LR(1) items:
formal -> LPAREN LID COLONCOLON . kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On STAR shift to state 7
-- On kind shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## STAR
## LR(1) items:
kind -> STAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> STAR

State 8:
## Known stack suffix:
## LPAREN LID COLONCOLON kind
## LR(1) items:
formal -> LPAREN LID COLONCOLON kind . RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On RPAREN shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LPAREN LID COLONCOLON kind RPAREN
## LR(1) items:
formal -> LPAREN LID COLONCOLON kind RPAREN . [ LPAREN LID EQUAL DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal -> LPAREN LID COLONCOLON kind RPAREN

State 10:
## Known stack suffix:
## LID
## LR(1) items:
formal -> LID . [ LPAREN LID EQUAL DOT ]
formal -> LID . COLON LID [ LPAREN LID EQUAL DOT ]
formal -> LID . COLON LPAREN LID COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On COLON shift to state 11
## Reductions:
-- On LPAREN reduce production formal -> LID
-- On LID reduce production formal -> LID
-- On EQUAL reduce production formal -> LID
-- On DOT reduce production formal -> LID

State 11:
## Known stack suffix:
## LID COLON
## LR(1) items:
formal -> LID COLON . LID [ LPAREN LID EQUAL DOT ]
formal -> LID COLON . LPAREN LID COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On LPAREN shift to state 12
-- On LID shift to state 17
## Reductions:

State 12:
## Known stack suffix:
## LID COLON LPAREN
## LR(1) items:
formal -> LID COLON LPAREN . LID COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On LID shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## LID COLON LPAREN LID
## LR(1) items:
formal -> LID COLON LPAREN LID . COLONCOLON kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On COLONCOLON shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LID COLON LPAREN LID COLONCOLON
## LR(1) items:
formal -> LID COLON LPAREN LID COLONCOLON . kind RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On STAR shift to state 7
-- On kind shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LID COLON LPAREN LID COLONCOLON kind
## LR(1) items:
formal -> LID COLON LPAREN LID COLONCOLON kind . RPAREN [ LPAREN LID EQUAL DOT ]
## Transitions:
-- On RPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LID COLON LPAREN LID COLONCOLON kind RPAREN
## LR(1) items:
formal -> LID COLON LPAREN LID COLONCOLON kind RPAREN . [ LPAREN LID EQUAL DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal -> LID COLON LPAREN LID COLONCOLON kind RPAREN

State 17:
## Known stack suffix:
## LID COLON LID
## LR(1) items:
formal -> LID COLON LID . [ LPAREN LID EQUAL DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formal -> LID COLON LID

State 18:
## Known stack suffix:
## FIELD MUTABLE LID formals
## LR(1) items:
declaration -> FIELD MUTABLE LID formals . EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On EQUAL shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## FIELD MUTABLE LID formals EQUAL
## LR(1) items:
declaration -> FIELD MUTABLE LID formals EQUAL . scheme [ PROG FIELD DATA ]
## Transitions:
-- On FORALL shift to state 20
-- On scheme shift to state 31
-- On forall shift to state 32
## Reductions:
-- On LPAREN reduce production forall ->
-- On LID reduce production forall ->
-- On LBRACE reduce production forall ->
-- On LANGLE reduce production forall ->
-- On INT reduce production forall ->
-- On BACKSLASH reduce production forall ->

State 20:
## Known stack suffix:
## FORALL
## LR(1) items:
forall -> FORALL . quantifiers DOT [ WILD LPAREN LID LBRACE LANGLE INTEGER INT EXPORT BACKSLASH ]
## Transitions:
-- On LPAREN shift to state 21
-- On LID shift to state 26
-- On quantifiers shift to state 27
-- On quantifier shift to state 30
## Reductions:

State 21:
## Known stack suffix:
## LPAREN
## LR(1) items:
quantifier -> LPAREN . LID COLONCOLON kind RPAREN [ LPAREN LID DOT ]
## Transitions:
-- On LID shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LPAREN LID
## LR(1) items:
quantifier -> LPAREN LID . COLONCOLON kind RPAREN [ LPAREN LID DOT ]
## Transitions:
-- On COLONCOLON shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LPAREN LID COLONCOLON
## LR(1) items:
quantifier -> LPAREN LID COLONCOLON . kind RPAREN [ LPAREN LID DOT ]
## Transitions:
-- On STAR shift to state 7
-- On kind shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LPAREN LID COLONCOLON kind
## LR(1) items:
quantifier -> LPAREN LID COLONCOLON kind . RPAREN [ LPAREN LID DOT ]
## Transitions:
-- On RPAREN shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## LPAREN LID COLONCOLON kind RPAREN
## LR(1) items:
quantifier -> LPAREN LID COLONCOLON kind RPAREN . [ LPAREN LID DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier -> LPAREN LID COLONCOLON kind RPAREN

State 26:
## Known stack suffix:
## LID
## LR(1) items:
quantifier -> LID . [ LPAREN LID DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier -> LID

State 27:
## Known stack suffix:
## FORALL quantifiers
## LR(1) items:
forall -> FORALL quantifiers . DOT [ WILD LPAREN LID LBRACE LANGLE INTEGER INT EXPORT BACKSLASH ]
quantifiers -> quantifiers . quantifier [ LPAREN LID DOT ]
## Transitions:
-- On LPAREN shift to state 21
-- On LID shift to state 26
-- On DOT shift to state 28
-- On quantifier shift to state 29
## Reductions:

State 28:
## Known stack suffix:
## FORALL quantifiers DOT
## LR(1) items:
forall -> FORALL quantifiers DOT . [ WILD LPAREN LID LBRACE LANGLE INTEGER INT EXPORT BACKSLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall -> FORALL quantifiers DOT

State 29:
## Known stack suffix:
## quantifiers quantifier
## LR(1) items:
quantifiers -> quantifiers quantifier . [ LPAREN LID DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifiers -> quantifiers quantifier

State 30:
## Known stack suffix:
## quantifier
## LR(1) items:
quantifiers -> quantifier . [ LPAREN LID DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifiers -> quantifier

State 31:
## Known stack suffix:
## FIELD MUTABLE LID formals EQUAL scheme
## LR(1) items:
declaration -> FIELD MUTABLE LID formals EQUAL scheme . [ PROG FIELD DATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> FIELD MUTABLE LID formals EQUAL scheme

State 32:
## Known stack suffix:
## forall
## LR(1) items:
scheme -> forall . typ [ PROG FIELD DATA ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 79
## Reductions:

State 33:
## Known stack suffix:
## LPAREN
## LR(1) items:
type0 -> LPAREN . RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
type0 -> LPAREN . typ RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
type0 -> LPAREN . typ COMMA types RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 34
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 71
## Reductions:

State 34:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
type0 -> LPAREN RPAREN . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LPAREN RPAREN

State 35:
## Known stack suffix:
## LID
## LR(1) items:
type0 -> LID . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LID

State 36:
## Known stack suffix:
## LBRACE
## LR(1) items:
type0 -> LBRACE . type2 RBRACE [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 68
-- On type1 shift to state 60
-- On type0 shift to state 66
## Reductions:

State 37:
## Known stack suffix:
## LANGLE
## LR(1) items:
type0 -> LANGLE . row RANGLE [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On PLUS shift to state 38
-- On MINUS shift to state 48
-- On LID shift to state 50
-- On row_entry shift to state 51
-- On row shift to state 54
## Reductions:
-- On RANGLE reduce production row ->

State 38:
## Known stack suffix:
## PLUS
## LR(1) items:
row_entry -> PLUS . LID actuals [ SEMI RANGLE ]
## Transitions:
-- On LID shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## PLUS LID
## LR(1) items:
row_entry -> PLUS LID . actuals [ SEMI RANGLE ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 40
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 44
-- On actuals shift to state 47
## Reductions:
-- On SEMI reduce production actuals ->
-- On RANGLE reduce production actuals ->

State 40:
## Known stack suffix:
## LID
## LR(1) items:
actuals -> LID . COLON type0 actuals [ SEMI RANGLE ]
type0 -> LID . [ SEMI RANGLE LPAREN LID LBRACE LANGLE INT ]
## Transitions:
-- On COLON shift to state 41
## Reductions:
-- On SEMI reduce production type0 -> LID
-- On RANGLE reduce production type0 -> LID
-- On LPAREN reduce production type0 -> LID
-- On LID reduce production type0 -> LID
-- On LBRACE reduce production type0 -> LID
-- On LANGLE reduce production type0 -> LID
-- On INT reduce production type0 -> LID

State 41:
## Known stack suffix:
## LID COLON
## LR(1) items:
actuals -> LID COLON . type0 actuals [ SEMI RANGLE ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 43
## Reductions:

State 42:
## Known stack suffix:
## INT
## LR(1) items:
type0 -> INT . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> INT

State 43:
## Known stack suffix:
## LID COLON type0
## LR(1) items:
actuals -> LID COLON type0 . actuals [ SEMI RANGLE ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 40
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 44
-- On actuals shift to state 46
## Reductions:
-- On SEMI reduce production actuals ->
-- On RANGLE reduce production actuals ->

State 44:
## Known stack suffix:
## type0
## LR(1) items:
actuals -> type0 . actuals [ SEMI RANGLE ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 40
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 44
-- On actuals shift to state 45
## Reductions:
-- On SEMI reduce production actuals ->
-- On RANGLE reduce production actuals ->

State 45:
## Known stack suffix:
## type0 actuals
## LR(1) items:
actuals -> type0 actuals . [ SEMI RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production actuals -> type0 actuals

State 46:
## Known stack suffix:
## LID COLON type0 actuals
## LR(1) items:
actuals -> LID COLON type0 actuals . [ SEMI RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production actuals -> LID COLON type0 actuals

State 47:
## Known stack suffix:
## PLUS LID actuals
## LR(1) items:
row_entry -> PLUS LID actuals . [ SEMI RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_entry -> PLUS LID actuals

State 48:
## Known stack suffix:
## MINUS
## LR(1) items:
row_entry -> MINUS . LID [ SEMI RANGLE ]
## Transitions:
-- On LID shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## MINUS LID
## LR(1) items:
row_entry -> MINUS LID . [ SEMI RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_entry -> MINUS LID

State 50:
## Known stack suffix:
## LID
## LR(1) items:
row -> LID . [ RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row -> LID

State 51:
## Known stack suffix:
## row_entry
## LR(1) items:
row -> row_entry . [ RANGLE ]
row -> row_entry . SEMI row [ RANGLE ]
## Transitions:
-- On SEMI shift to state 52
## Reductions:
-- On RANGLE reduce production row -> row_entry

State 52:
## Known stack suffix:
## row_entry SEMI
## LR(1) items:
row -> row_entry SEMI . row [ RANGLE ]
## Transitions:
-- On PLUS shift to state 38
-- On MINUS shift to state 48
-- On LID shift to state 50
-- On row_entry shift to state 51
-- On row shift to state 53
## Reductions:
-- On RANGLE reduce production row ->

State 53:
## Known stack suffix:
## row_entry SEMI row
## LR(1) items:
row -> row_entry SEMI row . [ RANGLE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row -> row_entry SEMI row

State 54:
## Known stack suffix:
## LANGLE row
## LR(1) items:
type0 -> LANGLE row . RANGLE [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On RANGLE shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## LANGLE row RANGLE
## LR(1) items:
type0 -> LANGLE row RANGLE . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LANGLE row RANGLE

State 56:
## Known stack suffix:
## BACKSLASH
## LR(1) items:
type2 -> BACKSLASH . formal DOT type2 [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formal shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## BACKSLASH formal
## LR(1) items:
type2 -> BACKSLASH formal . DOT type2 [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
-- On DOT shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## BACKSLASH formal DOT
## LR(1) items:
type2 -> BACKSLASH formal DOT . type2 [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 59
-- On type1 shift to state 60
-- On type0 shift to state 66
## Reductions:

State 59:
## Known stack suffix:
## BACKSLASH formal DOT type2
## LR(1) items:
type2 -> BACKSLASH formal DOT type2 . [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type2 -> BACKSLASH formal DOT type2

State 60:
## Known stack suffix:
## type1
## LR(1) items:
type1 -> type1 . type0 [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
type1 -> type1 . LID COLON type0 [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
type2 -> type1 . ARROW type2 [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
type2 -> type1 . [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 61
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On ARROW shift to state 64
-- On type0 shift to state 67
## Reductions:
-- On VALUE reduce production type2 -> type1
-- On TYPE reduce production type2 -> type1
-- On RPAREN reduce production type2 -> type1
-- On RBRACE reduce production type2 -> type1
-- On PROG reduce production type2 -> type1
-- On LET reduce production type2 -> type1
-- On IN reduce production type2 -> type1
-- On FIELD reduce production type2 -> type1
-- On EQUAL reduce production type2 -> type1
-- On DOT reduce production type2 -> type1
-- On DATA reduce production type2 -> type1
-- On COMMA reduce production type2 -> type1
-- On COLONCOLON reduce production type2 -> type1
-- On AND reduce production type2 -> type1

State 61:
## Known stack suffix:
## type1 LID
## LR(1) items:
type0 -> LID . [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
type1 -> type1 LID . COLON type0 [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
## Transitions:
-- On COLON shift to state 62
## Reductions:
-- On VALUE reduce production type0 -> LID
-- On TYPE reduce production type0 -> LID
-- On RPAREN reduce production type0 -> LID
-- On RBRACE reduce production type0 -> LID
-- On PROG reduce production type0 -> LID
-- On LPAREN reduce production type0 -> LID
-- On LID reduce production type0 -> LID
-- On LET reduce production type0 -> LID
-- On LBRACE reduce production type0 -> LID
-- On LANGLE reduce production type0 -> LID
-- On INT reduce production type0 -> LID
-- On IN reduce production type0 -> LID
-- On FIELD reduce production type0 -> LID
-- On EQUAL reduce production type0 -> LID
-- On DOT reduce production type0 -> LID
-- On DATA reduce production type0 -> LID
-- On COMMA reduce production type0 -> LID
-- On COLONCOLON reduce production type0 -> LID
-- On ARROW reduce production type0 -> LID
-- On AND reduce production type0 -> LID

State 62:
## Known stack suffix:
## type1 LID COLON
## LR(1) items:
type1 -> type1 LID COLON . type0 [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## type1 LID COLON type0
## LR(1) items:
type1 -> type1 LID COLON type0 . [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type1 -> type1 LID COLON type0

State 64:
## Known stack suffix:
## type1 ARROW
## LR(1) items:
type2 -> type1 ARROW . type2 [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 65
-- On type1 shift to state 60
-- On type0 shift to state 66
## Reductions:

State 65:
## Known stack suffix:
## type1 ARROW type2
## LR(1) items:
type2 -> type1 ARROW type2 . [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type2 -> type1 ARROW type2

State 66:
## Known stack suffix:
## type0
## LR(1) items:
type1 -> type0 . [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type1 -> type0

State 67:
## Known stack suffix:
## type1 type0
## LR(1) items:
type1 -> type1 type0 . [ VALUE TYPE RPAREN RBRACE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type1 -> type1 type0

State 68:
## Known stack suffix:
## LBRACE type2
## LR(1) items:
type0 -> LBRACE type2 . RBRACE [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On RBRACE shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LBRACE type2 RBRACE
## LR(1) items:
type0 -> LBRACE type2 RBRACE . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LBRACE type2 RBRACE

State 70:
## Known stack suffix:
## type2
## LR(1) items:
typ -> type2 . [ VALUE TYPE RPAREN RBRACE PROG LET IN FIELD EQUAL DOT DATA COMMA COLONCOLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> type2

State 71:
## Known stack suffix:
## LPAREN typ
## LR(1) items:
type0 -> LPAREN typ . RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
type0 -> LPAREN typ . COMMA types RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 72
-- On COMMA shift to state 73
## Reductions:

State 72:
## Known stack suffix:
## LPAREN typ RPAREN
## LR(1) items:
type0 -> LPAREN typ RPAREN . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LPAREN typ RPAREN

State 73:
## Known stack suffix:
## LPAREN typ COMMA
## LR(1) items:
type0 -> LPAREN typ COMMA . types RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On types shift to state 74
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 76
## Reductions:

State 74:
## Known stack suffix:
## LPAREN typ COMMA types
## LR(1) items:
type0 -> LPAREN typ COMMA types . RPAREN [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LPAREN typ COMMA types RPAREN
## LR(1) items:
type0 -> LPAREN typ COMMA types RPAREN . [ VALUE TYPE SEMI RPAREN RBRACE RANGLE PROG LPAREN LID LET LBRACE LANGLE INT IN FIELD EQUAL DOT DATA COMMA COLONCOLON BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> LPAREN typ COMMA types RPAREN

State 76:
## Known stack suffix:
## typ
## LR(1) items:
types -> typ . [ RPAREN ]
types -> typ . COMMA types [ RPAREN ]
## Transitions:
-- On COMMA shift to state 77
## Reductions:
-- On RPAREN reduce production types -> typ

State 77:
## Known stack suffix:
## typ COMMA
## LR(1) items:
types -> typ COMMA . types [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On types shift to state 78
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 76
## Reductions:

State 78:
## Known stack suffix:
## typ COMMA types
## LR(1) items:
types -> typ COMMA types . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production types -> typ COMMA types

State 79:
## Known stack suffix:
## forall typ
## LR(1) items:
scheme -> forall typ . [ PROG FIELD DATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scheme -> forall typ

State 80:
## Known stack suffix:
## formal
## LR(1) items:
formals -> formal . formals [ EQUAL ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formals shift to state 81
-- On formal shift to state 80
## Reductions:
-- On EQUAL reduce production formals ->

State 81:
## Known stack suffix:
## formal formals
## LR(1) items:
formals -> formal formals . [ EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formals -> formal formals

State 82:
## Known stack suffix:
## FIELD LID
## LR(1) items:
declaration -> FIELD LID . formals EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formals shift to state 83
-- On formal shift to state 80
## Reductions:
-- On EQUAL reduce production formals ->

State 83:
## Known stack suffix:
## FIELD LID formals
## LR(1) items:
declaration -> FIELD LID formals . EQUAL scheme [ PROG FIELD DATA ]
## Transitions:
-- On EQUAL shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## FIELD LID formals EQUAL
## LR(1) items:
declaration -> FIELD LID formals EQUAL . scheme [ PROG FIELD DATA ]
## Transitions:
-- On FORALL shift to state 20
-- On scheme shift to state 85
-- On forall shift to state 32
## Reductions:
-- On LPAREN reduce production forall ->
-- On LID reduce production forall ->
-- On LBRACE reduce production forall ->
-- On LANGLE reduce production forall ->
-- On INT reduce production forall ->
-- On BACKSLASH reduce production forall ->

State 85:
## Known stack suffix:
## FIELD LID formals EQUAL scheme
## LR(1) items:
declaration -> FIELD LID formals EQUAL scheme . [ PROG FIELD DATA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> FIELD LID formals EQUAL scheme

State 86:
## Known stack suffix:
## DATA
## LR(1) items:
declaration -> DATA . LID [ PROG FIELD DATA ]
declaration -> DATA . LID formals EQUAL opt_bar data_cases [ PROG FIELD DATA ]
## Transitions:
-- On LID shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## DATA LID
## LR(1) items:
declaration -> DATA LID . [ PROG FIELD DATA ]
declaration -> DATA LID . formals EQUAL opt_bar data_cases [ PROG FIELD DATA ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formals shift to state 88
-- On formal shift to state 80
## Reductions:
-- On PROG reduce production declaration -> DATA LID
-- On FIELD reduce production declaration -> DATA LID
-- On EQUAL reduce production formals ->
-- On DATA reduce production declaration -> DATA LID

State 88:
## Known stack suffix:
## DATA LID formals
## LR(1) items:
declaration -> DATA LID formals . EQUAL opt_bar data_cases [ PROG FIELD DATA ]
## Transitions:
-- On EQUAL shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## DATA LID formals EQUAL
## LR(1) items:
declaration -> DATA LID formals EQUAL . opt_bar data_cases [ PROG FIELD DATA ]
## Transitions:
-- On BAR shift to state 90
-- On opt_bar shift to state 91
## Reductions:
-- On UID reduce production opt_bar ->

State 90:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ WILD UID LPAREN LID LBRACE INTEGER EXPORT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_bar -> BAR

State 91:
## Known stack suffix:
## DATA LID formals EQUAL opt_bar
## LR(1) items:
declaration -> DATA LID formals EQUAL opt_bar . data_cases [ PROG FIELD DATA ]
## Transitions:
-- On UID shift to state 92
-- On data_cases shift to state 96
-- On data_case shift to state 99
## Reductions:

State 92:
## Known stack suffix:
## UID
## LR(1) items:
data_case -> UID . data_params [ PROG FIELD DATA BAR ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 93
-- On data_params shift to state 95
## Reductions:
-- On PROG reduce production data_params ->
-- On FIELD reduce production data_params ->
-- On DATA reduce production data_params ->
-- On BAR reduce production data_params ->

State 93:
## Known stack suffix:
## type0
## LR(1) items:
data_params -> type0 . data_params [ PROG FIELD DATA BAR ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On type0 shift to state 93
-- On data_params shift to state 94
## Reductions:
-- On PROG reduce production data_params ->
-- On FIELD reduce production data_params ->
-- On DATA reduce production data_params ->
-- On BAR reduce production data_params ->

State 94:
## Known stack suffix:
## type0 data_params
## LR(1) items:
data_params -> type0 data_params . [ PROG FIELD DATA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_params -> type0 data_params

State 95:
## Known stack suffix:
## UID data_params
## LR(1) items:
data_case -> UID data_params . [ PROG FIELD DATA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_case -> UID data_params

State 96:
## Known stack suffix:
## DATA LID formals EQUAL opt_bar data_cases
## LR(1) items:
data_cases -> data_cases . BAR data_case [ PROG FIELD DATA BAR ]
declaration -> DATA LID formals EQUAL opt_bar data_cases . [ PROG FIELD DATA ]
## Transitions:
-- On BAR shift to state 97
## Reductions:
-- On PROG reduce production declaration -> DATA LID formals EQUAL opt_bar data_cases
-- On FIELD reduce production declaration -> DATA LID formals EQUAL opt_bar data_cases
-- On DATA reduce production declaration -> DATA LID formals EQUAL opt_bar data_cases

State 97:
## Known stack suffix:
## data_cases BAR
## LR(1) items:
data_cases -> data_cases BAR . data_case [ PROG FIELD DATA BAR ]
## Transitions:
-- On UID shift to state 92
-- On data_case shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## data_cases BAR data_case
## LR(1) items:
data_cases -> data_cases BAR data_case . [ PROG FIELD DATA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_cases -> data_cases BAR data_case

State 99:
## Known stack suffix:
## data_case
## LR(1) items:
data_cases -> data_case . [ PROG FIELD DATA BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_cases -> data_case

State 100:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

State 101:
## Known stack suffix:
## declarations
## LR(1) items:
program -> declarations . PROG expression EOF [ # ]
## Transitions:
-- On PROG shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## declarations PROG
## LR(1) items:
program -> declarations PROG . expression EOF [ # ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 268
-- On binding shift to state 212
## Reductions:

State 103:
## Known stack suffix:
## UID
## LR(1) items:
expression0 -> UID . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> UID

State 104:
## Known stack suffix:
## TYPE
## LR(1) items:
binding -> TYPE . type_definitions [ TYPE RBRACE LET IN ]
## Transitions:
-- On LID shift to state 105
-- On type_definitions shift to state 109
-- On type_definition shift to state 112
## Reductions:

State 105:
## Known stack suffix:
## LID
## LR(1) items:
type_definition -> LID . formals EQUAL typ [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On LPAREN shift to state 4
-- On LID shift to state 10
-- On formals shift to state 106
-- On formal shift to state 80
## Reductions:
-- On EQUAL reduce production formals ->

State 106:
## Known stack suffix:
## LID formals
## LR(1) items:
type_definition -> LID formals . EQUAL typ [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On EQUAL shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LID formals EQUAL
## LR(1) items:
type_definition -> LID formals EQUAL . typ [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LID formals EQUAL typ
## LR(1) items:
type_definition -> LID formals EQUAL typ . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definition -> LID formals EQUAL typ

State 109:
## Known stack suffix:
## TYPE type_definitions
## LR(1) items:
binding -> TYPE type_definitions . [ TYPE RBRACE LET IN ]
type_definitions -> type_definitions . AND type_definition [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On AND shift to state 110
## Reductions:
-- On TYPE reduce production binding -> TYPE type_definitions
-- On RBRACE reduce production binding -> TYPE type_definitions
-- On LET reduce production binding -> TYPE type_definitions
-- On IN reduce production binding -> TYPE type_definitions

State 110:
## Known stack suffix:
## type_definitions AND
## LR(1) items:
type_definitions -> type_definitions AND . type_definition [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On LID shift to state 105
-- On type_definition shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## type_definitions AND type_definition
## LR(1) items:
type_definitions -> type_definitions AND type_definition . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definitions -> type_definitions AND type_definition

State 112:
## Known stack suffix:
## type_definition
## LR(1) items:
type_definitions -> type_definition . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definitions -> type_definition

State 113:
## Known stack suffix:
## MATCH
## LR(1) items:
expression0 -> MATCH . expression WITH opt_bar cases END [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 257
-- On binding shift to state 212
## Reductions:

State 114:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression0 -> LPAREN . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LPAREN . expression RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LPAREN . expression COMMA expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LPAREN . expression COLONCOLON typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On RPAREN shift to state 115
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 246
-- On binding shift to state 212
## Reductions:

State 115:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expression0 -> LPAREN RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN RPAREN

State 116:
## Known stack suffix:
## LID
## LR(1) items:
expression0 -> LID . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LID

State 117:
## Known stack suffix:
## LET
## LR(1) items:
binding -> LET . IMPORT record_fields FROM expression [ TYPE RBRACE LET IN ]
binding -> LET . IMPORT EXPORT record_fields FROM expression [ TYPE RBRACE LET IN ]
binding -> LET . value_definitions [ TYPE RBRACE LET IN ]
binding -> LET . REC value_definitions [ TYPE RBRACE LET IN ]
## Transitions:
-- On REC shift to state 118
-- On IMPORT shift to state 234
-- On FORALL shift to state 20
-- On value_definitions shift to state 245
-- On value_definition shift to state 233
-- On forall shift to state 122
## Reductions:
-- On WILD reduce production forall ->
-- On LPAREN reduce production forall ->
-- On LID reduce production forall ->
-- On LBRACE reduce production forall ->
-- On INTEGER reduce production forall ->
-- On EXPORT reduce production forall ->

State 118:
## Known stack suffix:
## LET REC
## LR(1) items:
binding -> LET REC . value_definitions [ TYPE RBRACE LET IN ]
## Transitions:
-- On FORALL shift to state 20
-- On value_definitions shift to state 119
-- On value_definition shift to state 233
-- On forall shift to state 122
## Reductions:
-- On WILD reduce production forall ->
-- On LPAREN reduce production forall ->
-- On LID reduce production forall ->
-- On LBRACE reduce production forall ->
-- On INTEGER reduce production forall ->
-- On EXPORT reduce production forall ->

State 119:
## Known stack suffix:
## LET REC value_definitions
## LR(1) items:
binding -> LET REC value_definitions . [ TYPE RBRACE LET IN ]
value_definitions -> value_definitions . AND value_definition [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On AND shift to state 120
## Reductions:
-- On TYPE reduce production binding -> LET REC value_definitions
-- On RBRACE reduce production binding -> LET REC value_definitions
-- On LET reduce production binding -> LET REC value_definitions
-- On IN reduce production binding -> LET REC value_definitions

State 120:
## Known stack suffix:
## value_definitions AND
## LR(1) items:
value_definitions -> value_definitions AND . value_definition [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On FORALL shift to state 20
-- On value_definition shift to state 121
-- On forall shift to state 122
## Reductions:
-- On WILD reduce production forall ->
-- On LPAREN reduce production forall ->
-- On LID reduce production forall ->
-- On LBRACE reduce production forall ->
-- On INTEGER reduce production forall ->
-- On EXPORT reduce production forall ->

State 121:
## Known stack suffix:
## value_definitions AND value_definition
## LR(1) items:
value_definitions -> value_definitions AND value_definition . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definitions -> value_definitions AND value_definition

State 122:
## Known stack suffix:
## forall
## LR(1) items:
value_definition -> forall . pattern0 equal_expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On WILD shift to state 123
-- On LPAREN shift to state 124
-- On LID shift to state 127
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 133
-- On pattern0 shift to state 169
## Reductions:

State 123:
## Known stack suffix:
## WILD
## LR(1) items:
pattern0 -> WILD . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> WILD

State 124:
## Known stack suffix:
## LPAREN
## LR(1) items:
pattern0 -> LPAREN . RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
pattern0 -> LPAREN . pattern RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
pattern0 -> LPAREN . pattern COMMA patterns RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On RPAREN shift to state 160
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern3 shift to state 152
-- On pattern2 shift to state 155
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On pattern shift to state 161
## Reductions:

State 125:
## Known stack suffix:
## UID
## LR(1) items:
pattern1 -> UID . pattern0s [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On pattern0s shift to state 126
## Default reduction:
-- After reading the next token, reduce production pattern0s ->

State 126:
## Known stack suffix:
## UID pattern0s
## LR(1) items:
pattern0s -> pattern0s . pattern0 [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT DOT COMMA COLONCOLON ARROW ]
pattern1 -> UID pattern0s . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On LPAREN shift to state 124
-- On LID shift to state 127
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 133
-- On pattern0 shift to state 159
## Reductions:
-- On VALUE reduce production pattern1 -> UID pattern0s
-- On RPAREN reduce production pattern1 -> UID pattern0s
-- On RBRACE reduce production pattern1 -> UID pattern0s
-- On DOT reduce production pattern1 -> UID pattern0s
-- On COMMA reduce production pattern1 -> UID pattern0s
-- On COLONCOLON reduce production pattern1 -> UID pattern0s
-- On ARROW reduce production pattern1 -> UID pattern0s

State 127:
## Known stack suffix:
## LID
## LR(1) items:
pattern0 -> LID . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LID

State 128:
## Known stack suffix:
## LBRACE
## LR(1) items:
pattern0 -> LBRACE . row_pattern RBRACE [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
pattern0 -> LBRACE . pattern row_pattern RBRACE [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On VALUE shift to state 129
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On row_pattern shift to state 150
-- On pattern3 shift to state 152
-- On pattern2 shift to state 155
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On pattern shift to state 156
## Reductions:
-- On RBRACE reduce production row_pattern ->

State 129:
## Known stack suffix:
## VALUE
## LR(1) items:
row_pattern -> VALUE . LID EQUAL pattern0 row_pattern [ RBRACE ]
row_pattern -> VALUE . LID row_pattern [ RBRACE ]
row_pattern -> VALUE . EXPORT LID row_pattern [ RBRACE ]
## Transitions:
-- On LID shift to state 130
-- On EXPORT shift to state 138
## Reductions:

State 130:
## Known stack suffix:
## VALUE LID
## LR(1) items:
row_pattern -> VALUE LID . EQUAL pattern0 row_pattern [ RBRACE ]
row_pattern -> VALUE LID . row_pattern [ RBRACE ]
## Transitions:
-- On VALUE shift to state 129
-- On EQUAL shift to state 131
-- On row_pattern shift to state 137
## Reductions:
-- On RBRACE reduce production row_pattern ->

State 131:
## Known stack suffix:
## VALUE LID EQUAL
## LR(1) items:
row_pattern -> VALUE LID EQUAL . pattern0 row_pattern [ RBRACE ]
## Transitions:
-- On WILD shift to state 123
-- On LPAREN shift to state 124
-- On LID shift to state 127
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 133
-- On pattern0 shift to state 135
## Reductions:

State 132:
## Known stack suffix:
## INTEGER
## LR(1) items:
pattern0 -> INTEGER . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> INTEGER

State 133:
## Known stack suffix:
## EXPORT
## LR(1) items:
pattern0 -> EXPORT . LID [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On LID shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## EXPORT LID
## LR(1) items:
pattern0 -> EXPORT LID . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> EXPORT LID

State 135:
## Known stack suffix:
## VALUE LID EQUAL pattern0
## LR(1) items:
row_pattern -> VALUE LID EQUAL pattern0 . row_pattern [ RBRACE ]
## Transitions:
-- On VALUE shift to state 129
-- On row_pattern shift to state 136
## Reductions:
-- On RBRACE reduce production row_pattern ->

State 136:
## Known stack suffix:
## VALUE LID EQUAL pattern0 row_pattern
## LR(1) items:
row_pattern -> VALUE LID EQUAL pattern0 row_pattern . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_pattern -> VALUE LID EQUAL pattern0 row_pattern

State 137:
## Known stack suffix:
## VALUE LID row_pattern
## LR(1) items:
row_pattern -> VALUE LID row_pattern . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_pattern -> VALUE LID row_pattern

State 138:
## Known stack suffix:
## VALUE EXPORT
## LR(1) items:
row_pattern -> VALUE EXPORT . LID row_pattern [ RBRACE ]
## Transitions:
-- On LID shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## VALUE EXPORT LID
## LR(1) items:
row_pattern -> VALUE EXPORT LID . row_pattern [ RBRACE ]
## Transitions:
-- On VALUE shift to state 129
-- On row_pattern shift to state 140
## Reductions:
-- On RBRACE reduce production row_pattern ->

State 140:
## Known stack suffix:
## VALUE EXPORT LID row_pattern
## LR(1) items:
row_pattern -> VALUE EXPORT LID row_pattern . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production row_pattern -> VALUE EXPORT LID row_pattern

State 141:
## Known stack suffix:
## LID
## LR(1) items:
pattern0 -> LID . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
pattern2 -> LID . AS pattern2 [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On AS shift to state 142
## Reductions:
-- On VALUE reduce production pattern0 -> LID
-- On RPAREN reduce production pattern0 -> LID
-- On RBRACE reduce production pattern0 -> LID
-- On DOT reduce production pattern0 -> LID
-- On COMMA reduce production pattern0 -> LID
-- On COLONCOLON reduce production pattern0 -> LID
-- On ARROW reduce production pattern0 -> LID

State 142:
## Known stack suffix:
## LID AS
## LR(1) items:
pattern2 -> LID AS . pattern2 [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern2 shift to state 149
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
## Reductions:

State 143:
## Known stack suffix:
## EXPORT
## LR(1) items:
pattern0 -> EXPORT . LID [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
pattern2 -> EXPORT . LID AS pattern2 [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On LID shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## EXPORT LID
## LR(1) items:
pattern0 -> EXPORT LID . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
pattern2 -> EXPORT LID . AS pattern2 [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On AS shift to state 145
## Reductions:
-- On VALUE reduce production pattern0 -> EXPORT LID
-- On RPAREN reduce production pattern0 -> EXPORT LID
-- On RBRACE reduce production pattern0 -> EXPORT LID
-- On DOT reduce production pattern0 -> EXPORT LID
-- On COMMA reduce production pattern0 -> EXPORT LID
-- On COLONCOLON reduce production pattern0 -> EXPORT LID
-- On ARROW reduce production pattern0 -> EXPORT LID

State 145:
## Known stack suffix:
## EXPORT LID AS
## LR(1) items:
pattern2 -> EXPORT LID AS . pattern2 [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern2 shift to state 146
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
## Reductions:

State 146:
## Known stack suffix:
## EXPORT LID AS pattern2
## LR(1) items:
pattern2 -> EXPORT LID AS pattern2 . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern2 -> EXPORT LID AS pattern2

State 147:
## Known stack suffix:
## pattern1
## LR(1) items:
pattern2 -> pattern1 . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern2 -> pattern1

State 148:
## Known stack suffix:
## pattern0
## LR(1) items:
pattern1 -> pattern0 . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern1 -> pattern0

State 149:
## Known stack suffix:
## LID AS pattern2
## LR(1) items:
pattern2 -> LID AS pattern2 . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern2 -> LID AS pattern2

State 150:
## Known stack suffix:
## LBRACE row_pattern
## LR(1) items:
pattern0 -> LBRACE row_pattern . RBRACE [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On RBRACE shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## LBRACE row_pattern RBRACE
## LR(1) items:
pattern0 -> LBRACE row_pattern RBRACE . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LBRACE row_pattern RBRACE

State 152:
## Known stack suffix:
## pattern3
## LR(1) items:
pattern -> pattern3 . [ VALUE RPAREN RBRACE DOT COMMA ]
pattern3 -> pattern3 . COLONCOLON typ [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ]
## Transitions:
-- On COLONCOLON shift to state 153
## Reductions:
-- On VALUE reduce production pattern -> pattern3
-- On RPAREN reduce production pattern -> pattern3
-- On RBRACE reduce production pattern -> pattern3
-- On DOT reduce production pattern -> pattern3
-- On COMMA reduce production pattern -> pattern3

State 153:
## Known stack suffix:
## pattern3 COLONCOLON
## LR(1) items:
pattern3 -> pattern3 COLONCOLON . typ [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## pattern3 COLONCOLON typ
## LR(1) items:
pattern3 -> pattern3 COLONCOLON typ . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern3 -> pattern3 COLONCOLON typ

State 155:
## Known stack suffix:
## pattern2
## LR(1) items:
pattern3 -> pattern2 . [ VALUE RPAREN RBRACE DOT COMMA COLONCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern3 -> pattern2

State 156:
## Known stack suffix:
## LBRACE pattern
## LR(1) items:
pattern0 -> LBRACE pattern . row_pattern RBRACE [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On VALUE shift to state 129
-- On row_pattern shift to state 157
## Reductions:
-- On RBRACE reduce production row_pattern ->

State 157:
## Known stack suffix:
## LBRACE pattern row_pattern
## LR(1) items:
pattern0 -> LBRACE pattern row_pattern . RBRACE [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On RBRACE shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## LBRACE pattern row_pattern RBRACE
## LR(1) items:
pattern0 -> LBRACE pattern row_pattern RBRACE . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LBRACE pattern row_pattern RBRACE

State 159:
## Known stack suffix:
## pattern0s pattern0
## LR(1) items:
pattern0s -> pattern0s pattern0 . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0s -> pattern0s pattern0

State 160:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
pattern0 -> LPAREN RPAREN . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN RPAREN

State 161:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern0 -> LPAREN pattern . RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
pattern0 -> LPAREN pattern . COMMA patterns RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On RPAREN shift to state 162
-- On COMMA shift to state 163
## Reductions:

State 162:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
pattern0 -> LPAREN pattern RPAREN . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN pattern RPAREN

State 163:
## Known stack suffix:
## LPAREN pattern COMMA
## LR(1) items:
pattern0 -> LPAREN pattern COMMA . patterns RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On patterns shift to state 164
-- On pattern3 shift to state 152
-- On pattern2 shift to state 155
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On pattern shift to state 166
## Reductions:

State 164:
## Known stack suffix:
## LPAREN pattern COMMA patterns
## LR(1) items:
pattern0 -> LPAREN pattern COMMA patterns . RPAREN [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
-- On RPAREN shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## LPAREN pattern COMMA patterns RPAREN
## LR(1) items:
pattern0 -> LPAREN pattern COMMA patterns RPAREN . [ WILD VALUE RPAREN RBRACE LPAREN LID LBRACE INTEGER EXPORT EQUAL DOT COMMA COLONCOLON ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN pattern COMMA patterns RPAREN

State 166:
## Known stack suffix:
## pattern
## LR(1) items:
patterns -> pattern . [ RPAREN ]
patterns -> pattern . COMMA patterns [ RPAREN ]
## Transitions:
-- On COMMA shift to state 167
## Reductions:
-- On RPAREN reduce production patterns -> pattern

State 167:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
patterns -> pattern COMMA . patterns [ RPAREN ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On patterns shift to state 168
-- On pattern3 shift to state 152
-- On pattern2 shift to state 155
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On pattern shift to state 166
## Reductions:

State 168:
## Known stack suffix:
## pattern COMMA patterns
## LR(1) items:
patterns -> pattern COMMA patterns . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patterns -> pattern COMMA patterns

State 169:
## Known stack suffix:
## forall pattern0
## LR(1) items:
value_definition -> forall pattern0 . equal_expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On WILD shift to state 123
-- On LPAREN shift to state 124
-- On LID shift to state 127
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 133
-- On EQUAL shift to state 170
-- On COLONCOLON shift to state 226
-- On pattern0 shift to state 230
-- On equal_expression shift to state 232
## Reductions:

State 170:
## Known stack suffix:
## EQUAL
## LR(1) items:
equal_expression -> EQUAL . expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 225
-- On binding shift to state 212
## Reductions:

State 171:
## Known stack suffix:
## LBRACE
## LR(1) items:
expression0 -> LBRACE . expression bindings RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LBRACE . bindings RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 217
-- On bindings shift to state 222
-- On binding shift to state 224
## Reductions:
-- On RBRACE reduce production bindings ->

State 172:
## Known stack suffix:
## INTEGER
## LR(1) items:
expression0 -> INTEGER . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> INTEGER

State 173:
## Known stack suffix:
## EXISTS
## LR(1) items:
expression400 -> EXISTS . quantifiers DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On LPAREN shift to state 21
-- On LID shift to state 26
-- On quantifiers shift to state 174
-- On quantifier shift to state 30
## Reductions:

State 174:
## Known stack suffix:
## EXISTS quantifiers
## LR(1) items:
expression400 -> EXISTS quantifiers . DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
quantifiers -> quantifiers . quantifier [ LPAREN LID DOT ]
## Transitions:
-- On LPAREN shift to state 21
-- On LID shift to state 26
-- On DOT shift to state 175
-- On quantifier shift to state 29
## Reductions:

State 175:
## Known stack suffix:
## EXISTS quantifiers DOT
## LR(1) items:
expression400 -> EXISTS quantifiers DOT . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 215
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On binding shift to state 212
## Reductions:

State 176:
## Known stack suffix:
## DISPLAY
## LR(1) items:
expression100 -> DISPLAY . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On expression0 shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## DISPLAY expression0
## LR(1) items:
expression0 -> expression0 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression100 -> DISPLAY expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On DOT shift to state 178
## Reductions:
-- On WITH reduce production expression100 -> DISPLAY expression0
-- On UID reduce production expression100 -> DISPLAY expression0
-- On TYPE reduce production expression100 -> DISPLAY expression0
-- On SEMI reduce production expression100 -> DISPLAY expression0
-- On RPAREN reduce production expression100 -> DISPLAY expression0
-- On RBRACE reduce production expression100 -> DISPLAY expression0
-- On PLUS reduce production expression100 -> DISPLAY expression0
-- On MINUS reduce production expression100 -> DISPLAY expression0
-- On MATCH reduce production expression100 -> DISPLAY expression0
-- On LPAREN reduce production expression100 -> DISPLAY expression0
-- On LID reduce production expression100 -> DISPLAY expression0
-- On LET reduce production expression100 -> DISPLAY expression0
-- On LBRACE reduce production expression100 -> DISPLAY expression0
-- On INTEGER reduce production expression100 -> DISPLAY expression0
-- On INFIXOP4 reduce production expression100 -> DISPLAY expression0
-- On INFIXOP3 reduce production expression100 -> DISPLAY expression0
-- On INFIXOP2 reduce production expression100 -> DISPLAY expression0
-- On INFIXOP1 reduce production expression100 -> DISPLAY expression0
-- On INFIXOP0 reduce production expression100 -> DISPLAY expression0
-- On IN reduce production expression100 -> DISPLAY expression0
-- On EQUAL reduce production expression100 -> DISPLAY expression0
-- On EOF reduce production expression100 -> DISPLAY expression0
-- On END reduce production expression100 -> DISPLAY expression0
-- On COMMA reduce production expression100 -> DISPLAY expression0
-- On COLONCOLON reduce production expression100 -> DISPLAY expression0
-- On BAR reduce production expression100 -> DISPLAY expression0
-- On AND reduce production expression100 -> DISPLAY expression0

State 178:
## Known stack suffix:
## expression0 DOT
## LR(1) items:
expression0 -> expression0 DOT . LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On LID shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## expression0 DOT LID
## LR(1) items:
expression0 -> expression0 DOT LID . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> expression0 DOT LID

State 180:
## Known stack suffix:
## BACKSLASH
## LR(1) items:
expression400 -> BACKSLASH . pattern DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern3 shift to state 152
-- On pattern2 shift to state 155
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On pattern shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## BACKSLASH pattern
## LR(1) items:
expression400 -> BACKSLASH pattern . DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On DOT shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## BACKSLASH pattern DOT
## LR(1) items:
expression400 -> BACKSLASH pattern DOT . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 183
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On binding shift to state 212
## Reductions:

State 183:
## Known stack suffix:
## BACKSLASH pattern DOT expression400
## LR(1) items:
expression400 -> BACKSLASH pattern DOT expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> BACKSLASH pattern DOT expression400

State 184:
## Known stack suffix:
## expression300
## LR(1) items:
expression400 -> expression300 . SEMI expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
expression400 -> expression300 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On SEMI shift to state 185
## Reductions:
-- On WITH reduce production expression400 -> expression300
-- On TYPE reduce production expression400 -> expression300
-- On RPAREN reduce production expression400 -> expression300
-- On RBRACE reduce production expression400 -> expression300
-- On LET reduce production expression400 -> expression300
-- On IN reduce production expression400 -> expression300
-- On EOF reduce production expression400 -> expression300
-- On END reduce production expression400 -> expression300
-- On COMMA reduce production expression400 -> expression300
-- On COLONCOLON reduce production expression400 -> expression300
-- On BAR reduce production expression400 -> expression300
-- On AND reduce production expression400 -> expression300

State 185:
## Known stack suffix:
## expression300 SEMI
## LR(1) items:
expression400 -> expression300 SEMI . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 186
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On binding shift to state 212
## Reductions:

State 186:
## Known stack suffix:
## expression300 SEMI expression400
## LR(1) items:
expression400 -> expression300 SEMI expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> expression300 SEMI expression400

State 187:
## Known stack suffix:
## expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression300 -> expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On PLUS shift to state 188
-- On MINUS shift to state 197
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
-- On INFIXOP2 shift to state 199
-- On INFIXOP1 shift to state 201
-- On INFIXOP0 shift to state 203
-- On EQUAL shift to state 205
## Reductions:
-- On WITH reduce production expression300 -> expression200
-- On TYPE reduce production expression300 -> expression200
-- On SEMI reduce production expression300 -> expression200
-- On RPAREN reduce production expression300 -> expression200
-- On RBRACE reduce production expression300 -> expression200
-- On LET reduce production expression300 -> expression200
-- On IN reduce production expression300 -> expression200
-- On EOF reduce production expression300 -> expression200
-- On END reduce production expression300 -> expression200
-- On COMMA reduce production expression300 -> expression200
-- On COLONCOLON reduce production expression300 -> expression200
-- On BAR reduce production expression300 -> expression200
-- On AND reduce production expression300 -> expression200

State 188:
## Known stack suffix:
## expression200 PLUS
## LR(1) items:
expression200 -> expression200 PLUS . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 189
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 189:
## Known stack suffix:
## expression200 PLUS expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 PLUS expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
## Reductions:
-- On WITH reduce production expression200 -> expression200 PLUS expression200
-- On TYPE reduce production expression200 -> expression200 PLUS expression200
-- On SEMI reduce production expression200 -> expression200 PLUS expression200
-- On RPAREN reduce production expression200 -> expression200 PLUS expression200
-- On RBRACE reduce production expression200 -> expression200 PLUS expression200
-- On PLUS reduce production expression200 -> expression200 PLUS expression200
-- On MINUS reduce production expression200 -> expression200 PLUS expression200
-- On LET reduce production expression200 -> expression200 PLUS expression200
-- On INFIXOP2 reduce production expression200 -> expression200 PLUS expression200
-- On INFIXOP1 reduce production expression200 -> expression200 PLUS expression200
-- On INFIXOP0 reduce production expression200 -> expression200 PLUS expression200
-- On IN reduce production expression200 -> expression200 PLUS expression200
-- On EQUAL reduce production expression200 -> expression200 PLUS expression200
-- On EOF reduce production expression200 -> expression200 PLUS expression200
-- On END reduce production expression200 -> expression200 PLUS expression200
-- On COMMA reduce production expression200 -> expression200 PLUS expression200
-- On COLONCOLON reduce production expression200 -> expression200 PLUS expression200
-- On BAR reduce production expression200 -> expression200 PLUS expression200
-- On AND reduce production expression200 -> expression200 PLUS expression200

State 190:
## Known stack suffix:
## expression200 INFIXOP4
## LR(1) items:
expression200 -> expression200 INFIXOP4 . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 191
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 191:
## Known stack suffix:
## expression200 INFIXOP4 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 INFIXOP4 expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 190
## Reductions:
-- On WITH reduce production expression200 -> expression200 INFIXOP4 expression200
-- On TYPE reduce production expression200 -> expression200 INFIXOP4 expression200
-- On SEMI reduce production expression200 -> expression200 INFIXOP4 expression200
-- On RPAREN reduce production expression200 -> expression200 INFIXOP4 expression200
-- On RBRACE reduce production expression200 -> expression200 INFIXOP4 expression200
-- On PLUS reduce production expression200 -> expression200 INFIXOP4 expression200
-- On MINUS reduce production expression200 -> expression200 INFIXOP4 expression200
-- On LET reduce production expression200 -> expression200 INFIXOP4 expression200
-- On INFIXOP3 reduce production expression200 -> expression200 INFIXOP4 expression200
-- On INFIXOP2 reduce production expression200 -> expression200 INFIXOP4 expression200
-- On INFIXOP1 reduce production expression200 -> expression200 INFIXOP4 expression200
-- On INFIXOP0 reduce production expression200 -> expression200 INFIXOP4 expression200
-- On IN reduce production expression200 -> expression200 INFIXOP4 expression200
-- On EQUAL reduce production expression200 -> expression200 INFIXOP4 expression200
-- On EOF reduce production expression200 -> expression200 INFIXOP4 expression200
-- On END reduce production expression200 -> expression200 INFIXOP4 expression200
-- On COMMA reduce production expression200 -> expression200 INFIXOP4 expression200
-- On COLONCOLON reduce production expression200 -> expression200 INFIXOP4 expression200
-- On BAR reduce production expression200 -> expression200 INFIXOP4 expression200
-- On AND reduce production expression200 -> expression200 INFIXOP4 expression200

State 192:
## Known stack suffix:
## expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression100 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On expression0 shift to state 193
## Reductions:
-- On WITH reduce production expression200 -> expression100
-- On TYPE reduce production expression200 -> expression100
-- On SEMI reduce production expression200 -> expression100
-- On RPAREN reduce production expression200 -> expression100
-- On RBRACE reduce production expression200 -> expression100
-- On PLUS reduce production expression200 -> expression100
-- On MINUS reduce production expression200 -> expression100
-- On LET reduce production expression200 -> expression100
-- On INFIXOP4 reduce production expression200 -> expression100
-- On INFIXOP3 reduce production expression200 -> expression100
-- On INFIXOP2 reduce production expression200 -> expression100
-- On INFIXOP1 reduce production expression200 -> expression100
-- On INFIXOP0 reduce production expression200 -> expression100
-- On IN reduce production expression200 -> expression100
-- On EQUAL reduce production expression200 -> expression100
-- On EOF reduce production expression200 -> expression100
-- On END reduce production expression200 -> expression100
-- On COMMA reduce production expression200 -> expression100
-- On COLONCOLON reduce production expression200 -> expression100
-- On BAR reduce production expression200 -> expression100
-- On AND reduce production expression200 -> expression100

State 193:
## Known stack suffix:
## expression100 expression0
## LR(1) items:
expression0 -> expression0 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression100 -> expression100 expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On DOT shift to state 178
## Reductions:
-- On WITH reduce production expression100 -> expression100 expression0
-- On UID reduce production expression100 -> expression100 expression0
-- On TYPE reduce production expression100 -> expression100 expression0
-- On SEMI reduce production expression100 -> expression100 expression0
-- On RPAREN reduce production expression100 -> expression100 expression0
-- On RBRACE reduce production expression100 -> expression100 expression0
-- On PLUS reduce production expression100 -> expression100 expression0
-- On MINUS reduce production expression100 -> expression100 expression0
-- On MATCH reduce production expression100 -> expression100 expression0
-- On LPAREN reduce production expression100 -> expression100 expression0
-- On LID reduce production expression100 -> expression100 expression0
-- On LET reduce production expression100 -> expression100 expression0
-- On LBRACE reduce production expression100 -> expression100 expression0
-- On INTEGER reduce production expression100 -> expression100 expression0
-- On INFIXOP4 reduce production expression100 -> expression100 expression0
-- On INFIXOP3 reduce production expression100 -> expression100 expression0
-- On INFIXOP2 reduce production expression100 -> expression100 expression0
-- On INFIXOP1 reduce production expression100 -> expression100 expression0
-- On INFIXOP0 reduce production expression100 -> expression100 expression0
-- On IN reduce production expression100 -> expression100 expression0
-- On EQUAL reduce production expression100 -> expression100 expression0
-- On EOF reduce production expression100 -> expression100 expression0
-- On END reduce production expression100 -> expression100 expression0
-- On COMMA reduce production expression100 -> expression100 expression0
-- On COLONCOLON reduce production expression100 -> expression100 expression0
-- On BAR reduce production expression100 -> expression100 expression0
-- On AND reduce production expression100 -> expression100 expression0

State 194:
## Known stack suffix:
## expression0
## LR(1) items:
expression0 -> expression0 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression100 -> expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On DOT shift to state 178
## Reductions:
-- On WITH reduce production expression100 -> expression0
-- On UID reduce production expression100 -> expression0
-- On TYPE reduce production expression100 -> expression0
-- On SEMI reduce production expression100 -> expression0
-- On RPAREN reduce production expression100 -> expression0
-- On RBRACE reduce production expression100 -> expression0
-- On PLUS reduce production expression100 -> expression0
-- On MINUS reduce production expression100 -> expression0
-- On MATCH reduce production expression100 -> expression0
-- On LPAREN reduce production expression100 -> expression0
-- On LID reduce production expression100 -> expression0
-- On LET reduce production expression100 -> expression0
-- On LBRACE reduce production expression100 -> expression0
-- On INTEGER reduce production expression100 -> expression0
-- On INFIXOP4 reduce production expression100 -> expression0
-- On INFIXOP3 reduce production expression100 -> expression0
-- On INFIXOP2 reduce production expression100 -> expression0
-- On INFIXOP1 reduce production expression100 -> expression0
-- On INFIXOP0 reduce production expression100 -> expression0
-- On IN reduce production expression100 -> expression0
-- On EQUAL reduce production expression100 -> expression0
-- On EOF reduce production expression100 -> expression0
-- On END reduce production expression100 -> expression0
-- On COMMA reduce production expression100 -> expression0
-- On COLONCOLON reduce production expression100 -> expression0
-- On BAR reduce production expression100 -> expression0
-- On AND reduce production expression100 -> expression0

State 195:
## Known stack suffix:
## expression200 INFIXOP3
## LR(1) items:
expression200 -> expression200 INFIXOP3 . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 196
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 196:
## Known stack suffix:
## expression200 INFIXOP3 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 INFIXOP3 expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 190
## Reductions:
-- On WITH reduce production expression200 -> expression200 INFIXOP3 expression200
-- On TYPE reduce production expression200 -> expression200 INFIXOP3 expression200
-- On SEMI reduce production expression200 -> expression200 INFIXOP3 expression200
-- On RPAREN reduce production expression200 -> expression200 INFIXOP3 expression200
-- On RBRACE reduce production expression200 -> expression200 INFIXOP3 expression200
-- On PLUS reduce production expression200 -> expression200 INFIXOP3 expression200
-- On MINUS reduce production expression200 -> expression200 INFIXOP3 expression200
-- On LET reduce production expression200 -> expression200 INFIXOP3 expression200
-- On INFIXOP3 reduce production expression200 -> expression200 INFIXOP3 expression200
-- On INFIXOP2 reduce production expression200 -> expression200 INFIXOP3 expression200
-- On INFIXOP1 reduce production expression200 -> expression200 INFIXOP3 expression200
-- On INFIXOP0 reduce production expression200 -> expression200 INFIXOP3 expression200
-- On IN reduce production expression200 -> expression200 INFIXOP3 expression200
-- On EQUAL reduce production expression200 -> expression200 INFIXOP3 expression200
-- On EOF reduce production expression200 -> expression200 INFIXOP3 expression200
-- On END reduce production expression200 -> expression200 INFIXOP3 expression200
-- On COMMA reduce production expression200 -> expression200 INFIXOP3 expression200
-- On COLONCOLON reduce production expression200 -> expression200 INFIXOP3 expression200
-- On BAR reduce production expression200 -> expression200 INFIXOP3 expression200
-- On AND reduce production expression200 -> expression200 INFIXOP3 expression200

State 197:
## Known stack suffix:
## expression200 MINUS
## LR(1) items:
expression200 -> expression200 MINUS . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 198
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 198:
## Known stack suffix:
## expression200 MINUS expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 MINUS expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
## Reductions:
-- On WITH reduce production expression200 -> expression200 MINUS expression200
-- On TYPE reduce production expression200 -> expression200 MINUS expression200
-- On SEMI reduce production expression200 -> expression200 MINUS expression200
-- On RPAREN reduce production expression200 -> expression200 MINUS expression200
-- On RBRACE reduce production expression200 -> expression200 MINUS expression200
-- On PLUS reduce production expression200 -> expression200 MINUS expression200
-- On MINUS reduce production expression200 -> expression200 MINUS expression200
-- On LET reduce production expression200 -> expression200 MINUS expression200
-- On INFIXOP2 reduce production expression200 -> expression200 MINUS expression200
-- On INFIXOP1 reduce production expression200 -> expression200 MINUS expression200
-- On INFIXOP0 reduce production expression200 -> expression200 MINUS expression200
-- On IN reduce production expression200 -> expression200 MINUS expression200
-- On EQUAL reduce production expression200 -> expression200 MINUS expression200
-- On EOF reduce production expression200 -> expression200 MINUS expression200
-- On END reduce production expression200 -> expression200 MINUS expression200
-- On COMMA reduce production expression200 -> expression200 MINUS expression200
-- On COLONCOLON reduce production expression200 -> expression200 MINUS expression200
-- On BAR reduce production expression200 -> expression200 MINUS expression200
-- On AND reduce production expression200 -> expression200 MINUS expression200

State 199:
## Known stack suffix:
## expression200 INFIXOP2
## LR(1) items:
expression200 -> expression200 INFIXOP2 . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 200
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 200:
## Known stack suffix:
## expression200 INFIXOP2 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 INFIXOP2 expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
## Reductions:
-- On WITH reduce production expression200 -> expression200 INFIXOP2 expression200
-- On TYPE reduce production expression200 -> expression200 INFIXOP2 expression200
-- On SEMI reduce production expression200 -> expression200 INFIXOP2 expression200
-- On RPAREN reduce production expression200 -> expression200 INFIXOP2 expression200
-- On RBRACE reduce production expression200 -> expression200 INFIXOP2 expression200
-- On PLUS reduce production expression200 -> expression200 INFIXOP2 expression200
-- On MINUS reduce production expression200 -> expression200 INFIXOP2 expression200
-- On LET reduce production expression200 -> expression200 INFIXOP2 expression200
-- On INFIXOP2 reduce production expression200 -> expression200 INFIXOP2 expression200
-- On INFIXOP1 reduce production expression200 -> expression200 INFIXOP2 expression200
-- On INFIXOP0 reduce production expression200 -> expression200 INFIXOP2 expression200
-- On IN reduce production expression200 -> expression200 INFIXOP2 expression200
-- On EQUAL reduce production expression200 -> expression200 INFIXOP2 expression200
-- On EOF reduce production expression200 -> expression200 INFIXOP2 expression200
-- On END reduce production expression200 -> expression200 INFIXOP2 expression200
-- On COMMA reduce production expression200 -> expression200 INFIXOP2 expression200
-- On COLONCOLON reduce production expression200 -> expression200 INFIXOP2 expression200
-- On BAR reduce production expression200 -> expression200 INFIXOP2 expression200
-- On AND reduce production expression200 -> expression200 INFIXOP2 expression200

State 201:
## Known stack suffix:
## expression200 INFIXOP1
## LR(1) items:
expression200 -> expression200 INFIXOP1 . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 202
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 202:
## Known stack suffix:
## expression200 INFIXOP1 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 INFIXOP1 expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On PLUS shift to state 188
-- On MINUS shift to state 197
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
-- On INFIXOP2 shift to state 199
-- On INFIXOP1 shift to state 201
## Reductions:
-- On WITH reduce production expression200 -> expression200 INFIXOP1 expression200
-- On TYPE reduce production expression200 -> expression200 INFIXOP1 expression200
-- On SEMI reduce production expression200 -> expression200 INFIXOP1 expression200
-- On RPAREN reduce production expression200 -> expression200 INFIXOP1 expression200
-- On RBRACE reduce production expression200 -> expression200 INFIXOP1 expression200
-- On LET reduce production expression200 -> expression200 INFIXOP1 expression200
-- On INFIXOP0 reduce production expression200 -> expression200 INFIXOP1 expression200
-- On IN reduce production expression200 -> expression200 INFIXOP1 expression200
-- On EQUAL reduce production expression200 -> expression200 INFIXOP1 expression200
-- On EOF reduce production expression200 -> expression200 INFIXOP1 expression200
-- On END reduce production expression200 -> expression200 INFIXOP1 expression200
-- On COMMA reduce production expression200 -> expression200 INFIXOP1 expression200
-- On COLONCOLON reduce production expression200 -> expression200 INFIXOP1 expression200
-- On BAR reduce production expression200 -> expression200 INFIXOP1 expression200
-- On AND reduce production expression200 -> expression200 INFIXOP1 expression200

State 203:
## Known stack suffix:
## expression200 INFIXOP0
## LR(1) items:
expression200 -> expression200 INFIXOP0 . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 204
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 204:
## Known stack suffix:
## expression200 INFIXOP0 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 INFIXOP0 expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On PLUS shift to state 188
-- On MINUS shift to state 197
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
-- On INFIXOP2 shift to state 199
-- On INFIXOP1 shift to state 201
## Reductions:
-- On WITH reduce production expression200 -> expression200 INFIXOP0 expression200
-- On TYPE reduce production expression200 -> expression200 INFIXOP0 expression200
-- On SEMI reduce production expression200 -> expression200 INFIXOP0 expression200
-- On RPAREN reduce production expression200 -> expression200 INFIXOP0 expression200
-- On RBRACE reduce production expression200 -> expression200 INFIXOP0 expression200
-- On LET reduce production expression200 -> expression200 INFIXOP0 expression200
-- On INFIXOP0 reduce production expression200 -> expression200 INFIXOP0 expression200
-- On IN reduce production expression200 -> expression200 INFIXOP0 expression200
-- On EQUAL reduce production expression200 -> expression200 INFIXOP0 expression200
-- On EOF reduce production expression200 -> expression200 INFIXOP0 expression200
-- On END reduce production expression200 -> expression200 INFIXOP0 expression200
-- On COMMA reduce production expression200 -> expression200 INFIXOP0 expression200
-- On COLONCOLON reduce production expression200 -> expression200 INFIXOP0 expression200
-- On BAR reduce production expression200 -> expression200 INFIXOP0 expression200
-- On AND reduce production expression200 -> expression200 INFIXOP0 expression200

State 205:
## Known stack suffix:
## expression200 EQUAL
## LR(1) items:
expression200 -> expression200 EQUAL . expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression200 shift to state 206
-- On expression100 shift to state 192
-- On expression0 shift to state 194
## Reductions:

State 206:
## Known stack suffix:
## expression200 EQUAL expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . PLUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . MINUS expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression200 -> expression200 EQUAL expression200 . [ WITH TYPE SEMI RPAREN RBRACE PLUS MINUS LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On PLUS shift to state 188
-- On MINUS shift to state 197
-- On INFIXOP4 shift to state 190
-- On INFIXOP3 shift to state 195
-- On INFIXOP2 shift to state 199
-- On INFIXOP1 shift to state 201
## Reductions:
-- On WITH reduce production expression200 -> expression200 EQUAL expression200
-- On TYPE reduce production expression200 -> expression200 EQUAL expression200
-- On SEMI reduce production expression200 -> expression200 EQUAL expression200
-- On RPAREN reduce production expression200 -> expression200 EQUAL expression200
-- On RBRACE reduce production expression200 -> expression200 EQUAL expression200
-- On LET reduce production expression200 -> expression200 EQUAL expression200
-- On INFIXOP0 reduce production expression200 -> expression200 EQUAL expression200
-- On IN reduce production expression200 -> expression200 EQUAL expression200
-- On EQUAL reduce production expression200 -> expression200 EQUAL expression200
-- On EOF reduce production expression200 -> expression200 EQUAL expression200
-- On END reduce production expression200 -> expression200 EQUAL expression200
-- On COMMA reduce production expression200 -> expression200 EQUAL expression200
-- On COLONCOLON reduce production expression200 -> expression200 EQUAL expression200
-- On BAR reduce production expression200 -> expression200 EQUAL expression200
-- On AND reduce production expression200 -> expression200 EQUAL expression200

State 207:
## Known stack suffix:
## expression0
## LR(1) items:
expression0 -> expression0 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression100 -> expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA COLONCOLON BAR AND ]
expression300 -> expression0 . DOT LID LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On DOT shift to state 208
## Reductions:
-- On WITH reduce production expression100 -> expression0
-- On UID reduce production expression100 -> expression0
-- On TYPE reduce production expression100 -> expression0
-- On SEMI reduce production expression100 -> expression0
-- On RPAREN reduce production expression100 -> expression0
-- On RBRACE reduce production expression100 -> expression0
-- On PLUS reduce production expression100 -> expression0
-- On MINUS reduce production expression100 -> expression0
-- On MATCH reduce production expression100 -> expression0
-- On LPAREN reduce production expression100 -> expression0
-- On LID reduce production expression100 -> expression0
-- On LET reduce production expression100 -> expression0
-- On LBRACE reduce production expression100 -> expression0
-- On INTEGER reduce production expression100 -> expression0
-- On INFIXOP4 reduce production expression100 -> expression0
-- On INFIXOP3 reduce production expression100 -> expression0
-- On INFIXOP2 reduce production expression100 -> expression0
-- On INFIXOP1 reduce production expression100 -> expression0
-- On INFIXOP0 reduce production expression100 -> expression0
-- On IN reduce production expression100 -> expression0
-- On EQUAL reduce production expression100 -> expression0
-- On EOF reduce production expression100 -> expression0
-- On END reduce production expression100 -> expression0
-- On COMMA reduce production expression100 -> expression0
-- On COLONCOLON reduce production expression100 -> expression0
-- On BAR reduce production expression100 -> expression0
-- On AND reduce production expression100 -> expression0

State 208:
## Known stack suffix:
## expression0 DOT
## LR(1) items:
expression0 -> expression0 DOT . LID [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression300 -> expression0 DOT . LID LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On LID shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## expression0 DOT LID
## LR(1) items:
expression0 -> expression0 DOT LID . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression300 -> expression0 DOT LID . LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On LEFTARROW shift to state 210
## Reductions:
-- On WITH reduce production expression0 -> expression0 DOT LID
-- On UID reduce production expression0 -> expression0 DOT LID
-- On TYPE reduce production expression0 -> expression0 DOT LID
-- On SEMI reduce production expression0 -> expression0 DOT LID
-- On RPAREN reduce production expression0 -> expression0 DOT LID
-- On RBRACE reduce production expression0 -> expression0 DOT LID
-- On PLUS reduce production expression0 -> expression0 DOT LID
-- On MINUS reduce production expression0 -> expression0 DOT LID
-- On MATCH reduce production expression0 -> expression0 DOT LID
-- On LPAREN reduce production expression0 -> expression0 DOT LID
-- On LID reduce production expression0 -> expression0 DOT LID
-- On LET reduce production expression0 -> expression0 DOT LID
-- On LBRACE reduce production expression0 -> expression0 DOT LID
-- On INTEGER reduce production expression0 -> expression0 DOT LID
-- On INFIXOP4 reduce production expression0 -> expression0 DOT LID
-- On INFIXOP3 reduce production expression0 -> expression0 DOT LID
-- On INFIXOP2 reduce production expression0 -> expression0 DOT LID
-- On INFIXOP1 reduce production expression0 -> expression0 DOT LID
-- On INFIXOP0 reduce production expression0 -> expression0 DOT LID
-- On IN reduce production expression0 -> expression0 DOT LID
-- On EQUAL reduce production expression0 -> expression0 DOT LID
-- On EOF reduce production expression0 -> expression0 DOT LID
-- On END reduce production expression0 -> expression0 DOT LID
-- On DOT reduce production expression0 -> expression0 DOT LID
-- On COMMA reduce production expression0 -> expression0 DOT LID
-- On COLONCOLON reduce production expression0 -> expression0 DOT LID
-- On BAR reduce production expression0 -> expression0 DOT LID
-- On AND reduce production expression0 -> expression0 DOT LID

State 210:
## Known stack suffix:
## expression0 DOT LID LEFTARROW
## LR(1) items:
expression300 -> expression0 DOT LID LEFTARROW . expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On DISPLAY shift to state 176
-- On expression100 shift to state 211
-- On expression0 shift to state 194
## Reductions:

State 211:
## Known stack suffix:
## expression0 DOT LID LEFTARROW expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE MATCH LPAREN LID LET LBRACE INTEGER IN EOF END COMMA COLONCOLON BAR AND ]
expression300 -> expression0 DOT LID LEFTARROW expression100 . [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On expression0 shift to state 193
## Reductions:
-- On WITH reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On TYPE reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On SEMI reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On RPAREN reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On RBRACE reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On LET reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On IN reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On EOF reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On END reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On COMMA reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On COLONCOLON reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On BAR reduce production expression300 -> expression0 DOT LID LEFTARROW expression100
-- On AND reduce production expression300 -> expression0 DOT LID LEFTARROW expression100

State 212:
## Known stack suffix:
## binding
## LR(1) items:
expression400 -> binding . IN expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On IN shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## binding IN
## LR(1) items:
expression400 -> binding IN . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 214
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On binding shift to state 212
## Reductions:

State 214:
## Known stack suffix:
## binding IN expression400
## LR(1) items:
expression400 -> binding IN expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> binding IN expression400

State 215:
## Known stack suffix:
## EXISTS quantifiers DOT expression400
## LR(1) items:
expression400 -> EXISTS quantifiers DOT expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> EXISTS quantifiers DOT expression400

State 216:
## Known stack suffix:
## expression400
## LR(1) items:
expression -> expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression400

State 217:
## Known stack suffix:
## LBRACE expression
## LR(1) items:
expression0 -> LBRACE expression . bindings RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On TYPE shift to state 104
-- On LET shift to state 117
-- On bindings shift to state 218
-- On binding shift to state 220
## Reductions:
-- On RBRACE reduce production bindings ->

State 218:
## Known stack suffix:
## LBRACE expression bindings
## LR(1) items:
expression0 -> LBRACE expression bindings . RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On RBRACE shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## LBRACE expression bindings RBRACE
## LR(1) items:
expression0 -> LBRACE expression bindings RBRACE . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACE expression bindings RBRACE

State 220:
## Known stack suffix:
## binding
## LR(1) items:
bindings -> binding . bindings [ RBRACE ]
## Transitions:
-- On TYPE shift to state 104
-- On LET shift to state 117
-- On bindings shift to state 221
-- On binding shift to state 220
## Reductions:
-- On RBRACE reduce production bindings ->

State 221:
## Known stack suffix:
## binding bindings
## LR(1) items:
bindings -> binding bindings . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> binding bindings

State 222:
## Known stack suffix:
## LBRACE bindings
## LR(1) items:
expression0 -> LBRACE bindings . RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On RBRACE shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## LBRACE bindings RBRACE
## LR(1) items:
expression0 -> LBRACE bindings RBRACE . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACE bindings RBRACE

State 224:
## Known stack suffix:
## binding
## LR(1) items:
bindings -> binding . bindings [ RBRACE ]
expression400 -> binding . IN expression400 [ TYPE RBRACE LET ]
## Transitions:
-- On TYPE shift to state 104
-- On LET shift to state 117
-- On IN shift to state 213
-- On bindings shift to state 221
-- On binding shift to state 220
## Reductions:
-- On RBRACE reduce production bindings ->

State 225:
## Known stack suffix:
## EQUAL expression
## LR(1) items:
equal_expression -> EQUAL expression . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> EQUAL expression

State 226:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
equal_expression -> COLONCOLON . typ EQUAL expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## COLONCOLON typ
## LR(1) items:
equal_expression -> COLONCOLON typ . EQUAL expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On EQUAL shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## COLONCOLON typ EQUAL
## LR(1) items:
equal_expression -> COLONCOLON typ EQUAL . expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 229
-- On binding shift to state 212
## Reductions:

State 229:
## Known stack suffix:
## COLONCOLON typ EQUAL expression
## LR(1) items:
equal_expression -> COLONCOLON typ EQUAL expression . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> COLONCOLON typ EQUAL expression

State 230:
## Known stack suffix:
## pattern0
## LR(1) items:
equal_expression -> pattern0 . equal_expression [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On WILD shift to state 123
-- On LPAREN shift to state 124
-- On LID shift to state 127
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 133
-- On EQUAL shift to state 170
-- On COLONCOLON shift to state 226
-- On pattern0 shift to state 230
-- On equal_expression shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## pattern0 equal_expression
## LR(1) items:
equal_expression -> pattern0 equal_expression . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> pattern0 equal_expression

State 232:
## Known stack suffix:
## forall pattern0 equal_expression
## LR(1) items:
value_definition -> forall pattern0 equal_expression . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definition -> forall pattern0 equal_expression

State 233:
## Known stack suffix:
## value_definition
## LR(1) items:
value_definitions -> value_definition . [ TYPE RBRACE LET IN AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definitions -> value_definition

State 234:
## Known stack suffix:
## LET IMPORT
## LR(1) items:
binding -> LET IMPORT . record_fields FROM expression [ TYPE RBRACE LET IN ]
binding -> LET IMPORT . EXPORT record_fields FROM expression [ TYPE RBRACE LET IN ]
## Transitions:
-- On LID shift to state 235
-- On EXPORT shift to state 236
-- On record_fields shift to state 242
## Reductions:

State 235:
## Known stack suffix:
## LID
## LR(1) items:
record_fields -> LID . [ FROM COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_fields -> LID

State 236:
## Known stack suffix:
## LET IMPORT EXPORT
## LR(1) items:
binding -> LET IMPORT EXPORT . record_fields FROM expression [ TYPE RBRACE LET IN ]
## Transitions:
-- On LID shift to state 235
-- On record_fields shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## LET IMPORT EXPORT record_fields
## LR(1) items:
binding -> LET IMPORT EXPORT record_fields . FROM expression [ TYPE RBRACE LET IN ]
record_fields -> record_fields . COMMA LID [ FROM COMMA ]
## Transitions:
-- On FROM shift to state 238
-- On COMMA shift to state 240
## Reductions:

State 238:
## Known stack suffix:
## LET IMPORT EXPORT record_fields FROM
## LR(1) items:
binding -> LET IMPORT EXPORT record_fields FROM . expression [ TYPE RBRACE LET IN ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 239
-- On binding shift to state 212
## Reductions:

State 239:
## Known stack suffix:
## LET IMPORT EXPORT record_fields FROM expression
## LR(1) items:
binding -> LET IMPORT EXPORT record_fields FROM expression . [ TYPE RBRACE LET IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> LET IMPORT EXPORT record_fields FROM expression

State 240:
## Known stack suffix:
## record_fields COMMA
## LR(1) items:
record_fields -> record_fields COMMA . LID [ FROM COMMA ]
## Transitions:
-- On LID shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## record_fields COMMA LID
## LR(1) items:
record_fields -> record_fields COMMA LID . [ FROM COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_fields -> record_fields COMMA LID

State 242:
## Known stack suffix:
## LET IMPORT record_fields
## LR(1) items:
binding -> LET IMPORT record_fields . FROM expression [ TYPE RBRACE LET IN ]
record_fields -> record_fields . COMMA LID [ FROM COMMA ]
## Transitions:
-- On FROM shift to state 243
-- On COMMA shift to state 240
## Reductions:

State 243:
## Known stack suffix:
## LET IMPORT record_fields FROM
## LR(1) items:
binding -> LET IMPORT record_fields FROM . expression [ TYPE RBRACE LET IN ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 244
-- On binding shift to state 212
## Reductions:

State 244:
## Known stack suffix:
## LET IMPORT record_fields FROM expression
## LR(1) items:
binding -> LET IMPORT record_fields FROM expression . [ TYPE RBRACE LET IN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binding -> LET IMPORT record_fields FROM expression

State 245:
## Known stack suffix:
## LET value_definitions
## LR(1) items:
binding -> LET value_definitions . [ TYPE RBRACE LET IN ]
value_definitions -> value_definitions . AND value_definition [ TYPE RBRACE LET IN AND ]
## Transitions:
-- On AND shift to state 120
## Reductions:
-- On TYPE reduce production binding -> LET value_definitions
-- On RBRACE reduce production binding -> LET value_definitions
-- On LET reduce production binding -> LET value_definitions
-- On IN reduce production binding -> LET value_definitions

State 246:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression0 -> LPAREN expression . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LPAREN expression . COMMA expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
expression0 -> LPAREN expression . COLONCOLON typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On RPAREN shift to state 247
-- On COMMA shift to state 248
-- On COLONCOLON shift to state 254
## Reductions:

State 247:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression0 -> LPAREN expression RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression RPAREN

State 248:
## Known stack suffix:
## LPAREN expression COMMA
## LR(1) items:
expression0 -> LPAREN expression COMMA . expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expressions shift to state 249
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 251
-- On binding shift to state 212
## Reductions:

State 249:
## Known stack suffix:
## LPAREN expression COMMA expressions
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On RPAREN shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## LPAREN expression COMMA expressions RPAREN
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COMMA expressions RPAREN

State 251:
## Known stack suffix:
## expression
## LR(1) items:
expressions -> expression . [ RPAREN ]
expressions -> expression . COMMA expressions [ RPAREN ]
## Transitions:
-- On COMMA shift to state 252
## Reductions:
-- On RPAREN reduce production expressions -> expression

State 252:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expressions -> expression COMMA . expressions [ RPAREN ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expressions shift to state 253
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 251
-- On binding shift to state 212
## Reductions:

State 253:
## Known stack suffix:
## expression COMMA expressions
## LR(1) items:
expressions -> expression COMMA expressions . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expressions -> expression COMMA expressions

State 254:
## Known stack suffix:
## LPAREN expression COLONCOLON
## LR(1) items:
expression0 -> LPAREN expression COLONCOLON . typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On LPAREN shift to state 33
-- On LID shift to state 35
-- On LBRACE shift to state 36
-- On LANGLE shift to state 37
-- On INT shift to state 42
-- On BACKSLASH shift to state 56
-- On type2 shift to state 70
-- On type1 shift to state 60
-- On type0 shift to state 66
-- On typ shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## LPAREN expression COLONCOLON typ
## LR(1) items:
expression0 -> LPAREN expression COLONCOLON typ . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On RPAREN shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## LPAREN expression COLONCOLON typ RPAREN
## LR(1) items:
expression0 -> LPAREN expression COLONCOLON typ RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COLONCOLON typ RPAREN

State 257:
## Known stack suffix:
## MATCH expression
## LR(1) items:
expression0 -> MATCH expression . WITH opt_bar cases END [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On WITH shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## MATCH expression WITH
## LR(1) items:
expression0 -> MATCH expression WITH . opt_bar cases END [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On BAR shift to state 90
-- On opt_bar shift to state 259
## Reductions:
-- On WILD reduce production opt_bar ->
-- On UID reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LID reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INTEGER reduce production opt_bar ->
-- On EXPORT reduce production opt_bar ->

State 259:
## Known stack suffix:
## MATCH expression WITH opt_bar
## LR(1) items:
expression0 -> MATCH expression WITH opt_bar . cases END [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern2 shift to state 260
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On cases shift to state 263
-- On case shift to state 267
## Reductions:

State 260:
## Known stack suffix:
## pattern2
## LR(1) items:
case -> pattern2 . ARROW expression [ END BAR ]
## Transitions:
-- On ARROW shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## pattern2 ARROW
## LR(1) items:
case -> pattern2 ARROW . expression [ END BAR ]
## Transitions:
-- On UID shift to state 103
-- On TYPE shift to state 104
-- On MATCH shift to state 113
-- On LPAREN shift to state 114
-- On LID shift to state 116
-- On LET shift to state 117
-- On LBRACE shift to state 171
-- On INTEGER shift to state 172
-- On EXISTS shift to state 173
-- On DISPLAY shift to state 176
-- On BACKSLASH shift to state 180
-- On expression400 shift to state 216
-- On expression300 shift to state 184
-- On expression200 shift to state 187
-- On expression100 shift to state 192
-- On expression0 shift to state 207
-- On expression shift to state 262
-- On binding shift to state 212
## Reductions:

State 262:
## Known stack suffix:
## pattern2 ARROW expression
## LR(1) items:
case -> pattern2 ARROW expression . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case -> pattern2 ARROW expression

State 263:
## Known stack suffix:
## MATCH expression WITH opt_bar cases
## LR(1) items:
cases -> cases . BAR case [ END BAR ]
expression0 -> MATCH expression WITH opt_bar cases . END [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
-- On END shift to state 264
-- On BAR shift to state 265
## Reductions:

State 264:
## Known stack suffix:
## MATCH expression WITH opt_bar cases END
## LR(1) items:
expression0 -> MATCH expression WITH opt_bar cases END . [ WITH UID TYPE SEMI RPAREN RBRACE PLUS MINUS MATCH LPAREN LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA COLONCOLON BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> MATCH expression WITH opt_bar cases END

State 265:
## Known stack suffix:
## cases BAR
## LR(1) items:
cases -> cases BAR . case [ END BAR ]
## Transitions:
-- On WILD shift to state 123
-- On UID shift to state 125
-- On LPAREN shift to state 124
-- On LID shift to state 141
-- On LBRACE shift to state 128
-- On INTEGER shift to state 132
-- On EXPORT shift to state 143
-- On pattern2 shift to state 260
-- On pattern1 shift to state 147
-- On pattern0 shift to state 148
-- On case shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## cases BAR case
## LR(1) items:
cases -> cases BAR case . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> cases BAR case

State 267:
## Known stack suffix:
## case
## LR(1) items:
cases -> case . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cases -> case

State 268:
## Known stack suffix:
## declarations PROG expression
## LR(1) items:
program -> declarations PROG expression . EOF [ # ]
## Transitions:
-- On EOF shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## declarations PROG expression EOF
## LR(1) items:
program -> declarations PROG expression EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> declarations PROG expression EOF

State 270:
## Known stack suffix:
## declaration
## LR(1) items:
declarations -> declaration . declarations [ PROG ]
## Transitions:
-- On FIELD shift to state 1
-- On DATA shift to state 86
-- On declarations shift to state 271
-- On declaration shift to state 270
## Reductions:
-- On PROG reduce production declarations ->

State 271:
## Known stack suffix:
## declaration declarations
## LR(1) items:
declarations -> declaration declarations . [ PROG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarations -> declaration declarations

