File "modulo.mly", line 61, characters 7-13:
Warning: the token ASSUME is unused.
File "modulo.mly", line 65, characters 7-11:
Warning: the token BANG is unused.
File "modulo.mly", line 42, characters 7-15:
Warning: the token LBRACKET is unused.
File "modulo.mly", line 43, characters 7-15:
Warning: the token RBRACKET is unused.
File "modulo.mly", line 68, characters 7-12:
Warning: the token SLASH is unused.
File "modulo.mly", line 64, characters 7-12:
Warning: the token SOLVE is unused.
%{

open Syntax

let abs_type formals body =
  List.fold_right (fun (channel, id, kind) body ->
    TypAbs (channel, id, kind, body)
  ) formals body

let seq e1 e2 =
  EBinding (BindValue [[], PTuple [], e1], e2)

let app e1 e2 =
  EApp (e1, e2)

let infix id e1 e2 =
  app (app (EVar id) e1) e2

%}
%start program
%token AND
%token ARROW
%token AS
%token ASSUME
%token BACKSLASH
%token BANG
%token BAR
%token COLON
%token COLONCOLON
%token COMMA
%token DATA
%token DISPLAY
%token DOT
%token END
%token EOF
%token EQUAL
%token EXISTS
%token EXPORT
%token FIELD
%token FORALL
%token FROM
%token IMPORT
%token IN
%token <string> INFIXOP0
%token <string> INFIXOP1
%token <string> INFIXOP2
%token <string> INFIXOP3
%token <string> INFIXOP4
%token INT
%token <int> INTEGER
%token LANGLE
%token LBRACE
%token LBRACKET
%token LEFTARROW
%token LET
%token <string> LID
%token LPAREN
%token MATCH
%token MINUS
%token MUTABLE
%token PLUS
%token PROG
%token RANGLE
%token RBRACE
%token RBRACKET
%token REC
%token RPAREN
%token SEMI
%token SLASH
%token SOLVE
%token STAR
%token TYPE
%token <string> UID
%token VALUE
%token WILD
%token WITH
%left EQUAL INFIXOP0
%right INFIXOP1
%left INFIXOP2 MINUS PLUS
%left INFIXOP3
%right INFIXOP4
%type <Syntax.program> program
%%

program:
  _1 = declarations _2 = PROG _3 = expression _4 = EOF
    {                                                                ( _1, _3 )}

declarations:
  
    {                                                                ( [] )}
| _1 = declaration _2 = declarations
    {                                                                ( _1 :: _2 )}

declaration:
  _1 = FIELD _2 = LID _3 = formals _4 = EQUAL _5 = scheme
    {                                                                ( DeclField (_2, false, _3, _5) )}
| _1 = FIELD _2 = MUTABLE _3 = LID _4 = formals _5 = EQUAL _6 = scheme
    {                                                                ( DeclField (_3, true, _4, _6) )}
| _1 = DATA _2 = LID
    {                                                                ( DeclData (_2, [], []) )}
| _1 = DATA _2 = LID _3 = formals _4 = EQUAL _5 = opt_bar _6 = data_cases
    {                                                                ( DeclData (_2, _3, _6) )}

formals:
  
    {                                                                ( [] )}
| _1 = formal _2 = formals
    {                                                                ( _1 :: _2 )}

formal:
  _1 = LID
    {                                                                ( "", _1, KindUnification.variable() )}
| _1 = LID _2 = COLON _3 = LID
    {                                                                ( _1, _3, KindUnification.variable() )}
| _1 = LPAREN _2 = LID _3 = COLONCOLON _4 = kind _5 = RPAREN
    {                                                                ( "", _2, _4 )}
| _1 = LID _2 = COLON _3 = LPAREN _4 = LID _5 = COLONCOLON _6 = kind _7 = RPAREN
    {                                                                ( _1, _4, _6 )}

kind:
  _1 = STAR
    {                                                                ( KindUnification.star )}

scheme:
  _1 = forall _2 = typ
    {                                                                ( _1, _2 )}

forall:
  
    {                                                                ( [] )}
| _1 = FORALL _2 = quantifiers _3 = DOT
    {                                                                ( _2 )}

quantifiers:
  _1 = quantifier
    {                                                                ( [ _1 ] )}
| _1 = quantifiers _2 = quantifier
    {                                                                ( _2 :: _1 )}

quantifier:
  _1 = LID
    {                                                                ( _1, KindUnification.variable() )}
| _1 = LPAREN _2 = LID _3 = COLONCOLON _4 = kind _5 = RPAREN
    {                                                                ( _2, _4 )}

typ:
  _1 = type2
    {                                                                ( _1 )}

type2:
  _1 = BACKSLASH _2 = formal _3 = DOT _4 = type2
    {                                                                ( let p, id, k = _2 in
                                                                  TypAbs (p, id, k, _4) )}
| _1 = type1 _2 = ARROW _3 = type2
    {                                                                ( TypArrow (_1, _3) )}
| _1 = type1
    {                                                                ( _1 )}

type1:
  _1 = type1 _2 = type0
    {                                                                ( TypApp (_1, "", _2) )}
| _1 = type1 _2 = LID _3 = COLON _4 = type0
    {                                                                ( TypApp (_1, _2, _4) )}
| _1 = type0
    {                                                                ( _1 )}

type0:
  _1 = LID
    {                                                                ( TypVar _1 )}
| _1 = INT
    {                                                                ( TypInteger )}
| _1 = LBRACE _2 = type2 _3 = RBRACE
    {                                                                ( TypRecord _2 )}
| _1 = LANGLE _2 = row _3 = RANGLE
    {                                                                ( _2 )}
| _1 = LPAREN _2 = RPAREN
    {                                                                ( TypTuple [] )}
| _1 = LPAREN _2 = typ _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = typ _3 = COMMA _4 = types _5 = RPAREN
    {                                                                ( TypTuple (_2 :: _4) )}

types:
  _1 = typ
    {                                                                ( [ _1 ] )}
| _1 = typ _2 = COMMA _3 = types
    {                                                                ( _1 :: _3 )}

row:
  
    {                                                                ( TypRowEmpty )}
| _1 = LID
    {                                                                ( TypVar _1 )}
| _1 = row_entry
    {                                                                ( TypRowCons (_1, TypRowEmpty) )}
| _1 = row_entry _2 = SEMI _3 = row
    {                                                                ( TypRowCons (_1, _3) )}

row_entry:
  _1 = MINUS _2 = LID
    {                                                                ( _2, None )}
| _1 = PLUS _2 = LID _3 = actuals
    {                                                                ( _2, Some _3 )}

actuals:
  
    {                                                                ( [] )}
| _1 = type0 _2 = actuals
    {                                                                ( ("", _1) :: _2 )}
| _1 = LID _2 = COLON _3 = type0 _4 = actuals
    {                                                                ( (_1, _3) :: _4 )}

data_cases:
  _1 = data_case
    {                                                                ( [ _1 ] )}
| _1 = data_cases _2 = BAR _3 = data_case
    {                                                                ( _3 :: _1 )}

data_case:
  _1 = UID _2 = data_params
    {                                                                ( _1, _2 )}

data_params:
  
    {                                                                ( [] )}
| _1 = type0 _2 = data_params
    {                                                                ( _1 :: _2 )}

expression:
  _1 = expression400
    {                                                                ( _1 )}

expression400:
  _1 = BACKSLASH _2 = pattern _3 = DOT _4 = expression400
    {                                                                ( EAbs (_2, _4) )}
| _1 = binding _2 = IN _3 = expression400
    {                                                                ( EBinding (_1, _3) )}
| _1 = EXISTS _2 = quantifiers _3 = DOT _4 = expression400
    {                                                                ( EExists (_2, _4) )}
| _1 = expression300 _2 = SEMI _3 = expression400
    {                                                                ( seq _1 _3 )}
| _1 = expression300
    {                                                                ( _1 )}

expression300:
  _1 = expression0 _2 = DOT _3 = LID _4 = LEFTARROW _5 = expression100
    {                                                                ( ERecordUpdate (_1, _3, _5) )}
| _1 = expression200
    {                                                                ( _1 )}

expression200:
  _1 = expression200 _2 = INFIXOP0 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP1 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP2 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP3 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP4 _3 = expression200
    {                                                                ( infix _2 _1 _3 )}
| _1 = expression200 _2 = PLUS _3 = expression200
    {                                                                ( infix "+" _1 _3 )}
| _1 = expression200 _2 = MINUS _3 = expression200
    {                                                                ( infix "-" _1 _3 )}
| _1 = expression200 _2 = EQUAL _3 = expression200
    {                                                                ( infix "=" _1 _3 )}
| _1 = expression100
    {                                                                ( _1 )}

expression100:
  _1 = expression100 _2 = expression0
    {                                                                ( EApp (_1, _2) )}
| _1 = DISPLAY _2 = expression0
    {                                                                ( EDisplay _2 )}
| _1 = expression0
    {                                                                ( _1 )}

expression0:
  _1 = LID
    {                                                                ( EVar _1 )}
| _1 = UID
    {                                                                ( EData _1 )}
| _1 = INTEGER
    {                                                                ( EInteger _1 )}
| _1 = expression0 _2 = DOT _3 = LID
    {                                                                ( ERecordAccess (_3, _1) )}
| _1 = LBRACE _2 = expression _3 = bindings _4 = RBRACE
    {                                                                ( ERecordExtend (_3, _2) )}
| _1 = LBRACE _2 = bindings _3 = RBRACE
    {                                                                ( ERecordExtend (_2, ERecordEmpty) )}
| _1 = LPAREN _2 = RPAREN
    {                                                                ( ETuple [] )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = expression _3 = COMMA _4 = expressions _5 = RPAREN
    {                                                                ( ETuple (_2 :: _4) )}
| _1 = LPAREN _2 = expression _3 = COLONCOLON _4 = typ _5 = RPAREN
    {                                                                ( ETypeConstraint (_2, _4) )}
| _1 = MATCH _2 = expression _3 = WITH _4 = opt_bar _5 = cases _6 = END
    {                                                                ( EMatch (_2, List.rev _5) )}

expressions:
  _1 = expression
    {                                                                ( [ _1 ] )}
| _1 = expression _2 = COMMA _3 = expressions
    {                                                                ( _1 :: _3 )}

bindings:
  
    {                                                                ( [] )}
| _1 = binding _2 = bindings
    {                                                                ( _1 :: _2 )}

binding:
  _1 = LET _2 = IMPORT _3 = record_fields _4 = FROM _5 = expression
    {                                                                ( BindImport (Binds, _3, _5) )}
| _1 = LET _2 = IMPORT _3 = EXPORT _4 = record_fields _5 = FROM _6 = expression
    {                                                                ( BindImport (BindsAndDefines, _4, _6) )}
| _1 = TYPE _2 = type_definitions
    {                                                                ( BindType _2 )}
| _1 = LET _2 = value_definitions
    {                                                                ( BindValue _2 )}
| _1 = LET _2 = REC _3 = value_definitions
    {                                                                ( BindRecValue _3 )}

type_definitions:
  _1 = type_definition
    {                                                                ( [ _1 ] )}
| _1 = type_definitions _2 = AND _3 = type_definition
    {                                                                ( _3 :: _1 )}

value_definitions:
  _1 = value_definition
    {                                                                ( [ _1 ] )}
| _1 = value_definitions _2 = AND _3 = value_definition
    {                                                                ( _3 :: _1 )}

value_definition:
  _1 = forall _2 = pattern0 _3 = equal_expression
    {                                                                ( (_1, _2, _3) )}

type_definition:
  _1 = LID _2 = formals _3 = EQUAL _4 = typ
    {                                                                ( (_1, abs_type _2 _4) )}

equal_expression:
  _1 = EQUAL _2 = expression
    {                                                                ( _2 )}
| _1 = COLONCOLON _2 = typ _3 = EQUAL _4 = expression
    {                                                                ( ETypeConstraint (_4, _2) )}
| _1 = pattern0 _2 = equal_expression
    {                                                                ( EAbs (_1, _2) )}

record_fields:
  _1 = LID
    {                                                                ( [ _1 ] )}
| _1 = record_fields _2 = COMMA _3 = LID
    {                                                                ( _3 :: _1 )}

pattern:
  _1 = pattern3
    {                                                                ( _1 )}

pattern3:
  _1 = pattern2
    {                                                                ( _1 )}
| _1 = pattern3 _2 = COLONCOLON _3 = typ
    {                                                                ( PTypeConstraint (_1, _3) )}

pattern2:
  _1 = pattern1
    {                                                                ( _1 )}
| _1 = LID _2 = AS _3 = pattern2
    {                                                                ( PAlias (Binds, _1, _3) )}
| _1 = EXPORT _2 = LID _3 = AS _4 = pattern2
    {                                                                ( PAlias (BindsAndDefines, _2, _4) )}

pattern1:
  _1 = pattern0
    {                                                                ( _1 )}
| _1 = UID _2 = pattern0s
    {                                                                ( PData (_1, List.rev _2) )}

pattern0:
  _1 = LID
    {                                                                ( PVar (Binds, _1) )}
| _1 = EXPORT _2 = LID
    {                                                                ( PVar (BindsAndDefines, _2) )}
| _1 = WILD
    {                                                                ( PWildcard )}
| _1 = INTEGER
    {                                                                ( PInteger _1 )}
| _1 = LBRACE _2 = row_pattern _3 = RBRACE
    {                                                                ( PRecord (_2, PRecordEmpty) )}
| _1 = LBRACE _2 = pattern _3 = row_pattern _4 = RBRACE
    {                                                                ( PRecord (_3, _2) )}
| _1 = LPAREN _2 = RPAREN
    {                                                                ( PTuple [] )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {                                                                ( _2 )}
| _1 = LPAREN _2 = pattern _3 = COMMA _4 = patterns _5 = RPAREN
    {                                                                ( PTuple (_2 :: _4) )}

pattern0s:
  
    {                                                                ( [] )}
| _1 = pattern0s _2 = pattern0
    {                                                                ( _2 :: _1 )}

patterns:
  _1 = pattern
    {                                                                ( [ _1 ] )}
| _1 = pattern _2 = COMMA _3 = patterns
    {                                                                ( _1 :: _3 )}

row_pattern:
  
    {                                                                ( [] )}
| _1 = VALUE _2 = LID _3 = EQUAL _4 = pattern0 _5 = row_pattern
    {                                                                ( (_2, _4) :: _5 )}
| _1 = VALUE _2 = LID _3 = row_pattern
    {                                                                ( (_2, PVar (Binds, _2)) :: _3 )}
| _1 = VALUE _2 = EXPORT _3 = LID _4 = row_pattern
    {                                                                ( (_3, PVar (BindsAndDefines, _3)) :: _4 )}

cases:
  _1 = case
    {                                                                ( [ _1 ] )}
| _1 = cases _2 = BAR _3 = case
    {                                                                ( _3 :: _1 )}

case:
  _1 = pattern2 _2 = ARROW _3 = expression
    {                                                                ( _1, _3 )}

opt_bar:
  
    {                                                                ( () )}
| _1 = BAR
    {                                                                ( () )}

%%
