State 0:
## Known stack suffix:
##
## LR(1) items:
entry_point' -> . entry_point [ # ]
## Transitions:
-- On NEWLINE shift to state 1
-- On program shift to state 2
-- On newline_list shift to state 4
-- On linebreak shift to state 6
-- On entry_point shift to state 186
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On EOF reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 1:
## Known stack suffix:
## NEWLINE
## LR(1) items:
newline_list -> NEWLINE . [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS In If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
## Reductions:
-- On While reduce production newline_list -> NEWLINE
-- On WORD reduce production newline_list -> NEWLINE
-- On Until reduce production newline_list -> NEWLINE
-- On Then reduce production newline_list -> NEWLINE
-- On Rparen reduce production newline_list -> NEWLINE
-- On Rbrace reduce production newline_list -> NEWLINE
-- On NEWLINE reduce production newline_list -> NEWLINE
-- On NAME reduce production newline_list -> NEWLINE
-- On Lparen reduce production newline_list -> NEWLINE
-- On Lbrace reduce production newline_list -> NEWLINE
-- On LESSGREAT reduce production newline_list -> NEWLINE
-- On LESSAND reduce production newline_list -> NEWLINE
-- On LESS reduce production newline_list -> NEWLINE
-- On In reduce production newline_list -> NEWLINE
-- On If reduce production newline_list -> NEWLINE
-- On IO_NUMBER reduce production newline_list -> NEWLINE
-- On GREATAND reduce production newline_list -> NEWLINE
-- On GREAT reduce production newline_list -> NEWLINE
-- On For reduce production newline_list -> NEWLINE
-- On Fi reduce production newline_list -> NEWLINE
-- On Esac reduce production newline_list -> NEWLINE
-- On Else reduce production newline_list -> NEWLINE
-- On Elif reduce production newline_list -> NEWLINE
-- On EOF reduce production newline_list -> NEWLINE
-- On Done reduce production newline_list -> NEWLINE
-- On Do reduce production newline_list -> NEWLINE
-- On DSEMI reduce production newline_list -> NEWLINE
-- On DLESSDASH reduce production newline_list -> NEWLINE
-- On DLESS reduce production newline_list -> NEWLINE
-- On DGREAT reduce production newline_list -> NEWLINE
-- On Case reduce production newline_list -> NEWLINE
-- On CLOBBER reduce production newline_list -> NEWLINE
-- On Bang reduce production newline_list -> NEWLINE
-- On ASSIGNMENT_WORD reduce production newline_list -> NEWLINE

State 2:
## Known stack suffix:
## program
## LR(1) items:
entry_point -> program . EOF [ # ]
## Transitions:
-- On EOF shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## program EOF
## LR(1) items:
entry_point -> program EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production entry_point -> program EOF

State 4:
## Known stack suffix:
## newline_list
## LR(1) items:
linebreak -> newline_list . [ While WORD Until Then Rparen Rbrace NAME Lparen Lbrace LESSGREAT LESSAND LESS In If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
newline_list -> newline_list . NEWLINE [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS In If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
-- On NEWLINE shift to state 5
## Reductions:
-- On While reduce production linebreak -> newline_list
-- On WORD reduce production linebreak -> newline_list
-- On Until reduce production linebreak -> newline_list
-- On Then reduce production linebreak -> newline_list
-- On Rparen reduce production linebreak -> newline_list
-- On Rbrace reduce production linebreak -> newline_list
-- On NAME reduce production linebreak -> newline_list
-- On Lparen reduce production linebreak -> newline_list
-- On Lbrace reduce production linebreak -> newline_list
-- On LESSGREAT reduce production linebreak -> newline_list
-- On LESSAND reduce production linebreak -> newline_list
-- On LESS reduce production linebreak -> newline_list
-- On In reduce production linebreak -> newline_list
-- On If reduce production linebreak -> newline_list
-- On IO_NUMBER reduce production linebreak -> newline_list
-- On GREATAND reduce production linebreak -> newline_list
-- On GREAT reduce production linebreak -> newline_list
-- On For reduce production linebreak -> newline_list
-- On Fi reduce production linebreak -> newline_list
-- On Esac reduce production linebreak -> newline_list
-- On Else reduce production linebreak -> newline_list
-- On Elif reduce production linebreak -> newline_list
-- On EOF reduce production linebreak -> newline_list
-- On Done reduce production linebreak -> newline_list
-- On Do reduce production linebreak -> newline_list
-- On DSEMI reduce production linebreak -> newline_list
-- On DLESSDASH reduce production linebreak -> newline_list
-- On DLESS reduce production linebreak -> newline_list
-- On DGREAT reduce production linebreak -> newline_list
-- On Case reduce production linebreak -> newline_list
-- On CLOBBER reduce production linebreak -> newline_list
-- On Bang reduce production linebreak -> newline_list
-- On ASSIGNMENT_WORD reduce production linebreak -> newline_list

State 5:
## Known stack suffix:
## newline_list NEWLINE
## LR(1) items:
newline_list -> newline_list NEWLINE . [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS In If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
## Reductions:
-- On While reduce production newline_list -> newline_list NEWLINE
-- On WORD reduce production newline_list -> newline_list NEWLINE
-- On Until reduce production newline_list -> newline_list NEWLINE
-- On Then reduce production newline_list -> newline_list NEWLINE
-- On Rparen reduce production newline_list -> newline_list NEWLINE
-- On Rbrace reduce production newline_list -> newline_list NEWLINE
-- On NEWLINE reduce production newline_list -> newline_list NEWLINE
-- On NAME reduce production newline_list -> newline_list NEWLINE
-- On Lparen reduce production newline_list -> newline_list NEWLINE
-- On Lbrace reduce production newline_list -> newline_list NEWLINE
-- On LESSGREAT reduce production newline_list -> newline_list NEWLINE
-- On LESSAND reduce production newline_list -> newline_list NEWLINE
-- On LESS reduce production newline_list -> newline_list NEWLINE
-- On In reduce production newline_list -> newline_list NEWLINE
-- On If reduce production newline_list -> newline_list NEWLINE
-- On IO_NUMBER reduce production newline_list -> newline_list NEWLINE
-- On GREATAND reduce production newline_list -> newline_list NEWLINE
-- On GREAT reduce production newline_list -> newline_list NEWLINE
-- On For reduce production newline_list -> newline_list NEWLINE
-- On Fi reduce production newline_list -> newline_list NEWLINE
-- On Esac reduce production newline_list -> newline_list NEWLINE
-- On Else reduce production newline_list -> newline_list NEWLINE
-- On Elif reduce production newline_list -> newline_list NEWLINE
-- On EOF reduce production newline_list -> newline_list NEWLINE
-- On Done reduce production newline_list -> newline_list NEWLINE
-- On Do reduce production newline_list -> newline_list NEWLINE
-- On DSEMI reduce production newline_list -> newline_list NEWLINE
-- On DLESSDASH reduce production newline_list -> newline_list NEWLINE
-- On DLESS reduce production newline_list -> newline_list NEWLINE
-- On DGREAT reduce production newline_list -> newline_list NEWLINE
-- On Case reduce production newline_list -> newline_list NEWLINE
-- On CLOBBER reduce production newline_list -> newline_list NEWLINE
-- On Bang reduce production newline_list -> newline_list NEWLINE
-- On ASSIGNMENT_WORD reduce production newline_list -> newline_list NEWLINE

State 6:
## Known stack suffix:
## linebreak
## LR(1) items:
program -> linebreak . complete_commands linebreak [ EOF ]
program -> linebreak . [ EOF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On complete_commands shift to state 177
-- On complete_command shift to state 185
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On clist shift to state 180
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 183
## Reductions:
-- On EOF reduce production program -> linebreak

State 7:
## Known stack suffix:
## While
## LR(1) items:
while_clause -> While . compound_list do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 175
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 8:
## Known stack suffix:
## linebreak
## LR(1) items:
compound_list -> linebreak . term [ Then Rparen Rbrace Fi Else Elif Done Do ]
compound_list -> linebreak . term separator [ Then Rparen Rbrace Fi Else Elif Done Do ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On term shift to state 136
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 152
## Reductions:

State 9:
## Known stack suffix:
## WORD
## LR(1) items:
word -> WORD . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS In IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production word -> WORD
-- On Uppersand reduce production word -> WORD
-- On Then reduce production word -> WORD
-- On Semicolon reduce production word -> WORD
-- On Rparen reduce production word -> WORD
-- On Rbrace reduce production word -> WORD
-- On Pipe reduce production word -> WORD
-- On OR_IF reduce production word -> WORD
-- On NEWLINE reduce production word -> WORD
-- On NAME reduce production word -> WORD
-- On LESSGREAT reduce production word -> WORD
-- On LESSAND reduce production word -> WORD
-- On LESS reduce production word -> WORD
-- On In reduce production word -> WORD
-- On IO_NUMBER reduce production word -> WORD
-- On GREATAND reduce production word -> WORD
-- On GREAT reduce production word -> WORD
-- On Fi reduce production word -> WORD
-- On Esac reduce production word -> WORD
-- On Else reduce production word -> WORD
-- On Elif reduce production word -> WORD
-- On EOF reduce production word -> WORD
-- On Done reduce production word -> WORD
-- On Do reduce production word -> WORD
-- On DSEMI reduce production word -> WORD
-- On DLESSDASH reduce production word -> WORD
-- On DLESS reduce production word -> WORD
-- On DGREAT reduce production word -> WORD
-- On CLOBBER reduce production word -> WORD
-- On ASSIGNMENT_WORD reduce production word -> WORD
-- On AND_IF reduce production word -> WORD

State 10:
## Known stack suffix:
## Until
## LR(1) items:
until_clause -> Until . compound_list do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 11
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 11:
## Known stack suffix:
## Until compound_list
## LR(1) items:
until_clause -> Until compound_list . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Do shift to state 12
-- On do_group shift to state 15
## Reductions:

State 12:
## Known stack suffix:
## Do
## LR(1) items:
do_group -> Do . compound_list Done [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 13
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 13:
## Known stack suffix:
## Do compound_list
## LR(1) items:
do_group -> Do compound_list . Done [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Done shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## Do compound_list Done
## LR(1) items:
do_group -> Do compound_list Done . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production do_group -> Do compound_list Done
-- On Then reduce production do_group -> Do compound_list Done
-- On Semicolon reduce production do_group -> Do compound_list Done
-- On Rparen reduce production do_group -> Do compound_list Done
-- On Rbrace reduce production do_group -> Do compound_list Done
-- On Pipe reduce production do_group -> Do compound_list Done
-- On OR_IF reduce production do_group -> Do compound_list Done
-- On NEWLINE reduce production do_group -> Do compound_list Done
-- On LESSGREAT reduce production do_group -> Do compound_list Done
-- On LESSAND reduce production do_group -> Do compound_list Done
-- On LESS reduce production do_group -> Do compound_list Done
-- On IO_NUMBER reduce production do_group -> Do compound_list Done
-- On GREATAND reduce production do_group -> Do compound_list Done
-- On GREAT reduce production do_group -> Do compound_list Done
-- On Fi reduce production do_group -> Do compound_list Done
-- On Esac reduce production do_group -> Do compound_list Done
-- On Else reduce production do_group -> Do compound_list Done
-- On Elif reduce production do_group -> Do compound_list Done
-- On EOF reduce production do_group -> Do compound_list Done
-- On Done reduce production do_group -> Do compound_list Done
-- On Do reduce production do_group -> Do compound_list Done
-- On DSEMI reduce production do_group -> Do compound_list Done
-- On DLESSDASH reduce production do_group -> Do compound_list Done
-- On DLESS reduce production do_group -> Do compound_list Done
-- On DGREAT reduce production do_group -> Do compound_list Done
-- On CLOBBER reduce production do_group -> Do compound_list Done
-- On AND_IF reduce production do_group -> Do compound_list Done

State 15:
## Known stack suffix:
## Until compound_list do_group
## LR(1) items:
until_clause -> Until compound_list do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production until_clause -> Until compound_list do_group
-- On Then reduce production until_clause -> Until compound_list do_group
-- On Semicolon reduce production until_clause -> Until compound_list do_group
-- On Rparen reduce production until_clause -> Until compound_list do_group
-- On Rbrace reduce production until_clause -> Until compound_list do_group
-- On Pipe reduce production until_clause -> Until compound_list do_group
-- On OR_IF reduce production until_clause -> Until compound_list do_group
-- On NEWLINE reduce production until_clause -> Until compound_list do_group
-- On LESSGREAT reduce production until_clause -> Until compound_list do_group
-- On LESSAND reduce production until_clause -> Until compound_list do_group
-- On LESS reduce production until_clause -> Until compound_list do_group
-- On IO_NUMBER reduce production until_clause -> Until compound_list do_group
-- On GREATAND reduce production until_clause -> Until compound_list do_group
-- On GREAT reduce production until_clause -> Until compound_list do_group
-- On Fi reduce production until_clause -> Until compound_list do_group
-- On Esac reduce production until_clause -> Until compound_list do_group
-- On Else reduce production until_clause -> Until compound_list do_group
-- On Elif reduce production until_clause -> Until compound_list do_group
-- On EOF reduce production until_clause -> Until compound_list do_group
-- On Done reduce production until_clause -> Until compound_list do_group
-- On Do reduce production until_clause -> Until compound_list do_group
-- On DSEMI reduce production until_clause -> Until compound_list do_group
-- On DLESSDASH reduce production until_clause -> Until compound_list do_group
-- On DLESS reduce production until_clause -> Until compound_list do_group
-- On DGREAT reduce production until_clause -> Until compound_list do_group
-- On CLOBBER reduce production until_clause -> Until compound_list do_group
-- On AND_IF reduce production until_clause -> Until compound_list do_group

State 16:
## Known stack suffix:
## NAME
## LR(1) items:
fname -> NAME . [ Lparen ]
word -> NAME . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production word -> NAME
-- On Uppersand reduce production word -> NAME
-- On Then reduce production word -> NAME
-- On Semicolon reduce production word -> NAME
-- On Rparen reduce production word -> NAME
-- On Rbrace reduce production word -> NAME
-- On Pipe reduce production word -> NAME
-- On OR_IF reduce production word -> NAME
-- On NEWLINE reduce production word -> NAME
-- On NAME reduce production word -> NAME
-- On Lparen reduce production fname -> NAME
-- On LESSGREAT reduce production word -> NAME
-- On LESSAND reduce production word -> NAME
-- On LESS reduce production word -> NAME
-- On IO_NUMBER reduce production word -> NAME
-- On GREATAND reduce production word -> NAME
-- On GREAT reduce production word -> NAME
-- On Fi reduce production word -> NAME
-- On Esac reduce production word -> NAME
-- On Else reduce production word -> NAME
-- On Elif reduce production word -> NAME
-- On EOF reduce production word -> NAME
-- On Done reduce production word -> NAME
-- On Do reduce production word -> NAME
-- On DSEMI reduce production word -> NAME
-- On DLESSDASH reduce production word -> NAME
-- On DLESS reduce production word -> NAME
-- On DGREAT reduce production word -> NAME
-- On CLOBBER reduce production word -> NAME
-- On AND_IF reduce production word -> NAME

State 17:
## Known stack suffix:
## Lparen
## LR(1) items:
subshell -> Lparen . compound_list Rparen [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 18
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 18:
## Known stack suffix:
## Lparen compound_list
## LR(1) items:
subshell -> Lparen compound_list . Rparen [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Rparen shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## Lparen compound_list Rparen
## LR(1) items:
subshell -> Lparen compound_list Rparen . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production subshell -> Lparen compound_list Rparen
-- On Then reduce production subshell -> Lparen compound_list Rparen
-- On Semicolon reduce production subshell -> Lparen compound_list Rparen
-- On Rparen reduce production subshell -> Lparen compound_list Rparen
-- On Rbrace reduce production subshell -> Lparen compound_list Rparen
-- On Pipe reduce production subshell -> Lparen compound_list Rparen
-- On OR_IF reduce production subshell -> Lparen compound_list Rparen
-- On NEWLINE reduce production subshell -> Lparen compound_list Rparen
-- On LESSGREAT reduce production subshell -> Lparen compound_list Rparen
-- On LESSAND reduce production subshell -> Lparen compound_list Rparen
-- On LESS reduce production subshell -> Lparen compound_list Rparen
-- On IO_NUMBER reduce production subshell -> Lparen compound_list Rparen
-- On GREATAND reduce production subshell -> Lparen compound_list Rparen
-- On GREAT reduce production subshell -> Lparen compound_list Rparen
-- On Fi reduce production subshell -> Lparen compound_list Rparen
-- On Esac reduce production subshell -> Lparen compound_list Rparen
-- On Else reduce production subshell -> Lparen compound_list Rparen
-- On Elif reduce production subshell -> Lparen compound_list Rparen
-- On EOF reduce production subshell -> Lparen compound_list Rparen
-- On Done reduce production subshell -> Lparen compound_list Rparen
-- On Do reduce production subshell -> Lparen compound_list Rparen
-- On DSEMI reduce production subshell -> Lparen compound_list Rparen
-- On DLESSDASH reduce production subshell -> Lparen compound_list Rparen
-- On DLESS reduce production subshell -> Lparen compound_list Rparen
-- On DGREAT reduce production subshell -> Lparen compound_list Rparen
-- On CLOBBER reduce production subshell -> Lparen compound_list Rparen
-- On AND_IF reduce production subshell -> Lparen compound_list Rparen

State 20:
## Known stack suffix:
## Lbrace
## LR(1) items:
brace_group -> Lbrace . compound_list Rbrace [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 21
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 21:
## Known stack suffix:
## Lbrace compound_list
## LR(1) items:
brace_group -> Lbrace compound_list . Rbrace [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Rbrace shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## Lbrace compound_list Rbrace
## LR(1) items:
brace_group -> Lbrace compound_list Rbrace . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production brace_group -> Lbrace compound_list Rbrace
-- On Then reduce production brace_group -> Lbrace compound_list Rbrace
-- On Semicolon reduce production brace_group -> Lbrace compound_list Rbrace
-- On Rparen reduce production brace_group -> Lbrace compound_list Rbrace
-- On Rbrace reduce production brace_group -> Lbrace compound_list Rbrace
-- On Pipe reduce production brace_group -> Lbrace compound_list Rbrace
-- On OR_IF reduce production brace_group -> Lbrace compound_list Rbrace
-- On NEWLINE reduce production brace_group -> Lbrace compound_list Rbrace
-- On LESSGREAT reduce production brace_group -> Lbrace compound_list Rbrace
-- On LESSAND reduce production brace_group -> Lbrace compound_list Rbrace
-- On LESS reduce production brace_group -> Lbrace compound_list Rbrace
-- On IO_NUMBER reduce production brace_group -> Lbrace compound_list Rbrace
-- On GREATAND reduce production brace_group -> Lbrace compound_list Rbrace
-- On GREAT reduce production brace_group -> Lbrace compound_list Rbrace
-- On Fi reduce production brace_group -> Lbrace compound_list Rbrace
-- On Esac reduce production brace_group -> Lbrace compound_list Rbrace
-- On Else reduce production brace_group -> Lbrace compound_list Rbrace
-- On Elif reduce production brace_group -> Lbrace compound_list Rbrace
-- On EOF reduce production brace_group -> Lbrace compound_list Rbrace
-- On Done reduce production brace_group -> Lbrace compound_list Rbrace
-- On Do reduce production brace_group -> Lbrace compound_list Rbrace
-- On DSEMI reduce production brace_group -> Lbrace compound_list Rbrace
-- On DLESSDASH reduce production brace_group -> Lbrace compound_list Rbrace
-- On DLESS reduce production brace_group -> Lbrace compound_list Rbrace
-- On DGREAT reduce production brace_group -> Lbrace compound_list Rbrace
-- On CLOBBER reduce production brace_group -> Lbrace compound_list Rbrace
-- On AND_IF reduce production brace_group -> Lbrace compound_list Rbrace

State 23:
## Known stack suffix:
## LESSGREAT
## LR(1) items:
io_file -> LESSGREAT . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 26
## Reductions:

State 24:
## Known stack suffix:
## NAME
## LR(1) items:
word -> NAME . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS In IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production word -> NAME
-- On Uppersand reduce production word -> NAME
-- On Then reduce production word -> NAME
-- On Semicolon reduce production word -> NAME
-- On Rparen reduce production word -> NAME
-- On Rbrace reduce production word -> NAME
-- On Pipe reduce production word -> NAME
-- On OR_IF reduce production word -> NAME
-- On NEWLINE reduce production word -> NAME
-- On NAME reduce production word -> NAME
-- On LESSGREAT reduce production word -> NAME
-- On LESSAND reduce production word -> NAME
-- On LESS reduce production word -> NAME
-- On In reduce production word -> NAME
-- On IO_NUMBER reduce production word -> NAME
-- On GREATAND reduce production word -> NAME
-- On GREAT reduce production word -> NAME
-- On Fi reduce production word -> NAME
-- On Esac reduce production word -> NAME
-- On Else reduce production word -> NAME
-- On Elif reduce production word -> NAME
-- On EOF reduce production word -> NAME
-- On Done reduce production word -> NAME
-- On Do reduce production word -> NAME
-- On DSEMI reduce production word -> NAME
-- On DLESSDASH reduce production word -> NAME
-- On DLESS reduce production word -> NAME
-- On DGREAT reduce production word -> NAME
-- On CLOBBER reduce production word -> NAME
-- On ASSIGNMENT_WORD reduce production word -> NAME
-- On AND_IF reduce production word -> NAME

State 25:
## Known stack suffix:
## word
## LR(1) items:
filename -> word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production filename -> word
-- On Uppersand reduce production filename -> word
-- On Then reduce production filename -> word
-- On Semicolon reduce production filename -> word
-- On Rparen reduce production filename -> word
-- On Rbrace reduce production filename -> word
-- On Pipe reduce production filename -> word
-- On OR_IF reduce production filename -> word
-- On NEWLINE reduce production filename -> word
-- On NAME reduce production filename -> word
-- On LESSGREAT reduce production filename -> word
-- On LESSAND reduce production filename -> word
-- On LESS reduce production filename -> word
-- On IO_NUMBER reduce production filename -> word
-- On GREATAND reduce production filename -> word
-- On GREAT reduce production filename -> word
-- On Fi reduce production filename -> word
-- On Esac reduce production filename -> word
-- On Else reduce production filename -> word
-- On Elif reduce production filename -> word
-- On EOF reduce production filename -> word
-- On Done reduce production filename -> word
-- On Do reduce production filename -> word
-- On DSEMI reduce production filename -> word
-- On DLESSDASH reduce production filename -> word
-- On DLESS reduce production filename -> word
-- On DGREAT reduce production filename -> word
-- On CLOBBER reduce production filename -> word
-- On ASSIGNMENT_WORD reduce production filename -> word
-- On AND_IF reduce production filename -> word

State 26:
## Known stack suffix:
## LESSGREAT filename
## LR(1) items:
io_file -> LESSGREAT filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> LESSGREAT filename
-- On Uppersand reduce production io_file -> LESSGREAT filename
-- On Then reduce production io_file -> LESSGREAT filename
-- On Semicolon reduce production io_file -> LESSGREAT filename
-- On Rparen reduce production io_file -> LESSGREAT filename
-- On Rbrace reduce production io_file -> LESSGREAT filename
-- On Pipe reduce production io_file -> LESSGREAT filename
-- On OR_IF reduce production io_file -> LESSGREAT filename
-- On NEWLINE reduce production io_file -> LESSGREAT filename
-- On NAME reduce production io_file -> LESSGREAT filename
-- On LESSGREAT reduce production io_file -> LESSGREAT filename
-- On LESSAND reduce production io_file -> LESSGREAT filename
-- On LESS reduce production io_file -> LESSGREAT filename
-- On IO_NUMBER reduce production io_file -> LESSGREAT filename
-- On GREATAND reduce production io_file -> LESSGREAT filename
-- On GREAT reduce production io_file -> LESSGREAT filename
-- On Fi reduce production io_file -> LESSGREAT filename
-- On Esac reduce production io_file -> LESSGREAT filename
-- On Else reduce production io_file -> LESSGREAT filename
-- On Elif reduce production io_file -> LESSGREAT filename
-- On EOF reduce production io_file -> LESSGREAT filename
-- On Done reduce production io_file -> LESSGREAT filename
-- On Do reduce production io_file -> LESSGREAT filename
-- On DSEMI reduce production io_file -> LESSGREAT filename
-- On DLESSDASH reduce production io_file -> LESSGREAT filename
-- On DLESS reduce production io_file -> LESSGREAT filename
-- On DGREAT reduce production io_file -> LESSGREAT filename
-- On CLOBBER reduce production io_file -> LESSGREAT filename
-- On ASSIGNMENT_WORD reduce production io_file -> LESSGREAT filename
-- On AND_IF reduce production io_file -> LESSGREAT filename

State 27:
## Known stack suffix:
## LESSAND
## LR(1) items:
io_file -> LESSAND . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## LESSAND filename
## LR(1) items:
io_file -> LESSAND filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> LESSAND filename
-- On Uppersand reduce production io_file -> LESSAND filename
-- On Then reduce production io_file -> LESSAND filename
-- On Semicolon reduce production io_file -> LESSAND filename
-- On Rparen reduce production io_file -> LESSAND filename
-- On Rbrace reduce production io_file -> LESSAND filename
-- On Pipe reduce production io_file -> LESSAND filename
-- On OR_IF reduce production io_file -> LESSAND filename
-- On NEWLINE reduce production io_file -> LESSAND filename
-- On NAME reduce production io_file -> LESSAND filename
-- On LESSGREAT reduce production io_file -> LESSAND filename
-- On LESSAND reduce production io_file -> LESSAND filename
-- On LESS reduce production io_file -> LESSAND filename
-- On IO_NUMBER reduce production io_file -> LESSAND filename
-- On GREATAND reduce production io_file -> LESSAND filename
-- On GREAT reduce production io_file -> LESSAND filename
-- On Fi reduce production io_file -> LESSAND filename
-- On Esac reduce production io_file -> LESSAND filename
-- On Else reduce production io_file -> LESSAND filename
-- On Elif reduce production io_file -> LESSAND filename
-- On EOF reduce production io_file -> LESSAND filename
-- On Done reduce production io_file -> LESSAND filename
-- On Do reduce production io_file -> LESSAND filename
-- On DSEMI reduce production io_file -> LESSAND filename
-- On DLESSDASH reduce production io_file -> LESSAND filename
-- On DLESS reduce production io_file -> LESSAND filename
-- On DGREAT reduce production io_file -> LESSAND filename
-- On CLOBBER reduce production io_file -> LESSAND filename
-- On ASSIGNMENT_WORD reduce production io_file -> LESSAND filename
-- On AND_IF reduce production io_file -> LESSAND filename

State 29:
## Known stack suffix:
## LESS
## LR(1) items:
io_file -> LESS . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## LESS filename
## LR(1) items:
io_file -> LESS filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> LESS filename
-- On Uppersand reduce production io_file -> LESS filename
-- On Then reduce production io_file -> LESS filename
-- On Semicolon reduce production io_file -> LESS filename
-- On Rparen reduce production io_file -> LESS filename
-- On Rbrace reduce production io_file -> LESS filename
-- On Pipe reduce production io_file -> LESS filename
-- On OR_IF reduce production io_file -> LESS filename
-- On NEWLINE reduce production io_file -> LESS filename
-- On NAME reduce production io_file -> LESS filename
-- On LESSGREAT reduce production io_file -> LESS filename
-- On LESSAND reduce production io_file -> LESS filename
-- On LESS reduce production io_file -> LESS filename
-- On IO_NUMBER reduce production io_file -> LESS filename
-- On GREATAND reduce production io_file -> LESS filename
-- On GREAT reduce production io_file -> LESS filename
-- On Fi reduce production io_file -> LESS filename
-- On Esac reduce production io_file -> LESS filename
-- On Else reduce production io_file -> LESS filename
-- On Elif reduce production io_file -> LESS filename
-- On EOF reduce production io_file -> LESS filename
-- On Done reduce production io_file -> LESS filename
-- On Do reduce production io_file -> LESS filename
-- On DSEMI reduce production io_file -> LESS filename
-- On DLESSDASH reduce production io_file -> LESS filename
-- On DLESS reduce production io_file -> LESS filename
-- On DGREAT reduce production io_file -> LESS filename
-- On CLOBBER reduce production io_file -> LESS filename
-- On ASSIGNMENT_WORD reduce production io_file -> LESS filename
-- On AND_IF reduce production io_file -> LESS filename

State 31:
## Known stack suffix:
## If
## LR(1) items:
if_clause -> If . compound_list Then compound_list else_part Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
if_clause -> If . compound_list Then compound_list Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 32
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 32:
## Known stack suffix:
## If compound_list
## LR(1) items:
if_clause -> If compound_list . Then compound_list else_part Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
if_clause -> If compound_list . Then compound_list Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Then shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## If compound_list Then
## LR(1) items:
if_clause -> If compound_list Then . compound_list else_part Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
if_clause -> If compound_list Then . compound_list Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 34
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 34:
## Known stack suffix:
## If compound_list Then compound_list
## LR(1) items:
if_clause -> If compound_list Then compound_list . else_part Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
if_clause -> If compound_list Then compound_list . Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Fi shift to state 35
-- On Else shift to state 36
-- On Elif shift to state 38
-- On else_part shift to state 43
## Reductions:

State 35:
## Known stack suffix:
## If compound_list Then compound_list Fi
## LR(1) items:
if_clause -> If compound_list Then compound_list Fi . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production if_clause -> If compound_list Then compound_list Fi
-- On Then reduce production if_clause -> If compound_list Then compound_list Fi
-- On Semicolon reduce production if_clause -> If compound_list Then compound_list Fi
-- On Rparen reduce production if_clause -> If compound_list Then compound_list Fi
-- On Rbrace reduce production if_clause -> If compound_list Then compound_list Fi
-- On Pipe reduce production if_clause -> If compound_list Then compound_list Fi
-- On OR_IF reduce production if_clause -> If compound_list Then compound_list Fi
-- On NEWLINE reduce production if_clause -> If compound_list Then compound_list Fi
-- On LESSGREAT reduce production if_clause -> If compound_list Then compound_list Fi
-- On LESSAND reduce production if_clause -> If compound_list Then compound_list Fi
-- On LESS reduce production if_clause -> If compound_list Then compound_list Fi
-- On IO_NUMBER reduce production if_clause -> If compound_list Then compound_list Fi
-- On GREATAND reduce production if_clause -> If compound_list Then compound_list Fi
-- On GREAT reduce production if_clause -> If compound_list Then compound_list Fi
-- On Fi reduce production if_clause -> If compound_list Then compound_list Fi
-- On Esac reduce production if_clause -> If compound_list Then compound_list Fi
-- On Else reduce production if_clause -> If compound_list Then compound_list Fi
-- On Elif reduce production if_clause -> If compound_list Then compound_list Fi
-- On EOF reduce production if_clause -> If compound_list Then compound_list Fi
-- On Done reduce production if_clause -> If compound_list Then compound_list Fi
-- On Do reduce production if_clause -> If compound_list Then compound_list Fi
-- On DSEMI reduce production if_clause -> If compound_list Then compound_list Fi
-- On DLESSDASH reduce production if_clause -> If compound_list Then compound_list Fi
-- On DLESS reduce production if_clause -> If compound_list Then compound_list Fi
-- On DGREAT reduce production if_clause -> If compound_list Then compound_list Fi
-- On CLOBBER reduce production if_clause -> If compound_list Then compound_list Fi
-- On AND_IF reduce production if_clause -> If compound_list Then compound_list Fi

State 36:
## Known stack suffix:
## Else
## LR(1) items:
else_part -> Else . compound_list [ Fi ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 37
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 37:
## Known stack suffix:
## Else compound_list
## LR(1) items:
else_part -> Else compound_list . [ Fi ]
## Transitions:
## Reductions:
-- On Fi reduce production else_part -> Else compound_list

State 38:
## Known stack suffix:
## Elif
## LR(1) items:
else_part -> Elif . compound_list Then compound_list [ Fi ]
else_part -> Elif . compound_list Then compound_list else_part [ Fi ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 39
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 39:
## Known stack suffix:
## Elif compound_list
## LR(1) items:
else_part -> Elif compound_list . Then compound_list [ Fi ]
else_part -> Elif compound_list . Then compound_list else_part [ Fi ]
## Transitions:
-- On Then shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## Elif compound_list Then
## LR(1) items:
else_part -> Elif compound_list Then . compound_list [ Fi ]
else_part -> Elif compound_list Then . compound_list else_part [ Fi ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 8
-- On compound_list shift to state 41
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 41:
## Known stack suffix:
## Elif compound_list Then compound_list
## LR(1) items:
else_part -> Elif compound_list Then compound_list . [ Fi ]
else_part -> Elif compound_list Then compound_list . else_part [ Fi ]
## Transitions:
-- On Else shift to state 36
-- On Elif shift to state 38
-- On else_part shift to state 42
## Reductions:
-- On Fi reduce production else_part -> Elif compound_list Then compound_list

State 42:
## Known stack suffix:
## Elif compound_list Then compound_list else_part
## LR(1) items:
else_part -> Elif compound_list Then compound_list else_part . [ Fi ]
## Transitions:
## Reductions:
-- On Fi reduce production else_part -> Elif compound_list Then compound_list else_part

State 43:
## Known stack suffix:
## If compound_list Then compound_list else_part
## LR(1) items:
if_clause -> If compound_list Then compound_list else_part . Fi [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Fi shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## If compound_list Then compound_list else_part Fi
## LR(1) items:
if_clause -> If compound_list Then compound_list else_part Fi . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Then reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Semicolon reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Rparen reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Rbrace reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Pipe reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On OR_IF reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On NEWLINE reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On LESSGREAT reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On LESSAND reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On LESS reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On IO_NUMBER reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On GREATAND reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On GREAT reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Fi reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Esac reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Else reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Elif reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On EOF reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Done reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On Do reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On DSEMI reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On DLESSDASH reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On DLESS reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On DGREAT reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On CLOBBER reduce production if_clause -> If compound_list Then compound_list else_part Fi
-- On AND_IF reduce production if_clause -> If compound_list Then compound_list else_part Fi

State 45:
## Known stack suffix:
## IO_NUMBER
## LR(1) items:
io_redirect -> IO_NUMBER . io_file [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
io_redirect -> IO_NUMBER . io_here [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On io_here shift to state 59
-- On io_file shift to state 60
## Reductions:

State 46:
## Known stack suffix:
## GREATAND
## LR(1) items:
io_file -> GREATAND . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## GREATAND filename
## LR(1) items:
io_file -> GREATAND filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> GREATAND filename
-- On Uppersand reduce production io_file -> GREATAND filename
-- On Then reduce production io_file -> GREATAND filename
-- On Semicolon reduce production io_file -> GREATAND filename
-- On Rparen reduce production io_file -> GREATAND filename
-- On Rbrace reduce production io_file -> GREATAND filename
-- On Pipe reduce production io_file -> GREATAND filename
-- On OR_IF reduce production io_file -> GREATAND filename
-- On NEWLINE reduce production io_file -> GREATAND filename
-- On NAME reduce production io_file -> GREATAND filename
-- On LESSGREAT reduce production io_file -> GREATAND filename
-- On LESSAND reduce production io_file -> GREATAND filename
-- On LESS reduce production io_file -> GREATAND filename
-- On IO_NUMBER reduce production io_file -> GREATAND filename
-- On GREATAND reduce production io_file -> GREATAND filename
-- On GREAT reduce production io_file -> GREATAND filename
-- On Fi reduce production io_file -> GREATAND filename
-- On Esac reduce production io_file -> GREATAND filename
-- On Else reduce production io_file -> GREATAND filename
-- On Elif reduce production io_file -> GREATAND filename
-- On EOF reduce production io_file -> GREATAND filename
-- On Done reduce production io_file -> GREATAND filename
-- On Do reduce production io_file -> GREATAND filename
-- On DSEMI reduce production io_file -> GREATAND filename
-- On DLESSDASH reduce production io_file -> GREATAND filename
-- On DLESS reduce production io_file -> GREATAND filename
-- On DGREAT reduce production io_file -> GREATAND filename
-- On CLOBBER reduce production io_file -> GREATAND filename
-- On ASSIGNMENT_WORD reduce production io_file -> GREATAND filename
-- On AND_IF reduce production io_file -> GREATAND filename

State 48:
## Known stack suffix:
## GREAT
## LR(1) items:
io_file -> GREAT . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## GREAT filename
## LR(1) items:
io_file -> GREAT filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> GREAT filename
-- On Uppersand reduce production io_file -> GREAT filename
-- On Then reduce production io_file -> GREAT filename
-- On Semicolon reduce production io_file -> GREAT filename
-- On Rparen reduce production io_file -> GREAT filename
-- On Rbrace reduce production io_file -> GREAT filename
-- On Pipe reduce production io_file -> GREAT filename
-- On OR_IF reduce production io_file -> GREAT filename
-- On NEWLINE reduce production io_file -> GREAT filename
-- On NAME reduce production io_file -> GREAT filename
-- On LESSGREAT reduce production io_file -> GREAT filename
-- On LESSAND reduce production io_file -> GREAT filename
-- On LESS reduce production io_file -> GREAT filename
-- On IO_NUMBER reduce production io_file -> GREAT filename
-- On GREATAND reduce production io_file -> GREAT filename
-- On GREAT reduce production io_file -> GREAT filename
-- On Fi reduce production io_file -> GREAT filename
-- On Esac reduce production io_file -> GREAT filename
-- On Else reduce production io_file -> GREAT filename
-- On Elif reduce production io_file -> GREAT filename
-- On EOF reduce production io_file -> GREAT filename
-- On Done reduce production io_file -> GREAT filename
-- On Do reduce production io_file -> GREAT filename
-- On DSEMI reduce production io_file -> GREAT filename
-- On DLESSDASH reduce production io_file -> GREAT filename
-- On DLESS reduce production io_file -> GREAT filename
-- On DGREAT reduce production io_file -> GREAT filename
-- On CLOBBER reduce production io_file -> GREAT filename
-- On ASSIGNMENT_WORD reduce production io_file -> GREAT filename
-- On AND_IF reduce production io_file -> GREAT filename

State 50:
## Known stack suffix:
## DLESSDASH
## LR(1) items:
io_here -> DLESSDASH . here_end [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 51
-- On here_end shift to state 52
## Reductions:

State 51:
## Known stack suffix:
## word
## LR(1) items:
here_end -> word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production here_end -> word
-- On Uppersand reduce production here_end -> word
-- On Then reduce production here_end -> word
-- On Semicolon reduce production here_end -> word
-- On Rparen reduce production here_end -> word
-- On Rbrace reduce production here_end -> word
-- On Pipe reduce production here_end -> word
-- On OR_IF reduce production here_end -> word
-- On NEWLINE reduce production here_end -> word
-- On NAME reduce production here_end -> word
-- On LESSGREAT reduce production here_end -> word
-- On LESSAND reduce production here_end -> word
-- On LESS reduce production here_end -> word
-- On IO_NUMBER reduce production here_end -> word
-- On GREATAND reduce production here_end -> word
-- On GREAT reduce production here_end -> word
-- On Fi reduce production here_end -> word
-- On Esac reduce production here_end -> word
-- On Else reduce production here_end -> word
-- On Elif reduce production here_end -> word
-- On EOF reduce production here_end -> word
-- On Done reduce production here_end -> word
-- On Do reduce production here_end -> word
-- On DSEMI reduce production here_end -> word
-- On DLESSDASH reduce production here_end -> word
-- On DLESS reduce production here_end -> word
-- On DGREAT reduce production here_end -> word
-- On CLOBBER reduce production here_end -> word
-- On ASSIGNMENT_WORD reduce production here_end -> word
-- On AND_IF reduce production here_end -> word

State 52:
## Known stack suffix:
## DLESSDASH here_end
## LR(1) items:
io_here -> DLESSDASH here_end . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_here -> DLESSDASH here_end
-- On Uppersand reduce production io_here -> DLESSDASH here_end
-- On Then reduce production io_here -> DLESSDASH here_end
-- On Semicolon reduce production io_here -> DLESSDASH here_end
-- On Rparen reduce production io_here -> DLESSDASH here_end
-- On Rbrace reduce production io_here -> DLESSDASH here_end
-- On Pipe reduce production io_here -> DLESSDASH here_end
-- On OR_IF reduce production io_here -> DLESSDASH here_end
-- On NEWLINE reduce production io_here -> DLESSDASH here_end
-- On NAME reduce production io_here -> DLESSDASH here_end
-- On LESSGREAT reduce production io_here -> DLESSDASH here_end
-- On LESSAND reduce production io_here -> DLESSDASH here_end
-- On LESS reduce production io_here -> DLESSDASH here_end
-- On IO_NUMBER reduce production io_here -> DLESSDASH here_end
-- On GREATAND reduce production io_here -> DLESSDASH here_end
-- On GREAT reduce production io_here -> DLESSDASH here_end
-- On Fi reduce production io_here -> DLESSDASH here_end
-- On Esac reduce production io_here -> DLESSDASH here_end
-- On Else reduce production io_here -> DLESSDASH here_end
-- On Elif reduce production io_here -> DLESSDASH here_end
-- On EOF reduce production io_here -> DLESSDASH here_end
-- On Done reduce production io_here -> DLESSDASH here_end
-- On Do reduce production io_here -> DLESSDASH here_end
-- On DSEMI reduce production io_here -> DLESSDASH here_end
-- On DLESSDASH reduce production io_here -> DLESSDASH here_end
-- On DLESS reduce production io_here -> DLESSDASH here_end
-- On DGREAT reduce production io_here -> DLESSDASH here_end
-- On CLOBBER reduce production io_here -> DLESSDASH here_end
-- On ASSIGNMENT_WORD reduce production io_here -> DLESSDASH here_end
-- On AND_IF reduce production io_here -> DLESSDASH here_end

State 53:
## Known stack suffix:
## DLESS
## LR(1) items:
io_here -> DLESS . here_end [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 51
-- On here_end shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## DLESS here_end
## LR(1) items:
io_here -> DLESS here_end . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_here -> DLESS here_end
-- On Uppersand reduce production io_here -> DLESS here_end
-- On Then reduce production io_here -> DLESS here_end
-- On Semicolon reduce production io_here -> DLESS here_end
-- On Rparen reduce production io_here -> DLESS here_end
-- On Rbrace reduce production io_here -> DLESS here_end
-- On Pipe reduce production io_here -> DLESS here_end
-- On OR_IF reduce production io_here -> DLESS here_end
-- On NEWLINE reduce production io_here -> DLESS here_end
-- On NAME reduce production io_here -> DLESS here_end
-- On LESSGREAT reduce production io_here -> DLESS here_end
-- On LESSAND reduce production io_here -> DLESS here_end
-- On LESS reduce production io_here -> DLESS here_end
-- On IO_NUMBER reduce production io_here -> DLESS here_end
-- On GREATAND reduce production io_here -> DLESS here_end
-- On GREAT reduce production io_here -> DLESS here_end
-- On Fi reduce production io_here -> DLESS here_end
-- On Esac reduce production io_here -> DLESS here_end
-- On Else reduce production io_here -> DLESS here_end
-- On Elif reduce production io_here -> DLESS here_end
-- On EOF reduce production io_here -> DLESS here_end
-- On Done reduce production io_here -> DLESS here_end
-- On Do reduce production io_here -> DLESS here_end
-- On DSEMI reduce production io_here -> DLESS here_end
-- On DLESSDASH reduce production io_here -> DLESS here_end
-- On DLESS reduce production io_here -> DLESS here_end
-- On DGREAT reduce production io_here -> DLESS here_end
-- On CLOBBER reduce production io_here -> DLESS here_end
-- On ASSIGNMENT_WORD reduce production io_here -> DLESS here_end
-- On AND_IF reduce production io_here -> DLESS here_end

State 55:
## Known stack suffix:
## DGREAT
## LR(1) items:
io_file -> DGREAT . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## DGREAT filename
## LR(1) items:
io_file -> DGREAT filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> DGREAT filename
-- On Uppersand reduce production io_file -> DGREAT filename
-- On Then reduce production io_file -> DGREAT filename
-- On Semicolon reduce production io_file -> DGREAT filename
-- On Rparen reduce production io_file -> DGREAT filename
-- On Rbrace reduce production io_file -> DGREAT filename
-- On Pipe reduce production io_file -> DGREAT filename
-- On OR_IF reduce production io_file -> DGREAT filename
-- On NEWLINE reduce production io_file -> DGREAT filename
-- On NAME reduce production io_file -> DGREAT filename
-- On LESSGREAT reduce production io_file -> DGREAT filename
-- On LESSAND reduce production io_file -> DGREAT filename
-- On LESS reduce production io_file -> DGREAT filename
-- On IO_NUMBER reduce production io_file -> DGREAT filename
-- On GREATAND reduce production io_file -> DGREAT filename
-- On GREAT reduce production io_file -> DGREAT filename
-- On Fi reduce production io_file -> DGREAT filename
-- On Esac reduce production io_file -> DGREAT filename
-- On Else reduce production io_file -> DGREAT filename
-- On Elif reduce production io_file -> DGREAT filename
-- On EOF reduce production io_file -> DGREAT filename
-- On Done reduce production io_file -> DGREAT filename
-- On Do reduce production io_file -> DGREAT filename
-- On DSEMI reduce production io_file -> DGREAT filename
-- On DLESSDASH reduce production io_file -> DGREAT filename
-- On DLESS reduce production io_file -> DGREAT filename
-- On DGREAT reduce production io_file -> DGREAT filename
-- On CLOBBER reduce production io_file -> DGREAT filename
-- On ASSIGNMENT_WORD reduce production io_file -> DGREAT filename
-- On AND_IF reduce production io_file -> DGREAT filename

State 57:
## Known stack suffix:
## CLOBBER
## LR(1) items:
io_file -> CLOBBER . filename [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 25
-- On filename shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## CLOBBER filename
## LR(1) items:
io_file -> CLOBBER filename . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_file -> CLOBBER filename
-- On Uppersand reduce production io_file -> CLOBBER filename
-- On Then reduce production io_file -> CLOBBER filename
-- On Semicolon reduce production io_file -> CLOBBER filename
-- On Rparen reduce production io_file -> CLOBBER filename
-- On Rbrace reduce production io_file -> CLOBBER filename
-- On Pipe reduce production io_file -> CLOBBER filename
-- On OR_IF reduce production io_file -> CLOBBER filename
-- On NEWLINE reduce production io_file -> CLOBBER filename
-- On NAME reduce production io_file -> CLOBBER filename
-- On LESSGREAT reduce production io_file -> CLOBBER filename
-- On LESSAND reduce production io_file -> CLOBBER filename
-- On LESS reduce production io_file -> CLOBBER filename
-- On IO_NUMBER reduce production io_file -> CLOBBER filename
-- On GREATAND reduce production io_file -> CLOBBER filename
-- On GREAT reduce production io_file -> CLOBBER filename
-- On Fi reduce production io_file -> CLOBBER filename
-- On Esac reduce production io_file -> CLOBBER filename
-- On Else reduce production io_file -> CLOBBER filename
-- On Elif reduce production io_file -> CLOBBER filename
-- On EOF reduce production io_file -> CLOBBER filename
-- On Done reduce production io_file -> CLOBBER filename
-- On Do reduce production io_file -> CLOBBER filename
-- On DSEMI reduce production io_file -> CLOBBER filename
-- On DLESSDASH reduce production io_file -> CLOBBER filename
-- On DLESS reduce production io_file -> CLOBBER filename
-- On DGREAT reduce production io_file -> CLOBBER filename
-- On CLOBBER reduce production io_file -> CLOBBER filename
-- On ASSIGNMENT_WORD reduce production io_file -> CLOBBER filename
-- On AND_IF reduce production io_file -> CLOBBER filename

State 59:
## Known stack suffix:
## IO_NUMBER io_here
## LR(1) items:
io_redirect -> IO_NUMBER io_here . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_redirect -> IO_NUMBER io_here
-- On Uppersand reduce production io_redirect -> IO_NUMBER io_here
-- On Then reduce production io_redirect -> IO_NUMBER io_here
-- On Semicolon reduce production io_redirect -> IO_NUMBER io_here
-- On Rparen reduce production io_redirect -> IO_NUMBER io_here
-- On Rbrace reduce production io_redirect -> IO_NUMBER io_here
-- On Pipe reduce production io_redirect -> IO_NUMBER io_here
-- On OR_IF reduce production io_redirect -> IO_NUMBER io_here
-- On NEWLINE reduce production io_redirect -> IO_NUMBER io_here
-- On NAME reduce production io_redirect -> IO_NUMBER io_here
-- On LESSGREAT reduce production io_redirect -> IO_NUMBER io_here
-- On LESSAND reduce production io_redirect -> IO_NUMBER io_here
-- On LESS reduce production io_redirect -> IO_NUMBER io_here
-- On IO_NUMBER reduce production io_redirect -> IO_NUMBER io_here
-- On GREATAND reduce production io_redirect -> IO_NUMBER io_here
-- On GREAT reduce production io_redirect -> IO_NUMBER io_here
-- On Fi reduce production io_redirect -> IO_NUMBER io_here
-- On Esac reduce production io_redirect -> IO_NUMBER io_here
-- On Else reduce production io_redirect -> IO_NUMBER io_here
-- On Elif reduce production io_redirect -> IO_NUMBER io_here
-- On EOF reduce production io_redirect -> IO_NUMBER io_here
-- On Done reduce production io_redirect -> IO_NUMBER io_here
-- On Do reduce production io_redirect -> IO_NUMBER io_here
-- On DSEMI reduce production io_redirect -> IO_NUMBER io_here
-- On DLESSDASH reduce production io_redirect -> IO_NUMBER io_here
-- On DLESS reduce production io_redirect -> IO_NUMBER io_here
-- On DGREAT reduce production io_redirect -> IO_NUMBER io_here
-- On CLOBBER reduce production io_redirect -> IO_NUMBER io_here
-- On ASSIGNMENT_WORD reduce production io_redirect -> IO_NUMBER io_here
-- On AND_IF reduce production io_redirect -> IO_NUMBER io_here

State 60:
## Known stack suffix:
## IO_NUMBER io_file
## LR(1) items:
io_redirect -> IO_NUMBER io_file . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_redirect -> IO_NUMBER io_file
-- On Uppersand reduce production io_redirect -> IO_NUMBER io_file
-- On Then reduce production io_redirect -> IO_NUMBER io_file
-- On Semicolon reduce production io_redirect -> IO_NUMBER io_file
-- On Rparen reduce production io_redirect -> IO_NUMBER io_file
-- On Rbrace reduce production io_redirect -> IO_NUMBER io_file
-- On Pipe reduce production io_redirect -> IO_NUMBER io_file
-- On OR_IF reduce production io_redirect -> IO_NUMBER io_file
-- On NEWLINE reduce production io_redirect -> IO_NUMBER io_file
-- On NAME reduce production io_redirect -> IO_NUMBER io_file
-- On LESSGREAT reduce production io_redirect -> IO_NUMBER io_file
-- On LESSAND reduce production io_redirect -> IO_NUMBER io_file
-- On LESS reduce production io_redirect -> IO_NUMBER io_file
-- On IO_NUMBER reduce production io_redirect -> IO_NUMBER io_file
-- On GREATAND reduce production io_redirect -> IO_NUMBER io_file
-- On GREAT reduce production io_redirect -> IO_NUMBER io_file
-- On Fi reduce production io_redirect -> IO_NUMBER io_file
-- On Esac reduce production io_redirect -> IO_NUMBER io_file
-- On Else reduce production io_redirect -> IO_NUMBER io_file
-- On Elif reduce production io_redirect -> IO_NUMBER io_file
-- On EOF reduce production io_redirect -> IO_NUMBER io_file
-- On Done reduce production io_redirect -> IO_NUMBER io_file
-- On Do reduce production io_redirect -> IO_NUMBER io_file
-- On DSEMI reduce production io_redirect -> IO_NUMBER io_file
-- On DLESSDASH reduce production io_redirect -> IO_NUMBER io_file
-- On DLESS reduce production io_redirect -> IO_NUMBER io_file
-- On DGREAT reduce production io_redirect -> IO_NUMBER io_file
-- On CLOBBER reduce production io_redirect -> IO_NUMBER io_file
-- On ASSIGNMENT_WORD reduce production io_redirect -> IO_NUMBER io_file
-- On AND_IF reduce production io_redirect -> IO_NUMBER io_file

State 61:
## Known stack suffix:
## For
## LR(1) items:
for_clause -> For . name do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For . name sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For . name linebreak cin sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For . name linebreak cin wordlist sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NAME shift to state 62
-- On name shift to state 63
## Reductions:

State 62:
## Known stack suffix:
## NAME
## LR(1) items:
name -> NAME . [ Semicolon NEWLINE In Do ]
## Transitions:
## Reductions:
-- On Semicolon reduce production name -> NAME
-- On NEWLINE reduce production name -> NAME
-- On In reduce production name -> NAME
-- On Do reduce production name -> NAME

State 63:
## Known stack suffix:
## For name
## LR(1) items:
for_clause -> For name . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For name . sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For name . linebreak cin sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For name . linebreak cin wordlist sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Semicolon shift to state 64
-- On NEWLINE shift to state 1
-- On Do shift to state 12
-- On sequential_sep shift to state 66
-- On newline_list shift to state 68
-- On linebreak shift to state 69
-- On do_group shift to state 80
## Reductions:
-- On In reduce production linebreak ->

State 64:
## Known stack suffix:
## Semicolon
## LR(1) items:
sequential_sep -> Semicolon . linebreak [ Do ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 65
## Reductions:
-- On Do reduce production linebreak ->

State 65:
## Known stack suffix:
## Semicolon linebreak
## LR(1) items:
sequential_sep -> Semicolon linebreak . [ Do ]
## Transitions:
## Reductions:
-- On Do reduce production sequential_sep -> Semicolon linebreak

State 66:
## Known stack suffix:
## For name sequential_sep
## LR(1) items:
for_clause -> For name sequential_sep . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Do shift to state 12
-- On do_group shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## For name sequential_sep do_group
## LR(1) items:
for_clause -> For name sequential_sep do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production for_clause -> For name sequential_sep do_group
-- On Then reduce production for_clause -> For name sequential_sep do_group
-- On Semicolon reduce production for_clause -> For name sequential_sep do_group
-- On Rparen reduce production for_clause -> For name sequential_sep do_group
-- On Rbrace reduce production for_clause -> For name sequential_sep do_group
-- On Pipe reduce production for_clause -> For name sequential_sep do_group
-- On OR_IF reduce production for_clause -> For name sequential_sep do_group
-- On NEWLINE reduce production for_clause -> For name sequential_sep do_group
-- On LESSGREAT reduce production for_clause -> For name sequential_sep do_group
-- On LESSAND reduce production for_clause -> For name sequential_sep do_group
-- On LESS reduce production for_clause -> For name sequential_sep do_group
-- On IO_NUMBER reduce production for_clause -> For name sequential_sep do_group
-- On GREATAND reduce production for_clause -> For name sequential_sep do_group
-- On GREAT reduce production for_clause -> For name sequential_sep do_group
-- On Fi reduce production for_clause -> For name sequential_sep do_group
-- On Esac reduce production for_clause -> For name sequential_sep do_group
-- On Else reduce production for_clause -> For name sequential_sep do_group
-- On Elif reduce production for_clause -> For name sequential_sep do_group
-- On EOF reduce production for_clause -> For name sequential_sep do_group
-- On Done reduce production for_clause -> For name sequential_sep do_group
-- On Do reduce production for_clause -> For name sequential_sep do_group
-- On DSEMI reduce production for_clause -> For name sequential_sep do_group
-- On DLESSDASH reduce production for_clause -> For name sequential_sep do_group
-- On DLESS reduce production for_clause -> For name sequential_sep do_group
-- On DGREAT reduce production for_clause -> For name sequential_sep do_group
-- On CLOBBER reduce production for_clause -> For name sequential_sep do_group
-- On AND_IF reduce production for_clause -> For name sequential_sep do_group

State 68:
## Known stack suffix:
## newline_list
## LR(1) items:
linebreak -> newline_list . [ In ]
newline_list -> newline_list . NEWLINE [ NEWLINE In Do ]
sequential_sep -> newline_list . [ Do ]
## Transitions:
-- On NEWLINE shift to state 5
## Reductions:
-- On In reduce production linebreak -> newline_list
-- On Do reduce production sequential_sep -> newline_list

State 69:
## Known stack suffix:
## For name linebreak
## LR(1) items:
for_clause -> For name linebreak . cin sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For name linebreak . cin wordlist sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On In shift to state 70
-- On cin shift to state 71
## Reductions:

State 70:
## Known stack suffix:
## In
## LR(1) items:
cin -> In . [ WORD Semicolon NEWLINE NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production cin -> In
-- On Semicolon reduce production cin -> In
-- On NEWLINE reduce production cin -> In
-- On NAME reduce production cin -> In
-- On Lparen reduce production cin -> In
-- On Esac reduce production cin -> In

State 71:
## Known stack suffix:
## For name linebreak cin
## LR(1) items:
for_clause -> For name linebreak cin . sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
for_clause -> For name linebreak cin . wordlist sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On Semicolon shift to state 64
-- On NEWLINE shift to state 1
-- On NAME shift to state 24
-- On wordlist shift to state 72
-- On word shift to state 77
-- On sequential_sep shift to state 78
-- On newline_list shift to state 76
## Reductions:

State 72:
## Known stack suffix:
## For name linebreak cin wordlist
## LR(1) items:
for_clause -> For name linebreak cin wordlist . sequential_sep do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
wordlist -> wordlist . word [ WORD Semicolon NEWLINE NAME ]
## Transitions:
-- On WORD shift to state 9
-- On Semicolon shift to state 64
-- On NEWLINE shift to state 1
-- On NAME shift to state 24
-- On word shift to state 73
-- On sequential_sep shift to state 74
-- On newline_list shift to state 76
## Reductions:

State 73:
## Known stack suffix:
## wordlist word
## LR(1) items:
wordlist -> wordlist word . [ WORD Semicolon NEWLINE NAME ]
## Transitions:
## Reductions:
-- On WORD reduce production wordlist -> wordlist word
-- On Semicolon reduce production wordlist -> wordlist word
-- On NEWLINE reduce production wordlist -> wordlist word
-- On NAME reduce production wordlist -> wordlist word

State 74:
## Known stack suffix:
## For name linebreak cin wordlist sequential_sep
## LR(1) items:
for_clause -> For name linebreak cin wordlist sequential_sep . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Do shift to state 12
-- On do_group shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## For name linebreak cin wordlist sequential_sep do_group
## LR(1) items:
for_clause -> For name linebreak cin wordlist sequential_sep do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Then reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Semicolon reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Rparen reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Rbrace reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Pipe reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On OR_IF reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On NEWLINE reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On LESSGREAT reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On LESSAND reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On LESS reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On IO_NUMBER reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On GREATAND reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On GREAT reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Fi reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Esac reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Else reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Elif reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On EOF reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Done reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On Do reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On DSEMI reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On DLESSDASH reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On DLESS reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On DGREAT reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On CLOBBER reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group
-- On AND_IF reduce production for_clause -> For name linebreak cin wordlist sequential_sep do_group

State 76:
## Known stack suffix:
## newline_list
## LR(1) items:
newline_list -> newline_list . NEWLINE [ NEWLINE Do ]
sequential_sep -> newline_list . [ Do ]
## Transitions:
-- On NEWLINE shift to state 5
## Reductions:
-- On Do reduce production sequential_sep -> newline_list

State 77:
## Known stack suffix:
## word
## LR(1) items:
wordlist -> word . [ WORD Semicolon NEWLINE NAME ]
## Transitions:
## Reductions:
-- On WORD reduce production wordlist -> word
-- On Semicolon reduce production wordlist -> word
-- On NEWLINE reduce production wordlist -> word
-- On NAME reduce production wordlist -> word

State 78:
## Known stack suffix:
## For name linebreak cin sequential_sep
## LR(1) items:
for_clause -> For name linebreak cin sequential_sep . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Do shift to state 12
-- On do_group shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## For name linebreak cin sequential_sep do_group
## LR(1) items:
for_clause -> For name linebreak cin sequential_sep do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Then reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Semicolon reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Rparen reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Rbrace reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Pipe reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On OR_IF reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On NEWLINE reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On LESSGREAT reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On LESSAND reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On LESS reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On IO_NUMBER reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On GREATAND reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On GREAT reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Fi reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Esac reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Else reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Elif reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On EOF reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Done reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On Do reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On DSEMI reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On DLESSDASH reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On DLESS reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On DGREAT reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On CLOBBER reduce production for_clause -> For name linebreak cin sequential_sep do_group
-- On AND_IF reduce production for_clause -> For name linebreak cin sequential_sep do_group

State 80:
## Known stack suffix:
## For name do_group
## LR(1) items:
for_clause -> For name do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production for_clause -> For name do_group
-- On Then reduce production for_clause -> For name do_group
-- On Semicolon reduce production for_clause -> For name do_group
-- On Rparen reduce production for_clause -> For name do_group
-- On Rbrace reduce production for_clause -> For name do_group
-- On Pipe reduce production for_clause -> For name do_group
-- On OR_IF reduce production for_clause -> For name do_group
-- On NEWLINE reduce production for_clause -> For name do_group
-- On LESSGREAT reduce production for_clause -> For name do_group
-- On LESSAND reduce production for_clause -> For name do_group
-- On LESS reduce production for_clause -> For name do_group
-- On IO_NUMBER reduce production for_clause -> For name do_group
-- On GREATAND reduce production for_clause -> For name do_group
-- On GREAT reduce production for_clause -> For name do_group
-- On Fi reduce production for_clause -> For name do_group
-- On Esac reduce production for_clause -> For name do_group
-- On Else reduce production for_clause -> For name do_group
-- On Elif reduce production for_clause -> For name do_group
-- On EOF reduce production for_clause -> For name do_group
-- On Done reduce production for_clause -> For name do_group
-- On Do reduce production for_clause -> For name do_group
-- On DSEMI reduce production for_clause -> For name do_group
-- On DLESSDASH reduce production for_clause -> For name do_group
-- On DLESS reduce production for_clause -> For name do_group
-- On DGREAT reduce production for_clause -> For name do_group
-- On CLOBBER reduce production for_clause -> For name do_group
-- On AND_IF reduce production for_clause -> For name do_group

State 81:
## Known stack suffix:
## Case
## LR(1) items:
case_clause -> Case . word linebreak cin linebreak case_list Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case . word linebreak cin linebreak case_list_ns Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case . word linebreak cin linebreak Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## Case word
## LR(1) items:
case_clause -> Case word . linebreak cin linebreak case_list Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word . linebreak cin linebreak case_list_ns Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word . linebreak cin linebreak Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 83
## Reductions:
-- On In reduce production linebreak ->

State 83:
## Known stack suffix:
## Case word linebreak
## LR(1) items:
case_clause -> Case word linebreak . cin linebreak case_list Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak . cin linebreak case_list_ns Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak . cin linebreak Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On In shift to state 70
-- On cin shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## Case word linebreak cin
## LR(1) items:
case_clause -> Case word linebreak cin . linebreak case_list Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak cin . linebreak case_list_ns Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak cin . linebreak Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 85
## Reductions:
-- On WORD reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Esac reduce production linebreak ->

State 85:
## Known stack suffix:
## Case word linebreak cin linebreak
## LR(1) items:
case_clause -> Case word linebreak cin linebreak . case_list Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak cin linebreak . case_list_ns Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_clause -> Case word linebreak cin linebreak . Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On Lparen shift to state 86
-- On Esac shift to state 158
-- On word shift to state 87
-- On pattern shift to state 159
-- On case_list_ns shift to state 167
-- On case_list shift to state 169
-- On case_item_ns shift to state 173
-- On case_item shift to state 174
## Reductions:

State 86:
## Known stack suffix:
## Lparen
## LR(1) items:
case_item -> Lparen . pattern Rparen linebreak DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item -> Lparen . pattern Rparen compound_list DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> Lparen . pattern Rparen linebreak [ Esac ]
case_item_ns -> Lparen . pattern Rparen compound_list [ Esac ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 87
-- On pattern shift to state 88
## Reductions:

State 87:
## Known stack suffix:
## word
## LR(1) items:
pattern -> word . [ Rparen Pipe ]
## Transitions:
## Reductions:
-- On Rparen reduce production pattern -> word
-- On Pipe reduce production pattern -> word

State 88:
## Known stack suffix:
## Lparen pattern
## LR(1) items:
case_item -> Lparen pattern . Rparen linebreak DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item -> Lparen pattern . Rparen compound_list DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> Lparen pattern . Rparen linebreak [ Esac ]
case_item_ns -> Lparen pattern . Rparen compound_list [ Esac ]
pattern -> pattern . Pipe word [ Rparen Pipe ]
## Transitions:
-- On Rparen shift to state 89
-- On Pipe shift to state 156
## Reductions:

State 89:
## Known stack suffix:
## Lparen pattern Rparen
## LR(1) items:
case_item -> Lparen pattern Rparen . linebreak DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item -> Lparen pattern Rparen . compound_list DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> Lparen pattern Rparen . linebreak [ Esac ]
case_item_ns -> Lparen pattern Rparen . compound_list [ Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 90
-- On compound_list shift to state 153
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On Esac reduce production linebreak ->
-- On DSEMI reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 90:
## Known stack suffix:
## Lparen pattern Rparen linebreak
## LR(1) items:
case_item -> Lparen pattern Rparen linebreak . DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> Lparen pattern Rparen linebreak . [ Esac ]
compound_list -> linebreak . term [ Esac DSEMI ]
compound_list -> linebreak . term separator [ Esac DSEMI ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DSEMI shift to state 91
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On term shift to state 136
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 152
## Reductions:
-- On Esac reduce production case_item_ns -> Lparen pattern Rparen linebreak

State 91:
## Known stack suffix:
## Lparen pattern Rparen linebreak DSEMI
## LR(1) items:
case_item -> Lparen pattern Rparen linebreak DSEMI . linebreak [ WORD NAME Lparen Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 92
## Reductions:
-- On WORD reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Esac reduce production linebreak ->

State 92:
## Known stack suffix:
## Lparen pattern Rparen linebreak DSEMI linebreak
## LR(1) items:
case_item -> Lparen pattern Rparen linebreak DSEMI linebreak . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_item -> Lparen pattern Rparen linebreak DSEMI linebreak
-- On NAME reduce production case_item -> Lparen pattern Rparen linebreak DSEMI linebreak
-- On Lparen reduce production case_item -> Lparen pattern Rparen linebreak DSEMI linebreak
-- On Esac reduce production case_item -> Lparen pattern Rparen linebreak DSEMI linebreak

State 93:
## Known stack suffix:
## Bang
## LR(1) items:
pipeline -> Bang . pipe_sequence [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipe_sequence shift to state 100
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
## Reductions:

State 94:
## Known stack suffix:
## ASSIGNMENT_WORD
## LR(1) items:
cmd_prefix -> ASSIGNMENT_WORD . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Uppersand reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Then reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Semicolon reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Rparen reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Rbrace reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Pipe reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On OR_IF reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On NEWLINE reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On NAME reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On LESSGREAT reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On LESSAND reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On LESS reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On IO_NUMBER reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On GREATAND reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On GREAT reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Fi reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Esac reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Else reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Elif reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On EOF reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Done reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On Do reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On DSEMI reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On DLESSDASH reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On DLESS reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On DGREAT reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On CLOBBER reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On ASSIGNMENT_WORD reduce production cmd_prefix -> ASSIGNMENT_WORD
-- On AND_IF reduce production cmd_prefix -> ASSIGNMENT_WORD

State 95:
## Known stack suffix:
## word
## LR(1) items:
cmd_name -> word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_name -> word
-- On Uppersand reduce production cmd_name -> word
-- On Then reduce production cmd_name -> word
-- On Semicolon reduce production cmd_name -> word
-- On Rparen reduce production cmd_name -> word
-- On Rbrace reduce production cmd_name -> word
-- On Pipe reduce production cmd_name -> word
-- On OR_IF reduce production cmd_name -> word
-- On NEWLINE reduce production cmd_name -> word
-- On NAME reduce production cmd_name -> word
-- On LESSGREAT reduce production cmd_name -> word
-- On LESSAND reduce production cmd_name -> word
-- On LESS reduce production cmd_name -> word
-- On IO_NUMBER reduce production cmd_name -> word
-- On GREATAND reduce production cmd_name -> word
-- On GREAT reduce production cmd_name -> word
-- On Fi reduce production cmd_name -> word
-- On Esac reduce production cmd_name -> word
-- On Else reduce production cmd_name -> word
-- On Elif reduce production cmd_name -> word
-- On EOF reduce production cmd_name -> word
-- On Done reduce production cmd_name -> word
-- On Do reduce production cmd_name -> word
-- On DSEMI reduce production cmd_name -> word
-- On DLESSDASH reduce production cmd_name -> word
-- On DLESS reduce production cmd_name -> word
-- On DGREAT reduce production cmd_name -> word
-- On CLOBBER reduce production cmd_name -> word
-- On AND_IF reduce production cmd_name -> word

State 96:
## Known stack suffix:
## while_clause
## LR(1) items:
compound_command -> while_clause . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> while_clause
-- On Then reduce production compound_command -> while_clause
-- On Semicolon reduce production compound_command -> while_clause
-- On Rparen reduce production compound_command -> while_clause
-- On Rbrace reduce production compound_command -> while_clause
-- On Pipe reduce production compound_command -> while_clause
-- On OR_IF reduce production compound_command -> while_clause
-- On NEWLINE reduce production compound_command -> while_clause
-- On LESSGREAT reduce production compound_command -> while_clause
-- On LESSAND reduce production compound_command -> while_clause
-- On LESS reduce production compound_command -> while_clause
-- On IO_NUMBER reduce production compound_command -> while_clause
-- On GREATAND reduce production compound_command -> while_clause
-- On GREAT reduce production compound_command -> while_clause
-- On Fi reduce production compound_command -> while_clause
-- On Esac reduce production compound_command -> while_clause
-- On Else reduce production compound_command -> while_clause
-- On Elif reduce production compound_command -> while_clause
-- On EOF reduce production compound_command -> while_clause
-- On Done reduce production compound_command -> while_clause
-- On Do reduce production compound_command -> while_clause
-- On DSEMI reduce production compound_command -> while_clause
-- On DLESSDASH reduce production compound_command -> while_clause
-- On DLESS reduce production compound_command -> while_clause
-- On DGREAT reduce production compound_command -> while_clause
-- On CLOBBER reduce production compound_command -> while_clause
-- On AND_IF reduce production compound_command -> while_clause

State 97:
## Known stack suffix:
## until_clause
## LR(1) items:
compound_command -> until_clause . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> until_clause
-- On Then reduce production compound_command -> until_clause
-- On Semicolon reduce production compound_command -> until_clause
-- On Rparen reduce production compound_command -> until_clause
-- On Rbrace reduce production compound_command -> until_clause
-- On Pipe reduce production compound_command -> until_clause
-- On OR_IF reduce production compound_command -> until_clause
-- On NEWLINE reduce production compound_command -> until_clause
-- On LESSGREAT reduce production compound_command -> until_clause
-- On LESSAND reduce production compound_command -> until_clause
-- On LESS reduce production compound_command -> until_clause
-- On IO_NUMBER reduce production compound_command -> until_clause
-- On GREATAND reduce production compound_command -> until_clause
-- On GREAT reduce production compound_command -> until_clause
-- On Fi reduce production compound_command -> until_clause
-- On Esac reduce production compound_command -> until_clause
-- On Else reduce production compound_command -> until_clause
-- On Elif reduce production compound_command -> until_clause
-- On EOF reduce production compound_command -> until_clause
-- On Done reduce production compound_command -> until_clause
-- On Do reduce production compound_command -> until_clause
-- On DSEMI reduce production compound_command -> until_clause
-- On DLESSDASH reduce production compound_command -> until_clause
-- On DLESS reduce production compound_command -> until_clause
-- On DGREAT reduce production compound_command -> until_clause
-- On CLOBBER reduce production compound_command -> until_clause
-- On AND_IF reduce production compound_command -> until_clause

State 98:
## Known stack suffix:
## subshell
## LR(1) items:
compound_command -> subshell . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> subshell
-- On Then reduce production compound_command -> subshell
-- On Semicolon reduce production compound_command -> subshell
-- On Rparen reduce production compound_command -> subshell
-- On Rbrace reduce production compound_command -> subshell
-- On Pipe reduce production compound_command -> subshell
-- On OR_IF reduce production compound_command -> subshell
-- On NEWLINE reduce production compound_command -> subshell
-- On LESSGREAT reduce production compound_command -> subshell
-- On LESSAND reduce production compound_command -> subshell
-- On LESS reduce production compound_command -> subshell
-- On IO_NUMBER reduce production compound_command -> subshell
-- On GREATAND reduce production compound_command -> subshell
-- On GREAT reduce production compound_command -> subshell
-- On Fi reduce production compound_command -> subshell
-- On Esac reduce production compound_command -> subshell
-- On Else reduce production compound_command -> subshell
-- On Elif reduce production compound_command -> subshell
-- On EOF reduce production compound_command -> subshell
-- On Done reduce production compound_command -> subshell
-- On Do reduce production compound_command -> subshell
-- On DSEMI reduce production compound_command -> subshell
-- On DLESSDASH reduce production compound_command -> subshell
-- On DLESS reduce production compound_command -> subshell
-- On DGREAT reduce production compound_command -> subshell
-- On CLOBBER reduce production compound_command -> subshell
-- On AND_IF reduce production compound_command -> subshell

State 99:
## Known stack suffix:
## simple_command
## LR(1) items:
command -> simple_command . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production command -> simple_command
-- On Then reduce production command -> simple_command
-- On Semicolon reduce production command -> simple_command
-- On Rparen reduce production command -> simple_command
-- On Rbrace reduce production command -> simple_command
-- On Pipe reduce production command -> simple_command
-- On OR_IF reduce production command -> simple_command
-- On NEWLINE reduce production command -> simple_command
-- On Fi reduce production command -> simple_command
-- On Esac reduce production command -> simple_command
-- On Else reduce production command -> simple_command
-- On Elif reduce production command -> simple_command
-- On EOF reduce production command -> simple_command
-- On Done reduce production command -> simple_command
-- On Do reduce production command -> simple_command
-- On DSEMI reduce production command -> simple_command
-- On AND_IF reduce production command -> simple_command

State 100:
## Known stack suffix:
## Bang pipe_sequence
## LR(1) items:
pipe_sequence -> pipe_sequence . Pipe linebreak command [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
pipeline -> Bang pipe_sequence . [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On Pipe shift to state 101
## Reductions:
-- On Uppersand reduce production pipeline -> Bang pipe_sequence
-- On Then reduce production pipeline -> Bang pipe_sequence
-- On Semicolon reduce production pipeline -> Bang pipe_sequence
-- On Rparen reduce production pipeline -> Bang pipe_sequence
-- On Rbrace reduce production pipeline -> Bang pipe_sequence
-- On OR_IF reduce production pipeline -> Bang pipe_sequence
-- On NEWLINE reduce production pipeline -> Bang pipe_sequence
-- On Fi reduce production pipeline -> Bang pipe_sequence
-- On Esac reduce production pipeline -> Bang pipe_sequence
-- On Else reduce production pipeline -> Bang pipe_sequence
-- On Elif reduce production pipeline -> Bang pipe_sequence
-- On EOF reduce production pipeline -> Bang pipe_sequence
-- On Done reduce production pipeline -> Bang pipe_sequence
-- On Do reduce production pipeline -> Bang pipe_sequence
-- On DSEMI reduce production pipeline -> Bang pipe_sequence
-- On AND_IF reduce production pipeline -> Bang pipe_sequence

State 101:
## Known stack suffix:
## pipe_sequence Pipe
## LR(1) items:
pipe_sequence -> pipe_sequence Pipe . linebreak command [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 102
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 102:
## Known stack suffix:
## pipe_sequence Pipe linebreak
## LR(1) items:
pipe_sequence -> pipe_sequence Pipe linebreak . command [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 122
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
## Reductions:

State 103:
## Known stack suffix:
## io_redirect
## LR(1) items:
cmd_prefix -> io_redirect . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_prefix -> io_redirect
-- On Uppersand reduce production cmd_prefix -> io_redirect
-- On Then reduce production cmd_prefix -> io_redirect
-- On Semicolon reduce production cmd_prefix -> io_redirect
-- On Rparen reduce production cmd_prefix -> io_redirect
-- On Rbrace reduce production cmd_prefix -> io_redirect
-- On Pipe reduce production cmd_prefix -> io_redirect
-- On OR_IF reduce production cmd_prefix -> io_redirect
-- On NEWLINE reduce production cmd_prefix -> io_redirect
-- On NAME reduce production cmd_prefix -> io_redirect
-- On LESSGREAT reduce production cmd_prefix -> io_redirect
-- On LESSAND reduce production cmd_prefix -> io_redirect
-- On LESS reduce production cmd_prefix -> io_redirect
-- On IO_NUMBER reduce production cmd_prefix -> io_redirect
-- On GREATAND reduce production cmd_prefix -> io_redirect
-- On GREAT reduce production cmd_prefix -> io_redirect
-- On Fi reduce production cmd_prefix -> io_redirect
-- On Esac reduce production cmd_prefix -> io_redirect
-- On Else reduce production cmd_prefix -> io_redirect
-- On Elif reduce production cmd_prefix -> io_redirect
-- On EOF reduce production cmd_prefix -> io_redirect
-- On Done reduce production cmd_prefix -> io_redirect
-- On Do reduce production cmd_prefix -> io_redirect
-- On DSEMI reduce production cmd_prefix -> io_redirect
-- On DLESSDASH reduce production cmd_prefix -> io_redirect
-- On DLESS reduce production cmd_prefix -> io_redirect
-- On DGREAT reduce production cmd_prefix -> io_redirect
-- On CLOBBER reduce production cmd_prefix -> io_redirect
-- On ASSIGNMENT_WORD reduce production cmd_prefix -> io_redirect
-- On AND_IF reduce production cmd_prefix -> io_redirect

State 104:
## Known stack suffix:
## io_here
## LR(1) items:
io_redirect -> io_here . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_redirect -> io_here
-- On Uppersand reduce production io_redirect -> io_here
-- On Then reduce production io_redirect -> io_here
-- On Semicolon reduce production io_redirect -> io_here
-- On Rparen reduce production io_redirect -> io_here
-- On Rbrace reduce production io_redirect -> io_here
-- On Pipe reduce production io_redirect -> io_here
-- On OR_IF reduce production io_redirect -> io_here
-- On NEWLINE reduce production io_redirect -> io_here
-- On NAME reduce production io_redirect -> io_here
-- On LESSGREAT reduce production io_redirect -> io_here
-- On LESSAND reduce production io_redirect -> io_here
-- On LESS reduce production io_redirect -> io_here
-- On IO_NUMBER reduce production io_redirect -> io_here
-- On GREATAND reduce production io_redirect -> io_here
-- On GREAT reduce production io_redirect -> io_here
-- On Fi reduce production io_redirect -> io_here
-- On Esac reduce production io_redirect -> io_here
-- On Else reduce production io_redirect -> io_here
-- On Elif reduce production io_redirect -> io_here
-- On EOF reduce production io_redirect -> io_here
-- On Done reduce production io_redirect -> io_here
-- On Do reduce production io_redirect -> io_here
-- On DSEMI reduce production io_redirect -> io_here
-- On DLESSDASH reduce production io_redirect -> io_here
-- On DLESS reduce production io_redirect -> io_here
-- On DGREAT reduce production io_redirect -> io_here
-- On CLOBBER reduce production io_redirect -> io_here
-- On ASSIGNMENT_WORD reduce production io_redirect -> io_here
-- On AND_IF reduce production io_redirect -> io_here

State 105:
## Known stack suffix:
## io_file
## LR(1) items:
io_redirect -> io_file . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production io_redirect -> io_file
-- On Uppersand reduce production io_redirect -> io_file
-- On Then reduce production io_redirect -> io_file
-- On Semicolon reduce production io_redirect -> io_file
-- On Rparen reduce production io_redirect -> io_file
-- On Rbrace reduce production io_redirect -> io_file
-- On Pipe reduce production io_redirect -> io_file
-- On OR_IF reduce production io_redirect -> io_file
-- On NEWLINE reduce production io_redirect -> io_file
-- On NAME reduce production io_redirect -> io_file
-- On LESSGREAT reduce production io_redirect -> io_file
-- On LESSAND reduce production io_redirect -> io_file
-- On LESS reduce production io_redirect -> io_file
-- On IO_NUMBER reduce production io_redirect -> io_file
-- On GREATAND reduce production io_redirect -> io_file
-- On GREAT reduce production io_redirect -> io_file
-- On Fi reduce production io_redirect -> io_file
-- On Esac reduce production io_redirect -> io_file
-- On Else reduce production io_redirect -> io_file
-- On Elif reduce production io_redirect -> io_file
-- On EOF reduce production io_redirect -> io_file
-- On Done reduce production io_redirect -> io_file
-- On Do reduce production io_redirect -> io_file
-- On DSEMI reduce production io_redirect -> io_file
-- On DLESSDASH reduce production io_redirect -> io_file
-- On DLESS reduce production io_redirect -> io_file
-- On DGREAT reduce production io_redirect -> io_file
-- On CLOBBER reduce production io_redirect -> io_file
-- On ASSIGNMENT_WORD reduce production io_redirect -> io_file
-- On AND_IF reduce production io_redirect -> io_file

State 106:
## Known stack suffix:
## if_clause
## LR(1) items:
compound_command -> if_clause . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> if_clause
-- On Then reduce production compound_command -> if_clause
-- On Semicolon reduce production compound_command -> if_clause
-- On Rparen reduce production compound_command -> if_clause
-- On Rbrace reduce production compound_command -> if_clause
-- On Pipe reduce production compound_command -> if_clause
-- On OR_IF reduce production compound_command -> if_clause
-- On NEWLINE reduce production compound_command -> if_clause
-- On LESSGREAT reduce production compound_command -> if_clause
-- On LESSAND reduce production compound_command -> if_clause
-- On LESS reduce production compound_command -> if_clause
-- On IO_NUMBER reduce production compound_command -> if_clause
-- On GREATAND reduce production compound_command -> if_clause
-- On GREAT reduce production compound_command -> if_clause
-- On Fi reduce production compound_command -> if_clause
-- On Esac reduce production compound_command -> if_clause
-- On Else reduce production compound_command -> if_clause
-- On Elif reduce production compound_command -> if_clause
-- On EOF reduce production compound_command -> if_clause
-- On Done reduce production compound_command -> if_clause
-- On Do reduce production compound_command -> if_clause
-- On DSEMI reduce production compound_command -> if_clause
-- On DLESSDASH reduce production compound_command -> if_clause
-- On DLESS reduce production compound_command -> if_clause
-- On DGREAT reduce production compound_command -> if_clause
-- On CLOBBER reduce production compound_command -> if_clause
-- On AND_IF reduce production compound_command -> if_clause

State 107:
## Known stack suffix:
## function_definition
## LR(1) items:
command -> function_definition . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production command -> function_definition
-- On Then reduce production command -> function_definition
-- On Semicolon reduce production command -> function_definition
-- On Rparen reduce production command -> function_definition
-- On Rbrace reduce production command -> function_definition
-- On Pipe reduce production command -> function_definition
-- On OR_IF reduce production command -> function_definition
-- On NEWLINE reduce production command -> function_definition
-- On Fi reduce production command -> function_definition
-- On Esac reduce production command -> function_definition
-- On Else reduce production command -> function_definition
-- On Elif reduce production command -> function_definition
-- On EOF reduce production command -> function_definition
-- On Done reduce production command -> function_definition
-- On Do reduce production command -> function_definition
-- On DSEMI reduce production command -> function_definition
-- On AND_IF reduce production command -> function_definition

State 108:
## Known stack suffix:
## for_clause
## LR(1) items:
compound_command -> for_clause . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> for_clause
-- On Then reduce production compound_command -> for_clause
-- On Semicolon reduce production compound_command -> for_clause
-- On Rparen reduce production compound_command -> for_clause
-- On Rbrace reduce production compound_command -> for_clause
-- On Pipe reduce production compound_command -> for_clause
-- On OR_IF reduce production compound_command -> for_clause
-- On NEWLINE reduce production compound_command -> for_clause
-- On LESSGREAT reduce production compound_command -> for_clause
-- On LESSAND reduce production compound_command -> for_clause
-- On LESS reduce production compound_command -> for_clause
-- On IO_NUMBER reduce production compound_command -> for_clause
-- On GREATAND reduce production compound_command -> for_clause
-- On GREAT reduce production compound_command -> for_clause
-- On Fi reduce production compound_command -> for_clause
-- On Esac reduce production compound_command -> for_clause
-- On Else reduce production compound_command -> for_clause
-- On Elif reduce production compound_command -> for_clause
-- On EOF reduce production compound_command -> for_clause
-- On Done reduce production compound_command -> for_clause
-- On Do reduce production compound_command -> for_clause
-- On DSEMI reduce production compound_command -> for_clause
-- On DLESSDASH reduce production compound_command -> for_clause
-- On DLESS reduce production compound_command -> for_clause
-- On DGREAT reduce production compound_command -> for_clause
-- On CLOBBER reduce production compound_command -> for_clause
-- On AND_IF reduce production compound_command -> for_clause

State 109:
## Known stack suffix:
## fname
## LR(1) items:
function_definition -> fname . Lparen Rparen linebreak function_body [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On Lparen shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## fname Lparen
## LR(1) items:
function_definition -> fname Lparen . Rparen linebreak function_body [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On Rparen shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## fname Lparen Rparen
## LR(1) items:
function_definition -> fname Lparen Rparen . linebreak function_body [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 112
## Reductions:
-- On While reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On If reduce production linebreak ->
-- On For reduce production linebreak ->
-- On Case reduce production linebreak ->

State 112:
## Known stack suffix:
## fname Lparen Rparen linebreak
## LR(1) items:
function_definition -> fname Lparen Rparen linebreak . function_body [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On While shift to state 7
-- On Until shift to state 10
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On If shift to state 31
-- On For shift to state 61
-- On Case shift to state 81
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On if_clause shift to state 106
-- On function_body shift to state 113
-- On for_clause shift to state 108
-- On compound_command shift to state 114
-- On case_clause shift to state 118
-- On brace_group shift to state 119
## Reductions:

State 113:
## Known stack suffix:
## fname Lparen Rparen linebreak function_body
## LR(1) items:
function_definition -> fname Lparen Rparen linebreak function_body . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Then reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Semicolon reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Rparen reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Rbrace reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Pipe reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On OR_IF reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On NEWLINE reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Fi reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Esac reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Else reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Elif reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On EOF reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Done reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On Do reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On DSEMI reduce production function_definition -> fname Lparen Rparen linebreak function_body
-- On AND_IF reduce production function_definition -> fname Lparen Rparen linebreak function_body

State 114:
## Known stack suffix:
## compound_command
## LR(1) items:
function_body -> compound_command . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
function_body -> compound_command . redirect_list [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On redirect_list shift to state 115
-- On io_redirect shift to state 117
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production function_body -> compound_command
-- On Then reduce production function_body -> compound_command
-- On Semicolon reduce production function_body -> compound_command
-- On Rparen reduce production function_body -> compound_command
-- On Rbrace reduce production function_body -> compound_command
-- On Pipe reduce production function_body -> compound_command
-- On OR_IF reduce production function_body -> compound_command
-- On NEWLINE reduce production function_body -> compound_command
-- On Fi reduce production function_body -> compound_command
-- On Esac reduce production function_body -> compound_command
-- On Else reduce production function_body -> compound_command
-- On Elif reduce production function_body -> compound_command
-- On EOF reduce production function_body -> compound_command
-- On Done reduce production function_body -> compound_command
-- On Do reduce production function_body -> compound_command
-- On DSEMI reduce production function_body -> compound_command
-- On AND_IF reduce production function_body -> compound_command

State 115:
## Known stack suffix:
## compound_command redirect_list
## LR(1) items:
function_body -> compound_command redirect_list . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
redirect_list -> redirect_list . io_redirect [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On io_redirect shift to state 116
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production function_body -> compound_command redirect_list
-- On Then reduce production function_body -> compound_command redirect_list
-- On Semicolon reduce production function_body -> compound_command redirect_list
-- On Rparen reduce production function_body -> compound_command redirect_list
-- On Rbrace reduce production function_body -> compound_command redirect_list
-- On Pipe reduce production function_body -> compound_command redirect_list
-- On OR_IF reduce production function_body -> compound_command redirect_list
-- On NEWLINE reduce production function_body -> compound_command redirect_list
-- On Fi reduce production function_body -> compound_command redirect_list
-- On Esac reduce production function_body -> compound_command redirect_list
-- On Else reduce production function_body -> compound_command redirect_list
-- On Elif reduce production function_body -> compound_command redirect_list
-- On EOF reduce production function_body -> compound_command redirect_list
-- On Done reduce production function_body -> compound_command redirect_list
-- On Do reduce production function_body -> compound_command redirect_list
-- On DSEMI reduce production function_body -> compound_command redirect_list
-- On AND_IF reduce production function_body -> compound_command redirect_list

State 116:
## Known stack suffix:
## redirect_list io_redirect
## LR(1) items:
redirect_list -> redirect_list io_redirect . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production redirect_list -> redirect_list io_redirect
-- On Then reduce production redirect_list -> redirect_list io_redirect
-- On Semicolon reduce production redirect_list -> redirect_list io_redirect
-- On Rparen reduce production redirect_list -> redirect_list io_redirect
-- On Rbrace reduce production redirect_list -> redirect_list io_redirect
-- On Pipe reduce production redirect_list -> redirect_list io_redirect
-- On OR_IF reduce production redirect_list -> redirect_list io_redirect
-- On NEWLINE reduce production redirect_list -> redirect_list io_redirect
-- On LESSGREAT reduce production redirect_list -> redirect_list io_redirect
-- On LESSAND reduce production redirect_list -> redirect_list io_redirect
-- On LESS reduce production redirect_list -> redirect_list io_redirect
-- On IO_NUMBER reduce production redirect_list -> redirect_list io_redirect
-- On GREATAND reduce production redirect_list -> redirect_list io_redirect
-- On GREAT reduce production redirect_list -> redirect_list io_redirect
-- On Fi reduce production redirect_list -> redirect_list io_redirect
-- On Esac reduce production redirect_list -> redirect_list io_redirect
-- On Else reduce production redirect_list -> redirect_list io_redirect
-- On Elif reduce production redirect_list -> redirect_list io_redirect
-- On EOF reduce production redirect_list -> redirect_list io_redirect
-- On Done reduce production redirect_list -> redirect_list io_redirect
-- On Do reduce production redirect_list -> redirect_list io_redirect
-- On DSEMI reduce production redirect_list -> redirect_list io_redirect
-- On DLESSDASH reduce production redirect_list -> redirect_list io_redirect
-- On DLESS reduce production redirect_list -> redirect_list io_redirect
-- On DGREAT reduce production redirect_list -> redirect_list io_redirect
-- On CLOBBER reduce production redirect_list -> redirect_list io_redirect
-- On AND_IF reduce production redirect_list -> redirect_list io_redirect

State 117:
## Known stack suffix:
## io_redirect
## LR(1) items:
redirect_list -> io_redirect . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production redirect_list -> io_redirect
-- On Then reduce production redirect_list -> io_redirect
-- On Semicolon reduce production redirect_list -> io_redirect
-- On Rparen reduce production redirect_list -> io_redirect
-- On Rbrace reduce production redirect_list -> io_redirect
-- On Pipe reduce production redirect_list -> io_redirect
-- On OR_IF reduce production redirect_list -> io_redirect
-- On NEWLINE reduce production redirect_list -> io_redirect
-- On LESSGREAT reduce production redirect_list -> io_redirect
-- On LESSAND reduce production redirect_list -> io_redirect
-- On LESS reduce production redirect_list -> io_redirect
-- On IO_NUMBER reduce production redirect_list -> io_redirect
-- On GREATAND reduce production redirect_list -> io_redirect
-- On GREAT reduce production redirect_list -> io_redirect
-- On Fi reduce production redirect_list -> io_redirect
-- On Esac reduce production redirect_list -> io_redirect
-- On Else reduce production redirect_list -> io_redirect
-- On Elif reduce production redirect_list -> io_redirect
-- On EOF reduce production redirect_list -> io_redirect
-- On Done reduce production redirect_list -> io_redirect
-- On Do reduce production redirect_list -> io_redirect
-- On DSEMI reduce production redirect_list -> io_redirect
-- On DLESSDASH reduce production redirect_list -> io_redirect
-- On DLESS reduce production redirect_list -> io_redirect
-- On DGREAT reduce production redirect_list -> io_redirect
-- On CLOBBER reduce production redirect_list -> io_redirect
-- On AND_IF reduce production redirect_list -> io_redirect

State 118:
## Known stack suffix:
## case_clause
## LR(1) items:
compound_command -> case_clause . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> case_clause
-- On Then reduce production compound_command -> case_clause
-- On Semicolon reduce production compound_command -> case_clause
-- On Rparen reduce production compound_command -> case_clause
-- On Rbrace reduce production compound_command -> case_clause
-- On Pipe reduce production compound_command -> case_clause
-- On OR_IF reduce production compound_command -> case_clause
-- On NEWLINE reduce production compound_command -> case_clause
-- On LESSGREAT reduce production compound_command -> case_clause
-- On LESSAND reduce production compound_command -> case_clause
-- On LESS reduce production compound_command -> case_clause
-- On IO_NUMBER reduce production compound_command -> case_clause
-- On GREATAND reduce production compound_command -> case_clause
-- On GREAT reduce production compound_command -> case_clause
-- On Fi reduce production compound_command -> case_clause
-- On Esac reduce production compound_command -> case_clause
-- On Else reduce production compound_command -> case_clause
-- On Elif reduce production compound_command -> case_clause
-- On EOF reduce production compound_command -> case_clause
-- On Done reduce production compound_command -> case_clause
-- On Do reduce production compound_command -> case_clause
-- On DSEMI reduce production compound_command -> case_clause
-- On DLESSDASH reduce production compound_command -> case_clause
-- On DLESS reduce production compound_command -> case_clause
-- On DGREAT reduce production compound_command -> case_clause
-- On CLOBBER reduce production compound_command -> case_clause
-- On AND_IF reduce production compound_command -> case_clause

State 119:
## Known stack suffix:
## brace_group
## LR(1) items:
compound_command -> brace_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production compound_command -> brace_group
-- On Then reduce production compound_command -> brace_group
-- On Semicolon reduce production compound_command -> brace_group
-- On Rparen reduce production compound_command -> brace_group
-- On Rbrace reduce production compound_command -> brace_group
-- On Pipe reduce production compound_command -> brace_group
-- On OR_IF reduce production compound_command -> brace_group
-- On NEWLINE reduce production compound_command -> brace_group
-- On LESSGREAT reduce production compound_command -> brace_group
-- On LESSAND reduce production compound_command -> brace_group
-- On LESS reduce production compound_command -> brace_group
-- On IO_NUMBER reduce production compound_command -> brace_group
-- On GREATAND reduce production compound_command -> brace_group
-- On GREAT reduce production compound_command -> brace_group
-- On Fi reduce production compound_command -> brace_group
-- On Esac reduce production compound_command -> brace_group
-- On Else reduce production compound_command -> brace_group
-- On Elif reduce production compound_command -> brace_group
-- On EOF reduce production compound_command -> brace_group
-- On Done reduce production compound_command -> brace_group
-- On Do reduce production compound_command -> brace_group
-- On DSEMI reduce production compound_command -> brace_group
-- On DLESSDASH reduce production compound_command -> brace_group
-- On DLESS reduce production compound_command -> brace_group
-- On DGREAT reduce production compound_command -> brace_group
-- On CLOBBER reduce production compound_command -> brace_group
-- On AND_IF reduce production compound_command -> brace_group

State 120:
## Known stack suffix:
## compound_command
## LR(1) items:
command -> compound_command . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
command -> compound_command . redirect_list [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On redirect_list shift to state 121
-- On io_redirect shift to state 117
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production command -> compound_command
-- On Then reduce production command -> compound_command
-- On Semicolon reduce production command -> compound_command
-- On Rparen reduce production command -> compound_command
-- On Rbrace reduce production command -> compound_command
-- On Pipe reduce production command -> compound_command
-- On OR_IF reduce production command -> compound_command
-- On NEWLINE reduce production command -> compound_command
-- On Fi reduce production command -> compound_command
-- On Esac reduce production command -> compound_command
-- On Else reduce production command -> compound_command
-- On Elif reduce production command -> compound_command
-- On EOF reduce production command -> compound_command
-- On Done reduce production command -> compound_command
-- On Do reduce production command -> compound_command
-- On DSEMI reduce production command -> compound_command
-- On AND_IF reduce production command -> compound_command

State 121:
## Known stack suffix:
## compound_command redirect_list
## LR(1) items:
command -> compound_command redirect_list . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
redirect_list -> redirect_list . io_redirect [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On io_redirect shift to state 116
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production command -> compound_command redirect_list
-- On Then reduce production command -> compound_command redirect_list
-- On Semicolon reduce production command -> compound_command redirect_list
-- On Rparen reduce production command -> compound_command redirect_list
-- On Rbrace reduce production command -> compound_command redirect_list
-- On Pipe reduce production command -> compound_command redirect_list
-- On OR_IF reduce production command -> compound_command redirect_list
-- On NEWLINE reduce production command -> compound_command redirect_list
-- On Fi reduce production command -> compound_command redirect_list
-- On Esac reduce production command -> compound_command redirect_list
-- On Else reduce production command -> compound_command redirect_list
-- On Elif reduce production command -> compound_command redirect_list
-- On EOF reduce production command -> compound_command redirect_list
-- On Done reduce production command -> compound_command redirect_list
-- On Do reduce production command -> compound_command redirect_list
-- On DSEMI reduce production command -> compound_command redirect_list
-- On AND_IF reduce production command -> compound_command redirect_list

State 122:
## Known stack suffix:
## pipe_sequence Pipe linebreak command
## LR(1) items:
pipe_sequence -> pipe_sequence Pipe linebreak command . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Then reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Semicolon reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Rparen reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Rbrace reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Pipe reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On OR_IF reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On NEWLINE reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Fi reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Esac reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Else reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Elif reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On EOF reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Done reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On Do reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On DSEMI reduce production pipe_sequence -> pipe_sequence Pipe linebreak command
-- On AND_IF reduce production pipe_sequence -> pipe_sequence Pipe linebreak command

State 123:
## Known stack suffix:
## cmd_prefix
## LR(1) items:
cmd_prefix -> cmd_prefix . io_redirect [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
cmd_prefix -> cmd_prefix . ASSIGNMENT_WORD [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
simple_command -> cmd_prefix . cmd_word cmd_suffix [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
simple_command -> cmd_prefix . cmd_word [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
simple_command -> cmd_prefix . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On ASSIGNMENT_WORD shift to state 124
-- On word shift to state 125
-- On io_redirect shift to state 126
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On cmd_word shift to state 127
## Reductions:
-- On Uppersand reduce production simple_command -> cmd_prefix
-- On Then reduce production simple_command -> cmd_prefix
-- On Semicolon reduce production simple_command -> cmd_prefix
-- On Rparen reduce production simple_command -> cmd_prefix
-- On Rbrace reduce production simple_command -> cmd_prefix
-- On Pipe reduce production simple_command -> cmd_prefix
-- On OR_IF reduce production simple_command -> cmd_prefix
-- On NEWLINE reduce production simple_command -> cmd_prefix
-- On Fi reduce production simple_command -> cmd_prefix
-- On Esac reduce production simple_command -> cmd_prefix
-- On Else reduce production simple_command -> cmd_prefix
-- On Elif reduce production simple_command -> cmd_prefix
-- On EOF reduce production simple_command -> cmd_prefix
-- On Done reduce production simple_command -> cmd_prefix
-- On Do reduce production simple_command -> cmd_prefix
-- On DSEMI reduce production simple_command -> cmd_prefix
-- On AND_IF reduce production simple_command -> cmd_prefix

State 124:
## Known stack suffix:
## cmd_prefix ASSIGNMENT_WORD
## LR(1) items:
cmd_prefix -> cmd_prefix ASSIGNMENT_WORD . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Uppersand reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Then reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Semicolon reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Rparen reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Rbrace reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Pipe reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On OR_IF reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On NEWLINE reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On NAME reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On LESSGREAT reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On LESSAND reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On LESS reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On IO_NUMBER reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On GREATAND reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On GREAT reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Fi reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Esac reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Else reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Elif reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On EOF reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Done reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On Do reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On DSEMI reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On DLESSDASH reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On DLESS reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On DGREAT reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On CLOBBER reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On ASSIGNMENT_WORD reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD
-- On AND_IF reduce production cmd_prefix -> cmd_prefix ASSIGNMENT_WORD

State 125:
## Known stack suffix:
## word
## LR(1) items:
cmd_word -> word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_word -> word
-- On Uppersand reduce production cmd_word -> word
-- On Then reduce production cmd_word -> word
-- On Semicolon reduce production cmd_word -> word
-- On Rparen reduce production cmd_word -> word
-- On Rbrace reduce production cmd_word -> word
-- On Pipe reduce production cmd_word -> word
-- On OR_IF reduce production cmd_word -> word
-- On NEWLINE reduce production cmd_word -> word
-- On NAME reduce production cmd_word -> word
-- On LESSGREAT reduce production cmd_word -> word
-- On LESSAND reduce production cmd_word -> word
-- On LESS reduce production cmd_word -> word
-- On IO_NUMBER reduce production cmd_word -> word
-- On GREATAND reduce production cmd_word -> word
-- On GREAT reduce production cmd_word -> word
-- On Fi reduce production cmd_word -> word
-- On Esac reduce production cmd_word -> word
-- On Else reduce production cmd_word -> word
-- On Elif reduce production cmd_word -> word
-- On EOF reduce production cmd_word -> word
-- On Done reduce production cmd_word -> word
-- On Do reduce production cmd_word -> word
-- On DSEMI reduce production cmd_word -> word
-- On DLESSDASH reduce production cmd_word -> word
-- On DLESS reduce production cmd_word -> word
-- On DGREAT reduce production cmd_word -> word
-- On CLOBBER reduce production cmd_word -> word
-- On AND_IF reduce production cmd_word -> word

State 126:
## Known stack suffix:
## cmd_prefix io_redirect
## LR(1) items:
cmd_prefix -> cmd_prefix io_redirect . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER ASSIGNMENT_WORD AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Uppersand reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Then reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Semicolon reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Rparen reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Rbrace reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Pipe reduce production cmd_prefix -> cmd_prefix io_redirect
-- On OR_IF reduce production cmd_prefix -> cmd_prefix io_redirect
-- On NEWLINE reduce production cmd_prefix -> cmd_prefix io_redirect
-- On NAME reduce production cmd_prefix -> cmd_prefix io_redirect
-- On LESSGREAT reduce production cmd_prefix -> cmd_prefix io_redirect
-- On LESSAND reduce production cmd_prefix -> cmd_prefix io_redirect
-- On LESS reduce production cmd_prefix -> cmd_prefix io_redirect
-- On IO_NUMBER reduce production cmd_prefix -> cmd_prefix io_redirect
-- On GREATAND reduce production cmd_prefix -> cmd_prefix io_redirect
-- On GREAT reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Fi reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Esac reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Else reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Elif reduce production cmd_prefix -> cmd_prefix io_redirect
-- On EOF reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Done reduce production cmd_prefix -> cmd_prefix io_redirect
-- On Do reduce production cmd_prefix -> cmd_prefix io_redirect
-- On DSEMI reduce production cmd_prefix -> cmd_prefix io_redirect
-- On DLESSDASH reduce production cmd_prefix -> cmd_prefix io_redirect
-- On DLESS reduce production cmd_prefix -> cmd_prefix io_redirect
-- On DGREAT reduce production cmd_prefix -> cmd_prefix io_redirect
-- On CLOBBER reduce production cmd_prefix -> cmd_prefix io_redirect
-- On ASSIGNMENT_WORD reduce production cmd_prefix -> cmd_prefix io_redirect
-- On AND_IF reduce production cmd_prefix -> cmd_prefix io_redirect

State 127:
## Known stack suffix:
## cmd_prefix cmd_word
## LR(1) items:
simple_command -> cmd_prefix cmd_word . cmd_suffix [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
simple_command -> cmd_prefix cmd_word . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On word shift to state 128
-- On io_redirect shift to state 129
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On cmd_suffix shift to state 130
## Reductions:
-- On Uppersand reduce production simple_command -> cmd_prefix cmd_word
-- On Then reduce production simple_command -> cmd_prefix cmd_word
-- On Semicolon reduce production simple_command -> cmd_prefix cmd_word
-- On Rparen reduce production simple_command -> cmd_prefix cmd_word
-- On Rbrace reduce production simple_command -> cmd_prefix cmd_word
-- On Pipe reduce production simple_command -> cmd_prefix cmd_word
-- On OR_IF reduce production simple_command -> cmd_prefix cmd_word
-- On NEWLINE reduce production simple_command -> cmd_prefix cmd_word
-- On Fi reduce production simple_command -> cmd_prefix cmd_word
-- On Esac reduce production simple_command -> cmd_prefix cmd_word
-- On Else reduce production simple_command -> cmd_prefix cmd_word
-- On Elif reduce production simple_command -> cmd_prefix cmd_word
-- On EOF reduce production simple_command -> cmd_prefix cmd_word
-- On Done reduce production simple_command -> cmd_prefix cmd_word
-- On Do reduce production simple_command -> cmd_prefix cmd_word
-- On DSEMI reduce production simple_command -> cmd_prefix cmd_word
-- On AND_IF reduce production simple_command -> cmd_prefix cmd_word

State 128:
## Known stack suffix:
## word
## LR(1) items:
cmd_suffix -> word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_suffix -> word
-- On Uppersand reduce production cmd_suffix -> word
-- On Then reduce production cmd_suffix -> word
-- On Semicolon reduce production cmd_suffix -> word
-- On Rparen reduce production cmd_suffix -> word
-- On Rbrace reduce production cmd_suffix -> word
-- On Pipe reduce production cmd_suffix -> word
-- On OR_IF reduce production cmd_suffix -> word
-- On NEWLINE reduce production cmd_suffix -> word
-- On NAME reduce production cmd_suffix -> word
-- On LESSGREAT reduce production cmd_suffix -> word
-- On LESSAND reduce production cmd_suffix -> word
-- On LESS reduce production cmd_suffix -> word
-- On IO_NUMBER reduce production cmd_suffix -> word
-- On GREATAND reduce production cmd_suffix -> word
-- On GREAT reduce production cmd_suffix -> word
-- On Fi reduce production cmd_suffix -> word
-- On Esac reduce production cmd_suffix -> word
-- On Else reduce production cmd_suffix -> word
-- On Elif reduce production cmd_suffix -> word
-- On EOF reduce production cmd_suffix -> word
-- On Done reduce production cmd_suffix -> word
-- On Do reduce production cmd_suffix -> word
-- On DSEMI reduce production cmd_suffix -> word
-- On DLESSDASH reduce production cmd_suffix -> word
-- On DLESS reduce production cmd_suffix -> word
-- On DGREAT reduce production cmd_suffix -> word
-- On CLOBBER reduce production cmd_suffix -> word
-- On AND_IF reduce production cmd_suffix -> word

State 129:
## Known stack suffix:
## io_redirect
## LR(1) items:
cmd_suffix -> io_redirect . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_suffix -> io_redirect
-- On Uppersand reduce production cmd_suffix -> io_redirect
-- On Then reduce production cmd_suffix -> io_redirect
-- On Semicolon reduce production cmd_suffix -> io_redirect
-- On Rparen reduce production cmd_suffix -> io_redirect
-- On Rbrace reduce production cmd_suffix -> io_redirect
-- On Pipe reduce production cmd_suffix -> io_redirect
-- On OR_IF reduce production cmd_suffix -> io_redirect
-- On NEWLINE reduce production cmd_suffix -> io_redirect
-- On NAME reduce production cmd_suffix -> io_redirect
-- On LESSGREAT reduce production cmd_suffix -> io_redirect
-- On LESSAND reduce production cmd_suffix -> io_redirect
-- On LESS reduce production cmd_suffix -> io_redirect
-- On IO_NUMBER reduce production cmd_suffix -> io_redirect
-- On GREATAND reduce production cmd_suffix -> io_redirect
-- On GREAT reduce production cmd_suffix -> io_redirect
-- On Fi reduce production cmd_suffix -> io_redirect
-- On Esac reduce production cmd_suffix -> io_redirect
-- On Else reduce production cmd_suffix -> io_redirect
-- On Elif reduce production cmd_suffix -> io_redirect
-- On EOF reduce production cmd_suffix -> io_redirect
-- On Done reduce production cmd_suffix -> io_redirect
-- On Do reduce production cmd_suffix -> io_redirect
-- On DSEMI reduce production cmd_suffix -> io_redirect
-- On DLESSDASH reduce production cmd_suffix -> io_redirect
-- On DLESS reduce production cmd_suffix -> io_redirect
-- On DGREAT reduce production cmd_suffix -> io_redirect
-- On CLOBBER reduce production cmd_suffix -> io_redirect
-- On AND_IF reduce production cmd_suffix -> io_redirect

State 130:
## Known stack suffix:
## cmd_prefix cmd_word cmd_suffix
## LR(1) items:
cmd_suffix -> cmd_suffix . io_redirect [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
cmd_suffix -> cmd_suffix . word [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
simple_command -> cmd_prefix cmd_word cmd_suffix . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On word shift to state 131
-- On io_redirect shift to state 132
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Then reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Semicolon reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Rparen reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Rbrace reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Pipe reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On OR_IF reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On NEWLINE reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Fi reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Esac reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Else reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Elif reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On EOF reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Done reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On Do reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On DSEMI reduce production simple_command -> cmd_prefix cmd_word cmd_suffix
-- On AND_IF reduce production simple_command -> cmd_prefix cmd_word cmd_suffix

State 131:
## Known stack suffix:
## cmd_suffix word
## LR(1) items:
cmd_suffix -> cmd_suffix word . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_suffix -> cmd_suffix word
-- On Uppersand reduce production cmd_suffix -> cmd_suffix word
-- On Then reduce production cmd_suffix -> cmd_suffix word
-- On Semicolon reduce production cmd_suffix -> cmd_suffix word
-- On Rparen reduce production cmd_suffix -> cmd_suffix word
-- On Rbrace reduce production cmd_suffix -> cmd_suffix word
-- On Pipe reduce production cmd_suffix -> cmd_suffix word
-- On OR_IF reduce production cmd_suffix -> cmd_suffix word
-- On NEWLINE reduce production cmd_suffix -> cmd_suffix word
-- On NAME reduce production cmd_suffix -> cmd_suffix word
-- On LESSGREAT reduce production cmd_suffix -> cmd_suffix word
-- On LESSAND reduce production cmd_suffix -> cmd_suffix word
-- On LESS reduce production cmd_suffix -> cmd_suffix word
-- On IO_NUMBER reduce production cmd_suffix -> cmd_suffix word
-- On GREATAND reduce production cmd_suffix -> cmd_suffix word
-- On GREAT reduce production cmd_suffix -> cmd_suffix word
-- On Fi reduce production cmd_suffix -> cmd_suffix word
-- On Esac reduce production cmd_suffix -> cmd_suffix word
-- On Else reduce production cmd_suffix -> cmd_suffix word
-- On Elif reduce production cmd_suffix -> cmd_suffix word
-- On EOF reduce production cmd_suffix -> cmd_suffix word
-- On Done reduce production cmd_suffix -> cmd_suffix word
-- On Do reduce production cmd_suffix -> cmd_suffix word
-- On DSEMI reduce production cmd_suffix -> cmd_suffix word
-- On DLESSDASH reduce production cmd_suffix -> cmd_suffix word
-- On DLESS reduce production cmd_suffix -> cmd_suffix word
-- On DGREAT reduce production cmd_suffix -> cmd_suffix word
-- On CLOBBER reduce production cmd_suffix -> cmd_suffix word
-- On AND_IF reduce production cmd_suffix -> cmd_suffix word

State 132:
## Known stack suffix:
## cmd_suffix io_redirect
## LR(1) items:
cmd_suffix -> cmd_suffix io_redirect . [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On WORD reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Uppersand reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Then reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Semicolon reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Rparen reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Rbrace reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Pipe reduce production cmd_suffix -> cmd_suffix io_redirect
-- On OR_IF reduce production cmd_suffix -> cmd_suffix io_redirect
-- On NEWLINE reduce production cmd_suffix -> cmd_suffix io_redirect
-- On NAME reduce production cmd_suffix -> cmd_suffix io_redirect
-- On LESSGREAT reduce production cmd_suffix -> cmd_suffix io_redirect
-- On LESSAND reduce production cmd_suffix -> cmd_suffix io_redirect
-- On LESS reduce production cmd_suffix -> cmd_suffix io_redirect
-- On IO_NUMBER reduce production cmd_suffix -> cmd_suffix io_redirect
-- On GREATAND reduce production cmd_suffix -> cmd_suffix io_redirect
-- On GREAT reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Fi reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Esac reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Else reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Elif reduce production cmd_suffix -> cmd_suffix io_redirect
-- On EOF reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Done reduce production cmd_suffix -> cmd_suffix io_redirect
-- On Do reduce production cmd_suffix -> cmd_suffix io_redirect
-- On DSEMI reduce production cmd_suffix -> cmd_suffix io_redirect
-- On DLESSDASH reduce production cmd_suffix -> cmd_suffix io_redirect
-- On DLESS reduce production cmd_suffix -> cmd_suffix io_redirect
-- On DGREAT reduce production cmd_suffix -> cmd_suffix io_redirect
-- On CLOBBER reduce production cmd_suffix -> cmd_suffix io_redirect
-- On AND_IF reduce production cmd_suffix -> cmd_suffix io_redirect

State 133:
## Known stack suffix:
## cmd_name
## LR(1) items:
simple_command -> cmd_name . cmd_suffix [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
simple_command -> cmd_name . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On word shift to state 128
-- On io_redirect shift to state 129
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On cmd_suffix shift to state 134
## Reductions:
-- On Uppersand reduce production simple_command -> cmd_name
-- On Then reduce production simple_command -> cmd_name
-- On Semicolon reduce production simple_command -> cmd_name
-- On Rparen reduce production simple_command -> cmd_name
-- On Rbrace reduce production simple_command -> cmd_name
-- On Pipe reduce production simple_command -> cmd_name
-- On OR_IF reduce production simple_command -> cmd_name
-- On NEWLINE reduce production simple_command -> cmd_name
-- On Fi reduce production simple_command -> cmd_name
-- On Esac reduce production simple_command -> cmd_name
-- On Else reduce production simple_command -> cmd_name
-- On Elif reduce production simple_command -> cmd_name
-- On EOF reduce production simple_command -> cmd_name
-- On Done reduce production simple_command -> cmd_name
-- On Do reduce production simple_command -> cmd_name
-- On DSEMI reduce production simple_command -> cmd_name
-- On AND_IF reduce production simple_command -> cmd_name

State 134:
## Known stack suffix:
## cmd_name cmd_suffix
## LR(1) items:
cmd_suffix -> cmd_suffix . io_redirect [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
cmd_suffix -> cmd_suffix . word [ WORD Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE NAME LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
simple_command -> cmd_name cmd_suffix . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On CLOBBER shift to state 57
-- On word shift to state 131
-- On io_redirect shift to state 132
-- On io_here shift to state 104
-- On io_file shift to state 105
## Reductions:
-- On Uppersand reduce production simple_command -> cmd_name cmd_suffix
-- On Then reduce production simple_command -> cmd_name cmd_suffix
-- On Semicolon reduce production simple_command -> cmd_name cmd_suffix
-- On Rparen reduce production simple_command -> cmd_name cmd_suffix
-- On Rbrace reduce production simple_command -> cmd_name cmd_suffix
-- On Pipe reduce production simple_command -> cmd_name cmd_suffix
-- On OR_IF reduce production simple_command -> cmd_name cmd_suffix
-- On NEWLINE reduce production simple_command -> cmd_name cmd_suffix
-- On Fi reduce production simple_command -> cmd_name cmd_suffix
-- On Esac reduce production simple_command -> cmd_name cmd_suffix
-- On Else reduce production simple_command -> cmd_name cmd_suffix
-- On Elif reduce production simple_command -> cmd_name cmd_suffix
-- On EOF reduce production simple_command -> cmd_name cmd_suffix
-- On Done reduce production simple_command -> cmd_name cmd_suffix
-- On Do reduce production simple_command -> cmd_name cmd_suffix
-- On DSEMI reduce production simple_command -> cmd_name cmd_suffix
-- On AND_IF reduce production simple_command -> cmd_name cmd_suffix

State 135:
## Known stack suffix:
## command
## LR(1) items:
pipe_sequence -> command . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production pipe_sequence -> command
-- On Then reduce production pipe_sequence -> command
-- On Semicolon reduce production pipe_sequence -> command
-- On Rparen reduce production pipe_sequence -> command
-- On Rbrace reduce production pipe_sequence -> command
-- On Pipe reduce production pipe_sequence -> command
-- On OR_IF reduce production pipe_sequence -> command
-- On NEWLINE reduce production pipe_sequence -> command
-- On Fi reduce production pipe_sequence -> command
-- On Esac reduce production pipe_sequence -> command
-- On Else reduce production pipe_sequence -> command
-- On Elif reduce production pipe_sequence -> command
-- On EOF reduce production pipe_sequence -> command
-- On Done reduce production pipe_sequence -> command
-- On Do reduce production pipe_sequence -> command
-- On DSEMI reduce production pipe_sequence -> command
-- On AND_IF reduce production pipe_sequence -> command

State 136:
## Known stack suffix:
## linebreak term
## LR(1) items:
compound_list -> linebreak term . [ Then Rparen Rbrace Fi Esac Else Elif Done Do DSEMI ]
compound_list -> linebreak term . separator [ Then Rparen Rbrace Fi Esac Else Elif Done Do DSEMI ]
term -> term . separator and_or [ Uppersand Then Semicolon Rparen Rbrace NEWLINE Fi Esac Else Elif Done Do DSEMI ]
## Transitions:
-- On Uppersand shift to state 137
-- On Semicolon shift to state 138
-- On NEWLINE shift to state 1
-- On separator_op shift to state 139
-- On separator shift to state 141
-- On newline_list shift to state 151
## Reductions:
-- On Then reduce production compound_list -> linebreak term
-- On Rparen reduce production compound_list -> linebreak term
-- On Rbrace reduce production compound_list -> linebreak term
-- On Fi reduce production compound_list -> linebreak term
-- On Esac reduce production compound_list -> linebreak term
-- On Else reduce production compound_list -> linebreak term
-- On Elif reduce production compound_list -> linebreak term
-- On Done reduce production compound_list -> linebreak term
-- On Do reduce production compound_list -> linebreak term
-- On DSEMI reduce production compound_list -> linebreak term

State 137:
## Known stack suffix:
## Uppersand
## LR(1) items:
separator_op -> Uppersand . [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
## Reductions:
-- On While reduce production separator_op -> Uppersand
-- On WORD reduce production separator_op -> Uppersand
-- On Until reduce production separator_op -> Uppersand
-- On Then reduce production separator_op -> Uppersand
-- On Rparen reduce production separator_op -> Uppersand
-- On Rbrace reduce production separator_op -> Uppersand
-- On NEWLINE reduce production separator_op -> Uppersand
-- On NAME reduce production separator_op -> Uppersand
-- On Lparen reduce production separator_op -> Uppersand
-- On Lbrace reduce production separator_op -> Uppersand
-- On LESSGREAT reduce production separator_op -> Uppersand
-- On LESSAND reduce production separator_op -> Uppersand
-- On LESS reduce production separator_op -> Uppersand
-- On If reduce production separator_op -> Uppersand
-- On IO_NUMBER reduce production separator_op -> Uppersand
-- On GREATAND reduce production separator_op -> Uppersand
-- On GREAT reduce production separator_op -> Uppersand
-- On For reduce production separator_op -> Uppersand
-- On Fi reduce production separator_op -> Uppersand
-- On Esac reduce production separator_op -> Uppersand
-- On Else reduce production separator_op -> Uppersand
-- On Elif reduce production separator_op -> Uppersand
-- On EOF reduce production separator_op -> Uppersand
-- On Done reduce production separator_op -> Uppersand
-- On Do reduce production separator_op -> Uppersand
-- On DSEMI reduce production separator_op -> Uppersand
-- On DLESSDASH reduce production separator_op -> Uppersand
-- On DLESS reduce production separator_op -> Uppersand
-- On DGREAT reduce production separator_op -> Uppersand
-- On Case reduce production separator_op -> Uppersand
-- On CLOBBER reduce production separator_op -> Uppersand
-- On Bang reduce production separator_op -> Uppersand
-- On ASSIGNMENT_WORD reduce production separator_op -> Uppersand

State 138:
## Known stack suffix:
## Semicolon
## LR(1) items:
separator_op -> Semicolon . [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
## Reductions:
-- On While reduce production separator_op -> Semicolon
-- On WORD reduce production separator_op -> Semicolon
-- On Until reduce production separator_op -> Semicolon
-- On Then reduce production separator_op -> Semicolon
-- On Rparen reduce production separator_op -> Semicolon
-- On Rbrace reduce production separator_op -> Semicolon
-- On NEWLINE reduce production separator_op -> Semicolon
-- On NAME reduce production separator_op -> Semicolon
-- On Lparen reduce production separator_op -> Semicolon
-- On Lbrace reduce production separator_op -> Semicolon
-- On LESSGREAT reduce production separator_op -> Semicolon
-- On LESSAND reduce production separator_op -> Semicolon
-- On LESS reduce production separator_op -> Semicolon
-- On If reduce production separator_op -> Semicolon
-- On IO_NUMBER reduce production separator_op -> Semicolon
-- On GREATAND reduce production separator_op -> Semicolon
-- On GREAT reduce production separator_op -> Semicolon
-- On For reduce production separator_op -> Semicolon
-- On Fi reduce production separator_op -> Semicolon
-- On Esac reduce production separator_op -> Semicolon
-- On Else reduce production separator_op -> Semicolon
-- On Elif reduce production separator_op -> Semicolon
-- On EOF reduce production separator_op -> Semicolon
-- On Done reduce production separator_op -> Semicolon
-- On Do reduce production separator_op -> Semicolon
-- On DSEMI reduce production separator_op -> Semicolon
-- On DLESSDASH reduce production separator_op -> Semicolon
-- On DLESS reduce production separator_op -> Semicolon
-- On DGREAT reduce production separator_op -> Semicolon
-- On Case reduce production separator_op -> Semicolon
-- On CLOBBER reduce production separator_op -> Semicolon
-- On Bang reduce production separator_op -> Semicolon
-- On ASSIGNMENT_WORD reduce production separator_op -> Semicolon

State 139:
## Known stack suffix:
## separator_op
## LR(1) items:
separator -> separator_op . linebreak [ While WORD Until Then Rparen Rbrace NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 140
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On Then reduce production linebreak ->
-- On Rparen reduce production linebreak ->
-- On Rbrace reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On Fi reduce production linebreak ->
-- On Esac reduce production linebreak ->
-- On Else reduce production linebreak ->
-- On Elif reduce production linebreak ->
-- On Done reduce production linebreak ->
-- On Do reduce production linebreak ->
-- On DSEMI reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 140:
## Known stack suffix:
## separator_op linebreak
## LR(1) items:
separator -> separator_op linebreak . [ While WORD Until Then Rparen Rbrace NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
## Reductions:
-- On While reduce production separator -> separator_op linebreak
-- On WORD reduce production separator -> separator_op linebreak
-- On Until reduce production separator -> separator_op linebreak
-- On Then reduce production separator -> separator_op linebreak
-- On Rparen reduce production separator -> separator_op linebreak
-- On Rbrace reduce production separator -> separator_op linebreak
-- On NAME reduce production separator -> separator_op linebreak
-- On Lparen reduce production separator -> separator_op linebreak
-- On Lbrace reduce production separator -> separator_op linebreak
-- On LESSGREAT reduce production separator -> separator_op linebreak
-- On LESSAND reduce production separator -> separator_op linebreak
-- On LESS reduce production separator -> separator_op linebreak
-- On If reduce production separator -> separator_op linebreak
-- On IO_NUMBER reduce production separator -> separator_op linebreak
-- On GREATAND reduce production separator -> separator_op linebreak
-- On GREAT reduce production separator -> separator_op linebreak
-- On For reduce production separator -> separator_op linebreak
-- On Fi reduce production separator -> separator_op linebreak
-- On Esac reduce production separator -> separator_op linebreak
-- On Else reduce production separator -> separator_op linebreak
-- On Elif reduce production separator -> separator_op linebreak
-- On Done reduce production separator -> separator_op linebreak
-- On Do reduce production separator -> separator_op linebreak
-- On DSEMI reduce production separator -> separator_op linebreak
-- On DLESSDASH reduce production separator -> separator_op linebreak
-- On DLESS reduce production separator -> separator_op linebreak
-- On DGREAT reduce production separator -> separator_op linebreak
-- On Case reduce production separator -> separator_op linebreak
-- On CLOBBER reduce production separator -> separator_op linebreak
-- On Bang reduce production separator -> separator_op linebreak
-- On ASSIGNMENT_WORD reduce production separator -> separator_op linebreak

State 141:
## Known stack suffix:
## linebreak term separator
## LR(1) items:
compound_list -> linebreak term separator . [ Then Rparen Rbrace Fi Esac Else Elif Done Do DSEMI ]
term -> term separator . and_or [ Uppersand Then Semicolon Rparen Rbrace NEWLINE Fi Esac Else Elif Done Do DSEMI ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 144
## Reductions:
-- On Then reduce production compound_list -> linebreak term separator
-- On Rparen reduce production compound_list -> linebreak term separator
-- On Rbrace reduce production compound_list -> linebreak term separator
-- On Fi reduce production compound_list -> linebreak term separator
-- On Esac reduce production compound_list -> linebreak term separator
-- On Else reduce production compound_list -> linebreak term separator
-- On Elif reduce production compound_list -> linebreak term separator
-- On Done reduce production compound_list -> linebreak term separator
-- On Do reduce production compound_list -> linebreak term separator
-- On DSEMI reduce production compound_list -> linebreak term separator

State 142:
## Known stack suffix:
## pipeline
## LR(1) items:
and_or -> pipeline . [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production and_or -> pipeline
-- On Then reduce production and_or -> pipeline
-- On Semicolon reduce production and_or -> pipeline
-- On Rparen reduce production and_or -> pipeline
-- On Rbrace reduce production and_or -> pipeline
-- On OR_IF reduce production and_or -> pipeline
-- On NEWLINE reduce production and_or -> pipeline
-- On Fi reduce production and_or -> pipeline
-- On Esac reduce production and_or -> pipeline
-- On Else reduce production and_or -> pipeline
-- On Elif reduce production and_or -> pipeline
-- On EOF reduce production and_or -> pipeline
-- On Done reduce production and_or -> pipeline
-- On Do reduce production and_or -> pipeline
-- On DSEMI reduce production and_or -> pipeline
-- On AND_IF reduce production and_or -> pipeline

State 143:
## Known stack suffix:
## pipe_sequence
## LR(1) items:
pipe_sequence -> pipe_sequence . Pipe linebreak command [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
pipeline -> pipe_sequence . [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On Pipe shift to state 101
## Reductions:
-- On Uppersand reduce production pipeline -> pipe_sequence
-- On Then reduce production pipeline -> pipe_sequence
-- On Semicolon reduce production pipeline -> pipe_sequence
-- On Rparen reduce production pipeline -> pipe_sequence
-- On Rbrace reduce production pipeline -> pipe_sequence
-- On OR_IF reduce production pipeline -> pipe_sequence
-- On NEWLINE reduce production pipeline -> pipe_sequence
-- On Fi reduce production pipeline -> pipe_sequence
-- On Esac reduce production pipeline -> pipe_sequence
-- On Else reduce production pipeline -> pipe_sequence
-- On Elif reduce production pipeline -> pipe_sequence
-- On EOF reduce production pipeline -> pipe_sequence
-- On Done reduce production pipeline -> pipe_sequence
-- On Do reduce production pipeline -> pipe_sequence
-- On DSEMI reduce production pipeline -> pipe_sequence
-- On AND_IF reduce production pipeline -> pipe_sequence

State 144:
## Known stack suffix:
## term separator and_or
## LR(1) items:
and_or -> and_or . AND_IF linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif Done Do DSEMI AND_IF ]
and_or -> and_or . OR_IF linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif Done Do DSEMI AND_IF ]
term -> term separator and_or . [ Uppersand Then Semicolon Rparen Rbrace NEWLINE Fi Esac Else Elif Done Do DSEMI ]
## Transitions:
-- On OR_IF shift to state 145
-- On AND_IF shift to state 148
## Reductions:
-- On Uppersand reduce production term -> term separator and_or
-- On Then reduce production term -> term separator and_or
-- On Semicolon reduce production term -> term separator and_or
-- On Rparen reduce production term -> term separator and_or
-- On Rbrace reduce production term -> term separator and_or
-- On NEWLINE reduce production term -> term separator and_or
-- On Fi reduce production term -> term separator and_or
-- On Esac reduce production term -> term separator and_or
-- On Else reduce production term -> term separator and_or
-- On Elif reduce production term -> term separator and_or
-- On Done reduce production term -> term separator and_or
-- On Do reduce production term -> term separator and_or
-- On DSEMI reduce production term -> term separator and_or

State 145:
## Known stack suffix:
## and_or OR_IF
## LR(1) items:
and_or -> and_or OR_IF . linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 146
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 146:
## Known stack suffix:
## and_or OR_IF linebreak
## LR(1) items:
and_or -> and_or OR_IF linebreak . pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 147
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
## Reductions:

State 147:
## Known stack suffix:
## and_or OR_IF linebreak pipeline
## LR(1) items:
and_or -> and_or OR_IF linebreak pipeline . [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Then reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Semicolon reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Rparen reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Rbrace reduce production and_or -> and_or OR_IF linebreak pipeline
-- On OR_IF reduce production and_or -> and_or OR_IF linebreak pipeline
-- On NEWLINE reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Fi reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Esac reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Else reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Elif reduce production and_or -> and_or OR_IF linebreak pipeline
-- On EOF reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Done reduce production and_or -> and_or OR_IF linebreak pipeline
-- On Do reduce production and_or -> and_or OR_IF linebreak pipeline
-- On DSEMI reduce production and_or -> and_or OR_IF linebreak pipeline
-- On AND_IF reduce production and_or -> and_or OR_IF linebreak pipeline

State 148:
## Known stack suffix:
## and_or AND_IF
## LR(1) items:
and_or -> and_or AND_IF . linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 149
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 149:
## Known stack suffix:
## and_or AND_IF linebreak
## LR(1) items:
and_or -> and_or AND_IF linebreak . pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 150
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
## Reductions:

State 150:
## Known stack suffix:
## and_or AND_IF linebreak pipeline
## LR(1) items:
and_or -> and_or AND_IF linebreak pipeline . [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif EOF Done Do DSEMI AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Then reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Semicolon reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Rparen reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Rbrace reduce production and_or -> and_or AND_IF linebreak pipeline
-- On OR_IF reduce production and_or -> and_or AND_IF linebreak pipeline
-- On NEWLINE reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Fi reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Esac reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Else reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Elif reduce production and_or -> and_or AND_IF linebreak pipeline
-- On EOF reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Done reduce production and_or -> and_or AND_IF linebreak pipeline
-- On Do reduce production and_or -> and_or AND_IF linebreak pipeline
-- On DSEMI reduce production and_or -> and_or AND_IF linebreak pipeline
-- On AND_IF reduce production and_or -> and_or AND_IF linebreak pipeline

State 151:
## Known stack suffix:
## newline_list
## LR(1) items:
newline_list -> newline_list . NEWLINE [ While WORD Until Then Rparen Rbrace NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
separator -> newline_list . [ While WORD Until Then Rparen Rbrace NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For Fi Esac Else Elif Done Do DSEMI DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
-- On NEWLINE shift to state 5
## Reductions:
-- On While reduce production separator -> newline_list
-- On WORD reduce production separator -> newline_list
-- On Until reduce production separator -> newline_list
-- On Then reduce production separator -> newline_list
-- On Rparen reduce production separator -> newline_list
-- On Rbrace reduce production separator -> newline_list
-- On NAME reduce production separator -> newline_list
-- On Lparen reduce production separator -> newline_list
-- On Lbrace reduce production separator -> newline_list
-- On LESSGREAT reduce production separator -> newline_list
-- On LESSAND reduce production separator -> newline_list
-- On LESS reduce production separator -> newline_list
-- On If reduce production separator -> newline_list
-- On IO_NUMBER reduce production separator -> newline_list
-- On GREATAND reduce production separator -> newline_list
-- On GREAT reduce production separator -> newline_list
-- On For reduce production separator -> newline_list
-- On Fi reduce production separator -> newline_list
-- On Esac reduce production separator -> newline_list
-- On Else reduce production separator -> newline_list
-- On Elif reduce production separator -> newline_list
-- On Done reduce production separator -> newline_list
-- On Do reduce production separator -> newline_list
-- On DSEMI reduce production separator -> newline_list
-- On DLESSDASH reduce production separator -> newline_list
-- On DLESS reduce production separator -> newline_list
-- On DGREAT reduce production separator -> newline_list
-- On Case reduce production separator -> newline_list
-- On CLOBBER reduce production separator -> newline_list
-- On Bang reduce production separator -> newline_list
-- On ASSIGNMENT_WORD reduce production separator -> newline_list

State 152:
## Known stack suffix:
## and_or
## LR(1) items:
and_or -> and_or . AND_IF linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif Done Do DSEMI AND_IF ]
and_or -> and_or . OR_IF linebreak pipeline [ Uppersand Then Semicolon Rparen Rbrace OR_IF NEWLINE Fi Esac Else Elif Done Do DSEMI AND_IF ]
term -> and_or . [ Uppersand Then Semicolon Rparen Rbrace NEWLINE Fi Esac Else Elif Done Do DSEMI ]
## Transitions:
-- On OR_IF shift to state 145
-- On AND_IF shift to state 148
## Reductions:
-- On Uppersand reduce production term -> and_or
-- On Then reduce production term -> and_or
-- On Semicolon reduce production term -> and_or
-- On Rparen reduce production term -> and_or
-- On Rbrace reduce production term -> and_or
-- On NEWLINE reduce production term -> and_or
-- On Fi reduce production term -> and_or
-- On Esac reduce production term -> and_or
-- On Else reduce production term -> and_or
-- On Elif reduce production term -> and_or
-- On Done reduce production term -> and_or
-- On Do reduce production term -> and_or
-- On DSEMI reduce production term -> and_or

State 153:
## Known stack suffix:
## Lparen pattern Rparen compound_list
## LR(1) items:
case_item -> Lparen pattern Rparen compound_list . DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> Lparen pattern Rparen compound_list . [ Esac ]
## Transitions:
-- On DSEMI shift to state 154
## Reductions:
-- On Esac reduce production case_item_ns -> Lparen pattern Rparen compound_list

State 154:
## Known stack suffix:
## Lparen pattern Rparen compound_list DSEMI
## LR(1) items:
case_item -> Lparen pattern Rparen compound_list DSEMI . linebreak [ WORD NAME Lparen Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 155
## Reductions:
-- On WORD reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Esac reduce production linebreak ->

State 155:
## Known stack suffix:
## Lparen pattern Rparen compound_list DSEMI linebreak
## LR(1) items:
case_item -> Lparen pattern Rparen compound_list DSEMI linebreak . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_item -> Lparen pattern Rparen compound_list DSEMI linebreak
-- On NAME reduce production case_item -> Lparen pattern Rparen compound_list DSEMI linebreak
-- On Lparen reduce production case_item -> Lparen pattern Rparen compound_list DSEMI linebreak
-- On Esac reduce production case_item -> Lparen pattern Rparen compound_list DSEMI linebreak

State 156:
## Known stack suffix:
## pattern Pipe
## LR(1) items:
pattern -> pattern Pipe . word [ Rparen Pipe ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On word shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## pattern Pipe word
## LR(1) items:
pattern -> pattern Pipe word . [ Rparen Pipe ]
## Transitions:
## Reductions:
-- On Rparen reduce production pattern -> pattern Pipe word
-- On Pipe reduce production pattern -> pattern Pipe word

State 158:
## Known stack suffix:
## Case word linebreak cin linebreak Esac
## LR(1) items:
case_clause -> Case word linebreak cin linebreak Esac . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Then reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Semicolon reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Rparen reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Rbrace reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Pipe reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On OR_IF reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On NEWLINE reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On LESSGREAT reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On LESSAND reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On LESS reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On IO_NUMBER reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On GREATAND reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On GREAT reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Fi reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Esac reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Else reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Elif reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On EOF reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Done reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On Do reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On DSEMI reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On DLESSDASH reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On DLESS reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On DGREAT reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On CLOBBER reduce production case_clause -> Case word linebreak cin linebreak Esac
-- On AND_IF reduce production case_clause -> Case word linebreak cin linebreak Esac

State 159:
## Known stack suffix:
## pattern
## LR(1) items:
case_item -> pattern . Rparen linebreak DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item -> pattern . Rparen compound_list DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> pattern . Rparen linebreak [ Esac ]
case_item_ns -> pattern . Rparen compound_list [ Esac ]
pattern -> pattern . Pipe word [ Rparen Pipe ]
## Transitions:
-- On Rparen shift to state 160
-- On Pipe shift to state 156
## Reductions:

State 160:
## Known stack suffix:
## pattern Rparen
## LR(1) items:
case_item -> pattern Rparen . linebreak DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item -> pattern Rparen . compound_list DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> pattern Rparen . linebreak [ Esac ]
case_item_ns -> pattern Rparen . compound_list [ Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 161
-- On compound_list shift to state 164
## Reductions:
-- On While reduce production linebreak ->
-- On WORD reduce production linebreak ->
-- On Until reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Lbrace reduce production linebreak ->
-- On LESSGREAT reduce production linebreak ->
-- On LESSAND reduce production linebreak ->
-- On LESS reduce production linebreak ->
-- On If reduce production linebreak ->
-- On IO_NUMBER reduce production linebreak ->
-- On GREATAND reduce production linebreak ->
-- On GREAT reduce production linebreak ->
-- On For reduce production linebreak ->
-- On Esac reduce production linebreak ->
-- On DSEMI reduce production linebreak ->
-- On DLESSDASH reduce production linebreak ->
-- On DLESS reduce production linebreak ->
-- On DGREAT reduce production linebreak ->
-- On Case reduce production linebreak ->
-- On CLOBBER reduce production linebreak ->
-- On Bang reduce production linebreak ->
-- On ASSIGNMENT_WORD reduce production linebreak ->

State 161:
## Known stack suffix:
## pattern Rparen linebreak
## LR(1) items:
case_item -> pattern Rparen linebreak . DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> pattern Rparen linebreak . [ Esac ]
compound_list -> linebreak . term [ Esac DSEMI ]
compound_list -> linebreak . term separator [ Esac DSEMI ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DSEMI shift to state 162
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On term shift to state 136
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 152
## Reductions:
-- On Esac reduce production case_item_ns -> pattern Rparen linebreak

State 162:
## Known stack suffix:
## pattern Rparen linebreak DSEMI
## LR(1) items:
case_item -> pattern Rparen linebreak DSEMI . linebreak [ WORD NAME Lparen Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 163
## Reductions:
-- On WORD reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Esac reduce production linebreak ->

State 163:
## Known stack suffix:
## pattern Rparen linebreak DSEMI linebreak
## LR(1) items:
case_item -> pattern Rparen linebreak DSEMI linebreak . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_item -> pattern Rparen linebreak DSEMI linebreak
-- On NAME reduce production case_item -> pattern Rparen linebreak DSEMI linebreak
-- On Lparen reduce production case_item -> pattern Rparen linebreak DSEMI linebreak
-- On Esac reduce production case_item -> pattern Rparen linebreak DSEMI linebreak

State 164:
## Known stack suffix:
## pattern Rparen compound_list
## LR(1) items:
case_item -> pattern Rparen compound_list . DSEMI linebreak [ WORD NAME Lparen Esac ]
case_item_ns -> pattern Rparen compound_list . [ Esac ]
## Transitions:
-- On DSEMI shift to state 165
## Reductions:
-- On Esac reduce production case_item_ns -> pattern Rparen compound_list

State 165:
## Known stack suffix:
## pattern Rparen compound_list DSEMI
## LR(1) items:
case_item -> pattern Rparen compound_list DSEMI . linebreak [ WORD NAME Lparen Esac ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 4
-- On linebreak shift to state 166
## Reductions:
-- On WORD reduce production linebreak ->
-- On NAME reduce production linebreak ->
-- On Lparen reduce production linebreak ->
-- On Esac reduce production linebreak ->

State 166:
## Known stack suffix:
## pattern Rparen compound_list DSEMI linebreak
## LR(1) items:
case_item -> pattern Rparen compound_list DSEMI linebreak . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_item -> pattern Rparen compound_list DSEMI linebreak
-- On NAME reduce production case_item -> pattern Rparen compound_list DSEMI linebreak
-- On Lparen reduce production case_item -> pattern Rparen compound_list DSEMI linebreak
-- On Esac reduce production case_item -> pattern Rparen compound_list DSEMI linebreak

State 167:
## Known stack suffix:
## Case word linebreak cin linebreak case_list_ns
## LR(1) items:
case_clause -> Case word linebreak cin linebreak case_list_ns . Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Esac shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## Case word linebreak cin linebreak case_list_ns Esac
## LR(1) items:
case_clause -> Case word linebreak cin linebreak case_list_ns Esac . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Then reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Semicolon reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Rparen reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Rbrace reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Pipe reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On OR_IF reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On NEWLINE reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On LESSGREAT reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On LESSAND reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On LESS reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On IO_NUMBER reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On GREATAND reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On GREAT reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Fi reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Esac reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Else reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Elif reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On EOF reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Done reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On Do reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On DSEMI reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On DLESSDASH reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On DLESS reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On DGREAT reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On CLOBBER reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac
-- On AND_IF reduce production case_clause -> Case word linebreak cin linebreak case_list_ns Esac

State 169:
## Known stack suffix:
## Case word linebreak cin linebreak case_list
## LR(1) items:
case_clause -> Case word linebreak cin linebreak case_list . Esac [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
case_list -> case_list . case_item [ WORD NAME Lparen Esac ]
case_list_ns -> case_list . case_item_ns [ Esac ]
## Transitions:
-- On WORD shift to state 9
-- On NAME shift to state 24
-- On Lparen shift to state 86
-- On Esac shift to state 170
-- On word shift to state 87
-- On pattern shift to state 159
-- On case_item_ns shift to state 171
-- On case_item shift to state 172
## Reductions:

State 170:
## Known stack suffix:
## Case word linebreak cin linebreak case_list Esac
## LR(1) items:
case_clause -> Case word linebreak cin linebreak case_list Esac . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Then reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Semicolon reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Rparen reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Rbrace reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Pipe reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On OR_IF reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On NEWLINE reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On LESSGREAT reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On LESSAND reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On LESS reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On IO_NUMBER reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On GREATAND reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On GREAT reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Fi reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Esac reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Else reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Elif reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On EOF reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Done reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On Do reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On DSEMI reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On DLESSDASH reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On DLESS reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On DGREAT reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On CLOBBER reduce production case_clause -> Case word linebreak cin linebreak case_list Esac
-- On AND_IF reduce production case_clause -> Case word linebreak cin linebreak case_list Esac

State 171:
## Known stack suffix:
## case_list case_item_ns
## LR(1) items:
case_list_ns -> case_list case_item_ns . [ Esac ]
## Transitions:
## Reductions:
-- On Esac reduce production case_list_ns -> case_list case_item_ns

State 172:
## Known stack suffix:
## case_list case_item
## LR(1) items:
case_list -> case_list case_item . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_list -> case_list case_item
-- On NAME reduce production case_list -> case_list case_item
-- On Lparen reduce production case_list -> case_list case_item
-- On Esac reduce production case_list -> case_list case_item

State 173:
## Known stack suffix:
## case_item_ns
## LR(1) items:
case_list_ns -> case_item_ns . [ Esac ]
## Transitions:
## Reductions:
-- On Esac reduce production case_list_ns -> case_item_ns

State 174:
## Known stack suffix:
## case_item
## LR(1) items:
case_list -> case_item . [ WORD NAME Lparen Esac ]
## Transitions:
## Reductions:
-- On WORD reduce production case_list -> case_item
-- On NAME reduce production case_list -> case_item
-- On Lparen reduce production case_list -> case_item
-- On Esac reduce production case_list -> case_item

State 175:
## Known stack suffix:
## While compound_list
## LR(1) items:
while_clause -> While compound_list . do_group [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
-- On Do shift to state 12
-- On do_group shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## While compound_list do_group
## LR(1) items:
while_clause -> While compound_list do_group . [ Uppersand Then Semicolon Rparen Rbrace Pipe OR_IF NEWLINE LESSGREAT LESSAND LESS IO_NUMBER GREATAND GREAT Fi Esac Else Elif EOF Done Do DSEMI DLESSDASH DLESS DGREAT CLOBBER AND_IF ]
## Transitions:
## Reductions:
-- On Uppersand reduce production while_clause -> While compound_list do_group
-- On Then reduce production while_clause -> While compound_list do_group
-- On Semicolon reduce production while_clause -> While compound_list do_group
-- On Rparen reduce production while_clause -> While compound_list do_group
-- On Rbrace reduce production while_clause -> While compound_list do_group
-- On Pipe reduce production while_clause -> While compound_list do_group
-- On OR_IF reduce production while_clause -> While compound_list do_group
-- On NEWLINE reduce production while_clause -> While compound_list do_group
-- On LESSGREAT reduce production while_clause -> While compound_list do_group
-- On LESSAND reduce production while_clause -> While compound_list do_group
-- On LESS reduce production while_clause -> While compound_list do_group
-- On IO_NUMBER reduce production while_clause -> While compound_list do_group
-- On GREATAND reduce production while_clause -> While compound_list do_group
-- On GREAT reduce production while_clause -> While compound_list do_group
-- On Fi reduce production while_clause -> While compound_list do_group
-- On Esac reduce production while_clause -> While compound_list do_group
-- On Else reduce production while_clause -> While compound_list do_group
-- On Elif reduce production while_clause -> While compound_list do_group
-- On EOF reduce production while_clause -> While compound_list do_group
-- On Done reduce production while_clause -> While compound_list do_group
-- On Do reduce production while_clause -> While compound_list do_group
-- On DSEMI reduce production while_clause -> While compound_list do_group
-- On DLESSDASH reduce production while_clause -> While compound_list do_group
-- On DLESS reduce production while_clause -> While compound_list do_group
-- On DGREAT reduce production while_clause -> While compound_list do_group
-- On CLOBBER reduce production while_clause -> While compound_list do_group
-- On AND_IF reduce production while_clause -> While compound_list do_group

State 177:
## Known stack suffix:
## linebreak complete_commands
## LR(1) items:
complete_commands -> complete_commands . newline_list complete_command [ NEWLINE EOF ]
program -> linebreak complete_commands . linebreak [ EOF ]
## Transitions:
-- On NEWLINE shift to state 1
-- On newline_list shift to state 178
-- On linebreak shift to state 184
## Reductions:
-- On EOF reduce production linebreak ->

State 178:
## Known stack suffix:
## complete_commands newline_list
## LR(1) items:
complete_commands -> complete_commands newline_list . complete_command [ NEWLINE EOF ]
linebreak -> newline_list . [ EOF ]
newline_list -> newline_list . NEWLINE [ While WORD Until NEWLINE NAME Lparen Lbrace LESSGREAT LESSAND LESS If IO_NUMBER GREATAND GREAT For EOF DLESSDASH DLESS DGREAT Case CLOBBER Bang ASSIGNMENT_WORD ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NEWLINE shift to state 5
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On complete_command shift to state 179
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On clist shift to state 180
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 183
## Reductions:
-- On EOF reduce production linebreak -> newline_list

State 179:
## Known stack suffix:
## complete_commands newline_list complete_command
## LR(1) items:
complete_commands -> complete_commands newline_list complete_command . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE reduce production complete_commands -> complete_commands newline_list complete_command
-- On EOF reduce production complete_commands -> complete_commands newline_list complete_command

State 180:
## Known stack suffix:
## clist
## LR(1) items:
clist -> clist . separator_op and_or [ Uppersand Semicolon NEWLINE EOF ]
complete_command -> clist . separator_op [ NEWLINE EOF ]
complete_command -> clist . [ NEWLINE EOF ]
## Transitions:
-- On Uppersand shift to state 137
-- On Semicolon shift to state 138
-- On separator_op shift to state 181
## Reductions:
-- On NEWLINE reduce production complete_command -> clist
-- On EOF reduce production complete_command -> clist

State 181:
## Known stack suffix:
## clist separator_op
## LR(1) items:
clist -> clist separator_op . and_or [ Uppersand Semicolon NEWLINE EOF ]
complete_command -> clist separator_op . [ NEWLINE EOF ]
## Transitions:
-- On While shift to state 7
-- On WORD shift to state 9
-- On Until shift to state 10
-- On NAME shift to state 16
-- On Lparen shift to state 17
-- On Lbrace shift to state 20
-- On LESSGREAT shift to state 23
-- On LESSAND shift to state 27
-- On LESS shift to state 29
-- On If shift to state 31
-- On IO_NUMBER shift to state 45
-- On GREATAND shift to state 46
-- On GREAT shift to state 48
-- On For shift to state 61
-- On DLESSDASH shift to state 50
-- On DLESS shift to state 53
-- On DGREAT shift to state 55
-- On Case shift to state 81
-- On CLOBBER shift to state 57
-- On Bang shift to state 93
-- On ASSIGNMENT_WORD shift to state 94
-- On word shift to state 95
-- On while_clause shift to state 96
-- On until_clause shift to state 97
-- On subshell shift to state 98
-- On simple_command shift to state 99
-- On pipeline shift to state 142
-- On pipe_sequence shift to state 143
-- On io_redirect shift to state 103
-- On io_here shift to state 104
-- On io_file shift to state 105
-- On if_clause shift to state 106
-- On function_definition shift to state 107
-- On for_clause shift to state 108
-- On fname shift to state 109
-- On compound_command shift to state 120
-- On command shift to state 135
-- On cmd_prefix shift to state 123
-- On cmd_name shift to state 133
-- On case_clause shift to state 118
-- On brace_group shift to state 119
-- On and_or shift to state 182
## Reductions:
-- On NEWLINE reduce production complete_command -> clist separator_op
-- On EOF reduce production complete_command -> clist separator_op

State 182:
## Known stack suffix:
## clist separator_op and_or
## LR(1) items:
and_or -> and_or . AND_IF linebreak pipeline [ Uppersand Semicolon OR_IF NEWLINE EOF AND_IF ]
and_or -> and_or . OR_IF linebreak pipeline [ Uppersand Semicolon OR_IF NEWLINE EOF AND_IF ]
clist -> clist separator_op and_or . [ Uppersand Semicolon NEWLINE EOF ]
## Transitions:
-- On OR_IF shift to state 145
-- On AND_IF shift to state 148
## Reductions:
-- On Uppersand reduce production clist -> clist separator_op and_or
-- On Semicolon reduce production clist -> clist separator_op and_or
-- On NEWLINE reduce production clist -> clist separator_op and_or
-- On EOF reduce production clist -> clist separator_op and_or

State 183:
## Known stack suffix:
## and_or
## LR(1) items:
and_or -> and_or . AND_IF linebreak pipeline [ Uppersand Semicolon OR_IF NEWLINE EOF AND_IF ]
and_or -> and_or . OR_IF linebreak pipeline [ Uppersand Semicolon OR_IF NEWLINE EOF AND_IF ]
clist -> and_or . [ Uppersand Semicolon NEWLINE EOF ]
## Transitions:
-- On OR_IF shift to state 145
-- On AND_IF shift to state 148
## Reductions:
-- On Uppersand reduce production clist -> and_or
-- On Semicolon reduce production clist -> and_or
-- On NEWLINE reduce production clist -> and_or
-- On EOF reduce production clist -> and_or

State 184:
## Known stack suffix:
## linebreak complete_commands linebreak
## LR(1) items:
program -> linebreak complete_commands linebreak . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production program -> linebreak complete_commands linebreak

State 185:
## Known stack suffix:
## complete_command
## LR(1) items:
complete_commands -> complete_command . [ NEWLINE EOF ]
## Transitions:
## Reductions:
-- On NEWLINE reduce production complete_commands -> complete_command
-- On EOF reduce production complete_commands -> complete_command

State 186:
## Known stack suffix:
## entry_point
## LR(1) items:
entry_point' -> entry_point . [ # ]
## Transitions:
## Reductions:
-- On # accept entry_point

State 187:
## Known stack suffix:
##
## LR(1) items:
intended_error' -> . intended_error [ # ]
## Transitions:
-- On INTENDED_ERROR shift to state 188
-- On intended_error shift to state 189
## Reductions:

State 188:
## Known stack suffix:
## INTENDED_ERROR
## LR(1) items:
intended_error -> INTENDED_ERROR . [ # ]
## Transitions:
## Reductions:
-- On # reduce production intended_error -> INTENDED_ERROR

State 189:
## Known stack suffix:
## intended_error
## LR(1) items:
intended_error' -> intended_error . [ # ]
## Transitions:
## Reductions:
-- On # accept intended_error

