%{

  open CST

  type here_document_content =
      CST.word ref

%}
%start entry_point
%start intended_error
%token AND_IF
%token <CST.assignment_word> ASSIGNMENT_WORD
%token Bang
%token CLOBBER
%token Case
%token DGREAT
%token <CST.word' ref> DLESS
%token <CST.word' ref> DLESSDASH
%token DSEMI
%token Do
%token Done
%token EOF
%token Elif
%token Else
%token Esac
%token Fi
%token For
%token GREAT
%token GREATAND
%token INTENDED_ERROR
%token <CST.io_number> IO_NUMBER
%token If
%token In
%token LESS
%token LESSAND
%token LESSGREAT
%token Lbrace
%token Lparen
%token <CST.name> NAME
%token NEWLINE
%token OR_IF
%token Pipe
%token Rbrace
%token Rparen
%token Semicolon
%token Then
%token Until
%token Uppersand
%token <CST.word> WORD
%token While
%type <CST.program CST.located> entry_point
%type <unit> intended_error
%%

entry_point:
  x = program _2 = EOF
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                    (
  c
)}

program:
  x = linebreak x_inlined1 = complete_commands x_inlined2 = linebreak
    {let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                   (
  Program_LineBreak_CompleteCommands_LineBreak (l1, c, l2)
)}
| x = linebreak
    {let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                       (
  Program_LineBreak l
)}

complete_commands:
  x = complete_commands x_inlined1 = newline_list x_inlined2 = complete_command
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let nl =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cs =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                                      (
  CompleteCommands_CompleteCommands_NewlineList_CompleteCommand (cs, nl, c)
)}
| x = complete_command
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                              (
  CompleteCommands_CompleteCommand c
)}

complete_command:
  x = clist x_inlined1 = separator_op
    {let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                            (
  CompleteCommand_CList_SeparatorOp (l, s)
)}
| x = clist
    {let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                   (
  CompleteCommand_CList l
)}

clist:
  x = clist x_inlined1 = separator_op x_inlined2 = and_or
    {let a =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                             (
  CList_CList_SeparatorOp_AndOr (l, s, a)
)}
| x = and_or
    {let a =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                    (
  CList_AndOr a
)}

and_or:
  x = pipeline
    {let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                            (
  AndOr_Pipeline p
)}
| x = and_or _2 = AND_IF x_inlined1 = linebreak x_inlined2 = pipeline
    {let p =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let a =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                    (
  AndOr_AndOr_AndIf_LineBreak_Pipeline (a, l , p)
)}
| x = and_or _2 = OR_IF x_inlined1 = linebreak x_inlined2 = pipeline
    {let p =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let a =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                    (
  AndOr_AndOr_OrIf_LineBreak_Pipeline (a, l, p)
)}

pipeline:
  x = pipe_sequence
    {let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                   (
  Pipeline_PipeSequence p
)}
| _1 = Bang x = pipe_sequence
    {let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  Pipeline_Bang_PipeSequence p
)}

pipe_sequence:
  x = command
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                     (
  PipeSequence_Command c
)}
| x = pipe_sequence _2 = Pipe x_inlined1 = linebreak x_inlined2 = command
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                        (
  PipeSequence_PipeSequence_Pipe_LineBreak_Command (p, l, c)
)}

command:
  x = simple_command
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                            (
  Command_SimpleCommand s
)}
| x = compound_command
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                              (
  Command_CompoundCommand c
)}
| x = compound_command x_inlined1 = redirect_list
    {let r =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                       (
  Command_CompoundCommand_RedirectList (c, r)
)}
| x = function_definition
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                 (
  Command_FunctionDefinition f
)}

compound_command:
  x = brace_group
    {let b =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                          (
  CompoundCommand_BraceGroup b
)}
| x = subshell
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                      (
  CompoundCommand_Subshell s
)}
| x = for_clause
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                        (
  CompoundCommand_ForClause f
)}
| x = case_clause
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                         (
  CompoundCommand_CaseClause c
)}
| x = if_clause
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                       (
  CompoundCommand_IfClause i
)}
| x = while_clause
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                          (
  CompoundCommand_WhileClause w
)}
| x = until_clause
    {let u =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                          (
  CompoundCommand_UntilClause u
)}

subshell:
  _1 = Lparen x = compound_list _3 = Rparen
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                          (
  Subshell_Lparen_CompoundList_Rparen c
)}

compound_list:
  x = linebreak x_inlined1 = term
    {let t =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                        (
  CompoundList_LineBreak_Term (l, t)
)}
| x = linebreak x_inlined1 = term x_inlined2 = separator
    {let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let t =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                            (
  CompoundList_LineBreak_Term_Separator (l, t, s)
)}

term:
  x = term x_inlined1 = separator x_inlined2 = and_or
    {let a =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let t =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                          (
  Term_Term_Separator_AndOr (t, s, a)
)}
| x = and_or
    {let a =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                   (
  Term_AndOr a
)}

for_clause:
  _1 = For x = name x_inlined1 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                    (
  ForClause_For_Name_DoGroup (n, d)
)}
| _1 = For x = name x_inlined1 = sequential_sep x_inlined2 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                    (
  ForClause_For_Name_SequentialSep_DoGroup (n, s, d)
)}
| _1 = For x = name x_inlined1 = linebreak _4 = cin x_inlined2 = sequential_sep x_inlined3 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined3_, _startpos_x_inlined3_, x_inlined3) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                         (
  ForClause_For_Name_LineBreak_In_SequentialSep_DoGroup (n, l, s, d)
)}
| _1 = For x = name x_inlined1 = linebreak _4 = cin x_inlined2 = wordlist x_inlined3 = sequential_sep x_inlined4 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined4_, _startpos_x_inlined4_, x_inlined4) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined3_, _startpos_x_inlined3_, x_inlined3) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let w =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                    (
  ForClause_For_Name_LineBreak_In_WordList_SequentialSep_DoGroup (n, l, w, s, d)
)}

name:
  n = NAME
    {                                                   (
  n
)}

cin:
  _1 = In
    {                                                               (
  ()
)}

wordlist:
  x = wordlist x_inlined1 = word
    {let w =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let wl =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                        (
  WordList_WordList_Word (wl, w)
)}
| x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                           (
  WordList_Word w
)}

case_clause:
  _1 = Case x = word x_inlined1 = linebreak _4 = cin x_inlined2 = linebreak x_inlined3 = case_list _7 = Esac
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined3_, _startpos_x_inlined3_, x_inlined3) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                                            (
  CaseClause_Case_Word_LineBreak_In_LineBreak_CaseList_Esac (w, l1, l2, c)
)}
| _1 = Case x = word x_inlined1 = linebreak _4 = cin x_inlined2 = linebreak x_inlined3 = case_list_ns _7 = Esac
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined3_, _startpos_x_inlined3_, x_inlined3) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                                    (
  CaseClause_Case_Word_LineBreak_In_LineBreak_CaseListNS_Esac (w, l1, l2, c)
)}
| _1 = Case x = word x_inlined1 = linebreak _4 = cin x_inlined2 = linebreak _6 = Esac
    {let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                            (
  CaseClause_Case_Word_LineBreak_In_LineBreak_Esac (w, l1, l2)
)}

case_list_ns:
  x = case_list x_inlined1 = case_item_ns
    {let ci =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                 (
  CaseListNS_CaseList_CaseItemNS (c, ci)
)}
| x = case_item_ns
    {let ci =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                     (
  CaseListNS_CaseItemNS ci
)}

case_list:
  x = case_list x_inlined1 = case_item
    {let ci =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                              (
  CaseList_CaseList_CaseItem (c, ci)
)}
| x = case_item
    {let ci =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                  (
  CaseList_CaseItem ci
)}

case_item_ns:
  x = pattern _2 = Rparen x_inlined1 = linebreak
    {let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                  (
  CaseItemNS_Pattern_Rparen_LineBreak (p, l)
)}
| x = pattern _2 = Rparen x_inlined1 = compound_list
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                     (
  CaseItemNS_Pattern_Rparen_CompoundList (p, c)
)}
| _1 = Lparen x = pattern _3 = Rparen x_inlined1 = linebreak
    {let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                        (
  CaseItemNS_Lparen_Pattern_Rparen_LineBreak (p, l)
)}
| _1 = Lparen x = pattern _3 = Rparen x_inlined1 = compound_list
    {let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                            (
  CaseItemNS_Lparen_Pattern_Rparen_CompoundList (p, c)
)}

case_item:
  x = pattern _2 = Rparen x_inlined1 = linebreak _4 = DSEMI x_inlined2 = linebreak
    {let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                               (
  CaseItem_Pattern_Rparen_LineBreak_Dsemi_LineBreak (p, l1, l2)
)}
| x = pattern _2 = Rparen x_inlined1 = compound_list _4 = DSEMI x_inlined2 = linebreak
    {let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                (
  CaseItem_Pattern_Rparen_CompoundList_Dsemi_LineBreak (p, c, l)
)}
| _1 = Lparen x = pattern _3 = Rparen x_inlined1 = linebreak _5 = DSEMI x_inlined2 = linebreak
    {let l2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                     (
  CaseItem_Lparen_Pattern_Rparen_LineBreak_Dsemi_LineBreak (p, l1, l2)
)}
| _1 = Lparen x = pattern _3 = Rparen x_inlined1 = compound_list _5 = DSEMI x_inlined2 = linebreak
    {let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                       (
  CaseItem_Lparen_Pattern_Rparen_CompoundList_Dsemi_LineBreak (p, c, l)
)}

pattern:
  x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                            (
  Pattern_Word w
)}
| x = pattern _2 = Pipe x_inlined1 = word
    {let w =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let p =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                            (
  Pattern_Pattern_Pipe_Word (p, w)
)}

if_clause:
  _1 = If x = compound_list _3 = Then x_inlined1 = compound_list x_inlined2 = else_part _6 = Fi
    {let e =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                                       (
  IfClause_If_CompoundList_Then_CompoundList_ElsePart_Fi (c1, c2, e)
)}
| _1 = If x = compound_list _3 = Then x_inlined1 = compound_list _5 = Fi
    {let c2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                 (
  IfClause_If_CompoundList_Then_CompoundList_Fi (c1, c2)
)}

else_part:
  _1 = Elif x = compound_list _3 = Then x_inlined1 = compound_list
    {let c2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                 (
  ElsePart_Elif_CompoundList_Then_CompoundList (c1, c2)
)}
| _1 = Elif x = compound_list _3 = Then x_inlined1 = compound_list x_inlined2 = else_part
    {let e =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                     (
  ElsePart_Elif_CompoundList_Then_CompoundList_ElsePart (c1, c2, e)
)}
| _1 = Else x = compound_list
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  ElsePart_Else_CompoundList c
)}

while_clause:
  _1 = While x = compound_list x_inlined1 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                      (
  WhileClause_While_CompoundList_DoGroup (c, d)
)}

until_clause:
  _1 = Until x = compound_list x_inlined1 = do_group
    {let d =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                      (
  UntilClause_Until_CompoundList_DoGroup (c, d)
)}

function_definition:
  x = fname _2 = Lparen _3 = Rparen x_inlined1 = linebreak x_inlined2 = function_body
    {let fb =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                                    (
  FunctionDefinition_Fname_Lparen_Rparen_LineBreak_FunctionBody (f, l, fb)
)}

function_body:
  x = compound_command
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                 (
  FunctionBody_CompoundCommand c
)}
| x = compound_command x_inlined1 = redirect_list
    {let r =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                         (
  FunctionBody_CompoundCommand_RedirectList (c, r)
)}

fname:
  n = NAME
    {                                                                        (
  Fname_Name n
)}

brace_group:
  _1 = Lbrace x = compound_list _3 = Rbrace
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                          (
  BraceGroup_LBrace_CompoundList_RBrace c
)}

do_group:
  _1 = Do x = compound_list _3 = Done
    {let c =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                 (
  DoGroup_Do_CompoundList_Done c
)}

simple_command:
  x = cmd_prefix x_inlined1 = cmd_word x_inlined2 = cmd_suffix
    {let cs =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cw =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cp =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                                      (
  SimpleCommand_CmdPrefix_CmdWord_CmdSuffix (cp, cw, cs)
)}
| x = cmd_prefix x_inlined1 = cmd_word
    {let cw =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cp =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                              (
  SimpleCommand_CmdPrefix_CmdWord (cp, cw)
)}
| x = cmd_prefix
    {let cp =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                         (
  SimpleCommand_CmdPrefix cp
)}
| x = cmd_name x_inlined1 = cmd_suffix
    {let cs =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cn =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                              (
  SimpleCommand_CmdName_CmdSuffix (cn, cs)
)}
| x = cmd_name
    {let cn =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                       (
  SimpleCommand_CmdName cn
)}

cmd_name:
  x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                         (
  CmdName_Word w
)}

cmd_word:
  x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                         (
  CmdWord_Word w
)}

cmd_prefix:
  x = io_redirect
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                          (
  CmdPrefix_IoRedirect i
)}
| x = cmd_prefix x_inlined1 = io_redirect
    {let i =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cp =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                (
  CmdPrefix_CmdPrefix_IoRedirect (cp, i)
)}
| x = ASSIGNMENT_WORD
    {let a =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                             (
  CmdPrefix_AssignmentWord a
)}
| x = cmd_prefix x_inlined1 = ASSIGNMENT_WORD
    {let a =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cp =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                    (
  CmdPrefix_CmdPrefix_AssignmentWord (cp, a)
)}

cmd_suffix:
  x = io_redirect
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                          (
  CmdSuffix_IoRedirect i
)}
| x = cmd_suffix x_inlined1 = io_redirect
    {let i =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cs =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                (
  CmdSuffix_CmdSuffix_IoRedirect (cs, i)
)}
| x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                  (
  CmdSuffix_Word w
)}
| x = cmd_suffix x_inlined1 = word
    {let w =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let cs =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                         (
  CmdSuffix_CmdSuffix_Word (cs, w)
)}

redirect_list:
  x = io_redirect
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                          (
  RedirectList_IoRedirect i
)}
| x = redirect_list x_inlined1 = io_redirect
    {let i =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let r =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                  (
  RedirectList_RedirectList_IoRedirect (r, i)
)}

io_redirect:
  x = io_file
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                      (
  IoRedirect_IoFile i
)}
| ion = IO_NUMBER x = io_file
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                   (
  IoRedirect_IoNumber_IoFile (ion, i)
)}
| x = io_here
    {let ioh =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                       (
  IoRedirect_IoHere ioh
)}
| ion = IO_NUMBER x = io_here
    {let ioh =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                     (
  IoRedirect_IoNumber_IoHere (ion, ioh)
)}

io_file:
  _1 = LESS x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                            (
  IoFile_Less_FileName f
)}
| _1 = LESSAND x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  IoFile_LessAnd_FileName f
)}
| _1 = GREAT x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  IoFile_Great_FileName f
)}
| _1 = GREATAND x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  IoFile_GreatAnd_FileName f
)}
| _1 = DGREAT x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  IoFile_DGreat_FileName f
)}
| _1 = LESSGREAT x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
 IoFile_LessGreat_FileName f
)}
| _1 = CLOBBER x = filename
    {let f =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                (
  IoFile_Clobber_FileName f
)}

filename:
  x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                           (
  Filename_Word w
)}

io_here:
  heredocument_placeholder = DLESS x = here_end
    {let he =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                       (
  IoHere_DLess_HereEnd (he, heredocument_placeholder)
)}
| heredocument_placeholder = DLESSDASH x = here_end
    {let he =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                          (
  IoHere_DLessDash_HereEnd (he, heredocument_placeholder)
)}

here_end:
  x = word
    {let w =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                                           (
  HereEnd_Word w
)}

newline_list:
  _1 = NEWLINE
    {          (
  NewLineList_NewLine
)}
| x = newline_list _2 = NEWLINE
    {let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                  (
  NewLineList_NewLineList_NewLine l
)}

linebreak:
  x = newline_list
    {let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                   (
  LineBreak_NewLineList n
)}
| 
    {              (
  LineBreak_Empty
)}

separator_op:
  _1 = Uppersand
    {                         (
  SeparatorOp_Uppersand
)}
| _1 = Semicolon
    {            (
  SeparatorOp_Semicolon
)}

separator:
  x = separator_op x_inlined1 = linebreak
    {let l =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                         (
  Separator_SeparatorOp_LineBreak (s, l)
)}
| x = newline_list
    {let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                          (
  Separator_NewLineList n
)}

sequential_sep:
  _1 = Semicolon x = linebreak
    {let l =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                                                (
  SequentialSep_Semicolon_LineBreak l
)}
| x = newline_list
    {let n =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
                          (
  CSTHelpers.with_poss _startpos _endpos x
)
in
                          (
  SequentialSep_NewLineList n
)}

word:
  w = WORD
    {             (
  w
)}
| n = NAME
    {         (
  CSTHelpers.word_of_name n
)}

intended_error:
  _1 = INTENDED_ERROR
    {                               (
  ()
)}

%%
