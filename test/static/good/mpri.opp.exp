%{

open RawLambda

%}
%start entry
%token <RawLambda.binop> ADDOP
%token ARROW
%token EOF
%token EQ
%token FUN
%token <string> IDENT
%token IN
%token <int> INTLITERAL
%token LET
%token LPAREN
%token <RawLambda.binop> MULOP
%token PRINT
%token REC
%token RPAREN
%type <RawLambda.term> entry
%%

entry:
  x = any_term_ _2 = EOF
    {let t =
  let t =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( t )
in
    ( t )}

atomic_term_:
  _1 = LPAREN x = any_term_ _3 = RPAREN
    {let t =
  let t =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( t )
in
    ( t.value )}
| x = IDENT
    {    ( Var x )}
| i = INTLITERAL
    {    ( Lit i )}

application_term_:
  t = atomic_term_
    {    ( t )}
| x = application_term_ x_inlined1 = atomic_term_
    {let t2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( { place = (_startpos, _endpos); value = x } )
in
let t1 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( { place = (_startpos, _endpos); value = x } )
in
    ( App (t1, t2) )}
| _1 = PRINT x = atomic_term_
    {let t2 =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
      ( { place = (_startpos, _endpos); value = x } )
in
    ( Print t2 )}

any_term_:
  t = left_associative_level_multiplicative_term__ADDOP_mkbinop_
    {let t =     ( t ) in
    ( t )}
| _1 = FUN x = IDENT _3 = ARROW x_inlined1 = any_term_
    {let t =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let t =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( t )
in
    ( Lam (x, t) )}
| _1 = LET mode = recursive x = IDENT _4 = EQ x_inlined1 = any_term_ _6 = IN x_inlined2 = any_term_
    {let t2 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined2_, _startpos_x_inlined2_, x_inlined2) in
  let t =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( t )
in
let t1 =
  let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
  let t =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( t )
in
    ( Let (mode, x, t1, t2) )}

left_associative_level_application_term__MULOP_mkbinop_:
  t = application_term_
    {    ( t )}
| x = left_associative_level_application_term__MULOP_mkbinop_ op = MULOP x_inlined1 = application_term_
    {let t =
  let t2 =
    let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
  let t1 =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( BinOp (t1, op, t2) )
in
    ( t )}

left_associative_level_multiplicative_term__ADDOP_mkbinop_:
  t = left_associative_level_application_term__MULOP_mkbinop_
    {let t =     ( t ) in
    ( t )}
| x = left_associative_level_multiplicative_term__ADDOP_mkbinop_ op = ADDOP t = left_associative_level_application_term__MULOP_mkbinop_
    {let t =
  let t2 =
    let x =     ( t ) in
    let (_endpos_x_, _startpos_x_) = (_endpos_t_, _startpos_t_) in
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
  let t1 =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
        ( { place = (_startpos, _endpos); value = x } )
  in
      ( BinOp (t1, op, t2) )
in
    ( t )}

recursive:
  _1 = REC
    {      ( Recursive )}
| 
    {      ( NonRecursive )}

%%
