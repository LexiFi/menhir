State 0:
## Known stack suffix:
##
## LR(1) items:
b' -> . b [ # ]
## Transitions:
-- On BAR shift to state 1
-- On name_clash_2_a shift to state 2
-- On b shift to state 3
## Reductions:

State 1:
## Known stack suffix:
## BAR
## LR(1) items:
name_clash_2_a -> BAR . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production name_clash_2_a -> BAR

State 2:
## Known stack suffix:
## name_clash_2_a
## LR(1) items:
b -> name_clash_2_a . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production b -> name_clash_2_a

State 3:
## Known stack suffix:
## b
## LR(1) items:
b' -> b . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept b

State 4:
## Known stack suffix:
##
## LR(1) items:
name_clash_1_a' -> . name_clash_1_a [ # ]
## Transitions:
-- On FOO shift to state 5
-- On name_clash_1_a1 shift to state 6
-- On name_clash_1_a shift to state 7
## Reductions:

State 5:
## Known stack suffix:
## FOO
## LR(1) items:
name_clash_1_a1 -> FOO . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production name_clash_1_a1 -> FOO

State 6:
## Known stack suffix:
## name_clash_1_a1
## LR(1) items:
name_clash_1_a -> name_clash_1_a1 . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production name_clash_1_a -> name_clash_1_a1

State 7:
## Known stack suffix:
## name_clash_1_a
## LR(1) items:
name_clash_1_a' -> name_clash_1_a . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept name_clash_1_a

