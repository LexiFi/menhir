File "netsem.mly", line 63, characters 27-31:
Warning: the token HASH is unused.
File "netsem.mly", line 111, characters 35-42:
Warning: the token T_TIMED is unused.
File "netsem.mly", line 848, characters 0-8:
Warning: symbol ipportop is unreachable from any of the start symbol(s).
%{
open Nettypes;;
open Holparselib;;
open Holtypes;;
open Parserlib;;
open Int64;;
open Ocamllib;;
open Libcalls;;
open Tcpcbtypes;;
open Tcpcbparserlib;;

exception Fatal of string;;

let uint_ipaddr_to_dstr ip fill=
  (Int64.to_string ((ip &. ((*uint*) 0xFF000000L)) >> 24)) ^ fill ^
  (Int64.to_string ((ip &. ((*uint*) 0x00FF0000L)) >> 16)) ^ fill ^
  (Int64.to_string ((ip &. ((*uint*) 0x0000FF00L)) >> 8)) ^ fill ^
  (Int64.to_string ((ip &. ((*uint*) 0x000000FFL))));;

let uint_ip_to_ip ip =
  ip_of_string (uint_ipaddr_to_dstr ip ".");;

let uint_netmask_to_netmask nm =
  netmask_of_int (Int64.to_int nm);;

let uint_ipopt_to_ipopt ipopt =
  match ipopt with
    None -> None
  | Some x -> Some (uint_ip_to_ip x);;

let uint_port_to_port port =
  port_of_int (Int64.to_int port);;

let uint_portopt_to_portopt portopt =
  match portopt with
    None -> None
  | Some x -> Some (uint_port_to_port x);;

let uint_pairopt_to_int_pairopt x =
  match x with
    None -> None
  | Some (x,y) -> Some (Int64.to_int x, Int64.to_int y);;

let uint_pair_to_int_pair x =
  match x with
    (a,b) -> (Int64.to_int a, Int64.to_int b);;

let rec foldlist l s r =
  match l with
    [] ->  (s, r)
  | x::xs ->
      let n = x s r in
      foldlist xs (fst n) (snd n) ;;

%}
%start main
%start spec3main
%token ACCEPT
%token ACK
%token ACKNO
%token ASSIGN
%token BIND
%token BYTE
%token CLOSE
%token COMMA
%token <string> COMMENT
%token CONNECT
%token DATA
%token DISCONNECT
%token DOT
%token DUP
%token DUPFD
%token FALSE
%token FD
%token FIN
%token GETFILEFLAGS
%token GETIFADDRS
%token GETPEERNAME
%token GETSOCKBOPT
%token GETSOCKERR
%token GETSOCKLISTENING
%token GETSOCKNAME
%token GETSOCKNOPT
%token GETSOCKTOPT
%token HASH
%token ICMP
%token ICMP_BADHDR
%token ICMP_FILTER_PROHIB
%token ICMP_HOST
%token ICMP_HOST_PROHIB
%token ICMP_HOST_UNKNOWN
%token ICMP_INTRANS
%token ICMP_ISOLATED
%token ICMP_NEEDFRAG
%token ICMP_NEEDOPT
%token ICMP_NET
%token ICMP_NET_PROHIB
%token ICMP_NET_UNKNOWN
%token ICMP_PARAMPROB
%token ICMP_PORT
%token ICMP_PREC_CUTOFF
%token ICMP_PREC_VIOLATION
%token ICMP_PROTOCOL
%token ICMP_QUENCH
%token ICMP_REASS
%token ICMP_SOURCE_QUENCH
%token ICMP_SRCFAIL
%token ICMP_TIME_EXCEEDED
%token ICMP_TOSHOST
%token ICMP_TOSNET
%token ICMP_UNREACH
%token <string> IDENT
%token IFID
%token <int64> INT
%token IP
%token IS1
%token IS2
%token IS3
%token IS4
%token LHCALL
%token LHFAIL
%token LHLOOP
%token LHOK
%token LHRECV
%token LHRETURN
%token LHSEND
%token LISTEN
%token LN1_EPSILON
%token LN1_HOST
%token LPAREN
%token LSQBRKT
%token MINUS
%token MSS
%token NETMASK
%token NEVERTIMER
%token NONE
%token PORT
%token PROTO
%token PROTO_TCP
%token PROTO_UDP
%token PS1
%token PS2
%token PS3
%token PS4
%token PSELECT
%token PSH
%token RECEND
%token RECSTART
%token RECV
%token RPAREN
%token RSQBRKT
%token RST
%token SC
%token SCOMMENTEND
%token SCOMMENTSTART
%token SEND
%token SEQFOREIGN
%token SEQLOCAL
%token SEQNO
%token SETFILEFLAGS
%token SETSOCKBOPT
%token SETSOCKNOPT
%token SETSOCKTOPT
%token SHUTDOWN
%token SID
%token SOCKATMARK
%token SOCKET
%token SOCK_DGRAM
%token SOCK_STREAM
%token SOME
%token <string> STRING
%token SYN
%token TCP
%token TID
%token TIMEWINDOW
%token TIMEWINDOWCLOSED
%token TMSG_DONTWAIT
%token TMSG_OOB
%token TMSG_PEEK
%token TMSG_WAITALL
%token TO_ASYNC
%token TO_NONBLOCK
%token TRACE
%token TRUE
%token TS
%token TSIGABRT
%token TSIGALRM
%token TSIGBUS
%token TSIGCHLD
%token TSIGCONT
%token TSIGFPE
%token TSIGHUP
%token TSIGILL
%token TSIGINT
%token TSIGKILL
%token TSIGPIPE
%token TSIGPOLL
%token TSIGPROF
%token TSIGQUIT
%token TSIGSEGV
%token TSIGSTOP
%token TSIGSYS
%token TSIGTERM
%token TSIGTRAP
%token TSIGTSTP
%token TSIGTTIN
%token TSIGTTOU
%token TSIGURG
%token TSIGUSR1
%token TSIGUSR2
%token TSIGVTALRM
%token TSIGXCPU
%token TSIGXFSZ
%token TSO_BROADCAST
%token TSO_BSDCOMPAT
%token TSO_DONTROUTE
%token TSO_KEEPALIVE
%token TSO_LINGER
%token TSO_OOBINLINE
%token TSO_RCVBUF
%token TSO_RCVLOWAT
%token TSO_RCVTIMEO
%token TSO_REUSEADDR
%token TSO_SNDBUF
%token TSO_SNDLOWAT
%token TSO_SNDTIMEO
%token TSSEQ
%token TYPE
%token T_ABSTIME
%token T_CLOSED
%token T_CLOSE_WAIT
%token T_CLOSING
%token T_DURATION
%token T_ERR_E2BIG
%token T_ERR_EACCES
%token T_ERR_EADDRINUSE
%token T_ERR_EADDRNOTAVAIL
%token T_ERR_EAFNOSUPPORT
%token T_ERR_EAGAIN
%token T_ERR_EALREADY
%token T_ERR_EBADF
%token T_ERR_EBADMSG
%token T_ERR_EBUSY
%token T_ERR_ECANCELED
%token T_ERR_ECHILD
%token T_ERR_ECONNABORTED
%token T_ERR_ECONNREFUSED
%token T_ERR_ECONNRESET
%token T_ERR_EDEADLK
%token T_ERR_EDESTADDRREQ
%token T_ERR_EDOM
%token T_ERR_EDQUOT
%token T_ERR_EEXIST
%token T_ERR_EFAULT
%token T_ERR_EFBIG
%token T_ERR_EHOSTDOWN
%token T_ERR_EHOSTUNREACH
%token T_ERR_EIDRM
%token T_ERR_EILSEQ
%token T_ERR_EINPROGRESS
%token T_ERR_EINTR
%token T_ERR_EINVAL
%token T_ERR_EIO
%token T_ERR_EISCONN
%token T_ERR_EISDIR
%token T_ERR_ELOOP
%token T_ERR_EMFILE
%token T_ERR_EMLINK
%token T_ERR_EMSGSIZE
%token T_ERR_EMULTIHOP
%token T_ERR_ENAMETOOLONG
%token T_ERR_ENETDOWN
%token T_ERR_ENETRESET
%token T_ERR_ENETUNREACH
%token T_ERR_ENFILE
%token T_ERR_ENOBUFS
%token T_ERR_ENODATA
%token T_ERR_ENODEV
%token T_ERR_ENOENT
%token T_ERR_ENOEXEC
%token T_ERR_ENOLCK
%token T_ERR_ENOLINK
%token T_ERR_ENOMEM
%token T_ERR_ENOMSG
%token T_ERR_ENOPROTOOPT
%token T_ERR_ENOSPC
%token T_ERR_ENOSR
%token T_ERR_ENOSTR
%token T_ERR_ENOSYS
%token T_ERR_ENOTCONN
%token T_ERR_ENOTDIR
%token T_ERR_ENOTEMPTY
%token T_ERR_ENOTSOCK
%token T_ERR_ENOTSUP
%token T_ERR_ENOTTY
%token T_ERR_ENXIO
%token T_ERR_EOPNOTSUPP
%token T_ERR_EOVERFLOW
%token T_ERR_EPERM
%token T_ERR_EPIPE
%token T_ERR_EPROTO
%token T_ERR_EPROTONOSUPPORT
%token T_ERR_EPROTOTYPE
%token T_ERR_ERANGE
%token T_ERR_EROFS
%token T_ERR_ESHUTDOWN
%token T_ERR_ESPIPE
%token T_ERR_ESRCH
%token T_ERR_ESTALE
%token T_ERR_ETIME
%token T_ERR_ETIMEDOUT
%token T_ERR_ETXTBSY
%token T_ERR_EUNKNOWN_UNIX_ERROR
%token T_ERR_EWOULDBLOCK
%token T_ERR_EXDEV
%token T_ESTABLISHED
%token T_FIN_WAIT_1
%token T_FIN_WAIT_2
%token T_IRS
%token T_ISS
%token T_LAST_ACK
%token T_LAST_ACK_SENT
%token T_LH_EPSILON
%token T_LISTEN
%token T_RCV_ADV
%token T_RCV_NXT
%token T_RCV_SCALE
%token T_RCV_UP
%token T_RCV_WND
%token T_SND_CWND
%token T_SND_MAX
%token T_SND_NXT
%token T_SND_RECOVER
%token T_SND_SCALE
%token T_SND_SSTHRESH
%token T_SND_UNA
%token T_SND_WL1
%token T_SND_WL2
%token T_SND_WND
%token T_SYN_RECEIVED
%token T_SYN_SENT
%token T_TA_DROP
%token T_TA_INPUT
%token T_TA_OUTPUT
%token T_TA_RESPOND
%token T_TA_USER
%token T_TIMED
%token T_TIME_WAIT
%token T_TS_RECENT
%token T_T_DUPACKS
%token T_T_MAXSEG
%token T_T_RTTSEG
%token UDP
%token UNIT
%token URG
%token URP
%token WIN
%token WORD16
%token WS
%type <Parserlib.ns_parse_return> main
%type <Parserlib.spec3_parse_return> spec3main
%%

main:
  _1 = timecomment _2 = comment _3 = main_h
    {                             ( PARSE_RETURN(_1,_2,_3) )}

main_h:
  _1 = netcall _2 = SC
    {             ( _1 )}
| _1 = lib _2 = SC
    {            ( _1 )}
| _1 = trace _2 = SC
    {            ( _1 )}
| _1 = epsilon _2 = SC
    {             ( _1 )}
| _1 = abstime _2 = COMMENT
    {                  ( _1 )}

spec3main:
  _1 = timecomment _2 = comment _3 = spec3main_h
    {                                  ( SPEC3_PARSE_RETURN(_1,_2,_3) )}

spec3main_h:
  _1 = ln1host _2 = SC
    {             ( _1 )}
| _1 = ln1epsilon _2 = SC
    {                ( _1 )}
| _1 = ln1abstime _2 = COMMENT
    {                     ( _1 )}

ln1host:
  _1 = LN1_HOST _2 = LPAREN _3 = STRING _4 = COMMA _5 = ln1host_h _6 = RPAREN
    {                                                ( HOLLN1_HOST(_3,_5) )}

ln1host_h:
  _1 = netcall
    {          ( _1)}
| _1 = lib
    {      ( _1 )}
| _1 = trace
    {        ( _1 )}

ln1epsilon:
  _1 = LN1_EPSILON _2 = LPAREN _3 = T_DURATION _4 = intr _5 = intr _6 = RPAREN
    {                                                 ( HOLLN1_EPSILON(DURATION(_4,_5)) )}

ln1abstime:
  _1 = T_ABSTIME _2 = intr _3 = intr
    {                      ( HOLLN1_ABSTIME(_2, _3) )}

netcall:
  _1 = LHSEND _2 = LPAREN _3 = netparam _4 = RPAREN
    {                                ( HOLSNDMSG _3 )}
| _1 = LHLOOP _2 = LPAREN _3 = netparam _4 = RPAREN
    {                                ( HOLLOOPMSG _3 )}
| _1 = LHRECV _2 = LPAREN _3 = netparam _4 = RPAREN
    {                                ( HOLRCVMSG _3 )}

netparam:
  _1 = TCP _2 = LPAREN _3 = RECSTART _4 = tcpdetail _5 = RECEND _6 = RPAREN
    {    ( let p = foldlist _4 clear_tcp_status clear_tcp_hol in
      let _ = chk_missing_tcp (fst p) in
      let m = TCPMSG (snd p) in m )}
| _1 = UDP _2 = LPAREN _3 = RECSTART _4 = udpdetail _5 = RECEND _6 = RPAREN
    {    ( let p = foldlist _4 clear_udp_status clear_udp_hol in
      let _ = chk_missing_udp (fst p) in
      let m = UDPMSG (snd p) in m )}
| _1 = ICMP _2 = LPAREN _3 = RECSTART _4 = icmpdetail _5 = RECEND _6 = RPAREN
    {    ( let p = foldlist _4 clear_icmp_status clear_icmp_hol in
      let _ = chk_missing_icmp (fst p) in
      let m = ICMPMSG (snd p) in m )}

tcpdetail:
  _1 = tcpval
    {         ( [_1] )}
| _1 = tcpval _2 = SC _3 = tcpdetail
    {                      ( _1::_3 )}

icmpdetail:
  _1 = icmpval
    {          ( [_1] )}
| _1 = icmpval _2 = SC _3 = icmpdetail
    {                        ( _1::_3 )}

udpdetail:
  _1 = udpval
    {         ( [_1] )}
| _1 = udpval _2 = SC _3 = udpdetail
    {                      ( _1::_3 )}

tcpval:
  _1 = IS1 _2 = ASSIGN _3 = ipoption
    {                      ( update_tcp (HOL_TCP_IS1 _3) )}
| _1 = IS2 _2 = ASSIGN _3 = ipoption
    {                      ( update_tcp (HOL_TCP_IS2 _3) )}
| _1 = PS1 _2 = ASSIGN _3 = portoption
    {                        ( update_tcp (HOL_TCP_PS1 _3) )}
| _1 = PS2 _2 = ASSIGN _3 = portoption
    {                        ( update_tcp (HOL_TCP_PS2 _3) )}
| _1 = SEQNO _2 = ASSIGN _3 = seqlocal
    {                        ( update_tcp (HOL_TCP_SEQ _3) )}
| _1 = ACKNO _2 = ASSIGN _3 = seqforeign
    {                          ( update_tcp (HOL_TCP_ACK _3)  )}
| _1 = URG _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_URG _3) )}
| _1 = ACK _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_ACKF _3) )}
| _1 = PSH _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_PSH _3) )}
| _1 = RST _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_RST _3) )}
| _1 = SYN _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_SYN _3) )}
| _1 = FIN _2 = ASSIGN _3 = bool
    {                  ( update_tcp (HOL_TCP_FIN _3) )}
| _1 = WIN _2 = ASSIGN _3 = word16
    {                    ( update_tcp (HOL_TCP_WIN _3) )}
| _1 = URP _2 = ASSIGN _3 = word16
    {                    ( update_tcp (HOL_TCP_URP _3) )}
| _1 = MSS _2 = ASSIGN _3 = word16option
    {                          ( update_tcp (HOL_TCP_MSS _3) )}
| _1 = WS _2 = ASSIGN _3 = byteoption
    {                       ( update_tcp (HOL_TCP_SCALE _3) )}
| _1 = TS _2 = ASSIGN _3 = tsseqoption
    {                        ( update_tcp (HOL_TCP_TS _3) )}
| _1 = DATA _2 = ASSIGN _3 = datalist _4 = comment
    {                               ( update_tcp (HOL_TCP_DATA _3) )}

icmpval:
  _1 = IS1 _2 = ASSIGN _3 = ipoption
    {                      ( update_icmp (HOL_ICMP_IS1 _3) )}
| _1 = IS2 _2 = ASSIGN _3 = ipoption
    {                      ( update_icmp (HOL_ICMP_IS2 _3) )}
| _1 = IS3 _2 = ASSIGN _3 = ipoption
    {                      ( update_icmp (HOL_ICMP_IS3 _3) )}
| _1 = IS4 _2 = ASSIGN _3 = ipoption
    {                      ( update_icmp (HOL_ICMP_IS4 _3) )}
| _1 = PS3 _2 = ASSIGN _3 = portoption
    {                        ( update_icmp (HOL_ICMP_PS3 _3) )}
| _1 = PS4 _2 = ASSIGN _3 = portoption
    {                        ( update_icmp (HOL_ICMP_PS4 _3) )}
| _1 = PROTO _2 = ASSIGN _3 = protocol
    {                        ( update_icmp (HOL_ICMP_PROTO _3) )}
| _1 = SEQNO _2 = ASSIGN _3 = NONE
    {                    ( update_icmp (HOL_ICMP_SEQ None) )}
| _1 = TYPE _2 = ASSIGN _3 = icmptype
    {                       ( update_icmp (HOL_ICMP_TYPE _3) )}

protocol:
  _1 = PROTO_TCP
    {            ( PROTO_TCP )}
| _1 = PROTO_UDP
    {            ( PROTO_UDP )}

icmptype:
  _1 = ICMP_UNREACH _2 = icmp_unreach
    {                            ( ICMP_UNREACH _2 )}
| _1 = ICMP_PARAMPROB _2 = icmp_paramprob
    {                                ( ICMP_PARAMPROB _2 )}
| _1 = ICMP_SOURCE_QUENCH _2 = icmp_source_quench
    {                                        ( ICMP_SOURCE_QUENCH _2 )}
| _1 = ICMP_TIME_EXCEEDED _2 = icmp_time_exceeded
    {                                        ( ICMP_TIME_EXCEEDED _2 )}

icmp_unreach:
  _1 = ICMP_NET
    {           ( NET )}
| _1 = ICMP_HOST
    {            ( HOST )}
| _1 = ICMP_PROTOCOL
    {                ( PROTOCOL )}
| _1 = ICMP_PORT
    {            ( PORT )}
| _1 = ICMP_SRCFAIL
    {               ( SRCFAIL )}
| _1 = ICMP_NEEDFRAG _2 = word16option
    {                             ( NEEDFRAG _2 )}
| _1 = ICMP_NET_UNKNOWN
    {                   ( NET_UNKNOWN )}
| _1 = ICMP_HOST_UNKNOWN
    {                    ( HOST_UNKNOWN )}
| _1 = ICMP_ISOLATED
    {                ( ISOLATED )}
| _1 = ICMP_NET_PROHIB
    {                  ( NET_PROHIB )}
| _1 = ICMP_HOST_PROHIB
    {                   ( HOST_PROHIB )}
| _1 = ICMP_TOSNET
    {              ( TOSNET )}
| _1 = ICMP_TOSHOST
    {               ( TOSHOST )}
| _1 = ICMP_FILTER_PROHIB
    {                     ( FILTER_PROHIB )}
| _1 = ICMP_PREC_VIOLATION
    {                      ( PREC_VIOLATION )}
| _1 = ICMP_PREC_CUTOFF
    {                   ( PREC_CUTOFF )}

icmp_paramprob:
  _1 = ICMP_BADHDR
    {              ( BADHDR )}
| _1 = ICMP_NEEDOPT
    {               ( NEEDOPT )}

icmp_source_quench:
  _1 = ICMP_QUENCH
    {              ( QUENCH )}

icmp_time_exceeded:
  _1 = ICMP_INTRANS
    {               ( INTRANS )}
| _1 = ICMP_REASS
    {             ( REASS )}

udpval:
  _1 = IS1 _2 = ASSIGN _3 = ipoption
    {                      ( update_udp (HOL_UDP_IS1 _3) )}
| _1 = IS2 _2 = ASSIGN _3 = ipoption
    {                      ( update_udp (HOL_UDP_IS2 _3) )}
| _1 = PS1 _2 = ASSIGN _3 = portoption
    {                        ( update_udp (HOL_UDP_PS1 _3) )}
| _1 = PS2 _2 = ASSIGN _3 = portoption
    {                        ( update_udp (HOL_UDP_PS2 _3) )}
| _1 = DATA _2 = ASSIGN _3 = datalist _4 = comment
    {                               ( update_udp (HOL_UDP_DATA _3) )}

seqlocal:
  _1 = LPAREN _2 = seqlocal _3 = RPAREN
    {                         ( _2 )}
| _1 = SEQLOCAL _2 = word16
    {                  ( _2 )}

seqforeign:
  _1 = LPAREN _2 = seqforeign _3 = RPAREN
    {                           ( _2 )}
| _1 = SEQFOREIGN _2 = word16
    {                    ( _2 )}

tsseqoption:
  _1 = LPAREN _2 = tsseqoption _3 = RPAREN
    {                            ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = LPAREN _3 = TSSEQ _4 = word16 _5 = COMMA _6 = TSSEQ _7 = word16 _8 = RPAREN
    {                                                     ( Some(_4, _7) )}

datalist:
  _1 = LPAREN _2 = datalist _3 = RPAREN
    {                         ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                  ( [] )}
| _1 = LSQBRKT _2 = datalist2 _3 = RSQBRKT
    {                            ( _2 )}

datalist2:
  _1 = BYTE _2 = intr
    {            ( [_2] )}
| _1 = BYTE _2 = intr _3 = SC _4 = datalist2
    {                         ( _2::_4 )}

lib:
  _1 = LHCALL _2 = LPAREN _3 = tid _4 = COMMA _5 = call _6 = RPAREN
    {                                      ( LIBCALL (_3, _5) )}
| _1 = LHRETURN _2 = LPAREN _3 = tid _4 = COMMA _5 = return _6 = RPAREN
    {                                          ( LIBRETURN (_3, _5) )}

return:
  _1 = LPAREN _2 = return _3 = RPAREN
    {                        ( _2 )}
| _1 = returnok
    {           ( _1 )}
| _1 = returnfail
    {             ( _1 )}

returnok:
  _1 = LHOK _2 = returnok_inner
    {                      ( _2 )}

returnok_inner:
  _1 = UNIT
    {       ( OK_UNIT () )}
| _1 = LPAREN _2 = fd _3 = RPAREN
    {                   ( OK_FD (fd_of_int_private (Int64.to_int _2)) )}
| _1 = LPAREN _2 = bool _3 = RPAREN
    {                     ( OK_BOOL _2 )}
| _1 = LPAREN _2 = intr _3 = RPAREN
    {                     ( OK_INT (Int64.to_int _2) )}
| _1 = LPAREN _2 = ip _3 = COMMA _4 = port _5 = RPAREN
    {    ( OK_IP_PORT (uint_ip_to_ip _2, uint_port_to_port _4) )}
| _1 = LPAREN _2 = filebflaglist _3 = RPAREN
    {                              ( OK_FILEFLAGLIST (_2) )}
| _1 = LPAREN _2 = fdlisttriple _3 = RPAREN
    {                             ( OK_FDLISTTRIPLE _2 )}
| _1 = LPAREN _2 = stringr _3 = RPAREN
    {                        ( OK_STRING _2 )}
| _1 = LPAREN _2 = fdipport _3 = RPAREN
    {                         ( OK_FD_IP_PORT _2 )}
| _1 = LPAREN _2 = NONE _3 = COMMA _4 = portoption _5 = RPAREN
    {                                      ( OK_IPOPT_PORTOPT (None, uint_portopt_to_portopt _4) )}
| _1 = LPAREN _2 = SOME _3 = ip _4 = COMMA _5 = portoption _6 = RPAREN
    {                                         ( OK_IPOPT_PORTOPT (uint_ipopt_to_ipopt (Some _3),
						uint_portopt_to_portopt _5) )}
| _1 = LPAREN _2 = NONE _3 = RPAREN
    {                     ( OK_INT_INT_OPTION None )}
| _1 = LPAREN _2 = SOME _3 = intpair _4 = RPAREN
    {                             ( OK_INT_INT_OPTION (Some (uint_pair_to_int_pair _3)) )}
| _1 = LPAREN _2 = stringr _3 = COMMA _4 = ipportboolop _5 = RPAREN
    {                                          ( OK_STRING_IP_PORT_BOOL (_2, _4) )}
| _1 = LPAREN _2 = interfacelist _3 = RPAREN
    {                              ( OK_INTERFACE_LIST _2 )}

returnfail:
  _1 = LHFAIL _2 = LPAREN _3 = unixerror _4 = RPAREN
    {                                 ( FAIL _3 )}

call:
  _1 = LPAREN _2 = call _3 = RPAREN
    {                      ( _2 )}
| _1 = ACCEPT _2 = fd
    {    ( ACCEPT (fd_of_int_private (Int64.to_int _2)) )}
| _1 = BIND _2 = LPAREN _3 = fd _4 = COMMA _5 = ipoption _6 = COMMA _7 = portoption _8 = RPAREN
    {    ( BIND (fd_of_int_private (Int64.to_int _3),
	    uint_ipopt_to_ipopt _5,
	    uint_portopt_to_portopt _7) )}
| _1 = CLOSE _2 = fd
    {           ( CLOSE (fd_of_int_private (Int64.to_int _2)) )}
| _1 = CONNECT _2 = LPAREN _3 = fd _4 = COMMA _5 = ip _6 = COMMA _7 = portoption _8 = RPAREN
    {    ( CONNECT (fd_of_int_private (Int64.to_int _3),
	       uint_ip_to_ip _5 ,
	       uint_portopt_to_portopt _7) )}
| _1 = DISCONNECT _2 = fd
    {                ( DISCONNECT (fd_of_int_private (Int64.to_int _2)) )}
| _1 = DUP _2 = fd
    {    ( DUP (fd_of_int_private (Int64.to_int _2)) )}
| _1 = DUPFD _2 = LPAREN _3 = fd _4 = COMMA _5 = INT _6 = RPAREN
    {    ( DUPFD (fd_of_int_private (Int64.to_int _3),
	     Int64.to_int _5) )}
| _1 = GETFILEFLAGS _2 = fd
    {    ( GETFILEFLAGS (fd_of_int_private (Int64.to_int _2))  )}
| _1 = SETFILEFLAGS _2 = LPAREN _3 = fd _4 = COMMA _5 = filebflaglist _6 = RPAREN
    {    ( SETFILEFLAGS (fd_of_int_private (Int64.to_int _3), _5) )}
| _1 = GETIFADDRS _2 = UNIT
    {                  ( GETIFADDRS () )}
| _1 = GETSOCKNAME _2 = fd
    {    ( GETSOCKNAME (fd_of_int_private (Int64.to_int _2)) )}
| _1 = GETPEERNAME _2 = fd
    {    ( GETPEERNAME (fd_of_int_private (Int64.to_int _2)) )}
| _1 = GETSOCKBOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = sockbflag _6 = RPAREN
    {    ( GETSOCKBOPT (fd_of_int_private (Int64.to_int _3), _5) )}
| _1 = GETSOCKNOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = socknflag _6 = RPAREN
    {    ( GETSOCKNOPT (fd_of_int_private (Int64.to_int _3), _5) )}
| _1 = GETSOCKTOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = socktflag _6 = RPAREN
    {    ( GETSOCKTOPT (fd_of_int_private (Int64.to_int _3), _5) )}
| _1 = SETSOCKBOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = sockbflag _6 = COMMA _7 = bool _8 = RPAREN
    {    ( SETSOCKBOPT (fd_of_int_private (Int64.to_int _3), _5, _7) )}
| _1 = SETSOCKNOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = socknflag _6 = COMMA _7 = intr _8 = RPAREN
    {    ( SETSOCKNOPT (fd_of_int_private (Int64.to_int _3), _5,
		   Int64.to_int _7) )}
| _1 = SETSOCKTOPT _2 = LPAREN _3 = fd _4 = COMMA _5 = socktflag _6 = COMMA _7 = topt _8 = RPAREN
    {    ( SETSOCKTOPT (fd_of_int_private (Int64.to_int _3), _5,
		   uint_pairopt_to_int_pairopt _7 ) )}
| _1 = LISTEN _2 = LPAREN _3 = fd _4 = COMMA _5 = intr _6 = RPAREN
    {    ( LISTEN (fd_of_int_private (Int64.to_int _3), Int64.to_int _5) )}
| _1 = PSELECT _2 = pselectopts
    {                      ( _2 )}
| _1 = RECV _2 = LPAREN _3 = fd _4 = COMMA _5 = intr _6 = COMMA _7 = msgbflaglist _8 = RPAREN
    {    ( RECV (fd_of_int_private (Int64.to_int _3), Int64.to_int _5, _7) )}
| _1 = SEND _2 = LPAREN _3 = fd _4 = COMMA _5 = addrop _6 = COMMA _7 = stringr _8 = COMMA _9 = msgbflaglist _10 = RPAREN
    {    ( SEND (fd_of_int_private (Int64.to_int _3), _5, _7, _9) )}
| _1 = SHUTDOWN _2 = LPAREN _3 = fd _4 = COMMA _5 = bool _6 = COMMA _7 = bool _8 = RPAREN
    {    ( SHUTDOWN (fd_of_int_private (Int64.to_int _3), _5, _7) )}
| _1 = SOCKATMARK _2 = fd
    {                ( SOCKATMARK (fd_of_int_private (Int64.to_int _2)) )}
| _1 = SOCKET _2 = LPAREN _3 = socktype _4 = RPAREN
    {                                ( SOCKET (_3) )}
| _1 = GETSOCKERR _2 = fd
    {    ( GETSOCKERR (fd_of_int_private (Int64.to_int _2))  )}
| _1 = GETSOCKLISTENING _2 = fd
    {    ( GETSOCKLISTENING (fd_of_int_private (Int64.to_int _2)) )}

tid:
  _1 = LPAREN _2 = tid _3 = RPAREN
    {                    ( _2 )}
| _1 = TID _2 = intr
    {           ( Ocamllib.tid_of_int_private (Int64.to_int _2) )}

filebflag:
  _1 = LPAREN _2 = filebflag _3 = RPAREN
    {                          ( _2 )}
| _1 = TO_NONBLOCK
    {              ( O_NONBLOCK )}
| _1 = TO_ASYNC
    {           ( O_ASYNC  )}

sockbflag:
  _1 = LPAREN _2 = sockbflag _3 = RPAREN
    {                          ( _2 )}
| _1 = TSO_BSDCOMPAT
    {                ( SO_BSDCOMPAT )}
| _1 = TSO_REUSEADDR
    {                ( SO_REUSEADDR )}
| _1 = TSO_KEEPALIVE
    {                ( SO_KEEPALIVE )}
| _1 = TSO_OOBINLINE
    {                ( SO_OOBINLINE )}
| _1 = TSO_DONTROUTE
    {                ( SO_DONTROUTE )}
| _1 = TSO_BROADCAST
    {                ( SO_BROADCAST )}

socknflag:
  _1 = LPAREN _2 = socknflag _3 = RPAREN
    {                          ( _2 )}
| _1 = TSO_SNDBUF
    {             ( SO_SNDBUF )}
| _1 = TSO_RCVBUF
    {             ( SO_RCVBUF )}
| _1 = TSO_SNDLOWAT
    {               ( SO_SNDLOWAT )}
| _1 = TSO_RCVLOWAT
    {               ( SO_RCVLOWAT )}

socktflag:
  _1 = LPAREN _2 = socktflag _3 = RPAREN
    {                          ( _2 )}
| _1 = TSO_LINGER
    {             ( SO_LINGER )}
| _1 = TSO_SNDTIMEO
    {               ( SO_SNDTIMEO )}
| _1 = TSO_RCVTIMEO
    {               ( SO_RCVTIMEO )}

msgbflag:
  _1 = LPAREN _2 = msgbflag _3 = RPAREN
    {                         ( _2 )}
| _1 = TMSG_PEEK
    {            ( MSG_PEEK )}
| _1 = TMSG_OOB
    {           ( MSG_OOB )}
| _1 = TMSG_WAITALL
    {               ( MSG_WAITALL )}
| _1 = TMSG_DONTWAIT
    {                ( MSG_DONTWAIT )}

signal:
  _1 = LPAREN _2 = signal _3 = RPAREN
    {                       ( _2 )}
| _1 = TSIGABRT
    {           ( SIGABRT )}
| _1 = TSIGALRM
    {           ( SIGALRM  )}
| _1 = TSIGBUS
    {           ( SIGBUS )}
| _1 = TSIGCHLD
    {           ( SIGCHLD )}
| _1 = TSIGCONT
    {           ( SIGCONT )}
| _1 = TSIGFPE
    {           ( SIGFPE )}
| _1 = TSIGHUP
    {           ( SIGHUP )}
| _1 = TSIGILL
    {           ( SIGILL )}
| _1 = TSIGINT
    {           ( SIGINT )}
| _1 = TSIGKILL
    {           ( SIGKILL )}
| _1 = TSIGPIPE
    {           ( SIGPIPE )}
| _1 = TSIGQUIT
    {           ( SIGQUIT )}
| _1 = TSIGSEGV
    {           ( SIGSEGV )}
| _1 = TSIGSTOP
    {           ( SIGSTOP )}
| _1 = TSIGTERM
    {           ( SIGTERM )}
| _1 = TSIGTSTP
    {           ( SIGTSTP )}
| _1 = TSIGTTIN
    {           ( SIGTTIN )}
| _1 = TSIGTTOU
    {           ( SIGTTOU )}
| _1 = TSIGUSR1
    {           ( SIGUSR1 )}
| _1 = TSIGUSR2
    {           ( SIGUSR2 )}
| _1 = TSIGPOLL
    {           ( SIGPOLL )}
| _1 = TSIGPROF
    {           ( SIGPROF )}
| _1 = TSIGSYS
    {           ( SIGSYS )}
| _1 = TSIGTRAP
    {           ( SIGTRAP )}
| _1 = TSIGURG
    {           ( SIGURG )}
| _1 = TSIGVTALRM
    {              ( SIGVTALRM )}
| _1 = TSIGXCPU
    {           ( SIGXCPU )}
| _1 = TSIGXFSZ
    {           ( SIGXFSZ )}

topt:
  _1 = LPAREN _2 = topt _3 = RPAREN
    {                     ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = intpair
    {               ( Some _2 )}

filebflaglist:
  _1 = LPAREN _2 = filebflaglist _3 = RPAREN
    {                              ( _2 )}
| _1 = LSQBRKT _2 = filebflaglisth _3 = RSQBRKT
    {                                  ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                  ( [] )}

filebflaglisth:
  _1 = filebflag
    {            ( [_1] )}
| _1 = filebflaglisth _2 = SC _3 = filebflag
    {                              ( _3 :: _1 )}

msgbflaglist:
  _1 = LPAREN _2 = msgbflaglist _3 = RPAREN
    {                             ( _2 )}
| _1 = LSQBRKT _2 = msgbflaglisth _3 = RSQBRKT
    {                                ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                  ( [] )}

msgbflaglisth:
  _1 = msgbflag
    {           ( [_1] )}
| _1 = msgbflaglisth _2 = SC _3 = msgbflag
    {                            ( _3 :: _1 )}

fdlist:
  _1 = LSQBRKT _2 = fdlisth _3 = RSQBRKT
    {                          ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                  ( [] )}

fdlisth:
  _1 = fd
    {     ( [fd_of_int_private (Int64.to_int _1)] )}
| _1 = fdlisth _2 = SC _3 = fd
    {                ( (fd_of_int_private (Int64.to_int _3))::_1 )}

siglistopt:
  _1 = LPAREN _2 = siglistopt _3 = RPAREN
    {                           ( _2 )}
| _1 = NONE
    {        ( None )}
| _1 = SOME _2 = siglist
    {               ( Some _2 )}

siglist:
  _1 = LPAREN _2 = siglist _3 = RPAREN
    {                        ( _2 )}
| _1 = LSQBRKT _2 = siglisth _3 = RSQBRKT
    {                           ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                  ( [] )}

siglisth:
  _1 = signal
    {         ( [_1] )}
| _1 = siglisth _2 = SC _3 = signal
    {                     ( _3 :: _1 )}

pselectopts:
  _1 = LPAREN _2 = pselectopts _3 = RPAREN
    {                            ( _2 )}
| _1 = fdlist _2 = COMMA _3 = fdlist _4 = COMMA _5 = fdlist _6 = COMMA _7 = topt _8 = COMMA _9 = siglistopt
    {    ( PSELECT (_1, _3, _5, uint_pairopt_to_int_pairopt _7, _9) )}

fdlisttriple:
  _1 = LPAREN _2 = fdlisttriple _3 = RPAREN
    {                             ( _2 )}
| _1 = fdlist _2 = COMMA _3 = LPAREN _4 = fdlist _5 = COMMA _6 = fdlist _7 = RPAREN
    {                                                 ( (_1, (_4, _6)) )}

fdipport:
  _1 = LPAREN _2 = fdipport _3 = RPAREN
    {                         ( _2 )}
| _1 = fd _2 = COMMA _3 = LPAREN _4 = ip _5 = COMMA _6 = port _7 = RPAREN
    {    ( (fd_of_int_private(Int64.to_int _1), (uint_ip_to_ip _4, uint_port_to_port _6)) )}

interfacelist:
  _1 = LPAREN _2 = interfacelist _3 = RPAREN
    {                              ( _2 )}
| _1 = LSQBRKT _2 = interfacelisth _3 = RSQBRKT
    {                                 ( _2 )}

interfacelisth:
  _1 = interface
    {            ( [_1] )}
| _1 = interfacelisth _2 = SC _3 = interface
    {                              ( _3 :: _1 )}

interface:
  _1 = LPAREN _2 = ifid _3 = COMMA _4 = ip _5 = COMMA _6 = iplist _7 = COMMA _8 = netmask _9 = RPAREN
    {                                                         ( (_2, uint_ip_to_ip _4, _6, uint_netmask_to_netmask _8) )}

ifid:
  _1 = LPAREN _2 = ifid _3 = RPAREN
    {                     ( _2 )}
| _1 = IFID _2 = IDENT
    {             ( ifid_of_string _2 )}

netmask:
  _1 = LPAREN _2 = netmask _3 = RPAREN
    {                        ( _2 )}
| _1 = NETMASK _2 = netmaskaddr
    {                        ( _2 )}

netmaskaddr:
  _1 = LPAREN _2 = netmaskaddr _3 = RPAREN
    {                            ( _2 )}
| _1 = INT
    {       ( _1 )}

trace:
  _1 = TRACE _2 = LPAREN _3 = traceaction _4 = COMMA _5 = tracesid _6 = COMMA _7 = traceaddr _8 = COMMA _9 = tracest _10 = COMMA _11 = RECSTART _12 = tcpcbdetail _13 = RECEND _14 = RPAREN
    {    ( let p = foldlist _12 clear_tcpcb_status clear_tcpcb in
      let _ = chk_missing_tcpcb (fst p) in
      let m = TCPTRACE(_3, _5, _7, _9, (snd p)) in m )}

traceaction:
  _1 = LPAREN _2 = traceaction _3 = RPAREN
    {                            ( _2 )}
| _1 = T_TA_OUTPUT
    {              ( TA_OUTPUT )}
| _1 = T_TA_INPUT
    {             ( TA_INPUT )}
| _1 = T_TA_USER
    {            ( TA_USER )}
| _1 = T_TA_RESPOND
    {               ( TA_RESPOND )}
| _1 = T_TA_DROP
    {            ( TA_DROP )}

tracesid:
  _1 = LPAREN _2 = tracesid _3 = RPAREN
    {                         ( _2 )}
| _1 = SID _2 = INT
    {          ( _2 )}

traceaddr:
  _1 = LPAREN _2 = traceaddr _3 = RPAREN
    {                          ( _2 )}
| _1 = SOME _2 = traceaddr_h
    {                   ( TRACEADDR(Some(_2)) )}
| _1 = NONE
    {       ( TRACEADDR(None) )}

traceaddr_h:
  _1 = LPAREN _2 = traceaddr_h _3 = RPAREN
    {                            ( _2 )}
| _1 = ipoption _2 = COMMA _3 = portoption _4 = COMMA _5 = ipoption _6 = COMMA _7 = portoption
    {    ( (_1, _3, _5, _7) )}

tracest:
  _1 = T_CLOSED
    {           ( TCPCB_CLOSED )}
| _1 = T_LISTEN
    {           ( TCPCB_LISTEN )}
| _1 = T_SYN_SENT
    {             ( TCPCB_SYN_SENT )}
| _1 = T_SYN_RECEIVED
    {                 ( TCPCB_SYN_RCVD )}
| _1 = T_ESTABLISHED
    {                ( TCPCB_ESTABLISHED )}
| _1 = T_CLOSE_WAIT
    {               ( TCPCB_CLOSE_WAIT )}
| _1 = T_FIN_WAIT_1
    {               ( TCPCB_FIN_WAIT_1 )}
| _1 = T_CLOSING
    {            ( TCPCB_CLOSING )}
| _1 = T_LAST_ACK
    {             ( TCPCB_LAST_ACK )}
| _1 = T_FIN_WAIT_2
    {               ( TCPCB_FIN_WAIT_2 )}
| _1 = T_TIME_WAIT
    {              ( TCPCB_TIME_WAIT )}

tcpcbdetail:
  _1 = tcpcb
    {        ( [_1] )}
| _1 = tcpcb _2 = SC _3 = tcpcbdetail
    {                       ( _1::_3 )}

timepair:
  _1 = LPAREN _2 = timepair _3 = RPAREN
    {                         ( _2 )}
| _1 = TSSEQ _2 = word16 _3 = COMMA _4 = NEVERTIMER
    {                                ( (_2, NEVER_TIMER) )}

tsrecent:
  _1 = LPAREN _2 = tsrecent _3 = RPAREN
    {                         ( _2 )}
| _1 = TIMEWINDOWCLOSED
    {                   ( TimeWindowClosed )}
| _1 = TIMEWINDOW _2 = timepair
    {                      ( TimeWindow (fst _2, snd _2) )}

tcpcb:
  _1 = T_SND_UNA _2 = ASSIGN _3 = seqlocal
    {                            ( update_tcpcb (TCPCB_SND_UNA _3) )}
| _1 = T_SND_MAX _2 = ASSIGN _3 = seqlocal
    {                            ( update_tcpcb (TCPCB_SND_MAX _3) )}
| _1 = T_SND_NXT _2 = ASSIGN _3 = seqlocal
    {                            ( update_tcpcb (TCPCB_SND_NXT _3) )}
| _1 = T_SND_WL1 _2 = ASSIGN _3 = seqforeign
    {                              ( update_tcpcb (TCPCB_SND_WL1 _3) )}
| _1 = T_SND_WL2 _2 = ASSIGN _3 = seqlocal
    {                            ( update_tcpcb (TCPCB_SND_WL2 _3) )}
| _1 = T_ISS _2 = ASSIGN _3 = seqlocal
    {                        ( update_tcpcb (TCPCB_ISS _3) )}
| _1 = T_SND_WND _2 = ASSIGN _3 = intr
    {                        ( update_tcpcb (TCPCB_SND_WND _3) )}
| _1 = T_SND_CWND _2 = ASSIGN _3 = intr
    {                         ( update_tcpcb (TCPCB_SND_CWND _3) )}
| _1 = T_SND_SSTHRESH _2 = ASSIGN _3 = intr
    {                             ( update_tcpcb (TCPCB_SND_SSTHRESH _3) )}
| _1 = T_RCV_WND _2 = ASSIGN _3 = intr
    {                        ( update_tcpcb (TCPCB_RCV_WND _3) )}
| _1 = T_RCV_NXT _2 = ASSIGN _3 = seqforeign
    {                              ( update_tcpcb (TCPCB_RCV_NXT _3) )}
| _1 = T_RCV_UP _2 = ASSIGN _3 = seqforeign
    {                             ( update_tcpcb (TCPCB_RCV_UP _3) )}
| _1 = T_IRS _2 = ASSIGN _3 = seqforeign
    {                          ( update_tcpcb (TCPCB_IRS _3) )}
| _1 = T_RCV_ADV _2 = ASSIGN _3 = seqforeign
    {                              ( update_tcpcb (TCPCB_RCV_ADV _3) )}
| _1 = T_SND_RECOVER _2 = ASSIGN _3 = seqlocal
    {                                ( update_tcpcb (TCPCB_SND_RECOVER _3) )}
| _1 = T_T_MAXSEG _2 = ASSIGN _3 = intr
    {                         ( update_tcpcb (TCPCB_T_MAXSEG _3) )}
| _1 = T_T_DUPACKS _2 = ASSIGN _3 = intr
    {                          ( update_tcpcb (TCPCB_T_DUPACKS _3) )}
| _1 = T_T_RTTSEG _2 = ASSIGN _3 = rttsegopt
    {                              ( update_tcpcb (TCPCB_T_RTTSEG _3) )}
| _1 = T_SND_SCALE _2 = ASSIGN _3 = intr
    {                          ( update_tcpcb (TCPCB_SND_SCALE _3) )}
| _1 = T_RCV_SCALE _2 = ASSIGN _3 = intr
    {                          ( update_tcpcb (TCPCB_RCV_SCALE _3) )}
| _1 = T_TS_RECENT _2 = ASSIGN _3 = tsrecent
    {                              ( update_tcpcb (TCPCB_TS_RECENT _3) )}
| _1 = T_LAST_ACK_SENT _2 = ASSIGN _3 = seqforeign
    {                                    ( update_tcpcb (TCPCB_LAST_ACK_SENT _3) )}

rttsegopt:
  _1 = LPAREN _2 = rttsegopt _3 = RPAREN
    {                          ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = rttseg
    {              ( Some(_2) )}

rttseg:
  _1 = LPAREN _2 = rttseg _3 = RPAREN
    {                       ( _2 )}
| _1 = tsseq _2 = COMMA _3 = seqlocal
    {                       ( (_1, _3) )}

tsseq:
  _1 = LPAREN _2 = tsseq _3 = RPAREN
    {                      ( _2 )}
| _1 = TSSEQ _2 = word16
    {               ( _2 )}

epsilon:
  _1 = T_LH_EPSILON _2 = LPAREN _3 = T_DURATION _4 = intr _5 = intr _6 = RPAREN
    {                                                  ( HOLEPSILON (DURATION(_4, _5)) )}

abstime:
  _1 = LPAREN _2 = abstime _3 = RPAREN
    {                        ( _2 )}
| _1 = T_ABSTIME _2 = intr _3 = intr
    {                      ( HOLABSTIME(_2, _3) )}

bool:
  _1 = LPAREN _2 = bool _3 = RPAREN
    {                     ( _2 )}
| _1 = TRUE
    {       ( true )}
| _1 = FALSE
    {        ( false )}

intr:
  _1 = LPAREN _2 = intr _3 = RPAREN
    {                     ( _2 )}
| _1 = INT
    {      ( _1 )}
| _1 = MINUS _2 = INT
    {            ( Int64.neg(_2) )}

intpair:
  _1 = LPAREN _2 = intpair _3 = RPAREN
    {                        ( _2 )}
| _1 = intr _2 = COMMA _3 = intr
    {                  ( (_1, _3) )}

ip:
  _1 = LPAREN _2 = ip _3 = RPAREN
    {                   ( _2 )}
| _1 = IP _2 = ipaddr
    {            ( _2 )}

ipaddr:
  _1 = LPAREN _2 = ipaddr _3 = RPAREN
    {                       ( _2 )}
| _1 = INT _2 = INT _3 = INT _4 = INT
    {                  ( (_1 << 24) |. (_2 << 16) |. (_3 << 8) |. _4 )}

ipoption:
  _1 = LPAREN _2 = ipoption _3 = RPAREN
    {                         ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = ip
    {          ( ip_option_of_uint _2 )}

iplist:
  _1 = LSQBRKT _2 = ips _3 = RSQBRKT
    {                      ( _2 )}
| _1 = LSQBRKT _2 = RSQBRKT
    {                      ( [] )}

ips:
  _1 = ip
    {     ( [uint_ip_to_ip _1] )}
| _1 = ip _2 = SC _3 = ips
    {            ( (uint_ip_to_ip _1)::_3 )}

port:
  _1 = LPAREN _2 = port _3 = RPAREN
    {                     ( _2 )}
| _1 = PORT _2 = intr
    {            ( _2 )}

portoption:
  _1 = LPAREN _2 = portoption _3 = RPAREN
    {                           ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = port
    {            ( port_option_of_uint _2 )}

word16:
  _1 = LPAREN _2 = word16 _3 = RPAREN
    {                       ( _2 )}
| _1 = WORD16 _2 = intr
    {              ( _2 )}

word16option:
  _1 = LPAREN _2 = word16option _3 = RPAREN
    {                             ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = word16
    {              ( Some _2 )}

byte:
  _1 = LPAREN _2 = byte _3 = RPAREN
    {                     ( _2 )}
| _1 = BYTE _2 = intr
    {            ( _2 )}

byteoption:
  _1 = LPAREN _2 = byteoption _3 = RPAREN
    {                           ( _2 )}
| _1 = NONE
    {       ( None )}
| _1 = SOME _2 = byte
    {            ( Some _2 )}

stringr:
  _1 = LPAREN _2 = stringr _3 = RPAREN
    {                        ( _2 )}
| _1 = STRING
    {         ( _1 )}

fd:
  _1 = LPAREN _2 = fd _3 = RPAREN
    {                   ( _2 )}
| _1 = FD _2 = intr
    {          ( _2 )}

addrop:
  _1 = NONE
    {       ( None )}
| _1 = LPAREN _2 = addrop _3 = RPAREN
    {                       ( _2 )}
| _1 = SOME _2 = LPAREN _3 = ip _4 = COMMA _5 = port _6 = RPAREN
    {                                   ( Some(uint_ip_to_ip _3, uint_port_to_port _5) )}

ipportboolop:
  _1 = NONE
    {       ( None )}
| _1 = LPAREN _2 = ipportboolop _3 = RPAREN
    {                             ( _2 )}
| _1 = SOME _2 = LPAREN _3 = ipport _4 = COMMA _5 = bool _6 = RPAREN
    {                                       ( Some(_3, _5) )}

ipport:
  _1 = LPAREN _2 = ipport _3 = RPAREN
    {                       ( _2 )}
| _1 = LPAREN _2 = ipoption _3 = COMMA _4 = portoption _5 = RPAREN
    {                                          ( (uint_ipopt_to_ipopt _2, uint_portopt_to_portopt _4) )}

socktype:
  _1 = SOCK_DGRAM
    {             ( SOCK_DGRAM )}
| _1 = SOCK_STREAM
    {              ( SOCK_STREAM )}

timecomment:
  _1 = SCOMMENTSTART _2 = intr _3 = DOT _4 = intr _5 = stringr _6 = SCOMMENTEND
    {    ( Some(TIMECOMMENT(_2*.(uint 1000000)+._4, _5)) )}
| 
    {  ( None )}

comment_h:
  _1 = COMMENT
    {          ( [_1] )}
| _1 = comment_h _2 = COMMENT
    {                    ( _2 :: _1 )}

comment:
  _1 = comment_h
    {            ( Some _1 )}
| 
    {  ( None )}

unixerror:
  _1 = T_ERR_E2BIG
    {              ( E2BIG )}
| _1 = T_ERR_EACCES
    {               ( EACCES )}
| _1 = T_ERR_EADDRINUSE
    {                   ( EADDRINUSE )}
| _1 = T_ERR_EADDRNOTAVAIL
    {                      ( EADDRNOTAVAIL )}
| _1 = T_ERR_EAFNOSUPPORT
    {                     ( EAFNOSUPPORT )}
| _1 = T_ERR_EAGAIN
    {               ( EAGAIN )}
| _1 = T_ERR_EWOULDBLOCK
    {                    ( EWOULDBLOCK )}
| _1 = T_ERR_EALREADY
    {                 ( EALREADY )}
| _1 = T_ERR_EBADF
    {              ( EBADF )}
| _1 = T_ERR_EBADMSG
    {                ( EBADMSG )}
| _1 = T_ERR_EBUSY
    {              ( EBUSY )}
| _1 = T_ERR_ECANCELED
    {                  ( ECANCELED )}
| _1 = T_ERR_ECHILD
    {               ( ECHILD )}
| _1 = T_ERR_ECONNABORTED
    {                     ( ECONNABORTED )}
| _1 = T_ERR_ECONNREFUSED
    {                     ( ECONNREFUSED )}
| _1 = T_ERR_ECONNRESET
    {                   ( ECONNRESET )}
| _1 = T_ERR_EDEADLK
    {                ( EDEADLK )}
| _1 = T_ERR_EDESTADDRREQ
    {                     ( EDESTADDRREQ )}
| _1 = T_ERR_EDOM
    {             ( EDOM )}
| _1 = T_ERR_EDQUOT
    {               ( EDQUOT )}
| _1 = T_ERR_EEXIST
    {               ( EEXIST )}
| _1 = T_ERR_EFAULT
    {               ( EFAULT )}
| _1 = T_ERR_EFBIG
    {              ( EFBIG )}
| _1 = T_ERR_EHOSTUNREACH
    {                     ( EHOSTUNREACH )}
| _1 = T_ERR_EIDRM
    {              ( EIDRM )}
| _1 = T_ERR_EILSEQ
    {               ( EILSEQ )}
| _1 = T_ERR_EINPROGRESS
    {                    ( EINPROGRESS )}
| _1 = T_ERR_EINTR
    {              ( EINTR )}
| _1 = T_ERR_EINVAL
    {               ( EINVAL )}
| _1 = T_ERR_EIO
    {            ( EIO )}
| _1 = T_ERR_EISCONN
    {                ( EISCONN )}
| _1 = T_ERR_EISDIR
    {               ( EISDIR )}
| _1 = T_ERR_ELOOP
    {              ( ELOOP )}
| _1 = T_ERR_EMFILE
    {               ( EMFILE )}
| _1 = T_ERR_EMLINK
    {               ( EMLINK )}
| _1 = T_ERR_EMSGSIZE
    {                 ( EMSGSIZE )}
| _1 = T_ERR_EMULTIHOP
    {                  ( EMULTIHOP )}
| _1 = T_ERR_ENAMETOOLONG
    {                     ( ENAMETOOLONG )}
| _1 = T_ERR_ENETDOWN
    {                 ( ENETDOWN )}
| _1 = T_ERR_ENETRESET
    {                  ( ENETRESET )}
| _1 = T_ERR_ENETUNREACH
    {                    ( ENETUNREACH )}
| _1 = T_ERR_ENFILE
    {               ( ENFILE )}
| _1 = T_ERR_ENOBUFS
    {                ( ENOBUFS )}
| _1 = T_ERR_ENODATA
    {                ( ENODATA )}
| _1 = T_ERR_ENODEV
    {               ( ENODEV )}
| _1 = T_ERR_ENOENT
    {               ( ENOENT )}
| _1 = T_ERR_ENOEXEC
    {                ( ENOEXEC )}
| _1 = T_ERR_ENOLCK
    {               ( ENOLCK )}
| _1 = T_ERR_ENOLINK
    {                ( ENOLINK )}
| _1 = T_ERR_ENOMEM
    {               ( ENOMEM )}
| _1 = T_ERR_ENOMSG
    {               ( ENOMSG )}
| _1 = T_ERR_ENOPROTOOPT
    {                    ( ENOPROTOOPT )}
| _1 = T_ERR_ENOSPC
    {               ( ENOSPC )}
| _1 = T_ERR_ENOSR
    {              ( ENOSR )}
| _1 = T_ERR_ENOSTR
    {               ( ENOSTR )}
| _1 = T_ERR_ENOSYS
    {               ( ENOSYS )}
| _1 = T_ERR_ENOTCONN
    {                 ( ENOTCONN )}
| _1 = T_ERR_ENOTDIR
    {                ( ENOTDIR )}
| _1 = T_ERR_ENOTEMPTY
    {                  ( ENOTEMPTY )}
| _1 = T_ERR_ENOTSOCK
    {                 ( ENOTSOCK )}
| _1 = T_ERR_ENOTSUP
    {                ( ENOTSUP )}
| _1 = T_ERR_ENOTTY
    {               ( ENOTTY )}
| _1 = T_ERR_ENXIO
    {              ( ENXIO )}
| _1 = T_ERR_EOPNOTSUPP
    {                   ( EOPNOTSUPP )}
| _1 = T_ERR_EOVERFLOW
    {                  ( EOVERFLOW )}
| _1 = T_ERR_EPERM
    {              ( EPERM )}
| _1 = T_ERR_EPIPE
    {              ( EPIPE )}
| _1 = T_ERR_EPROTO
    {               ( EPROTO )}
| _1 = T_ERR_EPROTONOSUPPORT
    {                        ( EPROTONOSUPPORT )}
| _1 = T_ERR_EPROTOTYPE
    {                   ( EPROTOTYPE )}
| _1 = T_ERR_ERANGE
    {               ( ERANGE )}
| _1 = T_ERR_EROFS
    {              ( EROFS )}
| _1 = T_ERR_ESPIPE
    {               ( ESPIPE )}
| _1 = T_ERR_ESRCH
    {              ( ESRCH )}
| _1 = T_ERR_ESTALE
    {               ( ESTALE )}
| _1 = T_ERR_ETIME
    {              ( ETIME )}
| _1 = T_ERR_ETIMEDOUT
    {                  ( ETIMEDOUT )}
| _1 = T_ERR_ETXTBSY
    {                ( ETXTBSY )}
| _1 = T_ERR_EXDEV
    {              ( EXDEV )}
| _1 = T_ERR_ESHUTDOWN
    {                  ( ESHUTDOWN )}
| _1 = T_ERR_EHOSTDOWN
    {                  ( EHOSTDOWN )}
| _1 = T_ERR_EUNKNOWN_UNIX_ERROR
    {                            ( EUNKNOWN_UNIX_ERROR )}

%%
